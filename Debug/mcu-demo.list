
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007328  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080073e4  080073e4  000173e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007620  08007620  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007620  08007620  00017620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007628  08007628  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800762c  0800762c  0001762c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  2000005c  0800768c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800768c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c34  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd4  00000000  00000000  00037cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  0003acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c0  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b179  00000000  00000000  0003d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f56  00000000  00000000  00058461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aef5a  00000000  00000000  000723b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000532c  00000000  00000000  00121314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00126640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080073cc 	.word	0x080073cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	080073cc 	.word	0x080073cc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 ff35 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f88f 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fb1b 	bl	8000c88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 facb 	bl	8000bec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000656:	f000 f8d1 	bl	80007fc <MX_ADC1_Init>
  MX_I2C1_Init();
 800065a:	f000 f935 	bl	80008c8 <MX_I2C1_Init>
  MX_TIM2_Init();
 800065e:	f000 f973 	bl	8000948 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000662:	f000 f9c5 	bl	80009f0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000666:	f000 fa45 	bl	8000af4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800066a:	f000 fa81 	bl	8000b70 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 800066e:	4b36      	ldr	r3, [pc, #216]	; (8000748 <main+0x108>)
 8000670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000672:	4b35      	ldr	r3, [pc, #212]	; (8000748 <main+0x108>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	63da      	str	r2, [r3, #60]	; 0x3c
 800067a:	4b33      	ldr	r3, [pc, #204]	; (8000748 <main+0x108>)
 800067c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000686:	4b30      	ldr	r3, [pc, #192]	; (8000748 <main+0x108>)
 8000688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068a:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <main+0x108>)
 800068c:	2110      	movs	r1, #16
 800068e:	430a      	orrs	r2, r1
 8000690:	63da      	str	r2, [r3, #60]	; 0x3c
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <main+0x108>)
 8000694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000696:	2210      	movs	r2, #16
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <main+0x108>)
 80006a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <main+0x108>)
 80006a4:	2120      	movs	r1, #32
 80006a6:	430a      	orrs	r2, r1
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80006aa:	4b27      	ldr	r3, [pc, #156]	; (8000748 <main+0x108>)
 80006ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ae:	2220      	movs	r2, #32
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200f      	movs	r0, #15
 80006bc:	f001 fce4 	bl	8002088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006c0:	200f      	movs	r0, #15
 80006c2:	f001 fcf6 	bl	80020b2 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2011      	movs	r0, #17
 80006cc:	f001 fcdc 	bl	8002088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80006d0:	2011      	movs	r0, #17
 80006d2:	f001 fcee 	bl	80020b2 <HAL_NVIC_EnableIRQ>


  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2012      	movs	r0, #18
 80006dc:	f001 fcd4 	bl	8002088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 80006e0:	2012      	movs	r0, #18
 80006e2:	f001 fce6 	bl	80020b2 <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <main+0x10c>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f003 fb4b 	bl	8003d84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <main+0x110>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 fb47 	bl	8003d84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <main+0x114>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f003 fb43 	bl	8003d84 <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <main+0x118>)
 8000700:	2100      	movs	r1, #0
 8000702:	0018      	movs	r0, r3
 8000704:	f003 fbfa 	bl	8003efc <HAL_TIM_PWM_Start>

  // Scan I2C addresses on startup
  //i2cScanner();

  // I2C Display
  hardwareTestLCD();
 8000708:	f000 fb70 	bl	8000dec <hardwareTestLCD>

  // Variables
  int servoAngle;
  int adcValue;
  stateTracker = 1;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <main+0x11c>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
	  //adcValue = getAdcFromPot();
	  //servoAngle = myMap(adcValue, 60, 4095, 0, 180);
	  //motorControl(servoAngle);

	 // Debug message
	 sprintf(msg, "Current State: %hu\n\r", stateTracker);
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <main+0x11c>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4912      	ldr	r1, [pc, #72]	; (8000760 <main+0x120>)
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <main+0x124>)
 800071a:	0018      	movs	r0, r3
 800071c:	f006 f9b0 	bl	8006a80 <siprintf>
	 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <main+0x124>)
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff fcee 	bl	8000104 <strlen>
 8000728:	0003      	movs	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	2301      	movs	r3, #1
 800072e:	425b      	negs	r3, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <main+0x124>)
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <main+0x128>)
 8000734:	f004 fcb8 	bl	80050a8 <HAL_UART_Transmit>

	 // State decider
	 stateMachineDecider();
 8000738:	f000 fb78 	bl	8000e2c <stateMachineDecider>

	 HAL_Delay(500);
 800073c:	23fa      	movs	r3, #250	; 0xfa
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	0018      	movs	r0, r3
 8000742:	f000 ff3d 	bl	80015c0 <HAL_Delay>
	 sprintf(msg, "Current State: %hu\n\r", stateTracker);
 8000746:	e7e4      	b.n	8000712 <main+0xd2>
 8000748:	40021000 	.word	0x40021000
 800074c:	20000130 	.word	0x20000130
 8000750:	200001c8 	.word	0x200001c8
 8000754:	20000214 	.word	0x20000214
 8000758:	2000017c 	.word	0x2000017c
 800075c:	2000030c 	.word	0x2000030c
 8000760:	080073e4 	.word	0x080073e4
 8000764:	200002f4 	.word	0x200002f4
 8000768:	20000260 	.word	0x20000260

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b093      	sub	sp, #76	; 0x4c
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	2410      	movs	r4, #16
 8000774:	193b      	adds	r3, r7, r4
 8000776:	0018      	movs	r0, r3
 8000778:	2338      	movs	r3, #56	; 0x38
 800077a:	001a      	movs	r2, r3
 800077c:	2100      	movs	r1, #0
 800077e:	f006 f99f 	bl	8006ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000782:	003b      	movs	r3, r7
 8000784:	0018      	movs	r0, r3
 8000786:	2310      	movs	r3, #16
 8000788:	001a      	movs	r2, r3
 800078a:	2100      	movs	r1, #0
 800078c:	f006 f998 	bl	8006ac0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	0018      	movs	r0, r3
 8000796:	f002 fbd5 	bl	8002f44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2202      	movs	r2, #2
 800079e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	0052      	lsls	r2, r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2240      	movs	r2, #64	; 0x40
 80007b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fc0d 	bl	8002fdc <HAL_RCC_OscConfig>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007c6:	f000 fbdf 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	003b      	movs	r3, r7
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	003b      	movs	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e2:	003b      	movs	r3, r7
 80007e4:	2100      	movs	r1, #0
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 ff12 	bl	8003610 <HAL_RCC_ClockConfig>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007f0:	f000 fbca 	bl	8000f88 <Error_Handler>
  }
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b013      	add	sp, #76	; 0x4c
 80007fa:	bd90      	pop	{r4, r7, pc}

080007fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	0018      	movs	r0, r3
 8000806:	230c      	movs	r3, #12
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f006 f958 	bl	8006ac0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000810:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000812:	4a2c      	ldr	r2, [pc, #176]	; (80008c4 <MX_ADC1_Init+0xc8>)
 8000814:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	05d2      	lsls	r2, r2, #23
 800081c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800082a:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <MX_ADC1_Init+0xc4>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000832:	2204      	movs	r2, #4
 8000834:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000838:	2200      	movs	r2, #0
 800083a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_ADC1_Init+0xc4>)
 800083e:	2200      	movs	r2, #0
 8000840:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000844:	2201      	movs	r2, #1
 8000846:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_ADC1_Init+0xc4>)
 800084a:	2201      	movs	r2, #1
 800084c:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_ADC1_Init+0xc4>)
 800085c:	222c      	movs	r2, #44	; 0x2c
 800085e:	2100      	movs	r1, #0
 8000860:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000864:	2200      	movs	r2, #0
 8000866:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_ADC1_Init+0xc4>)
 800086a:	2200      	movs	r2, #0
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000870:	2200      	movs	r2, #0
 8000872:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000876:	223c      	movs	r2, #60	; 0x3c
 8000878:	2100      	movs	r1, #0
 800087a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_ADC1_Init+0xc4>)
 800087e:	2200      	movs	r2, #0
 8000880:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_ADC1_Init+0xc4>)
 8000884:	0018      	movs	r0, r3
 8000886:	f000 ffd3 	bl	8001830 <HAL_ADC_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800088e:	f000 fb7b 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a4:	1d3a      	adds	r2, r7, #4
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_ADC1_Init+0xc4>)
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 f968 	bl	8001b80 <HAL_ADC_ConfigChannel>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80008b4:	f000 fb68 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b004      	add	sp, #16
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000078 	.word	0x20000078
 80008c4:	40012400 	.word	0x40012400

080008c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_I2C1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_I2C1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_I2C1_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_I2C1_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_I2C1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_I2C1_Init+0x74>)
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fe77 	bl	80025f8 <HAL_I2C_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090e:	f000 fb3b 	bl	8000f88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_I2C1_Init+0x74>)
 8000914:	2100      	movs	r1, #0
 8000916:	0018      	movs	r0, r3
 8000918:	f002 fa7c 	bl	8002e14 <HAL_I2CEx_ConfigAnalogFilter>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 fb32 	bl	8000f88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <MX_I2C1_Init+0x74>)
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f002 fabf 	bl	8002eac <HAL_I2CEx_ConfigDigitalFilter>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000932:	f000 fb29 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000dc 	.word	0x200000dc
 8000940:	40005400 	.word	0x40005400
 8000944:	00303d5b 	.word	0x00303d5b

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	2310      	movs	r3, #16
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	0018      	movs	r0, r3
 8000954:	2310      	movs	r3, #16
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f006 f8b1 	bl	8006ac0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	0018      	movs	r0, r3
 8000962:	230c      	movs	r3, #12
 8000964:	001a      	movs	r2, r3
 8000966:	2100      	movs	r1, #0
 8000968:	f006 f8aa 	bl	8006ac0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_TIM2_Init+0xa0>)
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	05d2      	lsls	r2, r2, #23
 8000972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_TIM2_Init+0xa0>)
 8000976:	4a1d      	ldr	r2, [pc, #116]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_TIM2_Init+0xa0>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_TIM2_Init+0xa0>)
 8000982:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <MX_TIM2_Init+0xa4>)
 8000984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_TIM2_Init+0xa0>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_TIM2_Init+0xa0>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_TIM2_Init+0xa0>)
 8000994:	0018      	movs	r0, r3
 8000996:	f003 f99d 	bl	8003cd4 <HAL_TIM_Base_Init>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800099e:	f000 faf3 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a2:	2110      	movs	r1, #16
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	0152      	lsls	r2, r2, #5
 80009aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ac:	187a      	adds	r2, r7, r1
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_TIM2_Init+0xa0>)
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f003 fd94 	bl	80044e0 <HAL_TIM_ConfigClockSource>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009bc:	f000 fae4 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009cc:	1d3a      	adds	r2, r7, #4
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_TIM2_Init+0xa0>)
 80009d0:	0011      	movs	r1, r2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f004 fa8c 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009dc:	f000 fad4 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b008      	add	sp, #32
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000130 	.word	0x20000130
 80009ec:	000003e7 	.word	0x000003e7

080009f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	2328      	movs	r3, #40	; 0x28
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	0018      	movs	r0, r3
 80009fc:	2310      	movs	r3, #16
 80009fe:	001a      	movs	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f006 f85d 	bl	8006ac0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	231c      	movs	r3, #28
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f006 f855 	bl	8006ac0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a16:	003b      	movs	r3, r7
 8000a18:	0018      	movs	r0, r3
 8000a1a:	231c      	movs	r3, #28
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f006 f84e 	bl	8006ac0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a26:	4a31      	ldr	r2, [pc, #196]	; (8000aec <MX_TIM3_Init+0xfc>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a2c:	2240      	movs	r2, #64	; 0x40
 8000a2e:	32ff      	adds	r2, #255	; 0xff
 8000a30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a38:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a3a:	4a2d      	ldr	r2, [pc, #180]	; (8000af0 <MX_TIM3_Init+0x100>)
 8000a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f003 f941 	bl	8003cd4 <HAL_TIM_Base_Init>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a56:	f000 fa97 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5a:	2128      	movs	r1, #40	; 0x28
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	0152      	lsls	r2, r2, #5
 8000a62:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a64:	187a      	adds	r2, r7, r1
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f003 fd38 	bl	80044e0 <HAL_TIM_ConfigClockSource>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a74:	f000 fa88 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f003 f9de 	bl	8003e3c <HAL_TIM_PWM_Init>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a84:	f000 fa80 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	211c      	movs	r1, #28
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f004 fa27 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000aa6:	f000 fa6f 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2260      	movs	r2, #96	; 0x60
 8000aae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abc:	003b      	movs	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac2:	0039      	movs	r1, r7
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f003 fc09 	bl	80042e0 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000ad2:	f000 fa59 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <MX_TIM3_Init+0xf8>)
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 fb99 	bl	8001210 <HAL_TIM_MspPostInit>

}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b00e      	add	sp, #56	; 0x38
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	2000017c 	.word	0x2000017c
 8000aec:	40000400 	.word	0x40000400
 8000af0:	000003e7 	.word	0x000003e7

08000af4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	0018      	movs	r0, r3
 8000afe:	230c      	movs	r3, #12
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f005 ffdc 	bl	8006ac0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_TIM6_Init+0x6c>)
 8000b0a:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <MX_TIM6_Init+0x70>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_TIM6_Init+0x6c>)
 8000b10:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_TIM6_Init+0x74>)
 8000b12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_TIM6_Init+0x6c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_TIM6_Init+0x6c>)
 8000b1c:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <MX_TIM6_Init+0x78>)
 8000b1e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_TIM6_Init+0x6c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_TIM6_Init+0x6c>)
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f003 f8d3 	bl	8003cd4 <HAL_TIM_Base_Init>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b32:	f000 fa29 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b42:	1d3a      	adds	r2, r7, #4
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_TIM6_Init+0x6c>)
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f004 f9d1 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b52:	f000 fa19 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	200001c8 	.word	0x200001c8
 8000b64:	40001000 	.word	0x40001000
 8000b68:	000007cf 	.word	0x000007cf
 8000b6c:	000003e7 	.word	0x000003e7

08000b70 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	0018      	movs	r0, r3
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f005 ff9e 	bl	8006ac0 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_TIM7_Init+0x6c>)
 8000b86:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <MX_TIM7_Init+0x70>)
 8000b88:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3332;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_TIM7_Init+0x6c>)
 8000b8c:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <MX_TIM7_Init+0x74>)
 8000b8e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_TIM7_Init+0x6c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_TIM7_Init+0x6c>)
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <MX_TIM7_Init+0x78>)
 8000b9a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_TIM7_Init+0x6c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_TIM7_Init+0x6c>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f003 f895 	bl	8003cd4 <HAL_TIM_Base_Init>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000bae:	f000 f9eb 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bbe:	1d3a      	adds	r2, r7, #4
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <MX_TIM7_Init+0x6c>)
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f004 f993 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000bce:	f000 f9db 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20000214 	.word	0x20000214
 8000be0:	40001400 	.word	0x40001400
 8000be4:	00000d04 	.word	0x00000d04
 8000be8:	000003e7 	.word	0x000003e7

08000bec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000bf2:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <MX_USART2_UART_Init+0x98>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bf6:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000bf8:	22e1      	movs	r2, #225	; 0xe1
 8000bfa:	0252      	lsls	r2, r2, #9
 8000bfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f004 f9e0 	bl	8004ffc <HAL_UART_Init>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c40:	f000 f9a2 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c46:	2100      	movs	r1, #0
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f005 fb9b 	bl	8006384 <HAL_UARTEx_SetTxFifoThreshold>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c52:	f000 f999 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f005 fbd2 	bl	8006404 <HAL_UARTEx_SetRxFifoThreshold>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c64:	f000 f990 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <MX_USART2_UART_Init+0x94>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f005 fb50 	bl	8006310 <HAL_UARTEx_DisableFifoMode>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 f988 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	20000260 	.word	0x20000260
 8000c84:	40004400 	.word	0x40004400

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	2414      	movs	r4, #20
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	0018      	movs	r0, r3
 8000c94:	2314      	movs	r3, #20
 8000c96:	001a      	movs	r2, r3
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f005 ff11 	bl	8006ac0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca2:	4b4e      	ldr	r3, [pc, #312]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8000caa:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cb6:	4b49      	ldr	r3, [pc, #292]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cba:	4b48      	ldr	r3, [pc, #288]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc2:	4b46      	ldr	r3, [pc, #280]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b43      	ldr	r3, [pc, #268]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cda:	4b40      	ldr	r3, [pc, #256]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cea:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000cec:	2102      	movs	r1, #2
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000cfe:	23a0      	movs	r3, #160	; 0xa0
 8000d00:	05db      	lsls	r3, r3, #23
 8000d02:	2200      	movs	r2, #0
 8000d04:	2120      	movs	r1, #32
 8000d06:	0018      	movs	r0, r3
 8000d08:	f001 fc3d 	bl	8002586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000d0c:	4934      	ldr	r1, [pc, #208]	; (8000de0 <MX_GPIO_Init+0x158>)
 8000d0e:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_GPIO_Init+0x15c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	0018      	movs	r0, r3
 8000d14:	f001 fc37 	bl	8002586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <MX_GPIO_Init+0x160>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 fc31 	bl	8002586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INPUT_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_2_Pin;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0192      	lsls	r2, r2, #6
 8000d2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	2201      	movs	r2, #1
 8000d36:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_2_GPIO_Port, &GPIO_InitStruct);
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	4a2b      	ldr	r2, [pc, #172]	; (8000de8 <MX_GPIO_Init+0x160>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f001 faa0 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2220      	movs	r2, #32
 8000d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2202      	movs	r2, #2
 8000d5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	193a      	adds	r2, r7, r4
 8000d5e:	23a0      	movs	r3, #160	; 0xa0
 8000d60:	05db      	lsls	r3, r3, #23
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f001 fa8d 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <MX_GPIO_Init+0x158>)
 8000d6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	2201      	movs	r2, #1
 8000d74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <MX_GPIO_Init+0x15c>)
 8000d86:	0019      	movs	r1, r3
 8000d88:	0010      	movs	r0, r2
 8000d8a:	f001 fa7b 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2201      	movs	r2, #1
 8000d98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <MX_GPIO_Init+0x160>)
 8000daa:	0019      	movs	r1, r3
 8000dac:	0010      	movs	r0, r2
 8000dae:	f001 fa69 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000db2:	0021      	movs	r1, r4
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2208      	movs	r2, #8
 8000db8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <MX_GPIO_Init+0x15c>)
 8000dca:	0019      	movs	r1, r3
 8000dcc:	0010      	movs	r0, r2
 8000dce:	f001 fa59 	bl	8002284 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b00b      	add	sp, #44	; 0x2c
 8000dd8:	bd90      	pop	{r4, r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	00004010 	.word	0x00004010
 8000de4:	50000400 	.word	0x50000400
 8000de8:	50000800 	.word	0x50000800

08000dec <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f005 fcc9 	bl	8006788 <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f005 fdd4 	bl	80069a8 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <hardwareTestLCD+0x38>)
 8000e02:	0019      	movs	r1, r3
 8000e04:	2000      	movs	r0, #0
 8000e06:	f005 fe1f 	bl	8006a48 <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f005 fdca 	bl	80069a8 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <hardwareTestLCD+0x3c>)
 8000e16:	0019      	movs	r1, r3
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f005 fe15 	bl	8006a48 <I2C_LCD_WriteString>
	}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	08007434 	.word	0x08007434
 8000e28:	08007444 	.word	0x08007444

08000e2c <stateMachineDecider>:
				 stateHandlerC();
				 break;
		 }
	 }

	 void stateMachineDecider(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
		 // Go to State B if it is State A
		 if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 1){
 8000e30:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <stateMachineDecider+0xd4>)
 8000e32:	2108      	movs	r1, #8
 8000e34:	0018      	movs	r0, r3
 8000e36:	f001 fb89 	bl	800254c <HAL_GPIO_ReadPin>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d019      	beq.n	8000e72 <stateMachineDecider+0x46>
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <stateMachineDecider+0xd8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d115      	bne.n	8000e72 <stateMachineDecider+0x46>

			 // Debug message
			 sprintf(msg, "Going to State B.\n\r");
 8000e46:	4a30      	ldr	r2, [pc, #192]	; (8000f08 <stateMachineDecider+0xdc>)
 8000e48:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <stateMachineDecider+0xe0>)
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f005 fe17 	bl	8006a80 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <stateMachineDecider+0xe0>)
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff f955 	bl	8000104 <strlen>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	2301      	movs	r3, #1
 8000e60:	425b      	negs	r3, r3
 8000e62:	492a      	ldr	r1, [pc, #168]	; (8000f0c <stateMachineDecider+0xe0>)
 8000e64:	482a      	ldr	r0, [pc, #168]	; (8000f10 <stateMachineDecider+0xe4>)
 8000e66:	f004 f91f 	bl	80050a8 <HAL_UART_Transmit>

			 // Go to State B
			 stateTracker = 2;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <stateMachineDecider+0xd8>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e043      	b.n	8000efa <stateMachineDecider+0xce>


		 // Go to State A if it is State B
		 } else if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 2){
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <stateMachineDecider+0xd4>)
 8000e74:	2108      	movs	r1, #8
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 fb68 	bl	800254c <HAL_GPIO_ReadPin>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d019      	beq.n	8000eb4 <stateMachineDecider+0x88>
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <stateMachineDecider+0xd8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d115      	bne.n	8000eb4 <stateMachineDecider+0x88>

			 // Debug message
			 sprintf(msg, "Going to State A.\n\r");
 8000e88:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <stateMachineDecider+0xe8>)
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <stateMachineDecider+0xe0>)
 8000e8c:	0011      	movs	r1, r2
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f005 fdf6 	bl	8006a80 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <stateMachineDecider+0xe0>)
 8000e96:	0018      	movs	r0, r3
 8000e98:	f7ff f934 	bl	8000104 <strlen>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	4919      	ldr	r1, [pc, #100]	; (8000f0c <stateMachineDecider+0xe0>)
 8000ea6:	481a      	ldr	r0, [pc, #104]	; (8000f10 <stateMachineDecider+0xe4>)
 8000ea8:	f004 f8fe 	bl	80050a8 <HAL_UART_Transmit>

			 // Stay in State A
			 stateTracker = 1;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <stateMachineDecider+0xd8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e022      	b.n	8000efa <stateMachineDecider+0xce>

		// Button 2 pressed (State C)
		 } else if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin) && stateTracker == 1){
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	019b      	lsls	r3, r3, #6
 8000eb8:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <stateMachineDecider+0xec>)
 8000eba:	0019      	movs	r1, r3
 8000ebc:	0010      	movs	r0, r2
 8000ebe:	f001 fb45 	bl	800254c <HAL_GPIO_ReadPin>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d119      	bne.n	8000efa <stateMachineDecider+0xce>
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <stateMachineDecider+0xd8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d115      	bne.n	8000efa <stateMachineDecider+0xce>

			 // Debug message
			 sprintf(msg, "Going to State C.\n\r");
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <stateMachineDecider+0xf0>)
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <stateMachineDecider+0xe0>)
 8000ed2:	0011      	movs	r1, r2
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f005 fdd3 	bl	8006a80 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <stateMachineDecider+0xe0>)
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff f911 	bl	8000104 <strlen>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	425b      	negs	r3, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <stateMachineDecider+0xe0>)
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <stateMachineDecider+0xe4>)
 8000eee:	f004 f8db 	bl	80050a8 <HAL_UART_Transmit>

			 // Go to State C
			 stateTracker = 3;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <stateMachineDecider+0xd8>)
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	601a      	str	r2, [r3, #0]
		 }
	 }
 8000ef8:	e7ff      	b.n	8000efa <stateMachineDecider+0xce>
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	50000400 	.word	0x50000400
 8000f04:	2000030c 	.word	0x2000030c
 8000f08:	08007498 	.word	0x08007498
 8000f0c:	200002f4 	.word	0x200002f4
 8000f10:	20000260 	.word	0x20000260
 8000f14:	080074ac 	.word	0x080074ac
 8000f18:	50000800 	.word	0x50000800
 8000f1c:	080074c0 	.word	0x080074c0

08000f20 <HAL_TIM_PeriodElapsedCallback>:
	 /* Controller Function for LED1, LED2 and LED3*/
	 // Description: Frequency currently determined by each timer's PSC
	 // 			 and ARR value.
	 //  Input:
	 // Output:
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
		 // This callback is automatically called by the HAL on the UEV event
		 if(htim->Instance == TIM2){
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d105      	bne.n	8000f40 <HAL_TIM_PeriodElapsedCallback+0x20>
			 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f001 fb41 	bl	80025c0 <HAL_GPIO_TogglePin>
		 } else if(htim->Instance == TIM6){
			 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
		 } else if(htim->Instance == TIM7){
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
		 }
	 }
 8000f3e:	e016      	b.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x4e>
		 } else if(htim->Instance == TIM6){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d107      	bne.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x3a>
			 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	01db      	lsls	r3, r3, #7
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f50:	0019      	movs	r1, r3
 8000f52:	0010      	movs	r0, r2
 8000f54:	f001 fb34 	bl	80025c0 <HAL_GPIO_TogglePin>
	 }
 8000f58:	e009      	b.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x4e>
		 } else if(htim->Instance == TIM7){
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d104      	bne.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x4e>
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f66:	2110      	movs	r1, #16
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f001 fb29 	bl	80025c0 <HAL_GPIO_TogglePin>
	 }
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	50000800 	.word	0x50000800
 8000f7c:	40001000 	.word	0x40001000
 8000f80:	50000400 	.word	0x50000400
 8000f84:	40001400 	.word	0x40001400

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	2201      	movs	r2, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	0549      	lsls	r1, r1, #21
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	055b      	lsls	r3, r3, #21
 8000fc8:	4013      	ands	r3, r2
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000fce:	23c0      	movs	r3, #192	; 0xc0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 fb18 	bl	8001608 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b08b      	sub	sp, #44	; 0x2c
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	2414      	movs	r4, #20
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2314      	movs	r3, #20
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f005 fd62 	bl	8006ac0 <memset>
  if(hadc->Instance==ADC1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_ADC_MspInit+0x80>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d129      	bne.n	800105a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_ADC_MspInit+0x84>)
 8001008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_ADC_MspInit+0x84>)
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	0349      	lsls	r1, r1, #13
 8001010:	430a      	orrs	r2, r1
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_ADC_MspInit+0x84>)
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	2380      	movs	r3, #128	; 0x80
 800101a:	035b      	lsls	r3, r3, #13
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_ADC_MspInit+0x84>)
 8001024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_ADC_MspInit+0x84>)
 8001028:	2101      	movs	r1, #1
 800102a:	430a      	orrs	r2, r1
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_ADC_MspInit+0x84>)
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	2201      	movs	r2, #1
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 800103a:	193b      	adds	r3, r7, r4
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001040:	193b      	adds	r3, r7, r4
 8001042:	2203      	movs	r2, #3
 8001044:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	193b      	adds	r3, r7, r4
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 800104c:	193a      	adds	r2, r7, r4
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	0011      	movs	r1, r2
 8001054:	0018      	movs	r0, r3
 8001056:	f001 f915 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b00b      	add	sp, #44	; 0x2c
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	40012400 	.word	0x40012400
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b097      	sub	sp, #92	; 0x5c
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	2344      	movs	r3, #68	; 0x44
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	0018      	movs	r0, r3
 800107a:	2314      	movs	r3, #20
 800107c:	001a      	movs	r2, r3
 800107e:	2100      	movs	r1, #0
 8001080:	f005 fd1e 	bl	8006ac0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001084:	2410      	movs	r4, #16
 8001086:	193b      	adds	r3, r7, r4
 8001088:	0018      	movs	r0, r3
 800108a:	2334      	movs	r3, #52	; 0x34
 800108c:	001a      	movs	r2, r3
 800108e:	2100      	movs	r1, #0
 8001090:	f005 fd16 	bl	8006ac0 <memset>
  if(hi2c->Instance==I2C1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_I2C_MspInit+0xb8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d13e      	bne.n	800111c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800109e:	193b      	adds	r3, r7, r4
 80010a0:	2220      	movs	r2, #32
 80010a2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010a4:	193b      	adds	r3, r7, r4
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	0018      	movs	r0, r3
 80010ae:	f002 fc59 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	1e03      	subs	r3, r0, #0
 80010b4:	d001      	beq.n	80010ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010b6:	f7ff ff67 	bl	8000f88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_I2C_MspInit+0xbc>)
 80010bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_I2C_MspInit+0xbc>)
 80010c0:	2102      	movs	r1, #2
 80010c2:	430a      	orrs	r2, r1
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_I2C_MspInit+0xbc>)
 80010c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ca:	2202      	movs	r2, #2
 80010cc:	4013      	ands	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010d2:	2144      	movs	r1, #68	; 0x44
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	22c0      	movs	r2, #192	; 0xc0
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2212      	movs	r2, #18
 80010e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2206      	movs	r2, #6
 80010f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	4a0d      	ldr	r2, [pc, #52]	; (800112c <HAL_I2C_MspInit+0xc0>)
 80010f8:	0019      	movs	r1, r3
 80010fa:	0010      	movs	r0, r2
 80010fc:	f001 f8c2 	bl	8002284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_I2C_MspInit+0xbc>)
 8001102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_I2C_MspInit+0xbc>)
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	0389      	lsls	r1, r1, #14
 800110a:	430a      	orrs	r2, r1
 800110c:	63da      	str	r2, [r3, #60]	; 0x3c
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_I2C_MspInit+0xbc>)
 8001110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	039b      	lsls	r3, r3, #14
 8001116:	4013      	ands	r3, r2
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b017      	add	sp, #92	; 0x5c
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	40005400 	.word	0x40005400
 8001128:	40021000 	.word	0x40021000
 800112c:	50000400 	.word	0x50000400

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	05db      	lsls	r3, r3, #23
 8001140:	429a      	cmp	r2, r3
 8001142:	d114      	bne.n	800116e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001144:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 8001146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 800114a:	2101      	movs	r1, #1
 800114c:	430a      	orrs	r2, r1
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 8001152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001154:	2201      	movs	r2, #1
 8001156:	4013      	ands	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	200f      	movs	r0, #15
 8001162:	f000 ff91 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 ffa3 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800116c:	e044      	b.n	80011f8 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM3)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <HAL_TIM_Base_MspInit+0xd4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d10c      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 800117a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 800117e:	2102      	movs	r1, #2
 8001180:	430a      	orrs	r2, r1
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 8001186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001188:	2202      	movs	r2, #2
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
}
 8001190:	e032      	b.n	80011f8 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM6)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <HAL_TIM_Base_MspInit+0xd8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d114      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 800119e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 80011a2:	2110      	movs	r1, #16
 80011a4:	430a      	orrs	r2, r1
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	2210      	movs	r2, #16
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2011      	movs	r0, #17
 80011ba:	f000 ff65 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80011be:	2011      	movs	r0, #17
 80011c0:	f000 ff77 	bl	80020b2 <HAL_NVIC_EnableIRQ>
}
 80011c4:	e018      	b.n	80011f8 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM7)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_TIM_Base_MspInit+0xdc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d113      	bne.n	80011f8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 80011d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 80011d6:	2120      	movs	r1, #32
 80011d8:	430a      	orrs	r2, r1
 80011da:	63da      	str	r2, [r3, #60]	; 0x3c
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_TIM_Base_MspInit+0xd0>)
 80011de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e0:	2220      	movs	r2, #32
 80011e2:	4013      	ands	r3, r2
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2012      	movs	r0, #18
 80011ee:	f000 ff4b 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 80011f2:	2012      	movs	r0, #18
 80011f4:	f000 ff5d 	bl	80020b2 <HAL_NVIC_EnableIRQ>
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b006      	add	sp, #24
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	40000400 	.word	0x40000400
 8001208:	40001000 	.word	0x40001000
 800120c:	40001400 	.word	0x40001400

08001210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	240c      	movs	r4, #12
 800121a:	193b      	adds	r3, r7, r4
 800121c:	0018      	movs	r0, r3
 800121e:	2314      	movs	r3, #20
 8001220:	001a      	movs	r2, r3
 8001222:	2100      	movs	r1, #0
 8001224:	f005 fc4c 	bl	8006ac0 <memset>
  if(htim->Instance==TIM3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_TIM_MspPostInit+0x70>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d122      	bne.n	8001278 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_TIM_MspPostInit+0x74>)
 8001234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_TIM_MspPostInit+0x74>)
 8001238:	2101      	movs	r1, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_TIM_MspPostInit+0x74>)
 8001240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001242:	2201      	movs	r2, #1
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124a:	0021      	movs	r1, r4
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2240      	movs	r2, #64	; 0x40
 8001250:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2202      	movs	r2, #2
 8001256:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	187b      	adds	r3, r7, r1
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	187b      	adds	r3, r7, r1
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2201      	movs	r2, #1
 8001268:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	187a      	adds	r2, r7, r1
 800126c:	23a0      	movs	r3, #160	; 0xa0
 800126e:	05db      	lsls	r3, r3, #23
 8001270:	0011      	movs	r1, r2
 8001272:	0018      	movs	r0, r3
 8001274:	f001 f806 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b009      	add	sp, #36	; 0x24
 800127e:	bd90      	pop	{r4, r7, pc}
 8001280:	40000400 	.word	0x40000400
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b097      	sub	sp, #92	; 0x5c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	2344      	movs	r3, #68	; 0x44
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	0018      	movs	r0, r3
 8001296:	2314      	movs	r3, #20
 8001298:	001a      	movs	r2, r3
 800129a:	2100      	movs	r1, #0
 800129c:	f005 fc10 	bl	8006ac0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a0:	2410      	movs	r4, #16
 80012a2:	193b      	adds	r3, r7, r4
 80012a4:	0018      	movs	r0, r3
 80012a6:	2334      	movs	r3, #52	; 0x34
 80012a8:	001a      	movs	r2, r3
 80012aa:	2100      	movs	r1, #0
 80012ac:	f005 fc08 	bl	8006ac0 <memset>
  if(huart->Instance==USART2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a26      	ldr	r2, [pc, #152]	; (8001350 <HAL_UART_MspInit+0xc8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d146      	bne.n	8001348 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	2202      	movs	r2, #2
 80012be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	0018      	movs	r0, r3
 80012ca:	f002 fb4b 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012d2:	f7ff fe59 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_UART_MspInit+0xcc>)
 80012d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <HAL_UART_MspInit+0xcc>)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0289      	lsls	r1, r1, #10
 80012e0:	430a      	orrs	r2, r1
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_UART_MspInit+0xcc>)
 80012e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	029b      	lsls	r3, r3, #10
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_UART_MspInit+0xcc>)
 80012f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_UART_MspInit+0xcc>)
 80012f8:	2101      	movs	r1, #1
 80012fa:	430a      	orrs	r2, r1
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_MspInit+0xcc>)
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	2201      	movs	r2, #1
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800130a:	2144      	movs	r1, #68	; 0x44
 800130c:	187b      	adds	r3, r7, r1
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2202      	movs	r2, #2
 8001316:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2201      	movs	r2, #1
 800131c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2201      	movs	r2, #1
 8001328:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	187a      	adds	r2, r7, r1
 800132c:	23a0      	movs	r3, #160	; 0xa0
 800132e:	05db      	lsls	r3, r3, #23
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f000 ffa6 	bl	8002284 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	201c      	movs	r0, #28
 800133e:	f000 fea3 	bl	8002088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001342:	201c      	movs	r0, #28
 8001344:	f000 feb5 	bl	80020b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b017      	add	sp, #92	; 0x5c
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	40004400 	.word	0x40004400
 8001354:	40021000 	.word	0x40021000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137c:	f000 f904 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <TIM2_IRQHandler+0x14>)
 800138e:	0018      	movs	r0, r3
 8001390:	f002 fe9e 	bl	80040d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	20000130 	.word	0x20000130

080013a0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80013a6:	0018      	movs	r0, r3
 80013a8:	f002 fe92 	bl	80040d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	200001c8 	.word	0x200001c8

080013b8 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <TIM7_LPTIM2_IRQHandler+0x14>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f002 fe86 	bl	80040d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	20000214 	.word	0x20000214

080013d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <USART2_IRQHandler+0x14>)
 80013d6:	0018      	movs	r0, r3
 80013d8:	f003 ff0a 	bl	80051f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	20000260 	.word	0x20000260

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	; (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	18d3      	adds	r3, r2, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f005 fb5a 	bl	8006ad0 <__errno>
 800141c:	0003      	movs	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	2301      	movs	r3, #1
 8001424:	425b      	negs	r3, r3
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	18d2      	adds	r2, r2, r3
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <_sbrk+0x64>)
 8001438:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b006      	add	sp, #24
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20009000 	.word	0x20009000
 8001448:	00000400 	.word	0x00000400
 800144c:	20000310 	.word	0x20000310
 8001450:	20000468 	.word	0x20000468

08001454 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001462:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001464:	f7ff fff6 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <LoopForever+0x6>)
  ldr r1, =_edata
 800146a:	490d      	ldr	r1, [pc, #52]	; (80014a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <LoopForever+0xe>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001470:	e002      	b.n	8001478 <LoopCopyDataInit>

08001472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001476:	3304      	adds	r3, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800147c:	d3f9      	bcc.n	8001472 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001480:	4c0a      	ldr	r4, [pc, #40]	; (80014ac <LoopForever+0x16>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001484:	e001      	b.n	800148a <LoopFillZerobss>

08001486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001488:	3204      	adds	r2, #4

0800148a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800148c:	d3fb      	bcc.n	8001486 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800148e:	f005 fb25 	bl	8006adc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001492:	f7ff f8d5 	bl	8000640 <main>

08001496 <LoopForever>:

LoopForever:
  b LoopForever
 8001496:	e7fe      	b.n	8001496 <LoopForever>
  ldr   r0, =_estack
 8001498:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014a4:	08007630 	.word	0x08007630
  ldr r2, =_sbss
 80014a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014ac:	20000464 	.word	0x20000464

080014b0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_COMP_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_Init+0x3c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_Init+0x3c>)
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	0049      	lsls	r1, r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f810 	bl	80014f4 <HAL_InitTick>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e001      	b.n	80014e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fd58 	bl	8000f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014fc:	230f      	movs	r3, #15
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_InitTick+0x88>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d02b      	beq.n	8001564 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_InitTick+0x8c>)
 800150e:	681c      	ldr	r4, [r3, #0]
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_InitTick+0x88>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	0019      	movs	r1, r3
 8001516:	23fa      	movs	r3, #250	; 0xfa
 8001518:	0098      	lsls	r0, r3, #2
 800151a:	f7fe fe05 	bl	8000128 <__udivsi3>
 800151e:	0003      	movs	r3, r0
 8001520:	0019      	movs	r1, r3
 8001522:	0020      	movs	r0, r4
 8001524:	f7fe fe00 	bl	8000128 <__udivsi3>
 8001528:	0003      	movs	r3, r0
 800152a:	0018      	movs	r0, r3
 800152c:	f000 fdd1 	bl	80020d2 <HAL_SYSTICK_Config>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d112      	bne.n	800155a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d80a      	bhi.n	8001550 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	2301      	movs	r3, #1
 800153e:	425b      	negs	r3, r3
 8001540:	2200      	movs	r2, #0
 8001542:	0018      	movs	r0, r3
 8001544:	f000 fda0 	bl	8002088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_InitTick+0x90>)
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e00d      	b.n	800156c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001550:	230f      	movs	r3, #15
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e008      	b.n	800156c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800155a:	230f      	movs	r3, #15
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	e003      	b.n	800156c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001564:	230f      	movs	r3, #15
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800156c:	230f      	movs	r3, #15
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	781b      	ldrb	r3, [r3, #0]
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b005      	add	sp, #20
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	20000008 	.word	0x20000008
 8001580:	20000000 	.word	0x20000000
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x1c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	001a      	movs	r2, r3
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x20>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	18d2      	adds	r2, r2, r3
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_IncTick+0x20>)
 800159a:	601a      	str	r2, [r3, #0]
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000314 	.word	0x20000314

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HAL_GetTick+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	20000314 	.word	0x20000314

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff fff0 	bl	80015ac <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	d005      	beq.n	80015e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_Delay+0x44>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	001a      	movs	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	189b      	adds	r3, r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	f7ff ffe0 	bl	80015ac <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8f7      	bhi.n	80015e8 <HAL_Delay+0x28>
  {
  }
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b004      	add	sp, #16
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	20000008 	.word	0x20000008

08001608 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	40010000 	.word	0x40010000
 8001630:	fffff9ff 	.word	0xfffff9ff

08001634 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001644:	401a      	ands	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	fe3fffff 	.word	0xfe3fffff

0800165c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	23e0      	movs	r3, #224	; 0xe0
 800166a:	045b      	lsls	r3, r3, #17
 800166c:	4013      	ands	r3, r2
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}

08001676 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	2104      	movs	r1, #4
 800168a:	400a      	ands	r2, r1
 800168c:	2107      	movs	r1, #7
 800168e:	4091      	lsls	r1, r2
 8001690:	000a      	movs	r2, r1
 8001692:	43d2      	mvns	r2, r2
 8001694:	401a      	ands	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2104      	movs	r1, #4
 800169a:	400b      	ands	r3, r1
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4099      	lsls	r1, r3
 80016a0:	000b      	movs	r3, r1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b004      	add	sp, #16
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	2104      	movs	r1, #4
 80016c2:	400a      	ands	r2, r1
 80016c4:	2107      	movs	r1, #7
 80016c6:	4091      	lsls	r1, r2
 80016c8:	000a      	movs	r2, r1
 80016ca:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2104      	movs	r1, #4
 80016d0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80016d2:	40da      	lsrs	r2, r3
 80016d4:	0013      	movs	r3, r2
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}

080016de <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	211f      	movs	r1, #31
 80016f2:	400a      	ands	r2, r1
 80016f4:	210f      	movs	r1, #15
 80016f6:	4091      	lsls	r1, r2
 80016f8:	000a      	movs	r2, r1
 80016fa:	43d2      	mvns	r2, r2
 80016fc:	401a      	ands	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	0e9b      	lsrs	r3, r3, #26
 8001702:	210f      	movs	r1, #15
 8001704:	4019      	ands	r1, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	201f      	movs	r0, #31
 800170a:	4003      	ands	r3, r0
 800170c:	4099      	lsls	r1, r3
 800170e:	000b      	movs	r3, r1
 8001710:	431a      	orrs	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bd80      	pop	{r7, pc}

0800171e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	035b      	lsls	r3, r3, #13
 8001730:	0b5b      	lsrs	r3, r3, #13
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}

08001740 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	0352      	lsls	r2, r2, #13
 8001752:	0b52      	lsrs	r2, r2, #13
 8001754:	43d2      	mvns	r2, r2
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	0212      	lsls	r2, r2, #8
 8001778:	43d2      	mvns	r2, r2
 800177a:	401a      	ands	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	400b      	ands	r3, r1
 8001784:	4904      	ldr	r1, [pc, #16]	; (8001798 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001786:	400b      	ands	r3, r1
 8001788:	431a      	orrs	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b004      	add	sp, #16
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	07ffff00 	.word	0x07ffff00

0800179c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	0552      	lsls	r2, r2, #21
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	6fffffe8 	.word	0x6fffffe8

080017c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	055b      	lsls	r3, r3, #21
 80017d4:	401a      	ands	r2, r3
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	055b      	lsls	r3, r3, #21
 80017da:	429a      	cmp	r2, r3
 80017dc:	d101      	bne.n	80017e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}

080017ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <LL_ADC_IsEnabled+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_ADC_IsEnabled+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}

0800180e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2204      	movs	r2, #4
 800181c:	4013      	ands	r3, r2
 800181e:	2b04      	cmp	r3, #4
 8001820:	d101      	bne.n	8001826 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001826:	2300      	movs	r3, #0
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b002      	add	sp, #8
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001838:	231f      	movs	r3, #31
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e17f      	b.n	8001b56 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff fbbf 	bl	8000fe4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2254      	movs	r2, #84	; 0x54
 8001870:	2100      	movs	r1, #0
 8001872:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff ffa3 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d115      	bne.n	80018ae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0018      	movs	r0, r3
 8001888:	f7ff ff88 	bl	800179c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800188c:	4bb4      	ldr	r3, [pc, #720]	; (8001b60 <HAL_ADC_Init+0x330>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	49b4      	ldr	r1, [pc, #720]	; (8001b64 <HAL_ADC_Init+0x334>)
 8001892:	0018      	movs	r0, r3
 8001894:	f7fe fc48 	bl	8000128 <__udivsi3>
 8001898:	0003      	movs	r3, r0
 800189a:	3301      	adds	r3, #1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a0:	e002      	b.n	80018a8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f9      	bne.n	80018a2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0018      	movs	r0, r3
 80018b4:	f7ff ff86 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d10f      	bne.n	80018dc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	2210      	movs	r2, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2201      	movs	r2, #1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018d4:	231f      	movs	r3, #31
 80018d6:	18fb      	adds	r3, r7, r3
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff ff94 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 80018e6:	0003      	movs	r3, r0
 80018e8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	2210      	movs	r2, #16
 80018f0:	4013      	ands	r3, r2
 80018f2:	d000      	beq.n	80018f6 <HAL_ADC_Init+0xc6>
 80018f4:	e122      	b.n	8001b3c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d000      	beq.n	80018fe <HAL_ADC_Init+0xce>
 80018fc:	e11e      	b.n	8001b3c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	4a99      	ldr	r2, [pc, #612]	; (8001b68 <HAL_ADC_Init+0x338>)
 8001904:	4013      	ands	r3, r2
 8001906:	2202      	movs	r2, #2
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff ff6a 	bl	80017ec <LL_ADC_IsEnabled>
 8001918:	1e03      	subs	r3, r0, #0
 800191a:	d000      	beq.n	800191e <HAL_ADC_Init+0xee>
 800191c:	e0ad      	b.n	8001a7a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7e1b      	ldrb	r3, [r3, #24]
 8001926:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001928:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7e5b      	ldrb	r3, [r3, #25]
 800192e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001930:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7e9b      	ldrb	r3, [r3, #26]
 8001936:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001938:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_ADC_Init+0x118>
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	015b      	lsls	r3, r3, #5
 8001946:	e000      	b.n	800194a <HAL_ADC_Init+0x11a>
 8001948:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800194a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001950:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	da04      	bge.n	8001964 <HAL_ADC_Init+0x134>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	085b      	lsrs	r3, r3, #1
 8001962:	e001      	b.n	8001968 <HAL_ADC_Init+0x138>
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001968:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	212c      	movs	r1, #44	; 0x2c
 800196e:	5c5b      	ldrb	r3, [r3, r1]
 8001970:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001972:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2220      	movs	r2, #32
 800197e:	5c9b      	ldrb	r3, [r3, r2]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d115      	bne.n	80019b0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e9b      	ldrb	r3, [r3, #26]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	0252      	lsls	r2, r2, #9
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	e00b      	b.n	80019b0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	2220      	movs	r2, #32
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2201      	movs	r2, #1
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019bc:	23e0      	movs	r3, #224	; 0xe0
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019c6:	4313      	orrs	r3, r2
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4a65      	ldr	r2, [pc, #404]	; (8001b6c <HAL_ADC_Init+0x33c>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	0f9b      	lsrs	r3, r3, #30
 80019ea:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019f0:	4313      	orrs	r3, r2
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	223c      	movs	r2, #60	; 0x3c
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d111      	bne.n	8001a26 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0f9b      	lsrs	r3, r3, #30
 8001a08:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a0e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001a14:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001a1a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	2201      	movs	r2, #1
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	4a50      	ldr	r2, [pc, #320]	; (8001b70 <HAL_ADC_Init+0x340>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	23c0      	movs	r3, #192	; 0xc0
 8001a42:	061b      	lsls	r3, r3, #24
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d018      	beq.n	8001a7a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	05db      	lsls	r3, r3, #23
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d012      	beq.n	8001a7a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d00c      	beq.n	8001a7a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001a60:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HAL_ADC_Init+0x344>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a44      	ldr	r2, [pc, #272]	; (8001b78 <HAL_ADC_Init+0x348>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	23f0      	movs	r3, #240	; 0xf0
 8001a70:	039b      	lsls	r3, r3, #14
 8001a72:	401a      	ands	r2, r3
 8001a74:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <HAL_ADC_Init+0x344>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a82:	001a      	movs	r2, r3
 8001a84:	2100      	movs	r1, #0
 8001a86:	f7ff fdf6 	bl	8001676 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a92:	493a      	ldr	r1, [pc, #232]	; (8001b7c <HAL_ADC_Init+0x34c>)
 8001a94:	001a      	movs	r2, r3
 8001a96:	f7ff fdee 	bl	8001676 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2110      	movs	r1, #16
 8001aae:	4249      	negs	r1, r1
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ab4:	e018      	b.n	8001ae8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	039b      	lsls	r3, r3, #14
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d112      	bne.n	8001ae8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	221c      	movs	r2, #28
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	4252      	negs	r2, r2
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	0011      	movs	r1, r2
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2100      	movs	r1, #0
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7ff fdde 	bl	80016b0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001af4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d10b      	bne.n	8001b16 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	2203      	movs	r2, #3
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b14:	e01c      	b.n	8001b50 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	2212      	movs	r2, #18
 8001b1c:	4393      	bics	r3, r2
 8001b1e:	2210      	movs	r2, #16
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001b32:	231f      	movs	r3, #31
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b3a:	e009      	b.n	8001b50 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	2210      	movs	r2, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b48:	231f      	movs	r3, #31
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001b50:	231f      	movs	r3, #31
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	781b      	ldrb	r3, [r3, #0]
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b008      	add	sp, #32
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	20000000 	.word	0x20000000
 8001b64:	00030d40 	.word	0x00030d40
 8001b68:	fffffefd 	.word	0xfffffefd
 8001b6c:	ffde0201 	.word	0xffde0201
 8001b70:	1ffffc02 	.word	0x1ffffc02
 8001b74:	40012708 	.word	0x40012708
 8001b78:	ffc3ffff 	.word	0xffc3ffff
 8001b7c:	07ffff04 	.word	0x07ffff04

08001b80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b8a:	2317      	movs	r3, #23
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2254      	movs	r2, #84	; 0x54
 8001b9a:	5c9b      	ldrb	r3, [r3, r2]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x24>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e1c0      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x3a6>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2254      	movs	r2, #84	; 0x54
 8001ba8:	2101      	movs	r1, #1
 8001baa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fe2c 	bl	800180e <LL_ADC_REG_IsConversionOngoing>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d000      	beq.n	8001bbc <HAL_ADC_ConfigChannel+0x3c>
 8001bba:	e1a3      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d100      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x46>
 8001bc4:	e143      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d004      	beq.n	8001bdc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bd6:	4ac1      	ldr	r2, [pc, #772]	; (8001edc <HAL_ADC_ConfigChannel+0x35c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d108      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0019      	movs	r1, r3
 8001be6:	0010      	movs	r0, r2
 8001be8:	f7ff fd99 	bl	800171e <LL_ADC_REG_SetSequencerChAdd>
 8001bec:	e0c9      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	211f      	movs	r1, #31
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	4099      	lsls	r1, r3
 8001bfe:	000b      	movs	r3, r1
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4013      	ands	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	035b      	lsls	r3, r3, #13
 8001c0c:	0b5b      	lsrs	r3, r3, #13
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x9c>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0e9b      	lsrs	r3, r3, #26
 8001c16:	221f      	movs	r2, #31
 8001c18:	4013      	ands	r3, r2
 8001c1a:	e098      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	d000      	beq.n	8001c28 <HAL_ADC_ConfigChannel+0xa8>
 8001c26:	e091      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x1cc>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d000      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0xb4>
 8001c32:	e089      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x1c8>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d000      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0xc0>
 8001c3e:	e081      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x1c4>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	4013      	ands	r3, r2
 8001c48:	d000      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0xcc>
 8001c4a:	e079      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1c0>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2210      	movs	r2, #16
 8001c52:	4013      	ands	r3, r2
 8001c54:	d000      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0xd8>
 8001c56:	e071      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x1bc>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d000      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0xe4>
 8001c62:	e069      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1b8>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2240      	movs	r2, #64	; 0x40
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d000      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0xf0>
 8001c6e:	e061      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x1b4>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2280      	movs	r2, #128	; 0x80
 8001c76:	4013      	ands	r3, r2
 8001c78:	d000      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0xfc>
 8001c7a:	e059      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x1b0>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4013      	ands	r3, r2
 8001c86:	d151      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1ac>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d149      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1a8>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d141      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1a4>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d139      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1a0>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	015b      	lsls	r3, r3, #5
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d131      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x19c>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	019b      	lsls	r3, r3, #6
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d129      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x198>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	01db      	lsls	r3, r3, #7
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d121      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x194>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	021b      	lsls	r3, r3, #8
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d119      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x190>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d111      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x18c>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	029b      	lsls	r3, r3, #10
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x188>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	02db      	lsls	r3, r3, #11
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d001      	beq.n	8001d04 <HAL_ADC_ConfigChannel+0x184>
 8001d00:	2312      	movs	r3, #18
 8001d02:	e024      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d04:	2300      	movs	r3, #0
 8001d06:	e022      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d08:	2311      	movs	r3, #17
 8001d0a:	e020      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d0c:	2310      	movs	r3, #16
 8001d0e:	e01e      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d10:	230f      	movs	r3, #15
 8001d12:	e01c      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d14:	230e      	movs	r3, #14
 8001d16:	e01a      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d18:	230d      	movs	r3, #13
 8001d1a:	e018      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	e016      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d20:	230b      	movs	r3, #11
 8001d22:	e014      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d24:	230a      	movs	r3, #10
 8001d26:	e012      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d28:	2309      	movs	r3, #9
 8001d2a:	e010      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	e00e      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d30:	2307      	movs	r3, #7
 8001d32:	e00c      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d34:	2306      	movs	r3, #6
 8001d36:	e00a      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d38:	2305      	movs	r3, #5
 8001d3a:	e008      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e006      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d40:	2303      	movs	r3, #3
 8001d42:	e004      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x1ce>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	6852      	ldr	r2, [r2, #4]
 8001d52:	201f      	movs	r0, #31
 8001d54:	4002      	ands	r2, r0
 8001d56:	4093      	lsls	r3, r2
 8001d58:	000a      	movs	r2, r1
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d808      	bhi.n	8001d82 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	001a      	movs	r2, r3
 8001d7e:	f7ff fcae 	bl	80016de <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	001a      	movs	r2, r3
 8001d90:	f7ff fce8 	bl	8001764 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db00      	blt.n	8001d9e <HAL_ADC_ConfigChannel+0x21e>
 8001d9c:	e0bc      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d9e:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_ADC_ConfigChannel+0x360>)
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fc5b 	bl	800165c <LL_ADC_GetCommonPathInternalCh>
 8001da6:	0003      	movs	r3, r0
 8001da8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a4d      	ldr	r2, [pc, #308]	; (8001ee4 <HAL_ADC_ConfigChannel+0x364>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d122      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dbc:	d11d      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	0412      	lsls	r2, r2, #16
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	4a46      	ldr	r2, [pc, #280]	; (8001ee0 <HAL_ADC_ConfigChannel+0x360>)
 8001dc8:	0019      	movs	r1, r3
 8001dca:	0010      	movs	r0, r2
 8001dcc:	f7ff fc32 	bl	8001634 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dd0:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <HAL_ADC_ConfigChannel+0x368>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4945      	ldr	r1, [pc, #276]	; (8001eec <HAL_ADC_ConfigChannel+0x36c>)
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f7fe f9a6 	bl	8000128 <__udivsi3>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	0013      	movs	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	189b      	adds	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dea:	e002      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f9      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001df8:	e08e      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a3c      	ldr	r2, [pc, #240]	; (8001ef0 <HAL_ADC_ConfigChannel+0x370>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d10e      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	045b      	lsls	r3, r3, #17
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d109      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2280      	movs	r2, #128	; 0x80
 8001e12:	0452      	lsls	r2, r2, #17
 8001e14:	4313      	orrs	r3, r2
 8001e16:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <HAL_ADC_ConfigChannel+0x360>)
 8001e18:	0019      	movs	r1, r3
 8001e1a:	0010      	movs	r0, r2
 8001e1c:	f7ff fc0a 	bl	8001634 <LL_ADC_SetCommonPathInternalCh>
 8001e20:	e07a      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a33      	ldr	r2, [pc, #204]	; (8001ef4 <HAL_ADC_ConfigChannel+0x374>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d000      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x2ae>
 8001e2c:	e074      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	03db      	lsls	r3, r3, #15
 8001e34:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e36:	d000      	beq.n	8001e3a <HAL_ADC_ConfigChannel+0x2ba>
 8001e38:	e06e      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	03d2      	lsls	r2, r2, #15
 8001e40:	4313      	orrs	r3, r2
 8001e42:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <HAL_ADC_ConfigChannel+0x360>)
 8001e44:	0019      	movs	r1, r3
 8001e46:	0010      	movs	r0, r2
 8001e48:	f7ff fbf4 	bl	8001634 <LL_ADC_SetCommonPathInternalCh>
 8001e4c:	e064      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d004      	beq.n	8001e64 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_ADC_ConfigChannel+0x35c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d107      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	0010      	movs	r0, r2
 8001e70:	f7ff fc66 	bl	8001740 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da4d      	bge.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_ADC_ConfigChannel+0x360>)
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff fbec 	bl	800165c <LL_ADC_GetCommonPathInternalCh>
 8001e84:	0003      	movs	r3, r0
 8001e86:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_ADC_ConfigChannel+0x364>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d108      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_ADC_ConfigChannel+0x378>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_ADC_ConfigChannel+0x360>)
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	f7ff fbc9 	bl	8001634 <LL_ADC_SetCommonPathInternalCh>
 8001ea2:	e039      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <HAL_ADC_ConfigChannel+0x370>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d108      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4a12      	ldr	r2, [pc, #72]	; (8001efc <HAL_ADC_ConfigChannel+0x37c>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_ADC_ConfigChannel+0x360>)
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	0010      	movs	r0, r2
 8001eba:	f7ff fbbb 	bl	8001634 <LL_ADC_SetCommonPathInternalCh>
 8001ebe:	e02b      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0b      	ldr	r2, [pc, #44]	; (8001ef4 <HAL_ADC_ConfigChannel+0x374>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d126      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <HAL_ADC_ConfigChannel+0x380>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	4a03      	ldr	r2, [pc, #12]	; (8001ee0 <HAL_ADC_ConfigChannel+0x360>)
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	0010      	movs	r0, r2
 8001ed6:	f7ff fbad 	bl	8001634 <LL_ADC_SetCommonPathInternalCh>
 8001eda:	e01d      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x398>
 8001edc:	80000004 	.word	0x80000004
 8001ee0:	40012708 	.word	0x40012708
 8001ee4:	b0001000 	.word	0xb0001000
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	00030d40 	.word	0x00030d40
 8001ef0:	b8004000 	.word	0xb8004000
 8001ef4:	b4002000 	.word	0xb4002000
 8001ef8:	ff7fffff 	.word	0xff7fffff
 8001efc:	feffffff 	.word	0xfeffffff
 8001f00:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	2220      	movs	r2, #32
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f10:	2317      	movs	r3, #23
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2254      	movs	r2, #84	; 0x54
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f20:	2317      	movs	r3, #23
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	781b      	ldrb	r3, [r3, #0]
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b006      	add	sp, #24
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	0002      	movs	r2, r0
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	1dfb      	adds	r3, r7, #7
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b7f      	cmp	r3, #127	; 0x7f
 8001f42:	d809      	bhi.n	8001f58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f44:	1dfb      	adds	r3, r7, #7
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	001a      	movs	r2, r3
 8001f4a:	231f      	movs	r3, #31
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <__NVIC_EnableIRQ+0x30>)
 8001f50:	2101      	movs	r1, #1
 8001f52:	4091      	lsls	r1, r2
 8001f54:	000a      	movs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b7f      	cmp	r3, #127	; 0x7f
 8001f78:	d828      	bhi.n	8001fcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7a:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <__NVIC_SetPriority+0xd4>)
 8001f7c:	1dfb      	adds	r3, r7, #7
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	33c0      	adds	r3, #192	; 0xc0
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	589b      	ldr	r3, [r3, r2]
 8001f8a:	1dfa      	adds	r2, r7, #7
 8001f8c:	7812      	ldrb	r2, [r2, #0]
 8001f8e:	0011      	movs	r1, r2
 8001f90:	2203      	movs	r2, #3
 8001f92:	400a      	ands	r2, r1
 8001f94:	00d2      	lsls	r2, r2, #3
 8001f96:	21ff      	movs	r1, #255	; 0xff
 8001f98:	4091      	lsls	r1, r2
 8001f9a:	000a      	movs	r2, r1
 8001f9c:	43d2      	mvns	r2, r2
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	019b      	lsls	r3, r3, #6
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	401a      	ands	r2, r3
 8001faa:	1dfb      	adds	r3, r7, #7
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	4003      	ands	r3, r0
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fb8:	481f      	ldr	r0, [pc, #124]	; (8002038 <__NVIC_SetPriority+0xd4>)
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	33c0      	adds	r3, #192	; 0xc0
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fca:	e031      	b.n	8002030 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <__NVIC_SetPriority+0xd8>)
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	3b08      	subs	r3, #8
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3306      	adds	r3, #6
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	18d3      	adds	r3, r2, r3
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	1dfa      	adds	r2, r7, #7
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	0011      	movs	r1, r2
 8001fec:	2203      	movs	r2, #3
 8001fee:	400a      	ands	r2, r1
 8001ff0:	00d2      	lsls	r2, r2, #3
 8001ff2:	21ff      	movs	r1, #255	; 0xff
 8001ff4:	4091      	lsls	r1, r2
 8001ff6:	000a      	movs	r2, r1
 8001ff8:	43d2      	mvns	r2, r2
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	401a      	ands	r2, r3
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	0018      	movs	r0, r3
 800200c:	2303      	movs	r3, #3
 800200e:	4003      	ands	r3, r0
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <__NVIC_SetPriority+0xd8>)
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	001c      	movs	r4, r3
 800201c:	230f      	movs	r3, #15
 800201e:	4023      	ands	r3, r4
 8002020:	3b08      	subs	r3, #8
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	430a      	orrs	r2, r1
 8002026:	3306      	adds	r3, #6
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	18c3      	adds	r3, r0, r3
 800202c:	3304      	adds	r3, #4
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b003      	add	sp, #12
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	045b      	lsls	r3, r3, #17
 8002050:	429a      	cmp	r2, r3
 8002052:	d301      	bcc.n	8002058 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002054:	2301      	movs	r3, #1
 8002056:	e010      	b.n	800207a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <SysTick_Config+0x44>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	3a01      	subs	r2, #1
 800205e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002060:	2301      	movs	r3, #1
 8002062:	425b      	negs	r3, r3
 8002064:	2103      	movs	r1, #3
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff ff7c 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SysTick_Config+0x44>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <SysTick_Config+0x44>)
 8002074:	2207      	movs	r2, #7
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b002      	add	sp, #8
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	e000e010 	.word	0xe000e010

08002088 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	210f      	movs	r1, #15
 8002094:	187b      	adds	r3, r7, r1
 8002096:	1c02      	adds	r2, r0, #0
 8002098:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	187b      	adds	r3, r7, r1
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	0011      	movs	r1, r2
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff ff5d 	bl	8001f64 <__NVIC_SetPriority>
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b004      	add	sp, #16
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	0002      	movs	r2, r0
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b25b      	sxtb	r3, r3
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff ff33 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b002      	add	sp, #8
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff ffaf 	bl	8002040 <SysTick_Config>
 80020e2:	0003      	movs	r3, r0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e050      	b.n	80021a0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2225      	movs	r2, #37	; 0x25
 8002102:	5c9b      	ldrb	r3, [r3, r2]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d008      	beq.n	800211c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2224      	movs	r2, #36	; 0x24
 8002114:	2100      	movs	r1, #0
 8002116:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e041      	b.n	80021a0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	210e      	movs	r1, #14
 8002128:	438a      	bics	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	491c      	ldr	r1, [pc, #112]	; (80021a8 <HAL_DMA_Abort+0xbc>)
 8002138:	400a      	ands	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_DMA_Abort+0xc0>)
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	221c      	movs	r2, #28
 8002156:	4013      	ands	r3, r2
 8002158:	2201      	movs	r2, #1
 800215a:	409a      	lsls	r2, r3
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_DMA_Abort+0xc0>)
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800216a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00c      	beq.n	800218e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	490a      	ldr	r1, [pc, #40]	; (80021a8 <HAL_DMA_Abort+0xbc>)
 8002180:	400a      	ands	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800218c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2225      	movs	r2, #37	; 0x25
 8002192:	2101      	movs	r1, #1
 8002194:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2224      	movs	r2, #36	; 0x24
 800219a:	2100      	movs	r1, #0
 800219c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	fffffeff 	.word	0xfffffeff
 80021ac:	40020000 	.word	0x40020000

080021b0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b8:	210f      	movs	r1, #15
 80021ba:	187b      	adds	r3, r7, r1
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2225      	movs	r2, #37	; 0x25
 80021c4:	5c9b      	ldrb	r3, [r3, r2]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d006      	beq.n	80021da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2204      	movs	r2, #4
 80021d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
 80021d8:	e049      	b.n	800226e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	210e      	movs	r1, #14
 80021e6:	438a      	bics	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	438a      	bics	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	491d      	ldr	r1, [pc, #116]	; (800227c <HAL_DMA_Abort_IT+0xcc>)
 8002206:	400a      	ands	r2, r1
 8002208:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_DMA_Abort_IT+0xd0>)
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	221c      	movs	r2, #28
 8002214:	4013      	ands	r3, r2
 8002216:	2201      	movs	r2, #1
 8002218:	409a      	lsls	r2, r3
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_DMA_Abort_IT+0xd0>)
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002228:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00c      	beq.n	800224c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223c:	490f      	ldr	r1, [pc, #60]	; (800227c <HAL_DMA_Abort_IT+0xcc>)
 800223e:	400a      	ands	r2, r1
 8002240:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800224a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2225      	movs	r2, #37	; 0x25
 8002250:	2101      	movs	r1, #1
 8002252:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2224      	movs	r2, #36	; 0x24
 8002258:	2100      	movs	r1, #0
 800225a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	0010      	movs	r0, r2
 800226c:	4798      	blx	r3
    }
  }
  return status;
 800226e:	230f      	movs	r3, #15
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}
 800227c:	fffffeff 	.word	0xfffffeff
 8002280:	40020000 	.word	0x40020000

08002284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	e147      	b.n	8002524 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4091      	lsls	r1, r2
 800229e:	000a      	movs	r2, r1
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d100      	bne.n	80022ac <HAL_GPIO_Init+0x28>
 80022aa:	e138      	b.n	800251e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2203      	movs	r2, #3
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d005      	beq.n	80022c4 <HAL_GPIO_Init+0x40>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2203      	movs	r2, #3
 80022be:	4013      	ands	r3, r2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d130      	bne.n	8002326 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2203      	movs	r2, #3
 80022d0:	409a      	lsls	r2, r3
 80022d2:	0013      	movs	r3, r2
 80022d4:	43da      	mvns	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	409a      	lsls	r2, r3
 80022e6:	0013      	movs	r3, r2
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022fa:	2201      	movs	r2, #1
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	43da      	mvns	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	2201      	movs	r2, #1
 8002312:	401a      	ands	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2203      	movs	r2, #3
 800232c:	4013      	ands	r3, r2
 800232e:	2b03      	cmp	r3, #3
 8002330:	d017      	beq.n	8002362 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	409a      	lsls	r2, r3
 8002340:	0013      	movs	r3, r2
 8002342:	43da      	mvns	r2, r3
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	409a      	lsls	r2, r3
 8002354:	0013      	movs	r3, r2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2203      	movs	r2, #3
 8002368:	4013      	ands	r3, r2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d123      	bne.n	80023b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	08da      	lsrs	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3208      	adds	r2, #8
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	58d3      	ldr	r3, [r2, r3]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2207      	movs	r2, #7
 8002380:	4013      	ands	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	220f      	movs	r2, #15
 8002386:	409a      	lsls	r2, r3
 8002388:	0013      	movs	r3, r2
 800238a:	43da      	mvns	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2107      	movs	r1, #7
 800239a:	400b      	ands	r3, r1
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3208      	adds	r2, #8
 80023b0:	0092      	lsls	r2, r2, #2
 80023b2:	6939      	ldr	r1, [r7, #16]
 80023b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	409a      	lsls	r2, r3
 80023c4:	0013      	movs	r3, r2
 80023c6:	43da      	mvns	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	401a      	ands	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	23c0      	movs	r3, #192	; 0xc0
 80023f0:	029b      	lsls	r3, r3, #10
 80023f2:	4013      	ands	r3, r2
 80023f4:	d100      	bne.n	80023f8 <HAL_GPIO_Init+0x174>
 80023f6:	e092      	b.n	800251e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x2b8>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3318      	adds	r3, #24
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	589b      	ldr	r3, [r3, r2]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2203      	movs	r2, #3
 800240a:	4013      	ands	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	220f      	movs	r2, #15
 8002410:	409a      	lsls	r2, r3
 8002412:	0013      	movs	r3, r2
 8002414:	43da      	mvns	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	23a0      	movs	r3, #160	; 0xa0
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	429a      	cmp	r2, r3
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x1ca>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a45      	ldr	r2, [pc, #276]	; (8002540 <HAL_GPIO_Init+0x2bc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x1c6>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a44      	ldr	r2, [pc, #272]	; (8002544 <HAL_GPIO_Init+0x2c0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x1c2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a43      	ldr	r2, [pc, #268]	; (8002548 <HAL_GPIO_Init+0x2c4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x1be>
 800243e:	2303      	movs	r3, #3
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x1cc>
 8002442:	2305      	movs	r3, #5
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x1cc>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x1cc>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x1cc>
 800244e:	2300      	movs	r3, #0
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	2103      	movs	r1, #3
 8002454:	400a      	ands	r2, r1
 8002456:	00d2      	lsls	r2, r2, #3
 8002458:	4093      	lsls	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002460:	4936      	ldr	r1, [pc, #216]	; (800253c <HAL_GPIO_Init+0x2b8>)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3318      	adds	r3, #24
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800246e:	4b33      	ldr	r3, [pc, #204]	; (800253c <HAL_GPIO_Init+0x2b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43da      	mvns	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	035b      	lsls	r3, r3, #13
 8002486:	4013      	ands	r3, r2
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002492:	4b2a      	ldr	r3, [pc, #168]	; (800253c <HAL_GPIO_Init+0x2b8>)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_GPIO_Init+0x2b8>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	2380      	movs	r3, #128	; 0x80
 80024ae:	039b      	lsls	r3, r3, #14
 80024b0:	4013      	ands	r3, r2
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024bc:	4b1f      	ldr	r3, [pc, #124]	; (800253c <HAL_GPIO_Init+0x2b8>)
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024c2:	4a1e      	ldr	r2, [pc, #120]	; (800253c <HAL_GPIO_Init+0x2b8>)
 80024c4:	2384      	movs	r3, #132	; 0x84
 80024c6:	58d3      	ldr	r3, [r2, r3]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	43da      	mvns	r2, r3
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	4013      	ands	r3, r2
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024e8:	4914      	ldr	r1, [pc, #80]	; (800253c <HAL_GPIO_Init+0x2b8>)
 80024ea:	2284      	movs	r2, #132	; 0x84
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <HAL_GPIO_Init+0x2b8>)
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	58d3      	ldr	r3, [r2, r3]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43da      	mvns	r2, r3
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	025b      	lsls	r3, r3, #9
 800250a:	4013      	ands	r3, r2
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002516:	4909      	ldr	r1, [pc, #36]	; (800253c <HAL_GPIO_Init+0x2b8>)
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3301      	adds	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	40da      	lsrs	r2, r3
 800252c:	1e13      	subs	r3, r2, #0
 800252e:	d000      	beq.n	8002532 <HAL_GPIO_Init+0x2ae>
 8002530:	e6b0      	b.n	8002294 <HAL_GPIO_Init+0x10>
  }
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b006      	add	sp, #24
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021800 	.word	0x40021800
 8002540:	50000400 	.word	0x50000400
 8002544:	50000800 	.word	0x50000800
 8002548:	50000c00 	.word	0x50000c00

0800254c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	000a      	movs	r2, r1
 8002556:	1cbb      	adds	r3, r7, #2
 8002558:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	1cba      	adds	r2, r7, #2
 8002560:	8812      	ldrh	r2, [r2, #0]
 8002562:	4013      	ands	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002566:	230f      	movs	r3, #15
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e003      	b.n	8002578 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002570:	230f      	movs	r3, #15
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	781b      	ldrb	r3, [r3, #0]
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	0008      	movs	r0, r1
 8002590:	0011      	movs	r1, r2
 8002592:	1cbb      	adds	r3, r7, #2
 8002594:	1c02      	adds	r2, r0, #0
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	1c7b      	adds	r3, r7, #1
 800259a:	1c0a      	adds	r2, r1, #0
 800259c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800259e:	1c7b      	adds	r3, r7, #1
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025a6:	1cbb      	adds	r3, r7, #2
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ae:	e003      	b.n	80025b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025b0:	1cbb      	adds	r3, r7, #2
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	000a      	movs	r2, r1
 80025ca:	1cbb      	adds	r3, r7, #2
 80025cc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025d4:	1cbb      	adds	r3, r7, #2
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	1cb9      	adds	r1, r7, #2
 80025e4:	8809      	ldrh	r1, [r1, #0]
 80025e6:	400b      	ands	r3, r1
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e08f      	b.n	800272a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2241      	movs	r2, #65	; 0x41
 800260e:	5c9b      	ldrb	r3, [r3, r2]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2240      	movs	r2, #64	; 0x40
 800261a:	2100      	movs	r1, #0
 800261c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0018      	movs	r0, r3
 8002622:	f7fe fd23 	bl	800106c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2241      	movs	r2, #65	; 0x41
 800262a:	2124      	movs	r1, #36	; 0x24
 800262c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2101      	movs	r1, #1
 800263a:	438a      	bics	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	493b      	ldr	r1, [pc, #236]	; (8002734 <HAL_I2C_Init+0x13c>)
 8002648:	400a      	ands	r2, r1
 800264a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4938      	ldr	r1, [pc, #224]	; (8002738 <HAL_I2C_Init+0x140>)
 8002658:	400a      	ands	r2, r1
 800265a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d108      	bne.n	8002676 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	0209      	lsls	r1, r1, #8
 8002670:	430a      	orrs	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	e007      	b.n	8002686 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2184      	movs	r1, #132	; 0x84
 8002680:	0209      	lsls	r1, r1, #8
 8002682:	430a      	orrs	r2, r1
 8002684:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d109      	bne.n	80026a2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0109      	lsls	r1, r1, #4
 800269c:	430a      	orrs	r2, r1
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	e007      	b.n	80026b2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4923      	ldr	r1, [pc, #140]	; (800273c <HAL_I2C_Init+0x144>)
 80026ae:	400a      	ands	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4920      	ldr	r1, [pc, #128]	; (8002740 <HAL_I2C_Init+0x148>)
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	491a      	ldr	r1, [pc, #104]	; (8002738 <HAL_I2C_Init+0x140>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	431a      	orrs	r2, r3
 80026dc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69d9      	ldr	r1, [r3, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2241      	movs	r2, #65	; 0x41
 8002716:	2120      	movs	r1, #32
 8002718:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2242      	movs	r2, #66	; 0x42
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	f0ffffff 	.word	0xf0ffffff
 8002738:	ffff7fff 	.word	0xffff7fff
 800273c:	fffff7ff 	.word	0xfffff7ff
 8002740:	02008000 	.word	0x02008000

08002744 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	0008      	movs	r0, r1
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	0019      	movs	r1, r3
 8002752:	230a      	movs	r3, #10
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	1c02      	adds	r2, r0, #0
 8002758:	801a      	strh	r2, [r3, #0]
 800275a:	2308      	movs	r3, #8
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	1c0a      	adds	r2, r1, #0
 8002760:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2241      	movs	r2, #65	; 0x41
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b20      	cmp	r3, #32
 800276c:	d000      	beq.n	8002770 <HAL_I2C_Master_Transmit+0x2c>
 800276e:	e10a      	b.n	8002986 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2240      	movs	r2, #64	; 0x40
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_I2C_Master_Transmit+0x3a>
 800277a:	2302      	movs	r3, #2
 800277c:	e104      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2240      	movs	r2, #64	; 0x40
 8002782:	2101      	movs	r1, #1
 8002784:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002786:	f7fe ff11 	bl	80015ac <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	0219      	lsls	r1, r3, #8
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2319      	movs	r3, #25
 800279a:	2201      	movs	r2, #1
 800279c:	f000 f91e 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 80027a0:	1e03      	subs	r3, r0, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0ef      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2241      	movs	r2, #65	; 0x41
 80027ac:	2121      	movs	r1, #33	; 0x21
 80027ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2242      	movs	r2, #66	; 0x42
 80027b4:	2110      	movs	r1, #16
 80027b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2208      	movs	r2, #8
 80027c8:	18ba      	adds	r2, r7, r2
 80027ca:	8812      	ldrh	r2, [r2, #0]
 80027cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2bff      	cmp	r3, #255	; 0xff
 80027dc:	d906      	bls.n	80027ec <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	22ff      	movs	r2, #255	; 0xff
 80027e2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	045b      	lsls	r3, r3, #17
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e007      	b.n	80027fc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	049b      	lsls	r3, r3, #18
 80027fa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d027      	beq.n	8002854 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3301      	adds	r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	697c      	ldr	r4, [r7, #20]
 8002840:	230a      	movs	r3, #10
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	8819      	ldrh	r1, [r3, #0]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	4b51      	ldr	r3, [pc, #324]	; (8002990 <HAL_I2C_Master_Transmit+0x24c>)
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	0023      	movs	r3, r4
 800284e:	f000 faa7 	bl	8002da0 <I2C_TransferConfig>
 8002852:	e06f      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	b2da      	uxtb	r2, r3
 800285a:	697c      	ldr	r4, [r7, #20]
 800285c:	230a      	movs	r3, #10
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	8819      	ldrh	r1, [r3, #0]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_I2C_Master_Transmit+0x24c>)
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	0023      	movs	r3, r4
 800286a:	f000 fa99 	bl	8002da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800286e:	e061      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f908 	bl	8002a8c <I2C_WaitOnTXISFlagUntilTimeout>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e081      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03a      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d136      	bne.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	0013      	movs	r3, r2
 80028d0:	2200      	movs	r2, #0
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	f000 f882 	bl	80029dc <I2C_WaitOnFlagUntilTimeout>
 80028d8:	1e03      	subs	r3, r0, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e053      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2bff      	cmp	r3, #255	; 0xff
 80028e8:	d911      	bls.n	800290e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	045c      	lsls	r4, r3, #17
 80028fa:	230a      	movs	r3, #10
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	8819      	ldrh	r1, [r3, #0]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	2300      	movs	r3, #0
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	0023      	movs	r3, r4
 8002908:	f000 fa4a 	bl	8002da0 <I2C_TransferConfig>
 800290c:	e012      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	b2da      	uxtb	r2, r3
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	049c      	lsls	r4, r3, #18
 8002922:	230a      	movs	r3, #10
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	8819      	ldrh	r1, [r3, #0]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	2300      	movs	r3, #0
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	0023      	movs	r3, r4
 8002930:	f000 fa36 	bl	8002da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d198      	bne.n	8002870 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0018      	movs	r0, r3
 8002946:	f000 f8e7 	bl	8002b18 <I2C_WaitOnSTOPFlagUntilTimeout>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e01a      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2220      	movs	r2, #32
 8002958:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	490b      	ldr	r1, [pc, #44]	; (8002994 <HAL_I2C_Master_Transmit+0x250>)
 8002966:	400a      	ands	r2, r1
 8002968:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2241      	movs	r2, #65	; 0x41
 800296e:	2120      	movs	r1, #32
 8002970:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2242      	movs	r2, #66	; 0x42
 8002976:	2100      	movs	r1, #0
 8002978:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2240      	movs	r2, #64	; 0x40
 800297e:	2100      	movs	r1, #0
 8002980:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b007      	add	sp, #28
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	80002000 	.word	0x80002000
 8002994:	fe00e800 	.word	0xfe00e800

08002998 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d103      	bne.n	80029b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2201      	movs	r2, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d007      	beq.n	80029d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	619a      	str	r2, [r3, #24]
  }
}
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	46bd      	mov	sp, r7
 80029d8:	b002      	add	sp, #8
 80029da:	bd80      	pop	{r7, pc}

080029dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	1dfb      	adds	r3, r7, #7
 80029ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ec:	e03a      	b.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	6839      	ldr	r1, [r7, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f8d3 	bl	8002ba0 <I2C_IsErrorOccurred>
 80029fa:	1e03      	subs	r3, r0, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e040      	b.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	d02d      	beq.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7fe fdd0 	bl	80015ac <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d122      	bne.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	4013      	ands	r3, r2
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	425a      	negs	r2, r3
 8002a2e:	4153      	adcs	r3, r2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	001a      	movs	r2, r3
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d113      	bne.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	2220      	movs	r2, #32
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2241      	movs	r2, #65	; 0x41
 8002a4c:	2120      	movs	r1, #32
 8002a4e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2242      	movs	r2, #66	; 0x42
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e00f      	b.n	8002a84 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	425a      	negs	r2, r3
 8002a74:	4153      	adcs	r3, r2
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	001a      	movs	r2, r3
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d0b5      	beq.n	80029ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	0018      	movs	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b004      	add	sp, #16
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a98:	e032      	b.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 f87d 	bl	8002ba0 <I2C_IsErrorOccurred>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e030      	b.n	8002b10 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	d025      	beq.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab4:	f7fe fd7a 	bl	80015ac <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d302      	bcc.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11a      	bne.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d013      	beq.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	2220      	movs	r2, #32
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2241      	movs	r2, #65	; 0x41
 8002ae8:	2120      	movs	r1, #32
 8002aea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2242      	movs	r2, #66	; 0x42
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	2100      	movs	r1, #0
 8002afa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e007      	b.n	8002b10 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2202      	movs	r2, #2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d1c5      	bne.n	8002a9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b004      	add	sp, #16
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b24:	e02f      	b.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 f837 	bl	8002ba0 <I2C_IsErrorOccurred>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e02d      	b.n	8002b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3a:	f7fe fd37 	bl	80015ac <HAL_GetTick>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d302      	bcc.n	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d11a      	bne.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2220      	movs	r2, #32
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d013      	beq.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	2220      	movs	r2, #32
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2241      	movs	r2, #65	; 0x41
 8002b6e:	2120      	movs	r1, #32
 8002b70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2242      	movs	r2, #66	; 0x42
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	2100      	movs	r1, #0
 8002b80:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e007      	b.n	8002b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d1c8      	bne.n	8002b26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b004      	add	sp, #16
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b08b      	sub	sp, #44	; 0x2c
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2327      	movs	r3, #39	; 0x27
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d100      	bne.n	8002bce <I2C_IsErrorOccurred+0x2e>
 8002bcc:	e082      	b.n	8002cd4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bd6:	e060      	b.n	8002c9a <I2C_IsErrorOccurred+0xfa>
 8002bd8:	2427      	movs	r4, #39	; 0x27
 8002bda:	193b      	adds	r3, r7, r4
 8002bdc:	193a      	adds	r2, r7, r4
 8002bde:	7812      	ldrb	r2, [r2, #0]
 8002be0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3301      	adds	r3, #1
 8002be6:	d058      	beq.n	8002c9a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002be8:	f7fe fce0 	bl	80015ac <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d306      	bcc.n	8002c06 <I2C_IsErrorOccurred+0x66>
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	193a      	adds	r2, r7, r4
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d149      	bne.n	8002c9a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	01db      	lsls	r3, r3, #7
 8002c10:	4013      	ands	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c14:	2013      	movs	r0, #19
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	2142      	movs	r1, #66	; 0x42
 8002c1c:	5c52      	ldrb	r2, [r2, r1]
 8002c1e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d126      	bne.n	8002c82 <I2C_IsErrorOccurred+0xe2>
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	01db      	lsls	r3, r3, #7
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d021      	beq.n	8002c82 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002c3e:	183b      	adds	r3, r7, r0
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d01d      	beq.n	8002c82 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	01c9      	lsls	r1, r1, #7
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c58:	f7fe fca8 	bl	80015ac <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c60:	e00f      	b.n	8002c82 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c62:	f7fe fca3 	bl	80015ac <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b19      	cmp	r3, #25
 8002c6e:	d908      	bls.n	8002c82 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	2220      	movs	r2, #32
 8002c74:	4313      	orrs	r3, r2
 8002c76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c78:	2327      	movs	r3, #39	; 0x27
 8002c7a:	18fb      	adds	r3, r7, r3
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]

              break;
 8002c80:	e00b      	b.n	8002c9a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2127      	movs	r1, #39	; 0x27
 8002c8e:	187a      	adds	r2, r7, r1
 8002c90:	1879      	adds	r1, r7, r1
 8002c92:	7809      	ldrb	r1, [r1, #0]
 8002c94:	7011      	strb	r1, [r2, #0]
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d1e3      	bne.n	8002c62 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d004      	beq.n	8002cb2 <I2C_IsErrorOccurred+0x112>
 8002ca8:	2327      	movs	r3, #39	; 0x27
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d092      	beq.n	8002bd8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cb2:	2327      	movs	r3, #39	; 0x27
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ccc:	2327      	movs	r3, #39	; 0x27
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d00c      	beq.n	8002d00 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4313      	orrs	r3, r2
 8002cec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2280      	movs	r2, #128	; 0x80
 8002cf4:	0052      	lsls	r2, r2, #1
 8002cf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf8:	2327      	movs	r3, #39	; 0x27
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4013      	ands	r3, r2
 8002d08:	d00c      	beq.n	8002d24 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	00d2      	lsls	r2, r2, #3
 8002d1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d1c:	2327      	movs	r3, #39	; 0x27
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d00c      	beq.n	8002d48 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	2202      	movs	r2, #2
 8002d32:	4313      	orrs	r3, r2
 8002d34:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	0092      	lsls	r2, r2, #2
 8002d3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d40:	2327      	movs	r3, #39	; 0x27
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002d48:	2327      	movs	r3, #39	; 0x27
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01d      	beq.n	8002d8e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff fe1f 	bl	8002998 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	490d      	ldr	r1, [pc, #52]	; (8002d9c <I2C_IsErrorOccurred+0x1fc>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2241      	movs	r2, #65	; 0x41
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2242      	movs	r2, #66	; 0x42
 8002d82:	2100      	movs	r1, #0
 8002d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2240      	movs	r2, #64	; 0x40
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002d8e:	2327      	movs	r3, #39	; 0x27
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	781b      	ldrb	r3, [r3, #0]
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b00b      	add	sp, #44	; 0x2c
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	fe00e800 	.word	0xfe00e800

08002da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	0008      	movs	r0, r1
 8002daa:	0011      	movs	r1, r2
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	240a      	movs	r4, #10
 8002db0:	193b      	adds	r3, r7, r4
 8002db2:	1c02      	adds	r2, r0, #0
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	2009      	movs	r0, #9
 8002db8:	183b      	adds	r3, r7, r0
 8002dba:	1c0a      	adds	r2, r1, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dbe:	193b      	adds	r3, r7, r4
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	059b      	lsls	r3, r3, #22
 8002dc4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dc6:	183b      	adds	r3, r7, r0
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	0419      	lsls	r1, r3, #16
 8002dcc:	23ff      	movs	r3, #255	; 0xff
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dd2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dea:	0d51      	lsrs	r1, r2, #21
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	00d2      	lsls	r2, r2, #3
 8002df0:	400a      	ands	r2, r1
 8002df2:	4907      	ldr	r1, [pc, #28]	; (8002e10 <I2C_TransferConfig+0x70>)
 8002df4:	430a      	orrs	r2, r1
 8002df6:	43d2      	mvns	r2, r2
 8002df8:	401a      	ands	r2, r3
 8002dfa:	0011      	movs	r1, r2
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b007      	add	sp, #28
 8002e0c:	bd90      	pop	{r4, r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	03ff63ff 	.word	0x03ff63ff

08002e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2241      	movs	r2, #65	; 0x41
 8002e22:	5c9b      	ldrb	r3, [r3, r2]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d138      	bne.n	8002e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2240      	movs	r2, #64	; 0x40
 8002e2e:	5c9b      	ldrb	r3, [r3, r2]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e032      	b.n	8002e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2241      	movs	r2, #65	; 0x41
 8002e44:	2124      	movs	r1, #36	; 0x24
 8002e46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2101      	movs	r1, #1
 8002e54:	438a      	bics	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4911      	ldr	r1, [pc, #68]	; (8002ea8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2101      	movs	r1, #1
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2241      	movs	r2, #65	; 0x41
 8002e8c:	2120      	movs	r1, #32
 8002e8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2240      	movs	r2, #64	; 0x40
 8002e94:	2100      	movs	r1, #0
 8002e96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e000      	b.n	8002e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	ffffefff 	.word	0xffffefff

08002eac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2241      	movs	r2, #65	; 0x41
 8002eba:	5c9b      	ldrb	r3, [r3, r2]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d139      	bne.n	8002f36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2240      	movs	r2, #64	; 0x40
 8002ec6:	5c9b      	ldrb	r3, [r3, r2]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e033      	b.n	8002f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2241      	movs	r2, #65	; 0x41
 8002edc:	2124      	movs	r1, #36	; 0x24
 8002ede:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2101      	movs	r1, #1
 8002eec:	438a      	bics	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2241      	movs	r2, #65	; 0x41
 8002f26:	2120      	movs	r1, #32
 8002f28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2240      	movs	r2, #64	; 0x40
 8002f2e:	2100      	movs	r1, #0
 8002f30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b004      	add	sp, #16
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	fffff0ff 	.word	0xfffff0ff

08002f44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d11f      	bne.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4912      	ldr	r1, [pc, #72]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7fd f8d6 	bl	8000128 <__udivsi3>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	3301      	adds	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f82:	e008      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e001      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e009      	b.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d0ed      	beq.n	8002f84 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b004      	add	sp, #16
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	fffff9ff 	.word	0xfffff9ff
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	000f4240 	.word	0x000f4240

08002fc4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	23e0      	movs	r3, #224	; 0xe0
 8002fce:	01db      	lsls	r3, r3, #7
 8002fd0:	4013      	ands	r3, r2
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000

08002fdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e2fe      	b.n	80035ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <HAL_RCC_OscConfig+0x1e>
 8002ff8:	e07c      	b.n	80030f4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffa:	4bc3      	ldr	r3, [pc, #780]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2238      	movs	r2, #56	; 0x38
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003004:	4bc0      	ldr	r3, [pc, #768]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2203      	movs	r2, #3
 800300a:	4013      	ands	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b10      	cmp	r3, #16
 8003012:	d102      	bne.n	800301a <HAL_RCC_OscConfig+0x3e>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d002      	beq.n	8003020 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4bb9      	ldr	r3, [pc, #740]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	029b      	lsls	r3, r3, #10
 8003028:	4013      	ands	r3, r2
 800302a:	d062      	beq.n	80030f2 <HAL_RCC_OscConfig+0x116>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d15e      	bne.n	80030f2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e2d9      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	025b      	lsls	r3, r3, #9
 8003040:	429a      	cmp	r2, r3
 8003042:	d107      	bne.n	8003054 <HAL_RCC_OscConfig+0x78>
 8003044:	4bb0      	ldr	r3, [pc, #704]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4baf      	ldr	r3, [pc, #700]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800304a:	2180      	movs	r1, #128	; 0x80
 800304c:	0249      	lsls	r1, r1, #9
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e020      	b.n	8003096 <HAL_RCC_OscConfig+0xba>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	23a0      	movs	r3, #160	; 0xa0
 800305a:	02db      	lsls	r3, r3, #11
 800305c:	429a      	cmp	r2, r3
 800305e:	d10e      	bne.n	800307e <HAL_RCC_OscConfig+0xa2>
 8003060:	4ba9      	ldr	r3, [pc, #676]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4ba8      	ldr	r3, [pc, #672]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	02c9      	lsls	r1, r1, #11
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	4ba6      	ldr	r3, [pc, #664]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4ba5      	ldr	r3, [pc, #660]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003074:	2180      	movs	r1, #128	; 0x80
 8003076:	0249      	lsls	r1, r1, #9
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e00b      	b.n	8003096 <HAL_RCC_OscConfig+0xba>
 800307e:	4ba2      	ldr	r3, [pc, #648]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4ba1      	ldr	r3, [pc, #644]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003084:	49a1      	ldr	r1, [pc, #644]	; (800330c <HAL_RCC_OscConfig+0x330>)
 8003086:	400a      	ands	r2, r1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	4b9f      	ldr	r3, [pc, #636]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b9e      	ldr	r3, [pc, #632]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003090:	499f      	ldr	r1, [pc, #636]	; (8003310 <HAL_RCC_OscConfig+0x334>)
 8003092:	400a      	ands	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d014      	beq.n	80030c8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fa85 	bl	80015ac <HAL_GetTick>
 80030a2:	0003      	movs	r3, r0
 80030a4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe fa80 	bl	80015ac <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e298      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ba:	4b93      	ldr	r3, [pc, #588]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	029b      	lsls	r3, r3, #10
 80030c2:	4013      	ands	r3, r2
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0xcc>
 80030c6:	e015      	b.n	80030f4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe fa70 	bl	80015ac <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d2:	f7fe fa6b 	bl	80015ac <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e283      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e4:	4b88      	ldr	r3, [pc, #544]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	029b      	lsls	r3, r3, #10
 80030ec:	4013      	ands	r3, r2
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0xf6>
 80030f0:	e000      	b.n	80030f4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2202      	movs	r2, #2
 80030fa:	4013      	ands	r3, r2
 80030fc:	d100      	bne.n	8003100 <HAL_RCC_OscConfig+0x124>
 80030fe:	e099      	b.n	8003234 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003100:	4b81      	ldr	r3, [pc, #516]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2238      	movs	r2, #56	; 0x38
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800310a:	4b7f      	ldr	r3, [pc, #508]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2203      	movs	r2, #3
 8003110:	4013      	ands	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b10      	cmp	r3, #16
 8003118:	d102      	bne.n	8003120 <HAL_RCC_OscConfig+0x144>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d002      	beq.n	8003126 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d135      	bne.n	8003192 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003126:	4b78      	ldr	r3, [pc, #480]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4013      	ands	r3, r2
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x162>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e256      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b72      	ldr	r3, [pc, #456]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a74      	ldr	r2, [pc, #464]	; (8003314 <HAL_RCC_OscConfig+0x338>)
 8003144:	4013      	ands	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	021a      	lsls	r2, r3, #8
 800314e:	4b6e      	ldr	r3, [pc, #440]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d112      	bne.n	8003180 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800315a:	4b6b      	ldr	r3, [pc, #428]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6e      	ldr	r2, [pc, #440]	; (8003318 <HAL_RCC_OscConfig+0x33c>)
 8003160:	4013      	ands	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	4b67      	ldr	r3, [pc, #412]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800316e:	4b66      	ldr	r3, [pc, #408]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	0adb      	lsrs	r3, r3, #11
 8003174:	2207      	movs	r2, #7
 8003176:	4013      	ands	r3, r2
 8003178:	4a68      	ldr	r2, [pc, #416]	; (800331c <HAL_RCC_OscConfig+0x340>)
 800317a:	40da      	lsrs	r2, r3
 800317c:	4b68      	ldr	r3, [pc, #416]	; (8003320 <HAL_RCC_OscConfig+0x344>)
 800317e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003180:	4b68      	ldr	r3, [pc, #416]	; (8003324 <HAL_RCC_OscConfig+0x348>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0018      	movs	r0, r3
 8003186:	f7fe f9b5 	bl	80014f4 <HAL_InitTick>
 800318a:	1e03      	subs	r3, r0, #0
 800318c:	d051      	beq.n	8003232 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e22c      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d030      	beq.n	80031fc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800319a:	4b5b      	ldr	r3, [pc, #364]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5e      	ldr	r2, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x33c>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	0019      	movs	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	4b57      	ldr	r3, [pc, #348]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80031aa:	430a      	orrs	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80031ae:	4b56      	ldr	r3, [pc, #344]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b55      	ldr	r3, [pc, #340]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	0049      	lsls	r1, r1, #1
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fe f9f6 	bl	80015ac <HAL_GetTick>
 80031c0:	0003      	movs	r3, r0
 80031c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fe f9f1 	bl	80015ac <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e209      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d8:	4b4b      	ldr	r3, [pc, #300]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4013      	ands	r3, r2
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b48      	ldr	r3, [pc, #288]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a4a      	ldr	r2, [pc, #296]	; (8003314 <HAL_RCC_OscConfig+0x338>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	021a      	lsls	r2, r3, #8
 80031f4:	4b44      	ldr	r3, [pc, #272]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	e01b      	b.n	8003234 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80031fc:	4b42      	ldr	r3, [pc, #264]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003202:	4949      	ldr	r1, [pc, #292]	; (8003328 <HAL_RCC_OscConfig+0x34c>)
 8003204:	400a      	ands	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe f9d0 	bl	80015ac <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003212:	f7fe f9cb 	bl	80015ac <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e1e3      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003224:	4b38      	ldr	r3, [pc, #224]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4013      	ands	r3, r2
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x236>
 8003230:	e000      	b.n	8003234 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003232:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2208      	movs	r2, #8
 800323a:	4013      	ands	r3, r2
 800323c:	d047      	beq.n	80032ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800323e:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2238      	movs	r2, #56	; 0x38
 8003244:	4013      	ands	r3, r2
 8003246:	2b18      	cmp	r3, #24
 8003248:	d10a      	bne.n	8003260 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800324a:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	2202      	movs	r2, #2
 8003250:	4013      	ands	r3, r2
 8003252:	d03c      	beq.n	80032ce <HAL_RCC_OscConfig+0x2f2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d138      	bne.n	80032ce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e1c5      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d019      	beq.n	800329c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800326a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800326c:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800326e:	2101      	movs	r1, #1
 8003270:	430a      	orrs	r2, r1
 8003272:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fe f99a 	bl	80015ac <HAL_GetTick>
 8003278:	0003      	movs	r3, r0
 800327a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe f995 	bl	80015ac <HAL_GetTick>
 8003282:	0002      	movs	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1ad      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 8003292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003294:	2202      	movs	r2, #2
 8003296:	4013      	ands	r3, r2
 8003298:	d0f1      	beq.n	800327e <HAL_RCC_OscConfig+0x2a2>
 800329a:	e018      	b.n	80032ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 800329e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80032a2:	2101      	movs	r1, #1
 80032a4:	438a      	bics	r2, r1
 80032a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe f980 	bl	80015ac <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b2:	f7fe f97b 	bl	80015ac <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e193      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c4:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80032c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c8:	2202      	movs	r2, #2
 80032ca:	4013      	ands	r3, r2
 80032cc:	d1f1      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2204      	movs	r2, #4
 80032d4:	4013      	ands	r3, r2
 80032d6:	d100      	bne.n	80032da <HAL_RCC_OscConfig+0x2fe>
 80032d8:	e0c6      	b.n	8003468 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032da:	231f      	movs	r3, #31
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2238      	movs	r2, #56	; 0x38
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d11e      	bne.n	800332c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCC_OscConfig+0x32c>)
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	2202      	movs	r2, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	d100      	bne.n	80032fa <HAL_RCC_OscConfig+0x31e>
 80032f8:	e0b6      	b.n	8003468 <HAL_RCC_OscConfig+0x48c>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d000      	beq.n	8003304 <HAL_RCC_OscConfig+0x328>
 8003302:	e0b1      	b.n	8003468 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e171      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
 8003308:	40021000 	.word	0x40021000
 800330c:	fffeffff 	.word	0xfffeffff
 8003310:	fffbffff 	.word	0xfffbffff
 8003314:	ffff80ff 	.word	0xffff80ff
 8003318:	ffffc7ff 	.word	0xffffc7ff
 800331c:	00f42400 	.word	0x00f42400
 8003320:	20000000 	.word	0x20000000
 8003324:	20000004 	.word	0x20000004
 8003328:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800332c:	4bb1      	ldr	r3, [pc, #708]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 800332e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	055b      	lsls	r3, r3, #21
 8003334:	4013      	ands	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x360>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x362>
 800333c:	2300      	movs	r3, #0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d011      	beq.n	8003366 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	4bac      	ldr	r3, [pc, #688]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003346:	4bab      	ldr	r3, [pc, #684]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003348:	2180      	movs	r1, #128	; 0x80
 800334a:	0549      	lsls	r1, r1, #21
 800334c:	430a      	orrs	r2, r1
 800334e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003350:	4ba8      	ldr	r3, [pc, #672]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	055b      	lsls	r3, r3, #21
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800335e:	231f      	movs	r3, #31
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003366:	4ba4      	ldr	r3, [pc, #656]	; (80035f8 <HAL_RCC_OscConfig+0x61c>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4013      	ands	r3, r2
 8003370:	d11a      	bne.n	80033a8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003372:	4ba1      	ldr	r3, [pc, #644]	; (80035f8 <HAL_RCC_OscConfig+0x61c>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4ba0      	ldr	r3, [pc, #640]	; (80035f8 <HAL_RCC_OscConfig+0x61c>)
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	0049      	lsls	r1, r1, #1
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003380:	f7fe f914 	bl	80015ac <HAL_GetTick>
 8003384:	0003      	movs	r3, r0
 8003386:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fe f90f 	bl	80015ac <HAL_GetTick>
 800338e:	0002      	movs	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e127      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339c:	4b96      	ldr	r3, [pc, #600]	; (80035f8 <HAL_RCC_OscConfig+0x61c>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4013      	ands	r3, r2
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x3e2>
 80033b0:	4b90      	ldr	r3, [pc, #576]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033b4:	4b8f      	ldr	r3, [pc, #572]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033b6:	2101      	movs	r1, #1
 80033b8:	430a      	orrs	r2, r1
 80033ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80033bc:	e01c      	b.n	80033f8 <HAL_RCC_OscConfig+0x41c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x404>
 80033c6:	4b8b      	ldr	r3, [pc, #556]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ca:	4b8a      	ldr	r3, [pc, #552]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033cc:	2104      	movs	r1, #4
 80033ce:	430a      	orrs	r2, r1
 80033d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033d6:	4b87      	ldr	r3, [pc, #540]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033d8:	2101      	movs	r1, #1
 80033da:	430a      	orrs	r2, r1
 80033dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0x41c>
 80033e0:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033e4:	4b83      	ldr	r3, [pc, #524]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033e6:	2101      	movs	r1, #1
 80033e8:	438a      	bics	r2, r1
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80033ec:	4b81      	ldr	r3, [pc, #516]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033f0:	4b80      	ldr	r3, [pc, #512]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80033f2:	2104      	movs	r1, #4
 80033f4:	438a      	bics	r2, r1
 80033f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d014      	beq.n	800342a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe f8d4 	bl	80015ac <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003408:	e009      	b.n	800341e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fe f8cf 	bl	80015ac <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	4a79      	ldr	r2, [pc, #484]	; (80035fc <HAL_RCC_OscConfig+0x620>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0e6      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	4b75      	ldr	r3, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	2202      	movs	r2, #2
 8003424:	4013      	ands	r3, r2
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x42e>
 8003428:	e013      	b.n	8003452 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe f8bf 	bl	80015ac <HAL_GetTick>
 800342e:	0003      	movs	r3, r0
 8003430:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003432:	e009      	b.n	8003448 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7fe f8ba 	bl	80015ac <HAL_GetTick>
 8003438:	0002      	movs	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	4a6f      	ldr	r2, [pc, #444]	; (80035fc <HAL_RCC_OscConfig+0x620>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0d1      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003448:	4b6a      	ldr	r3, [pc, #424]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	2202      	movs	r2, #2
 800344e:	4013      	ands	r3, r2
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003452:	231f      	movs	r3, #31
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 800345e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003460:	4b64      	ldr	r3, [pc, #400]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003462:	4967      	ldr	r1, [pc, #412]	; (8003600 <HAL_RCC_OscConfig+0x624>)
 8003464:	400a      	ands	r2, r1
 8003466:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d100      	bne.n	8003472 <HAL_RCC_OscConfig+0x496>
 8003470:	e0bb      	b.n	80035ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003472:	4b60      	ldr	r3, [pc, #384]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2238      	movs	r2, #56	; 0x38
 8003478:	4013      	ands	r3, r2
 800347a:	2b10      	cmp	r3, #16
 800347c:	d100      	bne.n	8003480 <HAL_RCC_OscConfig+0x4a4>
 800347e:	e07b      	b.n	8003578 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d156      	bne.n	8003536 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003488:	4b5a      	ldr	r3, [pc, #360]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 800348e:	495d      	ldr	r1, [pc, #372]	; (8003604 <HAL_RCC_OscConfig+0x628>)
 8003490:	400a      	ands	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe f88a 	bl	80015ac <HAL_GetTick>
 8003498:	0003      	movs	r3, r0
 800349a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe f885 	bl	80015ac <HAL_GetTick>
 80034a2:	0002      	movs	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e09d      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	049b      	lsls	r3, r3, #18
 80034b8:	4013      	ands	r3, r2
 80034ba:	d1f0      	bne.n	800349e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034bc:	4b4d      	ldr	r3, [pc, #308]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a51      	ldr	r2, [pc, #324]	; (8003608 <HAL_RCC_OscConfig+0x62c>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1a      	ldr	r2, [r3, #32]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	431a      	orrs	r2, r3
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80034ec:	430a      	orrs	r2, r1
 80034ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	0449      	lsls	r1, r1, #17
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80034fe:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	4b3c      	ldr	r3, [pc, #240]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	0549      	lsls	r1, r1, #21
 8003508:	430a      	orrs	r2, r1
 800350a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fe f84e 	bl	80015ac <HAL_GetTick>
 8003510:	0003      	movs	r3, r0
 8003512:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fe f849 	bl	80015ac <HAL_GetTick>
 800351a:	0002      	movs	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e061      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	049b      	lsls	r3, r3, #18
 8003530:	4013      	ands	r3, r2
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x53a>
 8003534:	e059      	b.n	80035ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003536:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 800353c:	4931      	ldr	r1, [pc, #196]	; (8003604 <HAL_RCC_OscConfig+0x628>)
 800353e:	400a      	ands	r2, r1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe f833 	bl	80015ac <HAL_GetTick>
 8003546:	0003      	movs	r3, r0
 8003548:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354c:	f7fe f82e 	bl	80015ac <HAL_GetTick>
 8003550:	0002      	movs	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e046      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	049b      	lsls	r3, r3, #18
 8003566:	4013      	ands	r3, r2
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003570:	4926      	ldr	r1, [pc, #152]	; (800360c <HAL_RCC_OscConfig+0x630>)
 8003572:	400a      	ands	r2, r1
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	e038      	b.n	80035ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e033      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x618>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2203      	movs	r2, #3
 800358e:	401a      	ands	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	429a      	cmp	r2, r3
 8003596:	d126      	bne.n	80035e6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2270      	movs	r2, #112	; 0x70
 800359c:	401a      	ands	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d11f      	bne.n	80035e6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	23fe      	movs	r3, #254	; 0xfe
 80035aa:	01db      	lsls	r3, r3, #7
 80035ac:	401a      	ands	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d116      	bne.n	80035e6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	23f8      	movs	r3, #248	; 0xf8
 80035bc:	039b      	lsls	r3, r3, #14
 80035be:	401a      	ands	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d10e      	bne.n	80035e6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	23e0      	movs	r3, #224	; 0xe0
 80035cc:	051b      	lsls	r3, r3, #20
 80035ce:	401a      	ands	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	0f5b      	lsrs	r3, r3, #29
 80035dc:	075a      	lsls	r2, r3, #29
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b008      	add	sp, #32
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40007000 	.word	0x40007000
 80035fc:	00001388 	.word	0x00001388
 8003600:	efffffff 	.word	0xefffffff
 8003604:	feffffff 	.word	0xfeffffff
 8003608:	11c1808c 	.word	0x11c1808c
 800360c:	eefefffc 	.word	0xeefefffc

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0e9      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b76      	ldr	r3, [pc, #472]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2207      	movs	r2, #7
 800362a:	4013      	ands	r3, r2
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d91e      	bls.n	8003670 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b73      	ldr	r3, [pc, #460]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2207      	movs	r2, #7
 8003638:	4393      	bics	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	4b70      	ldr	r3, [pc, #448]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003644:	f7fd ffb2 	bl	80015ac <HAL_GetTick>
 8003648:	0003      	movs	r3, r0
 800364a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800364c:	e009      	b.n	8003662 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364e:	f7fd ffad 	bl	80015ac <HAL_GetTick>
 8003652:	0002      	movs	r2, r0
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	4a6a      	ldr	r2, [pc, #424]	; (8003804 <HAL_RCC_ClockConfig+0x1f4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e0ca      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003662:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2207      	movs	r2, #7
 8003668:	4013      	ands	r3, r2
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d1ee      	bne.n	800364e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2202      	movs	r2, #2
 8003676:	4013      	ands	r3, r2
 8003678:	d015      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2204      	movs	r2, #4
 8003680:	4013      	ands	r3, r2
 8003682:	d006      	beq.n	8003692 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003684:	4b60      	ldr	r3, [pc, #384]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 800368a:	21e0      	movs	r1, #224	; 0xe0
 800368c:	01c9      	lsls	r1, r1, #7
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003692:	4b5d      	ldr	r3, [pc, #372]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	4a5d      	ldr	r2, [pc, #372]	; (800380c <HAL_RCC_ClockConfig+0x1fc>)
 8003698:	4013      	ands	r3, r2
 800369a:	0019      	movs	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4b59      	ldr	r3, [pc, #356]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4013      	ands	r3, r2
 80036ae:	d057      	beq.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b8:	4b53      	ldr	r3, [pc, #332]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	029b      	lsls	r3, r3, #10
 80036c0:	4013      	ands	r3, r2
 80036c2:	d12b      	bne.n	800371c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e097      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d0:	4b4d      	ldr	r3, [pc, #308]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	049b      	lsls	r3, r3, #18
 80036d8:	4013      	ands	r3, r2
 80036da:	d11f      	bne.n	800371c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e08b      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e8:	4b47      	ldr	r3, [pc, #284]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4013      	ands	r3, r2
 80036f2:	d113      	bne.n	800371c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e07f      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d106      	bne.n	800370e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003700:	4b41      	ldr	r3, [pc, #260]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 8003702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003704:	2202      	movs	r2, #2
 8003706:	4013      	ands	r3, r2
 8003708:	d108      	bne.n	800371c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e074      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370e:	4b3e      	ldr	r3, [pc, #248]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	2202      	movs	r2, #2
 8003714:	4013      	ands	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e06d      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800371c:	4b3a      	ldr	r3, [pc, #232]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2207      	movs	r2, #7
 8003722:	4393      	bics	r3, r2
 8003724:	0019      	movs	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	4b37      	ldr	r3, [pc, #220]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 800372c:	430a      	orrs	r2, r1
 800372e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003730:	f7fd ff3c 	bl	80015ac <HAL_GetTick>
 8003734:	0003      	movs	r3, r0
 8003736:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003738:	e009      	b.n	800374e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373a:	f7fd ff37 	bl	80015ac <HAL_GetTick>
 800373e:	0002      	movs	r2, r0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	4a2f      	ldr	r2, [pc, #188]	; (8003804 <HAL_RCC_ClockConfig+0x1f4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e054      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b2e      	ldr	r3, [pc, #184]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2238      	movs	r2, #56	; 0x38
 8003754:	401a      	ands	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	429a      	cmp	r2, r3
 800375e:	d1ec      	bne.n	800373a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2207      	movs	r2, #7
 8003766:	4013      	ands	r3, r2
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d21e      	bcs.n	80037ac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2207      	movs	r2, #7
 8003774:	4393      	bics	r3, r2
 8003776:	0019      	movs	r1, r3
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003780:	f7fd ff14 	bl	80015ac <HAL_GetTick>
 8003784:	0003      	movs	r3, r0
 8003786:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003788:	e009      	b.n	800379e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378a:	f7fd ff0f 	bl	80015ac <HAL_GetTick>
 800378e:	0002      	movs	r2, r0
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <HAL_RCC_ClockConfig+0x1f4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e02c      	b.n	80037f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800379e:	4b18      	ldr	r3, [pc, #96]	; (8003800 <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2207      	movs	r2, #7
 80037a4:	4013      	ands	r3, r2
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1ee      	bne.n	800378a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2204      	movs	r2, #4
 80037b2:	4013      	ands	r3, r2
 80037b4:	d009      	beq.n	80037ca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <HAL_RCC_ClockConfig+0x200>)
 80037bc:	4013      	ands	r3, r2
 80037be:	0019      	movs	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4b10      	ldr	r3, [pc, #64]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80037ca:	f000 f829 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 80037ce:	0001      	movs	r1, r0
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <HAL_RCC_ClockConfig+0x1f8>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	220f      	movs	r2, #15
 80037d8:	401a      	ands	r2, r3
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_RCC_ClockConfig+0x204>)
 80037dc:	0092      	lsls	r2, r2, #2
 80037de:	58d3      	ldr	r3, [r2, r3]
 80037e0:	221f      	movs	r2, #31
 80037e2:	4013      	ands	r3, r2
 80037e4:	000a      	movs	r2, r1
 80037e6:	40da      	lsrs	r2, r3
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_ClockConfig+0x208>)
 80037ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_ClockConfig+0x20c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7fd fe7f 	bl	80014f4 <HAL_InitTick>
 80037f6:	0003      	movs	r3, r0
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b004      	add	sp, #16
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40022000 	.word	0x40022000
 8003804:	00001388 	.word	0x00001388
 8003808:	40021000 	.word	0x40021000
 800380c:	fffff0ff 	.word	0xfffff0ff
 8003810:	ffff8fff 	.word	0xffff8fff
 8003814:	08007504 	.word	0x08007504
 8003818:	20000000 	.word	0x20000000
 800381c:	20000004 	.word	0x20000004

08003820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003826:	4b3c      	ldr	r3, [pc, #240]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2238      	movs	r2, #56	; 0x38
 800382c:	4013      	ands	r3, r2
 800382e:	d10f      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003830:	4b39      	ldr	r3, [pc, #228]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0adb      	lsrs	r3, r3, #11
 8003836:	2207      	movs	r2, #7
 8003838:	4013      	ands	r3, r2
 800383a:	2201      	movs	r2, #1
 800383c:	409a      	lsls	r2, r3
 800383e:	0013      	movs	r3, r2
 8003840:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003842:	6839      	ldr	r1, [r7, #0]
 8003844:	4835      	ldr	r0, [pc, #212]	; (800391c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003846:	f7fc fc6f 	bl	8000128 <__udivsi3>
 800384a:	0003      	movs	r3, r0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	e05d      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003850:	4b31      	ldr	r3, [pc, #196]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2238      	movs	r2, #56	; 0x38
 8003856:	4013      	ands	r3, r2
 8003858:	2b08      	cmp	r3, #8
 800385a:	d102      	bne.n	8003862 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800385c:	4b30      	ldr	r3, [pc, #192]	; (8003920 <HAL_RCC_GetSysClockFreq+0x100>)
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	e054      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003862:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2238      	movs	r2, #56	; 0x38
 8003868:	4013      	ands	r3, r2
 800386a:	2b10      	cmp	r3, #16
 800386c:	d138      	bne.n	80038e0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800386e:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2203      	movs	r2, #3
 8003874:	4013      	ands	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003878:	4b27      	ldr	r3, [pc, #156]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	2207      	movs	r2, #7
 8003880:	4013      	ands	r3, r2
 8003882:	3301      	adds	r3, #1
 8003884:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d10d      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	4824      	ldr	r0, [pc, #144]	; (8003920 <HAL_RCC_GetSysClockFreq+0x100>)
 8003890:	f7fc fc4a 	bl	8000128 <__udivsi3>
 8003894:	0003      	movs	r3, r0
 8003896:	0019      	movs	r1, r3
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	227f      	movs	r2, #127	; 0x7f
 80038a0:	4013      	ands	r3, r2
 80038a2:	434b      	muls	r3, r1
 80038a4:	617b      	str	r3, [r7, #20]
        break;
 80038a6:	e00d      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	481c      	ldr	r0, [pc, #112]	; (800391c <HAL_RCC_GetSysClockFreq+0xfc>)
 80038ac:	f7fc fc3c 	bl	8000128 <__udivsi3>
 80038b0:	0003      	movs	r3, r0
 80038b2:	0019      	movs	r1, r3
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	227f      	movs	r2, #127	; 0x7f
 80038bc:	4013      	ands	r3, r2
 80038be:	434b      	muls	r3, r1
 80038c0:	617b      	str	r3, [r7, #20]
        break;
 80038c2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	0f5b      	lsrs	r3, r3, #29
 80038ca:	2207      	movs	r2, #7
 80038cc:	4013      	ands	r3, r2
 80038ce:	3301      	adds	r3, #1
 80038d0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	f7fc fc27 	bl	8000128 <__udivsi3>
 80038da:	0003      	movs	r3, r0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	e015      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2238      	movs	r2, #56	; 0x38
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d103      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	613b      	str	r3, [r7, #16]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2238      	movs	r2, #56	; 0x38
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b18      	cmp	r3, #24
 80038fe:	d103      	bne.n	8003908 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003900:	23fa      	movs	r3, #250	; 0xfa
 8003902:	01db      	lsls	r3, r3, #7
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	e001      	b.n	800390c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800390c:	693b      	ldr	r3, [r7, #16]
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b006      	add	sp, #24
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	40021000 	.word	0x40021000
 800391c:	00f42400 	.word	0x00f42400
 8003920:	007a1200 	.word	0x007a1200

08003924 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <HAL_RCC_GetHCLKFreq+0x10>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	0018      	movs	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b5b0      	push	{r4, r5, r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800393c:	f7ff fff2 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003940:	0004      	movs	r4, r0
 8003942:	f7ff fb3f 	bl	8002fc4 <LL_RCC_GetAPB1Prescaler>
 8003946:	0003      	movs	r3, r0
 8003948:	0b1a      	lsrs	r2, r3, #12
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	58d3      	ldr	r3, [r2, r3]
 8003950:	221f      	movs	r2, #31
 8003952:	4013      	ands	r3, r2
 8003954:	40dc      	lsrs	r4, r3
 8003956:	0023      	movs	r3, r4
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	bdb0      	pop	{r4, r5, r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	08007544 	.word	0x08007544

08003964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800396c:	2313      	movs	r3, #19
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003974:	2312      	movs	r3, #18
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	4013      	ands	r3, r2
 8003986:	d100      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003988:	e0a3      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398a:	2011      	movs	r0, #17
 800398c:	183b      	adds	r3, r7, r0
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003992:	4bc3      	ldr	r3, [pc, #780]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	055b      	lsls	r3, r3, #21
 800399a:	4013      	ands	r3, r2
 800399c:	d110      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	4bc0      	ldr	r3, [pc, #768]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a2:	4bbf      	ldr	r3, [pc, #764]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	0549      	lsls	r1, r1, #21
 80039a8:	430a      	orrs	r2, r1
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80039ac:	4bbc      	ldr	r3, [pc, #752]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	055b      	lsls	r3, r3, #21
 80039b4:	4013      	ands	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	183b      	adds	r3, r7, r0
 80039bc:	2201      	movs	r2, #1
 80039be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c0:	4bb8      	ldr	r3, [pc, #736]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4bb7      	ldr	r3, [pc, #732]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	0049      	lsls	r1, r1, #1
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ce:	f7fd fded 	bl	80015ac <HAL_GetTick>
 80039d2:	0003      	movs	r3, r0
 80039d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d6:	e00b      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7fd fde8 	bl	80015ac <HAL_GetTick>
 80039dc:	0002      	movs	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d904      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80039e6:	2313      	movs	r3, #19
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	2203      	movs	r2, #3
 80039ec:	701a      	strb	r2, [r3, #0]
        break;
 80039ee:	e005      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f0:	4bac      	ldr	r3, [pc, #688]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	d0ed      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80039fc:	2313      	movs	r3, #19
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d154      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a06:	4ba6      	ldr	r3, [pc, #664]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a0a:	23c0      	movs	r3, #192	; 0xc0
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d019      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d014      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a22:	4b9f      	ldr	r3, [pc, #636]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a26:	4aa0      	ldr	r2, [pc, #640]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a2c:	4b9c      	ldr	r3, [pc, #624]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a30:	4b9b      	ldr	r3, [pc, #620]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a32:	2180      	movs	r1, #128	; 0x80
 8003a34:	0249      	lsls	r1, r1, #9
 8003a36:	430a      	orrs	r2, r1
 8003a38:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3a:	4b99      	ldr	r3, [pc, #612]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a3e:	4b98      	ldr	r3, [pc, #608]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a40:	499a      	ldr	r1, [pc, #616]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a46:	4b96      	ldr	r3, [pc, #600]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	d016      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd fdaa 	bl	80015ac <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5c:	e00c      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fda5 	bl	80015ac <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	4a91      	ldr	r2, [pc, #580]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d904      	bls.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003a6e:	2313      	movs	r3, #19
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2203      	movs	r2, #3
 8003a74:	701a      	strb	r2, [r3, #0]
            break;
 8003a76:	e004      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a78:	4b89      	ldr	r3, [pc, #548]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d0ed      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003a82:	2313      	movs	r3, #19
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a8c:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	4a85      	ldr	r2, [pc, #532]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a9a:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003aa0:	e00c      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aa2:	2312      	movs	r3, #18
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2213      	movs	r2, #19
 8003aa8:	18ba      	adds	r2, r7, r2
 8003aaa:	7812      	ldrb	r2, [r2, #0]
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e005      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	2312      	movs	r3, #18
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	2213      	movs	r2, #19
 8003ab6:	18ba      	adds	r2, r7, r2
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003abc:	2311      	movs	r3, #17
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aca:	4b75      	ldr	r3, [pc, #468]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003acc:	4979      	ldr	r1, [pc, #484]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003ace:	400a      	ands	r2, r1
 8003ad0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003adc:	4b70      	ldr	r3, [pc, #448]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	4393      	bics	r3, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aec:	430a      	orrs	r2, r1
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2202      	movs	r2, #2
 8003af6:	4013      	ands	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003afa:	4b69      	ldr	r3, [pc, #420]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	220c      	movs	r2, #12
 8003b00:	4393      	bics	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2210      	movs	r2, #16
 8003b14:	4013      	ands	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b18:	4b61      	ldr	r3, [pc, #388]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1c:	4a66      	ldr	r2, [pc, #408]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	4b5e      	ldr	r3, [pc, #376]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4013      	ands	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b38:	4b59      	ldr	r3, [pc, #356]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	4a5f      	ldr	r2, [pc, #380]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	0019      	movs	r1, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4013      	ands	r3, r2
 8003b56:	d009      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b58:	4b51      	ldr	r3, [pc, #324]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	4a58      	ldr	r2, [pc, #352]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	0019      	movs	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	4b4e      	ldr	r3, [pc, #312]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2220      	movs	r2, #32
 8003b72:	4013      	ands	r3, r2
 8003b74:	d009      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	4a52      	ldr	r2, [pc, #328]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	0019      	movs	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b86:	430a      	orrs	r2, r1
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	01db      	lsls	r3, r3, #7
 8003b92:	4013      	ands	r3, r2
 8003b94:	d015      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b96:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	0899      	lsrs	r1, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1a      	ldr	r2, [r3, #32]
 8003ba2:	4b3f      	ldr	r3, [pc, #252]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1a      	ldr	r2, [r3, #32]
 8003bac:	2380      	movs	r3, #128	; 0x80
 8003bae:	05db      	lsls	r3, r3, #23
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bb4:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	0249      	lsls	r1, r1, #9
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	031b      	lsls	r3, r3, #12
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bce:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	2240      	movs	r2, #64	; 0x40
 8003bd4:	4393      	bics	r3, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bde:	430a      	orrs	r2, r1
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	039b      	lsls	r3, r3, #14
 8003bea:	4013      	ands	r3, r2
 8003bec:	d016      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	4a35      	ldr	r2, [pc, #212]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bfc:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	03db      	lsls	r3, r3, #15
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d106      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c0e:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	0449      	lsls	r1, r1, #17
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	03db      	lsls	r3, r3, #15
 8003c24:	4013      	ands	r3, r2
 8003c26:	d016      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	045b      	lsls	r3, r3, #17
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d106      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c48:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c4e:	2180      	movs	r1, #128	; 0x80
 8003c50:	0449      	lsls	r1, r1, #17
 8003c52:	430a      	orrs	r2, r1
 8003c54:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d016      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c72:	430a      	orrs	r2, r1
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	01db      	lsls	r3, r3, #7
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d106      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c88:	2180      	movs	r1, #128	; 0x80
 8003c8a:	0249      	lsls	r1, r1, #9
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003c90:	2312      	movs	r3, #18
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	781b      	ldrb	r3, [r3, #0]
}
 8003c96:	0018      	movs	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b006      	add	sp, #24
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	fffffcff 	.word	0xfffffcff
 8003cac:	fffeffff 	.word	0xfffeffff
 8003cb0:	00001388 	.word	0x00001388
 8003cb4:	efffffff 	.word	0xefffffff
 8003cb8:	fffff3ff 	.word	0xfffff3ff
 8003cbc:	fff3ffff 	.word	0xfff3ffff
 8003cc0:	ffcfffff 	.word	0xffcfffff
 8003cc4:	ffffcfff 	.word	0xffffcfff
 8003cc8:	ffbfffff 	.word	0xffbfffff
 8003ccc:	feffffff 	.word	0xfeffffff
 8003cd0:	ffff3fff 	.word	0xffff3fff

08003cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e04a      	b.n	8003d7c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	223d      	movs	r2, #61	; 0x3d
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d107      	bne.n	8003d02 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	223c      	movs	r2, #60	; 0x3c
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fd fa17 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	223d      	movs	r2, #61	; 0x3d
 8003d06:	2102      	movs	r1, #2
 8003d08:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	0019      	movs	r1, r3
 8003d14:	0010      	movs	r0, r2
 8003d16:	f000 fcd9 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2248      	movs	r2, #72	; 0x48
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	223e      	movs	r2, #62	; 0x3e
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	223f      	movs	r2, #63	; 0x3f
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2240      	movs	r2, #64	; 0x40
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2241      	movs	r2, #65	; 0x41
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2242      	movs	r2, #66	; 0x42
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2243      	movs	r2, #67	; 0x43
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2244      	movs	r2, #68	; 0x44
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2245      	movs	r2, #69	; 0x45
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2246      	movs	r2, #70	; 0x46
 8003d66:	2101      	movs	r1, #1
 8003d68:	5499      	strb	r1, [r3, r2]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2247      	movs	r2, #71	; 0x47
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	223d      	movs	r2, #61	; 0x3d
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	223d      	movs	r2, #61	; 0x3d
 8003d90:	5c9b      	ldrb	r3, [r3, r2]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d001      	beq.n	8003d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e042      	b.n	8003e22 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	223d      	movs	r2, #61	; 0x3d
 8003da0:	2102      	movs	r1, #2
 8003da2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	430a      	orrs	r2, r1
 8003db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_TIM_Base_Start_IT+0xa8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00f      	beq.n	8003dde <HAL_TIM_Base_Start_IT+0x5a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	05db      	lsls	r3, r3, #23
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d009      	beq.n	8003dde <HAL_TIM_Base_Start_IT+0x5a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <HAL_TIM_Base_Start_IT+0xac>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIM_Base_Start_IT+0x5a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <HAL_TIM_Base_Start_IT+0xb0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d116      	bne.n	8003e0c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_TIM_Base_Start_IT+0xb4>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	d016      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x9a>
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	025b      	lsls	r3, r3, #9
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d011      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	e008      	b.n	8003e1e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2101      	movs	r1, #1
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	e000      	b.n	8003e20 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b004      	add	sp, #16
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40014000 	.word	0x40014000
 8003e38:	00010007 	.word	0x00010007

08003e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e04a      	b.n	8003ee4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	223d      	movs	r2, #61	; 0x3d
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	223c      	movs	r2, #60	; 0x3c
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f000 f841 	bl	8003eec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	223d      	movs	r2, #61	; 0x3d
 8003e6e:	2102      	movs	r1, #2
 8003e70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	0010      	movs	r0, r2
 8003e7e:	f000 fc25 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2248      	movs	r2, #72	; 0x48
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	223e      	movs	r2, #62	; 0x3e
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	223f      	movs	r2, #63	; 0x3f
 8003e96:	2101      	movs	r1, #1
 8003e98:	5499      	strb	r1, [r3, r2]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2240      	movs	r2, #64	; 0x40
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	5499      	strb	r1, [r3, r2]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2241      	movs	r2, #65	; 0x41
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2242      	movs	r2, #66	; 0x42
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2243      	movs	r2, #67	; 0x43
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2244      	movs	r2, #68	; 0x44
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2245      	movs	r2, #69	; 0x45
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2246      	movs	r2, #70	; 0x46
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2247      	movs	r2, #71	; 0x47
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	223d      	movs	r2, #61	; 0x3d
 8003ede:	2101      	movs	r1, #1
 8003ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d108      	bne.n	8003f1e <HAL_TIM_PWM_Start+0x22>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	223e      	movs	r2, #62	; 0x3e
 8003f10:	5c9b      	ldrb	r3, [r3, r2]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	1e5a      	subs	r2, r3, #1
 8003f18:	4193      	sbcs	r3, r2
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	e037      	b.n	8003f8e <HAL_TIM_PWM_Start+0x92>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d108      	bne.n	8003f36 <HAL_TIM_PWM_Start+0x3a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	223f      	movs	r2, #63	; 0x3f
 8003f28:	5c9b      	ldrb	r3, [r3, r2]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	1e5a      	subs	r2, r3, #1
 8003f30:	4193      	sbcs	r3, r2
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	e02b      	b.n	8003f8e <HAL_TIM_PWM_Start+0x92>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d108      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x52>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	1e5a      	subs	r2, r3, #1
 8003f48:	4193      	sbcs	r3, r2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e01f      	b.n	8003f8e <HAL_TIM_PWM_Start+0x92>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d108      	bne.n	8003f66 <HAL_TIM_PWM_Start+0x6a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2241      	movs	r2, #65	; 0x41
 8003f58:	5c9b      	ldrb	r3, [r3, r2]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	1e5a      	subs	r2, r3, #1
 8003f60:	4193      	sbcs	r3, r2
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e013      	b.n	8003f8e <HAL_TIM_PWM_Start+0x92>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d108      	bne.n	8003f7e <HAL_TIM_PWM_Start+0x82>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2242      	movs	r2, #66	; 0x42
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	1e5a      	subs	r2, r3, #1
 8003f78:	4193      	sbcs	r3, r2
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	e007      	b.n	8003f8e <HAL_TIM_PWM_Start+0x92>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2243      	movs	r2, #67	; 0x43
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	3b01      	subs	r3, #1
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	4193      	sbcs	r3, r2
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e08b      	b.n	80040ae <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0xaa>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	223e      	movs	r2, #62	; 0x3e
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	5499      	strb	r1, [r3, r2]
 8003fa4:	e023      	b.n	8003fee <HAL_TIM_PWM_Start+0xf2>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0xba>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	223f      	movs	r2, #63	; 0x3f
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	5499      	strb	r1, [r3, r2]
 8003fb4:	e01b      	b.n	8003fee <HAL_TIM_PWM_Start+0xf2>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d104      	bne.n	8003fc6 <HAL_TIM_PWM_Start+0xca>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2240      	movs	r2, #64	; 0x40
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	5499      	strb	r1, [r3, r2]
 8003fc4:	e013      	b.n	8003fee <HAL_TIM_PWM_Start+0xf2>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b0c      	cmp	r3, #12
 8003fca:	d104      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0xda>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2241      	movs	r2, #65	; 0x41
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	5499      	strb	r1, [r3, r2]
 8003fd4:	e00b      	b.n	8003fee <HAL_TIM_PWM_Start+0xf2>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d104      	bne.n	8003fe6 <HAL_TIM_PWM_Start+0xea>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2242      	movs	r2, #66	; 0x42
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	5499      	strb	r1, [r3, r2]
 8003fe4:	e003      	b.n	8003fee <HAL_TIM_PWM_Start+0xf2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2243      	movs	r2, #67	; 0x43
 8003fea:	2102      	movs	r1, #2
 8003fec:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6839      	ldr	r1, [r7, #0]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 ff56 	bl	8004ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a2d      	ldr	r2, [pc, #180]	; (80040b8 <HAL_TIM_PWM_Start+0x1bc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <HAL_TIM_PWM_Start+0x128>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2c      	ldr	r2, [pc, #176]	; (80040bc <HAL_TIM_PWM_Start+0x1c0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_TIM_PWM_Start+0x128>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2a      	ldr	r2, [pc, #168]	; (80040c0 <HAL_TIM_PWM_Start+0x1c4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIM_PWM_Start+0x128>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <HAL_TIM_PWM_Start+0x1c8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_TIM_PWM_Start+0x12c>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <HAL_TIM_PWM_Start+0x12e>
 8004028:	2300      	movs	r3, #0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2180      	movs	r1, #128	; 0x80
 800403a:	0209      	lsls	r1, r1, #8
 800403c:	430a      	orrs	r2, r1
 800403e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1c      	ldr	r2, [pc, #112]	; (80040b8 <HAL_TIM_PWM_Start+0x1bc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00f      	beq.n	800406a <HAL_TIM_PWM_Start+0x16e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	05db      	lsls	r3, r3, #23
 8004052:	429a      	cmp	r2, r3
 8004054:	d009      	beq.n	800406a <HAL_TIM_PWM_Start+0x16e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1b      	ldr	r2, [pc, #108]	; (80040c8 <HAL_TIM_PWM_Start+0x1cc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_TIM_PWM_Start+0x16e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a15      	ldr	r2, [pc, #84]	; (80040bc <HAL_TIM_PWM_Start+0x1c0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d116      	bne.n	8004098 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4a16      	ldr	r2, [pc, #88]	; (80040cc <HAL_TIM_PWM_Start+0x1d0>)
 8004072:	4013      	ands	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b06      	cmp	r3, #6
 800407a:	d016      	beq.n	80040aa <HAL_TIM_PWM_Start+0x1ae>
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	025b      	lsls	r3, r3, #9
 8004082:	429a      	cmp	r2, r3
 8004084:	d011      	beq.n	80040aa <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2101      	movs	r1, #1
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004096:	e008      	b.n	80040aa <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2101      	movs	r1, #1
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e000      	b.n	80040ac <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b004      	add	sp, #16
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800
 80040c8:	40000400 	.word	0x40000400
 80040cc:	00010007 	.word	0x00010007

080040d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2202      	movs	r2, #2
 80040ec:	4013      	ands	r3, r2
 80040ee:	d021      	beq.n	8004134 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2202      	movs	r2, #2
 80040f4:	4013      	ands	r3, r2
 80040f6:	d01d      	beq.n	8004134 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2203      	movs	r2, #3
 80040fe:	4252      	negs	r2, r2
 8004100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2203      	movs	r2, #3
 8004110:	4013      	ands	r3, r2
 8004112:	d004      	beq.n	800411e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	0018      	movs	r0, r3
 8004118:	f000 fac0 	bl	800469c <HAL_TIM_IC_CaptureCallback>
 800411c:	e007      	b.n	800412e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0018      	movs	r0, r3
 8004122:	f000 fab3 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0018      	movs	r0, r3
 800412a:	f000 fabf 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2204      	movs	r2, #4
 8004138:	4013      	ands	r3, r2
 800413a:	d022      	beq.n	8004182 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2204      	movs	r2, #4
 8004140:	4013      	ands	r3, r2
 8004142:	d01e      	beq.n	8004182 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2205      	movs	r2, #5
 800414a:	4252      	negs	r2, r2
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	23c0      	movs	r3, #192	; 0xc0
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4013      	ands	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	0018      	movs	r0, r3
 8004166:	f000 fa99 	bl	800469c <HAL_TIM_IC_CaptureCallback>
 800416a:	e007      	b.n	800417c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	0018      	movs	r0, r3
 8004170:	f000 fa8c 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0018      	movs	r0, r3
 8004178:	f000 fa98 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2208      	movs	r2, #8
 8004186:	4013      	ands	r3, r2
 8004188:	d021      	beq.n	80041ce <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2208      	movs	r2, #8
 800418e:	4013      	ands	r3, r2
 8004190:	d01d      	beq.n	80041ce <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2209      	movs	r2, #9
 8004198:	4252      	negs	r2, r2
 800419a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2204      	movs	r2, #4
 80041a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	2203      	movs	r2, #3
 80041aa:	4013      	ands	r3, r2
 80041ac:	d004      	beq.n	80041b8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 fa73 	bl	800469c <HAL_TIM_IC_CaptureCallback>
 80041b6:	e007      	b.n	80041c8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 fa66 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 fa72 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2210      	movs	r2, #16
 80041d2:	4013      	ands	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2210      	movs	r2, #16
 80041da:	4013      	ands	r3, r2
 80041dc:	d01e      	beq.n	800421c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2211      	movs	r2, #17
 80041e4:	4252      	negs	r2, r2
 80041e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2208      	movs	r2, #8
 80041ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	23c0      	movs	r3, #192	; 0xc0
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4013      	ands	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 fa4c 	bl	800469c <HAL_TIM_IC_CaptureCallback>
 8004204:	e007      	b.n	8004216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f000 fa3f 	bl	800468c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f000 fa4b 	bl	80046ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2201      	movs	r2, #1
 8004220:	4013      	ands	r3, r2
 8004222:	d00c      	beq.n	800423e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	4013      	ands	r3, r2
 800422a:	d008      	beq.n	800423e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2202      	movs	r2, #2
 8004232:	4252      	negs	r2, r2
 8004234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f7fc fe71 	bl	8000f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2280      	movs	r2, #128	; 0x80
 8004242:	4013      	ands	r3, r2
 8004244:	d104      	bne.n	8004250 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	019b      	lsls	r3, r3, #6
 800424c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800424e:	d00b      	beq.n	8004268 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	4013      	ands	r3, r2
 8004256:	d007      	beq.n	8004268 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <HAL_TIM_IRQHandler+0x208>)
 800425e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	0018      	movs	r0, r3
 8004264:	f000 feba 	bl	8004fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4013      	ands	r3, r2
 8004270:	d00b      	beq.n	800428a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	4013      	ands	r3, r2
 8004278:	d007      	beq.n	800428a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a17      	ldr	r2, [pc, #92]	; (80042dc <HAL_TIM_IRQHandler+0x20c>)
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f000 feb1 	bl	8004fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2240      	movs	r2, #64	; 0x40
 800428e:	4013      	ands	r3, r2
 8004290:	d00c      	beq.n	80042ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2240      	movs	r2, #64	; 0x40
 8004296:	4013      	ands	r3, r2
 8004298:	d008      	beq.n	80042ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2241      	movs	r2, #65	; 0x41
 80042a0:	4252      	negs	r2, r2
 80042a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 fa08 	bl	80046bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2220      	movs	r2, #32
 80042b0:	4013      	ands	r3, r2
 80042b2:	d00c      	beq.n	80042ce <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	4013      	ands	r3, r2
 80042ba:	d008      	beq.n	80042ce <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2221      	movs	r2, #33	; 0x21
 80042c2:	4252      	negs	r2, r2
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0018      	movs	r0, r3
 80042ca:	f000 fe7f 	bl	8004fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	ffffdf7f 	.word	0xffffdf7f
 80042dc:	fffffeff 	.word	0xfffffeff

080042e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ec:	2317      	movs	r3, #23
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	223c      	movs	r2, #60	; 0x3c
 80042f8:	5c9b      	ldrb	r3, [r3, r2]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_TIM_PWM_ConfigChannel+0x22>
 80042fe:	2302      	movs	r3, #2
 8004300:	e0e5      	b.n	80044ce <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	223c      	movs	r2, #60	; 0x3c
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b14      	cmp	r3, #20
 800430e:	d900      	bls.n	8004312 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004310:	e0d1      	b.n	80044b6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	009a      	lsls	r2, r3, #2
 8004316:	4b70      	ldr	r3, [pc, #448]	; (80044d8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004318:	18d3      	adds	r3, r2, r3
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	0011      	movs	r1, r2
 8004326:	0018      	movs	r0, r3
 8004328:	f000 fa5e 	bl	80047e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2108      	movs	r1, #8
 8004338:	430a      	orrs	r2, r1
 800433a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2104      	movs	r1, #4
 8004348:	438a      	bics	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6999      	ldr	r1, [r3, #24]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	619a      	str	r2, [r3, #24]
      break;
 800435e:	e0af      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	0011      	movs	r1, r2
 8004368:	0018      	movs	r0, r3
 800436a:	f000 fac7 	bl	80048fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2180      	movs	r1, #128	; 0x80
 800437a:	0109      	lsls	r1, r1, #4
 800437c:	430a      	orrs	r2, r1
 800437e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4954      	ldr	r1, [pc, #336]	; (80044dc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800438c:	400a      	ands	r2, r1
 800438e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6999      	ldr	r1, [r3, #24]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	021a      	lsls	r2, r3, #8
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	619a      	str	r2, [r3, #24]
      break;
 80043a4:	e08c      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	0011      	movs	r1, r2
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 fb28 	bl	8004a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2108      	movs	r1, #8
 80043c0:	430a      	orrs	r2, r1
 80043c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2104      	movs	r1, #4
 80043d0:	438a      	bics	r2, r1
 80043d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69d9      	ldr	r1, [r3, #28]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	61da      	str	r2, [r3, #28]
      break;
 80043e6:	e06b      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	0011      	movs	r1, r2
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 fb8f 	bl	8004b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	0109      	lsls	r1, r1, #4
 8004404:	430a      	orrs	r2, r1
 8004406:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69da      	ldr	r2, [r3, #28]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4932      	ldr	r1, [pc, #200]	; (80044dc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004414:	400a      	ands	r2, r1
 8004416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69d9      	ldr	r1, [r3, #28]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	021a      	lsls	r2, r3, #8
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	61da      	str	r2, [r3, #28]
      break;
 800442c:	e048      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	0011      	movs	r1, r2
 8004436:	0018      	movs	r0, r3
 8004438:	f000 fbd6 	bl	8004be8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2108      	movs	r1, #8
 8004448:	430a      	orrs	r2, r1
 800444a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2104      	movs	r1, #4
 8004458:	438a      	bics	r2, r1
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800446e:	e027      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	0011      	movs	r1, r2
 8004478:	0018      	movs	r0, r3
 800447a:	f000 fc15 	bl	8004ca8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	0109      	lsls	r1, r1, #4
 800448c:	430a      	orrs	r2, r1
 800448e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4910      	ldr	r1, [pc, #64]	; (80044dc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800449c:	400a      	ands	r2, r1
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	021a      	lsls	r2, r3, #8
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044b4:	e004      	b.n	80044c0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80044b6:	2317      	movs	r3, #23
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
      break;
 80044be:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	223c      	movs	r2, #60	; 0x3c
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

  return status;
 80044c8:	2317      	movs	r3, #23
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	781b      	ldrb	r3, [r3, #0]
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b006      	add	sp, #24
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	08007564 	.word	0x08007564
 80044dc:	fffffbff 	.word	0xfffffbff

080044e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ea:	230f      	movs	r3, #15
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	223c      	movs	r2, #60	; 0x3c
 80044f6:	5c9b      	ldrb	r3, [r3, r2]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIM_ConfigClockSource+0x20>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0bc      	b.n	800467a <HAL_TIM_ConfigClockSource+0x19a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	223c      	movs	r2, #60	; 0x3c
 8004504:	2101      	movs	r1, #1
 8004506:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	223d      	movs	r2, #61	; 0x3d
 800450c:	2102      	movs	r1, #2
 800450e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4a5a      	ldr	r2, [pc, #360]	; (8004684 <HAL_TIM_ConfigClockSource+0x1a4>)
 800451c:	4013      	ands	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4a59      	ldr	r2, [pc, #356]	; (8004688 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004524:	4013      	ands	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2280      	movs	r2, #128	; 0x80
 8004536:	0192      	lsls	r2, r2, #6
 8004538:	4293      	cmp	r3, r2
 800453a:	d040      	beq.n	80045be <HAL_TIM_ConfigClockSource+0xde>
 800453c:	2280      	movs	r2, #128	; 0x80
 800453e:	0192      	lsls	r2, r2, #6
 8004540:	4293      	cmp	r3, r2
 8004542:	d900      	bls.n	8004546 <HAL_TIM_ConfigClockSource+0x66>
 8004544:	e088      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
 8004546:	2280      	movs	r2, #128	; 0x80
 8004548:	0152      	lsls	r2, r2, #5
 800454a:	4293      	cmp	r3, r2
 800454c:	d100      	bne.n	8004550 <HAL_TIM_ConfigClockSource+0x70>
 800454e:	e088      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x182>
 8004550:	2280      	movs	r2, #128	; 0x80
 8004552:	0152      	lsls	r2, r2, #5
 8004554:	4293      	cmp	r3, r2
 8004556:	d900      	bls.n	800455a <HAL_TIM_ConfigClockSource+0x7a>
 8004558:	e07e      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
 800455a:	2b70      	cmp	r3, #112	; 0x70
 800455c:	d018      	beq.n	8004590 <HAL_TIM_ConfigClockSource+0xb0>
 800455e:	d900      	bls.n	8004562 <HAL_TIM_ConfigClockSource+0x82>
 8004560:	e07a      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
 8004562:	2b60      	cmp	r3, #96	; 0x60
 8004564:	d04f      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x126>
 8004566:	d900      	bls.n	800456a <HAL_TIM_ConfigClockSource+0x8a>
 8004568:	e076      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
 800456a:	2b50      	cmp	r3, #80	; 0x50
 800456c:	d03b      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x106>
 800456e:	d900      	bls.n	8004572 <HAL_TIM_ConfigClockSource+0x92>
 8004570:	e072      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d057      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x146>
 8004576:	d900      	bls.n	800457a <HAL_TIM_ConfigClockSource+0x9a>
 8004578:	e06e      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
 800457a:	2b30      	cmp	r3, #48	; 0x30
 800457c:	d063      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x166>
 800457e:	d86b      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
 8004580:	2b20      	cmp	r3, #32
 8004582:	d060      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x166>
 8004584:	d868      	bhi.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d05d      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x166>
 800458a:	2b10      	cmp	r3, #16
 800458c:	d05b      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x166>
 800458e:	e063      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a0:	f000 fc62 	bl	8004e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2277      	movs	r2, #119	; 0x77
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]
      break;
 80045bc:	e052      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ce:	f000 fc4b 	bl	8004e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	01c9      	lsls	r1, r1, #7
 80045e0:	430a      	orrs	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
      break;
 80045e4:	e03e      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	001a      	movs	r2, r3
 80045f4:	f000 fbbc 	bl	8004d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2150      	movs	r1, #80	; 0x50
 80045fe:	0018      	movs	r0, r3
 8004600:	f000 fc16 	bl	8004e30 <TIM_ITRx_SetConfig>
      break;
 8004604:	e02e      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004612:	001a      	movs	r2, r3
 8004614:	f000 fbda 	bl	8004dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2160      	movs	r1, #96	; 0x60
 800461e:	0018      	movs	r0, r3
 8004620:	f000 fc06 	bl	8004e30 <TIM_ITRx_SetConfig>
      break;
 8004624:	e01e      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	001a      	movs	r2, r3
 8004634:	f000 fb9c 	bl	8004d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2140      	movs	r1, #64	; 0x40
 800463e:	0018      	movs	r0, r3
 8004640:	f000 fbf6 	bl	8004e30 <TIM_ITRx_SetConfig>
      break;
 8004644:	e00e      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	0019      	movs	r1, r3
 8004650:	0010      	movs	r0, r2
 8004652:	f000 fbed 	bl	8004e30 <TIM_ITRx_SetConfig>
      break;
 8004656:	e005      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004658:	230f      	movs	r3, #15
 800465a:	18fb      	adds	r3, r7, r3
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
      break;
 8004660:	e000      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004662:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	223d      	movs	r2, #61	; 0x3d
 8004668:	2101      	movs	r1, #1
 800466a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	223c      	movs	r2, #60	; 0x3c
 8004670:	2100      	movs	r1, #0
 8004672:	5499      	strb	r1, [r3, r2]

  return status;
 8004674:	230f      	movs	r3, #15
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	781b      	ldrb	r3, [r3, #0]
}
 800467a:	0018      	movs	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	b004      	add	sp, #16
 8004680:	bd80      	pop	{r7, pc}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	ffceff88 	.word	0xffceff88
 8004688:	ffff00ff 	.word	0xffff00ff

0800468c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004694:	46c0      	nop			; (mov r8, r8)
 8004696:	46bd      	mov	sp, r7
 8004698:	b002      	add	sp, #8
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b002      	add	sp, #8
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046b4:	46c0      	nop			; (mov r8, r8)
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b002      	add	sp, #8
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}

080046cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3b      	ldr	r2, [pc, #236]	; (80047cc <TIM_Base_SetConfig+0x100>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d008      	beq.n	80046f6 <TIM_Base_SetConfig+0x2a>
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	05db      	lsls	r3, r3, #23
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d003      	beq.n	80046f6 <TIM_Base_SetConfig+0x2a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <TIM_Base_SetConfig+0x104>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d108      	bne.n	8004708 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2270      	movs	r2, #112	; 0x70
 80046fa:	4393      	bics	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a30      	ldr	r2, [pc, #192]	; (80047cc <TIM_Base_SetConfig+0x100>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d018      	beq.n	8004742 <TIM_Base_SetConfig+0x76>
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	2380      	movs	r3, #128	; 0x80
 8004714:	05db      	lsls	r3, r3, #23
 8004716:	429a      	cmp	r2, r3
 8004718:	d013      	beq.n	8004742 <TIM_Base_SetConfig+0x76>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <TIM_Base_SetConfig+0x104>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00f      	beq.n	8004742 <TIM_Base_SetConfig+0x76>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a2b      	ldr	r2, [pc, #172]	; (80047d4 <TIM_Base_SetConfig+0x108>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00b      	beq.n	8004742 <TIM_Base_SetConfig+0x76>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <TIM_Base_SetConfig+0x10c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d007      	beq.n	8004742 <TIM_Base_SetConfig+0x76>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a29      	ldr	r2, [pc, #164]	; (80047dc <TIM_Base_SetConfig+0x110>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <TIM_Base_SetConfig+0x76>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <TIM_Base_SetConfig+0x114>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d108      	bne.n	8004754 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <TIM_Base_SetConfig+0x118>)
 8004746:	4013      	ands	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	4393      	bics	r3, r2
 800475a:	001a      	movs	r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a13      	ldr	r2, [pc, #76]	; (80047cc <TIM_Base_SetConfig+0x100>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00b      	beq.n	800479a <TIM_Base_SetConfig+0xce>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <TIM_Base_SetConfig+0x10c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <TIM_Base_SetConfig+0xce>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a13      	ldr	r2, [pc, #76]	; (80047dc <TIM_Base_SetConfig+0x110>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_Base_SetConfig+0xce>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <TIM_Base_SetConfig+0x114>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d103      	bne.n	80047a2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2201      	movs	r2, #1
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2201      	movs	r2, #1
 80047ba:	4393      	bics	r3, r2
 80047bc:	001a      	movs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]
  }
}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b004      	add	sp, #16
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40002000 	.word	0x40002000
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800
 80047e4:	fffffcff 	.word	0xfffffcff

080047e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	2201      	movs	r2, #1
 80047fe:	4393      	bics	r3, r2
 8004800:	001a      	movs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a32      	ldr	r2, [pc, #200]	; (80048e0 <TIM_OC1_SetConfig+0xf8>)
 8004816:	4013      	ands	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2203      	movs	r2, #3
 800481e:	4393      	bics	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2202      	movs	r2, #2
 8004830:	4393      	bics	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a28      	ldr	r2, [pc, #160]	; (80048e4 <TIM_OC1_SetConfig+0xfc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00b      	beq.n	800485e <TIM_OC1_SetConfig+0x76>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a27      	ldr	r2, [pc, #156]	; (80048e8 <TIM_OC1_SetConfig+0x100>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d007      	beq.n	800485e <TIM_OC1_SetConfig+0x76>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a26      	ldr	r2, [pc, #152]	; (80048ec <TIM_OC1_SetConfig+0x104>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d003      	beq.n	800485e <TIM_OC1_SetConfig+0x76>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a25      	ldr	r2, [pc, #148]	; (80048f0 <TIM_OC1_SetConfig+0x108>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d10c      	bne.n	8004878 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2208      	movs	r2, #8
 8004862:	4393      	bics	r3, r2
 8004864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2204      	movs	r2, #4
 8004874:	4393      	bics	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <TIM_OC1_SetConfig+0xfc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00b      	beq.n	8004898 <TIM_OC1_SetConfig+0xb0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <TIM_OC1_SetConfig+0x100>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_OC1_SetConfig+0xb0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a18      	ldr	r2, [pc, #96]	; (80048ec <TIM_OC1_SetConfig+0x104>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC1_SetConfig+0xb0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <TIM_OC1_SetConfig+0x108>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d111      	bne.n	80048bc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <TIM_OC1_SetConfig+0x10c>)
 800489c:	4013      	ands	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4a15      	ldr	r2, [pc, #84]	; (80048f8 <TIM_OC1_SetConfig+0x110>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b006      	add	sp, #24
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	fffeff8f 	.word	0xfffeff8f
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40014400 	.word	0x40014400
 80048f0:	40014800 	.word	0x40014800
 80048f4:	fffffeff 	.word	0xfffffeff
 80048f8:	fffffdff 	.word	0xfffffdff

080048fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	2210      	movs	r2, #16
 8004912:	4393      	bics	r3, r2
 8004914:	001a      	movs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a2e      	ldr	r2, [pc, #184]	; (80049e4 <TIM_OC2_SetConfig+0xe8>)
 800492a:	4013      	ands	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a2d      	ldr	r2, [pc, #180]	; (80049e8 <TIM_OC2_SetConfig+0xec>)
 8004932:	4013      	ands	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2220      	movs	r2, #32
 8004946:	4393      	bics	r3, r2
 8004948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a24      	ldr	r2, [pc, #144]	; (80049ec <TIM_OC2_SetConfig+0xf0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d10d      	bne.n	800497a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	4393      	bics	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2240      	movs	r2, #64	; 0x40
 8004976:	4393      	bics	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <TIM_OC2_SetConfig+0xf0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_OC2_SetConfig+0x9e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1a      	ldr	r2, [pc, #104]	; (80049f0 <TIM_OC2_SetConfig+0xf4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_OC2_SetConfig+0x9e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <TIM_OC2_SetConfig+0xf8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_OC2_SetConfig+0x9e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <TIM_OC2_SetConfig+0xfc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d113      	bne.n	80049c2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4a17      	ldr	r2, [pc, #92]	; (80049fc <TIM_OC2_SetConfig+0x100>)
 800499e:	4013      	ands	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	4a16      	ldr	r2, [pc, #88]	; (8004a00 <TIM_OC2_SetConfig+0x104>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	b006      	add	sp, #24
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	feff8fff 	.word	0xfeff8fff
 80049e8:	fffffcff 	.word	0xfffffcff
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40014400 	.word	0x40014400
 80049f8:	40014800 	.word	0x40014800
 80049fc:	fffffbff 	.word	0xfffffbff
 8004a00:	fffff7ff 	.word	0xfffff7ff

08004a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	4a33      	ldr	r2, [pc, #204]	; (8004ae8 <TIM_OC3_SetConfig+0xe4>)
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a2f      	ldr	r2, [pc, #188]	; (8004aec <TIM_OC3_SetConfig+0xe8>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2203      	movs	r2, #3
 8004a38:	4393      	bics	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <TIM_OC3_SetConfig+0xec>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a25      	ldr	r2, [pc, #148]	; (8004af4 <TIM_OC3_SetConfig+0xf0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10d      	bne.n	8004a7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	4a24      	ldr	r2, [pc, #144]	; (8004af8 <TIM_OC3_SetConfig+0xf4>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4a20      	ldr	r2, [pc, #128]	; (8004afc <TIM_OC3_SetConfig+0xf8>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <TIM_OC3_SetConfig+0xf0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_OC3_SetConfig+0x9a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a1d      	ldr	r2, [pc, #116]	; (8004b00 <TIM_OC3_SetConfig+0xfc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_OC3_SetConfig+0x9a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <TIM_OC3_SetConfig+0x100>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_OC3_SetConfig+0x9a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <TIM_OC3_SetConfig+0x104>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d113      	bne.n	8004ac6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <TIM_OC3_SetConfig+0x108>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <TIM_OC3_SetConfig+0x10c>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b006      	add	sp, #24
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	fffffeff 	.word	0xfffffeff
 8004aec:	fffeff8f 	.word	0xfffeff8f
 8004af0:	fffffdff 	.word	0xfffffdff
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	fffff7ff 	.word	0xfffff7ff
 8004afc:	fffffbff 	.word	0xfffffbff
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40014800 	.word	0x40014800
 8004b0c:	ffffefff 	.word	0xffffefff
 8004b10:	ffffdfff 	.word	0xffffdfff

08004b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <TIM_OC4_SetConfig+0xb0>)
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <TIM_OC4_SetConfig+0xb4>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <TIM_OC4_SetConfig+0xb8>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <TIM_OC4_SetConfig+0xbc>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	031b      	lsls	r3, r3, #12
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <TIM_OC4_SetConfig+0xc0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <TIM_OC4_SetConfig+0x78>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <TIM_OC4_SetConfig+0xc4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d007      	beq.n	8004b8c <TIM_OC4_SetConfig+0x78>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	; (8004bdc <TIM_OC4_SetConfig+0xc8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_OC4_SetConfig+0x78>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <TIM_OC4_SetConfig+0xcc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d109      	bne.n	8004ba0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	4a15      	ldr	r2, [pc, #84]	; (8004be4 <TIM_OC4_SetConfig+0xd0>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	019b      	lsls	r3, r3, #6
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	b006      	add	sp, #24
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	ffffefff 	.word	0xffffefff
 8004bc8:	feff8fff 	.word	0xfeff8fff
 8004bcc:	fffffcff 	.word	0xfffffcff
 8004bd0:	ffffdfff 	.word	0xffffdfff
 8004bd4:	40012c00 	.word	0x40012c00
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
 8004be4:	ffffbfff 	.word	0xffffbfff

08004be8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <TIM_OC5_SetConfig+0xa4>)
 8004bfe:	401a      	ands	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a1f      	ldr	r2, [pc, #124]	; (8004c90 <TIM_OC5_SetConfig+0xa8>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <TIM_OC5_SetConfig+0xac>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <TIM_OC5_SetConfig+0xb0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00b      	beq.n	8004c56 <TIM_OC5_SetConfig+0x6e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a16      	ldr	r2, [pc, #88]	; (8004c9c <TIM_OC5_SetConfig+0xb4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <TIM_OC5_SetConfig+0x6e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <TIM_OC5_SetConfig+0xb8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_OC5_SetConfig+0x6e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <TIM_OC5_SetConfig+0xbc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d109      	bne.n	8004c6a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <TIM_OC5_SetConfig+0xa4>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b006      	add	sp, #24
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	fffeffff 	.word	0xfffeffff
 8004c90:	fffeff8f 	.word	0xfffeff8f
 8004c94:	fffdffff 	.word	0xfffdffff
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	4a24      	ldr	r2, [pc, #144]	; (8004d50 <TIM_OC6_SetConfig+0xa8>)
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a20      	ldr	r2, [pc, #128]	; (8004d54 <TIM_OC6_SetConfig+0xac>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <TIM_OC6_SetConfig+0xb0>)
 8004ce8:	4013      	ands	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	051b      	lsls	r3, r3, #20
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <TIM_OC6_SetConfig+0xb4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <TIM_OC6_SetConfig+0x70>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <TIM_OC6_SetConfig+0xb8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d007      	beq.n	8004d18 <TIM_OC6_SetConfig+0x70>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a16      	ldr	r2, [pc, #88]	; (8004d64 <TIM_OC6_SetConfig+0xbc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_OC6_SetConfig+0x70>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <TIM_OC6_SetConfig+0xc0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d109      	bne.n	8004d2c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <TIM_OC6_SetConfig+0xc4>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	029b      	lsls	r3, r3, #10
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b006      	add	sp, #24
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	ffefffff 	.word	0xffefffff
 8004d54:	feff8fff 	.word	0xfeff8fff
 8004d58:	ffdfffff 	.word	0xffdfffff
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40014400 	.word	0x40014400
 8004d68:	40014800 	.word	0x40014800
 8004d6c:	fffbffff 	.word	0xfffbffff

08004d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	2201      	movs	r2, #1
 8004d88:	4393      	bics	r3, r2
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	22f0      	movs	r2, #240	; 0xf0
 8004d9a:	4393      	bics	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	220a      	movs	r2, #10
 8004dac:	4393      	bics	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b006      	add	sp, #24
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	2210      	movs	r2, #16
 8004de4:	4393      	bics	r3, r2
 8004de6:	001a      	movs	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <TIM_TI2_ConfigInputStage+0x60>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	22a0      	movs	r2, #160	; 0xa0
 8004e08:	4393      	bics	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	621a      	str	r2, [r3, #32]
}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b006      	add	sp, #24
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	ffff0fff 	.word	0xffff0fff

08004e30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <TIM_ITRx_SetConfig+0x34>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	2207      	movs	r2, #7
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	609a      	str	r2, [r3, #8]
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b004      	add	sp, #16
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	ffcfff8f 	.word	0xffcfff8f

08004e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <TIM_ETR_SetConfig+0x3c>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	021a      	lsls	r2, r3, #8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b006      	add	sp, #24
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	ffff00ff 	.word	0xffff00ff

08004ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	221f      	movs	r2, #31
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2201      	movs	r2, #1
 8004ebc:	409a      	lsls	r2, r3
 8004ebe:	0013      	movs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	43d2      	mvns	r2, r2
 8004eca:	401a      	ands	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	211f      	movs	r1, #31
 8004ed8:	400b      	ands	r3, r1
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4099      	lsls	r1, r3
 8004ede:	000b      	movs	r3, r1
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b006      	add	sp, #24
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	223c      	movs	r2, #60	; 0x3c
 8004efe:	5c9b      	ldrb	r3, [r3, r2]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e055      	b.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	223c      	movs	r2, #60	; 0x3c
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	223d      	movs	r2, #61	; 0x3d
 8004f14:	2102      	movs	r1, #2
 8004f16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a23      	ldr	r2, [pc, #140]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d108      	bne.n	8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a22      	ldr	r2, [pc, #136]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2270      	movs	r2, #112	; 0x70
 8004f48:	4393      	bics	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00f      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	05db      	lsls	r3, r3, #23
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d009      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a11      	ldr	r2, [pc, #68]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d10c      	bne.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2280      	movs	r2, #128	; 0x80
 8004f8c:	4393      	bics	r3, r2
 8004f8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	223d      	movs	r2, #61	; 0x3d
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	223c      	movs	r2, #60	; 0x3c
 8004fae:	2100      	movs	r1, #0
 8004fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b004      	add	sp, #16
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	ff0fffff 	.word	0xff0fffff
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40014000 	.word	0x40014000

08004fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b002      	add	sp, #8
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e046      	b.n	800509c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2288      	movs	r2, #136	; 0x88
 8005012:	589b      	ldr	r3, [r3, r2]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d107      	bne.n	8005028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2284      	movs	r2, #132	; 0x84
 800501c:	2100      	movs	r1, #0
 800501e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	0018      	movs	r0, r3
 8005024:	f7fc f930 	bl	8001288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2288      	movs	r2, #136	; 0x88
 800502c:	2124      	movs	r1, #36	; 0x24
 800502e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2101      	movs	r1, #1
 800503c:	438a      	bics	r2, r1
 800503e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	0018      	movs	r0, r3
 800504c:	f000 fed0 	bl	8005df0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	0018      	movs	r0, r3
 8005054:	f000 fc0e 	bl	8005874 <UART_SetConfig>
 8005058:	0003      	movs	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e01c      	b.n	800509c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	490d      	ldr	r1, [pc, #52]	; (80050a4 <HAL_UART_Init+0xa8>)
 800506e:	400a      	ands	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	212a      	movs	r1, #42	; 0x2a
 800507e:	438a      	bics	r2, r1
 8005080:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2101      	movs	r1, #1
 800508e:	430a      	orrs	r2, r1
 8005090:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	0018      	movs	r0, r3
 8005096:	f000 ff5f 	bl	8005f58 <UART_CheckIdleState>
 800509a:	0003      	movs	r3, r0
}
 800509c:	0018      	movs	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	b002      	add	sp, #8
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	ffffb7ff 	.word	0xffffb7ff

080050a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	1dbb      	adds	r3, r7, #6
 80050b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2288      	movs	r2, #136	; 0x88
 80050bc:	589b      	ldr	r3, [r3, r2]
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d000      	beq.n	80050c4 <HAL_UART_Transmit+0x1c>
 80050c2:	e090      	b.n	80051e6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_UART_Transmit+0x2a>
 80050ca:	1dbb      	adds	r3, r7, #6
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e088      	b.n	80051e8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	2380      	movs	r3, #128	; 0x80
 80050dc:	015b      	lsls	r3, r3, #5
 80050de:	429a      	cmp	r2, r3
 80050e0:	d109      	bne.n	80050f6 <HAL_UART_Transmit+0x4e>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2201      	movs	r2, #1
 80050ee:	4013      	ands	r3, r2
 80050f0:	d001      	beq.n	80050f6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e078      	b.n	80051e8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2290      	movs	r2, #144	; 0x90
 80050fa:	2100      	movs	r1, #0
 80050fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2288      	movs	r2, #136	; 0x88
 8005102:	2121      	movs	r1, #33	; 0x21
 8005104:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005106:	f7fc fa51 	bl	80015ac <HAL_GetTick>
 800510a:	0003      	movs	r3, r0
 800510c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1dba      	adds	r2, r7, #6
 8005112:	2154      	movs	r1, #84	; 0x54
 8005114:	8812      	ldrh	r2, [r2, #0]
 8005116:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	1dba      	adds	r2, r7, #6
 800511c:	2156      	movs	r1, #86	; 0x56
 800511e:	8812      	ldrh	r2, [r2, #0]
 8005120:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	2380      	movs	r3, #128	; 0x80
 8005128:	015b      	lsls	r3, r3, #5
 800512a:	429a      	cmp	r2, r3
 800512c:	d108      	bne.n	8005140 <HAL_UART_Transmit+0x98>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	e003      	b.n	8005148 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005148:	e030      	b.n	80051ac <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	0013      	movs	r3, r2
 8005154:	2200      	movs	r2, #0
 8005156:	2180      	movs	r1, #128	; 0x80
 8005158:	f000 ffa8 	bl	80060ac <UART_WaitOnFlagUntilTimeout>
 800515c:	1e03      	subs	r3, r0, #0
 800515e:	d005      	beq.n	800516c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2288      	movs	r2, #136	; 0x88
 8005164:	2120      	movs	r1, #32
 8005166:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e03d      	b.n	80051e8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	001a      	movs	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	05d2      	lsls	r2, r2, #23
 800517e:	0dd2      	lsrs	r2, r2, #23
 8005180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	3302      	adds	r3, #2
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e007      	b.n	800519a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	781a      	ldrb	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2256      	movs	r2, #86	; 0x56
 800519e:	5a9b      	ldrh	r3, [r3, r2]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b299      	uxth	r1, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2256      	movs	r2, #86	; 0x56
 80051aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2256      	movs	r2, #86	; 0x56
 80051b0:	5a9b      	ldrh	r3, [r3, r2]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1c8      	bne.n	800514a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	0013      	movs	r3, r2
 80051c2:	2200      	movs	r2, #0
 80051c4:	2140      	movs	r1, #64	; 0x40
 80051c6:	f000 ff71 	bl	80060ac <UART_WaitOnFlagUntilTimeout>
 80051ca:	1e03      	subs	r3, r0, #0
 80051cc:	d005      	beq.n	80051da <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2288      	movs	r2, #136	; 0x88
 80051d2:	2120      	movs	r1, #32
 80051d4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e006      	b.n	80051e8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2288      	movs	r2, #136	; 0x88
 80051de:	2120      	movs	r1, #32
 80051e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e000      	b.n	80051e8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80051e6:	2302      	movs	r3, #2
  }
}
 80051e8:	0018      	movs	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b008      	add	sp, #32
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051f0:	b5b0      	push	{r4, r5, r7, lr}
 80051f2:	b0aa      	sub	sp, #168	; 0xa8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	22a4      	movs	r2, #164	; 0xa4
 8005200:	18b9      	adds	r1, r7, r2
 8005202:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	20a0      	movs	r0, #160	; 0xa0
 800520c:	1839      	adds	r1, r7, r0
 800520e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	249c      	movs	r4, #156	; 0x9c
 8005218:	1939      	adds	r1, r7, r4
 800521a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800521c:	0011      	movs	r1, r2
 800521e:	18bb      	adds	r3, r7, r2
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4aa2      	ldr	r2, [pc, #648]	; (80054ac <HAL_UART_IRQHandler+0x2bc>)
 8005224:	4013      	ands	r3, r2
 8005226:	2298      	movs	r2, #152	; 0x98
 8005228:	18bd      	adds	r5, r7, r2
 800522a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800522c:	18bb      	adds	r3, r7, r2
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11a      	bne.n	800526a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005234:	187b      	adds	r3, r7, r1
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2220      	movs	r2, #32
 800523a:	4013      	ands	r3, r2
 800523c:	d015      	beq.n	800526a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800523e:	183b      	adds	r3, r7, r0
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2220      	movs	r2, #32
 8005244:	4013      	ands	r3, r2
 8005246:	d105      	bne.n	8005254 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005248:	193b      	adds	r3, r7, r4
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	055b      	lsls	r3, r3, #21
 8005250:	4013      	ands	r3, r2
 8005252:	d00a      	beq.n	800526a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005258:	2b00      	cmp	r3, #0
 800525a:	d100      	bne.n	800525e <HAL_UART_IRQHandler+0x6e>
 800525c:	e2dc      	b.n	8005818 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	0010      	movs	r0, r2
 8005266:	4798      	blx	r3
      }
      return;
 8005268:	e2d6      	b.n	8005818 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800526a:	2398      	movs	r3, #152	; 0x98
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d100      	bne.n	8005276 <HAL_UART_IRQHandler+0x86>
 8005274:	e122      	b.n	80054bc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005276:	239c      	movs	r3, #156	; 0x9c
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a8c      	ldr	r2, [pc, #560]	; (80054b0 <HAL_UART_IRQHandler+0x2c0>)
 800527e:	4013      	ands	r3, r2
 8005280:	d106      	bne.n	8005290 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005282:	23a0      	movs	r3, #160	; 0xa0
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a8a      	ldr	r2, [pc, #552]	; (80054b4 <HAL_UART_IRQHandler+0x2c4>)
 800528a:	4013      	ands	r3, r2
 800528c:	d100      	bne.n	8005290 <HAL_UART_IRQHandler+0xa0>
 800528e:	e115      	b.n	80054bc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005290:	23a4      	movs	r3, #164	; 0xa4
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	4013      	ands	r3, r2
 800529a:	d012      	beq.n	80052c2 <HAL_UART_IRQHandler+0xd2>
 800529c:	23a0      	movs	r3, #160	; 0xa0
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4013      	ands	r3, r2
 80052a8:	d00b      	beq.n	80052c2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2290      	movs	r2, #144	; 0x90
 80052b6:	589b      	ldr	r3, [r3, r2]
 80052b8:	2201      	movs	r2, #1
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2190      	movs	r1, #144	; 0x90
 80052c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052c2:	23a4      	movs	r3, #164	; 0xa4
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2202      	movs	r2, #2
 80052ca:	4013      	ands	r3, r2
 80052cc:	d011      	beq.n	80052f2 <HAL_UART_IRQHandler+0x102>
 80052ce:	239c      	movs	r3, #156	; 0x9c
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2201      	movs	r2, #1
 80052d6:	4013      	ands	r3, r2
 80052d8:	d00b      	beq.n	80052f2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2202      	movs	r2, #2
 80052e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2290      	movs	r2, #144	; 0x90
 80052e6:	589b      	ldr	r3, [r3, r2]
 80052e8:	2204      	movs	r2, #4
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2190      	movs	r1, #144	; 0x90
 80052f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052f2:	23a4      	movs	r3, #164	; 0xa4
 80052f4:	18fb      	adds	r3, r7, r3
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2204      	movs	r2, #4
 80052fa:	4013      	ands	r3, r2
 80052fc:	d011      	beq.n	8005322 <HAL_UART_IRQHandler+0x132>
 80052fe:	239c      	movs	r3, #156	; 0x9c
 8005300:	18fb      	adds	r3, r7, r3
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2201      	movs	r2, #1
 8005306:	4013      	ands	r3, r2
 8005308:	d00b      	beq.n	8005322 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2204      	movs	r2, #4
 8005310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2290      	movs	r2, #144	; 0x90
 8005316:	589b      	ldr	r3, [r3, r2]
 8005318:	2202      	movs	r2, #2
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2190      	movs	r1, #144	; 0x90
 8005320:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005322:	23a4      	movs	r3, #164	; 0xa4
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2208      	movs	r2, #8
 800532a:	4013      	ands	r3, r2
 800532c:	d017      	beq.n	800535e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800532e:	23a0      	movs	r3, #160	; 0xa0
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2220      	movs	r2, #32
 8005336:	4013      	ands	r3, r2
 8005338:	d105      	bne.n	8005346 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800533a:	239c      	movs	r3, #156	; 0x9c
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a5b      	ldr	r2, [pc, #364]	; (80054b0 <HAL_UART_IRQHandler+0x2c0>)
 8005342:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005344:	d00b      	beq.n	800535e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2208      	movs	r2, #8
 800534c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2290      	movs	r2, #144	; 0x90
 8005352:	589b      	ldr	r3, [r3, r2]
 8005354:	2208      	movs	r2, #8
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2190      	movs	r1, #144	; 0x90
 800535c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800535e:	23a4      	movs	r3, #164	; 0xa4
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	4013      	ands	r3, r2
 800536a:	d013      	beq.n	8005394 <HAL_UART_IRQHandler+0x1a4>
 800536c:	23a0      	movs	r3, #160	; 0xa0
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	04db      	lsls	r3, r3, #19
 8005376:	4013      	ands	r3, r2
 8005378:	d00c      	beq.n	8005394 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2280      	movs	r2, #128	; 0x80
 8005380:	0112      	lsls	r2, r2, #4
 8005382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2290      	movs	r2, #144	; 0x90
 8005388:	589b      	ldr	r3, [r3, r2]
 800538a:	2220      	movs	r2, #32
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2190      	movs	r1, #144	; 0x90
 8005392:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2290      	movs	r2, #144	; 0x90
 8005398:	589b      	ldr	r3, [r3, r2]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d100      	bne.n	80053a0 <HAL_UART_IRQHandler+0x1b0>
 800539e:	e23d      	b.n	800581c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053a0:	23a4      	movs	r3, #164	; 0xa4
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2220      	movs	r2, #32
 80053a8:	4013      	ands	r3, r2
 80053aa:	d015      	beq.n	80053d8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053ac:	23a0      	movs	r3, #160	; 0xa0
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2220      	movs	r2, #32
 80053b4:	4013      	ands	r3, r2
 80053b6:	d106      	bne.n	80053c6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053b8:	239c      	movs	r3, #156	; 0x9c
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	055b      	lsls	r3, r3, #21
 80053c2:	4013      	ands	r3, r2
 80053c4:	d008      	beq.n	80053d8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	0010      	movs	r0, r2
 80053d6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2290      	movs	r2, #144	; 0x90
 80053dc:	589b      	ldr	r3, [r3, r2]
 80053de:	2194      	movs	r1, #148	; 0x94
 80053e0:	187a      	adds	r2, r7, r1
 80053e2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2240      	movs	r2, #64	; 0x40
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d004      	beq.n	80053fc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2228      	movs	r2, #40	; 0x28
 80053f8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053fa:	d04c      	beq.n	8005496 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 fec4 	bl	800618c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2240      	movs	r2, #64	; 0x40
 800540c:	4013      	ands	r3, r2
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d13c      	bne.n	800548c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005412:	f3ef 8310 	mrs	r3, PRIMASK
 8005416:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005418:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541a:	2090      	movs	r0, #144	; 0x90
 800541c:	183a      	adds	r2, r7, r0
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	2301      	movs	r3, #1
 8005422:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005426:	f383 8810 	msr	PRIMASK, r3
}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2140      	movs	r1, #64	; 0x40
 8005438:	438a      	bics	r2, r1
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	183b      	adds	r3, r7, r0
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005444:	f383 8810 	msr	PRIMASK, r3
}
 8005448:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2280      	movs	r2, #128	; 0x80
 800544e:	589b      	ldr	r3, [r3, r2]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d016      	beq.n	8005482 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2280      	movs	r2, #128	; 0x80
 8005458:	589b      	ldr	r3, [r3, r2]
 800545a:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <HAL_UART_IRQHandler+0x2c8>)
 800545c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	589b      	ldr	r3, [r3, r2]
 8005464:	0018      	movs	r0, r3
 8005466:	f7fc fea3 	bl	80021b0 <HAL_DMA_Abort_IT>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d01c      	beq.n	80054a8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2280      	movs	r2, #128	; 0x80
 8005472:	589b      	ldr	r3, [r3, r2]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	2180      	movs	r1, #128	; 0x80
 800547a:	5852      	ldr	r2, [r2, r1]
 800547c:	0010      	movs	r0, r2
 800547e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	e012      	b.n	80054a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0018      	movs	r0, r3
 8005486:	f000 f9e1 	bl	800584c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548a:	e00d      	b.n	80054a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	0018      	movs	r0, r3
 8005490:	f000 f9dc 	bl	800584c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	e008      	b.n	80054a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	0018      	movs	r0, r3
 800549a:	f000 f9d7 	bl	800584c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2290      	movs	r2, #144	; 0x90
 80054a2:	2100      	movs	r1, #0
 80054a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80054a6:	e1b9      	b.n	800581c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	46c0      	nop			; (mov r8, r8)
    return;
 80054aa:	e1b7      	b.n	800581c <HAL_UART_IRQHandler+0x62c>
 80054ac:	0000080f 	.word	0x0000080f
 80054b0:	10000001 	.word	0x10000001
 80054b4:	04000120 	.word	0x04000120
 80054b8:	08006259 	.word	0x08006259

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d000      	beq.n	80054c6 <HAL_UART_IRQHandler+0x2d6>
 80054c4:	e13e      	b.n	8005744 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054c6:	23a4      	movs	r3, #164	; 0xa4
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2210      	movs	r2, #16
 80054ce:	4013      	ands	r3, r2
 80054d0:	d100      	bne.n	80054d4 <HAL_UART_IRQHandler+0x2e4>
 80054d2:	e137      	b.n	8005744 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054d4:	23a0      	movs	r3, #160	; 0xa0
 80054d6:	18fb      	adds	r3, r7, r3
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2210      	movs	r2, #16
 80054dc:	4013      	ands	r3, r2
 80054de:	d100      	bne.n	80054e2 <HAL_UART_IRQHandler+0x2f2>
 80054e0:	e130      	b.n	8005744 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2210      	movs	r2, #16
 80054e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2240      	movs	r2, #64	; 0x40
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d000      	beq.n	80054fa <HAL_UART_IRQHandler+0x30a>
 80054f8:	e0a4      	b.n	8005644 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2280      	movs	r2, #128	; 0x80
 80054fe:	589b      	ldr	r3, [r3, r2]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	217e      	movs	r1, #126	; 0x7e
 8005506:	187b      	adds	r3, r7, r1
 8005508:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800550a:	187b      	adds	r3, r7, r1
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d100      	bne.n	8005514 <HAL_UART_IRQHandler+0x324>
 8005512:	e185      	b.n	8005820 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	225c      	movs	r2, #92	; 0x5c
 8005518:	5a9b      	ldrh	r3, [r3, r2]
 800551a:	187a      	adds	r2, r7, r1
 800551c:	8812      	ldrh	r2, [r2, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d300      	bcc.n	8005524 <HAL_UART_IRQHandler+0x334>
 8005522:	e17d      	b.n	8005820 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	187a      	adds	r2, r7, r1
 8005528:	215e      	movs	r1, #94	; 0x5e
 800552a:	8812      	ldrh	r2, [r2, #0]
 800552c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2280      	movs	r2, #128	; 0x80
 8005532:	589b      	ldr	r3, [r3, r2]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2220      	movs	r2, #32
 800553a:	4013      	ands	r3, r2
 800553c:	d170      	bne.n	8005620 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800553e:	f3ef 8310 	mrs	r3, PRIMASK
 8005542:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005546:	67bb      	str	r3, [r7, #120]	; 0x78
 8005548:	2301      	movs	r3, #1
 800554a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554e:	f383 8810 	msr	PRIMASK, r3
}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	49b4      	ldr	r1, [pc, #720]	; (8005830 <HAL_UART_IRQHandler+0x640>)
 8005560:	400a      	ands	r2, r1
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005566:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	f383 8810 	msr	PRIMASK, r3
}
 800556e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005570:	f3ef 8310 	mrs	r3, PRIMASK
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005578:	677b      	str	r3, [r7, #116]	; 0x74
 800557a:	2301      	movs	r3, #1
 800557c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005580:	f383 8810 	msr	PRIMASK, r3
}
 8005584:	46c0      	nop			; (mov r8, r8)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2101      	movs	r1, #1
 8005592:	438a      	bics	r2, r1
 8005594:	609a      	str	r2, [r3, #8]
 8005596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005598:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800559c:	f383 8810 	msr	PRIMASK, r3
}
 80055a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a2:	f3ef 8310 	mrs	r3, PRIMASK
 80055a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80055a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055aa:	673b      	str	r3, [r7, #112]	; 0x70
 80055ac:	2301      	movs	r3, #1
 80055ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b2:	f383 8810 	msr	PRIMASK, r3
}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2140      	movs	r1, #64	; 0x40
 80055c4:	438a      	bics	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ce:	f383 8810 	msr	PRIMASK, r3
}
 80055d2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	228c      	movs	r2, #140	; 0x8c
 80055d8:	2120      	movs	r1, #32
 80055da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e2:	f3ef 8310 	mrs	r3, PRIMASK
 80055e6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80055e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ec:	2301      	movs	r3, #1
 80055ee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f2:	f383 8810 	msr	PRIMASK, r3
}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2110      	movs	r1, #16
 8005604:	438a      	bics	r2, r1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800560e:	f383 8810 	msr	PRIMASK, r3
}
 8005612:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2280      	movs	r2, #128	; 0x80
 8005618:	589b      	ldr	r3, [r3, r2]
 800561a:	0018      	movs	r0, r3
 800561c:	f7fc fd66 	bl	80020ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	225c      	movs	r2, #92	; 0x5c
 800562a:	5a9a      	ldrh	r2, [r3, r2]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	215e      	movs	r1, #94	; 0x5e
 8005630:	5a5b      	ldrh	r3, [r3, r1]
 8005632:	b29b      	uxth	r3, r3
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	0011      	movs	r1, r2
 800563c:	0018      	movs	r0, r3
 800563e:	f000 f90d 	bl	800585c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005642:	e0ed      	b.n	8005820 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	225c      	movs	r2, #92	; 0x5c
 8005648:	5a99      	ldrh	r1, [r3, r2]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	225e      	movs	r2, #94	; 0x5e
 800564e:	5a9b      	ldrh	r3, [r3, r2]
 8005650:	b29a      	uxth	r2, r3
 8005652:	208e      	movs	r0, #142	; 0x8e
 8005654:	183b      	adds	r3, r7, r0
 8005656:	1a8a      	subs	r2, r1, r2
 8005658:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	225e      	movs	r2, #94	; 0x5e
 800565e:	5a9b      	ldrh	r3, [r3, r2]
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d100      	bne.n	8005668 <HAL_UART_IRQHandler+0x478>
 8005666:	e0dd      	b.n	8005824 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005668:	183b      	adds	r3, r7, r0
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d100      	bne.n	8005672 <HAL_UART_IRQHandler+0x482>
 8005670:	e0d8      	b.n	8005824 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005672:	f3ef 8310 	mrs	r3, PRIMASK
 8005676:	60fb      	str	r3, [r7, #12]
  return(result);
 8005678:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800567a:	2488      	movs	r4, #136	; 0x88
 800567c:	193a      	adds	r2, r7, r4
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	2301      	movs	r3, #1
 8005682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f383 8810 	msr	PRIMASK, r3
}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4967      	ldr	r1, [pc, #412]	; (8005834 <HAL_UART_IRQHandler+0x644>)
 8005698:	400a      	ands	r2, r1
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	193b      	adds	r3, r7, r4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f383 8810 	msr	PRIMASK, r3
}
 80056a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056aa:	f3ef 8310 	mrs	r3, PRIMASK
 80056ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80056b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056b2:	2484      	movs	r4, #132	; 0x84
 80056b4:	193a      	adds	r2, r7, r4
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	2301      	movs	r3, #1
 80056ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f383 8810 	msr	PRIMASK, r3
}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	495a      	ldr	r1, [pc, #360]	; (8005838 <HAL_UART_IRQHandler+0x648>)
 80056d0:	400a      	ands	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
 80056d4:	193b      	adds	r3, r7, r4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	228c      	movs	r2, #140	; 0x8c
 80056e6:	2120      	movs	r1, #32
 80056e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f6:	f3ef 8310 	mrs	r3, PRIMASK
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fe:	2480      	movs	r4, #128	; 0x80
 8005700:	193a      	adds	r2, r7, r4
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	2301      	movs	r3, #1
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	f383 8810 	msr	PRIMASK, r3
}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2110      	movs	r1, #16
 800571c:	438a      	bics	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	193b      	adds	r3, r7, r4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005728:	f383 8810 	msr	PRIMASK, r3
}
 800572c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005734:	183b      	adds	r3, r7, r0
 8005736:	881a      	ldrh	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	0011      	movs	r1, r2
 800573c:	0018      	movs	r0, r3
 800573e:	f000 f88d 	bl	800585c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005742:	e06f      	b.n	8005824 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005744:	23a4      	movs	r3, #164	; 0xa4
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	035b      	lsls	r3, r3, #13
 800574e:	4013      	ands	r3, r2
 8005750:	d010      	beq.n	8005774 <HAL_UART_IRQHandler+0x584>
 8005752:	239c      	movs	r3, #156	; 0x9c
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	03db      	lsls	r3, r3, #15
 800575c:	4013      	ands	r3, r2
 800575e:	d009      	beq.n	8005774 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	0352      	lsls	r2, r2, #13
 8005768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f000 fdb6 	bl	80062de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005772:	e05a      	b.n	800582a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005774:	23a4      	movs	r3, #164	; 0xa4
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	4013      	ands	r3, r2
 800577e:	d016      	beq.n	80057ae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005780:	23a0      	movs	r3, #160	; 0xa0
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	4013      	ands	r3, r2
 800578a:	d106      	bne.n	800579a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800578c:	239c      	movs	r3, #156	; 0x9c
 800578e:	18fb      	adds	r3, r7, r3
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	4013      	ands	r3, r2
 8005798:	d009      	beq.n	80057ae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d042      	beq.n	8005828 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	0010      	movs	r0, r2
 80057aa:	4798      	blx	r3
    }
    return;
 80057ac:	e03c      	b.n	8005828 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057ae:	23a4      	movs	r3, #164	; 0xa4
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2240      	movs	r2, #64	; 0x40
 80057b6:	4013      	ands	r3, r2
 80057b8:	d00a      	beq.n	80057d0 <HAL_UART_IRQHandler+0x5e0>
 80057ba:	23a0      	movs	r3, #160	; 0xa0
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2240      	movs	r2, #64	; 0x40
 80057c2:	4013      	ands	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	0018      	movs	r0, r3
 80057ca:	f000 fd5c 	bl	8006286 <UART_EndTransmit_IT>
    return;
 80057ce:	e02c      	b.n	800582a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80057d0:	23a4      	movs	r3, #164	; 0xa4
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	2380      	movs	r3, #128	; 0x80
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	4013      	ands	r3, r2
 80057dc:	d00b      	beq.n	80057f6 <HAL_UART_IRQHandler+0x606>
 80057de:	23a0      	movs	r3, #160	; 0xa0
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	05db      	lsls	r3, r3, #23
 80057e8:	4013      	ands	r3, r2
 80057ea:	d004      	beq.n	80057f6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	0018      	movs	r0, r3
 80057f0:	f000 fd85 	bl	80062fe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057f4:	e019      	b.n	800582a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80057f6:	23a4      	movs	r3, #164	; 0xa4
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	045b      	lsls	r3, r3, #17
 8005800:	4013      	ands	r3, r2
 8005802:	d012      	beq.n	800582a <HAL_UART_IRQHandler+0x63a>
 8005804:	23a0      	movs	r3, #160	; 0xa0
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	da0d      	bge.n	800582a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0018      	movs	r0, r3
 8005812:	f000 fd6c 	bl	80062ee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005816:	e008      	b.n	800582a <HAL_UART_IRQHandler+0x63a>
      return;
 8005818:	46c0      	nop			; (mov r8, r8)
 800581a:	e006      	b.n	800582a <HAL_UART_IRQHandler+0x63a>
    return;
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	e004      	b.n	800582a <HAL_UART_IRQHandler+0x63a>
      return;
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	e002      	b.n	800582a <HAL_UART_IRQHandler+0x63a>
      return;
 8005824:	46c0      	nop			; (mov r8, r8)
 8005826:	e000      	b.n	800582a <HAL_UART_IRQHandler+0x63a>
    return;
 8005828:	46c0      	nop			; (mov r8, r8)
  }
}
 800582a:	46bd      	mov	sp, r7
 800582c:	b02a      	add	sp, #168	; 0xa8
 800582e:	bdb0      	pop	{r4, r5, r7, pc}
 8005830:	fffffeff 	.word	0xfffffeff
 8005834:	fffffedf 	.word	0xfffffedf
 8005838:	effffffe 	.word	0xeffffffe

0800583c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	46bd      	mov	sp, r7
 8005848:	b002      	add	sp, #8
 800584a:	bd80      	pop	{r7, pc}

0800584c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005854:	46c0      	nop			; (mov r8, r8)
 8005856:	46bd      	mov	sp, r7
 8005858:	b002      	add	sp, #8
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	000a      	movs	r2, r1
 8005866:	1cbb      	adds	r3, r7, #2
 8005868:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	46bd      	mov	sp, r7
 800586e:	b002      	add	sp, #8
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005874:	b5b0      	push	{r4, r5, r7, lr}
 8005876:	b090      	sub	sp, #64	; 0x40
 8005878:	af00      	add	r7, sp, #0
 800587a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800587c:	231a      	movs	r3, #26
 800587e:	2220      	movs	r2, #32
 8005880:	189b      	adds	r3, r3, r2
 8005882:	19db      	adds	r3, r3, r7
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	431a      	orrs	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	431a      	orrs	r2, r3
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	4313      	orrs	r3, r2
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4aaf      	ldr	r2, [pc, #700]	; (8005b64 <UART_SetConfig+0x2f0>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	0019      	movs	r1, r3
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b2:	430b      	orrs	r3, r1
 80058b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4aaa      	ldr	r2, [pc, #680]	; (8005b68 <UART_SetConfig+0x2f4>)
 80058be:	4013      	ands	r3, r2
 80058c0:	0018      	movs	r0, r3
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	68d9      	ldr	r1, [r3, #12]
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	0003      	movs	r3, r0
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4aa4      	ldr	r2, [pc, #656]	; (8005b6c <UART_SetConfig+0x2f8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058e6:	4313      	orrs	r3, r2
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a9f      	ldr	r2, [pc, #636]	; (8005b70 <UART_SetConfig+0x2fc>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	0019      	movs	r1, r3
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	220f      	movs	r2, #15
 8005908:	4393      	bics	r3, r2
 800590a:	0018      	movs	r0, r3
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	0003      	movs	r3, r0
 8005916:	430b      	orrs	r3, r1
 8005918:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a95      	ldr	r2, [pc, #596]	; (8005b74 <UART_SetConfig+0x300>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d131      	bne.n	8005988 <UART_SetConfig+0x114>
 8005924:	4b94      	ldr	r3, [pc, #592]	; (8005b78 <UART_SetConfig+0x304>)
 8005926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005928:	2203      	movs	r2, #3
 800592a:	4013      	ands	r3, r2
 800592c:	2b03      	cmp	r3, #3
 800592e:	d01d      	beq.n	800596c <UART_SetConfig+0xf8>
 8005930:	d823      	bhi.n	800597a <UART_SetConfig+0x106>
 8005932:	2b02      	cmp	r3, #2
 8005934:	d00c      	beq.n	8005950 <UART_SetConfig+0xdc>
 8005936:	d820      	bhi.n	800597a <UART_SetConfig+0x106>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <UART_SetConfig+0xce>
 800593c:	2b01      	cmp	r3, #1
 800593e:	d00e      	beq.n	800595e <UART_SetConfig+0xea>
 8005940:	e01b      	b.n	800597a <UART_SetConfig+0x106>
 8005942:	231b      	movs	r3, #27
 8005944:	2220      	movs	r2, #32
 8005946:	189b      	adds	r3, r3, r2
 8005948:	19db      	adds	r3, r3, r7
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	e0b4      	b.n	8005aba <UART_SetConfig+0x246>
 8005950:	231b      	movs	r3, #27
 8005952:	2220      	movs	r2, #32
 8005954:	189b      	adds	r3, r3, r2
 8005956:	19db      	adds	r3, r3, r7
 8005958:	2202      	movs	r2, #2
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e0ad      	b.n	8005aba <UART_SetConfig+0x246>
 800595e:	231b      	movs	r3, #27
 8005960:	2220      	movs	r2, #32
 8005962:	189b      	adds	r3, r3, r2
 8005964:	19db      	adds	r3, r3, r7
 8005966:	2204      	movs	r2, #4
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e0a6      	b.n	8005aba <UART_SetConfig+0x246>
 800596c:	231b      	movs	r3, #27
 800596e:	2220      	movs	r2, #32
 8005970:	189b      	adds	r3, r3, r2
 8005972:	19db      	adds	r3, r3, r7
 8005974:	2208      	movs	r2, #8
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e09f      	b.n	8005aba <UART_SetConfig+0x246>
 800597a:	231b      	movs	r3, #27
 800597c:	2220      	movs	r2, #32
 800597e:	189b      	adds	r3, r3, r2
 8005980:	19db      	adds	r3, r3, r7
 8005982:	2210      	movs	r2, #16
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e098      	b.n	8005aba <UART_SetConfig+0x246>
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a7b      	ldr	r2, [pc, #492]	; (8005b7c <UART_SetConfig+0x308>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d131      	bne.n	80059f6 <UART_SetConfig+0x182>
 8005992:	4b79      	ldr	r3, [pc, #484]	; (8005b78 <UART_SetConfig+0x304>)
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	220c      	movs	r2, #12
 8005998:	4013      	ands	r3, r2
 800599a:	2b0c      	cmp	r3, #12
 800599c:	d01d      	beq.n	80059da <UART_SetConfig+0x166>
 800599e:	d823      	bhi.n	80059e8 <UART_SetConfig+0x174>
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d00c      	beq.n	80059be <UART_SetConfig+0x14a>
 80059a4:	d820      	bhi.n	80059e8 <UART_SetConfig+0x174>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <UART_SetConfig+0x13c>
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d00e      	beq.n	80059cc <UART_SetConfig+0x158>
 80059ae:	e01b      	b.n	80059e8 <UART_SetConfig+0x174>
 80059b0:	231b      	movs	r3, #27
 80059b2:	2220      	movs	r2, #32
 80059b4:	189b      	adds	r3, r3, r2
 80059b6:	19db      	adds	r3, r3, r7
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e07d      	b.n	8005aba <UART_SetConfig+0x246>
 80059be:	231b      	movs	r3, #27
 80059c0:	2220      	movs	r2, #32
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	2202      	movs	r2, #2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e076      	b.n	8005aba <UART_SetConfig+0x246>
 80059cc:	231b      	movs	r3, #27
 80059ce:	2220      	movs	r2, #32
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	2204      	movs	r2, #4
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	e06f      	b.n	8005aba <UART_SetConfig+0x246>
 80059da:	231b      	movs	r3, #27
 80059dc:	2220      	movs	r2, #32
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	19db      	adds	r3, r3, r7
 80059e2:	2208      	movs	r2, #8
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e068      	b.n	8005aba <UART_SetConfig+0x246>
 80059e8:	231b      	movs	r3, #27
 80059ea:	2220      	movs	r2, #32
 80059ec:	189b      	adds	r3, r3, r2
 80059ee:	19db      	adds	r3, r3, r7
 80059f0:	2210      	movs	r2, #16
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e061      	b.n	8005aba <UART_SetConfig+0x246>
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a61      	ldr	r2, [pc, #388]	; (8005b80 <UART_SetConfig+0x30c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d106      	bne.n	8005a0e <UART_SetConfig+0x19a>
 8005a00:	231b      	movs	r3, #27
 8005a02:	2220      	movs	r2, #32
 8005a04:	189b      	adds	r3, r3, r2
 8005a06:	19db      	adds	r3, r3, r7
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e055      	b.n	8005aba <UART_SetConfig+0x246>
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a5c      	ldr	r2, [pc, #368]	; (8005b84 <UART_SetConfig+0x310>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d106      	bne.n	8005a26 <UART_SetConfig+0x1b2>
 8005a18:	231b      	movs	r3, #27
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	189b      	adds	r3, r3, r2
 8005a1e:	19db      	adds	r3, r3, r7
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e049      	b.n	8005aba <UART_SetConfig+0x246>
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a50      	ldr	r2, [pc, #320]	; (8005b6c <UART_SetConfig+0x2f8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d13e      	bne.n	8005aae <UART_SetConfig+0x23a>
 8005a30:	4b51      	ldr	r3, [pc, #324]	; (8005b78 <UART_SetConfig+0x304>)
 8005a32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a34:	23c0      	movs	r3, #192	; 0xc0
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	4013      	ands	r3, r2
 8005a3a:	22c0      	movs	r2, #192	; 0xc0
 8005a3c:	0112      	lsls	r2, r2, #4
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d027      	beq.n	8005a92 <UART_SetConfig+0x21e>
 8005a42:	22c0      	movs	r2, #192	; 0xc0
 8005a44:	0112      	lsls	r2, r2, #4
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d82a      	bhi.n	8005aa0 <UART_SetConfig+0x22c>
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	0112      	lsls	r2, r2, #4
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d011      	beq.n	8005a76 <UART_SetConfig+0x202>
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	0112      	lsls	r2, r2, #4
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d822      	bhi.n	8005aa0 <UART_SetConfig+0x22c>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <UART_SetConfig+0x1f4>
 8005a5e:	2280      	movs	r2, #128	; 0x80
 8005a60:	00d2      	lsls	r2, r2, #3
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00e      	beq.n	8005a84 <UART_SetConfig+0x210>
 8005a66:	e01b      	b.n	8005aa0 <UART_SetConfig+0x22c>
 8005a68:	231b      	movs	r3, #27
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	19db      	adds	r3, r3, r7
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	e021      	b.n	8005aba <UART_SetConfig+0x246>
 8005a76:	231b      	movs	r3, #27
 8005a78:	2220      	movs	r2, #32
 8005a7a:	189b      	adds	r3, r3, r2
 8005a7c:	19db      	adds	r3, r3, r7
 8005a7e:	2202      	movs	r2, #2
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e01a      	b.n	8005aba <UART_SetConfig+0x246>
 8005a84:	231b      	movs	r3, #27
 8005a86:	2220      	movs	r2, #32
 8005a88:	189b      	adds	r3, r3, r2
 8005a8a:	19db      	adds	r3, r3, r7
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e013      	b.n	8005aba <UART_SetConfig+0x246>
 8005a92:	231b      	movs	r3, #27
 8005a94:	2220      	movs	r2, #32
 8005a96:	189b      	adds	r3, r3, r2
 8005a98:	19db      	adds	r3, r3, r7
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e00c      	b.n	8005aba <UART_SetConfig+0x246>
 8005aa0:	231b      	movs	r3, #27
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	189b      	adds	r3, r3, r2
 8005aa6:	19db      	adds	r3, r3, r7
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e005      	b.n	8005aba <UART_SetConfig+0x246>
 8005aae:	231b      	movs	r3, #27
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	189b      	adds	r3, r3, r2
 8005ab4:	19db      	adds	r3, r3, r7
 8005ab6:	2210      	movs	r2, #16
 8005ab8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a2b      	ldr	r2, [pc, #172]	; (8005b6c <UART_SetConfig+0x2f8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d000      	beq.n	8005ac6 <UART_SetConfig+0x252>
 8005ac4:	e0a9      	b.n	8005c1a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ac6:	231b      	movs	r3, #27
 8005ac8:	2220      	movs	r2, #32
 8005aca:	189b      	adds	r3, r3, r2
 8005acc:	19db      	adds	r3, r3, r7
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d015      	beq.n	8005b00 <UART_SetConfig+0x28c>
 8005ad4:	dc18      	bgt.n	8005b08 <UART_SetConfig+0x294>
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d00d      	beq.n	8005af6 <UART_SetConfig+0x282>
 8005ada:	dc15      	bgt.n	8005b08 <UART_SetConfig+0x294>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <UART_SetConfig+0x272>
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d005      	beq.n	8005af0 <UART_SetConfig+0x27c>
 8005ae4:	e010      	b.n	8005b08 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae6:	f7fd ff27 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8005aea:	0003      	movs	r3, r0
 8005aec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005aee:	e014      	b.n	8005b1a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af0:	4b25      	ldr	r3, [pc, #148]	; (8005b88 <UART_SetConfig+0x314>)
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005af4:	e011      	b.n	8005b1a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af6:	f7fd fe93 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8005afa:	0003      	movs	r3, r0
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005afe:	e00c      	b.n	8005b1a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b06:	e008      	b.n	8005b1a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b0c:	231a      	movs	r3, #26
 8005b0e:	2220      	movs	r2, #32
 8005b10:	189b      	adds	r3, r3, r2
 8005b12:	19db      	adds	r3, r3, r7
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
        break;
 8005b18:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d100      	bne.n	8005b22 <UART_SetConfig+0x2ae>
 8005b20:	e14b      	b.n	8005dba <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b26:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <UART_SetConfig+0x318>)
 8005b28:	0052      	lsls	r2, r2, #1
 8005b2a:	5ad3      	ldrh	r3, [r2, r3]
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b30:	f7fa fafa 	bl	8000128 <__udivsi3>
 8005b34:	0003      	movs	r3, r0
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	0013      	movs	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	189b      	adds	r3, r3, r2
 8005b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d305      	bcc.n	8005b54 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d91d      	bls.n	8005b90 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005b54:	231a      	movs	r3, #26
 8005b56:	2220      	movs	r2, #32
 8005b58:	189b      	adds	r3, r3, r2
 8005b5a:	19db      	adds	r3, r3, r7
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	e12b      	b.n	8005dba <UART_SetConfig+0x546>
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	cfff69f3 	.word	0xcfff69f3
 8005b68:	ffffcfff 	.word	0xffffcfff
 8005b6c:	40008000 	.word	0x40008000
 8005b70:	11fff4ff 	.word	0x11fff4ff
 8005b74:	40013800 	.word	0x40013800
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	40004400 	.word	0x40004400
 8005b80:	40004800 	.word	0x40004800
 8005b84:	40004c00 	.word	0x40004c00
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	080075b8 	.word	0x080075b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	2300      	movs	r3, #0
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9c:	4b92      	ldr	r3, [pc, #584]	; (8005de8 <UART_SetConfig+0x574>)
 8005b9e:	0052      	lsls	r2, r2, #1
 8005ba0:	5ad3      	ldrh	r3, [r2, r3]
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	69b8      	ldr	r0, [r7, #24]
 8005bae:	69f9      	ldr	r1, [r7, #28]
 8005bb0:	f7fa fc30 	bl	8000414 <__aeabi_uldivmod>
 8005bb4:	0002      	movs	r2, r0
 8005bb6:	000b      	movs	r3, r1
 8005bb8:	0e11      	lsrs	r1, r2, #24
 8005bba:	021d      	lsls	r5, r3, #8
 8005bbc:	430d      	orrs	r5, r1
 8005bbe:	0214      	lsls	r4, r2, #8
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68b8      	ldr	r0, [r7, #8]
 8005bce:	68f9      	ldr	r1, [r7, #12]
 8005bd0:	1900      	adds	r0, r0, r4
 8005bd2:	4169      	adcs	r1, r5
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f7fa fc17 	bl	8000414 <__aeabi_uldivmod>
 8005be6:	0002      	movs	r2, r0
 8005be8:	000b      	movs	r3, r1
 8005bea:	0013      	movs	r3, r2
 8005bec:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf0:	23c0      	movs	r3, #192	; 0xc0
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d309      	bcc.n	8005c0c <UART_SetConfig+0x398>
 8005bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	035b      	lsls	r3, r3, #13
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d204      	bcs.n	8005c0c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	e0d6      	b.n	8005dba <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005c0c:	231a      	movs	r3, #26
 8005c0e:	2220      	movs	r2, #32
 8005c10:	189b      	adds	r3, r3, r2
 8005c12:	19db      	adds	r3, r3, r7
 8005c14:	2201      	movs	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	e0cf      	b.n	8005dba <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	021b      	lsls	r3, r3, #8
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d000      	beq.n	8005c28 <UART_SetConfig+0x3b4>
 8005c26:	e070      	b.n	8005d0a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005c28:	231b      	movs	r3, #27
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	189b      	adds	r3, r3, r2
 8005c2e:	19db      	adds	r3, r3, r7
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d015      	beq.n	8005c62 <UART_SetConfig+0x3ee>
 8005c36:	dc18      	bgt.n	8005c6a <UART_SetConfig+0x3f6>
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d00d      	beq.n	8005c58 <UART_SetConfig+0x3e4>
 8005c3c:	dc15      	bgt.n	8005c6a <UART_SetConfig+0x3f6>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <UART_SetConfig+0x3d4>
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d005      	beq.n	8005c52 <UART_SetConfig+0x3de>
 8005c46:	e010      	b.n	8005c6a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c48:	f7fd fe76 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c50:	e014      	b.n	8005c7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c52:	4b66      	ldr	r3, [pc, #408]	; (8005dec <UART_SetConfig+0x578>)
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c56:	e011      	b.n	8005c7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c58:	f7fd fde2 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8005c5c:	0003      	movs	r3, r0
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c60:	e00c      	b.n	8005c7c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c62:	2380      	movs	r3, #128	; 0x80
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c68:	e008      	b.n	8005c7c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005c6e:	231a      	movs	r3, #26
 8005c70:	2220      	movs	r2, #32
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	19db      	adds	r3, r3, r7
 8005c76:	2201      	movs	r2, #1
 8005c78:	701a      	strb	r2, [r3, #0]
        break;
 8005c7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d100      	bne.n	8005c84 <UART_SetConfig+0x410>
 8005c82:	e09a      	b.n	8005dba <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c88:	4b57      	ldr	r3, [pc, #348]	; (8005de8 <UART_SetConfig+0x574>)
 8005c8a:	0052      	lsls	r2, r2, #1
 8005c8c:	5ad3      	ldrh	r3, [r2, r3]
 8005c8e:	0019      	movs	r1, r3
 8005c90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c92:	f7fa fa49 	bl	8000128 <__udivsi3>
 8005c96:	0003      	movs	r3, r0
 8005c98:	005a      	lsls	r2, r3, #1
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	18d2      	adds	r2, r2, r3
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	0010      	movs	r0, r2
 8005caa:	f7fa fa3d 	bl	8000128 <__udivsi3>
 8005cae:	0003      	movs	r3, r0
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	2b0f      	cmp	r3, #15
 8005cb6:	d921      	bls.n	8005cfc <UART_SetConfig+0x488>
 8005cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cba:	2380      	movs	r3, #128	; 0x80
 8005cbc:	025b      	lsls	r3, r3, #9
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d21c      	bcs.n	8005cfc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	200e      	movs	r0, #14
 8005cc8:	2420      	movs	r4, #32
 8005cca:	1903      	adds	r3, r0, r4
 8005ccc:	19db      	adds	r3, r3, r7
 8005cce:	210f      	movs	r1, #15
 8005cd0:	438a      	bics	r2, r1
 8005cd2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2207      	movs	r2, #7
 8005cdc:	4013      	ands	r3, r2
 8005cde:	b299      	uxth	r1, r3
 8005ce0:	1903      	adds	r3, r0, r4
 8005ce2:	19db      	adds	r3, r3, r7
 8005ce4:	1902      	adds	r2, r0, r4
 8005ce6:	19d2      	adds	r2, r2, r7
 8005ce8:	8812      	ldrh	r2, [r2, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	1902      	adds	r2, r0, r4
 8005cf4:	19d2      	adds	r2, r2, r7
 8005cf6:	8812      	ldrh	r2, [r2, #0]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e05e      	b.n	8005dba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005cfc:	231a      	movs	r3, #26
 8005cfe:	2220      	movs	r2, #32
 8005d00:	189b      	adds	r3, r3, r2
 8005d02:	19db      	adds	r3, r3, r7
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	e057      	b.n	8005dba <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d0a:	231b      	movs	r3, #27
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	189b      	adds	r3, r3, r2
 8005d10:	19db      	adds	r3, r3, r7
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d015      	beq.n	8005d44 <UART_SetConfig+0x4d0>
 8005d18:	dc18      	bgt.n	8005d4c <UART_SetConfig+0x4d8>
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d00d      	beq.n	8005d3a <UART_SetConfig+0x4c6>
 8005d1e:	dc15      	bgt.n	8005d4c <UART_SetConfig+0x4d8>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <UART_SetConfig+0x4b6>
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d005      	beq.n	8005d34 <UART_SetConfig+0x4c0>
 8005d28:	e010      	b.n	8005d4c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2a:	f7fd fe05 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8005d2e:	0003      	movs	r3, r0
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d32:	e014      	b.n	8005d5e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d34:	4b2d      	ldr	r3, [pc, #180]	; (8005dec <UART_SetConfig+0x578>)
 8005d36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d38:	e011      	b.n	8005d5e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d3a:	f7fd fd71 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8005d3e:	0003      	movs	r3, r0
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d42:	e00c      	b.n	8005d5e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d44:	2380      	movs	r3, #128	; 0x80
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d4a:	e008      	b.n	8005d5e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005d50:	231a      	movs	r3, #26
 8005d52:	2220      	movs	r2, #32
 8005d54:	189b      	adds	r3, r3, r2
 8005d56:	19db      	adds	r3, r3, r7
 8005d58:	2201      	movs	r2, #1
 8005d5a:	701a      	strb	r2, [r3, #0]
        break;
 8005d5c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02a      	beq.n	8005dba <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d68:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <UART_SetConfig+0x574>)
 8005d6a:	0052      	lsls	r2, r2, #1
 8005d6c:	5ad3      	ldrh	r3, [r2, r3]
 8005d6e:	0019      	movs	r1, r3
 8005d70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d72:	f7fa f9d9 	bl	8000128 <__udivsi3>
 8005d76:	0003      	movs	r3, r0
 8005d78:	001a      	movs	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	18d2      	adds	r2, r2, r3
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	0019      	movs	r1, r3
 8005d88:	0010      	movs	r0, r2
 8005d8a:	f7fa f9cd 	bl	8000128 <__udivsi3>
 8005d8e:	0003      	movs	r3, r0
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	2b0f      	cmp	r3, #15
 8005d96:	d90a      	bls.n	8005dae <UART_SetConfig+0x53a>
 8005d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9a:	2380      	movs	r3, #128	; 0x80
 8005d9c:	025b      	lsls	r3, r3, #9
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d205      	bcs.n	8005dae <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60da      	str	r2, [r3, #12]
 8005dac:	e005      	b.n	8005dba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005dae:	231a      	movs	r3, #26
 8005db0:	2220      	movs	r2, #32
 8005db2:	189b      	adds	r3, r3, r2
 8005db4:	19db      	adds	r3, r3, r7
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	226a      	movs	r2, #106	; 0x6a
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	2268      	movs	r2, #104	; 0x68
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	2200      	movs	r2, #0
 8005dce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005dd6:	231a      	movs	r3, #26
 8005dd8:	2220      	movs	r2, #32
 8005dda:	189b      	adds	r3, r3, r2
 8005ddc:	19db      	adds	r3, r3, r7
 8005dde:	781b      	ldrb	r3, [r3, #0]
}
 8005de0:	0018      	movs	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b010      	add	sp, #64	; 0x40
 8005de6:	bdb0      	pop	{r4, r5, r7, pc}
 8005de8:	080075b8 	.word	0x080075b8
 8005dec:	00f42400 	.word	0x00f42400

08005df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d00b      	beq.n	8005e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4a4a      	ldr	r2, [pc, #296]	; (8005f34 <UART_AdvFeatureConfig+0x144>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	2201      	movs	r2, #1
 8005e20:	4013      	ands	r3, r2
 8005e22:	d00b      	beq.n	8005e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4a43      	ldr	r2, [pc, #268]	; (8005f38 <UART_AdvFeatureConfig+0x148>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	0019      	movs	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	2202      	movs	r2, #2
 8005e42:	4013      	ands	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4a3b      	ldr	r2, [pc, #236]	; (8005f3c <UART_AdvFeatureConfig+0x14c>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	0019      	movs	r1, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	2204      	movs	r2, #4
 8005e64:	4013      	ands	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4a34      	ldr	r2, [pc, #208]	; (8005f40 <UART_AdvFeatureConfig+0x150>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	0019      	movs	r1, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	2210      	movs	r2, #16
 8005e86:	4013      	ands	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	4a2c      	ldr	r2, [pc, #176]	; (8005f44 <UART_AdvFeatureConfig+0x154>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	0019      	movs	r1, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	4a25      	ldr	r2, [pc, #148]	; (8005f48 <UART_AdvFeatureConfig+0x158>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	0019      	movs	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	2240      	movs	r2, #64	; 0x40
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d01d      	beq.n	8005f0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4a1d      	ldr	r2, [pc, #116]	; (8005f4c <UART_AdvFeatureConfig+0x15c>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	0019      	movs	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eea:	2380      	movs	r3, #128	; 0x80
 8005eec:	035b      	lsls	r3, r3, #13
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d10b      	bne.n	8005f0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <UART_AdvFeatureConfig+0x160>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	0019      	movs	r1, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	2280      	movs	r2, #128	; 0x80
 8005f10:	4013      	ands	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4a0e      	ldr	r2, [pc, #56]	; (8005f54 <UART_AdvFeatureConfig+0x164>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	0019      	movs	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }
}
 8005f2c:	46c0      	nop			; (mov r8, r8)
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b002      	add	sp, #8
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	ffff7fff 	.word	0xffff7fff
 8005f38:	fffdffff 	.word	0xfffdffff
 8005f3c:	fffeffff 	.word	0xfffeffff
 8005f40:	fffbffff 	.word	0xfffbffff
 8005f44:	ffffefff 	.word	0xffffefff
 8005f48:	ffffdfff 	.word	0xffffdfff
 8005f4c:	ffefffff 	.word	0xffefffff
 8005f50:	ff9fffff 	.word	0xff9fffff
 8005f54:	fff7ffff 	.word	0xfff7ffff

08005f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b092      	sub	sp, #72	; 0x48
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2290      	movs	r2, #144	; 0x90
 8005f64:	2100      	movs	r1, #0
 8005f66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f68:	f7fb fb20 	bl	80015ac <HAL_GetTick>
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2208      	movs	r2, #8
 8005f78:	4013      	ands	r3, r2
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d12d      	bne.n	8005fda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f80:	2280      	movs	r2, #128	; 0x80
 8005f82:	0391      	lsls	r1, r2, #14
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	4a47      	ldr	r2, [pc, #284]	; (80060a4 <UART_CheckIdleState+0x14c>)
 8005f88:	9200      	str	r2, [sp, #0]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f000 f88e 	bl	80060ac <UART_WaitOnFlagUntilTimeout>
 8005f90:	1e03      	subs	r3, r0, #0
 8005f92:	d022      	beq.n	8005fda <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f94:	f3ef 8310 	mrs	r3, PRIMASK
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	f383 8810 	msr	PRIMASK, r3
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	438a      	bics	r2, r1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	f383 8810 	msr	PRIMASK, r3
}
 8005fc4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2288      	movs	r2, #136	; 0x88
 8005fca:	2120      	movs	r1, #32
 8005fcc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2284      	movs	r2, #132	; 0x84
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e060      	b.n	800609c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d146      	bne.n	8006076 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fea:	2280      	movs	r2, #128	; 0x80
 8005fec:	03d1      	lsls	r1, r2, #15
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4a2c      	ldr	r2, [pc, #176]	; (80060a4 <UART_CheckIdleState+0x14c>)
 8005ff2:	9200      	str	r2, [sp, #0]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f000 f859 	bl	80060ac <UART_WaitOnFlagUntilTimeout>
 8005ffa:	1e03      	subs	r3, r0, #0
 8005ffc:	d03b      	beq.n	8006076 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8006002:	60fb      	str	r3, [r7, #12]
  return(result);
 8006004:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006006:	637b      	str	r3, [r7, #52]	; 0x34
 8006008:	2301      	movs	r3, #1
 800600a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f383 8810 	msr	PRIMASK, r3
}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4922      	ldr	r1, [pc, #136]	; (80060a8 <UART_CheckIdleState+0x150>)
 8006020:	400a      	ands	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006026:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f383 8810 	msr	PRIMASK, r3
}
 800602e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006030:	f3ef 8310 	mrs	r3, PRIMASK
 8006034:	61bb      	str	r3, [r7, #24]
  return(result);
 8006036:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	633b      	str	r3, [r7, #48]	; 0x30
 800603a:	2301      	movs	r3, #1
 800603c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f383 8810 	msr	PRIMASK, r3
}
 8006044:	46c0      	nop			; (mov r8, r8)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2101      	movs	r1, #1
 8006052:	438a      	bics	r2, r1
 8006054:	609a      	str	r2, [r3, #8]
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	f383 8810 	msr	PRIMASK, r3
}
 8006060:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	228c      	movs	r2, #140	; 0x8c
 8006066:	2120      	movs	r1, #32
 8006068:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2284      	movs	r2, #132	; 0x84
 800606e:	2100      	movs	r1, #0
 8006070:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e012      	b.n	800609c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2288      	movs	r2, #136	; 0x88
 800607a:	2120      	movs	r1, #32
 800607c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	228c      	movs	r2, #140	; 0x8c
 8006082:	2120      	movs	r1, #32
 8006084:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2284      	movs	r2, #132	; 0x84
 8006096:	2100      	movs	r1, #0
 8006098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	0018      	movs	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	b010      	add	sp, #64	; 0x40
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	01ffffff 	.word	0x01ffffff
 80060a8:	fffffedf 	.word	0xfffffedf

080060ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	1dfb      	adds	r3, r7, #7
 80060ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060bc:	e051      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	3301      	adds	r3, #1
 80060c2:	d04e      	beq.n	8006162 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c4:	f7fb fa72 	bl	80015ac <HAL_GetTick>
 80060c8:	0002      	movs	r2, r0
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d302      	bcc.n	80060da <UART_WaitOnFlagUntilTimeout+0x2e>
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e051      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2204      	movs	r2, #4
 80060e6:	4013      	ands	r3, r2
 80060e8:	d03b      	beq.n	8006162 <UART_WaitOnFlagUntilTimeout+0xb6>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d038      	beq.n	8006162 <UART_WaitOnFlagUntilTimeout+0xb6>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d035      	beq.n	8006162 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	2208      	movs	r2, #8
 80060fe:	4013      	ands	r3, r2
 8006100:	2b08      	cmp	r3, #8
 8006102:	d111      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2208      	movs	r2, #8
 800610a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	0018      	movs	r0, r3
 8006110:	f000 f83c 	bl	800618c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2290      	movs	r2, #144	; 0x90
 8006118:	2108      	movs	r1, #8
 800611a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2284      	movs	r2, #132	; 0x84
 8006120:	2100      	movs	r1, #0
 8006122:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e02c      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69da      	ldr	r2, [r3, #28]
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	401a      	ands	r2, r3
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	429a      	cmp	r2, r3
 800613a:	d112      	bne.n	8006162 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2280      	movs	r2, #128	; 0x80
 8006142:	0112      	lsls	r2, r2, #4
 8006144:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	0018      	movs	r0, r3
 800614a:	f000 f81f 	bl	800618c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2290      	movs	r2, #144	; 0x90
 8006152:	2120      	movs	r1, #32
 8006154:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2284      	movs	r2, #132	; 0x84
 800615a:	2100      	movs	r1, #0
 800615c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e00f      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	4013      	ands	r3, r2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	425a      	negs	r2, r3
 8006172:	4153      	adcs	r3, r2
 8006174:	b2db      	uxtb	r3, r3
 8006176:	001a      	movs	r2, r3
 8006178:	1dfb      	adds	r3, r7, #7
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d09e      	beq.n	80060be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	0018      	movs	r0, r3
 8006184:	46bd      	mov	sp, r7
 8006186:	b004      	add	sp, #16
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08e      	sub	sp, #56	; 0x38
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006194:	f3ef 8310 	mrs	r3, PRIMASK
 8006198:	617b      	str	r3, [r7, #20]
  return(result);
 800619a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
 800619e:	2301      	movs	r3, #1
 80061a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	f383 8810 	msr	PRIMASK, r3
}
 80061a8:	46c0      	nop			; (mov r8, r8)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4926      	ldr	r1, [pc, #152]	; (8006250 <UART_EndRxTransfer+0xc4>)
 80061b6:	400a      	ands	r2, r1
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f383 8810 	msr	PRIMASK, r3
}
 80061c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c6:	f3ef 8310 	mrs	r3, PRIMASK
 80061ca:	623b      	str	r3, [r7, #32]
  return(result);
 80061cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061ce:	633b      	str	r3, [r7, #48]	; 0x30
 80061d0:	2301      	movs	r3, #1
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	f383 8810 	msr	PRIMASK, r3
}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	491b      	ldr	r1, [pc, #108]	; (8006254 <UART_EndRxTransfer+0xc8>)
 80061e8:	400a      	ands	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	f383 8810 	msr	PRIMASK, r3
}
 80061f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d118      	bne.n	8006232 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006200:	f3ef 8310 	mrs	r3, PRIMASK
 8006204:	60bb      	str	r3, [r7, #8]
  return(result);
 8006206:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800620a:	2301      	movs	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f383 8810 	msr	PRIMASK, r3
}
 8006214:	46c0      	nop			; (mov r8, r8)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2110      	movs	r1, #16
 8006222:	438a      	bics	r2, r1
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f383 8810 	msr	PRIMASK, r3
}
 8006230:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	228c      	movs	r2, #140	; 0x8c
 8006236:	2120      	movs	r1, #32
 8006238:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	46bd      	mov	sp, r7
 800624a:	b00e      	add	sp, #56	; 0x38
 800624c:	bd80      	pop	{r7, pc}
 800624e:	46c0      	nop			; (mov r8, r8)
 8006250:	fffffedf 	.word	0xfffffedf
 8006254:	effffffe 	.word	0xeffffffe

08006258 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	225e      	movs	r2, #94	; 0x5e
 800626a:	2100      	movs	r1, #0
 800626c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2256      	movs	r2, #86	; 0x56
 8006272:	2100      	movs	r1, #0
 8006274:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	0018      	movs	r0, r3
 800627a:	f7ff fae7 	bl	800584c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	46bd      	mov	sp, r7
 8006282:	b004      	add	sp, #16
 8006284:	bd80      	pop	{r7, pc}

08006286 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b086      	sub	sp, #24
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628e:	f3ef 8310 	mrs	r3, PRIMASK
 8006292:	60bb      	str	r3, [r7, #8]
  return(result);
 8006294:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	2301      	movs	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f383 8810 	msr	PRIMASK, r3
}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2140      	movs	r1, #64	; 0x40
 80062b0:	438a      	bics	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f383 8810 	msr	PRIMASK, r3
}
 80062be:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2288      	movs	r2, #136	; 0x88
 80062c4:	2120      	movs	r1, #32
 80062c6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7ff fab3 	bl	800583c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	46bd      	mov	sp, r7
 80062da:	b006      	add	sp, #24
 80062dc:	bd80      	pop	{r7, pc}

080062de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b002      	add	sp, #8
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b002      	add	sp, #8
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	46bd      	mov	sp, r7
 800630a:	b002      	add	sp, #8
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2284      	movs	r2, #132	; 0x84
 800631c:	5c9b      	ldrb	r3, [r3, r2]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_UARTEx_DisableFifoMode+0x16>
 8006322:	2302      	movs	r3, #2
 8006324:	e027      	b.n	8006376 <HAL_UARTEx_DisableFifoMode+0x66>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2284      	movs	r2, #132	; 0x84
 800632a:	2101      	movs	r1, #1
 800632c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2288      	movs	r2, #136	; 0x88
 8006332:	2124      	movs	r1, #36	; 0x24
 8006334:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2101      	movs	r1, #1
 800634a:	438a      	bics	r2, r1
 800634c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4a0b      	ldr	r2, [pc, #44]	; (8006380 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006352:	4013      	ands	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2288      	movs	r2, #136	; 0x88
 8006368:	2120      	movs	r1, #32
 800636a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2284      	movs	r2, #132	; 0x84
 8006370:	2100      	movs	r1, #0
 8006372:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b004      	add	sp, #16
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	dfffffff 	.word	0xdfffffff

08006384 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2284      	movs	r2, #132	; 0x84
 8006392:	5c9b      	ldrb	r3, [r3, r2]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006398:	2302      	movs	r3, #2
 800639a:	e02e      	b.n	80063fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2284      	movs	r2, #132	; 0x84
 80063a0:	2101      	movs	r1, #1
 80063a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2288      	movs	r2, #136	; 0x88
 80063a8:	2124      	movs	r1, #36	; 0x24
 80063aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2101      	movs	r1, #1
 80063c0:	438a      	bics	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	08d9      	lsrs	r1, r3, #3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	0018      	movs	r0, r3
 80063dc:	f000 f854 	bl	8006488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2288      	movs	r2, #136	; 0x88
 80063ec:	2120      	movs	r1, #32
 80063ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2284      	movs	r2, #132	; 0x84
 80063f4:	2100      	movs	r1, #0
 80063f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	0018      	movs	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b004      	add	sp, #16
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2284      	movs	r2, #132	; 0x84
 8006412:	5c9b      	ldrb	r3, [r3, r2]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006418:	2302      	movs	r3, #2
 800641a:	e02f      	b.n	800647c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2284      	movs	r2, #132	; 0x84
 8006420:	2101      	movs	r1, #1
 8006422:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2288      	movs	r2, #136	; 0x88
 8006428:	2124      	movs	r1, #36	; 0x24
 800642a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2101      	movs	r1, #1
 8006440:	438a      	bics	r2, r1
 8006442:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	4a0e      	ldr	r2, [pc, #56]	; (8006484 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800644c:	4013      	ands	r3, r2
 800644e:	0019      	movs	r1, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	0018      	movs	r0, r3
 800645e:	f000 f813 	bl	8006488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2288      	movs	r2, #136	; 0x88
 800646e:	2120      	movs	r1, #32
 8006470:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2284      	movs	r2, #132	; 0x84
 8006476:	2100      	movs	r1, #0
 8006478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	0018      	movs	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	b004      	add	sp, #16
 8006482:	bd80      	pop	{r7, pc}
 8006484:	f1ffffff 	.word	0xf1ffffff

08006488 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006494:	2b00      	cmp	r3, #0
 8006496:	d108      	bne.n	80064aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	226a      	movs	r2, #106	; 0x6a
 800649c:	2101      	movs	r1, #1
 800649e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2268      	movs	r2, #104	; 0x68
 80064a4:	2101      	movs	r1, #1
 80064a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064a8:	e043      	b.n	8006532 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064aa:	260f      	movs	r6, #15
 80064ac:	19bb      	adds	r3, r7, r6
 80064ae:	2208      	movs	r2, #8
 80064b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064b2:	200e      	movs	r0, #14
 80064b4:	183b      	adds	r3, r7, r0
 80064b6:	2208      	movs	r2, #8
 80064b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	0e5b      	lsrs	r3, r3, #25
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	240d      	movs	r4, #13
 80064c6:	193b      	adds	r3, r7, r4
 80064c8:	2107      	movs	r1, #7
 80064ca:	400a      	ands	r2, r1
 80064cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	0f5b      	lsrs	r3, r3, #29
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	250c      	movs	r5, #12
 80064da:	197b      	adds	r3, r7, r5
 80064dc:	2107      	movs	r1, #7
 80064de:	400a      	ands	r2, r1
 80064e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064e2:	183b      	adds	r3, r7, r0
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	197a      	adds	r2, r7, r5
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	4914      	ldr	r1, [pc, #80]	; (800653c <UARTEx_SetNbDataToProcess+0xb4>)
 80064ec:	5c8a      	ldrb	r2, [r1, r2]
 80064ee:	435a      	muls	r2, r3
 80064f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80064f2:	197b      	adds	r3, r7, r5
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	4a12      	ldr	r2, [pc, #72]	; (8006540 <UARTEx_SetNbDataToProcess+0xb8>)
 80064f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064fa:	0019      	movs	r1, r3
 80064fc:	f7f9 fe9e 	bl	800023c <__divsi3>
 8006500:	0003      	movs	r3, r0
 8006502:	b299      	uxth	r1, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	226a      	movs	r2, #106	; 0x6a
 8006508:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800650a:	19bb      	adds	r3, r7, r6
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	193a      	adds	r2, r7, r4
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	490a      	ldr	r1, [pc, #40]	; (800653c <UARTEx_SetNbDataToProcess+0xb4>)
 8006514:	5c8a      	ldrb	r2, [r1, r2]
 8006516:	435a      	muls	r2, r3
 8006518:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800651a:	193b      	adds	r3, r7, r4
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	4a08      	ldr	r2, [pc, #32]	; (8006540 <UARTEx_SetNbDataToProcess+0xb8>)
 8006520:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006522:	0019      	movs	r1, r3
 8006524:	f7f9 fe8a 	bl	800023c <__divsi3>
 8006528:	0003      	movs	r3, r0
 800652a:	b299      	uxth	r1, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2268      	movs	r2, #104	; 0x68
 8006530:	5299      	strh	r1, [r3, r2]
}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	46bd      	mov	sp, r7
 8006536:	b005      	add	sp, #20
 8006538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	080075d0 	.word	0x080075d0
 8006540:	080075d8 	.word	0x080075d8

08006544 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b087      	sub	sp, #28
 8006548:	af02      	add	r7, sp, #8
 800654a:	0002      	movs	r2, r0
 800654c:	1dfb      	adds	r3, r7, #7
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	1dbb      	adds	r3, r7, #6
 8006552:	1c0a      	adds	r2, r1, #0
 8006554:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8006556:	1dfb      	adds	r3, r7, #7
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	4a16      	ldr	r2, [pc, #88]	; (80065b4 <I2C_LCD_ExpanderWrite+0x70>)
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	18d3      	adds	r3, r2, r3
 8006560:	3301      	adds	r3, #1
 8006562:	781a      	ldrb	r2, [r3, #0]
 8006564:	1dbb      	adds	r3, r7, #6
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	4313      	orrs	r3, r2
 800656a:	b2da      	uxtb	r2, r3
 800656c:	240f      	movs	r4, #15
 800656e:	193b      	adds	r3, r7, r4
 8006570:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8006572:	1dfb      	adds	r3, r7, #7
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	4910      	ldr	r1, [pc, #64]	; (80065b8 <I2C_LCD_ExpanderWrite+0x74>)
 8006578:	0013      	movs	r3, r2
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	189b      	adds	r3, r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	18cb      	adds	r3, r1, r3
 8006582:	3304      	adds	r3, #4
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	1dfb      	adds	r3, r7, #7
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	490b      	ldr	r1, [pc, #44]	; (80065b8 <I2C_LCD_ExpanderWrite+0x74>)
 800658c:	0013      	movs	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	189b      	adds	r3, r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	18cb      	adds	r3, r1, r3
 8006596:	3308      	adds	r3, #8
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	18db      	adds	r3, r3, r3
 800659e:	b299      	uxth	r1, r3
 80065a0:	193a      	adds	r2, r7, r4
 80065a2:	2364      	movs	r3, #100	; 0x64
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	2301      	movs	r3, #1
 80065a8:	f7fc f8cc 	bl	8002744 <HAL_I2C_Master_Transmit>
}
 80065ac:	46c0      	nop			; (mov r8, r8)
 80065ae:	46bd      	mov	sp, r7
 80065b0:	b005      	add	sp, #20
 80065b2:	bd90      	pop	{r4, r7, pc}
 80065b4:	20000318 	.word	0x20000318
 80065b8:	080075e0 	.word	0x080075e0

080065bc <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80065bc:	b590      	push	{r4, r7, lr}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	0002      	movs	r2, r0
 80065c4:	1dfb      	adds	r3, r7, #7
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	1dbb      	adds	r3, r7, #6
 80065ca:	1c0a      	adds	r2, r1, #0
 80065cc:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 80065ce:	1dbb      	adds	r3, r7, #6
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2204      	movs	r2, #4
 80065d4:	4313      	orrs	r3, r2
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	1dfb      	adds	r3, r7, #7
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	0011      	movs	r1, r2
 80065de:	0018      	movs	r0, r3
 80065e0:	f7ff ffb0 	bl	8006544 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 80065e4:	4b25      	ldr	r3, [pc, #148]	; (800667c <I2C_LCD_EnPulse+0xc0>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	4b25      	ldr	r3, [pc, #148]	; (8006680 <I2C_LCD_EnPulse+0xc4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4925      	ldr	r1, [pc, #148]	; (8006684 <I2C_LCD_EnPulse+0xc8>)
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7f9 fd99 	bl	8000128 <__udivsi3>
 80065f6:	0003      	movs	r3, r0
 80065f8:	005c      	lsls	r4, r3, #1
 80065fa:	4b21      	ldr	r3, [pc, #132]	; (8006680 <I2C_LCD_EnPulse+0xc4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4921      	ldr	r1, [pc, #132]	; (8006684 <I2C_LCD_EnPulse+0xc8>)
 8006600:	0018      	movs	r0, r3
 8006602:	f7f9 fd91 	bl	8000128 <__udivsi3>
 8006606:	0003      	movs	r3, r0
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	1ae3      	subs	r3, r4, r3
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	4b1b      	ldr	r3, [pc, #108]	; (800667c <I2C_LCD_EnPulse+0xc0>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	429a      	cmp	r2, r3
 800661a:	d8f8      	bhi.n	800660e <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800661c:	1dbb      	adds	r3, r7, #6
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2204      	movs	r2, #4
 8006622:	4393      	bics	r3, r2
 8006624:	b2da      	uxtb	r2, r3
 8006626:	1dfb      	adds	r3, r7, #7
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	0011      	movs	r1, r2
 800662c:	0018      	movs	r0, r3
 800662e:	f7ff ff89 	bl	8006544 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8006632:	4b12      	ldr	r3, [pc, #72]	; (800667c <I2C_LCD_EnPulse+0xc0>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	4b11      	ldr	r3, [pc, #68]	; (8006680 <I2C_LCD_EnPulse+0xc4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4911      	ldr	r1, [pc, #68]	; (8006684 <I2C_LCD_EnPulse+0xc8>)
 800663e:	0018      	movs	r0, r3
 8006640:	f7f9 fd72 	bl	8000128 <__udivsi3>
 8006644:	0003      	movs	r3, r0
 8006646:	001a      	movs	r2, r3
 8006648:	2332      	movs	r3, #50	; 0x32
 800664a:	4353      	muls	r3, r2
 800664c:	001c      	movs	r4, r3
 800664e:	4b0c      	ldr	r3, [pc, #48]	; (8006680 <I2C_LCD_EnPulse+0xc4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	490c      	ldr	r1, [pc, #48]	; (8006684 <I2C_LCD_EnPulse+0xc8>)
 8006654:	0018      	movs	r0, r3
 8006656:	f7f9 fd67 	bl	8000128 <__udivsi3>
 800665a:	0003      	movs	r3, r0
 800665c:	085b      	lsrs	r3, r3, #1
 800665e:	1ae3      	subs	r3, r4, r3
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	4b06      	ldr	r3, [pc, #24]	; (800667c <I2C_LCD_EnPulse+0xc0>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	429a      	cmp	r2, r3
 800666e:	d8f8      	bhi.n	8006662 <I2C_LCD_EnPulse+0xa6>
}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	46bd      	mov	sp, r7
 8006676:	b007      	add	sp, #28
 8006678:	bd90      	pop	{r4, r7, pc}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	e000e010 	.word	0xe000e010
 8006680:	20000000 	.word	0x20000000
 8006684:	000f4240 	.word	0x000f4240

08006688 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	0002      	movs	r2, r0
 8006690:	1dfb      	adds	r3, r7, #7
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	1dbb      	adds	r3, r7, #6
 8006696:	1c0a      	adds	r2, r1, #0
 8006698:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 800669a:	1dbb      	adds	r3, r7, #6
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	1dfb      	adds	r3, r7, #7
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	0011      	movs	r1, r2
 80066a4:	0018      	movs	r0, r3
 80066a6:	f7ff ff4d 	bl	8006544 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 80066aa:	1dbb      	adds	r3, r7, #6
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	1dfb      	adds	r3, r7, #7
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	0011      	movs	r1, r2
 80066b4:	0018      	movs	r0, r3
 80066b6:	f7ff ff81 	bl	80065bc <I2C_LCD_EnPulse>
}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	46bd      	mov	sp, r7
 80066be:	b002      	add	sp, #8
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 80066c2:	b590      	push	{r4, r7, lr}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	0004      	movs	r4, r0
 80066ca:	0008      	movs	r0, r1
 80066cc:	0011      	movs	r1, r2
 80066ce:	1dfb      	adds	r3, r7, #7
 80066d0:	1c22      	adds	r2, r4, #0
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	1dbb      	adds	r3, r7, #6
 80066d6:	1c02      	adds	r2, r0, #0
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	1d7b      	adds	r3, r7, #5
 80066dc:	1c0a      	adds	r2, r1, #0
 80066de:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 80066e0:	200f      	movs	r0, #15
 80066e2:	183b      	adds	r3, r7, r0
 80066e4:	1dba      	adds	r2, r7, #6
 80066e6:	7812      	ldrb	r2, [r2, #0]
 80066e8:	210f      	movs	r1, #15
 80066ea:	438a      	bics	r2, r1
 80066ec:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 80066ee:	1dbb      	adds	r3, r7, #6
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	011a      	lsls	r2, r3, #4
 80066f4:	240e      	movs	r4, #14
 80066f6:	193b      	adds	r3, r7, r4
 80066f8:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 80066fa:	183a      	adds	r2, r7, r0
 80066fc:	1d7b      	adds	r3, r7, #5
 80066fe:	7812      	ldrb	r2, [r2, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	4313      	orrs	r3, r2
 8006704:	b2da      	uxtb	r2, r3
 8006706:	1dfb      	adds	r3, r7, #7
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	0011      	movs	r1, r2
 800670c:	0018      	movs	r0, r3
 800670e:	f7ff ffbb 	bl	8006688 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8006712:	193a      	adds	r2, r7, r4
 8006714:	1d7b      	adds	r3, r7, #5
 8006716:	7812      	ldrb	r2, [r2, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	4313      	orrs	r3, r2
 800671c:	b2da      	uxtb	r2, r3
 800671e:	1dfb      	adds	r3, r7, #7
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	0011      	movs	r1, r2
 8006724:	0018      	movs	r0, r3
 8006726:	f7ff ffaf 	bl	8006688 <I2C_LCD_Write4Bits>
}
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	46bd      	mov	sp, r7
 800672e:	b005      	add	sp, #20
 8006730:	bd90      	pop	{r4, r7, pc}

08006732 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	0002      	movs	r2, r0
 800673a:	1dfb      	adds	r3, r7, #7
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	1dbb      	adds	r3, r7, #6
 8006740:	1c0a      	adds	r2, r1, #0
 8006742:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8006744:	1dbb      	adds	r3, r7, #6
 8006746:	7819      	ldrb	r1, [r3, #0]
 8006748:	1dfb      	adds	r3, r7, #7
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2200      	movs	r2, #0
 800674e:	0018      	movs	r0, r3
 8006750:	f7ff ffb7 	bl	80066c2 <I2C_LCD_Send>
}
 8006754:	46c0      	nop			; (mov r8, r8)
 8006756:	46bd      	mov	sp, r7
 8006758:	b002      	add	sp, #8
 800675a:	bd80      	pop	{r7, pc}

0800675c <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	0002      	movs	r2, r0
 8006764:	1dfb      	adds	r3, r7, #7
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	1dbb      	adds	r3, r7, #6
 800676a:	1c0a      	adds	r2, r1, #0
 800676c:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 800676e:	1dbb      	adds	r3, r7, #6
 8006770:	7819      	ldrb	r1, [r3, #0]
 8006772:	1dfb      	adds	r3, r7, #7
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2201      	movs	r2, #1
 8006778:	0018      	movs	r0, r3
 800677a:	f7ff ffa2 	bl	80066c2 <I2C_LCD_Send>
}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	46bd      	mov	sp, r7
 8006782:	b002      	add	sp, #8
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8006788:	b590      	push	{r4, r7, lr}
 800678a:	b08b      	sub	sp, #44	; 0x2c
 800678c:	af00      	add	r7, sp, #0
 800678e:	0002      	movs	r2, r0
 8006790:	1dfb      	adds	r3, r7, #7
 8006792:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8006794:	46c0      	nop			; (mov r8, r8)
 8006796:	f7fa ff09 	bl	80015ac <HAL_GetTick>
 800679a:	0003      	movs	r3, r0
 800679c:	2b31      	cmp	r3, #49	; 0x31
 800679e:	d9fa      	bls.n	8006796 <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80067a0:	1dfb      	adds	r3, r7, #7
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2130      	movs	r1, #48	; 0x30
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7ff ffc3 	bl	8006732 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80067ac:	2300      	movs	r3, #0
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
 80067b0:	e025      	b.n	80067fe <I2C_LCD_Init+0x76>
 80067b2:	4b57      	ldr	r3, [pc, #348]	; (8006910 <I2C_LCD_Init+0x188>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	4b56      	ldr	r3, [pc, #344]	; (8006914 <I2C_LCD_Init+0x18c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4956      	ldr	r1, [pc, #344]	; (8006918 <I2C_LCD_Init+0x190>)
 80067be:	0018      	movs	r0, r3
 80067c0:	f7f9 fcb2 	bl	8000128 <__udivsi3>
 80067c4:	0003      	movs	r3, r0
 80067c6:	001a      	movs	r2, r3
 80067c8:	0013      	movs	r3, r2
 80067ca:	015b      	lsls	r3, r3, #5
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	189b      	adds	r3, r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	001c      	movs	r4, r3
 80067d6:	4b4f      	ldr	r3, [pc, #316]	; (8006914 <I2C_LCD_Init+0x18c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	494f      	ldr	r1, [pc, #316]	; (8006918 <I2C_LCD_Init+0x190>)
 80067dc:	0018      	movs	r0, r3
 80067de:	f7f9 fca3 	bl	8000128 <__udivsi3>
 80067e2:	0003      	movs	r3, r0
 80067e4:	085b      	lsrs	r3, r3, #1
 80067e6:	1ae3      	subs	r3, r4, r3
 80067e8:	60bb      	str	r3, [r7, #8]
 80067ea:	4b49      	ldr	r3, [pc, #292]	; (8006910 <I2C_LCD_Init+0x188>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d8f8      	bhi.n	80067ea <I2C_LCD_Init+0x62>
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	3301      	adds	r3, #1
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	2b04      	cmp	r3, #4
 8006802:	d9d6      	bls.n	80067b2 <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8006804:	1dfb      	adds	r3, r7, #7
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2130      	movs	r1, #48	; 0x30
 800680a:	0018      	movs	r0, r3
 800680c:	f7ff ff91 	bl	8006732 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8006810:	2300      	movs	r3, #0
 8006812:	623b      	str	r3, [r7, #32]
 8006814:	e025      	b.n	8006862 <I2C_LCD_Init+0xda>
 8006816:	4b3e      	ldr	r3, [pc, #248]	; (8006910 <I2C_LCD_Init+0x188>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	4b3d      	ldr	r3, [pc, #244]	; (8006914 <I2C_LCD_Init+0x18c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	493d      	ldr	r1, [pc, #244]	; (8006918 <I2C_LCD_Init+0x190>)
 8006822:	0018      	movs	r0, r3
 8006824:	f7f9 fc80 	bl	8000128 <__udivsi3>
 8006828:	0003      	movs	r3, r0
 800682a:	001a      	movs	r2, r3
 800682c:	0013      	movs	r3, r2
 800682e:	015b      	lsls	r3, r3, #5
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	189b      	adds	r3, r3, r2
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	001c      	movs	r4, r3
 800683a:	4b36      	ldr	r3, [pc, #216]	; (8006914 <I2C_LCD_Init+0x18c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4936      	ldr	r1, [pc, #216]	; (8006918 <I2C_LCD_Init+0x190>)
 8006840:	0018      	movs	r0, r3
 8006842:	f7f9 fc71 	bl	8000128 <__udivsi3>
 8006846:	0003      	movs	r3, r0
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	1ae3      	subs	r3, r4, r3
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	4b30      	ldr	r3, [pc, #192]	; (8006910 <I2C_LCD_Init+0x188>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	429a      	cmp	r2, r3
 800685a:	d8f8      	bhi.n	800684e <I2C_LCD_Init+0xc6>
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	3301      	adds	r3, #1
 8006860:	623b      	str	r3, [r7, #32]
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	2b04      	cmp	r3, #4
 8006866:	d9d6      	bls.n	8006816 <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8006868:	1dfb      	adds	r3, r7, #7
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2130      	movs	r1, #48	; 0x30
 800686e:	0018      	movs	r0, r3
 8006870:	f7ff ff5f 	bl	8006732 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8006874:	4b26      	ldr	r3, [pc, #152]	; (8006910 <I2C_LCD_Init+0x188>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	61fb      	str	r3, [r7, #28]
 800687a:	4b26      	ldr	r3, [pc, #152]	; (8006914 <I2C_LCD_Init+0x18c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4926      	ldr	r1, [pc, #152]	; (8006918 <I2C_LCD_Init+0x190>)
 8006880:	0018      	movs	r0, r3
 8006882:	f7f9 fc51 	bl	8000128 <__udivsi3>
 8006886:	0003      	movs	r3, r0
 8006888:	001a      	movs	r2, r3
 800688a:	2396      	movs	r3, #150	; 0x96
 800688c:	4353      	muls	r3, r2
 800688e:	001c      	movs	r4, r3
 8006890:	4b20      	ldr	r3, [pc, #128]	; (8006914 <I2C_LCD_Init+0x18c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4920      	ldr	r1, [pc, #128]	; (8006918 <I2C_LCD_Init+0x190>)
 8006896:	0018      	movs	r0, r3
 8006898:	f7f9 fc46 	bl	8000128 <__udivsi3>
 800689c:	0003      	movs	r3, r0
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	1ae3      	subs	r3, r4, r3
 80068a2:	61bb      	str	r3, [r7, #24]
 80068a4:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <I2C_LCD_Init+0x188>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	69fa      	ldr	r2, [r7, #28]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d8f8      	bhi.n	80068a4 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80068b2:	1dfb      	adds	r3, r7, #7
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2102      	movs	r1, #2
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7ff ff3a 	bl	8006732 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80068be:	1dfb      	adds	r3, r7, #7
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2128      	movs	r1, #40	; 0x28
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7ff ff34 	bl	8006732 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80068ca:	1dfb      	adds	r3, r7, #7
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	210c      	movs	r1, #12
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7ff ff2e 	bl	8006732 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80068d6:	1dfb      	adds	r3, r7, #7
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2106      	movs	r1, #6
 80068dc:	0018      	movs	r0, r3
 80068de:	f7ff ff28 	bl	8006732 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80068e2:	1dfb      	adds	r3, r7, #7
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	4b0d      	ldr	r3, [pc, #52]	; (800691c <I2C_LCD_Init+0x194>)
 80068e8:	0052      	lsls	r2, r2, #1
 80068ea:	2104      	movs	r1, #4
 80068ec:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80068ee:	1dfb      	adds	r3, r7, #7
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	4a0a      	ldr	r2, [pc, #40]	; (800691c <I2C_LCD_Init+0x194>)
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	18d3      	adds	r3, r2, r3
 80068f8:	3301      	adds	r3, #1
 80068fa:	2208      	movs	r2, #8
 80068fc:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80068fe:	1dfb      	adds	r3, r7, #7
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	0018      	movs	r0, r3
 8006904:	f000 f80c 	bl	8006920 <I2C_LCD_Clear>
}
 8006908:	46c0      	nop			; (mov r8, r8)
 800690a:	46bd      	mov	sp, r7
 800690c:	b00b      	add	sp, #44	; 0x2c
 800690e:	bd90      	pop	{r4, r7, pc}
 8006910:	e000e010 	.word	0xe000e010
 8006914:	20000000 	.word	0x20000000
 8006918:	000f4240 	.word	0x000f4240
 800691c:	20000318 	.word	0x20000318

08006920 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	0002      	movs	r2, r0
 8006928:	1dfb      	adds	r3, r7, #7
 800692a:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800692c:	1dfb      	adds	r3, r7, #7
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2101      	movs	r1, #1
 8006932:	0018      	movs	r0, r3
 8006934:	f7ff fefd 	bl	8006732 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	e025      	b.n	800698a <I2C_LCD_Clear+0x6a>
 800693e:	4b17      	ldr	r3, [pc, #92]	; (800699c <I2C_LCD_Clear+0x7c>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	613b      	str	r3, [r7, #16]
 8006944:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <I2C_LCD_Clear+0x80>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4916      	ldr	r1, [pc, #88]	; (80069a4 <I2C_LCD_Clear+0x84>)
 800694a:	0018      	movs	r0, r3
 800694c:	f7f9 fbec 	bl	8000128 <__udivsi3>
 8006950:	0003      	movs	r3, r0
 8006952:	001a      	movs	r2, r3
 8006954:	0013      	movs	r3, r2
 8006956:	015b      	lsls	r3, r3, #5
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	189b      	adds	r3, r3, r2
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	001c      	movs	r4, r3
 8006962:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <I2C_LCD_Clear+0x80>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	490f      	ldr	r1, [pc, #60]	; (80069a4 <I2C_LCD_Clear+0x84>)
 8006968:	0018      	movs	r0, r3
 800696a:	f7f9 fbdd 	bl	8000128 <__udivsi3>
 800696e:	0003      	movs	r3, r0
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	1ae3      	subs	r3, r4, r3
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	4b09      	ldr	r3, [pc, #36]	; (800699c <I2C_LCD_Clear+0x7c>)
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	429a      	cmp	r2, r3
 8006982:	d8f8      	bhi.n	8006976 <I2C_LCD_Clear+0x56>
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	3301      	adds	r3, #1
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d9d6      	bls.n	800693e <I2C_LCD_Clear+0x1e>
}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	46bd      	mov	sp, r7
 8006996:	b007      	add	sp, #28
 8006998:	bd90      	pop	{r4, r7, pc}
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	e000e010 	.word	0xe000e010
 80069a0:	20000000 	.word	0x20000000
 80069a4:	000f4240 	.word	0x000f4240

080069a8 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	0004      	movs	r4, r0
 80069b0:	0008      	movs	r0, r1
 80069b2:	0011      	movs	r1, r2
 80069b4:	1dfb      	adds	r3, r7, #7
 80069b6:	1c22      	adds	r2, r4, #0
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	1dbb      	adds	r3, r7, #6
 80069bc:	1c02      	adds	r2, r0, #0
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	1d7b      	adds	r3, r7, #5
 80069c2:	1c0a      	adds	r2, r1, #0
 80069c4:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80069c6:	2308      	movs	r3, #8
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	4a1d      	ldr	r2, [pc, #116]	; (8006a40 <I2C_LCD_SetCursor+0x98>)
 80069cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80069ce:	c313      	stmia	r3!, {r0, r1, r4}
 80069d0:	6812      	ldr	r2, [r2, #0]
 80069d2:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 80069d4:	1dfb      	adds	r3, r7, #7
 80069d6:	781a      	ldrb	r2, [r3, #0]
 80069d8:	491a      	ldr	r1, [pc, #104]	; (8006a44 <I2C_LCD_SetCursor+0x9c>)
 80069da:	0013      	movs	r3, r2
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	189b      	adds	r3, r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	18cb      	adds	r3, r1, r3
 80069e4:	330a      	adds	r3, #10
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	1d7a      	adds	r2, r7, #5
 80069ea:	7812      	ldrb	r2, [r2, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d90c      	bls.n	8006a0a <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 80069f0:	1dfb      	adds	r3, r7, #7
 80069f2:	781a      	ldrb	r2, [r3, #0]
 80069f4:	4913      	ldr	r1, [pc, #76]	; (8006a44 <I2C_LCD_SetCursor+0x9c>)
 80069f6:	0013      	movs	r3, r2
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	189b      	adds	r3, r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	18cb      	adds	r3, r1, r3
 8006a00:	330a      	adds	r3, #10
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	1d7b      	adds	r3, r7, #5
 8006a06:	3a01      	subs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8006a0a:	1d7b      	adds	r3, r7, #5
 8006a0c:	781a      	ldrb	r2, [r3, #0]
 8006a0e:	2308      	movs	r3, #8
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	0092      	lsls	r2, r2, #2
 8006a14:	58d3      	ldr	r3, [r2, r3]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	1dbb      	adds	r3, r7, #6
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	18d3      	adds	r3, r2, r3
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	b25b      	sxtb	r3, r3
 8006a22:	2280      	movs	r2, #128	; 0x80
 8006a24:	4252      	negs	r2, r2
 8006a26:	4313      	orrs	r3, r2
 8006a28:	b25b      	sxtb	r3, r3
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	1dfb      	adds	r3, r7, #7
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	0011      	movs	r1, r2
 8006a32:	0018      	movs	r0, r3
 8006a34:	f7ff fe7d 	bl	8006732 <I2C_LCD_Cmd>
}
 8006a38:	46c0      	nop			; (mov r8, r8)
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b007      	add	sp, #28
 8006a3e:	bd90      	pop	{r4, r7, pc}
 8006a40:	080074f4 	.word	0x080074f4
 8006a44:	080075e0 	.word	0x080075e0

08006a48 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	0002      	movs	r2, r0
 8006a50:	6039      	str	r1, [r7, #0]
 8006a52:	1dfb      	adds	r3, r7, #7
 8006a54:	701a      	strb	r2, [r3, #0]
    while (*Str)
 8006a56:	e009      	b.n	8006a6c <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	603a      	str	r2, [r7, #0]
 8006a5e:	781a      	ldrb	r2, [r3, #0]
 8006a60:	1dfb      	adds	r3, r7, #7
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	0011      	movs	r1, r2
 8006a66:	0018      	movs	r0, r3
 8006a68:	f7ff fe78 	bl	800675c <I2C_LCD_Data>
    while (*Str)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f1      	bne.n	8006a58 <I2C_LCD_WriteString+0x10>
    }
}
 8006a74:	46c0      	nop			; (mov r8, r8)
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	b002      	add	sp, #8
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <siprintf>:
 8006a80:	b40e      	push	{r1, r2, r3}
 8006a82:	b500      	push	{lr}
 8006a84:	490b      	ldr	r1, [pc, #44]	; (8006ab4 <siprintf+0x34>)
 8006a86:	b09c      	sub	sp, #112	; 0x70
 8006a88:	ab1d      	add	r3, sp, #116	; 0x74
 8006a8a:	9002      	str	r0, [sp, #8]
 8006a8c:	9006      	str	r0, [sp, #24]
 8006a8e:	9107      	str	r1, [sp, #28]
 8006a90:	9104      	str	r1, [sp, #16]
 8006a92:	4809      	ldr	r0, [pc, #36]	; (8006ab8 <siprintf+0x38>)
 8006a94:	4909      	ldr	r1, [pc, #36]	; (8006abc <siprintf+0x3c>)
 8006a96:	cb04      	ldmia	r3!, {r2}
 8006a98:	9105      	str	r1, [sp, #20]
 8006a9a:	6800      	ldr	r0, [r0, #0]
 8006a9c:	a902      	add	r1, sp, #8
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	f000 f9a2 	bl	8006de8 <_svfiprintf_r>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	9b02      	ldr	r3, [sp, #8]
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	b01c      	add	sp, #112	; 0x70
 8006aac:	bc08      	pop	{r3}
 8006aae:	b003      	add	sp, #12
 8006ab0:	4718      	bx	r3
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	7fffffff 	.word	0x7fffffff
 8006ab8:	20000058 	.word	0x20000058
 8006abc:	ffff0208 	.word	0xffff0208

08006ac0 <memset>:
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	1882      	adds	r2, r0, r2
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d100      	bne.n	8006aca <memset+0xa>
 8006ac8:	4770      	bx	lr
 8006aca:	7019      	strb	r1, [r3, #0]
 8006acc:	3301      	adds	r3, #1
 8006ace:	e7f9      	b.n	8006ac4 <memset+0x4>

08006ad0 <__errno>:
 8006ad0:	4b01      	ldr	r3, [pc, #4]	; (8006ad8 <__errno+0x8>)
 8006ad2:	6818      	ldr	r0, [r3, #0]
 8006ad4:	4770      	bx	lr
 8006ad6:	46c0      	nop			; (mov r8, r8)
 8006ad8:	20000058 	.word	0x20000058

08006adc <__libc_init_array>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	2600      	movs	r6, #0
 8006ae0:	4c0c      	ldr	r4, [pc, #48]	; (8006b14 <__libc_init_array+0x38>)
 8006ae2:	4d0d      	ldr	r5, [pc, #52]	; (8006b18 <__libc_init_array+0x3c>)
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	42a6      	cmp	r6, r4
 8006aea:	d109      	bne.n	8006b00 <__libc_init_array+0x24>
 8006aec:	2600      	movs	r6, #0
 8006aee:	f000 fc6d 	bl	80073cc <_init>
 8006af2:	4c0a      	ldr	r4, [pc, #40]	; (8006b1c <__libc_init_array+0x40>)
 8006af4:	4d0a      	ldr	r5, [pc, #40]	; (8006b20 <__libc_init_array+0x44>)
 8006af6:	1b64      	subs	r4, r4, r5
 8006af8:	10a4      	asrs	r4, r4, #2
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	d105      	bne.n	8006b0a <__libc_init_array+0x2e>
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	00b3      	lsls	r3, r6, #2
 8006b02:	58eb      	ldr	r3, [r5, r3]
 8006b04:	4798      	blx	r3
 8006b06:	3601      	adds	r6, #1
 8006b08:	e7ee      	b.n	8006ae8 <__libc_init_array+0xc>
 8006b0a:	00b3      	lsls	r3, r6, #2
 8006b0c:	58eb      	ldr	r3, [r5, r3]
 8006b0e:	4798      	blx	r3
 8006b10:	3601      	adds	r6, #1
 8006b12:	e7f2      	b.n	8006afa <__libc_init_array+0x1e>
 8006b14:	08007628 	.word	0x08007628
 8006b18:	08007628 	.word	0x08007628
 8006b1c:	0800762c 	.word	0x0800762c
 8006b20:	08007628 	.word	0x08007628

08006b24 <__retarget_lock_acquire_recursive>:
 8006b24:	4770      	bx	lr

08006b26 <__retarget_lock_release_recursive>:
 8006b26:	4770      	bx	lr

08006b28 <_free_r>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	0005      	movs	r5, r0
 8006b2c:	2900      	cmp	r1, #0
 8006b2e:	d010      	beq.n	8006b52 <_free_r+0x2a>
 8006b30:	1f0c      	subs	r4, r1, #4
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	da00      	bge.n	8006b3a <_free_r+0x12>
 8006b38:	18e4      	adds	r4, r4, r3
 8006b3a:	0028      	movs	r0, r5
 8006b3c:	f000 f8e2 	bl	8006d04 <__malloc_lock>
 8006b40:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <_free_r+0x90>)
 8006b42:	6813      	ldr	r3, [r2, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d105      	bne.n	8006b54 <_free_r+0x2c>
 8006b48:	6063      	str	r3, [r4, #4]
 8006b4a:	6014      	str	r4, [r2, #0]
 8006b4c:	0028      	movs	r0, r5
 8006b4e:	f000 f8e1 	bl	8006d14 <__malloc_unlock>
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	d908      	bls.n	8006b6a <_free_r+0x42>
 8006b58:	6820      	ldr	r0, [r4, #0]
 8006b5a:	1821      	adds	r1, r4, r0
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	d1f3      	bne.n	8006b48 <_free_r+0x20>
 8006b60:	6819      	ldr	r1, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	1809      	adds	r1, r1, r0
 8006b66:	6021      	str	r1, [r4, #0]
 8006b68:	e7ee      	b.n	8006b48 <_free_r+0x20>
 8006b6a:	001a      	movs	r2, r3
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <_free_r+0x4e>
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	d9f9      	bls.n	8006b6a <_free_r+0x42>
 8006b76:	6811      	ldr	r1, [r2, #0]
 8006b78:	1850      	adds	r0, r2, r1
 8006b7a:	42a0      	cmp	r0, r4
 8006b7c:	d10b      	bne.n	8006b96 <_free_r+0x6e>
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	1809      	adds	r1, r1, r0
 8006b82:	1850      	adds	r0, r2, r1
 8006b84:	6011      	str	r1, [r2, #0]
 8006b86:	4283      	cmp	r3, r0
 8006b88:	d1e0      	bne.n	8006b4c <_free_r+0x24>
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	1841      	adds	r1, r0, r1
 8006b90:	6011      	str	r1, [r2, #0]
 8006b92:	6053      	str	r3, [r2, #4]
 8006b94:	e7da      	b.n	8006b4c <_free_r+0x24>
 8006b96:	42a0      	cmp	r0, r4
 8006b98:	d902      	bls.n	8006ba0 <_free_r+0x78>
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	e7d5      	b.n	8006b4c <_free_r+0x24>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	1821      	adds	r1, r4, r0
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	d103      	bne.n	8006bb0 <_free_r+0x88>
 8006ba8:	6819      	ldr	r1, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	1809      	adds	r1, r1, r0
 8006bae:	6021      	str	r1, [r4, #0]
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	6054      	str	r4, [r2, #4]
 8006bb4:	e7ca      	b.n	8006b4c <_free_r+0x24>
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	2000045c 	.word	0x2000045c

08006bbc <sbrk_aligned>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4e0f      	ldr	r6, [pc, #60]	; (8006bfc <sbrk_aligned+0x40>)
 8006bc0:	000d      	movs	r5, r1
 8006bc2:	6831      	ldr	r1, [r6, #0]
 8006bc4:	0004      	movs	r4, r0
 8006bc6:	2900      	cmp	r1, #0
 8006bc8:	d102      	bne.n	8006bd0 <sbrk_aligned+0x14>
 8006bca:	f000 fba1 	bl	8007310 <_sbrk_r>
 8006bce:	6030      	str	r0, [r6, #0]
 8006bd0:	0029      	movs	r1, r5
 8006bd2:	0020      	movs	r0, r4
 8006bd4:	f000 fb9c 	bl	8007310 <_sbrk_r>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d00a      	beq.n	8006bf2 <sbrk_aligned+0x36>
 8006bdc:	2303      	movs	r3, #3
 8006bde:	1cc5      	adds	r5, r0, #3
 8006be0:	439d      	bics	r5, r3
 8006be2:	42a8      	cmp	r0, r5
 8006be4:	d007      	beq.n	8006bf6 <sbrk_aligned+0x3a>
 8006be6:	1a29      	subs	r1, r5, r0
 8006be8:	0020      	movs	r0, r4
 8006bea:	f000 fb91 	bl	8007310 <_sbrk_r>
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d101      	bne.n	8006bf6 <sbrk_aligned+0x3a>
 8006bf2:	2501      	movs	r5, #1
 8006bf4:	426d      	negs	r5, r5
 8006bf6:	0028      	movs	r0, r5
 8006bf8:	bd70      	pop	{r4, r5, r6, pc}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	20000460 	.word	0x20000460

08006c00 <_malloc_r>:
 8006c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c02:	2203      	movs	r2, #3
 8006c04:	1ccb      	adds	r3, r1, #3
 8006c06:	4393      	bics	r3, r2
 8006c08:	3308      	adds	r3, #8
 8006c0a:	0006      	movs	r6, r0
 8006c0c:	001f      	movs	r7, r3
 8006c0e:	2b0c      	cmp	r3, #12
 8006c10:	d238      	bcs.n	8006c84 <_malloc_r+0x84>
 8006c12:	270c      	movs	r7, #12
 8006c14:	42b9      	cmp	r1, r7
 8006c16:	d837      	bhi.n	8006c88 <_malloc_r+0x88>
 8006c18:	0030      	movs	r0, r6
 8006c1a:	f000 f873 	bl	8006d04 <__malloc_lock>
 8006c1e:	4b38      	ldr	r3, [pc, #224]	; (8006d00 <_malloc_r+0x100>)
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	001c      	movs	r4, r3
 8006c26:	2c00      	cmp	r4, #0
 8006c28:	d133      	bne.n	8006c92 <_malloc_r+0x92>
 8006c2a:	0039      	movs	r1, r7
 8006c2c:	0030      	movs	r0, r6
 8006c2e:	f7ff ffc5 	bl	8006bbc <sbrk_aligned>
 8006c32:	0004      	movs	r4, r0
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d15e      	bne.n	8006cf6 <_malloc_r+0xf6>
 8006c38:	9b00      	ldr	r3, [sp, #0]
 8006c3a:	681c      	ldr	r4, [r3, #0]
 8006c3c:	0025      	movs	r5, r4
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	d14e      	bne.n	8006ce0 <_malloc_r+0xe0>
 8006c42:	2c00      	cmp	r4, #0
 8006c44:	d051      	beq.n	8006cea <_malloc_r+0xea>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	0029      	movs	r1, r5
 8006c4a:	18e3      	adds	r3, r4, r3
 8006c4c:	0030      	movs	r0, r6
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	f000 fb5e 	bl	8007310 <_sbrk_r>
 8006c54:	9b01      	ldr	r3, [sp, #4]
 8006c56:	4283      	cmp	r3, r0
 8006c58:	d147      	bne.n	8006cea <_malloc_r+0xea>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	0030      	movs	r0, r6
 8006c5e:	1aff      	subs	r7, r7, r3
 8006c60:	0039      	movs	r1, r7
 8006c62:	f7ff ffab 	bl	8006bbc <sbrk_aligned>
 8006c66:	3001      	adds	r0, #1
 8006c68:	d03f      	beq.n	8006cea <_malloc_r+0xea>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	19db      	adds	r3, r3, r7
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	9b00      	ldr	r3, [sp, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d040      	beq.n	8006cfa <_malloc_r+0xfa>
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	42a2      	cmp	r2, r4
 8006c7c:	d133      	bne.n	8006ce6 <_malloc_r+0xe6>
 8006c7e:	2200      	movs	r2, #0
 8006c80:	605a      	str	r2, [r3, #4]
 8006c82:	e014      	b.n	8006cae <_malloc_r+0xae>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	dac5      	bge.n	8006c14 <_malloc_r+0x14>
 8006c88:	230c      	movs	r3, #12
 8006c8a:	2500      	movs	r5, #0
 8006c8c:	6033      	str	r3, [r6, #0]
 8006c8e:	0028      	movs	r0, r5
 8006c90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c92:	6821      	ldr	r1, [r4, #0]
 8006c94:	1bc9      	subs	r1, r1, r7
 8006c96:	d420      	bmi.n	8006cda <_malloc_r+0xda>
 8006c98:	290b      	cmp	r1, #11
 8006c9a:	d918      	bls.n	8006cce <_malloc_r+0xce>
 8006c9c:	19e2      	adds	r2, r4, r7
 8006c9e:	6027      	str	r7, [r4, #0]
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d112      	bne.n	8006cca <_malloc_r+0xca>
 8006ca4:	9b00      	ldr	r3, [sp, #0]
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	6863      	ldr	r3, [r4, #4]
 8006caa:	6011      	str	r1, [r2, #0]
 8006cac:	6053      	str	r3, [r2, #4]
 8006cae:	0030      	movs	r0, r6
 8006cb0:	0025      	movs	r5, r4
 8006cb2:	f000 f82f 	bl	8006d14 <__malloc_unlock>
 8006cb6:	2207      	movs	r2, #7
 8006cb8:	350b      	adds	r5, #11
 8006cba:	1d23      	adds	r3, r4, #4
 8006cbc:	4395      	bics	r5, r2
 8006cbe:	1aea      	subs	r2, r5, r3
 8006cc0:	429d      	cmp	r5, r3
 8006cc2:	d0e4      	beq.n	8006c8e <_malloc_r+0x8e>
 8006cc4:	1b5b      	subs	r3, r3, r5
 8006cc6:	50a3      	str	r3, [r4, r2]
 8006cc8:	e7e1      	b.n	8006c8e <_malloc_r+0x8e>
 8006cca:	605a      	str	r2, [r3, #4]
 8006ccc:	e7ec      	b.n	8006ca8 <_malloc_r+0xa8>
 8006cce:	6862      	ldr	r2, [r4, #4]
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	d1d5      	bne.n	8006c80 <_malloc_r+0x80>
 8006cd4:	9b00      	ldr	r3, [sp, #0]
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	e7e9      	b.n	8006cae <_malloc_r+0xae>
 8006cda:	0023      	movs	r3, r4
 8006cdc:	6864      	ldr	r4, [r4, #4]
 8006cde:	e7a2      	b.n	8006c26 <_malloc_r+0x26>
 8006ce0:	002c      	movs	r4, r5
 8006ce2:	686d      	ldr	r5, [r5, #4]
 8006ce4:	e7ab      	b.n	8006c3e <_malloc_r+0x3e>
 8006ce6:	0013      	movs	r3, r2
 8006ce8:	e7c4      	b.n	8006c74 <_malloc_r+0x74>
 8006cea:	230c      	movs	r3, #12
 8006cec:	0030      	movs	r0, r6
 8006cee:	6033      	str	r3, [r6, #0]
 8006cf0:	f000 f810 	bl	8006d14 <__malloc_unlock>
 8006cf4:	e7cb      	b.n	8006c8e <_malloc_r+0x8e>
 8006cf6:	6027      	str	r7, [r4, #0]
 8006cf8:	e7d9      	b.n	8006cae <_malloc_r+0xae>
 8006cfa:	605b      	str	r3, [r3, #4]
 8006cfc:	deff      	udf	#255	; 0xff
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	2000045c 	.word	0x2000045c

08006d04 <__malloc_lock>:
 8006d04:	b510      	push	{r4, lr}
 8006d06:	4802      	ldr	r0, [pc, #8]	; (8006d10 <__malloc_lock+0xc>)
 8006d08:	f7ff ff0c 	bl	8006b24 <__retarget_lock_acquire_recursive>
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	20000458 	.word	0x20000458

08006d14 <__malloc_unlock>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	4802      	ldr	r0, [pc, #8]	; (8006d20 <__malloc_unlock+0xc>)
 8006d18:	f7ff ff05 	bl	8006b26 <__retarget_lock_release_recursive>
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	20000458 	.word	0x20000458

08006d24 <__ssputs_r>:
 8006d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d26:	b085      	sub	sp, #20
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	9203      	str	r2, [sp, #12]
 8006d2c:	688e      	ldr	r6, [r1, #8]
 8006d2e:	9a01      	ldr	r2, [sp, #4]
 8006d30:	0007      	movs	r7, r0
 8006d32:	000c      	movs	r4, r1
 8006d34:	680b      	ldr	r3, [r1, #0]
 8006d36:	4296      	cmp	r6, r2
 8006d38:	d831      	bhi.n	8006d9e <__ssputs_r+0x7a>
 8006d3a:	898a      	ldrh	r2, [r1, #12]
 8006d3c:	2190      	movs	r1, #144	; 0x90
 8006d3e:	00c9      	lsls	r1, r1, #3
 8006d40:	420a      	tst	r2, r1
 8006d42:	d029      	beq.n	8006d98 <__ssputs_r+0x74>
 8006d44:	2003      	movs	r0, #3
 8006d46:	6921      	ldr	r1, [r4, #16]
 8006d48:	1a5b      	subs	r3, r3, r1
 8006d4a:	9302      	str	r3, [sp, #8]
 8006d4c:	6963      	ldr	r3, [r4, #20]
 8006d4e:	4343      	muls	r3, r0
 8006d50:	0fdd      	lsrs	r5, r3, #31
 8006d52:	18ed      	adds	r5, r5, r3
 8006d54:	9b01      	ldr	r3, [sp, #4]
 8006d56:	9802      	ldr	r0, [sp, #8]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	181b      	adds	r3, r3, r0
 8006d5c:	106d      	asrs	r5, r5, #1
 8006d5e:	42ab      	cmp	r3, r5
 8006d60:	d900      	bls.n	8006d64 <__ssputs_r+0x40>
 8006d62:	001d      	movs	r5, r3
 8006d64:	0552      	lsls	r2, r2, #21
 8006d66:	d529      	bpl.n	8006dbc <__ssputs_r+0x98>
 8006d68:	0029      	movs	r1, r5
 8006d6a:	0038      	movs	r0, r7
 8006d6c:	f7ff ff48 	bl	8006c00 <_malloc_r>
 8006d70:	1e06      	subs	r6, r0, #0
 8006d72:	d02d      	beq.n	8006dd0 <__ssputs_r+0xac>
 8006d74:	9a02      	ldr	r2, [sp, #8]
 8006d76:	6921      	ldr	r1, [r4, #16]
 8006d78:	f000 fae7 	bl	800734a <memcpy>
 8006d7c:	89a2      	ldrh	r2, [r4, #12]
 8006d7e:	4b19      	ldr	r3, [pc, #100]	; (8006de4 <__ssputs_r+0xc0>)
 8006d80:	401a      	ands	r2, r3
 8006d82:	2380      	movs	r3, #128	; 0x80
 8006d84:	4313      	orrs	r3, r2
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	9b02      	ldr	r3, [sp, #8]
 8006d8a:	6126      	str	r6, [r4, #16]
 8006d8c:	18f6      	adds	r6, r6, r3
 8006d8e:	6026      	str	r6, [r4, #0]
 8006d90:	6165      	str	r5, [r4, #20]
 8006d92:	9e01      	ldr	r6, [sp, #4]
 8006d94:	1aed      	subs	r5, r5, r3
 8006d96:	60a5      	str	r5, [r4, #8]
 8006d98:	9b01      	ldr	r3, [sp, #4]
 8006d9a:	429e      	cmp	r6, r3
 8006d9c:	d900      	bls.n	8006da0 <__ssputs_r+0x7c>
 8006d9e:	9e01      	ldr	r6, [sp, #4]
 8006da0:	0032      	movs	r2, r6
 8006da2:	9903      	ldr	r1, [sp, #12]
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	f000 fa9f 	bl	80072e8 <memmove>
 8006daa:	2000      	movs	r0, #0
 8006dac:	68a3      	ldr	r3, [r4, #8]
 8006dae:	1b9b      	subs	r3, r3, r6
 8006db0:	60a3      	str	r3, [r4, #8]
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	199b      	adds	r3, r3, r6
 8006db6:	6023      	str	r3, [r4, #0]
 8006db8:	b005      	add	sp, #20
 8006dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dbc:	002a      	movs	r2, r5
 8006dbe:	0038      	movs	r0, r7
 8006dc0:	f000 facc 	bl	800735c <_realloc_r>
 8006dc4:	1e06      	subs	r6, r0, #0
 8006dc6:	d1df      	bne.n	8006d88 <__ssputs_r+0x64>
 8006dc8:	0038      	movs	r0, r7
 8006dca:	6921      	ldr	r1, [r4, #16]
 8006dcc:	f7ff feac 	bl	8006b28 <_free_r>
 8006dd0:	230c      	movs	r3, #12
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	89a2      	ldrh	r2, [r4, #12]
 8006dd8:	3334      	adds	r3, #52	; 0x34
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	81a3      	strh	r3, [r4, #12]
 8006dde:	4240      	negs	r0, r0
 8006de0:	e7ea      	b.n	8006db8 <__ssputs_r+0x94>
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	fffffb7f 	.word	0xfffffb7f

08006de8 <_svfiprintf_r>:
 8006de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dea:	b0a1      	sub	sp, #132	; 0x84
 8006dec:	9003      	str	r0, [sp, #12]
 8006dee:	001d      	movs	r5, r3
 8006df0:	898b      	ldrh	r3, [r1, #12]
 8006df2:	000f      	movs	r7, r1
 8006df4:	0016      	movs	r6, r2
 8006df6:	061b      	lsls	r3, r3, #24
 8006df8:	d511      	bpl.n	8006e1e <_svfiprintf_r+0x36>
 8006dfa:	690b      	ldr	r3, [r1, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10e      	bne.n	8006e1e <_svfiprintf_r+0x36>
 8006e00:	2140      	movs	r1, #64	; 0x40
 8006e02:	f7ff fefd 	bl	8006c00 <_malloc_r>
 8006e06:	6038      	str	r0, [r7, #0]
 8006e08:	6138      	str	r0, [r7, #16]
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d105      	bne.n	8006e1a <_svfiprintf_r+0x32>
 8006e0e:	230c      	movs	r3, #12
 8006e10:	9a03      	ldr	r2, [sp, #12]
 8006e12:	3801      	subs	r0, #1
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	b021      	add	sp, #132	; 0x84
 8006e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e1a:	2340      	movs	r3, #64	; 0x40
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	ac08      	add	r4, sp, #32
 8006e22:	6163      	str	r3, [r4, #20]
 8006e24:	3320      	adds	r3, #32
 8006e26:	7663      	strb	r3, [r4, #25]
 8006e28:	3310      	adds	r3, #16
 8006e2a:	76a3      	strb	r3, [r4, #26]
 8006e2c:	9507      	str	r5, [sp, #28]
 8006e2e:	0035      	movs	r5, r6
 8006e30:	782b      	ldrb	r3, [r5, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <_svfiprintf_r+0x52>
 8006e36:	2b25      	cmp	r3, #37	; 0x25
 8006e38:	d148      	bne.n	8006ecc <_svfiprintf_r+0xe4>
 8006e3a:	1bab      	subs	r3, r5, r6
 8006e3c:	9305      	str	r3, [sp, #20]
 8006e3e:	42b5      	cmp	r5, r6
 8006e40:	d00b      	beq.n	8006e5a <_svfiprintf_r+0x72>
 8006e42:	0032      	movs	r2, r6
 8006e44:	0039      	movs	r1, r7
 8006e46:	9803      	ldr	r0, [sp, #12]
 8006e48:	f7ff ff6c 	bl	8006d24 <__ssputs_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d100      	bne.n	8006e52 <_svfiprintf_r+0x6a>
 8006e50:	e0af      	b.n	8006fb2 <_svfiprintf_r+0x1ca>
 8006e52:	6963      	ldr	r3, [r4, #20]
 8006e54:	9a05      	ldr	r2, [sp, #20]
 8006e56:	189b      	adds	r3, r3, r2
 8006e58:	6163      	str	r3, [r4, #20]
 8006e5a:	782b      	ldrb	r3, [r5, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d100      	bne.n	8006e62 <_svfiprintf_r+0x7a>
 8006e60:	e0a7      	b.n	8006fb2 <_svfiprintf_r+0x1ca>
 8006e62:	2201      	movs	r2, #1
 8006e64:	2300      	movs	r3, #0
 8006e66:	4252      	negs	r2, r2
 8006e68:	6062      	str	r2, [r4, #4]
 8006e6a:	a904      	add	r1, sp, #16
 8006e6c:	3254      	adds	r2, #84	; 0x54
 8006e6e:	1852      	adds	r2, r2, r1
 8006e70:	1c6e      	adds	r6, r5, #1
 8006e72:	6023      	str	r3, [r4, #0]
 8006e74:	60e3      	str	r3, [r4, #12]
 8006e76:	60a3      	str	r3, [r4, #8]
 8006e78:	7013      	strb	r3, [r2, #0]
 8006e7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8006e7c:	4b55      	ldr	r3, [pc, #340]	; (8006fd4 <_svfiprintf_r+0x1ec>)
 8006e7e:	2205      	movs	r2, #5
 8006e80:	0018      	movs	r0, r3
 8006e82:	7831      	ldrb	r1, [r6, #0]
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	f000 fa55 	bl	8007334 <memchr>
 8006e8a:	1c75      	adds	r5, r6, #1
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d11f      	bne.n	8006ed0 <_svfiprintf_r+0xe8>
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	06d3      	lsls	r3, r2, #27
 8006e94:	d504      	bpl.n	8006ea0 <_svfiprintf_r+0xb8>
 8006e96:	2353      	movs	r3, #83	; 0x53
 8006e98:	a904      	add	r1, sp, #16
 8006e9a:	185b      	adds	r3, r3, r1
 8006e9c:	2120      	movs	r1, #32
 8006e9e:	7019      	strb	r1, [r3, #0]
 8006ea0:	0713      	lsls	r3, r2, #28
 8006ea2:	d504      	bpl.n	8006eae <_svfiprintf_r+0xc6>
 8006ea4:	2353      	movs	r3, #83	; 0x53
 8006ea6:	a904      	add	r1, sp, #16
 8006ea8:	185b      	adds	r3, r3, r1
 8006eaa:	212b      	movs	r1, #43	; 0x2b
 8006eac:	7019      	strb	r1, [r3, #0]
 8006eae:	7833      	ldrb	r3, [r6, #0]
 8006eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb2:	d016      	beq.n	8006ee2 <_svfiprintf_r+0xfa>
 8006eb4:	0035      	movs	r5, r6
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	200a      	movs	r0, #10
 8006eba:	68e3      	ldr	r3, [r4, #12]
 8006ebc:	782a      	ldrb	r2, [r5, #0]
 8006ebe:	1c6e      	adds	r6, r5, #1
 8006ec0:	3a30      	subs	r2, #48	; 0x30
 8006ec2:	2a09      	cmp	r2, #9
 8006ec4:	d94e      	bls.n	8006f64 <_svfiprintf_r+0x17c>
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d111      	bne.n	8006eee <_svfiprintf_r+0x106>
 8006eca:	e017      	b.n	8006efc <_svfiprintf_r+0x114>
 8006ecc:	3501      	adds	r5, #1
 8006ece:	e7af      	b.n	8006e30 <_svfiprintf_r+0x48>
 8006ed0:	9b05      	ldr	r3, [sp, #20]
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	1ac0      	subs	r0, r0, r3
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4083      	lsls	r3, r0
 8006eda:	4313      	orrs	r3, r2
 8006edc:	002e      	movs	r6, r5
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	e7cc      	b.n	8006e7c <_svfiprintf_r+0x94>
 8006ee2:	9b07      	ldr	r3, [sp, #28]
 8006ee4:	1d19      	adds	r1, r3, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	9107      	str	r1, [sp, #28]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	db01      	blt.n	8006ef2 <_svfiprintf_r+0x10a>
 8006eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ef0:	e004      	b.n	8006efc <_svfiprintf_r+0x114>
 8006ef2:	425b      	negs	r3, r3
 8006ef4:	60e3      	str	r3, [r4, #12]
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	6023      	str	r3, [r4, #0]
 8006efc:	782b      	ldrb	r3, [r5, #0]
 8006efe:	2b2e      	cmp	r3, #46	; 0x2e
 8006f00:	d10a      	bne.n	8006f18 <_svfiprintf_r+0x130>
 8006f02:	786b      	ldrb	r3, [r5, #1]
 8006f04:	2b2a      	cmp	r3, #42	; 0x2a
 8006f06:	d135      	bne.n	8006f74 <_svfiprintf_r+0x18c>
 8006f08:	9b07      	ldr	r3, [sp, #28]
 8006f0a:	3502      	adds	r5, #2
 8006f0c:	1d1a      	adds	r2, r3, #4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	9207      	str	r2, [sp, #28]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	db2b      	blt.n	8006f6e <_svfiprintf_r+0x186>
 8006f16:	9309      	str	r3, [sp, #36]	; 0x24
 8006f18:	4e2f      	ldr	r6, [pc, #188]	; (8006fd8 <_svfiprintf_r+0x1f0>)
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	0030      	movs	r0, r6
 8006f1e:	7829      	ldrb	r1, [r5, #0]
 8006f20:	f000 fa08 	bl	8007334 <memchr>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d006      	beq.n	8006f36 <_svfiprintf_r+0x14e>
 8006f28:	2340      	movs	r3, #64	; 0x40
 8006f2a:	1b80      	subs	r0, r0, r6
 8006f2c:	4083      	lsls	r3, r0
 8006f2e:	6822      	ldr	r2, [r4, #0]
 8006f30:	3501      	adds	r5, #1
 8006f32:	4313      	orrs	r3, r2
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	7829      	ldrb	r1, [r5, #0]
 8006f38:	2206      	movs	r2, #6
 8006f3a:	4828      	ldr	r0, [pc, #160]	; (8006fdc <_svfiprintf_r+0x1f4>)
 8006f3c:	1c6e      	adds	r6, r5, #1
 8006f3e:	7621      	strb	r1, [r4, #24]
 8006f40:	f000 f9f8 	bl	8007334 <memchr>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d03c      	beq.n	8006fc2 <_svfiprintf_r+0x1da>
 8006f48:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <_svfiprintf_r+0x1f8>)
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d125      	bne.n	8006f9a <_svfiprintf_r+0x1b2>
 8006f4e:	2207      	movs	r2, #7
 8006f50:	9b07      	ldr	r3, [sp, #28]
 8006f52:	3307      	adds	r3, #7
 8006f54:	4393      	bics	r3, r2
 8006f56:	3308      	adds	r3, #8
 8006f58:	9307      	str	r3, [sp, #28]
 8006f5a:	6963      	ldr	r3, [r4, #20]
 8006f5c:	9a04      	ldr	r2, [sp, #16]
 8006f5e:	189b      	adds	r3, r3, r2
 8006f60:	6163      	str	r3, [r4, #20]
 8006f62:	e764      	b.n	8006e2e <_svfiprintf_r+0x46>
 8006f64:	4343      	muls	r3, r0
 8006f66:	0035      	movs	r5, r6
 8006f68:	2101      	movs	r1, #1
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	e7a6      	b.n	8006ebc <_svfiprintf_r+0xd4>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	425b      	negs	r3, r3
 8006f72:	e7d0      	b.n	8006f16 <_svfiprintf_r+0x12e>
 8006f74:	2300      	movs	r3, #0
 8006f76:	200a      	movs	r0, #10
 8006f78:	001a      	movs	r2, r3
 8006f7a:	3501      	adds	r5, #1
 8006f7c:	6063      	str	r3, [r4, #4]
 8006f7e:	7829      	ldrb	r1, [r5, #0]
 8006f80:	1c6e      	adds	r6, r5, #1
 8006f82:	3930      	subs	r1, #48	; 0x30
 8006f84:	2909      	cmp	r1, #9
 8006f86:	d903      	bls.n	8006f90 <_svfiprintf_r+0x1a8>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0c5      	beq.n	8006f18 <_svfiprintf_r+0x130>
 8006f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f8e:	e7c3      	b.n	8006f18 <_svfiprintf_r+0x130>
 8006f90:	4342      	muls	r2, r0
 8006f92:	0035      	movs	r5, r6
 8006f94:	2301      	movs	r3, #1
 8006f96:	1852      	adds	r2, r2, r1
 8006f98:	e7f1      	b.n	8006f7e <_svfiprintf_r+0x196>
 8006f9a:	aa07      	add	r2, sp, #28
 8006f9c:	9200      	str	r2, [sp, #0]
 8006f9e:	0021      	movs	r1, r4
 8006fa0:	003a      	movs	r2, r7
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <_svfiprintf_r+0x1fc>)
 8006fa4:	9803      	ldr	r0, [sp, #12]
 8006fa6:	e000      	b.n	8006faa <_svfiprintf_r+0x1c2>
 8006fa8:	bf00      	nop
 8006faa:	9004      	str	r0, [sp, #16]
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	d1d3      	bne.n	8006f5a <_svfiprintf_r+0x172>
 8006fb2:	89bb      	ldrh	r3, [r7, #12]
 8006fb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006fb6:	065b      	lsls	r3, r3, #25
 8006fb8:	d400      	bmi.n	8006fbc <_svfiprintf_r+0x1d4>
 8006fba:	e72c      	b.n	8006e16 <_svfiprintf_r+0x2e>
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	4240      	negs	r0, r0
 8006fc0:	e729      	b.n	8006e16 <_svfiprintf_r+0x2e>
 8006fc2:	aa07      	add	r2, sp, #28
 8006fc4:	9200      	str	r2, [sp, #0]
 8006fc6:	0021      	movs	r1, r4
 8006fc8:	003a      	movs	r2, r7
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <_svfiprintf_r+0x1fc>)
 8006fcc:	9803      	ldr	r0, [sp, #12]
 8006fce:	f000 f87b 	bl	80070c8 <_printf_i>
 8006fd2:	e7ea      	b.n	8006faa <_svfiprintf_r+0x1c2>
 8006fd4:	080075ec 	.word	0x080075ec
 8006fd8:	080075f2 	.word	0x080075f2
 8006fdc:	080075f6 	.word	0x080075f6
 8006fe0:	00000000 	.word	0x00000000
 8006fe4:	08006d25 	.word	0x08006d25

08006fe8 <_printf_common>:
 8006fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fea:	0016      	movs	r6, r2
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	688a      	ldr	r2, [r1, #8]
 8006ff0:	690b      	ldr	r3, [r1, #16]
 8006ff2:	000c      	movs	r4, r1
 8006ff4:	9000      	str	r0, [sp, #0]
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	da00      	bge.n	8006ffc <_printf_common+0x14>
 8006ffa:	0013      	movs	r3, r2
 8006ffc:	0022      	movs	r2, r4
 8006ffe:	6033      	str	r3, [r6, #0]
 8007000:	3243      	adds	r2, #67	; 0x43
 8007002:	7812      	ldrb	r2, [r2, #0]
 8007004:	2a00      	cmp	r2, #0
 8007006:	d001      	beq.n	800700c <_printf_common+0x24>
 8007008:	3301      	adds	r3, #1
 800700a:	6033      	str	r3, [r6, #0]
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	069b      	lsls	r3, r3, #26
 8007010:	d502      	bpl.n	8007018 <_printf_common+0x30>
 8007012:	6833      	ldr	r3, [r6, #0]
 8007014:	3302      	adds	r3, #2
 8007016:	6033      	str	r3, [r6, #0]
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	2306      	movs	r3, #6
 800701c:	0015      	movs	r5, r2
 800701e:	401d      	ands	r5, r3
 8007020:	421a      	tst	r2, r3
 8007022:	d027      	beq.n	8007074 <_printf_common+0x8c>
 8007024:	0023      	movs	r3, r4
 8007026:	3343      	adds	r3, #67	; 0x43
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	1e5a      	subs	r2, r3, #1
 800702c:	4193      	sbcs	r3, r2
 800702e:	6822      	ldr	r2, [r4, #0]
 8007030:	0692      	lsls	r2, r2, #26
 8007032:	d430      	bmi.n	8007096 <_printf_common+0xae>
 8007034:	0022      	movs	r2, r4
 8007036:	9901      	ldr	r1, [sp, #4]
 8007038:	9800      	ldr	r0, [sp, #0]
 800703a:	9d08      	ldr	r5, [sp, #32]
 800703c:	3243      	adds	r2, #67	; 0x43
 800703e:	47a8      	blx	r5
 8007040:	3001      	adds	r0, #1
 8007042:	d025      	beq.n	8007090 <_printf_common+0xa8>
 8007044:	2206      	movs	r2, #6
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	2500      	movs	r5, #0
 800704a:	4013      	ands	r3, r2
 800704c:	2b04      	cmp	r3, #4
 800704e:	d105      	bne.n	800705c <_printf_common+0x74>
 8007050:	6833      	ldr	r3, [r6, #0]
 8007052:	68e5      	ldr	r5, [r4, #12]
 8007054:	1aed      	subs	r5, r5, r3
 8007056:	43eb      	mvns	r3, r5
 8007058:	17db      	asrs	r3, r3, #31
 800705a:	401d      	ands	r5, r3
 800705c:	68a3      	ldr	r3, [r4, #8]
 800705e:	6922      	ldr	r2, [r4, #16]
 8007060:	4293      	cmp	r3, r2
 8007062:	dd01      	ble.n	8007068 <_printf_common+0x80>
 8007064:	1a9b      	subs	r3, r3, r2
 8007066:	18ed      	adds	r5, r5, r3
 8007068:	2600      	movs	r6, #0
 800706a:	42b5      	cmp	r5, r6
 800706c:	d120      	bne.n	80070b0 <_printf_common+0xc8>
 800706e:	2000      	movs	r0, #0
 8007070:	e010      	b.n	8007094 <_printf_common+0xac>
 8007072:	3501      	adds	r5, #1
 8007074:	68e3      	ldr	r3, [r4, #12]
 8007076:	6832      	ldr	r2, [r6, #0]
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	42ab      	cmp	r3, r5
 800707c:	ddd2      	ble.n	8007024 <_printf_common+0x3c>
 800707e:	0022      	movs	r2, r4
 8007080:	2301      	movs	r3, #1
 8007082:	9901      	ldr	r1, [sp, #4]
 8007084:	9800      	ldr	r0, [sp, #0]
 8007086:	9f08      	ldr	r7, [sp, #32]
 8007088:	3219      	adds	r2, #25
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	d1f0      	bne.n	8007072 <_printf_common+0x8a>
 8007090:	2001      	movs	r0, #1
 8007092:	4240      	negs	r0, r0
 8007094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007096:	2030      	movs	r0, #48	; 0x30
 8007098:	18e1      	adds	r1, r4, r3
 800709a:	3143      	adds	r1, #67	; 0x43
 800709c:	7008      	strb	r0, [r1, #0]
 800709e:	0021      	movs	r1, r4
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	3145      	adds	r1, #69	; 0x45
 80070a4:	7809      	ldrb	r1, [r1, #0]
 80070a6:	18a2      	adds	r2, r4, r2
 80070a8:	3243      	adds	r2, #67	; 0x43
 80070aa:	3302      	adds	r3, #2
 80070ac:	7011      	strb	r1, [r2, #0]
 80070ae:	e7c1      	b.n	8007034 <_printf_common+0x4c>
 80070b0:	0022      	movs	r2, r4
 80070b2:	2301      	movs	r3, #1
 80070b4:	9901      	ldr	r1, [sp, #4]
 80070b6:	9800      	ldr	r0, [sp, #0]
 80070b8:	9f08      	ldr	r7, [sp, #32]
 80070ba:	321a      	adds	r2, #26
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	d0e6      	beq.n	8007090 <_printf_common+0xa8>
 80070c2:	3601      	adds	r6, #1
 80070c4:	e7d1      	b.n	800706a <_printf_common+0x82>
	...

080070c8 <_printf_i>:
 80070c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ca:	b08b      	sub	sp, #44	; 0x2c
 80070cc:	9206      	str	r2, [sp, #24]
 80070ce:	000a      	movs	r2, r1
 80070d0:	3243      	adds	r2, #67	; 0x43
 80070d2:	9307      	str	r3, [sp, #28]
 80070d4:	9005      	str	r0, [sp, #20]
 80070d6:	9204      	str	r2, [sp, #16]
 80070d8:	7e0a      	ldrb	r2, [r1, #24]
 80070da:	000c      	movs	r4, r1
 80070dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070de:	2a78      	cmp	r2, #120	; 0x78
 80070e0:	d809      	bhi.n	80070f6 <_printf_i+0x2e>
 80070e2:	2a62      	cmp	r2, #98	; 0x62
 80070e4:	d80b      	bhi.n	80070fe <_printf_i+0x36>
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	d100      	bne.n	80070ec <_printf_i+0x24>
 80070ea:	e0be      	b.n	800726a <_printf_i+0x1a2>
 80070ec:	497c      	ldr	r1, [pc, #496]	; (80072e0 <_printf_i+0x218>)
 80070ee:	9103      	str	r1, [sp, #12]
 80070f0:	2a58      	cmp	r2, #88	; 0x58
 80070f2:	d100      	bne.n	80070f6 <_printf_i+0x2e>
 80070f4:	e093      	b.n	800721e <_printf_i+0x156>
 80070f6:	0026      	movs	r6, r4
 80070f8:	3642      	adds	r6, #66	; 0x42
 80070fa:	7032      	strb	r2, [r6, #0]
 80070fc:	e022      	b.n	8007144 <_printf_i+0x7c>
 80070fe:	0010      	movs	r0, r2
 8007100:	3863      	subs	r0, #99	; 0x63
 8007102:	2815      	cmp	r0, #21
 8007104:	d8f7      	bhi.n	80070f6 <_printf_i+0x2e>
 8007106:	f7f9 f805 	bl	8000114 <__gnu_thumb1_case_shi>
 800710a:	0016      	.short	0x0016
 800710c:	fff6001f 	.word	0xfff6001f
 8007110:	fff6fff6 	.word	0xfff6fff6
 8007114:	001ffff6 	.word	0x001ffff6
 8007118:	fff6fff6 	.word	0xfff6fff6
 800711c:	fff6fff6 	.word	0xfff6fff6
 8007120:	003600a3 	.word	0x003600a3
 8007124:	fff60083 	.word	0xfff60083
 8007128:	00b4fff6 	.word	0x00b4fff6
 800712c:	0036fff6 	.word	0x0036fff6
 8007130:	fff6fff6 	.word	0xfff6fff6
 8007134:	0087      	.short	0x0087
 8007136:	0026      	movs	r6, r4
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	3642      	adds	r6, #66	; 0x42
 800713c:	1d11      	adds	r1, r2, #4
 800713e:	6019      	str	r1, [r3, #0]
 8007140:	6813      	ldr	r3, [r2, #0]
 8007142:	7033      	strb	r3, [r6, #0]
 8007144:	2301      	movs	r3, #1
 8007146:	e0a2      	b.n	800728e <_printf_i+0x1c6>
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	6809      	ldr	r1, [r1, #0]
 800714c:	1d02      	adds	r2, r0, #4
 800714e:	060d      	lsls	r5, r1, #24
 8007150:	d50b      	bpl.n	800716a <_printf_i+0xa2>
 8007152:	6805      	ldr	r5, [r0, #0]
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	2d00      	cmp	r5, #0
 8007158:	da03      	bge.n	8007162 <_printf_i+0x9a>
 800715a:	232d      	movs	r3, #45	; 0x2d
 800715c:	9a04      	ldr	r2, [sp, #16]
 800715e:	426d      	negs	r5, r5
 8007160:	7013      	strb	r3, [r2, #0]
 8007162:	4b5f      	ldr	r3, [pc, #380]	; (80072e0 <_printf_i+0x218>)
 8007164:	270a      	movs	r7, #10
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	e01b      	b.n	80071a2 <_printf_i+0xda>
 800716a:	6805      	ldr	r5, [r0, #0]
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	0649      	lsls	r1, r1, #25
 8007170:	d5f1      	bpl.n	8007156 <_printf_i+0x8e>
 8007172:	b22d      	sxth	r5, r5
 8007174:	e7ef      	b.n	8007156 <_printf_i+0x8e>
 8007176:	680d      	ldr	r5, [r1, #0]
 8007178:	6819      	ldr	r1, [r3, #0]
 800717a:	1d08      	adds	r0, r1, #4
 800717c:	6018      	str	r0, [r3, #0]
 800717e:	062e      	lsls	r6, r5, #24
 8007180:	d501      	bpl.n	8007186 <_printf_i+0xbe>
 8007182:	680d      	ldr	r5, [r1, #0]
 8007184:	e003      	b.n	800718e <_printf_i+0xc6>
 8007186:	066d      	lsls	r5, r5, #25
 8007188:	d5fb      	bpl.n	8007182 <_printf_i+0xba>
 800718a:	680d      	ldr	r5, [r1, #0]
 800718c:	b2ad      	uxth	r5, r5
 800718e:	4b54      	ldr	r3, [pc, #336]	; (80072e0 <_printf_i+0x218>)
 8007190:	2708      	movs	r7, #8
 8007192:	9303      	str	r3, [sp, #12]
 8007194:	2a6f      	cmp	r2, #111	; 0x6f
 8007196:	d000      	beq.n	800719a <_printf_i+0xd2>
 8007198:	3702      	adds	r7, #2
 800719a:	0023      	movs	r3, r4
 800719c:	2200      	movs	r2, #0
 800719e:	3343      	adds	r3, #67	; 0x43
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	6863      	ldr	r3, [r4, #4]
 80071a4:	60a3      	str	r3, [r4, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	db03      	blt.n	80071b2 <_printf_i+0xea>
 80071aa:	2104      	movs	r1, #4
 80071ac:	6822      	ldr	r2, [r4, #0]
 80071ae:	438a      	bics	r2, r1
 80071b0:	6022      	str	r2, [r4, #0]
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	d102      	bne.n	80071bc <_printf_i+0xf4>
 80071b6:	9e04      	ldr	r6, [sp, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00c      	beq.n	80071d6 <_printf_i+0x10e>
 80071bc:	9e04      	ldr	r6, [sp, #16]
 80071be:	0028      	movs	r0, r5
 80071c0:	0039      	movs	r1, r7
 80071c2:	f7f9 f837 	bl	8000234 <__aeabi_uidivmod>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	3e01      	subs	r6, #1
 80071ca:	5c5b      	ldrb	r3, [r3, r1]
 80071cc:	7033      	strb	r3, [r6, #0]
 80071ce:	002b      	movs	r3, r5
 80071d0:	0005      	movs	r5, r0
 80071d2:	429f      	cmp	r7, r3
 80071d4:	d9f3      	bls.n	80071be <_printf_i+0xf6>
 80071d6:	2f08      	cmp	r7, #8
 80071d8:	d109      	bne.n	80071ee <_printf_i+0x126>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	07db      	lsls	r3, r3, #31
 80071de:	d506      	bpl.n	80071ee <_printf_i+0x126>
 80071e0:	6862      	ldr	r2, [r4, #4]
 80071e2:	6923      	ldr	r3, [r4, #16]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	dc02      	bgt.n	80071ee <_printf_i+0x126>
 80071e8:	2330      	movs	r3, #48	; 0x30
 80071ea:	3e01      	subs	r6, #1
 80071ec:	7033      	strb	r3, [r6, #0]
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	1b9b      	subs	r3, r3, r6
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	9b07      	ldr	r3, [sp, #28]
 80071f6:	0021      	movs	r1, r4
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	9805      	ldr	r0, [sp, #20]
 80071fc:	9b06      	ldr	r3, [sp, #24]
 80071fe:	aa09      	add	r2, sp, #36	; 0x24
 8007200:	f7ff fef2 	bl	8006fe8 <_printf_common>
 8007204:	3001      	adds	r0, #1
 8007206:	d147      	bne.n	8007298 <_printf_i+0x1d0>
 8007208:	2001      	movs	r0, #1
 800720a:	4240      	negs	r0, r0
 800720c:	b00b      	add	sp, #44	; 0x2c
 800720e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007210:	2220      	movs	r2, #32
 8007212:	6809      	ldr	r1, [r1, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	6022      	str	r2, [r4, #0]
 8007218:	2278      	movs	r2, #120	; 0x78
 800721a:	4932      	ldr	r1, [pc, #200]	; (80072e4 <_printf_i+0x21c>)
 800721c:	9103      	str	r1, [sp, #12]
 800721e:	0021      	movs	r1, r4
 8007220:	3145      	adds	r1, #69	; 0x45
 8007222:	700a      	strb	r2, [r1, #0]
 8007224:	6819      	ldr	r1, [r3, #0]
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	c920      	ldmia	r1!, {r5}
 800722a:	0610      	lsls	r0, r2, #24
 800722c:	d402      	bmi.n	8007234 <_printf_i+0x16c>
 800722e:	0650      	lsls	r0, r2, #25
 8007230:	d500      	bpl.n	8007234 <_printf_i+0x16c>
 8007232:	b2ad      	uxth	r5, r5
 8007234:	6019      	str	r1, [r3, #0]
 8007236:	07d3      	lsls	r3, r2, #31
 8007238:	d502      	bpl.n	8007240 <_printf_i+0x178>
 800723a:	2320      	movs	r3, #32
 800723c:	4313      	orrs	r3, r2
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	2710      	movs	r7, #16
 8007242:	2d00      	cmp	r5, #0
 8007244:	d1a9      	bne.n	800719a <_printf_i+0xd2>
 8007246:	2220      	movs	r2, #32
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	4393      	bics	r3, r2
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	e7a4      	b.n	800719a <_printf_i+0xd2>
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	680d      	ldr	r5, [r1, #0]
 8007254:	1d10      	adds	r0, r2, #4
 8007256:	6949      	ldr	r1, [r1, #20]
 8007258:	6018      	str	r0, [r3, #0]
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	062e      	lsls	r6, r5, #24
 800725e:	d501      	bpl.n	8007264 <_printf_i+0x19c>
 8007260:	6019      	str	r1, [r3, #0]
 8007262:	e002      	b.n	800726a <_printf_i+0x1a2>
 8007264:	066d      	lsls	r5, r5, #25
 8007266:	d5fb      	bpl.n	8007260 <_printf_i+0x198>
 8007268:	8019      	strh	r1, [r3, #0]
 800726a:	2300      	movs	r3, #0
 800726c:	9e04      	ldr	r6, [sp, #16]
 800726e:	6123      	str	r3, [r4, #16]
 8007270:	e7c0      	b.n	80071f4 <_printf_i+0x12c>
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	1d11      	adds	r1, r2, #4
 8007276:	6019      	str	r1, [r3, #0]
 8007278:	6816      	ldr	r6, [r2, #0]
 800727a:	2100      	movs	r1, #0
 800727c:	0030      	movs	r0, r6
 800727e:	6862      	ldr	r2, [r4, #4]
 8007280:	f000 f858 	bl	8007334 <memchr>
 8007284:	2800      	cmp	r0, #0
 8007286:	d001      	beq.n	800728c <_printf_i+0x1c4>
 8007288:	1b80      	subs	r0, r0, r6
 800728a:	6060      	str	r0, [r4, #4]
 800728c:	6863      	ldr	r3, [r4, #4]
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	2300      	movs	r3, #0
 8007292:	9a04      	ldr	r2, [sp, #16]
 8007294:	7013      	strb	r3, [r2, #0]
 8007296:	e7ad      	b.n	80071f4 <_printf_i+0x12c>
 8007298:	0032      	movs	r2, r6
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	9906      	ldr	r1, [sp, #24]
 800729e:	9805      	ldr	r0, [sp, #20]
 80072a0:	9d07      	ldr	r5, [sp, #28]
 80072a2:	47a8      	blx	r5
 80072a4:	3001      	adds	r0, #1
 80072a6:	d0af      	beq.n	8007208 <_printf_i+0x140>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	079b      	lsls	r3, r3, #30
 80072ac:	d415      	bmi.n	80072da <_printf_i+0x212>
 80072ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b0:	68e0      	ldr	r0, [r4, #12]
 80072b2:	4298      	cmp	r0, r3
 80072b4:	daaa      	bge.n	800720c <_printf_i+0x144>
 80072b6:	0018      	movs	r0, r3
 80072b8:	e7a8      	b.n	800720c <_printf_i+0x144>
 80072ba:	0022      	movs	r2, r4
 80072bc:	2301      	movs	r3, #1
 80072be:	9906      	ldr	r1, [sp, #24]
 80072c0:	9805      	ldr	r0, [sp, #20]
 80072c2:	9e07      	ldr	r6, [sp, #28]
 80072c4:	3219      	adds	r2, #25
 80072c6:	47b0      	blx	r6
 80072c8:	3001      	adds	r0, #1
 80072ca:	d09d      	beq.n	8007208 <_printf_i+0x140>
 80072cc:	3501      	adds	r5, #1
 80072ce:	68e3      	ldr	r3, [r4, #12]
 80072d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d2:	1a9b      	subs	r3, r3, r2
 80072d4:	42ab      	cmp	r3, r5
 80072d6:	dcf0      	bgt.n	80072ba <_printf_i+0x1f2>
 80072d8:	e7e9      	b.n	80072ae <_printf_i+0x1e6>
 80072da:	2500      	movs	r5, #0
 80072dc:	e7f7      	b.n	80072ce <_printf_i+0x206>
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	080075fd 	.word	0x080075fd
 80072e4:	0800760e 	.word	0x0800760e

080072e8 <memmove>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	4288      	cmp	r0, r1
 80072ec:	d902      	bls.n	80072f4 <memmove+0xc>
 80072ee:	188b      	adds	r3, r1, r2
 80072f0:	4298      	cmp	r0, r3
 80072f2:	d303      	bcc.n	80072fc <memmove+0x14>
 80072f4:	2300      	movs	r3, #0
 80072f6:	e007      	b.n	8007308 <memmove+0x20>
 80072f8:	5c8b      	ldrb	r3, [r1, r2]
 80072fa:	5483      	strb	r3, [r0, r2]
 80072fc:	3a01      	subs	r2, #1
 80072fe:	d2fb      	bcs.n	80072f8 <memmove+0x10>
 8007300:	bd10      	pop	{r4, pc}
 8007302:	5ccc      	ldrb	r4, [r1, r3]
 8007304:	54c4      	strb	r4, [r0, r3]
 8007306:	3301      	adds	r3, #1
 8007308:	429a      	cmp	r2, r3
 800730a:	d1fa      	bne.n	8007302 <memmove+0x1a>
 800730c:	e7f8      	b.n	8007300 <memmove+0x18>
	...

08007310 <_sbrk_r>:
 8007310:	2300      	movs	r3, #0
 8007312:	b570      	push	{r4, r5, r6, lr}
 8007314:	4d06      	ldr	r5, [pc, #24]	; (8007330 <_sbrk_r+0x20>)
 8007316:	0004      	movs	r4, r0
 8007318:	0008      	movs	r0, r1
 800731a:	602b      	str	r3, [r5, #0]
 800731c:	f7fa f864 	bl	80013e8 <_sbrk>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d103      	bne.n	800732c <_sbrk_r+0x1c>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d000      	beq.n	800732c <_sbrk_r+0x1c>
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	bd70      	pop	{r4, r5, r6, pc}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	20000454 	.word	0x20000454

08007334 <memchr>:
 8007334:	b2c9      	uxtb	r1, r1
 8007336:	1882      	adds	r2, r0, r2
 8007338:	4290      	cmp	r0, r2
 800733a:	d101      	bne.n	8007340 <memchr+0xc>
 800733c:	2000      	movs	r0, #0
 800733e:	4770      	bx	lr
 8007340:	7803      	ldrb	r3, [r0, #0]
 8007342:	428b      	cmp	r3, r1
 8007344:	d0fb      	beq.n	800733e <memchr+0xa>
 8007346:	3001      	adds	r0, #1
 8007348:	e7f6      	b.n	8007338 <memchr+0x4>

0800734a <memcpy>:
 800734a:	2300      	movs	r3, #0
 800734c:	b510      	push	{r4, lr}
 800734e:	429a      	cmp	r2, r3
 8007350:	d100      	bne.n	8007354 <memcpy+0xa>
 8007352:	bd10      	pop	{r4, pc}
 8007354:	5ccc      	ldrb	r4, [r1, r3]
 8007356:	54c4      	strb	r4, [r0, r3]
 8007358:	3301      	adds	r3, #1
 800735a:	e7f8      	b.n	800734e <memcpy+0x4>

0800735c <_realloc_r>:
 800735c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800735e:	0007      	movs	r7, r0
 8007360:	000e      	movs	r6, r1
 8007362:	0014      	movs	r4, r2
 8007364:	2900      	cmp	r1, #0
 8007366:	d105      	bne.n	8007374 <_realloc_r+0x18>
 8007368:	0011      	movs	r1, r2
 800736a:	f7ff fc49 	bl	8006c00 <_malloc_r>
 800736e:	0005      	movs	r5, r0
 8007370:	0028      	movs	r0, r5
 8007372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007374:	2a00      	cmp	r2, #0
 8007376:	d103      	bne.n	8007380 <_realloc_r+0x24>
 8007378:	f7ff fbd6 	bl	8006b28 <_free_r>
 800737c:	0025      	movs	r5, r4
 800737e:	e7f7      	b.n	8007370 <_realloc_r+0x14>
 8007380:	f000 f81b 	bl	80073ba <_malloc_usable_size_r>
 8007384:	9001      	str	r0, [sp, #4]
 8007386:	4284      	cmp	r4, r0
 8007388:	d803      	bhi.n	8007392 <_realloc_r+0x36>
 800738a:	0035      	movs	r5, r6
 800738c:	0843      	lsrs	r3, r0, #1
 800738e:	42a3      	cmp	r3, r4
 8007390:	d3ee      	bcc.n	8007370 <_realloc_r+0x14>
 8007392:	0021      	movs	r1, r4
 8007394:	0038      	movs	r0, r7
 8007396:	f7ff fc33 	bl	8006c00 <_malloc_r>
 800739a:	1e05      	subs	r5, r0, #0
 800739c:	d0e8      	beq.n	8007370 <_realloc_r+0x14>
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	0022      	movs	r2, r4
 80073a2:	429c      	cmp	r4, r3
 80073a4:	d900      	bls.n	80073a8 <_realloc_r+0x4c>
 80073a6:	001a      	movs	r2, r3
 80073a8:	0031      	movs	r1, r6
 80073aa:	0028      	movs	r0, r5
 80073ac:	f7ff ffcd 	bl	800734a <memcpy>
 80073b0:	0031      	movs	r1, r6
 80073b2:	0038      	movs	r0, r7
 80073b4:	f7ff fbb8 	bl	8006b28 <_free_r>
 80073b8:	e7da      	b.n	8007370 <_realloc_r+0x14>

080073ba <_malloc_usable_size_r>:
 80073ba:	1f0b      	subs	r3, r1, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	1f18      	subs	r0, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	da01      	bge.n	80073c8 <_malloc_usable_size_r+0xe>
 80073c4:	580b      	ldr	r3, [r1, r0]
 80073c6:	18c0      	adds	r0, r0, r3
 80073c8:	4770      	bx	lr
	...

080073cc <_init>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr

080073d8 <_fini>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr
