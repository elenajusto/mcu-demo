
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008398  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086a0  080086a0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086a8  080086a8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086ac  080086ac  000186ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080086b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000005c  0800870c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800870c  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b22  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc3  00000000  00000000  00037be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0003abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001090  00000000  00000000  0003c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b179  00000000  00000000  0003d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019e72  00000000  00000000  000582d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aee7e  00000000  00000000  00072143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000524c  00000000  00000000  00120fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00126210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800843c 	.word	0x0800843c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	0800843c 	.word	0x0800843c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 ff47 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f891 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fb1d 	bl	8000c8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 facd 	bl	8000bf0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000656:	f000 f8d3 	bl	8000800 <MX_ADC1_Init>
  MX_I2C1_Init();
 800065a:	f000 f937 	bl	80008cc <MX_I2C1_Init>
  MX_TIM2_Init();
 800065e:	f000 f975 	bl	800094c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000662:	f000 f9c7 	bl	80009f4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000666:	f000 fa47 	bl	8000af8 <MX_TIM6_Init>
  MX_TIM7_Init();
 800066a:	f000 fa83 	bl	8000b74 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 800066e:	4b38      	ldr	r3, [pc, #224]	; (8000750 <main+0x110>)
 8000670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000672:	4b37      	ldr	r3, [pc, #220]	; (8000750 <main+0x110>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	63da      	str	r2, [r3, #60]	; 0x3c
 800067a:	4b35      	ldr	r3, [pc, #212]	; (8000750 <main+0x110>)
 800067c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000686:	4b32      	ldr	r3, [pc, #200]	; (8000750 <main+0x110>)
 8000688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <main+0x110>)
 800068c:	2110      	movs	r1, #16
 800068e:	430a      	orrs	r2, r1
 8000690:	63da      	str	r2, [r3, #60]	; 0x3c
 8000692:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <main+0x110>)
 8000694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000696:	2210      	movs	r2, #16
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 800069e:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <main+0x110>)
 80006a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <main+0x110>)
 80006a4:	2120      	movs	r1, #32
 80006a6:	430a      	orrs	r2, r1
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80006aa:	4b29      	ldr	r3, [pc, #164]	; (8000750 <main+0x110>)
 80006ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ae:	2220      	movs	r2, #32
 80006b0:	4013      	ands	r3, r2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200f      	movs	r0, #15
 80006bc:	f001 fea8 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006c0:	200f      	movs	r0, #15
 80006c2:	f001 feba 	bl	800243a <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2011      	movs	r0, #17
 80006cc:	f001 fea0 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80006d0:	2011      	movs	r0, #17
 80006d2:	f001 feb2 	bl	800243a <HAL_NVIC_EnableIRQ>


  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2012      	movs	r0, #18
 80006dc:	f001 fe98 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 80006e0:	2012      	movs	r0, #18
 80006e2:	f001 feaa 	bl	800243a <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <main+0x114>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f003 fcf1 	bl	80040d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <main+0x118>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 fced 	bl	80040d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <main+0x11c>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f003 fce9 	bl	80040d0 <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <main+0x120>)
 8000700:	2100      	movs	r1, #0
 8000702:	0018      	movs	r0, r3
 8000704:	f003 fda0 	bl	8004248 <HAL_TIM_PWM_Start>

  // Scan I2C addresses on startup
  //i2cScanner();

  // I2C Display
  hardwareTestLCD();
 8000708:	f000 fbb0 	bl	8000e6c <hardwareTestLCD>

  // Variables
  int servoAngle;
  int adcValue;
  int stateTracker = 1;
 800070c:	2301      	movs	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
  {
	  // State Machine Control
	  //stateMachineController(stateTracker);

	  // Testing UART receiving
	  HAL_UART_Receive_IT(&huart2, 1, 1);
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <main+0x124>)
 8000712:	2201      	movs	r2, #1
 8000714:	2101      	movs	r1, #1
 8000716:	0018      	movs	r0, r3
 8000718:	f004 ff10 	bl	800553c <HAL_UART_Receive_IT>

	  // Get potentiometer value
	  HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <main+0x128>)
 800071e:	0018      	movs	r0, r3
 8000720:	f001 fae8 	bl	8001cf4 <HAL_ADC_Start_IT>
	  hardwareTestPot();
 8000724:	f000 fb5c 	bl	8000de0 <hardwareTestPot>

	  // Motor control
	  adcValue = getAdcFromPot();
 8000728:	f000 fb88 	bl	8000e3c <getAdcFromPot>
 800072c:	0003      	movs	r3, r0
 800072e:	613b      	str	r3, [r7, #16]
	  servoAngle = myMap(adcValue, 60, 4095, 0, 180);
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <main+0x12c>)
 8000732:	6938      	ldr	r0, [r7, #16]
 8000734:	23b4      	movs	r3, #180	; 0xb4
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	213c      	movs	r1, #60	; 0x3c
 800073c:	f000 fbc4 	bl	8000ec8 <myMap>
 8000740:	0003      	movs	r3, r0
 8000742:	60fb      	str	r3, [r7, #12]
	  motorControl(servoAngle);
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fbb0 	bl	8000eac <motorControl>
	  HAL_UART_Receive_IT(&huart2, 1, 1);
 800074c:	e7e0      	b.n	8000710 <main+0xd0>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40021000 	.word	0x40021000
 8000754:	20000130 	.word	0x20000130
 8000758:	200001c8 	.word	0x200001c8
 800075c:	20000214 	.word	0x20000214
 8000760:	2000017c 	.word	0x2000017c
 8000764:	20000260 	.word	0x20000260
 8000768:	20000078 	.word	0x20000078
 800076c:	00000fff 	.word	0x00000fff

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b093      	sub	sp, #76	; 0x4c
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	2410      	movs	r4, #16
 8000778:	193b      	adds	r3, r7, r4
 800077a:	0018      	movs	r0, r3
 800077c:	2338      	movs	r3, #56	; 0x38
 800077e:	001a      	movs	r2, r3
 8000780:	2100      	movs	r1, #0
 8000782:	f007 f9d5 	bl	8007b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000786:	003b      	movs	r3, r7
 8000788:	0018      	movs	r0, r3
 800078a:	2310      	movs	r3, #16
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f007 f9ce 	bl	8007b30 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	0018      	movs	r0, r3
 800079a:	f002 fd79 	bl	8003290 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2202      	movs	r2, #2
 80007a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	0052      	lsls	r2, r2, #1
 80007aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2240      	movs	r2, #64	; 0x40
 80007b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 fdb1 	bl	8003328 <HAL_RCC_OscConfig>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007ca:	f000 fbef 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	003b      	movs	r3, r7
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	003b      	movs	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e6:	003b      	movs	r3, r7
 80007e8:	2100      	movs	r1, #0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f003 f8b6 	bl	800395c <HAL_RCC_ClockConfig>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007f4:	f000 fbda 	bl	8000fac <Error_Handler>
  }
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b013      	add	sp, #76	; 0x4c
 80007fe:	bd90      	pop	{r4, r7, pc}

08000800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	0018      	movs	r0, r3
 800080a:	230c      	movs	r3, #12
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f007 f98e 	bl	8007b30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000814:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <MX_ADC1_Init+0xc8>)
 8000818:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_ADC1_Init+0xc4>)
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	05d2      	lsls	r2, r2, #23
 8000820:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_ADC1_Init+0xc4>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000836:	2204      	movs	r2, #4
 8000838:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_ADC1_Init+0xc4>)
 800083c:	2200      	movs	r2, #0
 800083e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000842:	2200      	movs	r2, #0
 8000844:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000848:	2201      	movs	r2, #1
 800084a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_ADC1_Init+0xc4>)
 800084e:	2201      	movs	r2, #1
 8000850:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_ADC1_Init+0xc4>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000860:	222c      	movs	r2, #44	; 0x2c
 8000862:	2100      	movs	r1, #0
 8000864:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_ADC1_Init+0xc4>)
 800086e:	2200      	movs	r2, #0
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000874:	2200      	movs	r2, #0
 8000876:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_ADC1_Init+0xc4>)
 800087a:	223c      	movs	r2, #60	; 0x3c
 800087c:	2100      	movs	r1, #0
 800087e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000882:	2200      	movs	r2, #0
 8000884:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_ADC1_Init+0xc4>)
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fff7 	bl	800187c <HAL_ADC_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 fb8b 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a8:	1d3a      	adds	r2, r7, #4
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_ADC1_Init+0xc4>)
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 faa4 	bl	8001dfc <HAL_ADC_ConfigChannel>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80008b8:	f000 fb78 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b004      	add	sp, #16
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000078 	.word	0x20000078
 80008c8:	40012400 	.word	0x40012400

080008cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_I2C1_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_I2C1_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_I2C1_Init+0x74>)
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_I2C1_Init+0x7c>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_I2C1_Init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_I2C1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2C1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_I2C1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_I2C1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_I2C1_Init+0x74>)
 8000908:	0018      	movs	r0, r3
 800090a:	f002 f81b 	bl	8002944 <HAL_I2C_Init>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000912:	f000 fb4b 	bl	8000fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_I2C1_Init+0x74>)
 8000918:	2100      	movs	r1, #0
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fc20 	bl	8003160 <HAL_I2CEx_ConfigAnalogFilter>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000924:	f000 fb42 	bl	8000fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <MX_I2C1_Init+0x74>)
 800092a:	2100      	movs	r1, #0
 800092c:	0018      	movs	r0, r3
 800092e:	f002 fc63 	bl	80031f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000932:	1e03      	subs	r3, r0, #0
 8000934:	d001      	beq.n	800093a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fb39 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	200000dc 	.word	0x200000dc
 8000944:	40005400 	.word	0x40005400
 8000948:	00303d5b 	.word	0x00303d5b

0800094c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	2310      	movs	r3, #16
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	0018      	movs	r0, r3
 8000958:	2310      	movs	r3, #16
 800095a:	001a      	movs	r2, r3
 800095c:	2100      	movs	r1, #0
 800095e:	f007 f8e7 	bl	8007b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	0018      	movs	r0, r3
 8000966:	230c      	movs	r3, #12
 8000968:	001a      	movs	r2, r3
 800096a:	2100      	movs	r1, #0
 800096c:	f007 f8e0 	bl	8007b30 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_TIM2_Init+0xa0>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	05d2      	lsls	r2, r2, #23
 8000976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000978:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_TIM2_Init+0xa0>)
 800097a:	4a1d      	ldr	r2, [pc, #116]	; (80009f0 <MX_TIM2_Init+0xa4>)
 800097c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_TIM2_Init+0xa0>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_TIM2_Init+0xa0>)
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <MX_TIM2_Init+0xa4>)
 8000988:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM2_Init+0xa0>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_TIM2_Init+0xa0>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_TIM2_Init+0xa0>)
 8000998:	0018      	movs	r0, r3
 800099a:	f003 fb41 	bl	8004020 <HAL_TIM_Base_Init>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009a2:	f000 fb03 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a6:	2110      	movs	r1, #16
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	0152      	lsls	r2, r2, #5
 80009ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b0:	187a      	adds	r2, r7, r1
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_TIM2_Init+0xa0>)
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f003 ff38 	bl	800482c <HAL_TIM_ConfigClockSource>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009c0:	f000 faf4 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d0:	1d3a      	adds	r2, r7, #4
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_TIM2_Init+0xa0>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f004 fc30 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009e0:	f000 fae4 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b008      	add	sp, #32
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000130 	.word	0x20000130
 80009f0:	000003e7 	.word	0x000003e7

080009f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	2328      	movs	r3, #40	; 0x28
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	0018      	movs	r0, r3
 8000a00:	2310      	movs	r3, #16
 8000a02:	001a      	movs	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	f007 f893 	bl	8007b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0a:	231c      	movs	r3, #28
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	230c      	movs	r3, #12
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f007 f88b 	bl	8007b30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	231c      	movs	r3, #28
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f007 f884 	bl	8007b30 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a2a:	4a31      	ldr	r2, [pc, #196]	; (8000af0 <MX_TIM3_Init+0xfc>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a30:	2240      	movs	r2, #64	; 0x40
 8000a32:	32ff      	adds	r2, #255	; 0xff
 8000a34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a3e:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <MX_TIM3_Init+0x100>)
 8000a40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b28      	ldr	r3, [pc, #160]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a4e:	4b27      	ldr	r3, [pc, #156]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f003 fae5 	bl	8004020 <HAL_TIM_Base_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a5a:	f000 faa7 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5e:	2128      	movs	r1, #40	; 0x28
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	0152      	lsls	r2, r2, #5
 8000a66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a68:	187a      	adds	r2, r7, r1
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f003 fedc 	bl	800482c <HAL_TIM_ConfigClockSource>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a78:	f000 fa98 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 fb82 	bl	8004188 <HAL_TIM_PWM_Init>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a88:	f000 fa90 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	211c      	movs	r1, #28
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a9a:	187a      	adds	r2, r7, r1
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f004 fbcb 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000aaa:	f000 fa7f 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2260      	movs	r2, #96	; 0x60
 8000ab2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aba:	003b      	movs	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac6:	0039      	movs	r1, r7
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	0018      	movs	r0, r3
 8000ace:	f003 fdad 	bl	800462c <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000ad6:	f000 fa69 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <MX_TIM3_Init+0xf8>)
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 fba9 	bl	8001234 <HAL_TIM_MspPostInit>

}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b00e      	add	sp, #56	; 0x38
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	2000017c 	.word	0x2000017c
 8000af0:	40000400 	.word	0x40000400
 8000af4:	000003e7 	.word	0x000003e7

08000af8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	0018      	movs	r0, r3
 8000b02:	230c      	movs	r3, #12
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f007 f812 	bl	8007b30 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_TIM6_Init+0x6c>)
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <MX_TIM6_Init+0x70>)
 8000b10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_TIM6_Init+0x6c>)
 8000b14:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <MX_TIM6_Init+0x74>)
 8000b16:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_TIM6_Init+0x6c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_TIM6_Init+0x6c>)
 8000b20:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <MX_TIM6_Init+0x78>)
 8000b22:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_TIM6_Init+0x6c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_TIM6_Init+0x6c>)
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f003 fa77 	bl	8004020 <HAL_TIM_Base_Init>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b36:	f000 fa39 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b46:	1d3a      	adds	r2, r7, #4
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_TIM6_Init+0x6c>)
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f004 fb75 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b56:	f000 fa29 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	200001c8 	.word	0x200001c8
 8000b68:	40001000 	.word	0x40001000
 8000b6c:	000007cf 	.word	0x000007cf
 8000b70:	000003e7 	.word	0x000003e7

08000b74 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	230c      	movs	r3, #12
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	f006 ffd4 	bl	8007b30 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_TIM7_Init+0x6c>)
 8000b8a:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <MX_TIM7_Init+0x70>)
 8000b8c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3332;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_TIM7_Init+0x6c>)
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_TIM7_Init+0x74>)
 8000b92:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_TIM7_Init+0x6c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_TIM7_Init+0x6c>)
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <MX_TIM7_Init+0x78>)
 8000b9e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_TIM7_Init+0x6c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_TIM7_Init+0x6c>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f003 fa39 	bl	8004020 <HAL_TIM_Base_Init>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000bb2:	f000 f9fb 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bc2:	1d3a      	adds	r2, r7, #4
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_TIM7_Init+0x6c>)
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f004 fb37 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000bd2:	f000 f9eb 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b004      	add	sp, #16
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	20000214 	.word	0x20000214
 8000be4:	40001400 	.word	0x40001400
 8000be8:	00000d04 	.word	0x00000d04
 8000bec:	000003e7 	.word	0x000003e7

08000bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000bf6:	4a24      	ldr	r2, [pc, #144]	; (8000c88 <MX_USART2_UART_Init+0x98>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000bfc:	22e1      	movs	r2, #225	; 0xe1
 8000bfe:	0252      	lsls	r2, r2, #9
 8000c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f004 fb84 	bl	8005348 <HAL_UART_Init>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c44:	f000 f9b2 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f006 fbd1 	bl	80073f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c52:	1e03      	subs	r3, r0, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c56:	f000 f9a9 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f006 fc08 	bl	8007474 <HAL_UARTEx_SetRxFifoThreshold>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c68:	f000 f9a0 	bl	8000fac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <MX_USART2_UART_Init+0x94>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f006 fb86 	bl	8007380 <HAL_UARTEx_DisableFifoMode>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c78:	f000 f998 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000260 	.word	0x20000260
 8000c88:	40004400 	.word	0x40004400

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b08b      	sub	sp, #44	; 0x2c
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	2414      	movs	r4, #20
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	0018      	movs	r0, r3
 8000c98:	2314      	movs	r3, #20
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	f006 ff47 	bl	8007b30 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca6:	4b4a      	ldr	r3, [pc, #296]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000ca8:	2104      	movs	r1, #4
 8000caa:	430a      	orrs	r2, r1
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
 8000cae:	4b48      	ldr	r3, [pc, #288]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cba:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cbe:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc6:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cca:	2220      	movs	r2, #32
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cde:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cee:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf6:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <MX_GPIO_Init+0x144>)
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTON_2_GPIO_Port, BUTTON_2_Pin, GPIO_PIN_SET);
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	4833      	ldr	r0, [pc, #204]	; (8000dd4 <MX_GPIO_Init+0x148>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	f001 fde2 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d10:	23a0      	movs	r3, #160	; 0xa0
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	2200      	movs	r2, #0
 8000d16:	2120      	movs	r1, #32
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f001 fddb 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000d1e:	492e      	ldr	r1, [pc, #184]	; (8000dd8 <MX_GPIO_Init+0x14c>)
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <MX_GPIO_Init+0x150>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	0018      	movs	r0, r3
 8000d26:	f001 fdd5 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <MX_GPIO_Init+0x148>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	0018      	movs	r0, r3
 8000d32:	f001 fdcf 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_2_Pin LED_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|LED_1_Pin;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2282      	movs	r2, #130	; 0x82
 8000d3a:	0192      	lsls	r2, r2, #6
 8000d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	2201      	movs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <MX_GPIO_Init+0x148>)
 8000d54:	0019      	movs	r1, r3
 8000d56:	0010      	movs	r0, r2
 8000d58:	f001 fc58 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	2220      	movs	r2, #32
 8000d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2201      	movs	r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2202      	movs	r2, #2
 8000d72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d74:	193a      	adds	r2, r7, r4
 8000d76:	23a0      	movs	r3, #160	; 0xa0
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fc45 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <MX_GPIO_Init+0x14c>)
 8000d86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <MX_GPIO_Init+0x150>)
 8000d9e:	0019      	movs	r1, r3
 8000da0:	0010      	movs	r0, r2
 8000da2:	f001 fc33 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000da6:	0021      	movs	r1, r4
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2208      	movs	r2, #8
 8000dac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <MX_GPIO_Init+0x150>)
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	0010      	movs	r0, r2
 8000dc2:	f001 fc23 	bl	800260c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b00b      	add	sp, #44	; 0x2c
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	50000800 	.word	0x50000800
 8000dd8:	00004010 	.word	0x00004010
 8000ddc:	50000400 	.word	0x50000400

08000de0 <hardwareTestPot>:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
	}

	/* Test potentiometer is working */
	void hardwareTestPot(void){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
		/* Init variable for pot value */
		char msg[20];
		uint16_t potValue;

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <hardwareTestPot+0x50>)
 8000de8:	2105      	movs	r1, #5
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 feee 	bl	8001bcc <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <hardwareTestPot+0x50>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 fff6 	bl	8001de4 <HAL_ADC_GetValue>
 8000df8:	0002      	movs	r2, r0
 8000dfa:	2116      	movs	r1, #22
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	801a      	strh	r2, [r3, #0]

		/* Print value */
		sprintf(msg, "potValue: %hu\r\n", potValue);
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	881a      	ldrh	r2, [r3, #0]
 8000e04:	490b      	ldr	r1, [pc, #44]	; (8000e34 <hardwareTestPot+0x54>)
 8000e06:	003b      	movs	r3, r7
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f006 fe71 	bl	8007af0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000e0e:	003b      	movs	r3, r7
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff f977 	bl	8000104 <strlen>
 8000e16:	0003      	movs	r3, r0
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	0039      	movs	r1, r7
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <hardwareTestPot+0x58>)
 8000e22:	f004 fae7 	bl	80053f4 <HAL_UART_Transmit>

	}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b006      	add	sp, #24
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000078 	.word	0x20000078
 8000e34:	08008454 	.word	0x08008454
 8000e38:	20000260 	.word	0x20000260

08000e3c <getAdcFromPot>:

	/* getADC from Pot */
	int getAdcFromPot(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
		/* Get pot value */
		uint16_t potValue;
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <getAdcFromPot+0x2c>)
 8000e44:	2105      	movs	r1, #5
 8000e46:	0018      	movs	r0, r3
 8000e48:	f000 fec0 	bl	8001bcc <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <getAdcFromPot+0x2c>)
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 ffc8 	bl	8001de4 <HAL_ADC_GetValue>
 8000e54:	0002      	movs	r2, r0
 8000e56:	1dbb      	adds	r3, r7, #6
 8000e58:	801a      	strh	r2, [r3, #0]
		return potValue;
 8000e5a:	1dbb      	adds	r3, r7, #6
 8000e5c:	881b      	ldrh	r3, [r3, #0]
	}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	20000078 	.word	0x20000078

08000e6c <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f006 fcc1 	bl	80077f8 <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f006 fdcc 	bl	8007a18 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <hardwareTestLCD+0x38>)
 8000e82:	0019      	movs	r1, r3
 8000e84:	2000      	movs	r0, #0
 8000e86:	f006 fe17 	bl	8007ab8 <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f006 fdc2 	bl	8007a18 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <hardwareTestLCD+0x3c>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f006 fe0d 	bl	8007ab8 <I2C_LCD_WriteString>
	}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	0800848c 	.word	0x0800848c
 8000ea8:	0800849c 	.word	0x0800849c

08000eac <motorControl>:

	/* Motor control */
	void motorControl(int adcValue){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, adcValue); // Interpolate pot values to PWM range
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <motorControl+0x18>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34

	}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000017c 	.word	0x2000017c

08000ec8 <myMap>:
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
		/*--[ Scanning Done ]--*/
	}

	/* Mapping function */
	 int myMap(int x, int in_min, int in_max, int out_min, int out_max){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
		 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	69b9      	ldr	r1, [r7, #24]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	1a8a      	subs	r2, r1, r2
 8000ee2:	435a      	muls	r2, r3
 8000ee4:	0010      	movs	r0, r2
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	0019      	movs	r1, r3
 8000eee:	f7ff f9a5 	bl	800023c <__divsi3>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	18d3      	adds	r3, r2, r3
	 }
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_TIM_PeriodElapsedCallback>:

	 /* Non blocking control of LEDs */
	 // Frequency currently determined by each timer's PSC and ARR value
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
		 // This callback is automatically called by the HAL on the UEV event
		 if(htim->Instance == TIM2){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d105      	bne.n	8000f24 <HAL_TIM_PeriodElapsedCallback+0x20>
			 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 fcf6 	bl	800290e <HAL_GPIO_TogglePin>
		 } else if(htim->Instance == TIM6){
			 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
		 } else if(htim->Instance == TIM7){
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
		 }
	 }
 8000f22:	e016      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x4e>
		 } else if(htim->Instance == TIM6){
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d107      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x3a>
			 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	01db      	lsls	r3, r3, #7
 8000f32:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f34:	0019      	movs	r1, r3
 8000f36:	0010      	movs	r0, r2
 8000f38:	f001 fce9 	bl	800290e <HAL_GPIO_TogglePin>
	 }
 8000f3c:	e009      	b.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x4e>
		 } else if(htim->Instance == TIM7){
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d104      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x4e>
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f001 fcde 	bl	800290e <HAL_GPIO_TogglePin>
	 }
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	50000800 	.word	0x50000800
 8000f60:	40001000 	.word	0x40001000
 8000f64:	50000400 	.word	0x50000400
 8000f68:	40001400 	.word	0x40001400

08000f6c <HAL_UART_RxCpltCallback>:
		 HAL_UART_Receive_IT(&huart2, 20, 20);
	 }

	 /* UART Interrupt Handler */
	 // Handles receiving of bytes
	 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
		 UNUSED(huart);

		 /* Test message to confirm receiving works */
		 char msg[20];
		 sprintf(msg, "Message received\n\r");
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_UART_RxCpltCallback+0x38>)
 8000f76:	240c      	movs	r4, #12
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f006 fdb7 	bl	8007af0 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff f8bd 	bl	8000104 <strlen>
 8000f8a:	0003      	movs	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	2301      	movs	r3, #1
 8000f90:	425b      	negs	r3, r3
 8000f92:	1939      	adds	r1, r7, r4
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <HAL_UART_RxCpltCallback+0x3c>)
 8000f96:	f004 fa2d 	bl	80053f4 <HAL_UART_Transmit>
	 }
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b009      	add	sp, #36	; 0x24
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	080084dc 	.word	0x080084dc
 8000fa8:	20000260 	.word	0x20000260

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_MspInit+0x4c>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_MspInit+0x4c>)
 8000fd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_MspInit+0x4c>)
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	0549      	lsls	r1, r1, #21
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	055b      	lsls	r3, r3, #21
 8000fec:	4013      	ands	r3, r2
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000ff2:	23c0      	movs	r3, #192	; 0xc0
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 faf4 	bl	80015e4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b08b      	sub	sp, #44	; 0x2c
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	2414      	movs	r4, #20
 8001012:	193b      	adds	r3, r7, r4
 8001014:	0018      	movs	r0, r3
 8001016:	2314      	movs	r3, #20
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f006 fd88 	bl	8007b30 <memset>
  if(hadc->Instance==ADC1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a18      	ldr	r2, [pc, #96]	; (8001088 <HAL_ADC_MspInit+0x80>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d129      	bne.n	800107e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_ADC_MspInit+0x84>)
 800102c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_ADC_MspInit+0x84>)
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	0349      	lsls	r1, r1, #13
 8001034:	430a      	orrs	r2, r1
 8001036:	641a      	str	r2, [r3, #64]	; 0x40
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_ADC_MspInit+0x84>)
 800103a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	035b      	lsls	r3, r3, #13
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_ADC_MspInit+0x84>)
 8001048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_ADC_MspInit+0x84>)
 800104c:	2101      	movs	r1, #1
 800104e:	430a      	orrs	r2, r1
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_ADC_MspInit+0x84>)
 8001054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001056:	2201      	movs	r2, #1
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 800105e:	193b      	adds	r3, r7, r4
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001064:	193b      	adds	r3, r7, r4
 8001066:	2203      	movs	r2, #3
 8001068:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	193b      	adds	r3, r7, r4
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001070:	193a      	adds	r2, r7, r4
 8001072:	23a0      	movs	r3, #160	; 0xa0
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	0011      	movs	r1, r2
 8001078:	0018      	movs	r0, r3
 800107a:	f001 fac7 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b00b      	add	sp, #44	; 0x2c
 8001084:	bd90      	pop	{r4, r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	40012400 	.word	0x40012400
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b097      	sub	sp, #92	; 0x5c
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	2344      	movs	r3, #68	; 0x44
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	0018      	movs	r0, r3
 800109e:	2314      	movs	r3, #20
 80010a0:	001a      	movs	r2, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	f006 fd44 	bl	8007b30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	2410      	movs	r4, #16
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	0018      	movs	r0, r3
 80010ae:	2334      	movs	r3, #52	; 0x34
 80010b0:	001a      	movs	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	f006 fd3c 	bl	8007b30 <memset>
  if(hi2c->Instance==I2C1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <HAL_I2C_MspInit+0xb8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d13e      	bne.n	8001140 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	2220      	movs	r2, #32
 80010c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	0018      	movs	r0, r3
 80010d2:	f002 fded 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010da:	f7ff ff67 	bl	8000fac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_I2C_MspInit+0xbc>)
 80010e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_I2C_MspInit+0xbc>)
 80010e4:	2102      	movs	r1, #2
 80010e6:	430a      	orrs	r2, r1
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_I2C_MspInit+0xbc>)
 80010ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ee:	2202      	movs	r2, #2
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010f6:	2144      	movs	r1, #68	; 0x44
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	22c0      	movs	r2, #192	; 0xc0
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2212      	movs	r2, #18
 8001104:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2206      	movs	r2, #6
 8001116:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	187b      	adds	r3, r7, r1
 800111a:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <HAL_I2C_MspInit+0xc0>)
 800111c:	0019      	movs	r1, r3
 800111e:	0010      	movs	r0, r2
 8001120:	f001 fa74 	bl	800260c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_I2C_MspInit+0xbc>)
 8001126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_I2C_MspInit+0xbc>)
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	0389      	lsls	r1, r1, #14
 800112e:	430a      	orrs	r2, r1
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_I2C_MspInit+0xbc>)
 8001134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	039b      	lsls	r3, r3, #14
 800113a:	4013      	ands	r3, r2
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b017      	add	sp, #92	; 0x5c
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	40005400 	.word	0x40005400
 800114c:	40021000 	.word	0x40021000
 8001150:	50000400 	.word	0x50000400

08001154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	05db      	lsls	r3, r3, #23
 8001164:	429a      	cmp	r2, r3
 8001166:	d114      	bne.n	8001192 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 800116a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 800116e:	2101      	movs	r1, #1
 8001170:	430a      	orrs	r2, r1
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 8001176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001178:	2201      	movs	r2, #1
 800117a:	4013      	ands	r3, r2
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	200f      	movs	r0, #15
 8001186:	f001 f943 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800118a:	200f      	movs	r0, #15
 800118c:	f001 f955 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001190:	e044      	b.n	800121c <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM3)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a24      	ldr	r2, [pc, #144]	; (8001228 <HAL_TIM_Base_MspInit+0xd4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d10c      	bne.n	80011b6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 800119e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 80011a2:	2102      	movs	r1, #2
 80011a4:	430a      	orrs	r2, r1
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	2202      	movs	r2, #2
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
}
 80011b4:	e032      	b.n	800121c <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM6)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <HAL_TIM_Base_MspInit+0xd8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d114      	bne.n	80011ea <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 80011c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 80011c6:	2110      	movs	r1, #16
 80011c8:	430a      	orrs	r2, r1
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 80011ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d0:	2210      	movs	r2, #16
 80011d2:	4013      	ands	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2011      	movs	r0, #17
 80011de:	f001 f917 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80011e2:	2011      	movs	r0, #17
 80011e4:	f001 f929 	bl	800243a <HAL_NVIC_EnableIRQ>
}
 80011e8:	e018      	b.n	800121c <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM7)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_TIM_Base_MspInit+0xdc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d113      	bne.n	800121c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 80011f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 80011fa:	2120      	movs	r1, #32
 80011fc:	430a      	orrs	r2, r1
 80011fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_TIM_Base_MspInit+0xd0>)
 8001202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001204:	2220      	movs	r2, #32
 8001206:	4013      	ands	r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2012      	movs	r0, #18
 8001212:	f001 f8fd 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8001216:	2012      	movs	r0, #18
 8001218:	f001 f90f 	bl	800243a <HAL_NVIC_EnableIRQ>
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b006      	add	sp, #24
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	40000400 	.word	0x40000400
 800122c:	40001000 	.word	0x40001000
 8001230:	40001400 	.word	0x40001400

08001234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	240c      	movs	r4, #12
 800123e:	193b      	adds	r3, r7, r4
 8001240:	0018      	movs	r0, r3
 8001242:	2314      	movs	r3, #20
 8001244:	001a      	movs	r2, r3
 8001246:	2100      	movs	r1, #0
 8001248:	f006 fc72 	bl	8007b30 <memset>
  if(htim->Instance==TIM3)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <HAL_TIM_MspPostInit+0x70>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d122      	bne.n	800129c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_TIM_MspPostInit+0x74>)
 8001258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <HAL_TIM_MspPostInit+0x74>)
 800125c:	2101      	movs	r1, #1
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_TIM_MspPostInit+0x74>)
 8001264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001266:	2201      	movs	r2, #1
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800126e:	0021      	movs	r1, r4
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2240      	movs	r2, #64	; 0x40
 8001274:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2202      	movs	r2, #2
 800127a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2201      	movs	r2, #1
 800128c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	187a      	adds	r2, r7, r1
 8001290:	23a0      	movs	r3, #160	; 0xa0
 8001292:	05db      	lsls	r3, r3, #23
 8001294:	0011      	movs	r1, r2
 8001296:	0018      	movs	r0, r3
 8001298:	f001 f9b8 	bl	800260c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b009      	add	sp, #36	; 0x24
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	40000400 	.word	0x40000400
 80012a8:	40021000 	.word	0x40021000

080012ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b097      	sub	sp, #92	; 0x5c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	2344      	movs	r3, #68	; 0x44
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	0018      	movs	r0, r3
 80012ba:	2314      	movs	r3, #20
 80012bc:	001a      	movs	r2, r3
 80012be:	2100      	movs	r1, #0
 80012c0:	f006 fc36 	bl	8007b30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c4:	2410      	movs	r4, #16
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	0018      	movs	r0, r3
 80012ca:	2334      	movs	r3, #52	; 0x34
 80012cc:	001a      	movs	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f006 fc2e 	bl	8007b30 <memset>
  if(huart->Instance==USART2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_UART_MspInit+0xc8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d146      	bne.n	800136c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	2202      	movs	r2, #2
 80012e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012e4:	193b      	adds	r3, r7, r4
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	0018      	movs	r0, r3
 80012ee:	f002 fcdf 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d001      	beq.n	80012fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012f6:	f7ff fe59 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HAL_UART_MspInit+0xcc>)
 80012fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_UART_MspInit+0xcc>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0289      	lsls	r1, r1, #10
 8001304:	430a      	orrs	r2, r1
 8001306:	63da      	str	r2, [r3, #60]	; 0x3c
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_UART_MspInit+0xcc>)
 800130a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_UART_MspInit+0xcc>)
 8001318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_UART_MspInit+0xcc>)
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0xcc>)
 8001324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001326:	2201      	movs	r2, #1
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800132e:	2144      	movs	r1, #68	; 0x44
 8001330:	187b      	adds	r3, r7, r1
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2202      	movs	r2, #2
 800133a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2201      	movs	r2, #1
 8001340:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2201      	movs	r2, #1
 800134c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	187a      	adds	r2, r7, r1
 8001350:	23a0      	movs	r3, #160	; 0xa0
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	0011      	movs	r1, r2
 8001356:	0018      	movs	r0, r3
 8001358:	f001 f958 	bl	800260c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	201c      	movs	r0, #28
 8001362:	f001 f855 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001366:	201c      	movs	r0, #28
 8001368:	f001 f867 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b017      	add	sp, #92	; 0x5c
 8001372:	bd90      	pop	{r4, r7, pc}
 8001374:	40004400 	.word	0x40004400
 8001378:	40021000 	.word	0x40021000

0800137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001380:	e7fe      	b.n	8001380 <NMI_Handler+0x4>

08001382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <HardFault_Handler+0x4>

08001388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a0:	f000 f904 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <TIM2_IRQHandler+0x14>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f003 f832 	bl	800441c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	20000130 	.word	0x20000130

080013c4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80013ca:	0018      	movs	r0, r3
 80013cc:	f003 f826 	bl	800441c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	200001c8 	.word	0x200001c8

080013dc <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <TIM7_LPTIM2_IRQHandler+0x14>)
 80013e2:	0018      	movs	r0, r3
 80013e4:	f003 f81a 	bl	800441c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20000214 	.word	0x20000214

080013f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <USART2_IRQHandler+0x14>)
 80013fa:	0018      	movs	r0, r3
 80013fc:	f004 f8fc 	bl	80055f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	20000260 	.word	0x20000260

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	18d3      	adds	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f006 fb80 	bl	8007b40 <__errno>
 8001440:	0003      	movs	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	2301      	movs	r3, #1
 8001448:	425b      	negs	r3, r3
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	18d2      	adds	r2, r2, r3
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <_sbrk+0x64>)
 800145c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b006      	add	sp, #24
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20009000 	.word	0x20009000
 800146c:	00000400 	.word	0x00000400
 8001470:	200002f4 	.word	0x200002f4
 8001474:	20000448 	.word	0x20000448

08001478 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001486:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001488:	f7ff fff6 	bl	8001478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LoopForever+0xe>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014b2:	f006 fb4b 	bl	8007b4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80014b6:	f7ff f8c3 	bl	8000640 <main>

080014ba <LoopForever>:

LoopForever:
  b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   r0, =_estack
 80014bc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014c8:	080086b0 	.word	0x080086b0
  ldr r2, =_sbss
 80014cc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014d0:	20000448 	.word	0x20000448

080014d4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_COMP_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_Init+0x3c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Init+0x3c>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	0049      	lsls	r1, r1, #1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 f810 	bl	8001518 <HAL_InitTick>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d003      	beq.n	8001504 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e001      	b.n	8001508 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001504:	f7ff fd58 	bl	8000fb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	781b      	ldrb	r3, [r3, #0]
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	230f      	movs	r3, #15
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_InitTick+0x88>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d02b      	beq.n	8001588 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_InitTick+0x8c>)
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_InitTick+0x88>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	0019      	movs	r1, r3
 800153a:	23fa      	movs	r3, #250	; 0xfa
 800153c:	0098      	lsls	r0, r3, #2
 800153e:	f7fe fdf3 	bl	8000128 <__udivsi3>
 8001542:	0003      	movs	r3, r0
 8001544:	0019      	movs	r1, r3
 8001546:	0020      	movs	r0, r4
 8001548:	f7fe fdee 	bl	8000128 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	0018      	movs	r0, r3
 8001550:	f000 ff83 	bl	800245a <HAL_SYSTICK_Config>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d112      	bne.n	800157e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d80a      	bhi.n	8001574 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	2301      	movs	r3, #1
 8001562:	425b      	negs	r3, r3
 8001564:	2200      	movs	r2, #0
 8001566:	0018      	movs	r0, r3
 8001568:	f000 ff52 	bl	8002410 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_InitTick+0x90>)
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e00d      	b.n	8001590 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001574:	230f      	movs	r3, #15
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e008      	b.n	8001590 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800157e:	230f      	movs	r3, #15
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e003      	b.n	8001590 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001588:	230f      	movs	r3, #15
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001590:	230f      	movs	r3, #15
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	781b      	ldrb	r3, [r3, #0]
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b005      	add	sp, #20
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x1c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	001a      	movs	r2, r3
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x20>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	18d2      	adds	r2, r2, r3
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <HAL_IncTick+0x20>)
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	46c0      	nop			; (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000008 	.word	0x20000008
 80015cc:	200002f8 	.word	0x200002f8

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <HAL_GetTick+0x10>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	200002f8 	.word	0x200002f8

080015e4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40010000 	.word	0x40010000
 800160c:	fffff9ff 	.word	0xfffff9ff

08001610 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001620:	401a      	ands	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	601a      	str	r2, [r3, #0]
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	fe3fffff 	.word	0xfe3fffff

08001638 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	23e0      	movs	r3, #224	; 0xe0
 8001646:	045b      	lsls	r3, r3, #17
 8001648:	4013      	ands	r3, r2
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}

08001652 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	2104      	movs	r1, #4
 8001666:	400a      	ands	r2, r1
 8001668:	2107      	movs	r1, #7
 800166a:	4091      	lsls	r1, r2
 800166c:	000a      	movs	r2, r1
 800166e:	43d2      	mvns	r2, r2
 8001670:	401a      	ands	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2104      	movs	r1, #4
 8001676:	400b      	ands	r3, r1
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4099      	lsls	r1, r3
 800167c:	000b      	movs	r3, r1
 800167e:	431a      	orrs	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b004      	add	sp, #16
 800168a:	bd80      	pop	{r7, pc}

0800168c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	2104      	movs	r1, #4
 800169e:	400a      	ands	r2, r1
 80016a0:	2107      	movs	r1, #7
 80016a2:	4091      	lsls	r1, r2
 80016a4:	000a      	movs	r2, r1
 80016a6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2104      	movs	r1, #4
 80016ac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80016ae:	40da      	lsrs	r2, r3
 80016b0:	0013      	movs	r3, r2
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}

080016ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	23c0      	movs	r3, #192	; 0xc0
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4013      	ands	r3, r2
 80016cc:	d101      	bne.n	80016d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b002      	add	sp, #8
 80016da:	bd80      	pop	{r7, pc}

080016dc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	211f      	movs	r1, #31
 80016f0:	400a      	ands	r2, r1
 80016f2:	210f      	movs	r1, #15
 80016f4:	4091      	lsls	r1, r2
 80016f6:	000a      	movs	r2, r1
 80016f8:	43d2      	mvns	r2, r2
 80016fa:	401a      	ands	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	0e9b      	lsrs	r3, r3, #26
 8001700:	210f      	movs	r1, #15
 8001702:	4019      	ands	r1, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	201f      	movs	r0, #31
 8001708:	4003      	ands	r3, r0
 800170a:	4099      	lsls	r1, r3
 800170c:	000b      	movs	r3, r1
 800170e:	431a      	orrs	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}

0800171c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	035b      	lsls	r3, r3, #13
 800172e:	0b5b      	lsrs	r3, r3, #13
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}

0800173e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	0352      	lsls	r2, r2, #13
 8001750:	0b52      	lsrs	r2, r2, #13
 8001752:	43d2      	mvns	r2, r2
 8001754:	401a      	ands	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	0212      	lsls	r2, r2, #8
 8001778:	43d2      	mvns	r2, r2
 800177a:	401a      	ands	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	400b      	ands	r3, r1
 8001784:	4904      	ldr	r1, [pc, #16]	; (8001798 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001786:	400b      	ands	r3, r1
 8001788:	431a      	orrs	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b004      	add	sp, #16
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	07ffff00 	.word	0x07ffff00

0800179c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	0552      	lsls	r2, r2, #21
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	6fffffe8 	.word	0x6fffffe8

080017c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	055b      	lsls	r3, r3, #21
 80017d4:	401a      	ands	r2, r3
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	055b      	lsls	r3, r3, #21
 80017da:	429a      	cmp	r2, r3
 80017dc:	d101      	bne.n	80017e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}

080017ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <LL_ADC_Enable+0x20>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	2201      	movs	r2, #1
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}
 800180c:	7fffffe8 	.word	0x7fffffe8

08001810 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2201      	movs	r2, #1
 800181e:	4013      	ands	r3, r2
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <LL_ADC_IsEnabled+0x18>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <LL_ADC_IsEnabled+0x1a>
 8001828:	2300      	movs	r3, #0
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <LL_ADC_REG_StartConversion+0x20>)
 8001842:	4013      	ands	r3, r2
 8001844:	2204      	movs	r2, #4
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}
 8001854:	7fffffe8 	.word	0x7fffffe8

08001858 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2204      	movs	r2, #4
 8001866:	4013      	ands	r3, r2
 8001868:	2b04      	cmp	r3, #4
 800186a:	d101      	bne.n	8001870 <LL_ADC_REG_IsConversionOngoing+0x18>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001870:	2300      	movs	r3, #0
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001884:	231f      	movs	r3, #31
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e17f      	b.n	8001ba2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10a      	bne.n	80018c0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7ff fbab 	bl	8001008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2254      	movs	r2, #84	; 0x54
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff ff7d 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d115      	bne.n	80018fa <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7ff ff62 	bl	800179c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018d8:	4bb4      	ldr	r3, [pc, #720]	; (8001bac <HAL_ADC_Init+0x330>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	49b4      	ldr	r1, [pc, #720]	; (8001bb0 <HAL_ADC_Init+0x334>)
 80018de:	0018      	movs	r0, r3
 80018e0:	f7fe fc22 	bl	8000128 <__udivsi3>
 80018e4:	0003      	movs	r3, r0
 80018e6:	3301      	adds	r3, #1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	0018      	movs	r0, r3
 8001900:	f7ff ff60 	bl	80017c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001904:	1e03      	subs	r3, r0, #0
 8001906:	d10f      	bne.n	8001928 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	2210      	movs	r2, #16
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2201      	movs	r2, #1
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001920:	231f      	movs	r3, #31
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff ff93 	bl	8001858 <LL_ADC_REG_IsConversionOngoing>
 8001932:	0003      	movs	r3, r0
 8001934:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	2210      	movs	r2, #16
 800193c:	4013      	ands	r3, r2
 800193e:	d000      	beq.n	8001942 <HAL_ADC_Init+0xc6>
 8001940:	e122      	b.n	8001b88 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d000      	beq.n	800194a <HAL_ADC_Init+0xce>
 8001948:	e11e      	b.n	8001b88 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	4a99      	ldr	r2, [pc, #612]	; (8001bb4 <HAL_ADC_Init+0x338>)
 8001950:	4013      	ands	r3, r2
 8001952:	2202      	movs	r2, #2
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0018      	movs	r0, r3
 8001960:	f7ff ff56 	bl	8001810 <LL_ADC_IsEnabled>
 8001964:	1e03      	subs	r3, r0, #0
 8001966:	d000      	beq.n	800196a <HAL_ADC_Init+0xee>
 8001968:	e0ad      	b.n	8001ac6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7e1b      	ldrb	r3, [r3, #24]
 8001972:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001974:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7e5b      	ldrb	r3, [r3, #25]
 800197a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800197c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7e9b      	ldrb	r3, [r3, #26]
 8001982:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001984:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_ADC_Init+0x118>
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	015b      	lsls	r3, r3, #5
 8001992:	e000      	b.n	8001996 <HAL_ADC_Init+0x11a>
 8001994:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001996:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800199c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da04      	bge.n	80019b0 <HAL_ADC_Init+0x134>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	e001      	b.n	80019b4 <HAL_ADC_Init+0x138>
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80019b4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	5c5b      	ldrb	r3, [r3, r1]
 80019bc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019be:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d115      	bne.n	80019fc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7e9b      	ldrb	r3, [r3, #26]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	0252      	lsls	r2, r2, #9
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	e00b      	b.n	80019fc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	2220      	movs	r2, #32
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	2201      	movs	r2, #1
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a08:	23e0      	movs	r3, #224	; 0xe0
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a12:	4313      	orrs	r3, r2
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_ADC_Init+0x33c>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	0f9b      	lsrs	r3, r3, #30
 8001a36:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	223c      	movs	r2, #60	; 0x3c
 8001a48:	5c9b      	ldrb	r3, [r3, r2]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d111      	bne.n	8001a72 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	0f9b      	lsrs	r3, r3, #30
 8001a54:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a5a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001a60:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001a66:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	4a50      	ldr	r2, [pc, #320]	; (8001bbc <HAL_ADC_Init+0x340>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	23c0      	movs	r3, #192	; 0xc0
 8001a8e:	061b      	lsls	r3, r3, #24
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d018      	beq.n	8001ac6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	05db      	lsls	r3, r3, #23
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d012      	beq.n	8001ac6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	061b      	lsls	r3, r3, #24
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_ADC_Init+0x344>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a44      	ldr	r2, [pc, #272]	; (8001bc4 <HAL_ADC_Init+0x348>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	23f0      	movs	r3, #240	; 0xf0
 8001abc:	039b      	lsls	r3, r3, #14
 8001abe:	401a      	ands	r2, r3
 8001ac0:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_ADC_Init+0x344>)
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ace:	001a      	movs	r2, r3
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f7ff fdbe 	bl	8001652 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	493a      	ldr	r1, [pc, #232]	; (8001bc8 <HAL_ADC_Init+0x34c>)
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	f7ff fdb6 	bl	8001652 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2110      	movs	r1, #16
 8001afa:	4249      	negs	r1, r1
 8001afc:	430a      	orrs	r2, r1
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
 8001b00:	e018      	b.n	8001b34 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	039b      	lsls	r3, r3, #14
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d112      	bne.n	8001b34 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	221c      	movs	r2, #28
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2210      	movs	r2, #16
 8001b22:	4252      	negs	r2, r2
 8001b24:	409a      	lsls	r2, r3
 8001b26:	0011      	movs	r1, r2
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2100      	movs	r1, #0
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7ff fda6 	bl	800168c <LL_ADC_GetSamplingTimeCommonChannels>
 8001b40:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d10b      	bne.n	8001b62 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	2203      	movs	r2, #3
 8001b56:	4393      	bics	r3, r2
 8001b58:	2201      	movs	r2, #1
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b60:	e01c      	b.n	8001b9c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	2212      	movs	r2, #18
 8001b68:	4393      	bics	r3, r2
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	2201      	movs	r2, #1
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001b7e:	231f      	movs	r3, #31
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b86:	e009      	b.n	8001b9c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	2210      	movs	r2, #16
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b94:	231f      	movs	r3, #31
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001b9c:	231f      	movs	r3, #31
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	781b      	ldrb	r3, [r3, #0]
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b008      	add	sp, #32
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	00030d40 	.word	0x00030d40
 8001bb4:	fffffefd 	.word	0xfffffefd
 8001bb8:	ffde0201 	.word	0xffde0201
 8001bbc:	1ffffc02 	.word	0x1ffffc02
 8001bc0:	40012708 	.word	0x40012708
 8001bc4:	ffc3ffff 	.word	0xffc3ffff
 8001bc8:	07ffff04 	.word	0x07ffff04

08001bcc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d102      	bne.n	8001be4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001bde:	2308      	movs	r3, #8
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	e00f      	b.n	8001c04 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4013      	ands	r3, r2
 8001bee:	d007      	beq.n	8001c00 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e072      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001c00:	2304      	movs	r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c04:	f7ff fce4 	bl	80015d0 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001c0c:	e01f      	b.n	8001c4e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	d01c      	beq.n	8001c4e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c14:	f7ff fcdc 	bl	80015d0 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d302      	bcc.n	8001c2a <HAL_ADC_PollForConversion+0x5e>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d111      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	d10b      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2254      	movs	r2, #84	; 0x54
 8001c46:	2100      	movs	r1, #0
 8001c48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e04b      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4013      	ands	r3, r2
 8001c58:	d0d9      	beq.n	8001c0e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff fd24 	bl	80016ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c72:	1e03      	subs	r3, r0, #0
 8001c74:	d02e      	beq.n	8001cd4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7e9b      	ldrb	r3, [r3, #26]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12a      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d123      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff fde1 	bl	8001858 <LL_ADC_REG_IsConversionOngoing>
 8001c96:	1e03      	subs	r3, r0, #0
 8001c98:	d110      	bne.n	8001cbc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	210c      	movs	r1, #12
 8001ca6:	438a      	bics	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <HAL_ADC_PollForConversion+0x124>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	659a      	str	r2, [r3, #88]	; 0x58
 8001cba:	e00b      	b.n	8001cd4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2201      	movs	r2, #1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e1b      	ldrb	r3, [r3, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d103      	bne.n	8001ce4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	220c      	movs	r2, #12
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	fffffefe 	.word	0xfffffefe

08001cf4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff fda9 	bl	8001858 <LL_ADC_REG_IsConversionOngoing>
 8001d06:	1e03      	subs	r3, r0, #0
 8001d08:	d15f      	bne.n	8001dca <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2254      	movs	r2, #84	; 0x54
 8001d0e:	5c9b      	ldrb	r3, [r3, r2]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_Start_IT+0x24>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e05f      	b.n	8001dd8 <HAL_ADC_Start_IT+0xe4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2254      	movs	r2, #84	; 0x54
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d20:	250f      	movs	r5, #15
 8001d22:	197c      	adds	r4, r7, r5
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f000 fa40 	bl	80021ac <ADC_Enable>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d30:	197b      	adds	r3, r7, r5
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d143      	bne.n	8001dc0 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <HAL_ADC_Start_IT+0xec>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2280      	movs	r2, #128	; 0x80
 8001d42:	0052      	lsls	r2, r2, #1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	221c      	movs	r2, #28
 8001d56:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2254      	movs	r2, #84	; 0x54
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	211c      	movs	r1, #28
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d108      	bne.n	8001d8a <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2108      	movs	r1, #8
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]
          break;
 8001d88:	e008      	b.n	8001d9c <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2104      	movs	r1, #4
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
          break;
 8001d9a:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d107      	bne.n	8001db4 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2110      	movs	r1, #16
 8001db0:	430a      	orrs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff fd3b 	bl	8001834 <LL_ADC_REG_StartConversion>
 8001dbe:	e008      	b.n	8001dd2 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2254      	movs	r2, #84	; 0x54
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	5499      	strb	r1, [r3, r2]
 8001dc8:	e003      	b.n	8001dd2 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dca:	230f      	movs	r3, #15
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2202      	movs	r2, #2
 8001dd0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	781b      	ldrb	r3, [r3, #0]
}
 8001dd8:	0018      	movs	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b004      	add	sp, #16
 8001dde:	bdb0      	pop	{r4, r5, r7, pc}
 8001de0:	fffff0fe 	.word	0xfffff0fe

08001de4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e06:	2317      	movs	r3, #23
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2254      	movs	r2, #84	; 0x54
 8001e16:	5c9b      	ldrb	r3, [r3, r2]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x24>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e1c0      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x3a6>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2254      	movs	r2, #84	; 0x54
 8001e24:	2101      	movs	r1, #1
 8001e26:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff fd13 	bl	8001858 <LL_ADC_REG_IsConversionOngoing>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d000      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0x3c>
 8001e36:	e1a3      	b.n	8002180 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d100      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x46>
 8001e40:	e143      	b.n	80020ca <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d004      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e52:	4ac1      	ldr	r2, [pc, #772]	; (8002158 <HAL_ADC_ConfigChannel+0x35c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d108      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0019      	movs	r1, r3
 8001e62:	0010      	movs	r0, r2
 8001e64:	f7ff fc5a 	bl	800171c <LL_ADC_REG_SetSequencerChAdd>
 8001e68:	e0c9      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	211f      	movs	r1, #31
 8001e74:	400b      	ands	r3, r1
 8001e76:	210f      	movs	r1, #15
 8001e78:	4099      	lsls	r1, r3
 8001e7a:	000b      	movs	r3, r1
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	035b      	lsls	r3, r3, #13
 8001e88:	0b5b      	lsrs	r3, r3, #13
 8001e8a:	d105      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x9c>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0e9b      	lsrs	r3, r3, #26
 8001e92:	221f      	movs	r2, #31
 8001e94:	4013      	ands	r3, r2
 8001e96:	e098      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d000      	beq.n	8001ea4 <HAL_ADC_ConfigChannel+0xa8>
 8001ea2:	e091      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d000      	beq.n	8001eb0 <HAL_ADC_ConfigChannel+0xb4>
 8001eae:	e089      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x1c8>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d000      	beq.n	8001ebc <HAL_ADC_ConfigChannel+0xc0>
 8001eba:	e081      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x1c4>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d000      	beq.n	8001ec8 <HAL_ADC_ConfigChannel+0xcc>
 8001ec6:	e079      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1c0>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2210      	movs	r2, #16
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d000      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0xd8>
 8001ed2:	e071      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x1bc>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	4013      	ands	r3, r2
 8001edc:	d000      	beq.n	8001ee0 <HAL_ADC_ConfigChannel+0xe4>
 8001ede:	e069      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x1b8>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2240      	movs	r2, #64	; 0x40
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d000      	beq.n	8001eec <HAL_ADC_ConfigChannel+0xf0>
 8001eea:	e061      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x1b4>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d000      	beq.n	8001ef8 <HAL_ADC_ConfigChannel+0xfc>
 8001ef6:	e059      	b.n	8001fac <HAL_ADC_ConfigChannel+0x1b0>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d151      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1ac>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d149      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1a8>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d141      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1a4>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	4013      	ands	r3, r2
 8001f26:	d139      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1a0>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	015b      	lsls	r3, r3, #5
 8001f30:	4013      	ands	r3, r2
 8001f32:	d131      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x19c>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	019b      	lsls	r3, r3, #6
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d129      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x198>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	01db      	lsls	r3, r3, #7
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d121      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x194>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	4013      	ands	r3, r2
 8001f56:	d119      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x190>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	4013      	ands	r3, r2
 8001f62:	d111      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x18c>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d109      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x188>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	02db      	lsls	r3, r3, #11
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d001      	beq.n	8001f80 <HAL_ADC_ConfigChannel+0x184>
 8001f7c:	2312      	movs	r3, #18
 8001f7e:	e024      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001f80:	2300      	movs	r3, #0
 8001f82:	e022      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001f84:	2311      	movs	r3, #17
 8001f86:	e020      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001f88:	2310      	movs	r3, #16
 8001f8a:	e01e      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	e01c      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001f90:	230e      	movs	r3, #14
 8001f92:	e01a      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001f94:	230d      	movs	r3, #13
 8001f96:	e018      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001f98:	230c      	movs	r3, #12
 8001f9a:	e016      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001f9c:	230b      	movs	r3, #11
 8001f9e:	e014      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fa0:	230a      	movs	r3, #10
 8001fa2:	e012      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fa4:	2309      	movs	r3, #9
 8001fa6:	e010      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fa8:	2308      	movs	r3, #8
 8001faa:	e00e      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fac:	2307      	movs	r3, #7
 8001fae:	e00c      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fb0:	2306      	movs	r3, #6
 8001fb2:	e00a      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fb4:	2305      	movs	r3, #5
 8001fb6:	e008      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fb8:	2304      	movs	r3, #4
 8001fba:	e006      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e004      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e002      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_ConfigChannel+0x1ce>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	6852      	ldr	r2, [r2, #4]
 8001fce:	201f      	movs	r0, #31
 8001fd0:	4002      	ands	r2, r0
 8001fd2:	4093      	lsls	r3, r2
 8001fd4:	000a      	movs	r2, r1
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d808      	bhi.n	8001ffe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	001a      	movs	r2, r3
 8001ffa:	f7ff fb6f 	bl	80016dc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	001a      	movs	r2, r3
 800200c:	f7ff fbaa 	bl	8001764 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db00      	blt.n	800201a <HAL_ADC_ConfigChannel+0x21e>
 8002018:	e0bc      	b.n	8002194 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800201a:	4b50      	ldr	r3, [pc, #320]	; (800215c <HAL_ADC_ConfigChannel+0x360>)
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff fb0b 	bl	8001638 <LL_ADC_GetCommonPathInternalCh>
 8002022:	0003      	movs	r3, r0
 8002024:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a4d      	ldr	r2, [pc, #308]	; (8002160 <HAL_ADC_ConfigChannel+0x364>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d122      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002038:	d11d      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2280      	movs	r2, #128	; 0x80
 800203e:	0412      	lsls	r2, r2, #16
 8002040:	4313      	orrs	r3, r2
 8002042:	4a46      	ldr	r2, [pc, #280]	; (800215c <HAL_ADC_ConfigChannel+0x360>)
 8002044:	0019      	movs	r1, r3
 8002046:	0010      	movs	r0, r2
 8002048:	f7ff fae2 	bl	8001610 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800204c:	4b45      	ldr	r3, [pc, #276]	; (8002164 <HAL_ADC_ConfigChannel+0x368>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4945      	ldr	r1, [pc, #276]	; (8002168 <HAL_ADC_ConfigChannel+0x36c>)
 8002052:	0018      	movs	r0, r3
 8002054:	f7fe f868 	bl	8000128 <__udivsi3>
 8002058:	0003      	movs	r3, r0
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	0013      	movs	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	189b      	adds	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002066:	e002      	b.n	800206e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3b01      	subs	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f9      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002074:	e08e      	b.n	8002194 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a3c      	ldr	r2, [pc, #240]	; (800216c <HAL_ADC_ConfigChannel+0x370>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10e      	bne.n	800209e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	045b      	lsls	r3, r3, #17
 8002086:	4013      	ands	r3, r2
 8002088:	d109      	bne.n	800209e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	0452      	lsls	r2, r2, #17
 8002090:	4313      	orrs	r3, r2
 8002092:	4a32      	ldr	r2, [pc, #200]	; (800215c <HAL_ADC_ConfigChannel+0x360>)
 8002094:	0019      	movs	r1, r3
 8002096:	0010      	movs	r0, r2
 8002098:	f7ff faba 	bl	8001610 <LL_ADC_SetCommonPathInternalCh>
 800209c:	e07a      	b.n	8002194 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a33      	ldr	r2, [pc, #204]	; (8002170 <HAL_ADC_ConfigChannel+0x374>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d000      	beq.n	80020aa <HAL_ADC_ConfigChannel+0x2ae>
 80020a8:	e074      	b.n	8002194 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	03db      	lsls	r3, r3, #15
 80020b0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80020b2:	d000      	beq.n	80020b6 <HAL_ADC_ConfigChannel+0x2ba>
 80020b4:	e06e      	b.n	8002194 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	03d2      	lsls	r2, r2, #15
 80020bc:	4313      	orrs	r3, r2
 80020be:	4a27      	ldr	r2, [pc, #156]	; (800215c <HAL_ADC_ConfigChannel+0x360>)
 80020c0:	0019      	movs	r1, r3
 80020c2:	0010      	movs	r0, r2
 80020c4:	f7ff faa4 	bl	8001610 <LL_ADC_SetCommonPathInternalCh>
 80020c8:	e064      	b.n	8002194 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80020da:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_ADC_ConfigChannel+0x35c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d107      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0019      	movs	r1, r3
 80020ea:	0010      	movs	r0, r2
 80020ec:	f7ff fb27 	bl	800173e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da4d      	bge.n	8002194 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_ADC_ConfigChannel+0x360>)
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7ff fa9c 	bl	8001638 <LL_ADC_GetCommonPathInternalCh>
 8002100:	0003      	movs	r3, r0
 8002102:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_ADC_ConfigChannel+0x364>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d108      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <HAL_ADC_ConfigChannel+0x378>)
 8002112:	4013      	ands	r3, r2
 8002114:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_ADC_ConfigChannel+0x360>)
 8002116:	0019      	movs	r1, r3
 8002118:	0010      	movs	r0, r2
 800211a:	f7ff fa79 	bl	8001610 <LL_ADC_SetCommonPathInternalCh>
 800211e:	e039      	b.n	8002194 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_ADC_ConfigChannel+0x370>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d108      	bne.n	800213c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <HAL_ADC_ConfigChannel+0x37c>)
 800212e:	4013      	ands	r3, r2
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <HAL_ADC_ConfigChannel+0x360>)
 8002132:	0019      	movs	r1, r3
 8002134:	0010      	movs	r0, r2
 8002136:	f7ff fa6b 	bl	8001610 <LL_ADC_SetCommonPathInternalCh>
 800213a:	e02b      	b.n	8002194 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <HAL_ADC_ConfigChannel+0x374>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d126      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_ADC_ConfigChannel+0x380>)
 800214a:	4013      	ands	r3, r2
 800214c:	4a03      	ldr	r2, [pc, #12]	; (800215c <HAL_ADC_ConfigChannel+0x360>)
 800214e:	0019      	movs	r1, r3
 8002150:	0010      	movs	r0, r2
 8002152:	f7ff fa5d 	bl	8001610 <LL_ADC_SetCommonPathInternalCh>
 8002156:	e01d      	b.n	8002194 <HAL_ADC_ConfigChannel+0x398>
 8002158:	80000004 	.word	0x80000004
 800215c:	40012708 	.word	0x40012708
 8002160:	b0001000 	.word	0xb0001000
 8002164:	20000000 	.word	0x20000000
 8002168:	00030d40 	.word	0x00030d40
 800216c:	b8004000 	.word	0xb8004000
 8002170:	b4002000 	.word	0xb4002000
 8002174:	ff7fffff 	.word	0xff7fffff
 8002178:	feffffff 	.word	0xfeffffff
 800217c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	2220      	movs	r2, #32
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800218c:	2317      	movs	r3, #23
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2254      	movs	r2, #84	; 0x54
 8002198:	2100      	movs	r1, #0
 800219a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800219c:	2317      	movs	r3, #23
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	781b      	ldrb	r3, [r3, #0]
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b006      	add	sp, #24
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)

080021ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff fb27 	bl	8001810 <LL_ADC_IsEnabled>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d000      	beq.n	80021c8 <ADC_Enable+0x1c>
 80021c6:	e069      	b.n	800229c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4a36      	ldr	r2, [pc, #216]	; (80022a8 <ADC_Enable+0xfc>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	d00d      	beq.n	80021f0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	2210      	movs	r2, #16
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2201      	movs	r2, #1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e056      	b.n	800229e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff faf9 	bl	80017ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <ADC_Enable+0x100>)
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff fa1b 	bl	8001638 <LL_ADC_GetCommonPathInternalCh>
 8002202:	0002      	movs	r2, r0
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	4013      	ands	r3, r2
 800220a:	d00f      	beq.n	800222c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800220c:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <ADC_Enable+0x104>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4928      	ldr	r1, [pc, #160]	; (80022b4 <ADC_Enable+0x108>)
 8002212:	0018      	movs	r0, r3
 8002214:	f7fd ff88 	bl	8000128 <__udivsi3>
 8002218:	0003      	movs	r3, r0
 800221a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800221c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800221e:	e002      	b.n	8002226 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3b01      	subs	r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f9      	bne.n	8002220 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7e5b      	ldrb	r3, [r3, #25]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d033      	beq.n	800229c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002234:	f7ff f9cc 	bl	80015d0 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800223c:	e027      	b.n	800228e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0018      	movs	r0, r3
 8002244:	f7ff fae4 	bl	8001810 <LL_ADC_IsEnabled>
 8002248:	1e03      	subs	r3, r0, #0
 800224a:	d104      	bne.n	8002256 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff facb 	bl	80017ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002256:	f7ff f9bb 	bl	80015d0 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d914      	bls.n	800228e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	2b01      	cmp	r3, #1
 8002270:	d00d      	beq.n	800228e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	2210      	movs	r2, #16
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2201      	movs	r2, #1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e007      	b.n	800229e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2201      	movs	r2, #1
 8002296:	4013      	ands	r3, r2
 8002298:	2b01      	cmp	r3, #1
 800229a:	d1d0      	bne.n	800223e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b004      	add	sp, #16
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	80000017 	.word	0x80000017
 80022ac:	40012708 	.word	0x40012708
 80022b0:	20000000 	.word	0x20000000
 80022b4:	00030d40 	.word	0x00030d40

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	0002      	movs	r2, r0
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022c4:	1dfb      	adds	r3, r7, #7
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b7f      	cmp	r3, #127	; 0x7f
 80022ca:	d809      	bhi.n	80022e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	001a      	movs	r2, r3
 80022d2:	231f      	movs	r3, #31
 80022d4:	401a      	ands	r2, r3
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_EnableIRQ+0x30>)
 80022d8:	2101      	movs	r1, #1
 80022da:	4091      	lsls	r1, r2
 80022dc:	000a      	movs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	0002      	movs	r2, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002300:	d828      	bhi.n	8002354 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002302:	4a2f      	ldr	r2, [pc, #188]	; (80023c0 <__NVIC_SetPriority+0xd4>)
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b25b      	sxtb	r3, r3
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	33c0      	adds	r3, #192	; 0xc0
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	589b      	ldr	r3, [r3, r2]
 8002312:	1dfa      	adds	r2, r7, #7
 8002314:	7812      	ldrb	r2, [r2, #0]
 8002316:	0011      	movs	r1, r2
 8002318:	2203      	movs	r2, #3
 800231a:	400a      	ands	r2, r1
 800231c:	00d2      	lsls	r2, r2, #3
 800231e:	21ff      	movs	r1, #255	; 0xff
 8002320:	4091      	lsls	r1, r2
 8002322:	000a      	movs	r2, r1
 8002324:	43d2      	mvns	r2, r2
 8002326:	401a      	ands	r2, r3
 8002328:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	019b      	lsls	r3, r3, #6
 800232e:	22ff      	movs	r2, #255	; 0xff
 8002330:	401a      	ands	r2, r3
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	0018      	movs	r0, r3
 8002338:	2303      	movs	r3, #3
 800233a:	4003      	ands	r3, r0
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002340:	481f      	ldr	r0, [pc, #124]	; (80023c0 <__NVIC_SetPriority+0xd4>)
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b25b      	sxtb	r3, r3
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	430a      	orrs	r2, r1
 800234c:	33c0      	adds	r3, #192	; 0xc0
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002352:	e031      	b.n	80023b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002354:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <__NVIC_SetPriority+0xd8>)
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	0019      	movs	r1, r3
 800235c:	230f      	movs	r3, #15
 800235e:	400b      	ands	r3, r1
 8002360:	3b08      	subs	r3, #8
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3306      	adds	r3, #6
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	18d3      	adds	r3, r2, r3
 800236a:	3304      	adds	r3, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1dfa      	adds	r2, r7, #7
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	0011      	movs	r1, r2
 8002374:	2203      	movs	r2, #3
 8002376:	400a      	ands	r2, r1
 8002378:	00d2      	lsls	r2, r2, #3
 800237a:	21ff      	movs	r1, #255	; 0xff
 800237c:	4091      	lsls	r1, r2
 800237e:	000a      	movs	r2, r1
 8002380:	43d2      	mvns	r2, r2
 8002382:	401a      	ands	r2, r3
 8002384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	22ff      	movs	r2, #255	; 0xff
 800238c:	401a      	ands	r2, r3
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	0018      	movs	r0, r3
 8002394:	2303      	movs	r3, #3
 8002396:	4003      	ands	r3, r0
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239c:	4809      	ldr	r0, [pc, #36]	; (80023c4 <__NVIC_SetPriority+0xd8>)
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	001c      	movs	r4, r3
 80023a4:	230f      	movs	r3, #15
 80023a6:	4023      	ands	r3, r4
 80023a8:	3b08      	subs	r3, #8
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	430a      	orrs	r2, r1
 80023ae:	3306      	adds	r3, #6
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	18c3      	adds	r3, r0, r3
 80023b4:	3304      	adds	r3, #4
 80023b6:	601a      	str	r2, [r3, #0]
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b003      	add	sp, #12
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1e5a      	subs	r2, r3, #1
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	045b      	lsls	r3, r3, #17
 80023d8:	429a      	cmp	r2, r3
 80023da:	d301      	bcc.n	80023e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023dc:	2301      	movs	r3, #1
 80023de:	e010      	b.n	8002402 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <SysTick_Config+0x44>)
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	3a01      	subs	r2, #1
 80023e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e8:	2301      	movs	r3, #1
 80023ea:	425b      	negs	r3, r3
 80023ec:	2103      	movs	r1, #3
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7ff ff7c 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <SysTick_Config+0x44>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <SysTick_Config+0x44>)
 80023fc:	2207      	movs	r2, #7
 80023fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002400:	2300      	movs	r3, #0
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b002      	add	sp, #8
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	210f      	movs	r1, #15
 800241c:	187b      	adds	r3, r7, r1
 800241e:	1c02      	adds	r2, r0, #0
 8002420:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	187b      	adds	r3, r7, r1
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	0011      	movs	r1, r2
 800242c:	0018      	movs	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	0002      	movs	r2, r0
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b25b      	sxtb	r3, r3
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff ff33 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff ffaf 	bl	80023c8 <SysTick_Config>
 800246a:	0003      	movs	r3, r0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e050      	b.n	8002528 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2225      	movs	r2, #37	; 0x25
 800248a:	5c9b      	ldrb	r3, [r3, r2]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d008      	beq.n	80024a4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	; 0x24
 800249c:	2100      	movs	r1, #0
 800249e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e041      	b.n	8002528 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	210e      	movs	r1, #14
 80024b0:	438a      	bics	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	491c      	ldr	r1, [pc, #112]	; (8002530 <HAL_DMA_Abort+0xbc>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2101      	movs	r1, #1
 80024d0:	438a      	bics	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_DMA_Abort+0xc0>)
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	221c      	movs	r2, #28
 80024de:	4013      	ands	r3, r2
 80024e0:	2201      	movs	r2, #1
 80024e2:	409a      	lsls	r2, r3
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_DMA_Abort+0xc0>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00c      	beq.n	8002516 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <HAL_DMA_Abort+0xbc>)
 8002508:	400a      	ands	r2, r1
 800250a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002514:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2225      	movs	r2, #37	; 0x25
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2224      	movs	r2, #36	; 0x24
 8002522:	2100      	movs	r1, #0
 8002524:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}
 8002530:	fffffeff 	.word	0xfffffeff
 8002534:	40020000 	.word	0x40020000

08002538 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	210f      	movs	r1, #15
 8002542:	187b      	adds	r3, r7, r1
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2225      	movs	r2, #37	; 0x25
 800254c:	5c9b      	ldrb	r3, [r3, r2]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d006      	beq.n	8002562 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2204      	movs	r2, #4
 8002558:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800255a:	187b      	adds	r3, r7, r1
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e049      	b.n	80025f6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	210e      	movs	r1, #14
 800256e:	438a      	bics	r2, r1
 8002570:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2101      	movs	r1, #1
 800257e:	438a      	bics	r2, r1
 8002580:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	491d      	ldr	r1, [pc, #116]	; (8002604 <HAL_DMA_Abort_IT+0xcc>)
 800258e:	400a      	ands	r2, r1
 8002590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_DMA_Abort_IT+0xd0>)
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	221c      	movs	r2, #28
 800259c:	4013      	ands	r3, r2
 800259e:	2201      	movs	r2, #1
 80025a0:	409a      	lsls	r2, r3
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_DMA_Abort_IT+0xd0>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00c      	beq.n	80025d4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c4:	490f      	ldr	r1, [pc, #60]	; (8002604 <HAL_DMA_Abort_IT+0xcc>)
 80025c6:	400a      	ands	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2225      	movs	r2, #37	; 0x25
 80025d8:	2101      	movs	r1, #1
 80025da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	2100      	movs	r1, #0
 80025e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	0010      	movs	r0, r2
 80025f4:	4798      	blx	r3
    }
  }
  return status;
 80025f6:	230f      	movs	r3, #15
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	781b      	ldrb	r3, [r3, #0]
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b004      	add	sp, #16
 8002602:	bd80      	pop	{r7, pc}
 8002604:	fffffeff 	.word	0xfffffeff
 8002608:	40020000 	.word	0x40020000

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261a:	e147      	b.n	80028ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4091      	lsls	r1, r2
 8002626:	000a      	movs	r2, r1
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d100      	bne.n	8002634 <HAL_GPIO_Init+0x28>
 8002632:	e138      	b.n	80028a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	4013      	ands	r3, r2
 800263c:	2b01      	cmp	r3, #1
 800263e:	d005      	beq.n	800264c <HAL_GPIO_Init+0x40>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2203      	movs	r2, #3
 8002646:	4013      	ands	r3, r2
 8002648:	2b02      	cmp	r3, #2
 800264a:	d130      	bne.n	80026ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	43da      	mvns	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	409a      	lsls	r2, r3
 800266e:	0013      	movs	r3, r2
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002682:	2201      	movs	r2, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
 8002688:	0013      	movs	r3, r2
 800268a:	43da      	mvns	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	2201      	movs	r2, #1
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d017      	beq.n	80026ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d123      	bne.n	800273e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	58d3      	ldr	r3, [r2, r3]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2207      	movs	r2, #7
 8002708:	4013      	ands	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	409a      	lsls	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	43da      	mvns	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2107      	movs	r1, #7
 8002722:	400b      	ands	r3, r1
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	409a      	lsls	r2, r3
 8002728:	0013      	movs	r3, r2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	6939      	ldr	r1, [r7, #16]
 800273c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2203      	movs	r2, #3
 800274a:	409a      	lsls	r2, r3
 800274c:	0013      	movs	r3, r2
 800274e:	43da      	mvns	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2203      	movs	r2, #3
 800275c:	401a      	ands	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	0013      	movs	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	4013      	ands	r3, r2
 800277c:	d100      	bne.n	8002780 <HAL_GPIO_Init+0x174>
 800277e:	e092      	b.n	80028a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3318      	adds	r3, #24
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	589b      	ldr	r3, [r3, r2]
 800278c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2203      	movs	r2, #3
 8002792:	4013      	ands	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	220f      	movs	r2, #15
 8002798:	409a      	lsls	r2, r3
 800279a:	0013      	movs	r3, r2
 800279c:	43da      	mvns	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	23a0      	movs	r3, #160	; 0xa0
 80027a8:	05db      	lsls	r3, r3, #23
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x1ca>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a45      	ldr	r2, [pc, #276]	; (80028c8 <HAL_GPIO_Init+0x2bc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x1c6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a44      	ldr	r2, [pc, #272]	; (80028cc <HAL_GPIO_Init+0x2c0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x1c2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a43      	ldr	r2, [pc, #268]	; (80028d0 <HAL_GPIO_Init+0x2c4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x1be>
 80027c6:	2303      	movs	r3, #3
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027ca:	2305      	movs	r3, #5
 80027cc:	e004      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e002      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <HAL_GPIO_Init+0x1cc>
 80027d6:	2300      	movs	r3, #0
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	2103      	movs	r1, #3
 80027dc:	400a      	ands	r2, r1
 80027de:	00d2      	lsls	r2, r2, #3
 80027e0:	4093      	lsls	r3, r2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027e8:	4936      	ldr	r1, [pc, #216]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	3318      	adds	r3, #24
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f6:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43da      	mvns	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	035b      	lsls	r3, r3, #13
 800280e:	4013      	ands	r3, r2
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	43da      	mvns	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	039b      	lsls	r3, r3, #14
 8002838:	4013      	ands	r3, r2
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 800284c:	2384      	movs	r3, #132	; 0x84
 800284e:	58d3      	ldr	r3, [r2, r3]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	43da      	mvns	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	029b      	lsls	r3, r3, #10
 8002864:	4013      	ands	r3, r2
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002870:	4914      	ldr	r1, [pc, #80]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 8002872:	2284      	movs	r2, #132	; 0x84
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002878:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	58d3      	ldr	r3, [r2, r3]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43da      	mvns	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	025b      	lsls	r3, r3, #9
 8002892:	4013      	ands	r3, r2
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800289e:	4909      	ldr	r1, [pc, #36]	; (80028c4 <HAL_GPIO_Init+0x2b8>)
 80028a0:	2280      	movs	r2, #128	; 0x80
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	40da      	lsrs	r2, r3
 80028b4:	1e13      	subs	r3, r2, #0
 80028b6:	d000      	beq.n	80028ba <HAL_GPIO_Init+0x2ae>
 80028b8:	e6b0      	b.n	800261c <HAL_GPIO_Init+0x10>
  }
}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b006      	add	sp, #24
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021800 	.word	0x40021800
 80028c8:	50000400 	.word	0x50000400
 80028cc:	50000800 	.word	0x50000800
 80028d0:	50000c00 	.word	0x50000c00

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	0008      	movs	r0, r1
 80028de:	0011      	movs	r1, r2
 80028e0:	1cbb      	adds	r3, r7, #2
 80028e2:	1c02      	adds	r2, r0, #0
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	1c7b      	adds	r3, r7, #1
 80028e8:	1c0a      	adds	r2, r1, #0
 80028ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028ec:	1c7b      	adds	r3, r7, #1
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028f4:	1cbb      	adds	r3, r7, #2
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028fc:	e003      	b.n	8002906 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028fe:	1cbb      	adds	r3, r7, #2
 8002900:	881a      	ldrh	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b002      	add	sp, #8
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	000a      	movs	r2, r1
 8002918:	1cbb      	adds	r3, r7, #2
 800291a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002922:	1cbb      	adds	r3, r7, #2
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4013      	ands	r3, r2
 800292a:	041a      	lsls	r2, r3, #16
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43db      	mvns	r3, r3
 8002930:	1cb9      	adds	r1, r7, #2
 8002932:	8809      	ldrh	r1, [r1, #0]
 8002934:	400b      	ands	r3, r1
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b004      	add	sp, #16
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e08f      	b.n	8002a76 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2241      	movs	r2, #65	; 0x41
 800295a:	5c9b      	ldrb	r3, [r3, r2]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d107      	bne.n	8002972 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2240      	movs	r2, #64	; 0x40
 8002966:	2100      	movs	r1, #0
 8002968:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0018      	movs	r0, r3
 800296e:	f7fe fb8f 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2241      	movs	r2, #65	; 0x41
 8002976:	2124      	movs	r1, #36	; 0x24
 8002978:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	438a      	bics	r2, r1
 8002988:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	493b      	ldr	r1, [pc, #236]	; (8002a80 <HAL_I2C_Init+0x13c>)
 8002994:	400a      	ands	r2, r1
 8002996:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4938      	ldr	r1, [pc, #224]	; (8002a84 <HAL_I2C_Init+0x140>)
 80029a4:	400a      	ands	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d108      	bne.n	80029c2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0209      	lsls	r1, r1, #8
 80029bc:	430a      	orrs	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	e007      	b.n	80029d2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2184      	movs	r1, #132	; 0x84
 80029cc:	0209      	lsls	r1, r1, #8
 80029ce:	430a      	orrs	r2, r1
 80029d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d109      	bne.n	80029ee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	0109      	lsls	r1, r1, #4
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	e007      	b.n	80029fe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4923      	ldr	r1, [pc, #140]	; (8002a88 <HAL_I2C_Init+0x144>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4920      	ldr	r1, [pc, #128]	; (8002a8c <HAL_I2C_Init+0x148>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	491a      	ldr	r1, [pc, #104]	; (8002a84 <HAL_I2C_Init+0x140>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69d9      	ldr	r1, [r3, #28]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2101      	movs	r1, #1
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2241      	movs	r2, #65	; 0x41
 8002a62:	2120      	movs	r1, #32
 8002a64:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2242      	movs	r2, #66	; 0x42
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	f0ffffff 	.word	0xf0ffffff
 8002a84:	ffff7fff 	.word	0xffff7fff
 8002a88:	fffff7ff 	.word	0xfffff7ff
 8002a8c:	02008000 	.word	0x02008000

08002a90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	0008      	movs	r0, r1
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	1c02      	adds	r2, r0, #0
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	1c0a      	adds	r2, r1, #0
 8002aac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2241      	movs	r2, #65	; 0x41
 8002ab2:	5c9b      	ldrb	r3, [r3, r2]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d000      	beq.n	8002abc <HAL_I2C_Master_Transmit+0x2c>
 8002aba:	e10a      	b.n	8002cd2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	5c9b      	ldrb	r3, [r3, r2]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_I2C_Master_Transmit+0x3a>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e104      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0x244>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2240      	movs	r2, #64	; 0x40
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fd7d 	bl	80015d0 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	0219      	lsls	r1, r3, #8
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2319      	movs	r3, #25
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f000 f91e 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0ef      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2241      	movs	r2, #65	; 0x41
 8002af8:	2121      	movs	r1, #33	; 0x21
 8002afa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2242      	movs	r2, #66	; 0x42
 8002b00:	2110      	movs	r1, #16
 8002b02:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2208      	movs	r2, #8
 8002b14:	18ba      	adds	r2, r7, r2
 8002b16:	8812      	ldrh	r2, [r2, #0]
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2bff      	cmp	r3, #255	; 0xff
 8002b28:	d906      	bls.n	8002b38 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	22ff      	movs	r2, #255	; 0xff
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	045b      	lsls	r3, r3, #17
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e007      	b.n	8002b48 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	049b      	lsls	r3, r3, #18
 8002b46:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d027      	beq.n	8002ba0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	697c      	ldr	r4, [r7, #20]
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	8819      	ldrh	r1, [r3, #0]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	4b51      	ldr	r3, [pc, #324]	; (8002cdc <HAL_I2C_Master_Transmit+0x24c>)
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	0023      	movs	r3, r4
 8002b9a:	f000 faa7 	bl	80030ec <I2C_TransferConfig>
 8002b9e:	e06f      	b.n	8002c80 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	697c      	ldr	r4, [r7, #20]
 8002ba8:	230a      	movs	r3, #10
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	8819      	ldrh	r1, [r3, #0]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <HAL_I2C_Master_Transmit+0x24c>)
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	0023      	movs	r3, r4
 8002bb6:	f000 fa99 	bl	80030ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002bba:	e061      	b.n	8002c80 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f908 	bl	8002dd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bc8:	1e03      	subs	r3, r0, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e081      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d03a      	beq.n	8002c80 <HAL_I2C_Master_Transmit+0x1f0>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d136      	bne.n	8002c80 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	f000 f882 	bl	8002d28 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	1e03      	subs	r3, r0, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e053      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2bff      	cmp	r3, #255	; 0xff
 8002c34:	d911      	bls.n	8002c5a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	045c      	lsls	r4, r3, #17
 8002c46:	230a      	movs	r3, #10
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	8819      	ldrh	r1, [r3, #0]
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	0023      	movs	r3, r4
 8002c54:	f000 fa4a 	bl	80030ec <I2C_TransferConfig>
 8002c58:	e012      	b.n	8002c80 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	049c      	lsls	r4, r3, #18
 8002c6e:	230a      	movs	r3, #10
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	8819      	ldrh	r1, [r3, #0]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	2300      	movs	r3, #0
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	0023      	movs	r3, r4
 8002c7c:	f000 fa36 	bl	80030ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d198      	bne.n	8002bbc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f000 f8e7 	bl	8002e64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e01a      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	490b      	ldr	r1, [pc, #44]	; (8002ce0 <HAL_I2C_Master_Transmit+0x250>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2241      	movs	r2, #65	; 0x41
 8002cba:	2120      	movs	r1, #32
 8002cbc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2242      	movs	r2, #66	; 0x42
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2240      	movs	r2, #64	; 0x40
 8002cca:	2100      	movs	r1, #0
 8002ccc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
  }
}
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b007      	add	sp, #28
 8002cda:	bd90      	pop	{r4, r7, pc}
 8002cdc:	80002000 	.word	0x80002000
 8002ce0:	fe00e800 	.word	0xfe00e800

08002ce4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d103      	bne.n	8002d02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d007      	beq.n	8002d20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	619a      	str	r2, [r3, #24]
  }
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	1dfb      	adds	r3, r7, #7
 8002d36:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d38:	e03a      	b.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 f8d3 	bl	8002eec <I2C_IsErrorOccurred>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e040      	b.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	d02d      	beq.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7fe fc3c 	bl	80015d0 <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d302      	bcc.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x42>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d122      	bne.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	4013      	ands	r3, r2
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	425a      	negs	r2, r3
 8002d7a:	4153      	adcs	r3, r2
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	001a      	movs	r2, r3
 8002d80:	1dfb      	adds	r3, r7, #7
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d113      	bne.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2241      	movs	r2, #65	; 0x41
 8002d98:	2120      	movs	r1, #32
 8002d9a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2242      	movs	r2, #66	; 0x42
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	2100      	movs	r1, #0
 8002daa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e00f      	b.n	8002dd0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	4013      	ands	r3, r2
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	425a      	negs	r2, r3
 8002dc0:	4153      	adcs	r3, r2
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	1dfb      	adds	r3, r7, #7
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d0b5      	beq.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b004      	add	sp, #16
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002de4:	e032      	b.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f87d 	bl	8002eec <I2C_IsErrorOccurred>
 8002df2:	1e03      	subs	r3, r0, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e030      	b.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	d025      	beq.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e00:	f7fe fbe6 	bl	80015d0 <HAL_GetTick>
 8002e04:	0002      	movs	r2, r0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d302      	bcc.n	8002e16 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11a      	bne.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d013      	beq.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e28:	2220      	movs	r2, #32
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2241      	movs	r2, #65	; 0x41
 8002e34:	2120      	movs	r1, #32
 8002e36:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2242      	movs	r2, #66	; 0x42
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2240      	movs	r2, #64	; 0x40
 8002e44:	2100      	movs	r1, #0
 8002e46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e007      	b.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2202      	movs	r2, #2
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d1c5      	bne.n	8002de6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e70:	e02f      	b.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 f837 	bl	8002eec <I2C_IsErrorOccurred>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e02d      	b.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e86:	f7fe fba3 	bl	80015d0 <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d11a      	bne.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d013      	beq.n	8002ed2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	2220      	movs	r2, #32
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2241      	movs	r2, #65	; 0x41
 8002eba:	2120      	movs	r1, #32
 8002ebc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2242      	movs	r2, #66	; 0x42
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2240      	movs	r2, #64	; 0x40
 8002eca:	2100      	movs	r1, #0
 8002ecc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d1c8      	bne.n	8002e72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b004      	add	sp, #16
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b08b      	sub	sp, #44	; 0x2c
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2327      	movs	r3, #39	; 0x27
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2210      	movs	r2, #16
 8002f14:	4013      	ands	r3, r2
 8002f16:	d100      	bne.n	8002f1a <I2C_IsErrorOccurred+0x2e>
 8002f18:	e082      	b.n	8003020 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2210      	movs	r2, #16
 8002f20:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f22:	e060      	b.n	8002fe6 <I2C_IsErrorOccurred+0xfa>
 8002f24:	2427      	movs	r4, #39	; 0x27
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	193a      	adds	r2, r7, r4
 8002f2a:	7812      	ldrb	r2, [r2, #0]
 8002f2c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3301      	adds	r3, #1
 8002f32:	d058      	beq.n	8002fe6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f34:	f7fe fb4c 	bl	80015d0 <HAL_GetTick>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d306      	bcc.n	8002f52 <I2C_IsErrorOccurred+0x66>
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	193a      	adds	r2, r7, r4
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d149      	bne.n	8002fe6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	01db      	lsls	r3, r3, #7
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f60:	2013      	movs	r0, #19
 8002f62:	183b      	adds	r3, r7, r0
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	2142      	movs	r1, #66	; 0x42
 8002f68:	5c52      	ldrb	r2, [r2, r1]
 8002f6a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	401a      	ands	r2, r3
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d126      	bne.n	8002fce <I2C_IsErrorOccurred+0xe2>
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	01db      	lsls	r3, r3, #7
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d021      	beq.n	8002fce <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002f8a:	183b      	adds	r3, r7, r0
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d01d      	beq.n	8002fce <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	01c9      	lsls	r1, r1, #7
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fa4:	f7fe fb14 	bl	80015d0 <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fac:	e00f      	b.n	8002fce <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fae:	f7fe fb0f 	bl	80015d0 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b19      	cmp	r3, #25
 8002fba:	d908      	bls.n	8002fce <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fc4:	2327      	movs	r3, #39	; 0x27
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]

              break;
 8002fcc:	e00b      	b.n	8002fe6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2127      	movs	r1, #39	; 0x27
 8002fda:	187a      	adds	r2, r7, r1
 8002fdc:	1879      	adds	r1, r7, r1
 8002fde:	7809      	ldrb	r1, [r1, #0]
 8002fe0:	7011      	strb	r1, [r2, #0]
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d1e3      	bne.n	8002fae <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2220      	movs	r2, #32
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d004      	beq.n	8002ffe <I2C_IsErrorOccurred+0x112>
 8002ff4:	2327      	movs	r3, #39	; 0x27
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d092      	beq.n	8002f24 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ffe:	2327      	movs	r3, #39	; 0x27
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2220      	movs	r2, #32
 800300e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	2204      	movs	r2, #4
 8003014:	4313      	orrs	r3, r2
 8003016:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003018:	2327      	movs	r3, #39	; 0x27
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4013      	ands	r3, r2
 8003030:	d00c      	beq.n	800304c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	2201      	movs	r2, #1
 8003036:	4313      	orrs	r3, r2
 8003038:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	0052      	lsls	r2, r2, #1
 8003042:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003044:	2327      	movs	r3, #39	; 0x27
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4013      	ands	r3, r2
 8003054:	d00c      	beq.n	8003070 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	2208      	movs	r2, #8
 800305a:	4313      	orrs	r3, r2
 800305c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	00d2      	lsls	r2, r2, #3
 8003066:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003068:	2327      	movs	r3, #39	; 0x27
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4013      	ands	r3, r2
 8003078:	d00c      	beq.n	8003094 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	2202      	movs	r2, #2
 800307e:	4313      	orrs	r3, r2
 8003080:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2280      	movs	r2, #128	; 0x80
 8003088:	0092      	lsls	r2, r2, #2
 800308a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800308c:	2327      	movs	r3, #39	; 0x27
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003094:	2327      	movs	r3, #39	; 0x27
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01d      	beq.n	80030da <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff fe1f 	bl	8002ce4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	490d      	ldr	r1, [pc, #52]	; (80030e8 <I2C_IsErrorOccurred+0x1fc>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2241      	movs	r2, #65	; 0x41
 80030c6:	2120      	movs	r1, #32
 80030c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2242      	movs	r2, #66	; 0x42
 80030ce:	2100      	movs	r1, #0
 80030d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2240      	movs	r2, #64	; 0x40
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80030da:	2327      	movs	r3, #39	; 0x27
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	781b      	ldrb	r3, [r3, #0]
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b00b      	add	sp, #44	; 0x2c
 80030e6:	bd90      	pop	{r4, r7, pc}
 80030e8:	fe00e800 	.word	0xfe00e800

080030ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	0008      	movs	r0, r1
 80030f6:	0011      	movs	r1, r2
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	240a      	movs	r4, #10
 80030fc:	193b      	adds	r3, r7, r4
 80030fe:	1c02      	adds	r2, r0, #0
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	2009      	movs	r0, #9
 8003104:	183b      	adds	r3, r7, r0
 8003106:	1c0a      	adds	r2, r1, #0
 8003108:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800310a:	193b      	adds	r3, r7, r4
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	059b      	lsls	r3, r3, #22
 8003110:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003112:	183b      	adds	r3, r7, r0
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	0419      	lsls	r1, r3, #16
 8003118:	23ff      	movs	r3, #255	; 0xff
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800311e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	4313      	orrs	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	085b      	lsrs	r3, r3, #1
 800312c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003136:	0d51      	lsrs	r1, r2, #21
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	00d2      	lsls	r2, r2, #3
 800313c:	400a      	ands	r2, r1
 800313e:	4907      	ldr	r1, [pc, #28]	; (800315c <I2C_TransferConfig+0x70>)
 8003140:	430a      	orrs	r2, r1
 8003142:	43d2      	mvns	r2, r2
 8003144:	401a      	ands	r2, r3
 8003146:	0011      	movs	r1, r2
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46bd      	mov	sp, r7
 8003156:	b007      	add	sp, #28
 8003158:	bd90      	pop	{r4, r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	03ff63ff 	.word	0x03ff63ff

08003160 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2241      	movs	r2, #65	; 0x41
 800316e:	5c9b      	ldrb	r3, [r3, r2]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	d138      	bne.n	80031e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2240      	movs	r2, #64	; 0x40
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003180:	2302      	movs	r3, #2
 8003182:	e032      	b.n	80031ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	2101      	movs	r1, #1
 800318a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2241      	movs	r2, #65	; 0x41
 8003190:	2124      	movs	r1, #36	; 0x24
 8003192:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2101      	movs	r1, #1
 80031a0:	438a      	bics	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4911      	ldr	r1, [pc, #68]	; (80031f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80031b0:	400a      	ands	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2101      	movs	r1, #1
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2241      	movs	r2, #65	; 0x41
 80031d8:	2120      	movs	r1, #32
 80031da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2240      	movs	r2, #64	; 0x40
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b002      	add	sp, #8
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	ffffefff 	.word	0xffffefff

080031f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2241      	movs	r2, #65	; 0x41
 8003206:	5c9b      	ldrb	r3, [r3, r2]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	d139      	bne.n	8003282 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2240      	movs	r2, #64	; 0x40
 8003212:	5c9b      	ldrb	r3, [r3, r2]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003218:	2302      	movs	r3, #2
 800321a:	e033      	b.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	2101      	movs	r1, #1
 8003222:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2241      	movs	r2, #65	; 0x41
 8003228:	2124      	movs	r1, #36	; 0x24
 800322a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	438a      	bics	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a11      	ldr	r2, [pc, #68]	; (800328c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2241      	movs	r2, #65	; 0x41
 8003272:	2120      	movs	r1, #32
 8003274:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2240      	movs	r2, #64	; 0x40
 800327a:	2100      	movs	r1, #0
 800327c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e000      	b.n	8003284 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
  }
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b004      	add	sp, #16
 800328a:	bd80      	pop	{r7, pc}
 800328c:	fffff0ff 	.word	0xfffff0ff

08003290 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a19      	ldr	r2, [pc, #100]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800329e:	4013      	ands	r3, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d11f      	bne.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80032b4:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	0013      	movs	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	189b      	adds	r3, r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4912      	ldr	r1, [pc, #72]	; (800330c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7fc ff30 	bl	8000128 <__udivsi3>
 80032c8:	0003      	movs	r3, r0
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ce:	e008      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e001      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e009      	b.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	401a      	ands	r2, r3
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d0ed      	beq.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	0018      	movs	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b004      	add	sp, #16
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	40007000 	.word	0x40007000
 8003304:	fffff9ff 	.word	0xfffff9ff
 8003308:	20000000 	.word	0x20000000
 800330c:	000f4240 	.word	0x000f4240

08003310 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	23e0      	movs	r3, #224	; 0xe0
 800331a:	01db      	lsls	r3, r3, #7
 800331c:	4013      	ands	r3, r2
}
 800331e:	0018      	movs	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e2fe      	b.n	8003938 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2201      	movs	r2, #1
 8003340:	4013      	ands	r3, r2
 8003342:	d100      	bne.n	8003346 <HAL_RCC_OscConfig+0x1e>
 8003344:	e07c      	b.n	8003440 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003346:	4bc3      	ldr	r3, [pc, #780]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2238      	movs	r2, #56	; 0x38
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003350:	4bc0      	ldr	r3, [pc, #768]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2203      	movs	r2, #3
 8003356:	4013      	ands	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	2b10      	cmp	r3, #16
 800335e:	d102      	bne.n	8003366 <HAL_RCC_OscConfig+0x3e>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d002      	beq.n	800336c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d10b      	bne.n	8003384 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	4bb9      	ldr	r3, [pc, #740]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	029b      	lsls	r3, r3, #10
 8003374:	4013      	ands	r3, r2
 8003376:	d062      	beq.n	800343e <HAL_RCC_OscConfig+0x116>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d15e      	bne.n	800343e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e2d9      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	025b      	lsls	r3, r3, #9
 800338c:	429a      	cmp	r2, r3
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x78>
 8003390:	4bb0      	ldr	r3, [pc, #704]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4baf      	ldr	r3, [pc, #700]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	0249      	lsls	r1, r1, #9
 800339a:	430a      	orrs	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e020      	b.n	80033e2 <HAL_RCC_OscConfig+0xba>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	23a0      	movs	r3, #160	; 0xa0
 80033a6:	02db      	lsls	r3, r3, #11
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d10e      	bne.n	80033ca <HAL_RCC_OscConfig+0xa2>
 80033ac:	4ba9      	ldr	r3, [pc, #676]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4ba8      	ldr	r3, [pc, #672]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	02c9      	lsls	r1, r1, #11
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	4ba6      	ldr	r3, [pc, #664]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4ba5      	ldr	r3, [pc, #660]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	0249      	lsls	r1, r1, #9
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e00b      	b.n	80033e2 <HAL_RCC_OscConfig+0xba>
 80033ca:	4ba2      	ldr	r3, [pc, #648]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4ba1      	ldr	r3, [pc, #644]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80033d0:	49a1      	ldr	r1, [pc, #644]	; (8003658 <HAL_RCC_OscConfig+0x330>)
 80033d2:	400a      	ands	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	4b9f      	ldr	r3, [pc, #636]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b9e      	ldr	r3, [pc, #632]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80033dc:	499f      	ldr	r1, [pc, #636]	; (800365c <HAL_RCC_OscConfig+0x334>)
 80033de:	400a      	ands	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d014      	beq.n	8003414 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe f8f1 	bl	80015d0 <HAL_GetTick>
 80033ee:	0003      	movs	r3, r0
 80033f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fe f8ec 	bl	80015d0 <HAL_GetTick>
 80033f8:	0002      	movs	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e298      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003406:	4b93      	ldr	r3, [pc, #588]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	4013      	ands	r3, r2
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0xcc>
 8003412:	e015      	b.n	8003440 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe f8dc 	bl	80015d0 <HAL_GetTick>
 8003418:	0003      	movs	r3, r0
 800341a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341e:	f7fe f8d7 	bl	80015d0 <HAL_GetTick>
 8003422:	0002      	movs	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b64      	cmp	r3, #100	; 0x64
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e283      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003430:	4b88      	ldr	r3, [pc, #544]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	029b      	lsls	r3, r3, #10
 8003438:	4013      	ands	r3, r2
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0xf6>
 800343c:	e000      	b.n	8003440 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2202      	movs	r2, #2
 8003446:	4013      	ands	r3, r2
 8003448:	d100      	bne.n	800344c <HAL_RCC_OscConfig+0x124>
 800344a:	e099      	b.n	8003580 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344c:	4b81      	ldr	r3, [pc, #516]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2238      	movs	r2, #56	; 0x38
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003456:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2203      	movs	r2, #3
 800345c:	4013      	ands	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b10      	cmp	r3, #16
 8003464:	d102      	bne.n	800346c <HAL_RCC_OscConfig+0x144>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d002      	beq.n	8003472 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d135      	bne.n	80034de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003472:	4b78      	ldr	r3, [pc, #480]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4013      	ands	r3, r2
 800347c:	d005      	beq.n	800348a <HAL_RCC_OscConfig+0x162>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e256      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348a:	4b72      	ldr	r3, [pc, #456]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4a74      	ldr	r2, [pc, #464]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003490:	4013      	ands	r3, r2
 8003492:	0019      	movs	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	021a      	lsls	r2, r3, #8
 800349a:	4b6e      	ldr	r3, [pc, #440]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 800349c:	430a      	orrs	r2, r1
 800349e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d112      	bne.n	80034cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80034a6:	4b6b      	ldr	r3, [pc, #428]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a6e      	ldr	r2, [pc, #440]	; (8003664 <HAL_RCC_OscConfig+0x33c>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	4b67      	ldr	r3, [pc, #412]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	0adb      	lsrs	r3, r3, #11
 80034c0:	2207      	movs	r2, #7
 80034c2:	4013      	ands	r3, r2
 80034c4:	4a68      	ldr	r2, [pc, #416]	; (8003668 <HAL_RCC_OscConfig+0x340>)
 80034c6:	40da      	lsrs	r2, r3
 80034c8:	4b68      	ldr	r3, [pc, #416]	; (800366c <HAL_RCC_OscConfig+0x344>)
 80034ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034cc:	4b68      	ldr	r3, [pc, #416]	; (8003670 <HAL_RCC_OscConfig+0x348>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7fe f821 	bl	8001518 <HAL_InitTick>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d051      	beq.n	800357e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e22c      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d030      	beq.n	8003548 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80034e6:	4b5b      	ldr	r3, [pc, #364]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a5e      	ldr	r2, [pc, #376]	; (8003664 <HAL_RCC_OscConfig+0x33c>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	4b57      	ldr	r3, [pc, #348]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80034fa:	4b56      	ldr	r3, [pc, #344]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b55      	ldr	r3, [pc, #340]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003500:	2180      	movs	r1, #128	; 0x80
 8003502:	0049      	lsls	r1, r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe f862 	bl	80015d0 <HAL_GetTick>
 800350c:	0003      	movs	r3, r0
 800350e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003512:	f7fe f85d 	bl	80015d0 <HAL_GetTick>
 8003516:	0002      	movs	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e209      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003524:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4013      	ands	r3, r2
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003530:	4b48      	ldr	r3, [pc, #288]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a4a      	ldr	r2, [pc, #296]	; (8003660 <HAL_RCC_OscConfig+0x338>)
 8003536:	4013      	ands	r3, r2
 8003538:	0019      	movs	r1, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	021a      	lsls	r2, r3, #8
 8003540:	4b44      	ldr	r3, [pc, #272]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	e01b      	b.n	8003580 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003548:	4b42      	ldr	r3, [pc, #264]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 800354e:	4949      	ldr	r1, [pc, #292]	; (8003674 <HAL_RCC_OscConfig+0x34c>)
 8003550:	400a      	ands	r2, r1
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe f83c 	bl	80015d0 <HAL_GetTick>
 8003558:	0003      	movs	r3, r0
 800355a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355e:	f7fe f837 	bl	80015d0 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e1e3      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4013      	ands	r3, r2
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x236>
 800357c:	e000      	b.n	8003580 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800357e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2208      	movs	r2, #8
 8003586:	4013      	ands	r3, r2
 8003588:	d047      	beq.n	800361a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800358a:	4b32      	ldr	r3, [pc, #200]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2238      	movs	r2, #56	; 0x38
 8003590:	4013      	ands	r3, r2
 8003592:	2b18      	cmp	r3, #24
 8003594:	d10a      	bne.n	80035ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003596:	4b2f      	ldr	r3, [pc, #188]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359a:	2202      	movs	r2, #2
 800359c:	4013      	ands	r3, r2
 800359e:	d03c      	beq.n	800361a <HAL_RCC_OscConfig+0x2f2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d138      	bne.n	800361a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e1c5      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d019      	beq.n	80035e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80035b4:	4b27      	ldr	r3, [pc, #156]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80035b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035b8:	4b26      	ldr	r3, [pc, #152]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80035ba:	2101      	movs	r1, #1
 80035bc:	430a      	orrs	r2, r1
 80035be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe f806 	bl	80015d0 <HAL_GetTick>
 80035c4:	0003      	movs	r3, r0
 80035c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ca:	f7fe f801 	bl	80015d0 <HAL_GetTick>
 80035ce:	0002      	movs	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e1ad      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80035de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e0:	2202      	movs	r2, #2
 80035e2:	4013      	ands	r3, r2
 80035e4:	d0f1      	beq.n	80035ca <HAL_RCC_OscConfig+0x2a2>
 80035e6:	e018      	b.n	800361a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80035ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 80035ee:	2101      	movs	r1, #1
 80035f0:	438a      	bics	r2, r1
 80035f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fd ffec 	bl	80015d0 <HAL_GetTick>
 80035f8:	0003      	movs	r3, r0
 80035fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fd ffe7 	bl	80015d0 <HAL_GetTick>
 8003602:	0002      	movs	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e193      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003614:	2202      	movs	r2, #2
 8003616:	4013      	ands	r3, r2
 8003618:	d1f1      	bne.n	80035fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2204      	movs	r2, #4
 8003620:	4013      	ands	r3, r2
 8003622:	d100      	bne.n	8003626 <HAL_RCC_OscConfig+0x2fe>
 8003624:	e0c6      	b.n	80037b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003626:	231f      	movs	r3, #31
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2238      	movs	r2, #56	; 0x38
 8003634:	4013      	ands	r3, r2
 8003636:	2b20      	cmp	r3, #32
 8003638:	d11e      	bne.n	8003678 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCC_OscConfig+0x32c>)
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2202      	movs	r2, #2
 8003640:	4013      	ands	r3, r2
 8003642:	d100      	bne.n	8003646 <HAL_RCC_OscConfig+0x31e>
 8003644:	e0b6      	b.n	80037b4 <HAL_RCC_OscConfig+0x48c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d000      	beq.n	8003650 <HAL_RCC_OscConfig+0x328>
 800364e:	e0b1      	b.n	80037b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e171      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
 8003654:	40021000 	.word	0x40021000
 8003658:	fffeffff 	.word	0xfffeffff
 800365c:	fffbffff 	.word	0xfffbffff
 8003660:	ffff80ff 	.word	0xffff80ff
 8003664:	ffffc7ff 	.word	0xffffc7ff
 8003668:	00f42400 	.word	0x00f42400
 800366c:	20000000 	.word	0x20000000
 8003670:	20000004 	.word	0x20000004
 8003674:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003678:	4bb1      	ldr	r3, [pc, #708]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 800367a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	055b      	lsls	r3, r3, #21
 8003680:	4013      	ands	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_RCC_OscConfig+0x360>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x362>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d011      	beq.n	80036b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	4bac      	ldr	r3, [pc, #688]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003692:	4bab      	ldr	r3, [pc, #684]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	0549      	lsls	r1, r1, #21
 8003698:	430a      	orrs	r2, r1
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
 800369c:	4ba8      	ldr	r3, [pc, #672]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 800369e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	055b      	lsls	r3, r3, #21
 80036a4:	4013      	ands	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80036aa:	231f      	movs	r3, #31
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b2:	4ba4      	ldr	r3, [pc, #656]	; (8003944 <HAL_RCC_OscConfig+0x61c>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	d11a      	bne.n	80036f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036be:	4ba1      	ldr	r3, [pc, #644]	; (8003944 <HAL_RCC_OscConfig+0x61c>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4ba0      	ldr	r3, [pc, #640]	; (8003944 <HAL_RCC_OscConfig+0x61c>)
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	0049      	lsls	r1, r1, #1
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80036cc:	f7fd ff80 	bl	80015d0 <HAL_GetTick>
 80036d0:	0003      	movs	r3, r0
 80036d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d6:	f7fd ff7b 	bl	80015d0 <HAL_GetTick>
 80036da:	0002      	movs	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e127      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e8:	4b96      	ldr	r3, [pc, #600]	; (8003944 <HAL_RCC_OscConfig+0x61c>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x3e2>
 80036fc:	4b90      	ldr	r3, [pc, #576]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80036fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003700:	4b8f      	ldr	r3, [pc, #572]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003702:	2101      	movs	r1, #1
 8003704:	430a      	orrs	r2, r1
 8003706:	65da      	str	r2, [r3, #92]	; 0x5c
 8003708:	e01c      	b.n	8003744 <HAL_RCC_OscConfig+0x41c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b05      	cmp	r3, #5
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0x404>
 8003712:	4b8b      	ldr	r3, [pc, #556]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003714:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003716:	4b8a      	ldr	r3, [pc, #552]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003718:	2104      	movs	r1, #4
 800371a:	430a      	orrs	r2, r1
 800371c:	65da      	str	r2, [r3, #92]	; 0x5c
 800371e:	4b88      	ldr	r3, [pc, #544]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003722:	4b87      	ldr	r3, [pc, #540]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003724:	2101      	movs	r1, #1
 8003726:	430a      	orrs	r2, r1
 8003728:	65da      	str	r2, [r3, #92]	; 0x5c
 800372a:	e00b      	b.n	8003744 <HAL_RCC_OscConfig+0x41c>
 800372c:	4b84      	ldr	r3, [pc, #528]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 800372e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003730:	4b83      	ldr	r3, [pc, #524]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003732:	2101      	movs	r1, #1
 8003734:	438a      	bics	r2, r1
 8003736:	65da      	str	r2, [r3, #92]	; 0x5c
 8003738:	4b81      	ldr	r3, [pc, #516]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 800373a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800373c:	4b80      	ldr	r3, [pc, #512]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 800373e:	2104      	movs	r1, #4
 8003740:	438a      	bics	r2, r1
 8003742:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d014      	beq.n	8003776 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fd ff40 	bl	80015d0 <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003754:	e009      	b.n	800376a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fd ff3b 	bl	80015d0 <HAL_GetTick>
 800375a:	0002      	movs	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	4a79      	ldr	r2, [pc, #484]	; (8003948 <HAL_RCC_OscConfig+0x620>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0e6      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376a:	4b75      	ldr	r3, [pc, #468]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	2202      	movs	r2, #2
 8003770:	4013      	ands	r3, r2
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x42e>
 8003774:	e013      	b.n	800379e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fd ff2b 	bl	80015d0 <HAL_GetTick>
 800377a:	0003      	movs	r3, r0
 800377c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800377e:	e009      	b.n	8003794 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003780:	f7fd ff26 	bl	80015d0 <HAL_GetTick>
 8003784:	0002      	movs	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	4a6f      	ldr	r2, [pc, #444]	; (8003948 <HAL_RCC_OscConfig+0x620>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0d1      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003794:	4b6a      	ldr	r3, [pc, #424]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	2202      	movs	r2, #2
 800379a:	4013      	ands	r3, r2
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800379e:	231f      	movs	r3, #31
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d105      	bne.n	80037b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80037a8:	4b65      	ldr	r3, [pc, #404]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80037aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ac:	4b64      	ldr	r3, [pc, #400]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80037ae:	4967      	ldr	r1, [pc, #412]	; (800394c <HAL_RCC_OscConfig+0x624>)
 80037b0:	400a      	ands	r2, r1
 80037b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d100      	bne.n	80037be <HAL_RCC_OscConfig+0x496>
 80037bc:	e0bb      	b.n	8003936 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037be:	4b60      	ldr	r3, [pc, #384]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2238      	movs	r2, #56	; 0x38
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d100      	bne.n	80037cc <HAL_RCC_OscConfig+0x4a4>
 80037ca:	e07b      	b.n	80038c4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d156      	bne.n	8003882 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d4:	4b5a      	ldr	r3, [pc, #360]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80037da:	495d      	ldr	r1, [pc, #372]	; (8003950 <HAL_RCC_OscConfig+0x628>)
 80037dc:	400a      	ands	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd fef6 	bl	80015d0 <HAL_GetTick>
 80037e4:	0003      	movs	r3, r0
 80037e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fd fef1 	bl	80015d0 <HAL_GetTick>
 80037ee:	0002      	movs	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e09d      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fc:	4b50      	ldr	r3, [pc, #320]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	049b      	lsls	r3, r3, #18
 8003804:	4013      	ands	r3, r2
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003808:	4b4d      	ldr	r3, [pc, #308]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4a51      	ldr	r2, [pc, #324]	; (8003954 <HAL_RCC_OscConfig+0x62c>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1a      	ldr	r2, [r3, #32]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	431a      	orrs	r2, r3
 8003836:	4b42      	ldr	r3, [pc, #264]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003838:	430a      	orrs	r2, r1
 800383a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b40      	ldr	r3, [pc, #256]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b3f      	ldr	r3, [pc, #252]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	0449      	lsls	r1, r1, #17
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800384a:	4b3d      	ldr	r3, [pc, #244]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	0549      	lsls	r1, r1, #21
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd feba 	bl	80015d0 <HAL_GetTick>
 800385c:	0003      	movs	r3, r0
 800385e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003862:	f7fd feb5 	bl	80015d0 <HAL_GetTick>
 8003866:	0002      	movs	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e061      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003874:	4b32      	ldr	r3, [pc, #200]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	049b      	lsls	r3, r3, #18
 800387c:	4013      	ands	r3, r2
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x53a>
 8003880:	e059      	b.n	8003936 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003882:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 8003888:	4931      	ldr	r1, [pc, #196]	; (8003950 <HAL_RCC_OscConfig+0x628>)
 800388a:	400a      	ands	r2, r1
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7fd fe9f 	bl	80015d0 <HAL_GetTick>
 8003892:	0003      	movs	r3, r0
 8003894:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fd fe9a 	bl	80015d0 <HAL_GetTick>
 800389c:	0002      	movs	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e046      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038aa:	4b25      	ldr	r3, [pc, #148]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	049b      	lsls	r3, r3, #18
 80038b2:	4013      	ands	r3, r2
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80038b6:	4b22      	ldr	r3, [pc, #136]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	4b21      	ldr	r3, [pc, #132]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80038bc:	4926      	ldr	r1, [pc, #152]	; (8003958 <HAL_RCC_OscConfig+0x630>)
 80038be:	400a      	ands	r2, r1
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	e038      	b.n	8003936 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e033      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x618>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2203      	movs	r2, #3
 80038da:	401a      	ands	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d126      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2270      	movs	r2, #112	; 0x70
 80038e8:	401a      	ands	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d11f      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	23fe      	movs	r3, #254	; 0xfe
 80038f6:	01db      	lsls	r3, r3, #7
 80038f8:	401a      	ands	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d116      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	23f8      	movs	r3, #248	; 0xf8
 8003908:	039b      	lsls	r3, r3, #14
 800390a:	401a      	ands	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d10e      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	23e0      	movs	r3, #224	; 0xe0
 8003918:	051b      	lsls	r3, r3, #20
 800391a:	401a      	ands	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	0f5b      	lsrs	r3, r3, #29
 8003928:	075a      	lsls	r2, r3, #29
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b008      	add	sp, #32
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
 8003948:	00001388 	.word	0x00001388
 800394c:	efffffff 	.word	0xefffffff
 8003950:	feffffff 	.word	0xfeffffff
 8003954:	11c1808c 	.word	0x11c1808c
 8003958:	eefefffc 	.word	0xeefefffc

0800395c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0e9      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCC_ClockConfig+0x1f0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2207      	movs	r2, #7
 8003976:	4013      	ands	r3, r2
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d91e      	bls.n	80039bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <HAL_RCC_ClockConfig+0x1f0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2207      	movs	r2, #7
 8003984:	4393      	bics	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	4b70      	ldr	r3, [pc, #448]	; (8003b4c <HAL_RCC_ClockConfig+0x1f0>)
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003990:	f7fd fe1e 	bl	80015d0 <HAL_GetTick>
 8003994:	0003      	movs	r3, r0
 8003996:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003998:	e009      	b.n	80039ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399a:	f7fd fe19 	bl	80015d0 <HAL_GetTick>
 800399e:	0002      	movs	r2, r0
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	4a6a      	ldr	r2, [pc, #424]	; (8003b50 <HAL_RCC_ClockConfig+0x1f4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0ca      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039ae:	4b67      	ldr	r3, [pc, #412]	; (8003b4c <HAL_RCC_ClockConfig+0x1f0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2207      	movs	r2, #7
 80039b4:	4013      	ands	r3, r2
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1ee      	bne.n	800399a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2202      	movs	r2, #2
 80039c2:	4013      	ands	r3, r2
 80039c4:	d015      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2204      	movs	r2, #4
 80039cc:	4013      	ands	r3, r2
 80039ce:	d006      	beq.n	80039de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039d0:	4b60      	ldr	r3, [pc, #384]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4b5f      	ldr	r3, [pc, #380]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 80039d6:	21e0      	movs	r1, #224	; 0xe0
 80039d8:	01c9      	lsls	r1, r1, #7
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039de:	4b5d      	ldr	r3, [pc, #372]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4a5d      	ldr	r2, [pc, #372]	; (8003b58 <HAL_RCC_ClockConfig+0x1fc>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	4b59      	ldr	r3, [pc, #356]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2201      	movs	r2, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	d057      	beq.n	8003aac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a04:	4b53      	ldr	r3, [pc, #332]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	029b      	lsls	r3, r3, #10
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d12b      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e097      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1c:	4b4d      	ldr	r3, [pc, #308]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	049b      	lsls	r3, r3, #18
 8003a24:	4013      	ands	r3, r2
 8003a26:	d11f      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e08b      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a34:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d113      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e07f      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d106      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a4c:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a50:	2202      	movs	r2, #2
 8003a52:	4013      	ands	r3, r2
 8003a54:	d108      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e074      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5e:	2202      	movs	r2, #2
 8003a60:	4013      	ands	r3, r2
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e06d      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a68:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	4393      	bics	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fda8 	bl	80015d0 <HAL_GetTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a84:	e009      	b.n	8003a9a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a86:	f7fd fda3 	bl	80015d0 <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	4a2f      	ldr	r2, [pc, #188]	; (8003b50 <HAL_RCC_ClockConfig+0x1f4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e054      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2238      	movs	r2, #56	; 0x38
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1ec      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_RCC_ClockConfig+0x1f0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d21e      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCC_ClockConfig+0x1f0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2207      	movs	r2, #7
 8003ac0:	4393      	bics	r3, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003acc:	f7fd fd80 	bl	80015d0 <HAL_GetTick>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ad4:	e009      	b.n	8003aea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad6:	f7fd fd7b 	bl	80015d0 <HAL_GetTick>
 8003ada:	0002      	movs	r2, r0
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <HAL_RCC_ClockConfig+0x1f4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e02c      	b.n	8003b44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_RCC_ClockConfig+0x1f0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2207      	movs	r2, #7
 8003af0:	4013      	ands	r3, r2
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1ee      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2204      	movs	r2, #4
 8003afe:	4013      	ands	r3, r2
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <HAL_RCC_ClockConfig+0x200>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003b12:	430a      	orrs	r2, r1
 8003b14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003b16:	f000 f829 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8003b1a:	0001      	movs	r1, r0
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <HAL_RCC_ClockConfig+0x1f8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	220f      	movs	r2, #15
 8003b24:	401a      	ands	r2, r3
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <HAL_RCC_ClockConfig+0x204>)
 8003b28:	0092      	lsls	r2, r2, #2
 8003b2a:	58d3      	ldr	r3, [r2, r3]
 8003b2c:	221f      	movs	r2, #31
 8003b2e:	4013      	ands	r3, r2
 8003b30:	000a      	movs	r2, r1
 8003b32:	40da      	lsrs	r2, r3
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCC_ClockConfig+0x208>)
 8003b36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_ClockConfig+0x20c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7fd fceb 	bl	8001518 <HAL_InitTick>
 8003b42:	0003      	movs	r3, r0
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b004      	add	sp, #16
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40022000 	.word	0x40022000
 8003b50:	00001388 	.word	0x00001388
 8003b54:	40021000 	.word	0x40021000
 8003b58:	fffff0ff 	.word	0xfffff0ff
 8003b5c:	ffff8fff 	.word	0xffff8fff
 8003b60:	08008584 	.word	0x08008584
 8003b64:	20000000 	.word	0x20000000
 8003b68:	20000004 	.word	0x20000004

08003b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b72:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2238      	movs	r2, #56	; 0x38
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d10f      	bne.n	8003b9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b7c:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	0adb      	lsrs	r3, r3, #11
 8003b82:	2207      	movs	r2, #7
 8003b84:	4013      	ands	r3, r2
 8003b86:	2201      	movs	r2, #1
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	0013      	movs	r3, r2
 8003b8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b8e:	6839      	ldr	r1, [r7, #0]
 8003b90:	4835      	ldr	r0, [pc, #212]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b92:	f7fc fac9 	bl	8000128 <__udivsi3>
 8003b96:	0003      	movs	r3, r0
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	e05d      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b9c:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2238      	movs	r2, #56	; 0x38
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d102      	bne.n	8003bae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ba8:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x100>)
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	e054      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bae:	4b2d      	ldr	r3, [pc, #180]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2238      	movs	r2, #56	; 0x38
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d138      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003bba:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bc4:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	2207      	movs	r2, #7
 8003bcc:	4013      	ands	r3, r2
 8003bce:	3301      	adds	r3, #1
 8003bd0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d10d      	bne.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	4824      	ldr	r0, [pc, #144]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x100>)
 8003bdc:	f7fc faa4 	bl	8000128 <__udivsi3>
 8003be0:	0003      	movs	r3, r0
 8003be2:	0019      	movs	r1, r3
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	227f      	movs	r2, #127	; 0x7f
 8003bec:	4013      	ands	r3, r2
 8003bee:	434b      	muls	r3, r1
 8003bf0:	617b      	str	r3, [r7, #20]
        break;
 8003bf2:	e00d      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003bf4:	68b9      	ldr	r1, [r7, #8]
 8003bf6:	481c      	ldr	r0, [pc, #112]	; (8003c68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003bf8:	f7fc fa96 	bl	8000128 <__udivsi3>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	0019      	movs	r1, r3
 8003c00:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	227f      	movs	r2, #127	; 0x7f
 8003c08:	4013      	ands	r3, r2
 8003c0a:	434b      	muls	r3, r1
 8003c0c:	617b      	str	r3, [r7, #20]
        break;
 8003c0e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003c10:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0f5b      	lsrs	r3, r3, #29
 8003c16:	2207      	movs	r2, #7
 8003c18:	4013      	ands	r3, r2
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	6978      	ldr	r0, [r7, #20]
 8003c22:	f7fc fa81 	bl	8000128 <__udivsi3>
 8003c26:	0003      	movs	r3, r0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e015      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2238      	movs	r2, #56	; 0x38
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	d103      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2238      	movs	r2, #56	; 0x38
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b18      	cmp	r3, #24
 8003c4a:	d103      	bne.n	8003c54 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003c4c:	23fa      	movs	r3, #250	; 0xfa
 8003c4e:	01db      	lsls	r3, r3, #7
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e001      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c58:	693b      	ldr	r3, [r7, #16]
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b006      	add	sp, #24
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	40021000 	.word	0x40021000
 8003c68:	00f42400 	.word	0x00f42400
 8003c6c:	007a1200 	.word	0x007a1200

08003c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c74:	4b02      	ldr	r3, [pc, #8]	; (8003c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	20000000 	.word	0x20000000

08003c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c84:	b5b0      	push	{r4, r5, r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003c88:	f7ff fff2 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003c8c:	0004      	movs	r4, r0
 8003c8e:	f7ff fb3f 	bl	8003310 <LL_RCC_GetAPB1Prescaler>
 8003c92:	0003      	movs	r3, r0
 8003c94:	0b1a      	lsrs	r2, r3, #12
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c98:	0092      	lsls	r2, r2, #2
 8003c9a:	58d3      	ldr	r3, [r2, r3]
 8003c9c:	221f      	movs	r2, #31
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	40dc      	lsrs	r4, r3
 8003ca2:	0023      	movs	r3, r4
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	080085c4 	.word	0x080085c4

08003cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003cb8:	2313      	movs	r3, #19
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cc0:	2312      	movs	r3, #18
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	029b      	lsls	r3, r3, #10
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d100      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003cd4:	e0a3      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd6:	2011      	movs	r0, #17
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cde:	4bc3      	ldr	r3, [pc, #780]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	055b      	lsls	r3, r3, #21
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d110      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	4bc0      	ldr	r3, [pc, #768]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cee:	4bbf      	ldr	r3, [pc, #764]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	0549      	lsls	r1, r1, #21
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cf8:	4bbc      	ldr	r3, [pc, #752]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	055b      	lsls	r3, r3, #21
 8003d00:	4013      	ands	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d06:	183b      	adds	r3, r7, r0
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d0c:	4bb8      	ldr	r3, [pc, #736]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4bb7      	ldr	r3, [pc, #732]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	0049      	lsls	r1, r1, #1
 8003d16:	430a      	orrs	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d1a:	f7fd fc59 	bl	80015d0 <HAL_GetTick>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d22:	e00b      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fd fc54 	bl	80015d0 <HAL_GetTick>
 8003d28:	0002      	movs	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d904      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003d32:	2313      	movs	r3, #19
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	2203      	movs	r2, #3
 8003d38:	701a      	strb	r2, [r3, #0]
        break;
 8003d3a:	e005      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3c:	4bac      	ldr	r3, [pc, #688]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4013      	ands	r3, r2
 8003d46:	d0ed      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003d48:	2313      	movs	r3, #19
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d154      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d52:	4ba6      	ldr	r3, [pc, #664]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d56:	23c0      	movs	r3, #192	; 0xc0
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d019      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d014      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d6e:	4b9f      	ldr	r3, [pc, #636]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	4aa0      	ldr	r2, [pc, #640]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d78:	4b9c      	ldr	r3, [pc, #624]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d7c:	4b9b      	ldr	r3, [pc, #620]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	0249      	lsls	r1, r1, #9
 8003d82:	430a      	orrs	r2, r1
 8003d84:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d86:	4b99      	ldr	r3, [pc, #612]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d8a:	4b98      	ldr	r3, [pc, #608]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d8c:	499a      	ldr	r1, [pc, #616]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003d8e:	400a      	ands	r2, r1
 8003d90:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d92:	4b96      	ldr	r3, [pc, #600]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d016      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd fc16 	bl	80015d0 <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da8:	e00c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd fc11 	bl	80015d0 <HAL_GetTick>
 8003dae:	0002      	movs	r2, r0
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	4a91      	ldr	r2, [pc, #580]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d904      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003dba:	2313      	movs	r3, #19
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	701a      	strb	r2, [r3, #0]
            break;
 8003dc2:	e004      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc4:	4b89      	ldr	r3, [pc, #548]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	2202      	movs	r2, #2
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d0ed      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003dce:	2313      	movs	r3, #19
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd8:	4b84      	ldr	r3, [pc, #528]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	4a85      	ldr	r2, [pc, #532]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	0019      	movs	r1, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de6:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003de8:	430a      	orrs	r2, r1
 8003dea:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dec:	e00c      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dee:	2312      	movs	r3, #18
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	2213      	movs	r2, #19
 8003df4:	18ba      	adds	r2, r7, r2
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e005      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	2312      	movs	r3, #18
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	2213      	movs	r2, #19
 8003e02:	18ba      	adds	r2, r7, r2
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e08:	2311      	movs	r3, #17
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e16:	4b75      	ldr	r3, [pc, #468]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e18:	4979      	ldr	r1, [pc, #484]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2201      	movs	r2, #1
 8003e24:	4013      	ands	r3, r2
 8003e26:	d009      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e28:	4b70      	ldr	r3, [pc, #448]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	4393      	bics	r3, r2
 8003e30:	0019      	movs	r1, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	4b6d      	ldr	r3, [pc, #436]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2202      	movs	r2, #2
 8003e42:	4013      	ands	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e46:	4b69      	ldr	r3, [pc, #420]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	220c      	movs	r2, #12
 8003e4c:	4393      	bics	r3, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e56:	430a      	orrs	r2, r1
 8003e58:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2210      	movs	r2, #16
 8003e60:	4013      	ands	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e64:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	4a66      	ldr	r2, [pc, #408]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	4b5e      	ldr	r3, [pc, #376]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e74:	430a      	orrs	r2, r1
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4013      	ands	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e84:	4b59      	ldr	r3, [pc, #356]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	4a5f      	ldr	r2, [pc, #380]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	0019      	movs	r1, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e94:	430a      	orrs	r2, r1
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d009      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ea4:	4b51      	ldr	r3, [pc, #324]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eaa:	4013      	ands	r3, r2
 8003eac:	0019      	movs	r1, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec6:	4a52      	ldr	r2, [pc, #328]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	0019      	movs	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	4b46      	ldr	r3, [pc, #280]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	01db      	lsls	r3, r3, #7
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d015      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ee2:	4b42      	ldr	r3, [pc, #264]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	0899      	lsrs	r1, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	05db      	lsls	r3, r3, #23
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d106      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f00:	4b3a      	ldr	r3, [pc, #232]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	4b39      	ldr	r3, [pc, #228]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f06:	2180      	movs	r1, #128	; 0x80
 8003f08:	0249      	lsls	r1, r1, #9
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	031b      	lsls	r3, r3, #12
 8003f16:	4013      	ands	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f1a:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	2240      	movs	r2, #64	; 0x40
 8003f20:	4393      	bics	r3, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f28:	4b30      	ldr	r3, [pc, #192]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	039b      	lsls	r3, r3, #14
 8003f36:	4013      	ands	r3, r2
 8003f38:	d016      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f3a:	4b2c      	ldr	r3, [pc, #176]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	4a35      	ldr	r2, [pc, #212]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	0019      	movs	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f48:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	03db      	lsls	r3, r3, #15
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d106      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003f5a:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	4b23      	ldr	r3, [pc, #140]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f60:	2180      	movs	r1, #128	; 0x80
 8003f62:	0449      	lsls	r1, r1, #17
 8003f64:	430a      	orrs	r2, r1
 8003f66:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	03db      	lsls	r3, r3, #15
 8003f70:	4013      	ands	r3, r2
 8003f72:	d016      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	4a27      	ldr	r2, [pc, #156]	; (8004018 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f84:	430a      	orrs	r2, r1
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	045b      	lsls	r3, r3, #17
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003f94:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f9a:	2180      	movs	r1, #128	; 0x80
 8003f9c:	0449      	lsls	r1, r1, #17
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	4013      	ands	r3, r2
 8003fac:	d016      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	01db      	lsls	r3, r3, #7
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fd4:	2180      	movs	r1, #128	; 0x80
 8003fd6:	0249      	lsls	r1, r1, #9
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003fdc:	2312      	movs	r3, #18
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	781b      	ldrb	r3, [r3, #0]
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b006      	add	sp, #24
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	fffffcff 	.word	0xfffffcff
 8003ff8:	fffeffff 	.word	0xfffeffff
 8003ffc:	00001388 	.word	0x00001388
 8004000:	efffffff 	.word	0xefffffff
 8004004:	fffff3ff 	.word	0xfffff3ff
 8004008:	fff3ffff 	.word	0xfff3ffff
 800400c:	ffcfffff 	.word	0xffcfffff
 8004010:	ffffcfff 	.word	0xffffcfff
 8004014:	ffbfffff 	.word	0xffbfffff
 8004018:	feffffff 	.word	0xfeffffff
 800401c:	ffff3fff 	.word	0xffff3fff

08004020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e04a      	b.n	80040c8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	223d      	movs	r2, #61	; 0x3d
 8004036:	5c9b      	ldrb	r3, [r3, r2]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d107      	bne.n	800404e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	223c      	movs	r2, #60	; 0x3c
 8004042:	2100      	movs	r1, #0
 8004044:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	0018      	movs	r0, r3
 800404a:	f7fd f883 	bl	8001154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	223d      	movs	r2, #61	; 0x3d
 8004052:	2102      	movs	r1, #2
 8004054:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3304      	adds	r3, #4
 800405e:	0019      	movs	r1, r3
 8004060:	0010      	movs	r0, r2
 8004062:	f000 fcd9 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2248      	movs	r2, #72	; 0x48
 800406a:	2101      	movs	r1, #1
 800406c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	223e      	movs	r2, #62	; 0x3e
 8004072:	2101      	movs	r1, #1
 8004074:	5499      	strb	r1, [r3, r2]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	223f      	movs	r2, #63	; 0x3f
 800407a:	2101      	movs	r1, #1
 800407c:	5499      	strb	r1, [r3, r2]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	2101      	movs	r1, #1
 8004084:	5499      	strb	r1, [r3, r2]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2241      	movs	r2, #65	; 0x41
 800408a:	2101      	movs	r1, #1
 800408c:	5499      	strb	r1, [r3, r2]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2242      	movs	r2, #66	; 0x42
 8004092:	2101      	movs	r1, #1
 8004094:	5499      	strb	r1, [r3, r2]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2243      	movs	r2, #67	; 0x43
 800409a:	2101      	movs	r1, #1
 800409c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2244      	movs	r2, #68	; 0x44
 80040a2:	2101      	movs	r1, #1
 80040a4:	5499      	strb	r1, [r3, r2]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2245      	movs	r2, #69	; 0x45
 80040aa:	2101      	movs	r1, #1
 80040ac:	5499      	strb	r1, [r3, r2]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2246      	movs	r2, #70	; 0x46
 80040b2:	2101      	movs	r1, #1
 80040b4:	5499      	strb	r1, [r3, r2]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2247      	movs	r2, #71	; 0x47
 80040ba:	2101      	movs	r1, #1
 80040bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	223d      	movs	r2, #61	; 0x3d
 80040c2:	2101      	movs	r1, #1
 80040c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b002      	add	sp, #8
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	223d      	movs	r2, #61	; 0x3d
 80040dc:	5c9b      	ldrb	r3, [r3, r2]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d001      	beq.n	80040e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e042      	b.n	800416e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	223d      	movs	r2, #61	; 0x3d
 80040ec:	2102      	movs	r1, #2
 80040ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2101      	movs	r1, #1
 80040fc:	430a      	orrs	r2, r1
 80040fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <HAL_TIM_Base_Start_IT+0xa8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00f      	beq.n	800412a <HAL_TIM_Base_Start_IT+0x5a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	2380      	movs	r3, #128	; 0x80
 8004110:	05db      	lsls	r3, r3, #23
 8004112:	429a      	cmp	r2, r3
 8004114:	d009      	beq.n	800412a <HAL_TIM_Base_Start_IT+0x5a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a18      	ldr	r2, [pc, #96]	; (800417c <HAL_TIM_Base_Start_IT+0xac>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_TIM_Base_Start_IT+0x5a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a16      	ldr	r2, [pc, #88]	; (8004180 <HAL_TIM_Base_Start_IT+0xb0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d116      	bne.n	8004158 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a14      	ldr	r2, [pc, #80]	; (8004184 <HAL_TIM_Base_Start_IT+0xb4>)
 8004132:	4013      	ands	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b06      	cmp	r3, #6
 800413a:	d016      	beq.n	800416a <HAL_TIM_Base_Start_IT+0x9a>
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	025b      	lsls	r3, r3, #9
 8004142:	429a      	cmp	r2, r3
 8004144:	d011      	beq.n	800416a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2101      	movs	r1, #1
 8004152:	430a      	orrs	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	e008      	b.n	800416a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2101      	movs	r1, #1
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e000      	b.n	800416c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b004      	add	sp, #16
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40000400 	.word	0x40000400
 8004180:	40014000 	.word	0x40014000
 8004184:	00010007 	.word	0x00010007

08004188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e04a      	b.n	8004230 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	223d      	movs	r2, #61	; 0x3d
 800419e:	5c9b      	ldrb	r3, [r3, r2]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d107      	bne.n	80041b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	223c      	movs	r2, #60	; 0x3c
 80041aa:	2100      	movs	r1, #0
 80041ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	0018      	movs	r0, r3
 80041b2:	f000 f841 	bl	8004238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	223d      	movs	r2, #61	; 0x3d
 80041ba:	2102      	movs	r1, #2
 80041bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3304      	adds	r3, #4
 80041c6:	0019      	movs	r1, r3
 80041c8:	0010      	movs	r0, r2
 80041ca:	f000 fc25 	bl	8004a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2248      	movs	r2, #72	; 0x48
 80041d2:	2101      	movs	r1, #1
 80041d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	223e      	movs	r2, #62	; 0x3e
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	223f      	movs	r2, #63	; 0x3f
 80041e2:	2101      	movs	r1, #1
 80041e4:	5499      	strb	r1, [r3, r2]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2240      	movs	r2, #64	; 0x40
 80041ea:	2101      	movs	r1, #1
 80041ec:	5499      	strb	r1, [r3, r2]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2241      	movs	r2, #65	; 0x41
 80041f2:	2101      	movs	r1, #1
 80041f4:	5499      	strb	r1, [r3, r2]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2242      	movs	r2, #66	; 0x42
 80041fa:	2101      	movs	r1, #1
 80041fc:	5499      	strb	r1, [r3, r2]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2243      	movs	r2, #67	; 0x43
 8004202:	2101      	movs	r1, #1
 8004204:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2244      	movs	r2, #68	; 0x44
 800420a:	2101      	movs	r1, #1
 800420c:	5499      	strb	r1, [r3, r2]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2245      	movs	r2, #69	; 0x45
 8004212:	2101      	movs	r1, #1
 8004214:	5499      	strb	r1, [r3, r2]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2246      	movs	r2, #70	; 0x46
 800421a:	2101      	movs	r1, #1
 800421c:	5499      	strb	r1, [r3, r2]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2247      	movs	r2, #71	; 0x47
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	223d      	movs	r2, #61	; 0x3d
 800422a:	2101      	movs	r1, #1
 800422c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d108      	bne.n	800426a <HAL_TIM_PWM_Start+0x22>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	223e      	movs	r2, #62	; 0x3e
 800425c:	5c9b      	ldrb	r3, [r3, r2]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	1e5a      	subs	r2, r3, #1
 8004264:	4193      	sbcs	r3, r2
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e037      	b.n	80042da <HAL_TIM_PWM_Start+0x92>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d108      	bne.n	8004282 <HAL_TIM_PWM_Start+0x3a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	223f      	movs	r2, #63	; 0x3f
 8004274:	5c9b      	ldrb	r3, [r3, r2]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	1e5a      	subs	r2, r3, #1
 800427c:	4193      	sbcs	r3, r2
 800427e:	b2db      	uxtb	r3, r3
 8004280:	e02b      	b.n	80042da <HAL_TIM_PWM_Start+0x92>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d108      	bne.n	800429a <HAL_TIM_PWM_Start+0x52>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2240      	movs	r2, #64	; 0x40
 800428c:	5c9b      	ldrb	r3, [r3, r2]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	1e5a      	subs	r2, r3, #1
 8004294:	4193      	sbcs	r3, r2
 8004296:	b2db      	uxtb	r3, r3
 8004298:	e01f      	b.n	80042da <HAL_TIM_PWM_Start+0x92>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b0c      	cmp	r3, #12
 800429e:	d108      	bne.n	80042b2 <HAL_TIM_PWM_Start+0x6a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2241      	movs	r2, #65	; 0x41
 80042a4:	5c9b      	ldrb	r3, [r3, r2]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	4193      	sbcs	r3, r2
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e013      	b.n	80042da <HAL_TIM_PWM_Start+0x92>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d108      	bne.n	80042ca <HAL_TIM_PWM_Start+0x82>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2242      	movs	r2, #66	; 0x42
 80042bc:	5c9b      	ldrb	r3, [r3, r2]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	1e5a      	subs	r2, r3, #1
 80042c4:	4193      	sbcs	r3, r2
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	e007      	b.n	80042da <HAL_TIM_PWM_Start+0x92>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2243      	movs	r2, #67	; 0x43
 80042ce:	5c9b      	ldrb	r3, [r3, r2]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	4193      	sbcs	r3, r2
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e08b      	b.n	80043fa <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <HAL_TIM_PWM_Start+0xaa>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	223e      	movs	r2, #62	; 0x3e
 80042ec:	2102      	movs	r1, #2
 80042ee:	5499      	strb	r1, [r3, r2]
 80042f0:	e023      	b.n	800433a <HAL_TIM_PWM_Start+0xf2>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d104      	bne.n	8004302 <HAL_TIM_PWM_Start+0xba>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	223f      	movs	r2, #63	; 0x3f
 80042fc:	2102      	movs	r1, #2
 80042fe:	5499      	strb	r1, [r3, r2]
 8004300:	e01b      	b.n	800433a <HAL_TIM_PWM_Start+0xf2>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d104      	bne.n	8004312 <HAL_TIM_PWM_Start+0xca>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	2102      	movs	r1, #2
 800430e:	5499      	strb	r1, [r3, r2]
 8004310:	e013      	b.n	800433a <HAL_TIM_PWM_Start+0xf2>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b0c      	cmp	r3, #12
 8004316:	d104      	bne.n	8004322 <HAL_TIM_PWM_Start+0xda>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2241      	movs	r2, #65	; 0x41
 800431c:	2102      	movs	r1, #2
 800431e:	5499      	strb	r1, [r3, r2]
 8004320:	e00b      	b.n	800433a <HAL_TIM_PWM_Start+0xf2>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b10      	cmp	r3, #16
 8004326:	d104      	bne.n	8004332 <HAL_TIM_PWM_Start+0xea>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2242      	movs	r2, #66	; 0x42
 800432c:	2102      	movs	r1, #2
 800432e:	5499      	strb	r1, [r3, r2]
 8004330:	e003      	b.n	800433a <HAL_TIM_PWM_Start+0xf2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2243      	movs	r2, #67	; 0x43
 8004336:	2102      	movs	r1, #2
 8004338:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	2201      	movs	r2, #1
 8004342:	0018      	movs	r0, r3
 8004344:	f000 ff56 	bl	80051f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2d      	ldr	r2, [pc, #180]	; (8004404 <HAL_TIM_PWM_Start+0x1bc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00e      	beq.n	8004370 <HAL_TIM_PWM_Start+0x128>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2c      	ldr	r2, [pc, #176]	; (8004408 <HAL_TIM_PWM_Start+0x1c0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_TIM_PWM_Start+0x128>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2a      	ldr	r2, [pc, #168]	; (800440c <HAL_TIM_PWM_Start+0x1c4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIM_PWM_Start+0x128>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a29      	ldr	r2, [pc, #164]	; (8004410 <HAL_TIM_PWM_Start+0x1c8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d101      	bne.n	8004374 <HAL_TIM_PWM_Start+0x12c>
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <HAL_TIM_PWM_Start+0x12e>
 8004374:	2300      	movs	r3, #0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	0209      	lsls	r1, r1, #8
 8004388:	430a      	orrs	r2, r1
 800438a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <HAL_TIM_PWM_Start+0x1bc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00f      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x16e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	05db      	lsls	r3, r3, #23
 800439e:	429a      	cmp	r2, r3
 80043a0:	d009      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x16e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_TIM_PWM_Start+0x1cc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIM_PWM_Start+0x16e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <HAL_TIM_PWM_Start+0x1c0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d116      	bne.n	80043e4 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a16      	ldr	r2, [pc, #88]	; (8004418 <HAL_TIM_PWM_Start+0x1d0>)
 80043be:	4013      	ands	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b06      	cmp	r3, #6
 80043c6:	d016      	beq.n	80043f6 <HAL_TIM_PWM_Start+0x1ae>
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	2380      	movs	r3, #128	; 0x80
 80043cc:	025b      	lsls	r3, r3, #9
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d011      	beq.n	80043f6 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2101      	movs	r1, #1
 80043de:	430a      	orrs	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e2:	e008      	b.n	80043f6 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2101      	movs	r1, #1
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e000      	b.n	80043f8 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b004      	add	sp, #16
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800
 8004414:	40000400 	.word	0x40000400
 8004418:	00010007 	.word	0x00010007

0800441c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2202      	movs	r2, #2
 8004438:	4013      	ands	r3, r2
 800443a:	d021      	beq.n	8004480 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2202      	movs	r2, #2
 8004440:	4013      	ands	r3, r2
 8004442:	d01d      	beq.n	8004480 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2203      	movs	r2, #3
 800444a:	4252      	negs	r2, r2
 800444c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	2203      	movs	r2, #3
 800445c:	4013      	ands	r3, r2
 800445e:	d004      	beq.n	800446a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 fac0 	bl	80049e8 <HAL_TIM_IC_CaptureCallback>
 8004468:	e007      	b.n	800447a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 fab3 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 fabf 	bl	80049f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2204      	movs	r2, #4
 8004484:	4013      	ands	r3, r2
 8004486:	d022      	beq.n	80044ce <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2204      	movs	r2, #4
 800448c:	4013      	ands	r3, r2
 800448e:	d01e      	beq.n	80044ce <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2205      	movs	r2, #5
 8004496:	4252      	negs	r2, r2
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	23c0      	movs	r3, #192	; 0xc0
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4013      	ands	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	0018      	movs	r0, r3
 80044b2:	f000 fa99 	bl	80049e8 <HAL_TIM_IC_CaptureCallback>
 80044b6:	e007      	b.n	80044c8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 fa8c 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	0018      	movs	r0, r3
 80044c4:	f000 fa98 	bl	80049f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2208      	movs	r2, #8
 80044d2:	4013      	ands	r3, r2
 80044d4:	d021      	beq.n	800451a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2208      	movs	r2, #8
 80044da:	4013      	ands	r3, r2
 80044dc:	d01d      	beq.n	800451a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2209      	movs	r2, #9
 80044e4:	4252      	negs	r2, r2
 80044e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2204      	movs	r2, #4
 80044ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	2203      	movs	r2, #3
 80044f6:	4013      	ands	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 fa73 	bl	80049e8 <HAL_TIM_IC_CaptureCallback>
 8004502:	e007      	b.n	8004514 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 fa66 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0018      	movs	r0, r3
 8004510:	f000 fa72 	bl	80049f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2210      	movs	r2, #16
 800451e:	4013      	ands	r3, r2
 8004520:	d022      	beq.n	8004568 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2210      	movs	r2, #16
 8004526:	4013      	ands	r3, r2
 8004528:	d01e      	beq.n	8004568 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2211      	movs	r2, #17
 8004530:	4252      	negs	r2, r2
 8004532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2208      	movs	r2, #8
 8004538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	23c0      	movs	r3, #192	; 0xc0
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4013      	ands	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f000 fa4c 	bl	80049e8 <HAL_TIM_IC_CaptureCallback>
 8004550:	e007      	b.n	8004562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	0018      	movs	r0, r3
 8004556:	f000 fa3f 	bl	80049d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0018      	movs	r0, r3
 800455e:	f000 fa4b 	bl	80049f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2201      	movs	r2, #1
 800456c:	4013      	ands	r3, r2
 800456e:	d00c      	beq.n	800458a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2201      	movs	r2, #1
 8004574:	4013      	ands	r3, r2
 8004576:	d008      	beq.n	800458a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2202      	movs	r2, #2
 800457e:	4252      	negs	r2, r2
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0018      	movs	r0, r3
 8004586:	f7fc fcbd 	bl	8000f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2280      	movs	r2, #128	; 0x80
 800458e:	4013      	ands	r3, r2
 8004590:	d104      	bne.n	800459c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	019b      	lsls	r3, r3, #6
 8004598:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800459a:	d00b      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	4013      	ands	r3, r2
 80045a2:	d007      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <HAL_TIM_IRQHandler+0x208>)
 80045aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 feba 	bl	8005328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	2380      	movs	r3, #128	; 0x80
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4013      	ands	r3, r2
 80045bc:	d00b      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	4013      	ands	r3, r2
 80045c4:	d007      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_TIM_IRQHandler+0x20c>)
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 feb1 	bl	8005338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2240      	movs	r2, #64	; 0x40
 80045da:	4013      	ands	r3, r2
 80045dc:	d00c      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2240      	movs	r2, #64	; 0x40
 80045e2:	4013      	ands	r3, r2
 80045e4:	d008      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2241      	movs	r2, #65	; 0x41
 80045ec:	4252      	negs	r2, r2
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 fa08 	bl	8004a08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2220      	movs	r2, #32
 80045fc:	4013      	ands	r3, r2
 80045fe:	d00c      	beq.n	800461a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	4013      	ands	r3, r2
 8004606:	d008      	beq.n	800461a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2221      	movs	r2, #33	; 0x21
 800460e:	4252      	negs	r2, r2
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	0018      	movs	r0, r3
 8004616:	f000 fe7f 	bl	8005318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b004      	add	sp, #16
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	ffffdf7f 	.word	0xffffdf7f
 8004628:	fffffeff 	.word	0xfffffeff

0800462c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004638:	2317      	movs	r3, #23
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	223c      	movs	r2, #60	; 0x3c
 8004644:	5c9b      	ldrb	r3, [r3, r2]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_TIM_PWM_ConfigChannel+0x22>
 800464a:	2302      	movs	r3, #2
 800464c:	e0e5      	b.n	800481a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	223c      	movs	r2, #60	; 0x3c
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b14      	cmp	r3, #20
 800465a:	d900      	bls.n	800465e <HAL_TIM_PWM_ConfigChannel+0x32>
 800465c:	e0d1      	b.n	8004802 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	009a      	lsls	r2, r3, #2
 8004662:	4b70      	ldr	r3, [pc, #448]	; (8004824 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004664:	18d3      	adds	r3, r2, r3
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	0011      	movs	r1, r2
 8004672:	0018      	movs	r0, r3
 8004674:	f000 fa5e 	bl	8004b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2108      	movs	r1, #8
 8004684:	430a      	orrs	r2, r1
 8004686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2104      	movs	r1, #4
 8004694:	438a      	bics	r2, r1
 8004696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6999      	ldr	r1, [r3, #24]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	619a      	str	r2, [r3, #24]
      break;
 80046aa:	e0af      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	0011      	movs	r1, r2
 80046b4:	0018      	movs	r0, r3
 80046b6:	f000 fac7 	bl	8004c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	0109      	lsls	r1, r1, #4
 80046c8:	430a      	orrs	r2, r1
 80046ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699a      	ldr	r2, [r3, #24]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4954      	ldr	r1, [pc, #336]	; (8004828 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80046d8:	400a      	ands	r2, r1
 80046da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6999      	ldr	r1, [r3, #24]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	021a      	lsls	r2, r3, #8
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	619a      	str	r2, [r3, #24]
      break;
 80046f0:	e08c      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	0011      	movs	r1, r2
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fb28 	bl	8004d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2108      	movs	r1, #8
 800470c:	430a      	orrs	r2, r1
 800470e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2104      	movs	r1, #4
 800471c:	438a      	bics	r2, r1
 800471e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69d9      	ldr	r1, [r3, #28]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	61da      	str	r2, [r3, #28]
      break;
 8004732:	e06b      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	0011      	movs	r1, r2
 800473c:	0018      	movs	r0, r3
 800473e:	f000 fb8f 	bl	8004e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	0109      	lsls	r1, r1, #4
 8004750:	430a      	orrs	r2, r1
 8004752:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69da      	ldr	r2, [r3, #28]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4932      	ldr	r1, [pc, #200]	; (8004828 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004760:	400a      	ands	r2, r1
 8004762:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69d9      	ldr	r1, [r3, #28]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	021a      	lsls	r2, r3, #8
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	61da      	str	r2, [r3, #28]
      break;
 8004778:	e048      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	0011      	movs	r1, r2
 8004782:	0018      	movs	r0, r3
 8004784:	f000 fbd6 	bl	8004f34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2108      	movs	r1, #8
 8004794:	430a      	orrs	r2, r1
 8004796:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2104      	movs	r1, #4
 80047a4:	438a      	bics	r2, r1
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047ba:	e027      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	0011      	movs	r1, r2
 80047c4:	0018      	movs	r0, r3
 80047c6:	f000 fc15 	bl	8004ff4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2180      	movs	r1, #128	; 0x80
 80047d6:	0109      	lsls	r1, r1, #4
 80047d8:	430a      	orrs	r2, r1
 80047da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4910      	ldr	r1, [pc, #64]	; (8004828 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	021a      	lsls	r2, r3, #8
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004800:	e004      	b.n	800480c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004802:	2317      	movs	r3, #23
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
      break;
 800480a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	223c      	movs	r2, #60	; 0x3c
 8004810:	2100      	movs	r1, #0
 8004812:	5499      	strb	r1, [r3, r2]

  return status;
 8004814:	2317      	movs	r3, #23
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	781b      	ldrb	r3, [r3, #0]
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b006      	add	sp, #24
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	080085e4 	.word	0x080085e4
 8004828:	fffffbff 	.word	0xfffffbff

0800482c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004836:	230f      	movs	r3, #15
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	223c      	movs	r2, #60	; 0x3c
 8004842:	5c9b      	ldrb	r3, [r3, r2]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_TIM_ConfigClockSource+0x20>
 8004848:	2302      	movs	r3, #2
 800484a:	e0bc      	b.n	80049c6 <HAL_TIM_ConfigClockSource+0x19a>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	223c      	movs	r2, #60	; 0x3c
 8004850:	2101      	movs	r1, #1
 8004852:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	223d      	movs	r2, #61	; 0x3d
 8004858:	2102      	movs	r1, #2
 800485a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a5a      	ldr	r2, [pc, #360]	; (80049d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a59      	ldr	r2, [pc, #356]	; (80049d4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004870:	4013      	ands	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	0192      	lsls	r2, r2, #6
 8004884:	4293      	cmp	r3, r2
 8004886:	d040      	beq.n	800490a <HAL_TIM_ConfigClockSource+0xde>
 8004888:	2280      	movs	r2, #128	; 0x80
 800488a:	0192      	lsls	r2, r2, #6
 800488c:	4293      	cmp	r3, r2
 800488e:	d900      	bls.n	8004892 <HAL_TIM_ConfigClockSource+0x66>
 8004890:	e088      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x178>
 8004892:	2280      	movs	r2, #128	; 0x80
 8004894:	0152      	lsls	r2, r2, #5
 8004896:	4293      	cmp	r3, r2
 8004898:	d100      	bne.n	800489c <HAL_TIM_ConfigClockSource+0x70>
 800489a:	e088      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x182>
 800489c:	2280      	movs	r2, #128	; 0x80
 800489e:	0152      	lsls	r2, r2, #5
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d900      	bls.n	80048a6 <HAL_TIM_ConfigClockSource+0x7a>
 80048a4:	e07e      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x178>
 80048a6:	2b70      	cmp	r3, #112	; 0x70
 80048a8:	d018      	beq.n	80048dc <HAL_TIM_ConfigClockSource+0xb0>
 80048aa:	d900      	bls.n	80048ae <HAL_TIM_ConfigClockSource+0x82>
 80048ac:	e07a      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x178>
 80048ae:	2b60      	cmp	r3, #96	; 0x60
 80048b0:	d04f      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0x126>
 80048b2:	d900      	bls.n	80048b6 <HAL_TIM_ConfigClockSource+0x8a>
 80048b4:	e076      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x178>
 80048b6:	2b50      	cmp	r3, #80	; 0x50
 80048b8:	d03b      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x106>
 80048ba:	d900      	bls.n	80048be <HAL_TIM_ConfigClockSource+0x92>
 80048bc:	e072      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x178>
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d057      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x146>
 80048c2:	d900      	bls.n	80048c6 <HAL_TIM_ConfigClockSource+0x9a>
 80048c4:	e06e      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x178>
 80048c6:	2b30      	cmp	r3, #48	; 0x30
 80048c8:	d063      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x166>
 80048ca:	d86b      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x178>
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d060      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x166>
 80048d0:	d868      	bhi.n	80049a4 <HAL_TIM_ConfigClockSource+0x178>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d05d      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x166>
 80048d6:	2b10      	cmp	r3, #16
 80048d8:	d05b      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0x166>
 80048da:	e063      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ec:	f000 fc62 	bl	80051b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2277      	movs	r2, #119	; 0x77
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	609a      	str	r2, [r3, #8]
      break;
 8004908:	e052      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800491a:	f000 fc4b 	bl	80051b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2180      	movs	r1, #128	; 0x80
 800492a:	01c9      	lsls	r1, r1, #7
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]
      break;
 8004930:	e03e      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800493e:	001a      	movs	r2, r3
 8004940:	f000 fbbc 	bl	80050bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2150      	movs	r1, #80	; 0x50
 800494a:	0018      	movs	r0, r3
 800494c:	f000 fc16 	bl	800517c <TIM_ITRx_SetConfig>
      break;
 8004950:	e02e      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800495e:	001a      	movs	r2, r3
 8004960:	f000 fbda 	bl	8005118 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2160      	movs	r1, #96	; 0x60
 800496a:	0018      	movs	r0, r3
 800496c:	f000 fc06 	bl	800517c <TIM_ITRx_SetConfig>
      break;
 8004970:	e01e      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800497e:	001a      	movs	r2, r3
 8004980:	f000 fb9c 	bl	80050bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2140      	movs	r1, #64	; 0x40
 800498a:	0018      	movs	r0, r3
 800498c:	f000 fbf6 	bl	800517c <TIM_ITRx_SetConfig>
      break;
 8004990:	e00e      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	0019      	movs	r1, r3
 800499c:	0010      	movs	r0, r2
 800499e:	f000 fbed 	bl	800517c <TIM_ITRx_SetConfig>
      break;
 80049a2:	e005      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80049a4:	230f      	movs	r3, #15
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
      break;
 80049ac:	e000      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80049ae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	223d      	movs	r2, #61	; 0x3d
 80049b4:	2101      	movs	r1, #1
 80049b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	223c      	movs	r2, #60	; 0x3c
 80049bc:	2100      	movs	r1, #0
 80049be:	5499      	strb	r1, [r3, r2]

  return status;
 80049c0:	230f      	movs	r3, #15
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	781b      	ldrb	r3, [r3, #0]
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b004      	add	sp, #16
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	ffceff88 	.word	0xffceff88
 80049d4:	ffff00ff 	.word	0xffff00ff

080049d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a10:	46c0      	nop			; (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	; (8004b18 <TIM_Base_SetConfig+0x100>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d008      	beq.n	8004a42 <TIM_Base_SetConfig+0x2a>
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	05db      	lsls	r3, r3, #23
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d003      	beq.n	8004a42 <TIM_Base_SetConfig+0x2a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a37      	ldr	r2, [pc, #220]	; (8004b1c <TIM_Base_SetConfig+0x104>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2270      	movs	r2, #112	; 0x70
 8004a46:	4393      	bics	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a30      	ldr	r2, [pc, #192]	; (8004b18 <TIM_Base_SetConfig+0x100>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d018      	beq.n	8004a8e <TIM_Base_SetConfig+0x76>
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	05db      	lsls	r3, r3, #23
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d013      	beq.n	8004a8e <TIM_Base_SetConfig+0x76>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2c      	ldr	r2, [pc, #176]	; (8004b1c <TIM_Base_SetConfig+0x104>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00f      	beq.n	8004a8e <TIM_Base_SetConfig+0x76>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <TIM_Base_SetConfig+0x108>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00b      	beq.n	8004a8e <TIM_Base_SetConfig+0x76>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <TIM_Base_SetConfig+0x10c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d007      	beq.n	8004a8e <TIM_Base_SetConfig+0x76>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <TIM_Base_SetConfig+0x110>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d003      	beq.n	8004a8e <TIM_Base_SetConfig+0x76>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a28      	ldr	r2, [pc, #160]	; (8004b2c <TIM_Base_SetConfig+0x114>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a27      	ldr	r2, [pc, #156]	; (8004b30 <TIM_Base_SetConfig+0x118>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2280      	movs	r2, #128	; 0x80
 8004aa4:	4393      	bics	r3, r2
 8004aa6:	001a      	movs	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <TIM_Base_SetConfig+0x100>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00b      	beq.n	8004ae6 <TIM_Base_SetConfig+0xce>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <TIM_Base_SetConfig+0x10c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <TIM_Base_SetConfig+0xce>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <TIM_Base_SetConfig+0x110>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_Base_SetConfig+0xce>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <TIM_Base_SetConfig+0x114>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d103      	bne.n	8004aee <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2201      	movs	r2, #1
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d106      	bne.n	8004b0e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4393      	bics	r3, r2
 8004b08:	001a      	movs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	611a      	str	r2, [r3, #16]
  }
}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b004      	add	sp, #16
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	40012c00 	.word	0x40012c00
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40002000 	.word	0x40002000
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800
 8004b30:	fffffcff 	.word	0xfffffcff

08004b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	4393      	bics	r3, r2
 8004b4c:	001a      	movs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a32      	ldr	r2, [pc, #200]	; (8004c2c <TIM_OC1_SetConfig+0xf8>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2203      	movs	r2, #3
 8004b6a:	4393      	bics	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	4393      	bics	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a28      	ldr	r2, [pc, #160]	; (8004c30 <TIM_OC1_SetConfig+0xfc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00b      	beq.n	8004baa <TIM_OC1_SetConfig+0x76>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a27      	ldr	r2, [pc, #156]	; (8004c34 <TIM_OC1_SetConfig+0x100>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <TIM_OC1_SetConfig+0x76>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a26      	ldr	r2, [pc, #152]	; (8004c38 <TIM_OC1_SetConfig+0x104>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_OC1_SetConfig+0x76>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a25      	ldr	r2, [pc, #148]	; (8004c3c <TIM_OC1_SetConfig+0x108>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d10c      	bne.n	8004bc4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2208      	movs	r2, #8
 8004bae:	4393      	bics	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	4393      	bics	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <TIM_OC1_SetConfig+0xfc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00b      	beq.n	8004be4 <TIM_OC1_SetConfig+0xb0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a19      	ldr	r2, [pc, #100]	; (8004c34 <TIM_OC1_SetConfig+0x100>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_OC1_SetConfig+0xb0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <TIM_OC1_SetConfig+0x104>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC1_SetConfig+0xb0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <TIM_OC1_SetConfig+0x108>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d111      	bne.n	8004c08 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <TIM_OC1_SetConfig+0x10c>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <TIM_OC1_SetConfig+0x110>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b006      	add	sp, #24
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	fffeff8f 	.word	0xfffeff8f
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800
 8004c40:	fffffeff 	.word	0xfffffeff
 8004c44:	fffffdff 	.word	0xfffffdff

08004c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	4393      	bics	r3, r2
 8004c60:	001a      	movs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a2e      	ldr	r2, [pc, #184]	; (8004d30 <TIM_OC2_SetConfig+0xe8>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4a2d      	ldr	r2, [pc, #180]	; (8004d34 <TIM_OC2_SetConfig+0xec>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2220      	movs	r2, #32
 8004c92:	4393      	bics	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <TIM_OC2_SetConfig+0xf0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10d      	bne.n	8004cc6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	4393      	bics	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2240      	movs	r2, #64	; 0x40
 8004cc2:	4393      	bics	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <TIM_OC2_SetConfig+0xf0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <TIM_OC2_SetConfig+0x9e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1a      	ldr	r2, [pc, #104]	; (8004d3c <TIM_OC2_SetConfig+0xf4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <TIM_OC2_SetConfig+0x9e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <TIM_OC2_SetConfig+0xf8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_OC2_SetConfig+0x9e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <TIM_OC2_SetConfig+0xfc>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d113      	bne.n	8004d0e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <TIM_OC2_SetConfig+0x100>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4a16      	ldr	r2, [pc, #88]	; (8004d4c <TIM_OC2_SetConfig+0x104>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	621a      	str	r2, [r3, #32]
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b006      	add	sp, #24
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	feff8fff 	.word	0xfeff8fff
 8004d34:	fffffcff 	.word	0xfffffcff
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800
 8004d48:	fffffbff 	.word	0xfffffbff
 8004d4c:	fffff7ff 	.word	0xfffff7ff

08004d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	4a33      	ldr	r2, [pc, #204]	; (8004e34 <TIM_OC3_SetConfig+0xe4>)
 8004d66:	401a      	ands	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <TIM_OC3_SetConfig+0xe8>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2203      	movs	r2, #3
 8004d84:	4393      	bics	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <TIM_OC3_SetConfig+0xec>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <TIM_OC3_SetConfig+0xf0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10d      	bne.n	8004dca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <TIM_OC3_SetConfig+0xf4>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	4a20      	ldr	r2, [pc, #128]	; (8004e48 <TIM_OC3_SetConfig+0xf8>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <TIM_OC3_SetConfig+0xf0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_OC3_SetConfig+0x9a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <TIM_OC3_SetConfig+0xfc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_OC3_SetConfig+0x9a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <TIM_OC3_SetConfig+0x100>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_OC3_SetConfig+0x9a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <TIM_OC3_SetConfig+0x104>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d113      	bne.n	8004e12 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4a1a      	ldr	r2, [pc, #104]	; (8004e58 <TIM_OC3_SetConfig+0x108>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <TIM_OC3_SetConfig+0x10c>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	621a      	str	r2, [r3, #32]
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b006      	add	sp, #24
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	fffffeff 	.word	0xfffffeff
 8004e38:	fffeff8f 	.word	0xfffeff8f
 8004e3c:	fffffdff 	.word	0xfffffdff
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	fffff7ff 	.word	0xfffff7ff
 8004e48:	fffffbff 	.word	0xfffffbff
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400
 8004e54:	40014800 	.word	0x40014800
 8004e58:	ffffefff 	.word	0xffffefff
 8004e5c:	ffffdfff 	.word	0xffffdfff

08004e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4a26      	ldr	r2, [pc, #152]	; (8004f10 <TIM_OC4_SetConfig+0xb0>)
 8004e76:	401a      	ands	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <TIM_OC4_SetConfig+0xb4>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <TIM_OC4_SetConfig+0xb8>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <TIM_OC4_SetConfig+0xbc>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	031b      	lsls	r3, r3, #12
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a19      	ldr	r2, [pc, #100]	; (8004f20 <TIM_OC4_SetConfig+0xc0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00b      	beq.n	8004ed8 <TIM_OC4_SetConfig+0x78>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a18      	ldr	r2, [pc, #96]	; (8004f24 <TIM_OC4_SetConfig+0xc4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d007      	beq.n	8004ed8 <TIM_OC4_SetConfig+0x78>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <TIM_OC4_SetConfig+0xc8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_OC4_SetConfig+0x78>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <TIM_OC4_SetConfig+0xcc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d109      	bne.n	8004eec <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <TIM_OC4_SetConfig+0xd0>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b006      	add	sp, #24
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	ffffefff 	.word	0xffffefff
 8004f14:	feff8fff 	.word	0xfeff8fff
 8004f18:	fffffcff 	.word	0xfffffcff
 8004f1c:	ffffdfff 	.word	0xffffdfff
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800
 8004f30:	ffffbfff 	.word	0xffffbfff

08004f34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	4a23      	ldr	r2, [pc, #140]	; (8004fd8 <TIM_OC5_SetConfig+0xa4>)
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <TIM_OC5_SetConfig+0xa8>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <TIM_OC5_SetConfig+0xac>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a17      	ldr	r2, [pc, #92]	; (8004fe4 <TIM_OC5_SetConfig+0xb0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_OC5_SetConfig+0x6e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a16      	ldr	r2, [pc, #88]	; (8004fe8 <TIM_OC5_SetConfig+0xb4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_OC5_SetConfig+0x6e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a15      	ldr	r2, [pc, #84]	; (8004fec <TIM_OC5_SetConfig+0xb8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC5_SetConfig+0x6e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <TIM_OC5_SetConfig+0xbc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d109      	bne.n	8004fb6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <TIM_OC5_SetConfig+0xa4>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	46c0      	nop			; (mov r8, r8)
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b006      	add	sp, #24
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	fffeffff 	.word	0xfffeffff
 8004fdc:	fffeff8f 	.word	0xfffeff8f
 8004fe0:	fffdffff 	.word	0xfffdffff
 8004fe4:	40012c00 	.word	0x40012c00
 8004fe8:	40014000 	.word	0x40014000
 8004fec:	40014400 	.word	0x40014400
 8004ff0:	40014800 	.word	0x40014800

08004ff4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	4a24      	ldr	r2, [pc, #144]	; (800509c <TIM_OC6_SetConfig+0xa8>)
 800500a:	401a      	ands	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4a20      	ldr	r2, [pc, #128]	; (80050a0 <TIM_OC6_SetConfig+0xac>)
 8005020:	4013      	ands	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4a1c      	ldr	r2, [pc, #112]	; (80050a4 <TIM_OC6_SetConfig+0xb0>)
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	051b      	lsls	r3, r3, #20
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <TIM_OC6_SetConfig+0xb4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00b      	beq.n	8005064 <TIM_OC6_SetConfig+0x70>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a17      	ldr	r2, [pc, #92]	; (80050ac <TIM_OC6_SetConfig+0xb8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d007      	beq.n	8005064 <TIM_OC6_SetConfig+0x70>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <TIM_OC6_SetConfig+0xbc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_OC6_SetConfig+0x70>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <TIM_OC6_SetConfig+0xc0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d109      	bne.n	8005078 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4a14      	ldr	r2, [pc, #80]	; (80050b8 <TIM_OC6_SetConfig+0xc4>)
 8005068:	4013      	ands	r3, r2
 800506a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	029b      	lsls	r3, r3, #10
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	46bd      	mov	sp, r7
 8005096:	b006      	add	sp, #24
 8005098:	bd80      	pop	{r7, pc}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	ffefffff 	.word	0xffefffff
 80050a0:	feff8fff 	.word	0xfeff8fff
 80050a4:	ffdfffff 	.word	0xffdfffff
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800
 80050b8:	fffbffff 	.word	0xfffbffff

080050bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	2201      	movs	r2, #1
 80050d4:	4393      	bics	r3, r2
 80050d6:	001a      	movs	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	22f0      	movs	r2, #240	; 0xf0
 80050e6:	4393      	bics	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	220a      	movs	r2, #10
 80050f8:	4393      	bics	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	621a      	str	r2, [r3, #32]
}
 8005110:	46c0      	nop			; (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	b006      	add	sp, #24
 8005116:	bd80      	pop	{r7, pc}

08005118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	2210      	movs	r2, #16
 8005130:	4393      	bics	r3, r2
 8005132:	001a      	movs	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4a0d      	ldr	r2, [pc, #52]	; (8005178 <TIM_TI2_ConfigInputStage+0x60>)
 8005142:	4013      	ands	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	031b      	lsls	r3, r3, #12
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	22a0      	movs	r2, #160	; 0xa0
 8005154:	4393      	bics	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	b006      	add	sp, #24
 8005174:	bd80      	pop	{r7, pc}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	ffff0fff 	.word	0xffff0fff

0800517c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <TIM_ITRx_SetConfig+0x34>)
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	2207      	movs	r2, #7
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	609a      	str	r2, [r3, #8]
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b004      	add	sp, #16
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	ffcfff8f 	.word	0xffcfff8f

080051b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <TIM_ETR_SetConfig+0x3c>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	021a      	lsls	r2, r3, #8
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4313      	orrs	r3, r2
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b006      	add	sp, #24
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	ffff00ff 	.word	0xffff00ff

080051f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	221f      	movs	r2, #31
 8005204:	4013      	ands	r3, r2
 8005206:	2201      	movs	r2, #1
 8005208:	409a      	lsls	r2, r3
 800520a:	0013      	movs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	43d2      	mvns	r2, r2
 8005216:	401a      	ands	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	211f      	movs	r1, #31
 8005224:	400b      	ands	r3, r1
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4099      	lsls	r1, r3
 800522a:	000b      	movs	r3, r1
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	46bd      	mov	sp, r7
 8005236:	b006      	add	sp, #24
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	223c      	movs	r2, #60	; 0x3c
 800524a:	5c9b      	ldrb	r3, [r3, r2]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005250:	2302      	movs	r3, #2
 8005252:	e055      	b.n	8005300 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	223c      	movs	r2, #60	; 0x3c
 8005258:	2101      	movs	r1, #1
 800525a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	223d      	movs	r2, #61	; 0x3d
 8005260:	2102      	movs	r1, #2
 8005262:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a23      	ldr	r2, [pc, #140]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d108      	bne.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4a22      	ldr	r2, [pc, #136]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005282:	4013      	ands	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2270      	movs	r2, #112	; 0x70
 8005294:	4393      	bics	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a16      	ldr	r2, [pc, #88]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00f      	beq.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	05db      	lsls	r3, r3, #23
 80052bc:	429a      	cmp	r2, r3
 80052be:	d009      	beq.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a12      	ldr	r2, [pc, #72]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a11      	ldr	r2, [pc, #68]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d10c      	bne.n	80052ee <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2280      	movs	r2, #128	; 0x80
 80052d8:	4393      	bics	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	223d      	movs	r2, #61	; 0x3d
 80052f2:	2101      	movs	r1, #1
 80052f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	223c      	movs	r2, #60	; 0x3c
 80052fa:	2100      	movs	r1, #0
 80052fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	0018      	movs	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	b004      	add	sp, #16
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40012c00 	.word	0x40012c00
 800530c:	ff0fffff 	.word	0xff0fffff
 8005310:	40000400 	.word	0x40000400
 8005314:	40014000 	.word	0x40014000

08005318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005320:	46c0      	nop			; (mov r8, r8)
 8005322:	46bd      	mov	sp, r7
 8005324:	b002      	add	sp, #8
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005330:	46c0      	nop			; (mov r8, r8)
 8005332:	46bd      	mov	sp, r7
 8005334:	b002      	add	sp, #8
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005340:	46c0      	nop			; (mov r8, r8)
 8005342:	46bd      	mov	sp, r7
 8005344:	b002      	add	sp, #8
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e046      	b.n	80053e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2288      	movs	r2, #136	; 0x88
 800535e:	589b      	ldr	r3, [r3, r2]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d107      	bne.n	8005374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2284      	movs	r2, #132	; 0x84
 8005368:	2100      	movs	r1, #0
 800536a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	0018      	movs	r0, r3
 8005370:	f7fb ff9c 	bl	80012ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2288      	movs	r2, #136	; 0x88
 8005378:	2124      	movs	r1, #36	; 0x24
 800537a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2101      	movs	r1, #1
 8005388:	438a      	bics	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	0018      	movs	r0, r3
 8005398:	f000 ff2e 	bl	80061f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 fc6c 	bl	8005c7c <UART_SetConfig>
 80053a4:	0003      	movs	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e01c      	b.n	80053e8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	490d      	ldr	r1, [pc, #52]	; (80053f0 <HAL_UART_Init+0xa8>)
 80053ba:	400a      	ands	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	212a      	movs	r1, #42	; 0x2a
 80053ca:	438a      	bics	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2101      	movs	r1, #1
 80053da:	430a      	orrs	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 ffbd 	bl	8006360 <UART_CheckIdleState>
 80053e6:	0003      	movs	r3, r0
}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b002      	add	sp, #8
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	ffffb7ff 	.word	0xffffb7ff

080053f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	1dbb      	adds	r3, r7, #6
 8005402:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2288      	movs	r2, #136	; 0x88
 8005408:	589b      	ldr	r3, [r3, r2]
 800540a:	2b20      	cmp	r3, #32
 800540c:	d000      	beq.n	8005410 <HAL_UART_Transmit+0x1c>
 800540e:	e090      	b.n	8005532 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_UART_Transmit+0x2a>
 8005416:	1dbb      	adds	r3, r7, #6
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e088      	b.n	8005534 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	015b      	lsls	r3, r3, #5
 800542a:	429a      	cmp	r2, r3
 800542c:	d109      	bne.n	8005442 <HAL_UART_Transmit+0x4e>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d105      	bne.n	8005442 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2201      	movs	r2, #1
 800543a:	4013      	ands	r3, r2
 800543c:	d001      	beq.n	8005442 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e078      	b.n	8005534 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2290      	movs	r2, #144	; 0x90
 8005446:	2100      	movs	r1, #0
 8005448:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2288      	movs	r2, #136	; 0x88
 800544e:	2121      	movs	r1, #33	; 0x21
 8005450:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005452:	f7fc f8bd 	bl	80015d0 <HAL_GetTick>
 8005456:	0003      	movs	r3, r0
 8005458:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1dba      	adds	r2, r7, #6
 800545e:	2154      	movs	r1, #84	; 0x54
 8005460:	8812      	ldrh	r2, [r2, #0]
 8005462:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1dba      	adds	r2, r7, #6
 8005468:	2156      	movs	r1, #86	; 0x56
 800546a:	8812      	ldrh	r2, [r2, #0]
 800546c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	015b      	lsls	r3, r3, #5
 8005476:	429a      	cmp	r2, r3
 8005478:	d108      	bne.n	800548c <HAL_UART_Transmit+0x98>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	e003      	b.n	8005494 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005494:	e030      	b.n	80054f8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	0013      	movs	r3, r2
 80054a0:	2200      	movs	r2, #0
 80054a2:	2180      	movs	r1, #128	; 0x80
 80054a4:	f001 f806 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 80054a8:	1e03      	subs	r3, r0, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2288      	movs	r2, #136	; 0x88
 80054b0:	2120      	movs	r1, #32
 80054b2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e03d      	b.n	8005534 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10b      	bne.n	80054d6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	001a      	movs	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	05d2      	lsls	r2, r2, #23
 80054ca:	0dd2      	lsrs	r2, r2, #23
 80054cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	3302      	adds	r3, #2
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	e007      	b.n	80054e6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	3301      	adds	r3, #1
 80054e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2256      	movs	r2, #86	; 0x56
 80054ea:	5a9b      	ldrh	r3, [r3, r2]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b299      	uxth	r1, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2256      	movs	r2, #86	; 0x56
 80054f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2256      	movs	r2, #86	; 0x56
 80054fc:	5a9b      	ldrh	r3, [r3, r2]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1c8      	bne.n	8005496 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	0013      	movs	r3, r2
 800550e:	2200      	movs	r2, #0
 8005510:	2140      	movs	r1, #64	; 0x40
 8005512:	f000 ffcf 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 8005516:	1e03      	subs	r3, r0, #0
 8005518:	d005      	beq.n	8005526 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2288      	movs	r2, #136	; 0x88
 800551e:	2120      	movs	r1, #32
 8005520:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e006      	b.n	8005534 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2288      	movs	r2, #136	; 0x88
 800552a:	2120      	movs	r1, #32
 800552c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e000      	b.n	8005534 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
  }
}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b008      	add	sp, #32
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	1dbb      	adds	r3, r7, #6
 8005548:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	228c      	movs	r2, #140	; 0x8c
 800554e:	589b      	ldr	r3, [r3, r2]
 8005550:	2b20      	cmp	r3, #32
 8005552:	d14a      	bne.n	80055ea <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_UART_Receive_IT+0x26>
 800555a:	1dbb      	adds	r3, r7, #6
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e042      	b.n	80055ec <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	2380      	movs	r3, #128	; 0x80
 800556c:	015b      	lsls	r3, r3, #5
 800556e:	429a      	cmp	r2, r3
 8005570:	d109      	bne.n	8005586 <HAL_UART_Receive_IT+0x4a>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d105      	bne.n	8005586 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2201      	movs	r2, #1
 800557e:	4013      	ands	r3, r2
 8005580:	d001      	beq.n	8005586 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e032      	b.n	80055ec <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_UART_Receive_IT+0xb8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d020      	beq.n	80055d8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	4013      	ands	r3, r2
 80055a2:	d019      	beq.n	80055d8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a4:	f3ef 8310 	mrs	r3, PRIMASK
 80055a8:	613b      	str	r3, [r7, #16]
  return(result);
 80055aa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	2301      	movs	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f383 8810 	msr	PRIMASK, r3
}
 80055b8:	46c0      	nop			; (mov r8, r8)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	04c9      	lsls	r1, r1, #19
 80055c8:	430a      	orrs	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f383 8810 	msr	PRIMASK, r3
}
 80055d6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055d8:	1dbb      	adds	r3, r7, #6
 80055da:	881a      	ldrh	r2, [r3, #0]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	0018      	movs	r0, r3
 80055e2:	f000 ffd7 	bl	8006594 <UART_Start_Receive_IT>
 80055e6:	0003      	movs	r3, r0
 80055e8:	e000      	b.n	80055ec <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80055ea:	2302      	movs	r3, #2
  }
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b008      	add	sp, #32
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40008000 	.word	0x40008000

080055f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055f8:	b5b0      	push	{r4, r5, r7, lr}
 80055fa:	b0aa      	sub	sp, #168	; 0xa8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	22a4      	movs	r2, #164	; 0xa4
 8005608:	18b9      	adds	r1, r7, r2
 800560a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	20a0      	movs	r0, #160	; 0xa0
 8005614:	1839      	adds	r1, r7, r0
 8005616:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	249c      	movs	r4, #156	; 0x9c
 8005620:	1939      	adds	r1, r7, r4
 8005622:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005624:	0011      	movs	r1, r2
 8005626:	18bb      	adds	r3, r7, r2
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4aa2      	ldr	r2, [pc, #648]	; (80058b4 <HAL_UART_IRQHandler+0x2bc>)
 800562c:	4013      	ands	r3, r2
 800562e:	2298      	movs	r2, #152	; 0x98
 8005630:	18bd      	adds	r5, r7, r2
 8005632:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005634:	18bb      	adds	r3, r7, r2
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d11a      	bne.n	8005672 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800563c:	187b      	adds	r3, r7, r1
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2220      	movs	r2, #32
 8005642:	4013      	ands	r3, r2
 8005644:	d015      	beq.n	8005672 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005646:	183b      	adds	r3, r7, r0
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2220      	movs	r2, #32
 800564c:	4013      	ands	r3, r2
 800564e:	d105      	bne.n	800565c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005650:	193b      	adds	r3, r7, r4
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	055b      	lsls	r3, r3, #21
 8005658:	4013      	ands	r3, r2
 800565a:	d00a      	beq.n	8005672 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005660:	2b00      	cmp	r3, #0
 8005662:	d100      	bne.n	8005666 <HAL_UART_IRQHandler+0x6e>
 8005664:	e2dc      	b.n	8005c20 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	0010      	movs	r0, r2
 800566e:	4798      	blx	r3
      }
      return;
 8005670:	e2d6      	b.n	8005c20 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005672:	2398      	movs	r3, #152	; 0x98
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d100      	bne.n	800567e <HAL_UART_IRQHandler+0x86>
 800567c:	e122      	b.n	80058c4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800567e:	239c      	movs	r3, #156	; 0x9c
 8005680:	18fb      	adds	r3, r7, r3
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a8c      	ldr	r2, [pc, #560]	; (80058b8 <HAL_UART_IRQHandler+0x2c0>)
 8005686:	4013      	ands	r3, r2
 8005688:	d106      	bne.n	8005698 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800568a:	23a0      	movs	r3, #160	; 0xa0
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a8a      	ldr	r2, [pc, #552]	; (80058bc <HAL_UART_IRQHandler+0x2c4>)
 8005692:	4013      	ands	r3, r2
 8005694:	d100      	bne.n	8005698 <HAL_UART_IRQHandler+0xa0>
 8005696:	e115      	b.n	80058c4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005698:	23a4      	movs	r3, #164	; 0xa4
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2201      	movs	r2, #1
 80056a0:	4013      	ands	r3, r2
 80056a2:	d012      	beq.n	80056ca <HAL_UART_IRQHandler+0xd2>
 80056a4:	23a0      	movs	r3, #160	; 0xa0
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	4013      	ands	r3, r2
 80056b0:	d00b      	beq.n	80056ca <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2290      	movs	r2, #144	; 0x90
 80056be:	589b      	ldr	r3, [r3, r2]
 80056c0:	2201      	movs	r2, #1
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2190      	movs	r1, #144	; 0x90
 80056c8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ca:	23a4      	movs	r3, #164	; 0xa4
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2202      	movs	r2, #2
 80056d2:	4013      	ands	r3, r2
 80056d4:	d011      	beq.n	80056fa <HAL_UART_IRQHandler+0x102>
 80056d6:	239c      	movs	r3, #156	; 0x9c
 80056d8:	18fb      	adds	r3, r7, r3
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2201      	movs	r2, #1
 80056de:	4013      	ands	r3, r2
 80056e0:	d00b      	beq.n	80056fa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2202      	movs	r2, #2
 80056e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2290      	movs	r2, #144	; 0x90
 80056ee:	589b      	ldr	r3, [r3, r2]
 80056f0:	2204      	movs	r2, #4
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2190      	movs	r1, #144	; 0x90
 80056f8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056fa:	23a4      	movs	r3, #164	; 0xa4
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2204      	movs	r2, #4
 8005702:	4013      	ands	r3, r2
 8005704:	d011      	beq.n	800572a <HAL_UART_IRQHandler+0x132>
 8005706:	239c      	movs	r3, #156	; 0x9c
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2201      	movs	r2, #1
 800570e:	4013      	ands	r3, r2
 8005710:	d00b      	beq.n	800572a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2204      	movs	r2, #4
 8005718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2290      	movs	r2, #144	; 0x90
 800571e:	589b      	ldr	r3, [r3, r2]
 8005720:	2202      	movs	r2, #2
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2190      	movs	r1, #144	; 0x90
 8005728:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800572a:	23a4      	movs	r3, #164	; 0xa4
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2208      	movs	r2, #8
 8005732:	4013      	ands	r3, r2
 8005734:	d017      	beq.n	8005766 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005736:	23a0      	movs	r3, #160	; 0xa0
 8005738:	18fb      	adds	r3, r7, r3
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2220      	movs	r2, #32
 800573e:	4013      	ands	r3, r2
 8005740:	d105      	bne.n	800574e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005742:	239c      	movs	r3, #156	; 0x9c
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a5b      	ldr	r2, [pc, #364]	; (80058b8 <HAL_UART_IRQHandler+0x2c0>)
 800574a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800574c:	d00b      	beq.n	8005766 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2208      	movs	r2, #8
 8005754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2290      	movs	r2, #144	; 0x90
 800575a:	589b      	ldr	r3, [r3, r2]
 800575c:	2208      	movs	r2, #8
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2190      	movs	r1, #144	; 0x90
 8005764:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005766:	23a4      	movs	r3, #164	; 0xa4
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	4013      	ands	r3, r2
 8005772:	d013      	beq.n	800579c <HAL_UART_IRQHandler+0x1a4>
 8005774:	23a0      	movs	r3, #160	; 0xa0
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	2380      	movs	r3, #128	; 0x80
 800577c:	04db      	lsls	r3, r3, #19
 800577e:	4013      	ands	r3, r2
 8005780:	d00c      	beq.n	800579c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	0112      	lsls	r2, r2, #4
 800578a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2290      	movs	r2, #144	; 0x90
 8005790:	589b      	ldr	r3, [r3, r2]
 8005792:	2220      	movs	r2, #32
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2190      	movs	r1, #144	; 0x90
 800579a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2290      	movs	r2, #144	; 0x90
 80057a0:	589b      	ldr	r3, [r3, r2]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d100      	bne.n	80057a8 <HAL_UART_IRQHandler+0x1b0>
 80057a6:	e23d      	b.n	8005c24 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057a8:	23a4      	movs	r3, #164	; 0xa4
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2220      	movs	r2, #32
 80057b0:	4013      	ands	r3, r2
 80057b2:	d015      	beq.n	80057e0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057b4:	23a0      	movs	r3, #160	; 0xa0
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2220      	movs	r2, #32
 80057bc:	4013      	ands	r3, r2
 80057be:	d106      	bne.n	80057ce <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057c0:	239c      	movs	r3, #156	; 0x9c
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	2380      	movs	r3, #128	; 0x80
 80057c8:	055b      	lsls	r3, r3, #21
 80057ca:	4013      	ands	r3, r2
 80057cc:	d008      	beq.n	80057e0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	0010      	movs	r0, r2
 80057de:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2290      	movs	r2, #144	; 0x90
 80057e4:	589b      	ldr	r3, [r3, r2]
 80057e6:	2194      	movs	r1, #148	; 0x94
 80057e8:	187a      	adds	r2, r7, r1
 80057ea:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2240      	movs	r2, #64	; 0x40
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b40      	cmp	r3, #64	; 0x40
 80057f8:	d004      	beq.n	8005804 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057fa:	187b      	adds	r3, r7, r1
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2228      	movs	r2, #40	; 0x28
 8005800:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005802:	d04c      	beq.n	800589e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	0018      	movs	r0, r3
 8005808:	f000 ffe8 	bl	80067dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	2240      	movs	r2, #64	; 0x40
 8005814:	4013      	ands	r3, r2
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d13c      	bne.n	8005894 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581a:	f3ef 8310 	mrs	r3, PRIMASK
 800581e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	2090      	movs	r0, #144	; 0x90
 8005824:	183a      	adds	r2, r7, r0
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	2301      	movs	r3, #1
 800582a:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800582e:	f383 8810 	msr	PRIMASK, r3
}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2140      	movs	r1, #64	; 0x40
 8005840:	438a      	bics	r2, r1
 8005842:	609a      	str	r2, [r3, #8]
 8005844:	183b      	adds	r3, r7, r0
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800584c:	f383 8810 	msr	PRIMASK, r3
}
 8005850:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2280      	movs	r2, #128	; 0x80
 8005856:	589b      	ldr	r3, [r3, r2]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d016      	beq.n	800588a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2280      	movs	r2, #128	; 0x80
 8005860:	589b      	ldr	r3, [r3, r2]
 8005862:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <HAL_UART_IRQHandler+0x2c8>)
 8005864:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	589b      	ldr	r3, [r3, r2]
 800586c:	0018      	movs	r0, r3
 800586e:	f7fc fe63 	bl	8002538 <HAL_DMA_Abort_IT>
 8005872:	1e03      	subs	r3, r0, #0
 8005874:	d01c      	beq.n	80058b0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2280      	movs	r2, #128	; 0x80
 800587a:	589b      	ldr	r3, [r3, r2]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	2180      	movs	r1, #128	; 0x80
 8005882:	5852      	ldr	r2, [r2, r1]
 8005884:	0010      	movs	r0, r2
 8005886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	e012      	b.n	80058b0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f000 f9e1 	bl	8005c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005892:	e00d      	b.n	80058b0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	0018      	movs	r0, r3
 8005898:	f000 f9dc 	bl	8005c54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e008      	b.n	80058b0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f000 f9d7 	bl	8005c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2290      	movs	r2, #144	; 0x90
 80058aa:	2100      	movs	r1, #0
 80058ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80058ae:	e1b9      	b.n	8005c24 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	46c0      	nop			; (mov r8, r8)
    return;
 80058b2:	e1b7      	b.n	8005c24 <HAL_UART_IRQHandler+0x62c>
 80058b4:	0000080f 	.word	0x0000080f
 80058b8:	10000001 	.word	0x10000001
 80058bc:	04000120 	.word	0x04000120
 80058c0:	080068a9 	.word	0x080068a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d000      	beq.n	80058ce <HAL_UART_IRQHandler+0x2d6>
 80058cc:	e13e      	b.n	8005b4c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058ce:	23a4      	movs	r3, #164	; 0xa4
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2210      	movs	r2, #16
 80058d6:	4013      	ands	r3, r2
 80058d8:	d100      	bne.n	80058dc <HAL_UART_IRQHandler+0x2e4>
 80058da:	e137      	b.n	8005b4c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058dc:	23a0      	movs	r3, #160	; 0xa0
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2210      	movs	r2, #16
 80058e4:	4013      	ands	r3, r2
 80058e6:	d100      	bne.n	80058ea <HAL_UART_IRQHandler+0x2f2>
 80058e8:	e130      	b.n	8005b4c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2210      	movs	r2, #16
 80058f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2240      	movs	r2, #64	; 0x40
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d000      	beq.n	8005902 <HAL_UART_IRQHandler+0x30a>
 8005900:	e0a4      	b.n	8005a4c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2280      	movs	r2, #128	; 0x80
 8005906:	589b      	ldr	r3, [r3, r2]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	217e      	movs	r1, #126	; 0x7e
 800590e:	187b      	adds	r3, r7, r1
 8005910:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005912:	187b      	adds	r3, r7, r1
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d100      	bne.n	800591c <HAL_UART_IRQHandler+0x324>
 800591a:	e185      	b.n	8005c28 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	225c      	movs	r2, #92	; 0x5c
 8005920:	5a9b      	ldrh	r3, [r3, r2]
 8005922:	187a      	adds	r2, r7, r1
 8005924:	8812      	ldrh	r2, [r2, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d300      	bcc.n	800592c <HAL_UART_IRQHandler+0x334>
 800592a:	e17d      	b.n	8005c28 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	187a      	adds	r2, r7, r1
 8005930:	215e      	movs	r1, #94	; 0x5e
 8005932:	8812      	ldrh	r2, [r2, #0]
 8005934:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2280      	movs	r2, #128	; 0x80
 800593a:	589b      	ldr	r3, [r3, r2]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2220      	movs	r2, #32
 8005942:	4013      	ands	r3, r2
 8005944:	d170      	bne.n	8005a28 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005946:	f3ef 8310 	mrs	r3, PRIMASK
 800594a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800594e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005950:	2301      	movs	r3, #1
 8005952:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	f383 8810 	msr	PRIMASK, r3
}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	49b4      	ldr	r1, [pc, #720]	; (8005c38 <HAL_UART_IRQHandler+0x640>)
 8005968:	400a      	ands	r2, r1
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800596e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	f383 8810 	msr	PRIMASK, r3
}
 8005976:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005978:	f3ef 8310 	mrs	r3, PRIMASK
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800597e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005980:	677b      	str	r3, [r7, #116]	; 0x74
 8005982:	2301      	movs	r3, #1
 8005984:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005988:	f383 8810 	msr	PRIMASK, r3
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2101      	movs	r1, #1
 800599a:	438a      	bics	r2, r1
 800599c:	609a      	str	r2, [r3, #8]
 800599e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a4:	f383 8810 	msr	PRIMASK, r3
}
 80059a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059aa:	f3ef 8310 	mrs	r3, PRIMASK
 80059ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80059b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b2:	673b      	str	r3, [r7, #112]	; 0x70
 80059b4:	2301      	movs	r3, #1
 80059b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ba:	f383 8810 	msr	PRIMASK, r3
}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2140      	movs	r1, #64	; 0x40
 80059cc:	438a      	bics	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059d2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d6:	f383 8810 	msr	PRIMASK, r3
}
 80059da:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	228c      	movs	r2, #140	; 0x8c
 80059e0:	2120      	movs	r1, #32
 80059e2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ea:	f3ef 8310 	mrs	r3, PRIMASK
 80059ee:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80059f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f4:	2301      	movs	r3, #1
 80059f6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059fa:	f383 8810 	msr	PRIMASK, r3
}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2110      	movs	r1, #16
 8005a0c:	438a      	bics	r2, r1
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a12:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a16:	f383 8810 	msr	PRIMASK, r3
}
 8005a1a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2280      	movs	r2, #128	; 0x80
 8005a20:	589b      	ldr	r3, [r3, r2]
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fc fd26 	bl	8002474 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	225c      	movs	r2, #92	; 0x5c
 8005a32:	5a9a      	ldrh	r2, [r3, r2]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	215e      	movs	r1, #94	; 0x5e
 8005a38:	5a5b      	ldrh	r3, [r3, r1]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	0011      	movs	r1, r2
 8005a44:	0018      	movs	r0, r3
 8005a46:	f000 f90d 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a4a:	e0ed      	b.n	8005c28 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	225c      	movs	r2, #92	; 0x5c
 8005a50:	5a99      	ldrh	r1, [r3, r2]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	225e      	movs	r2, #94	; 0x5e
 8005a56:	5a9b      	ldrh	r3, [r3, r2]
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	208e      	movs	r0, #142	; 0x8e
 8005a5c:	183b      	adds	r3, r7, r0
 8005a5e:	1a8a      	subs	r2, r1, r2
 8005a60:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	225e      	movs	r2, #94	; 0x5e
 8005a66:	5a9b      	ldrh	r3, [r3, r2]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d100      	bne.n	8005a70 <HAL_UART_IRQHandler+0x478>
 8005a6e:	e0dd      	b.n	8005c2c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005a70:	183b      	adds	r3, r7, r0
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d100      	bne.n	8005a7a <HAL_UART_IRQHandler+0x482>
 8005a78:	e0d8      	b.n	8005c2c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a80:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a82:	2488      	movs	r4, #136	; 0x88
 8005a84:	193a      	adds	r2, r7, r4
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	2301      	movs	r3, #1
 8005a8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f383 8810 	msr	PRIMASK, r3
}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4967      	ldr	r1, [pc, #412]	; (8005c3c <HAL_UART_IRQHandler+0x644>)
 8005aa0:	400a      	ands	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	193b      	adds	r3, r7, r4
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f383 8810 	msr	PRIMASK, r3
}
 8005ab0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ab8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aba:	2484      	movs	r4, #132	; 0x84
 8005abc:	193a      	adds	r2, r7, r4
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	495a      	ldr	r1, [pc, #360]	; (8005c40 <HAL_UART_IRQHandler+0x648>)
 8005ad8:	400a      	ands	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	193b      	adds	r3, r7, r4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f383 8810 	msr	PRIMASK, r3
}
 8005ae8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	228c      	movs	r2, #140	; 0x8c
 8005aee:	2120      	movs	r1, #32
 8005af0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afe:	f3ef 8310 	mrs	r3, PRIMASK
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b06:	2480      	movs	r4, #128	; 0x80
 8005b08:	193a      	adds	r2, r7, r4
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	f383 8810 	msr	PRIMASK, r3
}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2110      	movs	r1, #16
 8005b24:	438a      	bics	r2, r1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	193b      	adds	r3, r7, r4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	f383 8810 	msr	PRIMASK, r3
}
 8005b34:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2202      	movs	r2, #2
 8005b3a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b3c:	183b      	adds	r3, r7, r0
 8005b3e:	881a      	ldrh	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	0011      	movs	r1, r2
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 f88d 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b4a:	e06f      	b.n	8005c2c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b4c:	23a4      	movs	r3, #164	; 0xa4
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	035b      	lsls	r3, r3, #13
 8005b56:	4013      	ands	r3, r2
 8005b58:	d010      	beq.n	8005b7c <HAL_UART_IRQHandler+0x584>
 8005b5a:	239c      	movs	r3, #156	; 0x9c
 8005b5c:	18fb      	adds	r3, r7, r3
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	03db      	lsls	r3, r3, #15
 8005b64:	4013      	ands	r3, r2
 8005b66:	d009      	beq.n	8005b7c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2280      	movs	r2, #128	; 0x80
 8005b6e:	0352      	lsls	r2, r2, #13
 8005b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f001 fbeb 	bl	8007350 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b7a:	e05a      	b.n	8005c32 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b7c:	23a4      	movs	r3, #164	; 0xa4
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	4013      	ands	r3, r2
 8005b86:	d016      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b88:	23a0      	movs	r3, #160	; 0xa0
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2280      	movs	r2, #128	; 0x80
 8005b90:	4013      	ands	r3, r2
 8005b92:	d106      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b94:	239c      	movs	r3, #156	; 0x9c
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	041b      	lsls	r3, r3, #16
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d042      	beq.n	8005c30 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	0010      	movs	r0, r2
 8005bb2:	4798      	blx	r3
    }
    return;
 8005bb4:	e03c      	b.n	8005c30 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bb6:	23a4      	movs	r3, #164	; 0xa4
 8005bb8:	18fb      	adds	r3, r7, r3
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2240      	movs	r2, #64	; 0x40
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d00a      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x5e0>
 8005bc2:	23a0      	movs	r3, #160	; 0xa0
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2240      	movs	r2, #64	; 0x40
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f000 fe80 	bl	80068d6 <UART_EndTransmit_IT>
    return;
 8005bd6:	e02c      	b.n	8005c32 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005bd8:	23a4      	movs	r3, #164	; 0xa4
 8005bda:	18fb      	adds	r3, r7, r3
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	2380      	movs	r3, #128	; 0x80
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	4013      	ands	r3, r2
 8005be4:	d00b      	beq.n	8005bfe <HAL_UART_IRQHandler+0x606>
 8005be6:	23a0      	movs	r3, #160	; 0xa0
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	2380      	movs	r3, #128	; 0x80
 8005bee:	05db      	lsls	r3, r3, #23
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f001 fbba 	bl	8007370 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bfc:	e019      	b.n	8005c32 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005bfe:	23a4      	movs	r3, #164	; 0xa4
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	045b      	lsls	r3, r3, #17
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d012      	beq.n	8005c32 <HAL_UART_IRQHandler+0x63a>
 8005c0c:	23a0      	movs	r3, #160	; 0xa0
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da0d      	bge.n	8005c32 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f001 fba1 	bl	8007360 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c1e:	e008      	b.n	8005c32 <HAL_UART_IRQHandler+0x63a>
      return;
 8005c20:	46c0      	nop			; (mov r8, r8)
 8005c22:	e006      	b.n	8005c32 <HAL_UART_IRQHandler+0x63a>
    return;
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	e004      	b.n	8005c32 <HAL_UART_IRQHandler+0x63a>
      return;
 8005c28:	46c0      	nop			; (mov r8, r8)
 8005c2a:	e002      	b.n	8005c32 <HAL_UART_IRQHandler+0x63a>
      return;
 8005c2c:	46c0      	nop			; (mov r8, r8)
 8005c2e:	e000      	b.n	8005c32 <HAL_UART_IRQHandler+0x63a>
    return;
 8005c30:	46c0      	nop			; (mov r8, r8)
  }
}
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b02a      	add	sp, #168	; 0xa8
 8005c36:	bdb0      	pop	{r4, r5, r7, pc}
 8005c38:	fffffeff 	.word	0xfffffeff
 8005c3c:	fffffedf 	.word	0xfffffedf
 8005c40:	effffffe 	.word	0xeffffffe

08005c44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c4c:	46c0      	nop			; (mov r8, r8)
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b002      	add	sp, #8
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c5c:	46c0      	nop			; (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b002      	add	sp, #8
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	000a      	movs	r2, r1
 8005c6e:	1cbb      	adds	r3, r7, #2
 8005c70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b002      	add	sp, #8
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	b5b0      	push	{r4, r5, r7, lr}
 8005c7e:	b090      	sub	sp, #64	; 0x40
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c84:	231a      	movs	r3, #26
 8005c86:	2220      	movs	r2, #32
 8005c88:	189b      	adds	r3, r3, r2
 8005c8a:	19db      	adds	r3, r3, r7
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4aaf      	ldr	r2, [pc, #700]	; (8005f6c <UART_SetConfig+0x2f0>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4aaa      	ldr	r2, [pc, #680]	; (8005f70 <UART_SetConfig+0x2f4>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	0018      	movs	r0, r3
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	68d9      	ldr	r1, [r3, #12]
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	0003      	movs	r3, r0
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4aa4      	ldr	r2, [pc, #656]	; (8005f74 <UART_SetConfig+0x2f8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a9f      	ldr	r2, [pc, #636]	; (8005f78 <UART_SetConfig+0x2fc>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	220f      	movs	r2, #15
 8005d10:	4393      	bics	r3, r2
 8005d12:	0018      	movs	r0, r3
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a95      	ldr	r2, [pc, #596]	; (8005f7c <UART_SetConfig+0x300>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d131      	bne.n	8005d90 <UART_SetConfig+0x114>
 8005d2c:	4b94      	ldr	r3, [pc, #592]	; (8005f80 <UART_SetConfig+0x304>)
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	2203      	movs	r2, #3
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d01d      	beq.n	8005d74 <UART_SetConfig+0xf8>
 8005d38:	d823      	bhi.n	8005d82 <UART_SetConfig+0x106>
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d00c      	beq.n	8005d58 <UART_SetConfig+0xdc>
 8005d3e:	d820      	bhi.n	8005d82 <UART_SetConfig+0x106>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <UART_SetConfig+0xce>
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d00e      	beq.n	8005d66 <UART_SetConfig+0xea>
 8005d48:	e01b      	b.n	8005d82 <UART_SetConfig+0x106>
 8005d4a:	231b      	movs	r3, #27
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	19db      	adds	r3, r3, r7
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	e0b4      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005d58:	231b      	movs	r3, #27
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	189b      	adds	r3, r3, r2
 8005d5e:	19db      	adds	r3, r3, r7
 8005d60:	2202      	movs	r2, #2
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	e0ad      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005d66:	231b      	movs	r3, #27
 8005d68:	2220      	movs	r2, #32
 8005d6a:	189b      	adds	r3, r3, r2
 8005d6c:	19db      	adds	r3, r3, r7
 8005d6e:	2204      	movs	r2, #4
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e0a6      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005d74:	231b      	movs	r3, #27
 8005d76:	2220      	movs	r2, #32
 8005d78:	189b      	adds	r3, r3, r2
 8005d7a:	19db      	adds	r3, r3, r7
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e09f      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005d82:	231b      	movs	r3, #27
 8005d84:	2220      	movs	r2, #32
 8005d86:	189b      	adds	r3, r3, r2
 8005d88:	19db      	adds	r3, r3, r7
 8005d8a:	2210      	movs	r2, #16
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	e098      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a7b      	ldr	r2, [pc, #492]	; (8005f84 <UART_SetConfig+0x308>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d131      	bne.n	8005dfe <UART_SetConfig+0x182>
 8005d9a:	4b79      	ldr	r3, [pc, #484]	; (8005f80 <UART_SetConfig+0x304>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9e:	220c      	movs	r2, #12
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b0c      	cmp	r3, #12
 8005da4:	d01d      	beq.n	8005de2 <UART_SetConfig+0x166>
 8005da6:	d823      	bhi.n	8005df0 <UART_SetConfig+0x174>
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d00c      	beq.n	8005dc6 <UART_SetConfig+0x14a>
 8005dac:	d820      	bhi.n	8005df0 <UART_SetConfig+0x174>
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <UART_SetConfig+0x13c>
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d00e      	beq.n	8005dd4 <UART_SetConfig+0x158>
 8005db6:	e01b      	b.n	8005df0 <UART_SetConfig+0x174>
 8005db8:	231b      	movs	r3, #27
 8005dba:	2220      	movs	r2, #32
 8005dbc:	189b      	adds	r3, r3, r2
 8005dbe:	19db      	adds	r3, r3, r7
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	e07d      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005dc6:	231b      	movs	r3, #27
 8005dc8:	2220      	movs	r2, #32
 8005dca:	189b      	adds	r3, r3, r2
 8005dcc:	19db      	adds	r3, r3, r7
 8005dce:	2202      	movs	r2, #2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	e076      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005dd4:	231b      	movs	r3, #27
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	189b      	adds	r3, r3, r2
 8005dda:	19db      	adds	r3, r3, r7
 8005ddc:	2204      	movs	r2, #4
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	e06f      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005de2:	231b      	movs	r3, #27
 8005de4:	2220      	movs	r2, #32
 8005de6:	189b      	adds	r3, r3, r2
 8005de8:	19db      	adds	r3, r3, r7
 8005dea:	2208      	movs	r2, #8
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	e068      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005df0:	231b      	movs	r3, #27
 8005df2:	2220      	movs	r2, #32
 8005df4:	189b      	adds	r3, r3, r2
 8005df6:	19db      	adds	r3, r3, r7
 8005df8:	2210      	movs	r2, #16
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	e061      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a61      	ldr	r2, [pc, #388]	; (8005f88 <UART_SetConfig+0x30c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d106      	bne.n	8005e16 <UART_SetConfig+0x19a>
 8005e08:	231b      	movs	r3, #27
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	189b      	adds	r3, r3, r2
 8005e0e:	19db      	adds	r3, r3, r7
 8005e10:	2200      	movs	r2, #0
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e055      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a5c      	ldr	r2, [pc, #368]	; (8005f8c <UART_SetConfig+0x310>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d106      	bne.n	8005e2e <UART_SetConfig+0x1b2>
 8005e20:	231b      	movs	r3, #27
 8005e22:	2220      	movs	r2, #32
 8005e24:	189b      	adds	r3, r3, r2
 8005e26:	19db      	adds	r3, r3, r7
 8005e28:	2200      	movs	r2, #0
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	e049      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a50      	ldr	r2, [pc, #320]	; (8005f74 <UART_SetConfig+0x2f8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d13e      	bne.n	8005eb6 <UART_SetConfig+0x23a>
 8005e38:	4b51      	ldr	r3, [pc, #324]	; (8005f80 <UART_SetConfig+0x304>)
 8005e3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e3c:	23c0      	movs	r3, #192	; 0xc0
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	4013      	ands	r3, r2
 8005e42:	22c0      	movs	r2, #192	; 0xc0
 8005e44:	0112      	lsls	r2, r2, #4
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d027      	beq.n	8005e9a <UART_SetConfig+0x21e>
 8005e4a:	22c0      	movs	r2, #192	; 0xc0
 8005e4c:	0112      	lsls	r2, r2, #4
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d82a      	bhi.n	8005ea8 <UART_SetConfig+0x22c>
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	0112      	lsls	r2, r2, #4
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d011      	beq.n	8005e7e <UART_SetConfig+0x202>
 8005e5a:	2280      	movs	r2, #128	; 0x80
 8005e5c:	0112      	lsls	r2, r2, #4
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d822      	bhi.n	8005ea8 <UART_SetConfig+0x22c>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <UART_SetConfig+0x1f4>
 8005e66:	2280      	movs	r2, #128	; 0x80
 8005e68:	00d2      	lsls	r2, r2, #3
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <UART_SetConfig+0x210>
 8005e6e:	e01b      	b.n	8005ea8 <UART_SetConfig+0x22c>
 8005e70:	231b      	movs	r3, #27
 8005e72:	2220      	movs	r2, #32
 8005e74:	189b      	adds	r3, r3, r2
 8005e76:	19db      	adds	r3, r3, r7
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e021      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005e7e:	231b      	movs	r3, #27
 8005e80:	2220      	movs	r2, #32
 8005e82:	189b      	adds	r3, r3, r2
 8005e84:	19db      	adds	r3, r3, r7
 8005e86:	2202      	movs	r2, #2
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e01a      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005e8c:	231b      	movs	r3, #27
 8005e8e:	2220      	movs	r2, #32
 8005e90:	189b      	adds	r3, r3, r2
 8005e92:	19db      	adds	r3, r3, r7
 8005e94:	2204      	movs	r2, #4
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	e013      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005e9a:	231b      	movs	r3, #27
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	189b      	adds	r3, r3, r2
 8005ea0:	19db      	adds	r3, r3, r7
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e00c      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005ea8:	231b      	movs	r3, #27
 8005eaa:	2220      	movs	r2, #32
 8005eac:	189b      	adds	r3, r3, r2
 8005eae:	19db      	adds	r3, r3, r7
 8005eb0:	2210      	movs	r2, #16
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	e005      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005eb6:	231b      	movs	r3, #27
 8005eb8:	2220      	movs	r2, #32
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	19db      	adds	r3, r3, r7
 8005ebe:	2210      	movs	r2, #16
 8005ec0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2b      	ldr	r2, [pc, #172]	; (8005f74 <UART_SetConfig+0x2f8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d000      	beq.n	8005ece <UART_SetConfig+0x252>
 8005ecc:	e0a9      	b.n	8006022 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ece:	231b      	movs	r3, #27
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	189b      	adds	r3, r3, r2
 8005ed4:	19db      	adds	r3, r3, r7
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d015      	beq.n	8005f08 <UART_SetConfig+0x28c>
 8005edc:	dc18      	bgt.n	8005f10 <UART_SetConfig+0x294>
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d00d      	beq.n	8005efe <UART_SetConfig+0x282>
 8005ee2:	dc15      	bgt.n	8005f10 <UART_SetConfig+0x294>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <UART_SetConfig+0x272>
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d005      	beq.n	8005ef8 <UART_SetConfig+0x27c>
 8005eec:	e010      	b.n	8005f10 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eee:	f7fd fec9 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 8005ef2:	0003      	movs	r3, r0
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ef6:	e014      	b.n	8005f22 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <UART_SetConfig+0x314>)
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005efc:	e011      	b.n	8005f22 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005efe:	f7fd fe35 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8005f02:	0003      	movs	r3, r0
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f06:	e00c      	b.n	8005f22 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f0e:	e008      	b.n	8005f22 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005f14:	231a      	movs	r3, #26
 8005f16:	2220      	movs	r2, #32
 8005f18:	189b      	adds	r3, r3, r2
 8005f1a:	19db      	adds	r3, r3, r7
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	701a      	strb	r2, [r3, #0]
        break;
 8005f20:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d100      	bne.n	8005f2a <UART_SetConfig+0x2ae>
 8005f28:	e14b      	b.n	80061c2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f2e:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <UART_SetConfig+0x318>)
 8005f30:	0052      	lsls	r2, r2, #1
 8005f32:	5ad3      	ldrh	r3, [r2, r3]
 8005f34:	0019      	movs	r1, r3
 8005f36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005f38:	f7fa f8f6 	bl	8000128 <__udivsi3>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	0013      	movs	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d305      	bcc.n	8005f5c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d91d      	bls.n	8005f98 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005f5c:	231a      	movs	r3, #26
 8005f5e:	2220      	movs	r2, #32
 8005f60:	189b      	adds	r3, r3, r2
 8005f62:	19db      	adds	r3, r3, r7
 8005f64:	2201      	movs	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	e12b      	b.n	80061c2 <UART_SetConfig+0x546>
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	cfff69f3 	.word	0xcfff69f3
 8005f70:	ffffcfff 	.word	0xffffcfff
 8005f74:	40008000 	.word	0x40008000
 8005f78:	11fff4ff 	.word	0x11fff4ff
 8005f7c:	40013800 	.word	0x40013800
 8005f80:	40021000 	.word	0x40021000
 8005f84:	40004400 	.word	0x40004400
 8005f88:	40004800 	.word	0x40004800
 8005f8c:	40004c00 	.word	0x40004c00
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	08008638 	.word	0x08008638
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	61bb      	str	r3, [r7, #24]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fa4:	4b92      	ldr	r3, [pc, #584]	; (80061f0 <UART_SetConfig+0x574>)
 8005fa6:	0052      	lsls	r2, r2, #1
 8005fa8:	5ad3      	ldrh	r3, [r2, r3]
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	69b8      	ldr	r0, [r7, #24]
 8005fb6:	69f9      	ldr	r1, [r7, #28]
 8005fb8:	f7fa fa2c 	bl	8000414 <__aeabi_uldivmod>
 8005fbc:	0002      	movs	r2, r0
 8005fbe:	000b      	movs	r3, r1
 8005fc0:	0e11      	lsrs	r1, r2, #24
 8005fc2:	021d      	lsls	r5, r3, #8
 8005fc4:	430d      	orrs	r5, r1
 8005fc6:	0214      	lsls	r4, r2, #8
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68b8      	ldr	r0, [r7, #8]
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	1900      	adds	r0, r0, r4
 8005fda:	4169      	adcs	r1, r5
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	607b      	str	r3, [r7, #4]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f7fa fa13 	bl	8000414 <__aeabi_uldivmod>
 8005fee:	0002      	movs	r2, r0
 8005ff0:	000b      	movs	r3, r1
 8005ff2:	0013      	movs	r3, r2
 8005ff4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff8:	23c0      	movs	r3, #192	; 0xc0
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d309      	bcc.n	8006014 <UART_SetConfig+0x398>
 8006000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006002:	2380      	movs	r3, #128	; 0x80
 8006004:	035b      	lsls	r3, r3, #13
 8006006:	429a      	cmp	r2, r3
 8006008:	d204      	bcs.n	8006014 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006010:	60da      	str	r2, [r3, #12]
 8006012:	e0d6      	b.n	80061c2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006014:	231a      	movs	r3, #26
 8006016:	2220      	movs	r2, #32
 8006018:	189b      	adds	r3, r3, r2
 800601a:	19db      	adds	r3, r3, r7
 800601c:	2201      	movs	r2, #1
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e0cf      	b.n	80061c2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	2380      	movs	r3, #128	; 0x80
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	429a      	cmp	r2, r3
 800602c:	d000      	beq.n	8006030 <UART_SetConfig+0x3b4>
 800602e:	e070      	b.n	8006112 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006030:	231b      	movs	r3, #27
 8006032:	2220      	movs	r2, #32
 8006034:	189b      	adds	r3, r3, r2
 8006036:	19db      	adds	r3, r3, r7
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b08      	cmp	r3, #8
 800603c:	d015      	beq.n	800606a <UART_SetConfig+0x3ee>
 800603e:	dc18      	bgt.n	8006072 <UART_SetConfig+0x3f6>
 8006040:	2b04      	cmp	r3, #4
 8006042:	d00d      	beq.n	8006060 <UART_SetConfig+0x3e4>
 8006044:	dc15      	bgt.n	8006072 <UART_SetConfig+0x3f6>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <UART_SetConfig+0x3d4>
 800604a:	2b02      	cmp	r3, #2
 800604c:	d005      	beq.n	800605a <UART_SetConfig+0x3de>
 800604e:	e010      	b.n	8006072 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006050:	f7fd fe18 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 8006054:	0003      	movs	r3, r0
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006058:	e014      	b.n	8006084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800605a:	4b66      	ldr	r3, [pc, #408]	; (80061f4 <UART_SetConfig+0x578>)
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800605e:	e011      	b.n	8006084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006060:	f7fd fd84 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8006064:	0003      	movs	r3, r0
 8006066:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006068:	e00c      	b.n	8006084 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006070:	e008      	b.n	8006084 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006076:	231a      	movs	r3, #26
 8006078:	2220      	movs	r2, #32
 800607a:	189b      	adds	r3, r3, r2
 800607c:	19db      	adds	r3, r3, r7
 800607e:	2201      	movs	r2, #1
 8006080:	701a      	strb	r2, [r3, #0]
        break;
 8006082:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	2b00      	cmp	r3, #0
 8006088:	d100      	bne.n	800608c <UART_SetConfig+0x410>
 800608a:	e09a      	b.n	80061c2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006090:	4b57      	ldr	r3, [pc, #348]	; (80061f0 <UART_SetConfig+0x574>)
 8006092:	0052      	lsls	r2, r2, #1
 8006094:	5ad3      	ldrh	r3, [r2, r3]
 8006096:	0019      	movs	r1, r3
 8006098:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800609a:	f7fa f845 	bl	8000128 <__udivsi3>
 800609e:	0003      	movs	r3, r0
 80060a0:	005a      	lsls	r2, r3, #1
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	18d2      	adds	r2, r2, r3
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	0019      	movs	r1, r3
 80060b0:	0010      	movs	r0, r2
 80060b2:	f7fa f839 	bl	8000128 <__udivsi3>
 80060b6:	0003      	movs	r3, r0
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	2b0f      	cmp	r3, #15
 80060be:	d921      	bls.n	8006104 <UART_SetConfig+0x488>
 80060c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	025b      	lsls	r3, r3, #9
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d21c      	bcs.n	8006104 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	200e      	movs	r0, #14
 80060d0:	2420      	movs	r4, #32
 80060d2:	1903      	adds	r3, r0, r4
 80060d4:	19db      	adds	r3, r3, r7
 80060d6:	210f      	movs	r1, #15
 80060d8:	438a      	bics	r2, r1
 80060da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2207      	movs	r2, #7
 80060e4:	4013      	ands	r3, r2
 80060e6:	b299      	uxth	r1, r3
 80060e8:	1903      	adds	r3, r0, r4
 80060ea:	19db      	adds	r3, r3, r7
 80060ec:	1902      	adds	r2, r0, r4
 80060ee:	19d2      	adds	r2, r2, r7
 80060f0:	8812      	ldrh	r2, [r2, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	1902      	adds	r2, r0, r4
 80060fc:	19d2      	adds	r2, r2, r7
 80060fe:	8812      	ldrh	r2, [r2, #0]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	e05e      	b.n	80061c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006104:	231a      	movs	r3, #26
 8006106:	2220      	movs	r2, #32
 8006108:	189b      	adds	r3, r3, r2
 800610a:	19db      	adds	r3, r3, r7
 800610c:	2201      	movs	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	e057      	b.n	80061c2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006112:	231b      	movs	r3, #27
 8006114:	2220      	movs	r2, #32
 8006116:	189b      	adds	r3, r3, r2
 8006118:	19db      	adds	r3, r3, r7
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b08      	cmp	r3, #8
 800611e:	d015      	beq.n	800614c <UART_SetConfig+0x4d0>
 8006120:	dc18      	bgt.n	8006154 <UART_SetConfig+0x4d8>
 8006122:	2b04      	cmp	r3, #4
 8006124:	d00d      	beq.n	8006142 <UART_SetConfig+0x4c6>
 8006126:	dc15      	bgt.n	8006154 <UART_SetConfig+0x4d8>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <UART_SetConfig+0x4b6>
 800612c:	2b02      	cmp	r3, #2
 800612e:	d005      	beq.n	800613c <UART_SetConfig+0x4c0>
 8006130:	e010      	b.n	8006154 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006132:	f7fd fda7 	bl	8003c84 <HAL_RCC_GetPCLK1Freq>
 8006136:	0003      	movs	r3, r0
 8006138:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800613a:	e014      	b.n	8006166 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800613c:	4b2d      	ldr	r3, [pc, #180]	; (80061f4 <UART_SetConfig+0x578>)
 800613e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006140:	e011      	b.n	8006166 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006142:	f7fd fd13 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8006146:	0003      	movs	r3, r0
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800614a:	e00c      	b.n	8006166 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006152:	e008      	b.n	8006166 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006158:	231a      	movs	r3, #26
 800615a:	2220      	movs	r2, #32
 800615c:	189b      	adds	r3, r3, r2
 800615e:	19db      	adds	r3, r3, r7
 8006160:	2201      	movs	r2, #1
 8006162:	701a      	strb	r2, [r3, #0]
        break;
 8006164:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006168:	2b00      	cmp	r3, #0
 800616a:	d02a      	beq.n	80061c2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006170:	4b1f      	ldr	r3, [pc, #124]	; (80061f0 <UART_SetConfig+0x574>)
 8006172:	0052      	lsls	r2, r2, #1
 8006174:	5ad3      	ldrh	r3, [r2, r3]
 8006176:	0019      	movs	r1, r3
 8006178:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800617a:	f7f9 ffd5 	bl	8000128 <__udivsi3>
 800617e:	0003      	movs	r3, r0
 8006180:	001a      	movs	r2, r3
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	085b      	lsrs	r3, r3, #1
 8006188:	18d2      	adds	r2, r2, r3
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	0019      	movs	r1, r3
 8006190:	0010      	movs	r0, r2
 8006192:	f7f9 ffc9 	bl	8000128 <__udivsi3>
 8006196:	0003      	movs	r3, r0
 8006198:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	2b0f      	cmp	r3, #15
 800619e:	d90a      	bls.n	80061b6 <UART_SetConfig+0x53a>
 80061a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	025b      	lsls	r3, r3, #9
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d205      	bcs.n	80061b6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60da      	str	r2, [r3, #12]
 80061b4:	e005      	b.n	80061c2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80061b6:	231a      	movs	r3, #26
 80061b8:	2220      	movs	r2, #32
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	19db      	adds	r3, r3, r7
 80061be:	2201      	movs	r2, #1
 80061c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	226a      	movs	r2, #106	; 0x6a
 80061c6:	2101      	movs	r1, #1
 80061c8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	2268      	movs	r2, #104	; 0x68
 80061ce:	2101      	movs	r1, #1
 80061d0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	2200      	movs	r2, #0
 80061d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	2200      	movs	r2, #0
 80061dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80061de:	231a      	movs	r3, #26
 80061e0:	2220      	movs	r2, #32
 80061e2:	189b      	adds	r3, r3, r2
 80061e4:	19db      	adds	r3, r3, r7
 80061e6:	781b      	ldrb	r3, [r3, #0]
}
 80061e8:	0018      	movs	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b010      	add	sp, #64	; 0x40
 80061ee:	bdb0      	pop	{r4, r5, r7, pc}
 80061f0:	08008638 	.word	0x08008638
 80061f4:	00f42400 	.word	0x00f42400

080061f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	2208      	movs	r2, #8
 8006206:	4013      	ands	r3, r2
 8006208:	d00b      	beq.n	8006222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4a4a      	ldr	r2, [pc, #296]	; (800633c <UART_AdvFeatureConfig+0x144>)
 8006212:	4013      	ands	r3, r2
 8006214:	0019      	movs	r1, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	2201      	movs	r2, #1
 8006228:	4013      	ands	r3, r2
 800622a:	d00b      	beq.n	8006244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	4a43      	ldr	r2, [pc, #268]	; (8006340 <UART_AdvFeatureConfig+0x148>)
 8006234:	4013      	ands	r3, r2
 8006236:	0019      	movs	r1, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	2202      	movs	r2, #2
 800624a:	4013      	ands	r3, r2
 800624c:	d00b      	beq.n	8006266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a3b      	ldr	r2, [pc, #236]	; (8006344 <UART_AdvFeatureConfig+0x14c>)
 8006256:	4013      	ands	r3, r2
 8006258:	0019      	movs	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	2204      	movs	r2, #4
 800626c:	4013      	ands	r3, r2
 800626e:	d00b      	beq.n	8006288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4a34      	ldr	r2, [pc, #208]	; (8006348 <UART_AdvFeatureConfig+0x150>)
 8006278:	4013      	ands	r3, r2
 800627a:	0019      	movs	r1, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	2210      	movs	r2, #16
 800628e:	4013      	ands	r3, r2
 8006290:	d00b      	beq.n	80062aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	4a2c      	ldr	r2, [pc, #176]	; (800634c <UART_AdvFeatureConfig+0x154>)
 800629a:	4013      	ands	r3, r2
 800629c:	0019      	movs	r1, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	2220      	movs	r2, #32
 80062b0:	4013      	ands	r3, r2
 80062b2:	d00b      	beq.n	80062cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	4a25      	ldr	r2, [pc, #148]	; (8006350 <UART_AdvFeatureConfig+0x158>)
 80062bc:	4013      	ands	r3, r2
 80062be:	0019      	movs	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	2240      	movs	r2, #64	; 0x40
 80062d2:	4013      	ands	r3, r2
 80062d4:	d01d      	beq.n	8006312 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <UART_AdvFeatureConfig+0x15c>)
 80062de:	4013      	ands	r3, r2
 80062e0:	0019      	movs	r1, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	035b      	lsls	r3, r3, #13
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d10b      	bne.n	8006312 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <UART_AdvFeatureConfig+0x160>)
 8006302:	4013      	ands	r3, r2
 8006304:	0019      	movs	r1, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006316:	2280      	movs	r2, #128	; 0x80
 8006318:	4013      	ands	r3, r2
 800631a:	d00b      	beq.n	8006334 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	4a0e      	ldr	r2, [pc, #56]	; (800635c <UART_AdvFeatureConfig+0x164>)
 8006324:	4013      	ands	r3, r2
 8006326:	0019      	movs	r1, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	605a      	str	r2, [r3, #4]
  }
}
 8006334:	46c0      	nop			; (mov r8, r8)
 8006336:	46bd      	mov	sp, r7
 8006338:	b002      	add	sp, #8
 800633a:	bd80      	pop	{r7, pc}
 800633c:	ffff7fff 	.word	0xffff7fff
 8006340:	fffdffff 	.word	0xfffdffff
 8006344:	fffeffff 	.word	0xfffeffff
 8006348:	fffbffff 	.word	0xfffbffff
 800634c:	ffffefff 	.word	0xffffefff
 8006350:	ffffdfff 	.word	0xffffdfff
 8006354:	ffefffff 	.word	0xffefffff
 8006358:	ff9fffff 	.word	0xff9fffff
 800635c:	fff7ffff 	.word	0xfff7ffff

08006360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b092      	sub	sp, #72	; 0x48
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2290      	movs	r2, #144	; 0x90
 800636c:	2100      	movs	r1, #0
 800636e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006370:	f7fb f92e 	bl	80015d0 <HAL_GetTick>
 8006374:	0003      	movs	r3, r0
 8006376:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2208      	movs	r2, #8
 8006380:	4013      	ands	r3, r2
 8006382:	2b08      	cmp	r3, #8
 8006384:	d12d      	bne.n	80063e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006388:	2280      	movs	r2, #128	; 0x80
 800638a:	0391      	lsls	r1, r2, #14
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4a47      	ldr	r2, [pc, #284]	; (80064ac <UART_CheckIdleState+0x14c>)
 8006390:	9200      	str	r2, [sp, #0]
 8006392:	2200      	movs	r2, #0
 8006394:	f000 f88e 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 8006398:	1e03      	subs	r3, r0, #0
 800639a:	d022      	beq.n	80063e2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800639c:	f3ef 8310 	mrs	r3, PRIMASK
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80063a6:	2301      	movs	r3, #1
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	f383 8810 	msr	PRIMASK, r3
}
 80063b0:	46c0      	nop			; (mov r8, r8)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2180      	movs	r1, #128	; 0x80
 80063be:	438a      	bics	r2, r1
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	f383 8810 	msr	PRIMASK, r3
}
 80063cc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2288      	movs	r2, #136	; 0x88
 80063d2:	2120      	movs	r1, #32
 80063d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2284      	movs	r2, #132	; 0x84
 80063da:	2100      	movs	r1, #0
 80063dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e060      	b.n	80064a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2204      	movs	r2, #4
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d146      	bne.n	800647e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f2:	2280      	movs	r2, #128	; 0x80
 80063f4:	03d1      	lsls	r1, r2, #15
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	4a2c      	ldr	r2, [pc, #176]	; (80064ac <UART_CheckIdleState+0x14c>)
 80063fa:	9200      	str	r2, [sp, #0]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f000 f859 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 8006402:	1e03      	subs	r3, r0, #0
 8006404:	d03b      	beq.n	800647e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006406:	f3ef 8310 	mrs	r3, PRIMASK
 800640a:	60fb      	str	r3, [r7, #12]
  return(result);
 800640c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
 8006410:	2301      	movs	r3, #1
 8006412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f383 8810 	msr	PRIMASK, r3
}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4922      	ldr	r1, [pc, #136]	; (80064b0 <UART_CheckIdleState+0x150>)
 8006428:	400a      	ands	r2, r1
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f383 8810 	msr	PRIMASK, r3
}
 8006436:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006438:	f3ef 8310 	mrs	r3, PRIMASK
 800643c:	61bb      	str	r3, [r7, #24]
  return(result);
 800643e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006440:	633b      	str	r3, [r7, #48]	; 0x30
 8006442:	2301      	movs	r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f383 8810 	msr	PRIMASK, r3
}
 800644c:	46c0      	nop			; (mov r8, r8)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2101      	movs	r1, #1
 800645a:	438a      	bics	r2, r1
 800645c:	609a      	str	r2, [r3, #8]
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	f383 8810 	msr	PRIMASK, r3
}
 8006468:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	228c      	movs	r2, #140	; 0x8c
 800646e:	2120      	movs	r1, #32
 8006470:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2284      	movs	r2, #132	; 0x84
 8006476:	2100      	movs	r1, #0
 8006478:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e012      	b.n	80064a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2288      	movs	r2, #136	; 0x88
 8006482:	2120      	movs	r1, #32
 8006484:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	228c      	movs	r2, #140	; 0x8c
 800648a:	2120      	movs	r1, #32
 800648c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2284      	movs	r2, #132	; 0x84
 800649e:	2100      	movs	r1, #0
 80064a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	0018      	movs	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b010      	add	sp, #64	; 0x40
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	01ffffff 	.word	0x01ffffff
 80064b0:	fffffedf 	.word	0xfffffedf

080064b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	1dfb      	adds	r3, r7, #7
 80064c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c4:	e051      	b.n	800656a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	3301      	adds	r3, #1
 80064ca:	d04e      	beq.n	800656a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064cc:	f7fb f880 	bl	80015d0 <HAL_GetTick>
 80064d0:	0002      	movs	r2, r0
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e051      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2204      	movs	r2, #4
 80064ee:	4013      	ands	r3, r2
 80064f0:	d03b      	beq.n	800656a <UART_WaitOnFlagUntilTimeout+0xb6>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b80      	cmp	r3, #128	; 0x80
 80064f6:	d038      	beq.n	800656a <UART_WaitOnFlagUntilTimeout+0xb6>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b40      	cmp	r3, #64	; 0x40
 80064fc:	d035      	beq.n	800656a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	2208      	movs	r2, #8
 8006506:	4013      	ands	r3, r2
 8006508:	2b08      	cmp	r3, #8
 800650a:	d111      	bne.n	8006530 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2208      	movs	r2, #8
 8006512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	0018      	movs	r0, r3
 8006518:	f000 f960 	bl	80067dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2290      	movs	r2, #144	; 0x90
 8006520:	2108      	movs	r1, #8
 8006522:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2284      	movs	r2, #132	; 0x84
 8006528:	2100      	movs	r1, #0
 800652a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e02c      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	69da      	ldr	r2, [r3, #28]
 8006536:	2380      	movs	r3, #128	; 0x80
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	401a      	ands	r2, r3
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	429a      	cmp	r2, r3
 8006542:	d112      	bne.n	800656a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2280      	movs	r2, #128	; 0x80
 800654a:	0112      	lsls	r2, r2, #4
 800654c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	0018      	movs	r0, r3
 8006552:	f000 f943 	bl	80067dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2290      	movs	r2, #144	; 0x90
 800655a:	2120      	movs	r1, #32
 800655c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2284      	movs	r2, #132	; 0x84
 8006562:	2100      	movs	r1, #0
 8006564:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e00f      	b.n	800658a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	4013      	ands	r3, r2
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	425a      	negs	r2, r3
 800657a:	4153      	adcs	r3, r2
 800657c:	b2db      	uxtb	r3, r3
 800657e:	001a      	movs	r2, r3
 8006580:	1dfb      	adds	r3, r7, #7
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d09e      	beq.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b004      	add	sp, #16
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b098      	sub	sp, #96	; 0x60
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	1dbb      	adds	r3, r7, #6
 80065a0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1dba      	adds	r2, r7, #6
 80065ac:	215c      	movs	r1, #92	; 0x5c
 80065ae:	8812      	ldrh	r2, [r2, #0]
 80065b0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1dba      	adds	r2, r7, #6
 80065b6:	215e      	movs	r1, #94	; 0x5e
 80065b8:	8812      	ldrh	r2, [r2, #0]
 80065ba:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	2380      	movs	r3, #128	; 0x80
 80065c8:	015b      	lsls	r3, r3, #5
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d10d      	bne.n	80065ea <UART_Start_Receive_IT+0x56>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d104      	bne.n	80065e0 <UART_Start_Receive_IT+0x4c>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2260      	movs	r2, #96	; 0x60
 80065da:	497b      	ldr	r1, [pc, #492]	; (80067c8 <UART_Start_Receive_IT+0x234>)
 80065dc:	5299      	strh	r1, [r3, r2]
 80065de:	e02e      	b.n	800663e <UART_Start_Receive_IT+0xaa>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2260      	movs	r2, #96	; 0x60
 80065e4:	21ff      	movs	r1, #255	; 0xff
 80065e6:	5299      	strh	r1, [r3, r2]
 80065e8:	e029      	b.n	800663e <UART_Start_Receive_IT+0xaa>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10d      	bne.n	800660e <UART_Start_Receive_IT+0x7a>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <UART_Start_Receive_IT+0x70>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2260      	movs	r2, #96	; 0x60
 80065fe:	21ff      	movs	r1, #255	; 0xff
 8006600:	5299      	strh	r1, [r3, r2]
 8006602:	e01c      	b.n	800663e <UART_Start_Receive_IT+0xaa>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2260      	movs	r2, #96	; 0x60
 8006608:	217f      	movs	r1, #127	; 0x7f
 800660a:	5299      	strh	r1, [r3, r2]
 800660c:	e017      	b.n	800663e <UART_Start_Receive_IT+0xaa>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	055b      	lsls	r3, r3, #21
 8006616:	429a      	cmp	r2, r3
 8006618:	d10d      	bne.n	8006636 <UART_Start_Receive_IT+0xa2>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <UART_Start_Receive_IT+0x98>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2260      	movs	r2, #96	; 0x60
 8006626:	217f      	movs	r1, #127	; 0x7f
 8006628:	5299      	strh	r1, [r3, r2]
 800662a:	e008      	b.n	800663e <UART_Start_Receive_IT+0xaa>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2260      	movs	r2, #96	; 0x60
 8006630:	213f      	movs	r1, #63	; 0x3f
 8006632:	5299      	strh	r1, [r3, r2]
 8006634:	e003      	b.n	800663e <UART_Start_Receive_IT+0xaa>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2260      	movs	r2, #96	; 0x60
 800663a:	2100      	movs	r1, #0
 800663c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2290      	movs	r2, #144	; 0x90
 8006642:	2100      	movs	r1, #0
 8006644:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	228c      	movs	r2, #140	; 0x8c
 800664a:	2122      	movs	r1, #34	; 0x22
 800664c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664e:	f3ef 8310 	mrs	r3, PRIMASK
 8006652:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006654:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006658:	2301      	movs	r3, #1
 800665a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800665e:	f383 8810 	msr	PRIMASK, r3
}
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2101      	movs	r1, #1
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]
 8006674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006676:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667a:	f383 8810 	msr	PRIMASK, r3
}
 800667e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	059b      	lsls	r3, r3, #22
 8006688:	429a      	cmp	r2, r3
 800668a:	d150      	bne.n	800672e <UART_Start_Receive_IT+0x19a>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2268      	movs	r2, #104	; 0x68
 8006690:	5a9b      	ldrh	r3, [r3, r2]
 8006692:	1dba      	adds	r2, r7, #6
 8006694:	8812      	ldrh	r2, [r2, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d349      	bcc.n	800672e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	2380      	movs	r3, #128	; 0x80
 80066a0:	015b      	lsls	r3, r3, #5
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d107      	bne.n	80066b6 <UART_Start_Receive_IT+0x122>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4a46      	ldr	r2, [pc, #280]	; (80067cc <UART_Start_Receive_IT+0x238>)
 80066b2:	675a      	str	r2, [r3, #116]	; 0x74
 80066b4:	e002      	b.n	80066bc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4a45      	ldr	r2, [pc, #276]	; (80067d0 <UART_Start_Receive_IT+0x23c>)
 80066ba:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d019      	beq.n	80066f8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066c4:	f3ef 8310 	mrs	r3, PRIMASK
 80066c8:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80066ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80066ce:	2301      	movs	r3, #1
 80066d0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	f383 8810 	msr	PRIMASK, r3
}
 80066d8:	46c0      	nop			; (mov r8, r8)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2180      	movs	r1, #128	; 0x80
 80066e6:	0049      	lsls	r1, r1, #1
 80066e8:	430a      	orrs	r2, r1
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f2:	f383 8810 	msr	PRIMASK, r3
}
 80066f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f8:	f3ef 8310 	mrs	r3, PRIMASK
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80066fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006700:	657b      	str	r3, [r7, #84]	; 0x54
 8006702:	2301      	movs	r3, #1
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	f383 8810 	msr	PRIMASK, r3
}
 800670c:	46c0      	nop			; (mov r8, r8)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2180      	movs	r1, #128	; 0x80
 800671a:	0549      	lsls	r1, r1, #21
 800671c:	430a      	orrs	r2, r1
 800671e:	609a      	str	r2, [r3, #8]
 8006720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	f383 8810 	msr	PRIMASK, r3
}
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	e047      	b.n	80067be <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	2380      	movs	r3, #128	; 0x80
 8006734:	015b      	lsls	r3, r3, #5
 8006736:	429a      	cmp	r2, r3
 8006738:	d107      	bne.n	800674a <UART_Start_Receive_IT+0x1b6>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d103      	bne.n	800674a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <UART_Start_Receive_IT+0x240>)
 8006746:	675a      	str	r2, [r3, #116]	; 0x74
 8006748:	e002      	b.n	8006750 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <UART_Start_Receive_IT+0x244>)
 800674e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d019      	beq.n	800678c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006758:	f3ef 8310 	mrs	r3, PRIMASK
 800675c:	61fb      	str	r3, [r7, #28]
  return(result);
 800675e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006760:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006762:	2301      	movs	r3, #1
 8006764:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	f383 8810 	msr	PRIMASK, r3
}
 800676c:	46c0      	nop			; (mov r8, r8)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2190      	movs	r1, #144	; 0x90
 800677a:	0049      	lsls	r1, r1, #1
 800677c:	430a      	orrs	r2, r1
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	f383 8810 	msr	PRIMASK, r3
}
 800678a:	e018      	b.n	80067be <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800678c:	f3ef 8310 	mrs	r3, PRIMASK
 8006790:	613b      	str	r3, [r7, #16]
  return(result);
 8006792:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006794:	653b      	str	r3, [r7, #80]	; 0x50
 8006796:	2301      	movs	r3, #1
 8006798:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f383 8810 	msr	PRIMASK, r3
}
 80067a0:	46c0      	nop			; (mov r8, r8)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2120      	movs	r1, #32
 80067ae:	430a      	orrs	r2, r1
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f383 8810 	msr	PRIMASK, r3
}
 80067bc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	0018      	movs	r0, r3
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b018      	add	sp, #96	; 0x60
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	000001ff 	.word	0x000001ff
 80067cc:	08006ff9 	.word	0x08006ff9
 80067d0:	08006cb9 	.word	0x08006cb9
 80067d4:	08006af5 	.word	0x08006af5
 80067d8:	08006931 	.word	0x08006931

080067dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08e      	sub	sp, #56	; 0x38
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e4:	f3ef 8310 	mrs	r3, PRIMASK
 80067e8:	617b      	str	r3, [r7, #20]
  return(result);
 80067ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
 80067ee:	2301      	movs	r3, #1
 80067f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f383 8810 	msr	PRIMASK, r3
}
 80067f8:	46c0      	nop			; (mov r8, r8)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4926      	ldr	r1, [pc, #152]	; (80068a0 <UART_EndRxTransfer+0xc4>)
 8006806:	400a      	ands	r2, r1
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	f383 8810 	msr	PRIMASK, r3
}
 8006814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006816:	f3ef 8310 	mrs	r3, PRIMASK
 800681a:	623b      	str	r3, [r7, #32]
  return(result);
 800681c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800681e:	633b      	str	r3, [r7, #48]	; 0x30
 8006820:	2301      	movs	r3, #1
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	f383 8810 	msr	PRIMASK, r3
}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	491b      	ldr	r1, [pc, #108]	; (80068a4 <UART_EndRxTransfer+0xc8>)
 8006838:	400a      	ands	r2, r1
 800683a:	609a      	str	r2, [r3, #8]
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	f383 8810 	msr	PRIMASK, r3
}
 8006846:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d118      	bne.n	8006882 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006850:	f3ef 8310 	mrs	r3, PRIMASK
 8006854:	60bb      	str	r3, [r7, #8]
  return(result);
 8006856:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800685a:	2301      	movs	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f383 8810 	msr	PRIMASK, r3
}
 8006864:	46c0      	nop			; (mov r8, r8)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2110      	movs	r1, #16
 8006872:	438a      	bics	r2, r1
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f383 8810 	msr	PRIMASK, r3
}
 8006880:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	228c      	movs	r2, #140	; 0x8c
 8006886:	2120      	movs	r1, #32
 8006888:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	46bd      	mov	sp, r7
 800689a:	b00e      	add	sp, #56	; 0x38
 800689c:	bd80      	pop	{r7, pc}
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	fffffedf 	.word	0xfffffedf
 80068a4:	effffffe 	.word	0xeffffffe

080068a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	225e      	movs	r2, #94	; 0x5e
 80068ba:	2100      	movs	r1, #0
 80068bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2256      	movs	r2, #86	; 0x56
 80068c2:	2100      	movs	r1, #0
 80068c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	0018      	movs	r0, r3
 80068ca:	f7ff f9c3 	bl	8005c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b004      	add	sp, #16
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068de:	f3ef 8310 	mrs	r3, PRIMASK
 80068e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80068e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	2301      	movs	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f383 8810 	msr	PRIMASK, r3
}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2140      	movs	r1, #64	; 0x40
 8006900:	438a      	bics	r2, r1
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f383 8810 	msr	PRIMASK, r3
}
 800690e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2288      	movs	r2, #136	; 0x88
 8006914:	2120      	movs	r1, #32
 8006916:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	0018      	movs	r0, r3
 8006922:	f7ff f98f 	bl	8005c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	46bd      	mov	sp, r7
 800692a:	b006      	add	sp, #24
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b094      	sub	sp, #80	; 0x50
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006938:	204e      	movs	r0, #78	; 0x4e
 800693a:	183b      	adds	r3, r7, r0
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	2160      	movs	r1, #96	; 0x60
 8006940:	5a52      	ldrh	r2, [r2, r1]
 8006942:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	228c      	movs	r2, #140	; 0x8c
 8006948:	589b      	ldr	r3, [r3, r2]
 800694a:	2b22      	cmp	r3, #34	; 0x22
 800694c:	d000      	beq.n	8006950 <UART_RxISR_8BIT+0x20>
 800694e:	e0bf      	b.n	8006ad0 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006956:	214c      	movs	r1, #76	; 0x4c
 8006958:	187b      	adds	r3, r7, r1
 800695a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800695c:	187b      	adds	r3, r7, r1
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	183b      	adds	r3, r7, r0
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b2d9      	uxtb	r1, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696c:	400a      	ands	r2, r1
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	225e      	movs	r2, #94	; 0x5e
 8006980:	5a9b      	ldrh	r3, [r3, r2]
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b299      	uxth	r1, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	225e      	movs	r2, #94	; 0x5e
 800698c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	225e      	movs	r2, #94	; 0x5e
 8006992:	5a9b      	ldrh	r3, [r3, r2]
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d000      	beq.n	800699c <UART_RxISR_8BIT+0x6c>
 800699a:	e0a1      	b.n	8006ae0 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699c:	f3ef 8310 	mrs	r3, PRIMASK
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069a6:	2301      	movs	r3, #1
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	f383 8810 	msr	PRIMASK, r3
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	494a      	ldr	r1, [pc, #296]	; (8006ae8 <UART_RxISR_8BIT+0x1b8>)
 80069be:	400a      	ands	r2, r1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	f383 8810 	msr	PRIMASK, r3
}
 80069cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ce:	f3ef 8310 	mrs	r3, PRIMASK
 80069d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d6:	647b      	str	r3, [r7, #68]	; 0x44
 80069d8:	2301      	movs	r3, #1
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069de:	f383 8810 	msr	PRIMASK, r3
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2101      	movs	r1, #1
 80069f0:	438a      	bics	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]
 80069f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	f383 8810 	msr	PRIMASK, r3
}
 80069fe:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	228c      	movs	r2, #140	; 0x8c
 8006a04:	2120      	movs	r1, #32
 8006a06:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a34      	ldr	r2, [pc, #208]	; (8006aec <UART_RxISR_8BIT+0x1bc>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01f      	beq.n	8006a5e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d018      	beq.n	8006a5e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a30:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a32:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a34:	643b      	str	r3, [r7, #64]	; 0x40
 8006a36:	2301      	movs	r3, #1
 8006a38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	f383 8810 	msr	PRIMASK, r3
}
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4928      	ldr	r1, [pc, #160]	; (8006af0 <UART_RxISR_8BIT+0x1c0>)
 8006a4e:	400a      	ands	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	f383 8810 	msr	PRIMASK, r3
}
 8006a5c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d12f      	bne.n	8006ac6 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a72:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a76:	2301      	movs	r3, #1
 8006a78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f383 8810 	msr	PRIMASK, r3
}
 8006a80:	46c0      	nop			; (mov r8, r8)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2110      	movs	r1, #16
 8006a8e:	438a      	bics	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f383 8810 	msr	PRIMASK, r3
}
 8006a9c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	2210      	movs	r2, #16
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b10      	cmp	r3, #16
 8006aaa:	d103      	bne.n	8006ab4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2210      	movs	r2, #16
 8006ab2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	225c      	movs	r2, #92	; 0x5c
 8006ab8:	5a9a      	ldrh	r2, [r3, r2]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	0011      	movs	r1, r2
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f7ff f8d0 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ac4:	e00c      	b.n	8006ae0 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f7fa fa4f 	bl	8000f6c <HAL_UART_RxCpltCallback>
}
 8006ace:	e007      	b.n	8006ae0 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2108      	movs	r1, #8
 8006adc:	430a      	orrs	r2, r1
 8006ade:	619a      	str	r2, [r3, #24]
}
 8006ae0:	46c0      	nop			; (mov r8, r8)
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b014      	add	sp, #80	; 0x50
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	fffffedf 	.word	0xfffffedf
 8006aec:	40008000 	.word	0x40008000
 8006af0:	fbffffff 	.word	0xfbffffff

08006af4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b094      	sub	sp, #80	; 0x50
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006afc:	204e      	movs	r0, #78	; 0x4e
 8006afe:	183b      	adds	r3, r7, r0
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	2160      	movs	r1, #96	; 0x60
 8006b04:	5a52      	ldrh	r2, [r2, r1]
 8006b06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	228c      	movs	r2, #140	; 0x8c
 8006b0c:	589b      	ldr	r3, [r3, r2]
 8006b0e:	2b22      	cmp	r3, #34	; 0x22
 8006b10:	d000      	beq.n	8006b14 <UART_RxISR_16BIT+0x20>
 8006b12:	e0bf      	b.n	8006c94 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b1a:	214c      	movs	r1, #76	; 0x4c
 8006b1c:	187b      	adds	r3, r7, r1
 8006b1e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b24:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b26:	187b      	adds	r3, r7, r1
 8006b28:	183a      	adds	r2, r7, r0
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	8812      	ldrh	r2, [r2, #0]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3a:	1c9a      	adds	r2, r3, #2
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	225e      	movs	r2, #94	; 0x5e
 8006b44:	5a9b      	ldrh	r3, [r3, r2]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b299      	uxth	r1, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	225e      	movs	r2, #94	; 0x5e
 8006b50:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	225e      	movs	r2, #94	; 0x5e
 8006b56:	5a9b      	ldrh	r3, [r3, r2]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d000      	beq.n	8006b60 <UART_RxISR_16BIT+0x6c>
 8006b5e:	e0a1      	b.n	8006ca4 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b60:	f3ef 8310 	mrs	r3, PRIMASK
 8006b64:	623b      	str	r3, [r7, #32]
  return(result);
 8006b66:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b68:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	f383 8810 	msr	PRIMASK, r3
}
 8006b74:	46c0      	nop			; (mov r8, r8)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	494a      	ldr	r1, [pc, #296]	; (8006cac <UART_RxISR_16BIT+0x1b8>)
 8006b82:	400a      	ands	r2, r1
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	f383 8810 	msr	PRIMASK, r3
}
 8006b90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b92:	f3ef 8310 	mrs	r3, PRIMASK
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	f383 8810 	msr	PRIMASK, r3
}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	438a      	bics	r2, r1
 8006bb6:	609a      	str	r2, [r3, #8]
 8006bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	f383 8810 	msr	PRIMASK, r3
}
 8006bc2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	228c      	movs	r2, #140	; 0x8c
 8006bc8:	2120      	movs	r1, #32
 8006bca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a34      	ldr	r2, [pc, #208]	; (8006cb0 <UART_RxISR_16BIT+0x1bc>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01f      	beq.n	8006c22 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	2380      	movs	r3, #128	; 0x80
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	4013      	ands	r3, r2
 8006bee:	d018      	beq.n	8006c22 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8006bf6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	f383 8810 	msr	PRIMASK, r3
}
 8006c04:	46c0      	nop			; (mov r8, r8)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4928      	ldr	r1, [pc, #160]	; (8006cb4 <UART_RxISR_16BIT+0x1c0>)
 8006c12:	400a      	ands	r2, r1
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	f383 8810 	msr	PRIMASK, r3
}
 8006c20:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d12f      	bne.n	8006c8a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c30:	f3ef 8310 	mrs	r3, PRIMASK
 8006c34:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c36:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f383 8810 	msr	PRIMASK, r3
}
 8006c44:	46c0      	nop			; (mov r8, r8)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2110      	movs	r1, #16
 8006c52:	438a      	bics	r2, r1
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f383 8810 	msr	PRIMASK, r3
}
 8006c60:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	2210      	movs	r2, #16
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	d103      	bne.n	8006c78 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2210      	movs	r2, #16
 8006c76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	225c      	movs	r2, #92	; 0x5c
 8006c7c:	5a9a      	ldrh	r2, [r3, r2]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	0011      	movs	r1, r2
 8006c82:	0018      	movs	r0, r3
 8006c84:	f7fe ffee 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c88:	e00c      	b.n	8006ca4 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f7fa f96d 	bl	8000f6c <HAL_UART_RxCpltCallback>
}
 8006c92:	e007      	b.n	8006ca4 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2108      	movs	r1, #8
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	619a      	str	r2, [r3, #24]
}
 8006ca4:	46c0      	nop			; (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b014      	add	sp, #80	; 0x50
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	fffffedf 	.word	0xfffffedf
 8006cb0:	40008000 	.word	0x40008000
 8006cb4:	fbffffff 	.word	0xfbffffff

08006cb8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b0a0      	sub	sp, #128	; 0x80
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006cc0:	237a      	movs	r3, #122	; 0x7a
 8006cc2:	18fb      	adds	r3, r7, r3
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	2160      	movs	r1, #96	; 0x60
 8006cc8:	5a52      	ldrh	r2, [r2, r1]
 8006cca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	228c      	movs	r2, #140	; 0x8c
 8006ce8:	589b      	ldr	r3, [r3, r2]
 8006cea:	2b22      	cmp	r3, #34	; 0x22
 8006cec:	d000      	beq.n	8006cf0 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006cee:	e16a      	b.n	8006fc6 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006cf0:	236e      	movs	r3, #110	; 0x6e
 8006cf2:	18fb      	adds	r3, r7, r3
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	2168      	movs	r1, #104	; 0x68
 8006cf8:	5a52      	ldrh	r2, [r2, r1]
 8006cfa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cfc:	e111      	b.n	8006f22 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d04:	216c      	movs	r1, #108	; 0x6c
 8006d06:	187b      	adds	r3, r7, r1
 8006d08:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d0a:	187b      	adds	r3, r7, r1
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	237a      	movs	r3, #122	; 0x7a
 8006d12:	18fb      	adds	r3, r7, r3
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b2d9      	uxtb	r1, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1c:	400a      	ands	r2, r1
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	225e      	movs	r2, #94	; 0x5e
 8006d30:	5a9b      	ldrh	r3, [r3, r2]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b299      	uxth	r1, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	225e      	movs	r2, #94	; 0x5e
 8006d3c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d48:	2207      	movs	r2, #7
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d049      	beq.n	8006de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d50:	2201      	movs	r2, #1
 8006d52:	4013      	ands	r3, r2
 8006d54:	d010      	beq.n	8006d78 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006d56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d00b      	beq.n	8006d78 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2201      	movs	r2, #1
 8006d66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2290      	movs	r2, #144	; 0x90
 8006d6c:	589b      	ldr	r3, [r3, r2]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2190      	movs	r1, #144	; 0x90
 8006d76:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d00f      	beq.n	8006da0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006d80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d82:	2201      	movs	r2, #1
 8006d84:	4013      	ands	r3, r2
 8006d86:	d00b      	beq.n	8006da0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2290      	movs	r2, #144	; 0x90
 8006d94:	589b      	ldr	r3, [r3, r2]
 8006d96:	2204      	movs	r2, #4
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2190      	movs	r1, #144	; 0x90
 8006d9e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006da2:	2204      	movs	r2, #4
 8006da4:	4013      	ands	r3, r2
 8006da6:	d00f      	beq.n	8006dc8 <UART_RxISR_8BIT_FIFOEN+0x110>
 8006da8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006daa:	2201      	movs	r2, #1
 8006dac:	4013      	ands	r3, r2
 8006dae:	d00b      	beq.n	8006dc8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2204      	movs	r2, #4
 8006db6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2290      	movs	r2, #144	; 0x90
 8006dbc:	589b      	ldr	r3, [r3, r2]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2190      	movs	r1, #144	; 0x90
 8006dc6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2290      	movs	r2, #144	; 0x90
 8006dcc:	589b      	ldr	r3, [r3, r2]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d007      	beq.n	8006de2 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7fe ff3d 	bl	8005c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2290      	movs	r2, #144	; 0x90
 8006dde:	2100      	movs	r1, #0
 8006de0:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	225e      	movs	r2, #94	; 0x5e
 8006de6:	5a9b      	ldrh	r3, [r3, r2]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d000      	beq.n	8006df0 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006dee:	e098      	b.n	8006f22 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df0:	f3ef 8310 	mrs	r3, PRIMASK
 8006df4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df8:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e00:	f383 8810 	msr	PRIMASK, r3
}
 8006e04:	46c0      	nop			; (mov r8, r8)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4973      	ldr	r1, [pc, #460]	; (8006fe0 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8006e12:	400a      	ands	r2, r1
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e18:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1c:	f383 8810 	msr	PRIMASK, r3
}
 8006e20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e22:	f3ef 8310 	mrs	r3, PRIMASK
 8006e26:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8006e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e2a:	667b      	str	r3, [r7, #100]	; 0x64
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e32:	f383 8810 	msr	PRIMASK, r3
}
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4968      	ldr	r1, [pc, #416]	; (8006fe4 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8006e44:	400a      	ands	r2, r1
 8006e46:	609a      	str	r2, [r3, #8]
 8006e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4e:	f383 8810 	msr	PRIMASK, r3
}
 8006e52:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	228c      	movs	r2, #140	; 0x8c
 8006e58:	2120      	movs	r1, #32
 8006e5a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a5e      	ldr	r2, [pc, #376]	; (8006fe8 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d01f      	beq.n	8006eb2 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	2380      	movs	r3, #128	; 0x80
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d018      	beq.n	8006eb2 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e80:	f3ef 8310 	mrs	r3, PRIMASK
 8006e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e88:	663b      	str	r3, [r7, #96]	; 0x60
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	f383 8810 	msr	PRIMASK, r3
}
 8006e94:	46c0      	nop			; (mov r8, r8)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4952      	ldr	r1, [pc, #328]	; (8006fec <UART_RxISR_8BIT_FIFOEN+0x334>)
 8006ea2:	400a      	ands	r2, r1
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ea8:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eac:	f383 8810 	msr	PRIMASK, r3
}
 8006eb0:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d12f      	bne.n	8006f1a <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec4:	623b      	str	r3, [r7, #32]
  return(result);
 8006ec6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eca:	2301      	movs	r3, #1
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	f383 8810 	msr	PRIMASK, r3
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2110      	movs	r1, #16
 8006ee2:	438a      	bics	r2, r1
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	f383 8810 	msr	PRIMASK, r3
}
 8006ef0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	2210      	movs	r2, #16
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b10      	cmp	r3, #16
 8006efe:	d103      	bne.n	8006f08 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2210      	movs	r2, #16
 8006f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	225c      	movs	r2, #92	; 0x5c
 8006f0c:	5a9a      	ldrh	r2, [r3, r2]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	0011      	movs	r1, r2
 8006f12:	0018      	movs	r0, r3
 8006f14:	f7fe fea6 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
 8006f18:	e003      	b.n	8006f22 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f7fa f825 	bl	8000f6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f22:	236e      	movs	r3, #110	; 0x6e
 8006f24:	18fb      	adds	r3, r7, r3
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8006f2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f2e:	2220      	movs	r2, #32
 8006f30:	4013      	ands	r3, r2
 8006f32:	d000      	beq.n	8006f36 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8006f34:	e6e3      	b.n	8006cfe <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f36:	205a      	movs	r0, #90	; 0x5a
 8006f38:	183b      	adds	r3, r7, r0
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	215e      	movs	r1, #94	; 0x5e
 8006f3e:	5a52      	ldrh	r2, [r2, r1]
 8006f40:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f42:	0001      	movs	r1, r0
 8006f44:	187b      	adds	r3, r7, r1
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d044      	beq.n	8006fd6 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2268      	movs	r2, #104	; 0x68
 8006f50:	5a9b      	ldrh	r3, [r3, r2]
 8006f52:	187a      	adds	r2, r7, r1
 8006f54:	8812      	ldrh	r2, [r2, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d23d      	bcs.n	8006fd6 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f60:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f62:	657b      	str	r3, [r7, #84]	; 0x54
 8006f64:	2301      	movs	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f383 8810 	msr	PRIMASK, r3
}
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	491d      	ldr	r1, [pc, #116]	; (8006ff0 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8006f7c:	400a      	ands	r2, r1
 8006f7e:	609a      	str	r2, [r3, #8]
 8006f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f383 8810 	msr	PRIMASK, r3
}
 8006f8a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a19      	ldr	r2, [pc, #100]	; (8006ff4 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8006f90:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f92:	f3ef 8310 	mrs	r3, PRIMASK
 8006f96:	617b      	str	r3, [r7, #20]
  return(result);
 8006f98:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f383 8810 	msr	PRIMASK, r3
}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2120      	movs	r1, #32
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f383 8810 	msr	PRIMASK, r3
}
 8006fc2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fc4:	e007      	b.n	8006fd6 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2108      	movs	r1, #8
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	619a      	str	r2, [r3, #24]
}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b020      	add	sp, #128	; 0x80
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	fffffeff 	.word	0xfffffeff
 8006fe4:	effffffe 	.word	0xeffffffe
 8006fe8:	40008000 	.word	0x40008000
 8006fec:	fbffffff 	.word	0xfbffffff
 8006ff0:	efffffff 	.word	0xefffffff
 8006ff4:	08006931 	.word	0x08006931

08006ff8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b0a2      	sub	sp, #136	; 0x88
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007000:	2382      	movs	r3, #130	; 0x82
 8007002:	18fb      	adds	r3, r7, r3
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	2160      	movs	r1, #96	; 0x60
 8007008:	5a52      	ldrh	r2, [r2, r1]
 800700a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	2284      	movs	r2, #132	; 0x84
 8007014:	18ba      	adds	r2, r7, r2
 8007016:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	228c      	movs	r2, #140	; 0x8c
 800702c:	589b      	ldr	r3, [r3, r2]
 800702e:	2b22      	cmp	r3, #34	; 0x22
 8007030:	d000      	beq.n	8007034 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8007032:	e174      	b.n	800731e <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007034:	2376      	movs	r3, #118	; 0x76
 8007036:	18fb      	adds	r3, r7, r3
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	2168      	movs	r1, #104	; 0x68
 800703c:	5a52      	ldrh	r2, [r2, r1]
 800703e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007040:	e119      	b.n	8007276 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007048:	2174      	movs	r1, #116	; 0x74
 800704a:	187b      	adds	r3, r7, r1
 800704c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007052:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8007054:	187b      	adds	r3, r7, r1
 8007056:	2282      	movs	r2, #130	; 0x82
 8007058:	18ba      	adds	r2, r7, r2
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	8812      	ldrh	r2, [r2, #0]
 800705e:	4013      	ands	r3, r2
 8007060:	b29a      	uxth	r2, r3
 8007062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007064:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706a:	1c9a      	adds	r2, r3, #2
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	225e      	movs	r2, #94	; 0x5e
 8007074:	5a9b      	ldrh	r3, [r3, r2]
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b299      	uxth	r1, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	225e      	movs	r2, #94	; 0x5e
 8007080:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	2184      	movs	r1, #132	; 0x84
 800708a:	187a      	adds	r2, r7, r1
 800708c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800708e:	187b      	adds	r3, r7, r1
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2207      	movs	r2, #7
 8007094:	4013      	ands	r3, r2
 8007096:	d04e      	beq.n	8007136 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007098:	187b      	adds	r3, r7, r1
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2201      	movs	r2, #1
 800709e:	4013      	ands	r3, r2
 80070a0:	d010      	beq.n	80070c4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80070a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80070a4:	2380      	movs	r3, #128	; 0x80
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	4013      	ands	r3, r2
 80070aa:	d00b      	beq.n	80070c4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2201      	movs	r2, #1
 80070b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2290      	movs	r2, #144	; 0x90
 80070b8:	589b      	ldr	r3, [r3, r2]
 80070ba:	2201      	movs	r2, #1
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2190      	movs	r1, #144	; 0x90
 80070c2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070c4:	2384      	movs	r3, #132	; 0x84
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2202      	movs	r2, #2
 80070cc:	4013      	ands	r3, r2
 80070ce:	d00f      	beq.n	80070f0 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80070d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070d2:	2201      	movs	r2, #1
 80070d4:	4013      	ands	r3, r2
 80070d6:	d00b      	beq.n	80070f0 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2202      	movs	r2, #2
 80070de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2290      	movs	r2, #144	; 0x90
 80070e4:	589b      	ldr	r3, [r3, r2]
 80070e6:	2204      	movs	r2, #4
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2190      	movs	r1, #144	; 0x90
 80070ee:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070f0:	2384      	movs	r3, #132	; 0x84
 80070f2:	18fb      	adds	r3, r7, r3
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2204      	movs	r2, #4
 80070f8:	4013      	ands	r3, r2
 80070fa:	d00f      	beq.n	800711c <UART_RxISR_16BIT_FIFOEN+0x124>
 80070fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fe:	2201      	movs	r2, #1
 8007100:	4013      	ands	r3, r2
 8007102:	d00b      	beq.n	800711c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2204      	movs	r2, #4
 800710a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2290      	movs	r2, #144	; 0x90
 8007110:	589b      	ldr	r3, [r3, r2]
 8007112:	2202      	movs	r2, #2
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2190      	movs	r1, #144	; 0x90
 800711a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2290      	movs	r2, #144	; 0x90
 8007120:	589b      	ldr	r3, [r3, r2]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	0018      	movs	r0, r3
 800712a:	f7fe fd93 	bl	8005c54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2290      	movs	r2, #144	; 0x90
 8007132:	2100      	movs	r1, #0
 8007134:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	225e      	movs	r2, #94	; 0x5e
 800713a:	5a9b      	ldrh	r3, [r3, r2]
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d000      	beq.n	8007144 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8007142:	e098      	b.n	8007276 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007144:	f3ef 8310 	mrs	r3, PRIMASK
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800714c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800714e:	2301      	movs	r3, #1
 8007150:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007154:	f383 8810 	msr	PRIMASK, r3
}
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4974      	ldr	r1, [pc, #464]	; (8007338 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8007166:	400a      	ands	r2, r1
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007170:	f383 8810 	msr	PRIMASK, r3
}
 8007174:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007176:	f3ef 8310 	mrs	r3, PRIMASK
 800717a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800717c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800717e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007180:	2301      	movs	r3, #1
 8007182:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007186:	f383 8810 	msr	PRIMASK, r3
}
 800718a:	46c0      	nop			; (mov r8, r8)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4969      	ldr	r1, [pc, #420]	; (800733c <UART_RxISR_16BIT_FIFOEN+0x344>)
 8007198:	400a      	ands	r2, r1
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800719e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a2:	f383 8810 	msr	PRIMASK, r3
}
 80071a6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	228c      	movs	r2, #140	; 0x8c
 80071ac:	2120      	movs	r1, #32
 80071ae:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a5f      	ldr	r2, [pc, #380]	; (8007340 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d01f      	beq.n	8007206 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	2380      	movs	r3, #128	; 0x80
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	4013      	ands	r3, r2
 80071d2:	d018      	beq.n	8007206 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d4:	f3ef 8310 	mrs	r3, PRIMASK
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071dc:	667b      	str	r3, [r7, #100]	; 0x64
 80071de:	2301      	movs	r3, #1
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e4:	f383 8810 	msr	PRIMASK, r3
}
 80071e8:	46c0      	nop			; (mov r8, r8)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4953      	ldr	r1, [pc, #332]	; (8007344 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80071f6:	400a      	ands	r2, r1
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071fc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	f383 8810 	msr	PRIMASK, r3
}
 8007204:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800720a:	2b01      	cmp	r3, #1
 800720c:	d12f      	bne.n	800726e <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007214:	f3ef 8310 	mrs	r3, PRIMASK
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721c:	663b      	str	r3, [r7, #96]	; 0x60
 800721e:	2301      	movs	r3, #1
 8007220:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	f383 8810 	msr	PRIMASK, r3
}
 8007228:	46c0      	nop			; (mov r8, r8)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2110      	movs	r1, #16
 8007236:	438a      	bics	r2, r1
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	f383 8810 	msr	PRIMASK, r3
}
 8007244:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	2210      	movs	r2, #16
 800724e:	4013      	ands	r3, r2
 8007250:	2b10      	cmp	r3, #16
 8007252:	d103      	bne.n	800725c <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2210      	movs	r2, #16
 800725a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	225c      	movs	r2, #92	; 0x5c
 8007260:	5a9a      	ldrh	r2, [r3, r2]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	0011      	movs	r1, r2
 8007266:	0018      	movs	r0, r3
 8007268:	f7fe fcfc 	bl	8005c64 <HAL_UARTEx_RxEventCallback>
 800726c:	e003      	b.n	8007276 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	0018      	movs	r0, r3
 8007272:	f7f9 fe7b 	bl	8000f6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007276:	2376      	movs	r3, #118	; 0x76
 8007278:	18fb      	adds	r3, r7, r3
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d006      	beq.n	800728e <UART_RxISR_16BIT_FIFOEN+0x296>
 8007280:	2384      	movs	r3, #132	; 0x84
 8007282:	18fb      	adds	r3, r7, r3
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2220      	movs	r2, #32
 8007288:	4013      	ands	r3, r2
 800728a:	d000      	beq.n	800728e <UART_RxISR_16BIT_FIFOEN+0x296>
 800728c:	e6d9      	b.n	8007042 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800728e:	205e      	movs	r0, #94	; 0x5e
 8007290:	183b      	adds	r3, r7, r0
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	215e      	movs	r1, #94	; 0x5e
 8007296:	5a52      	ldrh	r2, [r2, r1]
 8007298:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800729a:	0001      	movs	r1, r0
 800729c:	187b      	adds	r3, r7, r1
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d044      	beq.n	800732e <UART_RxISR_16BIT_FIFOEN+0x336>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2268      	movs	r2, #104	; 0x68
 80072a8:	5a9b      	ldrh	r3, [r3, r2]
 80072aa:	187a      	adds	r2, r7, r1
 80072ac:	8812      	ldrh	r2, [r2, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d23d      	bcs.n	800732e <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b2:	f3ef 8310 	mrs	r3, PRIMASK
 80072b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80072b8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80072bc:	2301      	movs	r3, #1
 80072be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f383 8810 	msr	PRIMASK, r3
}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	491d      	ldr	r1, [pc, #116]	; (8007348 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80072d4:	400a      	ands	r2, r1
 80072d6:	609a      	str	r2, [r3, #8]
 80072d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f383 8810 	msr	PRIMASK, r3
}
 80072e2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a19      	ldr	r2, [pc, #100]	; (800734c <UART_RxISR_16BIT_FIFOEN+0x354>)
 80072e8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ea:	f3ef 8310 	mrs	r3, PRIMASK
 80072ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80072f0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072f2:	657b      	str	r3, [r7, #84]	; 0x54
 80072f4:	2301      	movs	r3, #1
 80072f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f383 8810 	msr	PRIMASK, r3
}
 80072fe:	46c0      	nop			; (mov r8, r8)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2120      	movs	r1, #32
 800730c:	430a      	orrs	r2, r1
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007312:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	f383 8810 	msr	PRIMASK, r3
}
 800731a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800731c:	e007      	b.n	800732e <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2108      	movs	r1, #8
 800732a:	430a      	orrs	r2, r1
 800732c:	619a      	str	r2, [r3, #24]
}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	46bd      	mov	sp, r7
 8007332:	b022      	add	sp, #136	; 0x88
 8007334:	bd80      	pop	{r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	fffffeff 	.word	0xfffffeff
 800733c:	effffffe 	.word	0xeffffffe
 8007340:	40008000 	.word	0x40008000
 8007344:	fbffffff 	.word	0xfbffffff
 8007348:	efffffff 	.word	0xefffffff
 800734c:	08006af5 	.word	0x08006af5

08007350 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	46bd      	mov	sp, r7
 800735c:	b002      	add	sp, #8
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007368:	46c0      	nop			; (mov r8, r8)
 800736a:	46bd      	mov	sp, r7
 800736c:	b002      	add	sp, #8
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007378:	46c0      	nop			; (mov r8, r8)
 800737a:	46bd      	mov	sp, r7
 800737c:	b002      	add	sp, #8
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2284      	movs	r2, #132	; 0x84
 800738c:	5c9b      	ldrb	r3, [r3, r2]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <HAL_UARTEx_DisableFifoMode+0x16>
 8007392:	2302      	movs	r3, #2
 8007394:	e027      	b.n	80073e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2284      	movs	r2, #132	; 0x84
 800739a:	2101      	movs	r1, #1
 800739c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2288      	movs	r2, #136	; 0x88
 80073a2:	2124      	movs	r1, #36	; 0x24
 80073a4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2101      	movs	r1, #1
 80073ba:	438a      	bics	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a0b      	ldr	r2, [pc, #44]	; (80073f0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2288      	movs	r2, #136	; 0x88
 80073d8:	2120      	movs	r1, #32
 80073da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2284      	movs	r2, #132	; 0x84
 80073e0:	2100      	movs	r1, #0
 80073e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	0018      	movs	r0, r3
 80073e8:	46bd      	mov	sp, r7
 80073ea:	b004      	add	sp, #16
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	dfffffff 	.word	0xdfffffff

080073f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2284      	movs	r2, #132	; 0x84
 8007402:	5c9b      	ldrb	r3, [r3, r2]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007408:	2302      	movs	r3, #2
 800740a:	e02e      	b.n	800746a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2284      	movs	r2, #132	; 0x84
 8007410:	2101      	movs	r1, #1
 8007412:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2288      	movs	r2, #136	; 0x88
 8007418:	2124      	movs	r1, #36	; 0x24
 800741a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2101      	movs	r1, #1
 8007430:	438a      	bics	r2, r1
 8007432:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	08d9      	lsrs	r1, r3, #3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	0018      	movs	r0, r3
 800744c:	f000 f854 	bl	80074f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2288      	movs	r2, #136	; 0x88
 800745c:	2120      	movs	r1, #32
 800745e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2284      	movs	r2, #132	; 0x84
 8007464:	2100      	movs	r1, #0
 8007466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	0018      	movs	r0, r3
 800746c:	46bd      	mov	sp, r7
 800746e:	b004      	add	sp, #16
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2284      	movs	r2, #132	; 0x84
 8007482:	5c9b      	ldrb	r3, [r3, r2]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007488:	2302      	movs	r3, #2
 800748a:	e02f      	b.n	80074ec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2284      	movs	r2, #132	; 0x84
 8007490:	2101      	movs	r1, #1
 8007492:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2288      	movs	r2, #136	; 0x88
 8007498:	2124      	movs	r1, #36	; 0x24
 800749a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2101      	movs	r1, #1
 80074b0:	438a      	bics	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	4a0e      	ldr	r2, [pc, #56]	; (80074f4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80074bc:	4013      	ands	r3, r2
 80074be:	0019      	movs	r1, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	0018      	movs	r0, r3
 80074ce:	f000 f813 	bl	80074f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2288      	movs	r2, #136	; 0x88
 80074de:	2120      	movs	r1, #32
 80074e0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2284      	movs	r2, #132	; 0x84
 80074e6:	2100      	movs	r1, #0
 80074e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	0018      	movs	r0, r3
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b004      	add	sp, #16
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	f1ffffff 	.word	0xf1ffffff

080074f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007504:	2b00      	cmp	r3, #0
 8007506:	d108      	bne.n	800751a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	226a      	movs	r2, #106	; 0x6a
 800750c:	2101      	movs	r1, #1
 800750e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2268      	movs	r2, #104	; 0x68
 8007514:	2101      	movs	r1, #1
 8007516:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007518:	e043      	b.n	80075a2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800751a:	260f      	movs	r6, #15
 800751c:	19bb      	adds	r3, r7, r6
 800751e:	2208      	movs	r2, #8
 8007520:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007522:	200e      	movs	r0, #14
 8007524:	183b      	adds	r3, r7, r0
 8007526:	2208      	movs	r2, #8
 8007528:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	0e5b      	lsrs	r3, r3, #25
 8007532:	b2da      	uxtb	r2, r3
 8007534:	240d      	movs	r4, #13
 8007536:	193b      	adds	r3, r7, r4
 8007538:	2107      	movs	r1, #7
 800753a:	400a      	ands	r2, r1
 800753c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	0f5b      	lsrs	r3, r3, #29
 8007546:	b2da      	uxtb	r2, r3
 8007548:	250c      	movs	r5, #12
 800754a:	197b      	adds	r3, r7, r5
 800754c:	2107      	movs	r1, #7
 800754e:	400a      	ands	r2, r1
 8007550:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007552:	183b      	adds	r3, r7, r0
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	197a      	adds	r2, r7, r5
 8007558:	7812      	ldrb	r2, [r2, #0]
 800755a:	4914      	ldr	r1, [pc, #80]	; (80075ac <UARTEx_SetNbDataToProcess+0xb4>)
 800755c:	5c8a      	ldrb	r2, [r1, r2]
 800755e:	435a      	muls	r2, r3
 8007560:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007562:	197b      	adds	r3, r7, r5
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4a12      	ldr	r2, [pc, #72]	; (80075b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007568:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800756a:	0019      	movs	r1, r3
 800756c:	f7f8 fe66 	bl	800023c <__divsi3>
 8007570:	0003      	movs	r3, r0
 8007572:	b299      	uxth	r1, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	226a      	movs	r2, #106	; 0x6a
 8007578:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800757a:	19bb      	adds	r3, r7, r6
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	193a      	adds	r2, r7, r4
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	490a      	ldr	r1, [pc, #40]	; (80075ac <UARTEx_SetNbDataToProcess+0xb4>)
 8007584:	5c8a      	ldrb	r2, [r1, r2]
 8007586:	435a      	muls	r2, r3
 8007588:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800758a:	193b      	adds	r3, r7, r4
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	4a08      	ldr	r2, [pc, #32]	; (80075b0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007590:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007592:	0019      	movs	r1, r3
 8007594:	f7f8 fe52 	bl	800023c <__divsi3>
 8007598:	0003      	movs	r3, r0
 800759a:	b299      	uxth	r1, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2268      	movs	r2, #104	; 0x68
 80075a0:	5299      	strh	r1, [r3, r2]
}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b005      	add	sp, #20
 80075a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	08008650 	.word	0x08008650
 80075b0:	08008658 	.word	0x08008658

080075b4 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af02      	add	r7, sp, #8
 80075ba:	0002      	movs	r2, r0
 80075bc:	1dfb      	adds	r3, r7, #7
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	1dbb      	adds	r3, r7, #6
 80075c2:	1c0a      	adds	r2, r1, #0
 80075c4:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 80075c6:	1dfb      	adds	r3, r7, #7
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	4a16      	ldr	r2, [pc, #88]	; (8007624 <I2C_LCD_ExpanderWrite+0x70>)
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	18d3      	adds	r3, r2, r3
 80075d0:	3301      	adds	r3, #1
 80075d2:	781a      	ldrb	r2, [r3, #0]
 80075d4:	1dbb      	adds	r3, r7, #6
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	4313      	orrs	r3, r2
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	240f      	movs	r4, #15
 80075de:	193b      	adds	r3, r7, r4
 80075e0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 80075e2:	1dfb      	adds	r3, r7, #7
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	4910      	ldr	r1, [pc, #64]	; (8007628 <I2C_LCD_ExpanderWrite+0x74>)
 80075e8:	0013      	movs	r3, r2
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	189b      	adds	r3, r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	18cb      	adds	r3, r1, r3
 80075f2:	3304      	adds	r3, #4
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	1dfb      	adds	r3, r7, #7
 80075f8:	781a      	ldrb	r2, [r3, #0]
 80075fa:	490b      	ldr	r1, [pc, #44]	; (8007628 <I2C_LCD_ExpanderWrite+0x74>)
 80075fc:	0013      	movs	r3, r2
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	189b      	adds	r3, r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	18cb      	adds	r3, r1, r3
 8007606:	3308      	adds	r3, #8
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	18db      	adds	r3, r3, r3
 800760e:	b299      	uxth	r1, r3
 8007610:	193a      	adds	r2, r7, r4
 8007612:	2364      	movs	r3, #100	; 0x64
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	2301      	movs	r3, #1
 8007618:	f7fb fa3a 	bl	8002a90 <HAL_I2C_Master_Transmit>
}
 800761c:	46c0      	nop			; (mov r8, r8)
 800761e:	46bd      	mov	sp, r7
 8007620:	b005      	add	sp, #20
 8007622:	bd90      	pop	{r4, r7, pc}
 8007624:	200002fc 	.word	0x200002fc
 8007628:	08008660 	.word	0x08008660

0800762c <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800762c:	b590      	push	{r4, r7, lr}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	0002      	movs	r2, r0
 8007634:	1dfb      	adds	r3, r7, #7
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	1dbb      	adds	r3, r7, #6
 800763a:	1c0a      	adds	r2, r1, #0
 800763c:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 800763e:	1dbb      	adds	r3, r7, #6
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2204      	movs	r2, #4
 8007644:	4313      	orrs	r3, r2
 8007646:	b2da      	uxtb	r2, r3
 8007648:	1dfb      	adds	r3, r7, #7
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	0011      	movs	r1, r2
 800764e:	0018      	movs	r0, r3
 8007650:	f7ff ffb0 	bl	80075b4 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8007654:	4b25      	ldr	r3, [pc, #148]	; (80076ec <I2C_LCD_EnPulse+0xc0>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	4b25      	ldr	r3, [pc, #148]	; (80076f0 <I2C_LCD_EnPulse+0xc4>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4925      	ldr	r1, [pc, #148]	; (80076f4 <I2C_LCD_EnPulse+0xc8>)
 8007660:	0018      	movs	r0, r3
 8007662:	f7f8 fd61 	bl	8000128 <__udivsi3>
 8007666:	0003      	movs	r3, r0
 8007668:	005c      	lsls	r4, r3, #1
 800766a:	4b21      	ldr	r3, [pc, #132]	; (80076f0 <I2C_LCD_EnPulse+0xc4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4921      	ldr	r1, [pc, #132]	; (80076f4 <I2C_LCD_EnPulse+0xc8>)
 8007670:	0018      	movs	r0, r3
 8007672:	f7f8 fd59 	bl	8000128 <__udivsi3>
 8007676:	0003      	movs	r3, r0
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	1ae3      	subs	r3, r4, r3
 800767c:	613b      	str	r3, [r7, #16]
 800767e:	4b1b      	ldr	r3, [pc, #108]	; (80076ec <I2C_LCD_EnPulse+0xc0>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	429a      	cmp	r2, r3
 800768a:	d8f8      	bhi.n	800767e <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800768c:	1dbb      	adds	r3, r7, #6
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2204      	movs	r2, #4
 8007692:	4393      	bics	r3, r2
 8007694:	b2da      	uxtb	r2, r3
 8007696:	1dfb      	adds	r3, r7, #7
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	0011      	movs	r1, r2
 800769c:	0018      	movs	r0, r3
 800769e:	f7ff ff89 	bl	80075b4 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <I2C_LCD_EnPulse+0xc0>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <I2C_LCD_EnPulse+0xc4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4911      	ldr	r1, [pc, #68]	; (80076f4 <I2C_LCD_EnPulse+0xc8>)
 80076ae:	0018      	movs	r0, r3
 80076b0:	f7f8 fd3a 	bl	8000128 <__udivsi3>
 80076b4:	0003      	movs	r3, r0
 80076b6:	001a      	movs	r2, r3
 80076b8:	2332      	movs	r3, #50	; 0x32
 80076ba:	4353      	muls	r3, r2
 80076bc:	001c      	movs	r4, r3
 80076be:	4b0c      	ldr	r3, [pc, #48]	; (80076f0 <I2C_LCD_EnPulse+0xc4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	490c      	ldr	r1, [pc, #48]	; (80076f4 <I2C_LCD_EnPulse+0xc8>)
 80076c4:	0018      	movs	r0, r3
 80076c6:	f7f8 fd2f 	bl	8000128 <__udivsi3>
 80076ca:	0003      	movs	r3, r0
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	1ae3      	subs	r3, r4, r3
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <I2C_LCD_EnPulse+0xc0>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d8f8      	bhi.n	80076d2 <I2C_LCD_EnPulse+0xa6>
}
 80076e0:	46c0      	nop			; (mov r8, r8)
 80076e2:	46c0      	nop			; (mov r8, r8)
 80076e4:	46bd      	mov	sp, r7
 80076e6:	b007      	add	sp, #28
 80076e8:	bd90      	pop	{r4, r7, pc}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	e000e010 	.word	0xe000e010
 80076f0:	20000000 	.word	0x20000000
 80076f4:	000f4240 	.word	0x000f4240

080076f8 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	0002      	movs	r2, r0
 8007700:	1dfb      	adds	r3, r7, #7
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	1dbb      	adds	r3, r7, #6
 8007706:	1c0a      	adds	r2, r1, #0
 8007708:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 800770a:	1dbb      	adds	r3, r7, #6
 800770c:	781a      	ldrb	r2, [r3, #0]
 800770e:	1dfb      	adds	r3, r7, #7
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	0011      	movs	r1, r2
 8007714:	0018      	movs	r0, r3
 8007716:	f7ff ff4d 	bl	80075b4 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 800771a:	1dbb      	adds	r3, r7, #6
 800771c:	781a      	ldrb	r2, [r3, #0]
 800771e:	1dfb      	adds	r3, r7, #7
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	0011      	movs	r1, r2
 8007724:	0018      	movs	r0, r3
 8007726:	f7ff ff81 	bl	800762c <I2C_LCD_EnPulse>
}
 800772a:	46c0      	nop			; (mov r8, r8)
 800772c:	46bd      	mov	sp, r7
 800772e:	b002      	add	sp, #8
 8007730:	bd80      	pop	{r7, pc}

08007732 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8007732:	b590      	push	{r4, r7, lr}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	0004      	movs	r4, r0
 800773a:	0008      	movs	r0, r1
 800773c:	0011      	movs	r1, r2
 800773e:	1dfb      	adds	r3, r7, #7
 8007740:	1c22      	adds	r2, r4, #0
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	1dbb      	adds	r3, r7, #6
 8007746:	1c02      	adds	r2, r0, #0
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	1d7b      	adds	r3, r7, #5
 800774c:	1c0a      	adds	r2, r1, #0
 800774e:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8007750:	200f      	movs	r0, #15
 8007752:	183b      	adds	r3, r7, r0
 8007754:	1dba      	adds	r2, r7, #6
 8007756:	7812      	ldrb	r2, [r2, #0]
 8007758:	210f      	movs	r1, #15
 800775a:	438a      	bics	r2, r1
 800775c:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 800775e:	1dbb      	adds	r3, r7, #6
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	011a      	lsls	r2, r3, #4
 8007764:	240e      	movs	r4, #14
 8007766:	193b      	adds	r3, r7, r4
 8007768:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 800776a:	183a      	adds	r2, r7, r0
 800776c:	1d7b      	adds	r3, r7, #5
 800776e:	7812      	ldrb	r2, [r2, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	4313      	orrs	r3, r2
 8007774:	b2da      	uxtb	r2, r3
 8007776:	1dfb      	adds	r3, r7, #7
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	0011      	movs	r1, r2
 800777c:	0018      	movs	r0, r3
 800777e:	f7ff ffbb 	bl	80076f8 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8007782:	193a      	adds	r2, r7, r4
 8007784:	1d7b      	adds	r3, r7, #5
 8007786:	7812      	ldrb	r2, [r2, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	4313      	orrs	r3, r2
 800778c:	b2da      	uxtb	r2, r3
 800778e:	1dfb      	adds	r3, r7, #7
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	0011      	movs	r1, r2
 8007794:	0018      	movs	r0, r3
 8007796:	f7ff ffaf 	bl	80076f8 <I2C_LCD_Write4Bits>
}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	46bd      	mov	sp, r7
 800779e:	b005      	add	sp, #20
 80077a0:	bd90      	pop	{r4, r7, pc}

080077a2 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	0002      	movs	r2, r0
 80077aa:	1dfb      	adds	r3, r7, #7
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	1dbb      	adds	r3, r7, #6
 80077b0:	1c0a      	adds	r2, r1, #0
 80077b2:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80077b4:	1dbb      	adds	r3, r7, #6
 80077b6:	7819      	ldrb	r1, [r3, #0]
 80077b8:	1dfb      	adds	r3, r7, #7
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2200      	movs	r2, #0
 80077be:	0018      	movs	r0, r3
 80077c0:	f7ff ffb7 	bl	8007732 <I2C_LCD_Send>
}
 80077c4:	46c0      	nop			; (mov r8, r8)
 80077c6:	46bd      	mov	sp, r7
 80077c8:	b002      	add	sp, #8
 80077ca:	bd80      	pop	{r7, pc}

080077cc <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	0002      	movs	r2, r0
 80077d4:	1dfb      	adds	r3, r7, #7
 80077d6:	701a      	strb	r2, [r3, #0]
 80077d8:	1dbb      	adds	r3, r7, #6
 80077da:	1c0a      	adds	r2, r1, #0
 80077dc:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80077de:	1dbb      	adds	r3, r7, #6
 80077e0:	7819      	ldrb	r1, [r3, #0]
 80077e2:	1dfb      	adds	r3, r7, #7
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2201      	movs	r2, #1
 80077e8:	0018      	movs	r0, r3
 80077ea:	f7ff ffa2 	bl	8007732 <I2C_LCD_Send>
}
 80077ee:	46c0      	nop			; (mov r8, r8)
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b002      	add	sp, #8
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80077f8:	b590      	push	{r4, r7, lr}
 80077fa:	b08b      	sub	sp, #44	; 0x2c
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	0002      	movs	r2, r0
 8007800:	1dfb      	adds	r3, r7, #7
 8007802:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8007804:	46c0      	nop			; (mov r8, r8)
 8007806:	f7f9 fee3 	bl	80015d0 <HAL_GetTick>
 800780a:	0003      	movs	r3, r0
 800780c:	2b31      	cmp	r3, #49	; 0x31
 800780e:	d9fa      	bls.n	8007806 <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007810:	1dfb      	adds	r3, r7, #7
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2130      	movs	r1, #48	; 0x30
 8007816:	0018      	movs	r0, r3
 8007818:	f7ff ffc3 	bl	80077a2 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 800781c:	2300      	movs	r3, #0
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
 8007820:	e025      	b.n	800786e <I2C_LCD_Init+0x76>
 8007822:	4b57      	ldr	r3, [pc, #348]	; (8007980 <I2C_LCD_Init+0x188>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	4b56      	ldr	r3, [pc, #344]	; (8007984 <I2C_LCD_Init+0x18c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4956      	ldr	r1, [pc, #344]	; (8007988 <I2C_LCD_Init+0x190>)
 800782e:	0018      	movs	r0, r3
 8007830:	f7f8 fc7a 	bl	8000128 <__udivsi3>
 8007834:	0003      	movs	r3, r0
 8007836:	001a      	movs	r2, r3
 8007838:	0013      	movs	r3, r2
 800783a:	015b      	lsls	r3, r3, #5
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	189b      	adds	r3, r3, r2
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	001c      	movs	r4, r3
 8007846:	4b4f      	ldr	r3, [pc, #316]	; (8007984 <I2C_LCD_Init+0x18c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	494f      	ldr	r1, [pc, #316]	; (8007988 <I2C_LCD_Init+0x190>)
 800784c:	0018      	movs	r0, r3
 800784e:	f7f8 fc6b 	bl	8000128 <__udivsi3>
 8007852:	0003      	movs	r3, r0
 8007854:	085b      	lsrs	r3, r3, #1
 8007856:	1ae3      	subs	r3, r4, r3
 8007858:	60bb      	str	r3, [r7, #8]
 800785a:	4b49      	ldr	r3, [pc, #292]	; (8007980 <I2C_LCD_Init+0x188>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	429a      	cmp	r2, r3
 8007866:	d8f8      	bhi.n	800785a <I2C_LCD_Init+0x62>
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	3301      	adds	r3, #1
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	2b04      	cmp	r3, #4
 8007872:	d9d6      	bls.n	8007822 <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007874:	1dfb      	adds	r3, r7, #7
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2130      	movs	r1, #48	; 0x30
 800787a:	0018      	movs	r0, r3
 800787c:	f7ff ff91 	bl	80077a2 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8007880:	2300      	movs	r3, #0
 8007882:	623b      	str	r3, [r7, #32]
 8007884:	e025      	b.n	80078d2 <I2C_LCD_Init+0xda>
 8007886:	4b3e      	ldr	r3, [pc, #248]	; (8007980 <I2C_LCD_Init+0x188>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	4b3d      	ldr	r3, [pc, #244]	; (8007984 <I2C_LCD_Init+0x18c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	493d      	ldr	r1, [pc, #244]	; (8007988 <I2C_LCD_Init+0x190>)
 8007892:	0018      	movs	r0, r3
 8007894:	f7f8 fc48 	bl	8000128 <__udivsi3>
 8007898:	0003      	movs	r3, r0
 800789a:	001a      	movs	r2, r3
 800789c:	0013      	movs	r3, r2
 800789e:	015b      	lsls	r3, r3, #5
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	189b      	adds	r3, r3, r2
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	001c      	movs	r4, r3
 80078aa:	4b36      	ldr	r3, [pc, #216]	; (8007984 <I2C_LCD_Init+0x18c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4936      	ldr	r1, [pc, #216]	; (8007988 <I2C_LCD_Init+0x190>)
 80078b0:	0018      	movs	r0, r3
 80078b2:	f7f8 fc39 	bl	8000128 <__udivsi3>
 80078b6:	0003      	movs	r3, r0
 80078b8:	085b      	lsrs	r3, r3, #1
 80078ba:	1ae3      	subs	r3, r4, r3
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	4b30      	ldr	r3, [pc, #192]	; (8007980 <I2C_LCD_Init+0x188>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d8f8      	bhi.n	80078be <I2C_LCD_Init+0xc6>
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	3301      	adds	r3, #1
 80078d0:	623b      	str	r3, [r7, #32]
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d9d6      	bls.n	8007886 <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80078d8:	1dfb      	adds	r3, r7, #7
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2130      	movs	r1, #48	; 0x30
 80078de:	0018      	movs	r0, r3
 80078e0:	f7ff ff5f 	bl	80077a2 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80078e4:	4b26      	ldr	r3, [pc, #152]	; (8007980 <I2C_LCD_Init+0x188>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	61fb      	str	r3, [r7, #28]
 80078ea:	4b26      	ldr	r3, [pc, #152]	; (8007984 <I2C_LCD_Init+0x18c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4926      	ldr	r1, [pc, #152]	; (8007988 <I2C_LCD_Init+0x190>)
 80078f0:	0018      	movs	r0, r3
 80078f2:	f7f8 fc19 	bl	8000128 <__udivsi3>
 80078f6:	0003      	movs	r3, r0
 80078f8:	001a      	movs	r2, r3
 80078fa:	2396      	movs	r3, #150	; 0x96
 80078fc:	4353      	muls	r3, r2
 80078fe:	001c      	movs	r4, r3
 8007900:	4b20      	ldr	r3, [pc, #128]	; (8007984 <I2C_LCD_Init+0x18c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4920      	ldr	r1, [pc, #128]	; (8007988 <I2C_LCD_Init+0x190>)
 8007906:	0018      	movs	r0, r3
 8007908:	f7f8 fc0e 	bl	8000128 <__udivsi3>
 800790c:	0003      	movs	r3, r0
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	1ae3      	subs	r3, r4, r3
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <I2C_LCD_Init+0x188>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	69fa      	ldr	r2, [r7, #28]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	429a      	cmp	r2, r3
 8007920:	d8f8      	bhi.n	8007914 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8007922:	1dfb      	adds	r3, r7, #7
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2102      	movs	r1, #2
 8007928:	0018      	movs	r0, r3
 800792a:	f7ff ff3a 	bl	80077a2 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800792e:	1dfb      	adds	r3, r7, #7
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2128      	movs	r1, #40	; 0x28
 8007934:	0018      	movs	r0, r3
 8007936:	f7ff ff34 	bl	80077a2 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 800793a:	1dfb      	adds	r3, r7, #7
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	210c      	movs	r1, #12
 8007940:	0018      	movs	r0, r3
 8007942:	f7ff ff2e 	bl	80077a2 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8007946:	1dfb      	adds	r3, r7, #7
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2106      	movs	r1, #6
 800794c:	0018      	movs	r0, r3
 800794e:	f7ff ff28 	bl	80077a2 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8007952:	1dfb      	adds	r3, r7, #7
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	4b0d      	ldr	r3, [pc, #52]	; (800798c <I2C_LCD_Init+0x194>)
 8007958:	0052      	lsls	r2, r2, #1
 800795a:	2104      	movs	r1, #4
 800795c:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 800795e:	1dfb      	adds	r3, r7, #7
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	4a0a      	ldr	r2, [pc, #40]	; (800798c <I2C_LCD_Init+0x194>)
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	18d3      	adds	r3, r2, r3
 8007968:	3301      	adds	r3, #1
 800796a:	2208      	movs	r2, #8
 800796c:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 800796e:	1dfb      	adds	r3, r7, #7
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	0018      	movs	r0, r3
 8007974:	f000 f80c 	bl	8007990 <I2C_LCD_Clear>
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	b00b      	add	sp, #44	; 0x2c
 800797e:	bd90      	pop	{r4, r7, pc}
 8007980:	e000e010 	.word	0xe000e010
 8007984:	20000000 	.word	0x20000000
 8007988:	000f4240 	.word	0x000f4240
 800798c:	200002fc 	.word	0x200002fc

08007990 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8007990:	b590      	push	{r4, r7, lr}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	0002      	movs	r2, r0
 8007998:	1dfb      	adds	r3, r7, #7
 800799a:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800799c:	1dfb      	adds	r3, r7, #7
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2101      	movs	r1, #1
 80079a2:	0018      	movs	r0, r3
 80079a4:	f7ff fefd 	bl	80077a2 <I2C_LCD_Cmd>
    DELAY_MS(2);
 80079a8:	2300      	movs	r3, #0
 80079aa:	617b      	str	r3, [r7, #20]
 80079ac:	e025      	b.n	80079fa <I2C_LCD_Clear+0x6a>
 80079ae:	4b17      	ldr	r3, [pc, #92]	; (8007a0c <I2C_LCD_Clear+0x7c>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	4b16      	ldr	r3, [pc, #88]	; (8007a10 <I2C_LCD_Clear+0x80>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4916      	ldr	r1, [pc, #88]	; (8007a14 <I2C_LCD_Clear+0x84>)
 80079ba:	0018      	movs	r0, r3
 80079bc:	f7f8 fbb4 	bl	8000128 <__udivsi3>
 80079c0:	0003      	movs	r3, r0
 80079c2:	001a      	movs	r2, r3
 80079c4:	0013      	movs	r3, r2
 80079c6:	015b      	lsls	r3, r3, #5
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	189b      	adds	r3, r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	001c      	movs	r4, r3
 80079d2:	4b0f      	ldr	r3, [pc, #60]	; (8007a10 <I2C_LCD_Clear+0x80>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	490f      	ldr	r1, [pc, #60]	; (8007a14 <I2C_LCD_Clear+0x84>)
 80079d8:	0018      	movs	r0, r3
 80079da:	f7f8 fba5 	bl	8000128 <__udivsi3>
 80079de:	0003      	movs	r3, r0
 80079e0:	085b      	lsrs	r3, r3, #1
 80079e2:	1ae3      	subs	r3, r4, r3
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <I2C_LCD_Clear+0x7c>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d8f8      	bhi.n	80079e6 <I2C_LCD_Clear+0x56>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	3301      	adds	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d9d6      	bls.n	80079ae <I2C_LCD_Clear+0x1e>
}
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	46bd      	mov	sp, r7
 8007a06:	b007      	add	sp, #28
 8007a08:	bd90      	pop	{r4, r7, pc}
 8007a0a:	46c0      	nop			; (mov r8, r8)
 8007a0c:	e000e010 	.word	0xe000e010
 8007a10:	20000000 	.word	0x20000000
 8007a14:	000f4240 	.word	0x000f4240

08007a18 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8007a18:	b590      	push	{r4, r7, lr}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	0004      	movs	r4, r0
 8007a20:	0008      	movs	r0, r1
 8007a22:	0011      	movs	r1, r2
 8007a24:	1dfb      	adds	r3, r7, #7
 8007a26:	1c22      	adds	r2, r4, #0
 8007a28:	701a      	strb	r2, [r3, #0]
 8007a2a:	1dbb      	adds	r3, r7, #6
 8007a2c:	1c02      	adds	r2, r0, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	1d7b      	adds	r3, r7, #5
 8007a32:	1c0a      	adds	r2, r1, #0
 8007a34:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8007a36:	2308      	movs	r3, #8
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <I2C_LCD_SetCursor+0x98>)
 8007a3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007a3e:	c313      	stmia	r3!, {r0, r1, r4}
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8007a44:	1dfb      	adds	r3, r7, #7
 8007a46:	781a      	ldrb	r2, [r3, #0]
 8007a48:	491a      	ldr	r1, [pc, #104]	; (8007ab4 <I2C_LCD_SetCursor+0x9c>)
 8007a4a:	0013      	movs	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	189b      	adds	r3, r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	18cb      	adds	r3, r1, r3
 8007a54:	330a      	adds	r3, #10
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	1d7a      	adds	r2, r7, #5
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d90c      	bls.n	8007a7a <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8007a60:	1dfb      	adds	r3, r7, #7
 8007a62:	781a      	ldrb	r2, [r3, #0]
 8007a64:	4913      	ldr	r1, [pc, #76]	; (8007ab4 <I2C_LCD_SetCursor+0x9c>)
 8007a66:	0013      	movs	r3, r2
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	189b      	adds	r3, r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	18cb      	adds	r3, r1, r3
 8007a70:	330a      	adds	r3, #10
 8007a72:	781a      	ldrb	r2, [r3, #0]
 8007a74:	1d7b      	adds	r3, r7, #5
 8007a76:	3a01      	subs	r2, #1
 8007a78:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8007a7a:	1d7b      	adds	r3, r7, #5
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	2308      	movs	r3, #8
 8007a80:	18fb      	adds	r3, r7, r3
 8007a82:	0092      	lsls	r2, r2, #2
 8007a84:	58d3      	ldr	r3, [r2, r3]
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	1dbb      	adds	r3, r7, #6
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	18d3      	adds	r3, r2, r3
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	b25b      	sxtb	r3, r3
 8007a92:	2280      	movs	r2, #128	; 0x80
 8007a94:	4252      	negs	r2, r2
 8007a96:	4313      	orrs	r3, r2
 8007a98:	b25b      	sxtb	r3, r3
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	1dfb      	adds	r3, r7, #7
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	0011      	movs	r1, r2
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	f7ff fe7d 	bl	80077a2 <I2C_LCD_Cmd>
}
 8007aa8:	46c0      	nop			; (mov r8, r8)
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b007      	add	sp, #28
 8007aae:	bd90      	pop	{r4, r7, pc}
 8007ab0:	08008574 	.word	0x08008574
 8007ab4:	08008660 	.word	0x08008660

08007ab8 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	0002      	movs	r2, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	1dfb      	adds	r3, r7, #7
 8007ac4:	701a      	strb	r2, [r3, #0]
    while (*Str)
 8007ac6:	e009      	b.n	8007adc <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	603a      	str	r2, [r7, #0]
 8007ace:	781a      	ldrb	r2, [r3, #0]
 8007ad0:	1dfb      	adds	r3, r7, #7
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	0011      	movs	r1, r2
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	f7ff fe78 	bl	80077cc <I2C_LCD_Data>
    while (*Str)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1f1      	bne.n	8007ac8 <I2C_LCD_WriteString+0x10>
    }
}
 8007ae4:	46c0      	nop			; (mov r8, r8)
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b002      	add	sp, #8
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <siprintf>:
 8007af0:	b40e      	push	{r1, r2, r3}
 8007af2:	b500      	push	{lr}
 8007af4:	490b      	ldr	r1, [pc, #44]	; (8007b24 <siprintf+0x34>)
 8007af6:	b09c      	sub	sp, #112	; 0x70
 8007af8:	ab1d      	add	r3, sp, #116	; 0x74
 8007afa:	9002      	str	r0, [sp, #8]
 8007afc:	9006      	str	r0, [sp, #24]
 8007afe:	9107      	str	r1, [sp, #28]
 8007b00:	9104      	str	r1, [sp, #16]
 8007b02:	4809      	ldr	r0, [pc, #36]	; (8007b28 <siprintf+0x38>)
 8007b04:	4909      	ldr	r1, [pc, #36]	; (8007b2c <siprintf+0x3c>)
 8007b06:	cb04      	ldmia	r3!, {r2}
 8007b08:	9105      	str	r1, [sp, #20]
 8007b0a:	6800      	ldr	r0, [r0, #0]
 8007b0c:	a902      	add	r1, sp, #8
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	f000 f9a2 	bl	8007e58 <_svfiprintf_r>
 8007b14:	2200      	movs	r2, #0
 8007b16:	9b02      	ldr	r3, [sp, #8]
 8007b18:	701a      	strb	r2, [r3, #0]
 8007b1a:	b01c      	add	sp, #112	; 0x70
 8007b1c:	bc08      	pop	{r3}
 8007b1e:	b003      	add	sp, #12
 8007b20:	4718      	bx	r3
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	7fffffff 	.word	0x7fffffff
 8007b28:	20000058 	.word	0x20000058
 8007b2c:	ffff0208 	.word	0xffff0208

08007b30 <memset>:
 8007b30:	0003      	movs	r3, r0
 8007b32:	1882      	adds	r2, r0, r2
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d100      	bne.n	8007b3a <memset+0xa>
 8007b38:	4770      	bx	lr
 8007b3a:	7019      	strb	r1, [r3, #0]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	e7f9      	b.n	8007b34 <memset+0x4>

08007b40 <__errno>:
 8007b40:	4b01      	ldr	r3, [pc, #4]	; (8007b48 <__errno+0x8>)
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	4770      	bx	lr
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	20000058 	.word	0x20000058

08007b4c <__libc_init_array>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	2600      	movs	r6, #0
 8007b50:	4c0c      	ldr	r4, [pc, #48]	; (8007b84 <__libc_init_array+0x38>)
 8007b52:	4d0d      	ldr	r5, [pc, #52]	; (8007b88 <__libc_init_array+0x3c>)
 8007b54:	1b64      	subs	r4, r4, r5
 8007b56:	10a4      	asrs	r4, r4, #2
 8007b58:	42a6      	cmp	r6, r4
 8007b5a:	d109      	bne.n	8007b70 <__libc_init_array+0x24>
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	f000 fc6d 	bl	800843c <_init>
 8007b62:	4c0a      	ldr	r4, [pc, #40]	; (8007b8c <__libc_init_array+0x40>)
 8007b64:	4d0a      	ldr	r5, [pc, #40]	; (8007b90 <__libc_init_array+0x44>)
 8007b66:	1b64      	subs	r4, r4, r5
 8007b68:	10a4      	asrs	r4, r4, #2
 8007b6a:	42a6      	cmp	r6, r4
 8007b6c:	d105      	bne.n	8007b7a <__libc_init_array+0x2e>
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	00b3      	lsls	r3, r6, #2
 8007b72:	58eb      	ldr	r3, [r5, r3]
 8007b74:	4798      	blx	r3
 8007b76:	3601      	adds	r6, #1
 8007b78:	e7ee      	b.n	8007b58 <__libc_init_array+0xc>
 8007b7a:	00b3      	lsls	r3, r6, #2
 8007b7c:	58eb      	ldr	r3, [r5, r3]
 8007b7e:	4798      	blx	r3
 8007b80:	3601      	adds	r6, #1
 8007b82:	e7f2      	b.n	8007b6a <__libc_init_array+0x1e>
 8007b84:	080086a8 	.word	0x080086a8
 8007b88:	080086a8 	.word	0x080086a8
 8007b8c:	080086ac 	.word	0x080086ac
 8007b90:	080086a8 	.word	0x080086a8

08007b94 <__retarget_lock_acquire_recursive>:
 8007b94:	4770      	bx	lr

08007b96 <__retarget_lock_release_recursive>:
 8007b96:	4770      	bx	lr

08007b98 <_free_r>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	0005      	movs	r5, r0
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d010      	beq.n	8007bc2 <_free_r+0x2a>
 8007ba0:	1f0c      	subs	r4, r1, #4
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da00      	bge.n	8007baa <_free_r+0x12>
 8007ba8:	18e4      	adds	r4, r4, r3
 8007baa:	0028      	movs	r0, r5
 8007bac:	f000 f8e2 	bl	8007d74 <__malloc_lock>
 8007bb0:	4a1d      	ldr	r2, [pc, #116]	; (8007c28 <_free_r+0x90>)
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d105      	bne.n	8007bc4 <_free_r+0x2c>
 8007bb8:	6063      	str	r3, [r4, #4]
 8007bba:	6014      	str	r4, [r2, #0]
 8007bbc:	0028      	movs	r0, r5
 8007bbe:	f000 f8e1 	bl	8007d84 <__malloc_unlock>
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d908      	bls.n	8007bda <_free_r+0x42>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	1821      	adds	r1, r4, r0
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	d1f3      	bne.n	8007bb8 <_free_r+0x20>
 8007bd0:	6819      	ldr	r1, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	1809      	adds	r1, r1, r0
 8007bd6:	6021      	str	r1, [r4, #0]
 8007bd8:	e7ee      	b.n	8007bb8 <_free_r+0x20>
 8007bda:	001a      	movs	r2, r3
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <_free_r+0x4e>
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	d9f9      	bls.n	8007bda <_free_r+0x42>
 8007be6:	6811      	ldr	r1, [r2, #0]
 8007be8:	1850      	adds	r0, r2, r1
 8007bea:	42a0      	cmp	r0, r4
 8007bec:	d10b      	bne.n	8007c06 <_free_r+0x6e>
 8007bee:	6820      	ldr	r0, [r4, #0]
 8007bf0:	1809      	adds	r1, r1, r0
 8007bf2:	1850      	adds	r0, r2, r1
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	4283      	cmp	r3, r0
 8007bf8:	d1e0      	bne.n	8007bbc <_free_r+0x24>
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	1841      	adds	r1, r0, r1
 8007c00:	6011      	str	r1, [r2, #0]
 8007c02:	6053      	str	r3, [r2, #4]
 8007c04:	e7da      	b.n	8007bbc <_free_r+0x24>
 8007c06:	42a0      	cmp	r0, r4
 8007c08:	d902      	bls.n	8007c10 <_free_r+0x78>
 8007c0a:	230c      	movs	r3, #12
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	e7d5      	b.n	8007bbc <_free_r+0x24>
 8007c10:	6820      	ldr	r0, [r4, #0]
 8007c12:	1821      	adds	r1, r4, r0
 8007c14:	428b      	cmp	r3, r1
 8007c16:	d103      	bne.n	8007c20 <_free_r+0x88>
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	1809      	adds	r1, r1, r0
 8007c1e:	6021      	str	r1, [r4, #0]
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	6054      	str	r4, [r2, #4]
 8007c24:	e7ca      	b.n	8007bbc <_free_r+0x24>
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	20000440 	.word	0x20000440

08007c2c <sbrk_aligned>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4e0f      	ldr	r6, [pc, #60]	; (8007c6c <sbrk_aligned+0x40>)
 8007c30:	000d      	movs	r5, r1
 8007c32:	6831      	ldr	r1, [r6, #0]
 8007c34:	0004      	movs	r4, r0
 8007c36:	2900      	cmp	r1, #0
 8007c38:	d102      	bne.n	8007c40 <sbrk_aligned+0x14>
 8007c3a:	f000 fba1 	bl	8008380 <_sbrk_r>
 8007c3e:	6030      	str	r0, [r6, #0]
 8007c40:	0029      	movs	r1, r5
 8007c42:	0020      	movs	r0, r4
 8007c44:	f000 fb9c 	bl	8008380 <_sbrk_r>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d00a      	beq.n	8007c62 <sbrk_aligned+0x36>
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	1cc5      	adds	r5, r0, #3
 8007c50:	439d      	bics	r5, r3
 8007c52:	42a8      	cmp	r0, r5
 8007c54:	d007      	beq.n	8007c66 <sbrk_aligned+0x3a>
 8007c56:	1a29      	subs	r1, r5, r0
 8007c58:	0020      	movs	r0, r4
 8007c5a:	f000 fb91 	bl	8008380 <_sbrk_r>
 8007c5e:	3001      	adds	r0, #1
 8007c60:	d101      	bne.n	8007c66 <sbrk_aligned+0x3a>
 8007c62:	2501      	movs	r5, #1
 8007c64:	426d      	negs	r5, r5
 8007c66:	0028      	movs	r0, r5
 8007c68:	bd70      	pop	{r4, r5, r6, pc}
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	20000444 	.word	0x20000444

08007c70 <_malloc_r>:
 8007c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c72:	2203      	movs	r2, #3
 8007c74:	1ccb      	adds	r3, r1, #3
 8007c76:	4393      	bics	r3, r2
 8007c78:	3308      	adds	r3, #8
 8007c7a:	0006      	movs	r6, r0
 8007c7c:	001f      	movs	r7, r3
 8007c7e:	2b0c      	cmp	r3, #12
 8007c80:	d238      	bcs.n	8007cf4 <_malloc_r+0x84>
 8007c82:	270c      	movs	r7, #12
 8007c84:	42b9      	cmp	r1, r7
 8007c86:	d837      	bhi.n	8007cf8 <_malloc_r+0x88>
 8007c88:	0030      	movs	r0, r6
 8007c8a:	f000 f873 	bl	8007d74 <__malloc_lock>
 8007c8e:	4b38      	ldr	r3, [pc, #224]	; (8007d70 <_malloc_r+0x100>)
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	001c      	movs	r4, r3
 8007c96:	2c00      	cmp	r4, #0
 8007c98:	d133      	bne.n	8007d02 <_malloc_r+0x92>
 8007c9a:	0039      	movs	r1, r7
 8007c9c:	0030      	movs	r0, r6
 8007c9e:	f7ff ffc5 	bl	8007c2c <sbrk_aligned>
 8007ca2:	0004      	movs	r4, r0
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d15e      	bne.n	8007d66 <_malloc_r+0xf6>
 8007ca8:	9b00      	ldr	r3, [sp, #0]
 8007caa:	681c      	ldr	r4, [r3, #0]
 8007cac:	0025      	movs	r5, r4
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	d14e      	bne.n	8007d50 <_malloc_r+0xe0>
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d051      	beq.n	8007d5a <_malloc_r+0xea>
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	0029      	movs	r1, r5
 8007cba:	18e3      	adds	r3, r4, r3
 8007cbc:	0030      	movs	r0, r6
 8007cbe:	9301      	str	r3, [sp, #4]
 8007cc0:	f000 fb5e 	bl	8008380 <_sbrk_r>
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	4283      	cmp	r3, r0
 8007cc8:	d147      	bne.n	8007d5a <_malloc_r+0xea>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	0030      	movs	r0, r6
 8007cce:	1aff      	subs	r7, r7, r3
 8007cd0:	0039      	movs	r1, r7
 8007cd2:	f7ff ffab 	bl	8007c2c <sbrk_aligned>
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d03f      	beq.n	8007d5a <_malloc_r+0xea>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	19db      	adds	r3, r3, r7
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	9b00      	ldr	r3, [sp, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d040      	beq.n	8007d6a <_malloc_r+0xfa>
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	42a2      	cmp	r2, r4
 8007cec:	d133      	bne.n	8007d56 <_malloc_r+0xe6>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	e014      	b.n	8007d1e <_malloc_r+0xae>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dac5      	bge.n	8007c84 <_malloc_r+0x14>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	2500      	movs	r5, #0
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	0028      	movs	r0, r5
 8007d00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d02:	6821      	ldr	r1, [r4, #0]
 8007d04:	1bc9      	subs	r1, r1, r7
 8007d06:	d420      	bmi.n	8007d4a <_malloc_r+0xda>
 8007d08:	290b      	cmp	r1, #11
 8007d0a:	d918      	bls.n	8007d3e <_malloc_r+0xce>
 8007d0c:	19e2      	adds	r2, r4, r7
 8007d0e:	6027      	str	r7, [r4, #0]
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	d112      	bne.n	8007d3a <_malloc_r+0xca>
 8007d14:	9b00      	ldr	r3, [sp, #0]
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	6863      	ldr	r3, [r4, #4]
 8007d1a:	6011      	str	r1, [r2, #0]
 8007d1c:	6053      	str	r3, [r2, #4]
 8007d1e:	0030      	movs	r0, r6
 8007d20:	0025      	movs	r5, r4
 8007d22:	f000 f82f 	bl	8007d84 <__malloc_unlock>
 8007d26:	2207      	movs	r2, #7
 8007d28:	350b      	adds	r5, #11
 8007d2a:	1d23      	adds	r3, r4, #4
 8007d2c:	4395      	bics	r5, r2
 8007d2e:	1aea      	subs	r2, r5, r3
 8007d30:	429d      	cmp	r5, r3
 8007d32:	d0e4      	beq.n	8007cfe <_malloc_r+0x8e>
 8007d34:	1b5b      	subs	r3, r3, r5
 8007d36:	50a3      	str	r3, [r4, r2]
 8007d38:	e7e1      	b.n	8007cfe <_malloc_r+0x8e>
 8007d3a:	605a      	str	r2, [r3, #4]
 8007d3c:	e7ec      	b.n	8007d18 <_malloc_r+0xa8>
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d1d5      	bne.n	8007cf0 <_malloc_r+0x80>
 8007d44:	9b00      	ldr	r3, [sp, #0]
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	e7e9      	b.n	8007d1e <_malloc_r+0xae>
 8007d4a:	0023      	movs	r3, r4
 8007d4c:	6864      	ldr	r4, [r4, #4]
 8007d4e:	e7a2      	b.n	8007c96 <_malloc_r+0x26>
 8007d50:	002c      	movs	r4, r5
 8007d52:	686d      	ldr	r5, [r5, #4]
 8007d54:	e7ab      	b.n	8007cae <_malloc_r+0x3e>
 8007d56:	0013      	movs	r3, r2
 8007d58:	e7c4      	b.n	8007ce4 <_malloc_r+0x74>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	0030      	movs	r0, r6
 8007d5e:	6033      	str	r3, [r6, #0]
 8007d60:	f000 f810 	bl	8007d84 <__malloc_unlock>
 8007d64:	e7cb      	b.n	8007cfe <_malloc_r+0x8e>
 8007d66:	6027      	str	r7, [r4, #0]
 8007d68:	e7d9      	b.n	8007d1e <_malloc_r+0xae>
 8007d6a:	605b      	str	r3, [r3, #4]
 8007d6c:	deff      	udf	#255	; 0xff
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	20000440 	.word	0x20000440

08007d74 <__malloc_lock>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4802      	ldr	r0, [pc, #8]	; (8007d80 <__malloc_lock+0xc>)
 8007d78:	f7ff ff0c 	bl	8007b94 <__retarget_lock_acquire_recursive>
 8007d7c:	bd10      	pop	{r4, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	2000043c 	.word	0x2000043c

08007d84 <__malloc_unlock>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	4802      	ldr	r0, [pc, #8]	; (8007d90 <__malloc_unlock+0xc>)
 8007d88:	f7ff ff05 	bl	8007b96 <__retarget_lock_release_recursive>
 8007d8c:	bd10      	pop	{r4, pc}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	2000043c 	.word	0x2000043c

08007d94 <__ssputs_r>:
 8007d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d96:	b085      	sub	sp, #20
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	9203      	str	r2, [sp, #12]
 8007d9c:	688e      	ldr	r6, [r1, #8]
 8007d9e:	9a01      	ldr	r2, [sp, #4]
 8007da0:	0007      	movs	r7, r0
 8007da2:	000c      	movs	r4, r1
 8007da4:	680b      	ldr	r3, [r1, #0]
 8007da6:	4296      	cmp	r6, r2
 8007da8:	d831      	bhi.n	8007e0e <__ssputs_r+0x7a>
 8007daa:	898a      	ldrh	r2, [r1, #12]
 8007dac:	2190      	movs	r1, #144	; 0x90
 8007dae:	00c9      	lsls	r1, r1, #3
 8007db0:	420a      	tst	r2, r1
 8007db2:	d029      	beq.n	8007e08 <__ssputs_r+0x74>
 8007db4:	2003      	movs	r0, #3
 8007db6:	6921      	ldr	r1, [r4, #16]
 8007db8:	1a5b      	subs	r3, r3, r1
 8007dba:	9302      	str	r3, [sp, #8]
 8007dbc:	6963      	ldr	r3, [r4, #20]
 8007dbe:	4343      	muls	r3, r0
 8007dc0:	0fdd      	lsrs	r5, r3, #31
 8007dc2:	18ed      	adds	r5, r5, r3
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	9802      	ldr	r0, [sp, #8]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	181b      	adds	r3, r3, r0
 8007dcc:	106d      	asrs	r5, r5, #1
 8007dce:	42ab      	cmp	r3, r5
 8007dd0:	d900      	bls.n	8007dd4 <__ssputs_r+0x40>
 8007dd2:	001d      	movs	r5, r3
 8007dd4:	0552      	lsls	r2, r2, #21
 8007dd6:	d529      	bpl.n	8007e2c <__ssputs_r+0x98>
 8007dd8:	0029      	movs	r1, r5
 8007dda:	0038      	movs	r0, r7
 8007ddc:	f7ff ff48 	bl	8007c70 <_malloc_r>
 8007de0:	1e06      	subs	r6, r0, #0
 8007de2:	d02d      	beq.n	8007e40 <__ssputs_r+0xac>
 8007de4:	9a02      	ldr	r2, [sp, #8]
 8007de6:	6921      	ldr	r1, [r4, #16]
 8007de8:	f000 fae7 	bl	80083ba <memcpy>
 8007dec:	89a2      	ldrh	r2, [r4, #12]
 8007dee:	4b19      	ldr	r3, [pc, #100]	; (8007e54 <__ssputs_r+0xc0>)
 8007df0:	401a      	ands	r2, r3
 8007df2:	2380      	movs	r3, #128	; 0x80
 8007df4:	4313      	orrs	r3, r2
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	9b02      	ldr	r3, [sp, #8]
 8007dfa:	6126      	str	r6, [r4, #16]
 8007dfc:	18f6      	adds	r6, r6, r3
 8007dfe:	6026      	str	r6, [r4, #0]
 8007e00:	6165      	str	r5, [r4, #20]
 8007e02:	9e01      	ldr	r6, [sp, #4]
 8007e04:	1aed      	subs	r5, r5, r3
 8007e06:	60a5      	str	r5, [r4, #8]
 8007e08:	9b01      	ldr	r3, [sp, #4]
 8007e0a:	429e      	cmp	r6, r3
 8007e0c:	d900      	bls.n	8007e10 <__ssputs_r+0x7c>
 8007e0e:	9e01      	ldr	r6, [sp, #4]
 8007e10:	0032      	movs	r2, r6
 8007e12:	9903      	ldr	r1, [sp, #12]
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	f000 fa9f 	bl	8008358 <memmove>
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	68a3      	ldr	r3, [r4, #8]
 8007e1e:	1b9b      	subs	r3, r3, r6
 8007e20:	60a3      	str	r3, [r4, #8]
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	199b      	adds	r3, r3, r6
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	b005      	add	sp, #20
 8007e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e2c:	002a      	movs	r2, r5
 8007e2e:	0038      	movs	r0, r7
 8007e30:	f000 facc 	bl	80083cc <_realloc_r>
 8007e34:	1e06      	subs	r6, r0, #0
 8007e36:	d1df      	bne.n	8007df8 <__ssputs_r+0x64>
 8007e38:	0038      	movs	r0, r7
 8007e3a:	6921      	ldr	r1, [r4, #16]
 8007e3c:	f7ff feac 	bl	8007b98 <_free_r>
 8007e40:	230c      	movs	r3, #12
 8007e42:	2001      	movs	r0, #1
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	89a2      	ldrh	r2, [r4, #12]
 8007e48:	3334      	adds	r3, #52	; 0x34
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	4240      	negs	r0, r0
 8007e50:	e7ea      	b.n	8007e28 <__ssputs_r+0x94>
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	fffffb7f 	.word	0xfffffb7f

08007e58 <_svfiprintf_r>:
 8007e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5a:	b0a1      	sub	sp, #132	; 0x84
 8007e5c:	9003      	str	r0, [sp, #12]
 8007e5e:	001d      	movs	r5, r3
 8007e60:	898b      	ldrh	r3, [r1, #12]
 8007e62:	000f      	movs	r7, r1
 8007e64:	0016      	movs	r6, r2
 8007e66:	061b      	lsls	r3, r3, #24
 8007e68:	d511      	bpl.n	8007e8e <_svfiprintf_r+0x36>
 8007e6a:	690b      	ldr	r3, [r1, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10e      	bne.n	8007e8e <_svfiprintf_r+0x36>
 8007e70:	2140      	movs	r1, #64	; 0x40
 8007e72:	f7ff fefd 	bl	8007c70 <_malloc_r>
 8007e76:	6038      	str	r0, [r7, #0]
 8007e78:	6138      	str	r0, [r7, #16]
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d105      	bne.n	8007e8a <_svfiprintf_r+0x32>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	9a03      	ldr	r2, [sp, #12]
 8007e82:	3801      	subs	r0, #1
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	b021      	add	sp, #132	; 0x84
 8007e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8a:	2340      	movs	r3, #64	; 0x40
 8007e8c:	617b      	str	r3, [r7, #20]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	ac08      	add	r4, sp, #32
 8007e92:	6163      	str	r3, [r4, #20]
 8007e94:	3320      	adds	r3, #32
 8007e96:	7663      	strb	r3, [r4, #25]
 8007e98:	3310      	adds	r3, #16
 8007e9a:	76a3      	strb	r3, [r4, #26]
 8007e9c:	9507      	str	r5, [sp, #28]
 8007e9e:	0035      	movs	r5, r6
 8007ea0:	782b      	ldrb	r3, [r5, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <_svfiprintf_r+0x52>
 8007ea6:	2b25      	cmp	r3, #37	; 0x25
 8007ea8:	d148      	bne.n	8007f3c <_svfiprintf_r+0xe4>
 8007eaa:	1bab      	subs	r3, r5, r6
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	42b5      	cmp	r5, r6
 8007eb0:	d00b      	beq.n	8007eca <_svfiprintf_r+0x72>
 8007eb2:	0032      	movs	r2, r6
 8007eb4:	0039      	movs	r1, r7
 8007eb6:	9803      	ldr	r0, [sp, #12]
 8007eb8:	f7ff ff6c 	bl	8007d94 <__ssputs_r>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d100      	bne.n	8007ec2 <_svfiprintf_r+0x6a>
 8007ec0:	e0af      	b.n	8008022 <_svfiprintf_r+0x1ca>
 8007ec2:	6963      	ldr	r3, [r4, #20]
 8007ec4:	9a05      	ldr	r2, [sp, #20]
 8007ec6:	189b      	adds	r3, r3, r2
 8007ec8:	6163      	str	r3, [r4, #20]
 8007eca:	782b      	ldrb	r3, [r5, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d100      	bne.n	8007ed2 <_svfiprintf_r+0x7a>
 8007ed0:	e0a7      	b.n	8008022 <_svfiprintf_r+0x1ca>
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4252      	negs	r2, r2
 8007ed8:	6062      	str	r2, [r4, #4]
 8007eda:	a904      	add	r1, sp, #16
 8007edc:	3254      	adds	r2, #84	; 0x54
 8007ede:	1852      	adds	r2, r2, r1
 8007ee0:	1c6e      	adds	r6, r5, #1
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	60e3      	str	r3, [r4, #12]
 8007ee6:	60a3      	str	r3, [r4, #8]
 8007ee8:	7013      	strb	r3, [r2, #0]
 8007eea:	65a3      	str	r3, [r4, #88]	; 0x58
 8007eec:	4b55      	ldr	r3, [pc, #340]	; (8008044 <_svfiprintf_r+0x1ec>)
 8007eee:	2205      	movs	r2, #5
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	7831      	ldrb	r1, [r6, #0]
 8007ef4:	9305      	str	r3, [sp, #20]
 8007ef6:	f000 fa55 	bl	80083a4 <memchr>
 8007efa:	1c75      	adds	r5, r6, #1
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d11f      	bne.n	8007f40 <_svfiprintf_r+0xe8>
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	06d3      	lsls	r3, r2, #27
 8007f04:	d504      	bpl.n	8007f10 <_svfiprintf_r+0xb8>
 8007f06:	2353      	movs	r3, #83	; 0x53
 8007f08:	a904      	add	r1, sp, #16
 8007f0a:	185b      	adds	r3, r3, r1
 8007f0c:	2120      	movs	r1, #32
 8007f0e:	7019      	strb	r1, [r3, #0]
 8007f10:	0713      	lsls	r3, r2, #28
 8007f12:	d504      	bpl.n	8007f1e <_svfiprintf_r+0xc6>
 8007f14:	2353      	movs	r3, #83	; 0x53
 8007f16:	a904      	add	r1, sp, #16
 8007f18:	185b      	adds	r3, r3, r1
 8007f1a:	212b      	movs	r1, #43	; 0x2b
 8007f1c:	7019      	strb	r1, [r3, #0]
 8007f1e:	7833      	ldrb	r3, [r6, #0]
 8007f20:	2b2a      	cmp	r3, #42	; 0x2a
 8007f22:	d016      	beq.n	8007f52 <_svfiprintf_r+0xfa>
 8007f24:	0035      	movs	r5, r6
 8007f26:	2100      	movs	r1, #0
 8007f28:	200a      	movs	r0, #10
 8007f2a:	68e3      	ldr	r3, [r4, #12]
 8007f2c:	782a      	ldrb	r2, [r5, #0]
 8007f2e:	1c6e      	adds	r6, r5, #1
 8007f30:	3a30      	subs	r2, #48	; 0x30
 8007f32:	2a09      	cmp	r2, #9
 8007f34:	d94e      	bls.n	8007fd4 <_svfiprintf_r+0x17c>
 8007f36:	2900      	cmp	r1, #0
 8007f38:	d111      	bne.n	8007f5e <_svfiprintf_r+0x106>
 8007f3a:	e017      	b.n	8007f6c <_svfiprintf_r+0x114>
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	e7af      	b.n	8007ea0 <_svfiprintf_r+0x48>
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	6822      	ldr	r2, [r4, #0]
 8007f44:	1ac0      	subs	r0, r0, r3
 8007f46:	2301      	movs	r3, #1
 8007f48:	4083      	lsls	r3, r0
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	002e      	movs	r6, r5
 8007f4e:	6023      	str	r3, [r4, #0]
 8007f50:	e7cc      	b.n	8007eec <_svfiprintf_r+0x94>
 8007f52:	9b07      	ldr	r3, [sp, #28]
 8007f54:	1d19      	adds	r1, r3, #4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	9107      	str	r1, [sp, #28]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	db01      	blt.n	8007f62 <_svfiprintf_r+0x10a>
 8007f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f60:	e004      	b.n	8007f6c <_svfiprintf_r+0x114>
 8007f62:	425b      	negs	r3, r3
 8007f64:	60e3      	str	r3, [r4, #12]
 8007f66:	2302      	movs	r3, #2
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	6023      	str	r3, [r4, #0]
 8007f6c:	782b      	ldrb	r3, [r5, #0]
 8007f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f70:	d10a      	bne.n	8007f88 <_svfiprintf_r+0x130>
 8007f72:	786b      	ldrb	r3, [r5, #1]
 8007f74:	2b2a      	cmp	r3, #42	; 0x2a
 8007f76:	d135      	bne.n	8007fe4 <_svfiprintf_r+0x18c>
 8007f78:	9b07      	ldr	r3, [sp, #28]
 8007f7a:	3502      	adds	r5, #2
 8007f7c:	1d1a      	adds	r2, r3, #4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	9207      	str	r2, [sp, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	db2b      	blt.n	8007fde <_svfiprintf_r+0x186>
 8007f86:	9309      	str	r3, [sp, #36]	; 0x24
 8007f88:	4e2f      	ldr	r6, [pc, #188]	; (8008048 <_svfiprintf_r+0x1f0>)
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	0030      	movs	r0, r6
 8007f8e:	7829      	ldrb	r1, [r5, #0]
 8007f90:	f000 fa08 	bl	80083a4 <memchr>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d006      	beq.n	8007fa6 <_svfiprintf_r+0x14e>
 8007f98:	2340      	movs	r3, #64	; 0x40
 8007f9a:	1b80      	subs	r0, r0, r6
 8007f9c:	4083      	lsls	r3, r0
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	7829      	ldrb	r1, [r5, #0]
 8007fa8:	2206      	movs	r2, #6
 8007faa:	4828      	ldr	r0, [pc, #160]	; (800804c <_svfiprintf_r+0x1f4>)
 8007fac:	1c6e      	adds	r6, r5, #1
 8007fae:	7621      	strb	r1, [r4, #24]
 8007fb0:	f000 f9f8 	bl	80083a4 <memchr>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d03c      	beq.n	8008032 <_svfiprintf_r+0x1da>
 8007fb8:	4b25      	ldr	r3, [pc, #148]	; (8008050 <_svfiprintf_r+0x1f8>)
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d125      	bne.n	800800a <_svfiprintf_r+0x1b2>
 8007fbe:	2207      	movs	r2, #7
 8007fc0:	9b07      	ldr	r3, [sp, #28]
 8007fc2:	3307      	adds	r3, #7
 8007fc4:	4393      	bics	r3, r2
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	9307      	str	r3, [sp, #28]
 8007fca:	6963      	ldr	r3, [r4, #20]
 8007fcc:	9a04      	ldr	r2, [sp, #16]
 8007fce:	189b      	adds	r3, r3, r2
 8007fd0:	6163      	str	r3, [r4, #20]
 8007fd2:	e764      	b.n	8007e9e <_svfiprintf_r+0x46>
 8007fd4:	4343      	muls	r3, r0
 8007fd6:	0035      	movs	r5, r6
 8007fd8:	2101      	movs	r1, #1
 8007fda:	189b      	adds	r3, r3, r2
 8007fdc:	e7a6      	b.n	8007f2c <_svfiprintf_r+0xd4>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	425b      	negs	r3, r3
 8007fe2:	e7d0      	b.n	8007f86 <_svfiprintf_r+0x12e>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	200a      	movs	r0, #10
 8007fe8:	001a      	movs	r2, r3
 8007fea:	3501      	adds	r5, #1
 8007fec:	6063      	str	r3, [r4, #4]
 8007fee:	7829      	ldrb	r1, [r5, #0]
 8007ff0:	1c6e      	adds	r6, r5, #1
 8007ff2:	3930      	subs	r1, #48	; 0x30
 8007ff4:	2909      	cmp	r1, #9
 8007ff6:	d903      	bls.n	8008000 <_svfiprintf_r+0x1a8>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0c5      	beq.n	8007f88 <_svfiprintf_r+0x130>
 8007ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8007ffe:	e7c3      	b.n	8007f88 <_svfiprintf_r+0x130>
 8008000:	4342      	muls	r2, r0
 8008002:	0035      	movs	r5, r6
 8008004:	2301      	movs	r3, #1
 8008006:	1852      	adds	r2, r2, r1
 8008008:	e7f1      	b.n	8007fee <_svfiprintf_r+0x196>
 800800a:	aa07      	add	r2, sp, #28
 800800c:	9200      	str	r2, [sp, #0]
 800800e:	0021      	movs	r1, r4
 8008010:	003a      	movs	r2, r7
 8008012:	4b10      	ldr	r3, [pc, #64]	; (8008054 <_svfiprintf_r+0x1fc>)
 8008014:	9803      	ldr	r0, [sp, #12]
 8008016:	e000      	b.n	800801a <_svfiprintf_r+0x1c2>
 8008018:	bf00      	nop
 800801a:	9004      	str	r0, [sp, #16]
 800801c:	9b04      	ldr	r3, [sp, #16]
 800801e:	3301      	adds	r3, #1
 8008020:	d1d3      	bne.n	8007fca <_svfiprintf_r+0x172>
 8008022:	89bb      	ldrh	r3, [r7, #12]
 8008024:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008026:	065b      	lsls	r3, r3, #25
 8008028:	d400      	bmi.n	800802c <_svfiprintf_r+0x1d4>
 800802a:	e72c      	b.n	8007e86 <_svfiprintf_r+0x2e>
 800802c:	2001      	movs	r0, #1
 800802e:	4240      	negs	r0, r0
 8008030:	e729      	b.n	8007e86 <_svfiprintf_r+0x2e>
 8008032:	aa07      	add	r2, sp, #28
 8008034:	9200      	str	r2, [sp, #0]
 8008036:	0021      	movs	r1, r4
 8008038:	003a      	movs	r2, r7
 800803a:	4b06      	ldr	r3, [pc, #24]	; (8008054 <_svfiprintf_r+0x1fc>)
 800803c:	9803      	ldr	r0, [sp, #12]
 800803e:	f000 f87b 	bl	8008138 <_printf_i>
 8008042:	e7ea      	b.n	800801a <_svfiprintf_r+0x1c2>
 8008044:	0800866c 	.word	0x0800866c
 8008048:	08008672 	.word	0x08008672
 800804c:	08008676 	.word	0x08008676
 8008050:	00000000 	.word	0x00000000
 8008054:	08007d95 	.word	0x08007d95

08008058 <_printf_common>:
 8008058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800805a:	0016      	movs	r6, r2
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	688a      	ldr	r2, [r1, #8]
 8008060:	690b      	ldr	r3, [r1, #16]
 8008062:	000c      	movs	r4, r1
 8008064:	9000      	str	r0, [sp, #0]
 8008066:	4293      	cmp	r3, r2
 8008068:	da00      	bge.n	800806c <_printf_common+0x14>
 800806a:	0013      	movs	r3, r2
 800806c:	0022      	movs	r2, r4
 800806e:	6033      	str	r3, [r6, #0]
 8008070:	3243      	adds	r2, #67	; 0x43
 8008072:	7812      	ldrb	r2, [r2, #0]
 8008074:	2a00      	cmp	r2, #0
 8008076:	d001      	beq.n	800807c <_printf_common+0x24>
 8008078:	3301      	adds	r3, #1
 800807a:	6033      	str	r3, [r6, #0]
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	069b      	lsls	r3, r3, #26
 8008080:	d502      	bpl.n	8008088 <_printf_common+0x30>
 8008082:	6833      	ldr	r3, [r6, #0]
 8008084:	3302      	adds	r3, #2
 8008086:	6033      	str	r3, [r6, #0]
 8008088:	6822      	ldr	r2, [r4, #0]
 800808a:	2306      	movs	r3, #6
 800808c:	0015      	movs	r5, r2
 800808e:	401d      	ands	r5, r3
 8008090:	421a      	tst	r2, r3
 8008092:	d027      	beq.n	80080e4 <_printf_common+0x8c>
 8008094:	0023      	movs	r3, r4
 8008096:	3343      	adds	r3, #67	; 0x43
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	1e5a      	subs	r2, r3, #1
 800809c:	4193      	sbcs	r3, r2
 800809e:	6822      	ldr	r2, [r4, #0]
 80080a0:	0692      	lsls	r2, r2, #26
 80080a2:	d430      	bmi.n	8008106 <_printf_common+0xae>
 80080a4:	0022      	movs	r2, r4
 80080a6:	9901      	ldr	r1, [sp, #4]
 80080a8:	9800      	ldr	r0, [sp, #0]
 80080aa:	9d08      	ldr	r5, [sp, #32]
 80080ac:	3243      	adds	r2, #67	; 0x43
 80080ae:	47a8      	blx	r5
 80080b0:	3001      	adds	r0, #1
 80080b2:	d025      	beq.n	8008100 <_printf_common+0xa8>
 80080b4:	2206      	movs	r2, #6
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	2500      	movs	r5, #0
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b04      	cmp	r3, #4
 80080be:	d105      	bne.n	80080cc <_printf_common+0x74>
 80080c0:	6833      	ldr	r3, [r6, #0]
 80080c2:	68e5      	ldr	r5, [r4, #12]
 80080c4:	1aed      	subs	r5, r5, r3
 80080c6:	43eb      	mvns	r3, r5
 80080c8:	17db      	asrs	r3, r3, #31
 80080ca:	401d      	ands	r5, r3
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	6922      	ldr	r2, [r4, #16]
 80080d0:	4293      	cmp	r3, r2
 80080d2:	dd01      	ble.n	80080d8 <_printf_common+0x80>
 80080d4:	1a9b      	subs	r3, r3, r2
 80080d6:	18ed      	adds	r5, r5, r3
 80080d8:	2600      	movs	r6, #0
 80080da:	42b5      	cmp	r5, r6
 80080dc:	d120      	bne.n	8008120 <_printf_common+0xc8>
 80080de:	2000      	movs	r0, #0
 80080e0:	e010      	b.n	8008104 <_printf_common+0xac>
 80080e2:	3501      	adds	r5, #1
 80080e4:	68e3      	ldr	r3, [r4, #12]
 80080e6:	6832      	ldr	r2, [r6, #0]
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	42ab      	cmp	r3, r5
 80080ec:	ddd2      	ble.n	8008094 <_printf_common+0x3c>
 80080ee:	0022      	movs	r2, r4
 80080f0:	2301      	movs	r3, #1
 80080f2:	9901      	ldr	r1, [sp, #4]
 80080f4:	9800      	ldr	r0, [sp, #0]
 80080f6:	9f08      	ldr	r7, [sp, #32]
 80080f8:	3219      	adds	r2, #25
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	d1f0      	bne.n	80080e2 <_printf_common+0x8a>
 8008100:	2001      	movs	r0, #1
 8008102:	4240      	negs	r0, r0
 8008104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008106:	2030      	movs	r0, #48	; 0x30
 8008108:	18e1      	adds	r1, r4, r3
 800810a:	3143      	adds	r1, #67	; 0x43
 800810c:	7008      	strb	r0, [r1, #0]
 800810e:	0021      	movs	r1, r4
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	3145      	adds	r1, #69	; 0x45
 8008114:	7809      	ldrb	r1, [r1, #0]
 8008116:	18a2      	adds	r2, r4, r2
 8008118:	3243      	adds	r2, #67	; 0x43
 800811a:	3302      	adds	r3, #2
 800811c:	7011      	strb	r1, [r2, #0]
 800811e:	e7c1      	b.n	80080a4 <_printf_common+0x4c>
 8008120:	0022      	movs	r2, r4
 8008122:	2301      	movs	r3, #1
 8008124:	9901      	ldr	r1, [sp, #4]
 8008126:	9800      	ldr	r0, [sp, #0]
 8008128:	9f08      	ldr	r7, [sp, #32]
 800812a:	321a      	adds	r2, #26
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	d0e6      	beq.n	8008100 <_printf_common+0xa8>
 8008132:	3601      	adds	r6, #1
 8008134:	e7d1      	b.n	80080da <_printf_common+0x82>
	...

08008138 <_printf_i>:
 8008138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800813a:	b08b      	sub	sp, #44	; 0x2c
 800813c:	9206      	str	r2, [sp, #24]
 800813e:	000a      	movs	r2, r1
 8008140:	3243      	adds	r2, #67	; 0x43
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	9005      	str	r0, [sp, #20]
 8008146:	9204      	str	r2, [sp, #16]
 8008148:	7e0a      	ldrb	r2, [r1, #24]
 800814a:	000c      	movs	r4, r1
 800814c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800814e:	2a78      	cmp	r2, #120	; 0x78
 8008150:	d809      	bhi.n	8008166 <_printf_i+0x2e>
 8008152:	2a62      	cmp	r2, #98	; 0x62
 8008154:	d80b      	bhi.n	800816e <_printf_i+0x36>
 8008156:	2a00      	cmp	r2, #0
 8008158:	d100      	bne.n	800815c <_printf_i+0x24>
 800815a:	e0be      	b.n	80082da <_printf_i+0x1a2>
 800815c:	497c      	ldr	r1, [pc, #496]	; (8008350 <_printf_i+0x218>)
 800815e:	9103      	str	r1, [sp, #12]
 8008160:	2a58      	cmp	r2, #88	; 0x58
 8008162:	d100      	bne.n	8008166 <_printf_i+0x2e>
 8008164:	e093      	b.n	800828e <_printf_i+0x156>
 8008166:	0026      	movs	r6, r4
 8008168:	3642      	adds	r6, #66	; 0x42
 800816a:	7032      	strb	r2, [r6, #0]
 800816c:	e022      	b.n	80081b4 <_printf_i+0x7c>
 800816e:	0010      	movs	r0, r2
 8008170:	3863      	subs	r0, #99	; 0x63
 8008172:	2815      	cmp	r0, #21
 8008174:	d8f7      	bhi.n	8008166 <_printf_i+0x2e>
 8008176:	f7f7 ffcd 	bl	8000114 <__gnu_thumb1_case_shi>
 800817a:	0016      	.short	0x0016
 800817c:	fff6001f 	.word	0xfff6001f
 8008180:	fff6fff6 	.word	0xfff6fff6
 8008184:	001ffff6 	.word	0x001ffff6
 8008188:	fff6fff6 	.word	0xfff6fff6
 800818c:	fff6fff6 	.word	0xfff6fff6
 8008190:	003600a3 	.word	0x003600a3
 8008194:	fff60083 	.word	0xfff60083
 8008198:	00b4fff6 	.word	0x00b4fff6
 800819c:	0036fff6 	.word	0x0036fff6
 80081a0:	fff6fff6 	.word	0xfff6fff6
 80081a4:	0087      	.short	0x0087
 80081a6:	0026      	movs	r6, r4
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	3642      	adds	r6, #66	; 0x42
 80081ac:	1d11      	adds	r1, r2, #4
 80081ae:	6019      	str	r1, [r3, #0]
 80081b0:	6813      	ldr	r3, [r2, #0]
 80081b2:	7033      	strb	r3, [r6, #0]
 80081b4:	2301      	movs	r3, #1
 80081b6:	e0a2      	b.n	80082fe <_printf_i+0x1c6>
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	6809      	ldr	r1, [r1, #0]
 80081bc:	1d02      	adds	r2, r0, #4
 80081be:	060d      	lsls	r5, r1, #24
 80081c0:	d50b      	bpl.n	80081da <_printf_i+0xa2>
 80081c2:	6805      	ldr	r5, [r0, #0]
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	da03      	bge.n	80081d2 <_printf_i+0x9a>
 80081ca:	232d      	movs	r3, #45	; 0x2d
 80081cc:	9a04      	ldr	r2, [sp, #16]
 80081ce:	426d      	negs	r5, r5
 80081d0:	7013      	strb	r3, [r2, #0]
 80081d2:	4b5f      	ldr	r3, [pc, #380]	; (8008350 <_printf_i+0x218>)
 80081d4:	270a      	movs	r7, #10
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	e01b      	b.n	8008212 <_printf_i+0xda>
 80081da:	6805      	ldr	r5, [r0, #0]
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	0649      	lsls	r1, r1, #25
 80081e0:	d5f1      	bpl.n	80081c6 <_printf_i+0x8e>
 80081e2:	b22d      	sxth	r5, r5
 80081e4:	e7ef      	b.n	80081c6 <_printf_i+0x8e>
 80081e6:	680d      	ldr	r5, [r1, #0]
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	1d08      	adds	r0, r1, #4
 80081ec:	6018      	str	r0, [r3, #0]
 80081ee:	062e      	lsls	r6, r5, #24
 80081f0:	d501      	bpl.n	80081f6 <_printf_i+0xbe>
 80081f2:	680d      	ldr	r5, [r1, #0]
 80081f4:	e003      	b.n	80081fe <_printf_i+0xc6>
 80081f6:	066d      	lsls	r5, r5, #25
 80081f8:	d5fb      	bpl.n	80081f2 <_printf_i+0xba>
 80081fa:	680d      	ldr	r5, [r1, #0]
 80081fc:	b2ad      	uxth	r5, r5
 80081fe:	4b54      	ldr	r3, [pc, #336]	; (8008350 <_printf_i+0x218>)
 8008200:	2708      	movs	r7, #8
 8008202:	9303      	str	r3, [sp, #12]
 8008204:	2a6f      	cmp	r2, #111	; 0x6f
 8008206:	d000      	beq.n	800820a <_printf_i+0xd2>
 8008208:	3702      	adds	r7, #2
 800820a:	0023      	movs	r3, r4
 800820c:	2200      	movs	r2, #0
 800820e:	3343      	adds	r3, #67	; 0x43
 8008210:	701a      	strb	r2, [r3, #0]
 8008212:	6863      	ldr	r3, [r4, #4]
 8008214:	60a3      	str	r3, [r4, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	db03      	blt.n	8008222 <_printf_i+0xea>
 800821a:	2104      	movs	r1, #4
 800821c:	6822      	ldr	r2, [r4, #0]
 800821e:	438a      	bics	r2, r1
 8008220:	6022      	str	r2, [r4, #0]
 8008222:	2d00      	cmp	r5, #0
 8008224:	d102      	bne.n	800822c <_printf_i+0xf4>
 8008226:	9e04      	ldr	r6, [sp, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00c      	beq.n	8008246 <_printf_i+0x10e>
 800822c:	9e04      	ldr	r6, [sp, #16]
 800822e:	0028      	movs	r0, r5
 8008230:	0039      	movs	r1, r7
 8008232:	f7f7 ffff 	bl	8000234 <__aeabi_uidivmod>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	3e01      	subs	r6, #1
 800823a:	5c5b      	ldrb	r3, [r3, r1]
 800823c:	7033      	strb	r3, [r6, #0]
 800823e:	002b      	movs	r3, r5
 8008240:	0005      	movs	r5, r0
 8008242:	429f      	cmp	r7, r3
 8008244:	d9f3      	bls.n	800822e <_printf_i+0xf6>
 8008246:	2f08      	cmp	r7, #8
 8008248:	d109      	bne.n	800825e <_printf_i+0x126>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	07db      	lsls	r3, r3, #31
 800824e:	d506      	bpl.n	800825e <_printf_i+0x126>
 8008250:	6862      	ldr	r2, [r4, #4]
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	429a      	cmp	r2, r3
 8008256:	dc02      	bgt.n	800825e <_printf_i+0x126>
 8008258:	2330      	movs	r3, #48	; 0x30
 800825a:	3e01      	subs	r6, #1
 800825c:	7033      	strb	r3, [r6, #0]
 800825e:	9b04      	ldr	r3, [sp, #16]
 8008260:	1b9b      	subs	r3, r3, r6
 8008262:	6123      	str	r3, [r4, #16]
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	0021      	movs	r1, r4
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	9805      	ldr	r0, [sp, #20]
 800826c:	9b06      	ldr	r3, [sp, #24]
 800826e:	aa09      	add	r2, sp, #36	; 0x24
 8008270:	f7ff fef2 	bl	8008058 <_printf_common>
 8008274:	3001      	adds	r0, #1
 8008276:	d147      	bne.n	8008308 <_printf_i+0x1d0>
 8008278:	2001      	movs	r0, #1
 800827a:	4240      	negs	r0, r0
 800827c:	b00b      	add	sp, #44	; 0x2c
 800827e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008280:	2220      	movs	r2, #32
 8008282:	6809      	ldr	r1, [r1, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	6022      	str	r2, [r4, #0]
 8008288:	2278      	movs	r2, #120	; 0x78
 800828a:	4932      	ldr	r1, [pc, #200]	; (8008354 <_printf_i+0x21c>)
 800828c:	9103      	str	r1, [sp, #12]
 800828e:	0021      	movs	r1, r4
 8008290:	3145      	adds	r1, #69	; 0x45
 8008292:	700a      	strb	r2, [r1, #0]
 8008294:	6819      	ldr	r1, [r3, #0]
 8008296:	6822      	ldr	r2, [r4, #0]
 8008298:	c920      	ldmia	r1!, {r5}
 800829a:	0610      	lsls	r0, r2, #24
 800829c:	d402      	bmi.n	80082a4 <_printf_i+0x16c>
 800829e:	0650      	lsls	r0, r2, #25
 80082a0:	d500      	bpl.n	80082a4 <_printf_i+0x16c>
 80082a2:	b2ad      	uxth	r5, r5
 80082a4:	6019      	str	r1, [r3, #0]
 80082a6:	07d3      	lsls	r3, r2, #31
 80082a8:	d502      	bpl.n	80082b0 <_printf_i+0x178>
 80082aa:	2320      	movs	r3, #32
 80082ac:	4313      	orrs	r3, r2
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	2710      	movs	r7, #16
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	d1a9      	bne.n	800820a <_printf_i+0xd2>
 80082b6:	2220      	movs	r2, #32
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	4393      	bics	r3, r2
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	e7a4      	b.n	800820a <_printf_i+0xd2>
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	680d      	ldr	r5, [r1, #0]
 80082c4:	1d10      	adds	r0, r2, #4
 80082c6:	6949      	ldr	r1, [r1, #20]
 80082c8:	6018      	str	r0, [r3, #0]
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	062e      	lsls	r6, r5, #24
 80082ce:	d501      	bpl.n	80082d4 <_printf_i+0x19c>
 80082d0:	6019      	str	r1, [r3, #0]
 80082d2:	e002      	b.n	80082da <_printf_i+0x1a2>
 80082d4:	066d      	lsls	r5, r5, #25
 80082d6:	d5fb      	bpl.n	80082d0 <_printf_i+0x198>
 80082d8:	8019      	strh	r1, [r3, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	9e04      	ldr	r6, [sp, #16]
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	e7c0      	b.n	8008264 <_printf_i+0x12c>
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	1d11      	adds	r1, r2, #4
 80082e6:	6019      	str	r1, [r3, #0]
 80082e8:	6816      	ldr	r6, [r2, #0]
 80082ea:	2100      	movs	r1, #0
 80082ec:	0030      	movs	r0, r6
 80082ee:	6862      	ldr	r2, [r4, #4]
 80082f0:	f000 f858 	bl	80083a4 <memchr>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d001      	beq.n	80082fc <_printf_i+0x1c4>
 80082f8:	1b80      	subs	r0, r0, r6
 80082fa:	6060      	str	r0, [r4, #4]
 80082fc:	6863      	ldr	r3, [r4, #4]
 80082fe:	6123      	str	r3, [r4, #16]
 8008300:	2300      	movs	r3, #0
 8008302:	9a04      	ldr	r2, [sp, #16]
 8008304:	7013      	strb	r3, [r2, #0]
 8008306:	e7ad      	b.n	8008264 <_printf_i+0x12c>
 8008308:	0032      	movs	r2, r6
 800830a:	6923      	ldr	r3, [r4, #16]
 800830c:	9906      	ldr	r1, [sp, #24]
 800830e:	9805      	ldr	r0, [sp, #20]
 8008310:	9d07      	ldr	r5, [sp, #28]
 8008312:	47a8      	blx	r5
 8008314:	3001      	adds	r0, #1
 8008316:	d0af      	beq.n	8008278 <_printf_i+0x140>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	079b      	lsls	r3, r3, #30
 800831c:	d415      	bmi.n	800834a <_printf_i+0x212>
 800831e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008320:	68e0      	ldr	r0, [r4, #12]
 8008322:	4298      	cmp	r0, r3
 8008324:	daaa      	bge.n	800827c <_printf_i+0x144>
 8008326:	0018      	movs	r0, r3
 8008328:	e7a8      	b.n	800827c <_printf_i+0x144>
 800832a:	0022      	movs	r2, r4
 800832c:	2301      	movs	r3, #1
 800832e:	9906      	ldr	r1, [sp, #24]
 8008330:	9805      	ldr	r0, [sp, #20]
 8008332:	9e07      	ldr	r6, [sp, #28]
 8008334:	3219      	adds	r2, #25
 8008336:	47b0      	blx	r6
 8008338:	3001      	adds	r0, #1
 800833a:	d09d      	beq.n	8008278 <_printf_i+0x140>
 800833c:	3501      	adds	r5, #1
 800833e:	68e3      	ldr	r3, [r4, #12]
 8008340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008342:	1a9b      	subs	r3, r3, r2
 8008344:	42ab      	cmp	r3, r5
 8008346:	dcf0      	bgt.n	800832a <_printf_i+0x1f2>
 8008348:	e7e9      	b.n	800831e <_printf_i+0x1e6>
 800834a:	2500      	movs	r5, #0
 800834c:	e7f7      	b.n	800833e <_printf_i+0x206>
 800834e:	46c0      	nop			; (mov r8, r8)
 8008350:	0800867d 	.word	0x0800867d
 8008354:	0800868e 	.word	0x0800868e

08008358 <memmove>:
 8008358:	b510      	push	{r4, lr}
 800835a:	4288      	cmp	r0, r1
 800835c:	d902      	bls.n	8008364 <memmove+0xc>
 800835e:	188b      	adds	r3, r1, r2
 8008360:	4298      	cmp	r0, r3
 8008362:	d303      	bcc.n	800836c <memmove+0x14>
 8008364:	2300      	movs	r3, #0
 8008366:	e007      	b.n	8008378 <memmove+0x20>
 8008368:	5c8b      	ldrb	r3, [r1, r2]
 800836a:	5483      	strb	r3, [r0, r2]
 800836c:	3a01      	subs	r2, #1
 800836e:	d2fb      	bcs.n	8008368 <memmove+0x10>
 8008370:	bd10      	pop	{r4, pc}
 8008372:	5ccc      	ldrb	r4, [r1, r3]
 8008374:	54c4      	strb	r4, [r0, r3]
 8008376:	3301      	adds	r3, #1
 8008378:	429a      	cmp	r2, r3
 800837a:	d1fa      	bne.n	8008372 <memmove+0x1a>
 800837c:	e7f8      	b.n	8008370 <memmove+0x18>
	...

08008380 <_sbrk_r>:
 8008380:	2300      	movs	r3, #0
 8008382:	b570      	push	{r4, r5, r6, lr}
 8008384:	4d06      	ldr	r5, [pc, #24]	; (80083a0 <_sbrk_r+0x20>)
 8008386:	0004      	movs	r4, r0
 8008388:	0008      	movs	r0, r1
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	f7f9 f83e 	bl	800140c <_sbrk>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d103      	bne.n	800839c <_sbrk_r+0x1c>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d000      	beq.n	800839c <_sbrk_r+0x1c>
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	bd70      	pop	{r4, r5, r6, pc}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	20000438 	.word	0x20000438

080083a4 <memchr>:
 80083a4:	b2c9      	uxtb	r1, r1
 80083a6:	1882      	adds	r2, r0, r2
 80083a8:	4290      	cmp	r0, r2
 80083aa:	d101      	bne.n	80083b0 <memchr+0xc>
 80083ac:	2000      	movs	r0, #0
 80083ae:	4770      	bx	lr
 80083b0:	7803      	ldrb	r3, [r0, #0]
 80083b2:	428b      	cmp	r3, r1
 80083b4:	d0fb      	beq.n	80083ae <memchr+0xa>
 80083b6:	3001      	adds	r0, #1
 80083b8:	e7f6      	b.n	80083a8 <memchr+0x4>

080083ba <memcpy>:
 80083ba:	2300      	movs	r3, #0
 80083bc:	b510      	push	{r4, lr}
 80083be:	429a      	cmp	r2, r3
 80083c0:	d100      	bne.n	80083c4 <memcpy+0xa>
 80083c2:	bd10      	pop	{r4, pc}
 80083c4:	5ccc      	ldrb	r4, [r1, r3]
 80083c6:	54c4      	strb	r4, [r0, r3]
 80083c8:	3301      	adds	r3, #1
 80083ca:	e7f8      	b.n	80083be <memcpy+0x4>

080083cc <_realloc_r>:
 80083cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083ce:	0007      	movs	r7, r0
 80083d0:	000e      	movs	r6, r1
 80083d2:	0014      	movs	r4, r2
 80083d4:	2900      	cmp	r1, #0
 80083d6:	d105      	bne.n	80083e4 <_realloc_r+0x18>
 80083d8:	0011      	movs	r1, r2
 80083da:	f7ff fc49 	bl	8007c70 <_malloc_r>
 80083de:	0005      	movs	r5, r0
 80083e0:	0028      	movs	r0, r5
 80083e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083e4:	2a00      	cmp	r2, #0
 80083e6:	d103      	bne.n	80083f0 <_realloc_r+0x24>
 80083e8:	f7ff fbd6 	bl	8007b98 <_free_r>
 80083ec:	0025      	movs	r5, r4
 80083ee:	e7f7      	b.n	80083e0 <_realloc_r+0x14>
 80083f0:	f000 f81b 	bl	800842a <_malloc_usable_size_r>
 80083f4:	9001      	str	r0, [sp, #4]
 80083f6:	4284      	cmp	r4, r0
 80083f8:	d803      	bhi.n	8008402 <_realloc_r+0x36>
 80083fa:	0035      	movs	r5, r6
 80083fc:	0843      	lsrs	r3, r0, #1
 80083fe:	42a3      	cmp	r3, r4
 8008400:	d3ee      	bcc.n	80083e0 <_realloc_r+0x14>
 8008402:	0021      	movs	r1, r4
 8008404:	0038      	movs	r0, r7
 8008406:	f7ff fc33 	bl	8007c70 <_malloc_r>
 800840a:	1e05      	subs	r5, r0, #0
 800840c:	d0e8      	beq.n	80083e0 <_realloc_r+0x14>
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	0022      	movs	r2, r4
 8008412:	429c      	cmp	r4, r3
 8008414:	d900      	bls.n	8008418 <_realloc_r+0x4c>
 8008416:	001a      	movs	r2, r3
 8008418:	0031      	movs	r1, r6
 800841a:	0028      	movs	r0, r5
 800841c:	f7ff ffcd 	bl	80083ba <memcpy>
 8008420:	0031      	movs	r1, r6
 8008422:	0038      	movs	r0, r7
 8008424:	f7ff fbb8 	bl	8007b98 <_free_r>
 8008428:	e7da      	b.n	80083e0 <_realloc_r+0x14>

0800842a <_malloc_usable_size_r>:
 800842a:	1f0b      	subs	r3, r1, #4
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	1f18      	subs	r0, r3, #4
 8008430:	2b00      	cmp	r3, #0
 8008432:	da01      	bge.n	8008438 <_malloc_usable_size_r+0xe>
 8008434:	580b      	ldr	r3, [r1, r0]
 8008436:	18c0      	adds	r0, r0, r3
 8008438:	4770      	bx	lr
	...

0800843c <_init>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	46c0      	nop			; (mov r8, r8)
 8008440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008442:	bc08      	pop	{r3}
 8008444:	469e      	mov	lr, r3
 8008446:	4770      	bx	lr

08008448 <_fini>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844e:	bc08      	pop	{r3}
 8008450:	469e      	mov	lr, r3
 8008452:	4770      	bx	lr
