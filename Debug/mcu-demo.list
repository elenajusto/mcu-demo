
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d94  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb0  08005fb0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb8  08005fb8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000005c  0800601c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  0800601c  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016096  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd6  00000000  00000000  0003615d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  00038d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fad  00000000  00000000  0003a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af4d  00000000  00000000  0003b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c88  00000000  00000000  0005602a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aeaaa  00000000  00000000  0006ecb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e38  00000000  00000000  0011d75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00122594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005e38 	.word	0x08005e38

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08005e38 	.word	0x08005e38

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fd34 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f81a 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f9a8 	bl	80009a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f958 	bl	8000904 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000654:	f000 f85c 	bl	8000710 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000658:	f000 f8c0 	bl	80007dc <MX_I2C1_Init>
  MX_TIM2_Init();
 800065c:	f000 f8fe 	bl	800085c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <main+0x3c>)
 8000662:	0018      	movs	r0, r3
 8000664:	f001 f956 	bl	8001914 <HAL_ADC_Start_IT>

  // Scan I2C addresses on startup
  i2cScanner();
 8000668:	f000 facc 	bl	8000c04 <i2cScanner>

  // I2C Display
  hardwareTestLCD();
 800066c:	f000 faaa 	bl	8000bc4 <hardwareTestLCD>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hardwareTestLED();
 8000670:	f000 fa38 	bl	8000ae4 <hardwareTestLED>
	  hardwareTestPot();
 8000674:	f000 fa78 	bl	8000b68 <hardwareTestPot>
	  hardwareTestLED();
 8000678:	e7fa      	b.n	8000670 <main+0x30>
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000078 	.word	0x20000078

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b093      	sub	sp, #76	; 0x4c
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	2410      	movs	r4, #16
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	2338      	movs	r3, #56	; 0x38
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f004 ff4b 	bl	800552c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000696:	003b      	movs	r3, r7
 8000698:	0018      	movs	r0, r3
 800069a:	2310      	movs	r3, #16
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f004 ff44 	bl	800552c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 fbed 	bl	8002e88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2202      	movs	r2, #2
 80006b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	0052      	lsls	r2, r2, #1
 80006ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2240      	movs	r2, #64	; 0x40
 80006c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	0018      	movs	r0, r3
 80006d2:	f002 fc25 	bl	8002f20 <HAL_RCC_OscConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006da:	f000 fb1b 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	003b      	movs	r3, r7
 80006e0:	2207      	movs	r2, #7
 80006e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	003b      	movs	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	003b      	movs	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	003b      	movs	r3, r7
 80006f8:	2100      	movs	r1, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f002 ff2a 	bl	8003554 <HAL_RCC_ClockConfig>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000704:	f000 fb06 	bl	8000d14 <Error_Handler>
  }
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b013      	add	sp, #76	; 0x4c
 800070e:	bd90      	pop	{r4, r7, pc}

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	0018      	movs	r0, r3
 800071a:	230c      	movs	r3, #12
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f004 ff04 	bl	800552c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000726:	4a2c      	ldr	r2, [pc, #176]	; (80007d8 <MX_ADC1_Init+0xc8>)
 8000728:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	05d2      	lsls	r2, r2, #23
 8000730:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000746:	2204      	movs	r2, #4
 8000748:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800074c:	2200      	movs	r2, #0
 800074e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000752:	2200      	movs	r2, #0
 8000754:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000758:	2201      	movs	r2, #1
 800075a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800075e:	2201      	movs	r2, #1
 8000760:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000770:	222c      	movs	r2, #44	; 0x2c
 8000772:	2100      	movs	r1, #0
 8000774:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800077e:	2200      	movs	r2, #0
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_ADC1_Init+0xc4>)
 800078a:	223c      	movs	r2, #60	; 0x3c
 800078c:	2100      	movs	r1, #0
 800078e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000792:	2200      	movs	r2, #0
 8000794:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_ADC1_Init+0xc4>)
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fe7f 	bl	800149c <HAL_ADC_Init>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007a2:	f000 fab7 	bl	8000d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2201      	movs	r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	1d3a      	adds	r2, r7, #4
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_ADC1_Init+0xc4>)
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 f92c 	bl	8001a1c <HAL_ADC_ConfigChannel>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80007c8:	f000 faa4 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b004      	add	sp, #16
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000078 	.word	0x20000078
 80007d8:	40012400 	.word	0x40012400

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x74>)
 8000818:	0018      	movs	r0, r3
 800081a:	f001 fd93 	bl	8002344 <HAL_I2C_Init>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 fa77 	bl	8000d14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x74>)
 8000828:	2100      	movs	r1, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f002 fa94 	bl	8002d58 <HAL_I2CEx_ConfigAnalogFilter>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 fa6e 	bl	8000d14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <MX_I2C1_Init+0x74>)
 800083a:	2100      	movs	r1, #0
 800083c:	0018      	movs	r0, r3
 800083e:	f002 fad7 	bl	8002df0 <HAL_I2CEx_ConfigDigitalFilter>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 fa65 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000dc 	.word	0x200000dc
 8000854:	40005400 	.word	0x40005400
 8000858:	00303d5b 	.word	0x00303d5b

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	2310      	movs	r3, #16
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	2310      	movs	r3, #16
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f004 fe5d 	bl	800552c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	0018      	movs	r0, r3
 8000876:	230c      	movs	r3, #12
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f004 fe56 	bl	800552c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_TIM2_Init+0xa4>)
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	05d2      	lsls	r2, r2, #23
 8000886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_TIM2_Init+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_TIM2_Init+0xa4>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_TIM2_Init+0xa4>)
 8000896:	2201      	movs	r2, #1
 8000898:	4252      	negs	r2, r2
 800089a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_TIM2_Init+0xa4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f003 f9b4 	bl	8003c18 <HAL_TIM_Base_Init>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 fa2e 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	2110      	movs	r1, #16
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0152      	lsls	r2, r2, #5
 80008c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c2:	187a      	adds	r2, r7, r1
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f003 f9fd 	bl	8003cc8 <HAL_TIM_ConfigClockSource>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008d2:	f000 fa1f 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e2:	1d3a      	adds	r2, r7, #4
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f003 fbed 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008f2:	f000 fa0f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b008      	add	sp, #32
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	20000130 	.word	0x20000130

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800090a:	4a24      	ldr	r2, [pc, #144]	; (800099c <MX_USART2_UART_Init+0x98>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000910:	22e1      	movs	r2, #225	; 0xe1
 8000912:	0252      	lsls	r2, r2, #9
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800094e:	0018      	movs	r0, r3
 8000950:	f003 fc28 	bl	80041a4 <HAL_UART_Init>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f9dc 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x94>)
 800095e:	2100      	movs	r1, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f004 fa45 	bl	8004df0 <HAL_UARTEx_SetTxFifoThreshold>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800096a:	f000 f9d3 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000970:	2100      	movs	r1, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f004 fa7c 	bl	8004e70 <HAL_UARTEx_SetRxFifoThreshold>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800097c:	f000 f9ca 	bl	8000d14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x94>)
 8000982:	0018      	movs	r0, r3
 8000984:	f004 f9fa 	bl	8004d7c <HAL_UARTEx_DisableFifoMode>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800098c:	f000 f9c2 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	2000017c 	.word	0x2000017c
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b08b      	sub	sp, #44	; 0x2c
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	2414      	movs	r4, #20
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2314      	movs	r3, #20
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f004 fdbb 	bl	800552c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ba:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009bc:	2104      	movs	r1, #4
 80009be:	430a      	orrs	r2, r1
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
 80009c2:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c6:	2204      	movs	r2, #4
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ce:	4b41      	ldr	r3, [pc, #260]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009d4:	2120      	movs	r1, #32
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
 80009da:	4b3e      	ldr	r3, [pc, #248]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009de:	2220      	movs	r2, #32
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b3b      	ldr	r3, [pc, #236]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ea:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
 80009f2:	4b38      	ldr	r3, [pc, #224]	; (8000ad4 <MX_GPIO_Init+0x134>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <MX_GPIO_Init+0x134>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a02:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_GPIO_Init+0x134>)
 8000a04:	2102      	movs	r1, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0a:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <MX_GPIO_Init+0x134>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fc72 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000a24:	492c      	ldr	r1, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0x138>)
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fc6c 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <MX_GPIO_Init+0x140>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 fc66 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2220      	movs	r2, #32
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2201      	movs	r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2202      	movs	r2, #2
 8000a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a54:	193a      	adds	r2, r7, r4
 8000a56:	23a0      	movs	r3, #160	; 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f001 faef 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0x138>)
 8000a66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000a7e:	0019      	movs	r1, r3
 8000a80:	0010      	movs	r0, r2
 8000a82:	f001 fadd 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	2201      	movs	r2, #1
 8000a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <MX_GPIO_Init+0x140>)
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	0010      	movs	r0, r2
 8000aa6:	f001 facb 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000aaa:	0021      	movs	r1, r4
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2208      	movs	r2, #8
 8000ab0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <MX_GPIO_Init+0x13c>)
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	f001 fabb 	bl	8002040 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b00b      	add	sp, #44	; 0x2c
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	00004010 	.word	0x00004010
 8000adc:	50000400 	.word	0x50000400
 8000ae0:	50000800 	.word	0x50000800

08000ae4 <hardwareTestLED>:

/* USER CODE BEGIN 4 */

	/* Test LEDs are working  */
	void hardwareTestLED(void){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

		/* Lights ON */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <hardwareTestLED+0x7c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 fc0a 	bl	8002308 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f000 fb61 	bl	80011bc <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	01db      	lsls	r3, r3, #7
 8000afe:	4819      	ldr	r0, [pc, #100]	; (8000b64 <hardwareTestLED+0x80>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	0019      	movs	r1, r3
 8000b04:	f001 fc00 	bl	8002308 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b08:	2064      	movs	r0, #100	; 0x64
 8000b0a:	f000 fb57 	bl	80011bc <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <hardwareTestLED+0x80>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 fbf7 	bl	8002308 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f000 fb4e 	bl	80011bc <HAL_Delay>

		/* Lights OFF */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <hardwareTestLED+0x7c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	0018      	movs	r0, r3
 8000b28:	f001 fbee 	bl	8002308 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b2c:	2064      	movs	r0, #100	; 0x64
 8000b2e:	f000 fb45 	bl	80011bc <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	01db      	lsls	r3, r3, #7
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <hardwareTestLED+0x80>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	f001 fbe4 	bl	8002308 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b40:	2064      	movs	r0, #100	; 0x64
 8000b42:	f000 fb3b 	bl	80011bc <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <hardwareTestLED+0x80>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f001 fbdb 	bl	8002308 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b52:	2064      	movs	r0, #100	; 0x64
 8000b54:	f000 fb32 	bl	80011bc <HAL_Delay>
	}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	50000800 	.word	0x50000800
 8000b64:	50000400 	.word	0x50000400

08000b68 <hardwareTestPot>:

	/* Test potentiometer is working */
	void hardwareTestPot(void){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
		/* Init variable for pot value */
		char msg[20];
		uint16_t potValue;

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <hardwareTestPot+0x50>)
 8000b70:	2105      	movs	r1, #5
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fe3a 	bl	80017ec <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <hardwareTestPot+0x50>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 ff42 	bl	8001a04 <HAL_ADC_GetValue>
 8000b80:	0002      	movs	r2, r0
 8000b82:	2116      	movs	r1, #22
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	801a      	strh	r2, [r3, #0]

		/* Print value */
		sprintf(msg, "potValue: %hu\r\n", potValue);
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	881a      	ldrh	r2, [r3, #0]
 8000b8c:	490b      	ldr	r1, [pc, #44]	; (8000bbc <hardwareTestPot+0x54>)
 8000b8e:	003b      	movs	r3, r7
 8000b90:	0018      	movs	r0, r3
 8000b92:	f004 fcab 	bl	80054ec <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000b96:	003b      	movs	r3, r7
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fab3 	bl	8000104 <strlen>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	0039      	movs	r1, r7
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <hardwareTestPot+0x58>)
 8000baa:	f003 fb51 	bl	8004250 <HAL_UART_Transmit>

	}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b006      	add	sp, #24
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000078 	.word	0x20000078
 8000bbc:	08005e50 	.word	0x08005e50
 8000bc0:	2000017c 	.word	0x2000017c

08000bc4 <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
			I2C_LCD_Init(MyI2C_LCD);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f004 fb13 	bl	80051f4 <I2C_LCD_Init>
			I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f004 fc1e 	bl	8005414 <I2C_LCD_SetCursor>
			I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <hardwareTestLCD+0x38>)
 8000bda:	0019      	movs	r1, r3
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f004 fc69 	bl	80054b4 <I2C_LCD_WriteString>
			I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2100      	movs	r1, #0
 8000be6:	2000      	movs	r0, #0
 8000be8:	f004 fc14 	bl	8005414 <I2C_LCD_SetCursor>
			I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <hardwareTestLCD+0x3c>)
 8000bee:	0019      	movs	r1, r3
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f004 fc5f 	bl	80054b4 <I2C_LCD_WriteString>
		}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	08005e88 	.word	0x08005e88
 8000c00:	08005e98 	.word	0x08005e98

08000c04 <i2cScanner>:
	//void hardwareTestLCD(void)

	/* I2C Scanner Script */
	/* Author:     Khaled Magdy */
	/* Source: 	   www.DeepBlueMbedded.com */
	void i2cScanner(void){
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b092      	sub	sp, #72	; 0x48
 8000c08:	af00      	add	r7, sp, #0
		uint8_t Buffer[25] = {0};
 8000c0a:	232c      	movs	r3, #44	; 0x2c
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	3304      	adds	r3, #4
 8000c14:	2215      	movs	r2, #21
 8000c16:	2100      	movs	r1, #0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f004 fc87 	bl	800552c <memset>
		uint8_t Space[] = " - ";
 8000c1e:	2328      	movs	r3, #40	; 0x28
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	4a35      	ldr	r2, [pc, #212]	; (8000cf8 <i2cScanner+0xf4>)
 8000c24:	601a      	str	r2, [r3, #0]
		uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000c26:	250c      	movs	r5, #12
 8000c28:	197b      	adds	r3, r7, r5
 8000c2a:	4a34      	ldr	r2, [pc, #208]	; (8000cfc <i2cScanner+0xf8>)
 8000c2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c2e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c32:	c313      	stmia	r3!, {r0, r1, r4}
 8000c34:	8812      	ldrh	r2, [r2, #0]
 8000c36:	801a      	strh	r2, [r3, #0]
		uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000c38:	003b      	movs	r3, r7
 8000c3a:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <i2cScanner+0xfc>)
 8000c3c:	ca03      	ldmia	r2!, {r0, r1}
 8000c3e:	c303      	stmia	r3!, {r0, r1}
 8000c40:	8811      	ldrh	r1, [r2, #0]
 8000c42:	8019      	strh	r1, [r3, #0]
 8000c44:	7892      	ldrb	r2, [r2, #2]
 8000c46:	709a      	strb	r2, [r3, #2]

		uint8_t i = 0, ret;
 8000c48:	2447      	movs	r4, #71	; 0x47
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1000);
 8000c50:	23fa      	movs	r3, #250	; 0xfa
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f000 fab1 	bl	80011bc <HAL_Delay>

		/*-[ I2C Bus Scanning ]-*/
		HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <i2cScanner+0x100>)
 8000c5c:	1979      	adds	r1, r7, r5
 8000c5e:	482a      	ldr	r0, [pc, #168]	; (8000d08 <i2cScanner+0x104>)
 8000c60:	221a      	movs	r2, #26
 8000c62:	f003 faf5 	bl	8004250 <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e034      	b.n	8000cd8 <i2cScanner+0xd4>
		{
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000c6e:	2347      	movs	r3, #71	; 0x47
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	18db      	adds	r3, r3, r3
 8000c78:	b299      	uxth	r1, r3
 8000c7a:	2546      	movs	r5, #70	; 0x46
 8000c7c:	197c      	adds	r4, r7, r5
 8000c7e:	4823      	ldr	r0, [pc, #140]	; (8000d0c <i2cScanner+0x108>)
 8000c80:	2305      	movs	r3, #5
 8000c82:	2203      	movs	r2, #3
 8000c84:	f001 fd2e 	bl	80026e4 <HAL_I2C_IsDeviceReady>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK) /* No ACK Received At That Address */
 8000c8c:	197b      	adds	r3, r7, r5
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d007      	beq.n	8000ca4 <i2cScanner+0xa0>
			{
				HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <i2cScanner+0x100>)
 8000c96:	2228      	movs	r2, #40	; 0x28
 8000c98:	18b9      	adds	r1, r7, r2
 8000c9a:	481b      	ldr	r0, [pc, #108]	; (8000d08 <i2cScanner+0x104>)
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	f003 fad7 	bl	8004250 <HAL_UART_Transmit>
 8000ca2:	e013      	b.n	8000ccc <i2cScanner+0xc8>
			}
			else if(ret == HAL_OK)
 8000ca4:	2346      	movs	r3, #70	; 0x46
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10e      	bne.n	8000ccc <i2cScanner+0xc8>
			{
				sprintf(Buffer, "0x%X", i);
 8000cae:	2347      	movs	r3, #71	; 0x47
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4916      	ldr	r1, [pc, #88]	; (8000d10 <i2cScanner+0x10c>)
 8000cb6:	242c      	movs	r4, #44	; 0x2c
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f004 fc16 	bl	80054ec <siprintf>
				HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <i2cScanner+0x100>)
 8000cc2:	1939      	adds	r1, r7, r4
 8000cc4:	4810      	ldr	r0, [pc, #64]	; (8000d08 <i2cScanner+0x104>)
 8000cc6:	2219      	movs	r2, #25
 8000cc8:	f003 fac2 	bl	8004250 <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000ccc:	2147      	movs	r1, #71	; 0x47
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	3201      	adds	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	2347      	movs	r3, #71	; 0x47
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	dac4      	bge.n	8000c6e <i2cScanner+0x6a>
			}
		}
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <i2cScanner+0x100>)
 8000ce6:	0039      	movs	r1, r7
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <i2cScanner+0x104>)
 8000cea:	220b      	movs	r2, #11
 8000cec:	f003 fab0 	bl	8004250 <HAL_UART_Transmit>
		/*--[ Scanning Done ]--*/
	}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b012      	add	sp, #72	; 0x48
 8000cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf8:	00202d20 	.word	0x00202d20
 8000cfc:	08005eb0 	.word	0x08005eb0
 8000d00:	08005ecc 	.word	0x08005ecc
 8000d04:	00002710 	.word	0x00002710
 8000d08:	2000017c 	.word	0x2000017c
 8000d0c:	200000dc 	.word	0x200000dc
 8000d10:	08005ea8 	.word	0x08005ea8

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	641a      	str	r2, [r3, #64]	; 0x40
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	2201      	movs	r2, #1
 8000d38:	4013      	ands	r3, r2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0549      	lsls	r1, r1, #21
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	055b      	lsls	r3, r3, #21
 8000d54:	4013      	ands	r3, r2
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fa50 	bl	8001204 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b08b      	sub	sp, #44	; 0x2c
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	2414      	movs	r4, #20
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	2314      	movs	r3, #20
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f004 fbd2 	bl	800552c <memset>
  if(hadc->Instance==ADC1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <HAL_ADC_MspInit+0x80>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d129      	bne.n	8000de6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0349      	lsls	r1, r1, #13
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	035b      	lsls	r3, r3, #13
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	430a      	orrs	r2, r1
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_ADC_MspInit+0x84>)
 8000dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2203      	movs	r2, #3
 8000dd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	193a      	adds	r2, r7, r4
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f001 f92d 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b00b      	add	sp, #44	; 0x2c
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40012400 	.word	0x40012400
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b097      	sub	sp, #92	; 0x5c
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	2344      	movs	r3, #68	; 0x44
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	0018      	movs	r0, r3
 8000e06:	2314      	movs	r3, #20
 8000e08:	001a      	movs	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	f004 fb8e 	bl	800552c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e10:	2410      	movs	r4, #16
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	0018      	movs	r0, r3
 8000e16:	2334      	movs	r3, #52	; 0x34
 8000e18:	001a      	movs	r2, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	f004 fb86 	bl	800552c <memset>
  if(hi2c->Instance==I2C1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <HAL_I2C_MspInit+0xb8>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d13e      	bne.n	8000ea8 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	2220      	movs	r2, #32
 8000e2e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e30:	193b      	adds	r3, r7, r4
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e36:	193b      	adds	r3, r7, r4
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f002 fd35 	bl	80038a8 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e42:	f7ff ff67 	bl	8000d14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_I2C_MspInit+0xbc>)
 8000e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_I2C_MspInit+0xbc>)
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_I2C_MspInit+0xbc>)
 8000e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e56:	2202      	movs	r2, #2
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e5e:	2144      	movs	r1, #68	; 0x44
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	22c0      	movs	r2, #192	; 0xc0
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2212      	movs	r2, #18
 8000e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2206      	movs	r2, #6
 8000e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_I2C_MspInit+0xc0>)
 8000e84:	0019      	movs	r1, r3
 8000e86:	0010      	movs	r0, r2
 8000e88:	f001 f8da 	bl	8002040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_I2C_MspInit+0xbc>)
 8000e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_I2C_MspInit+0xbc>)
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	0389      	lsls	r1, r1, #14
 8000e96:	430a      	orrs	r2, r1
 8000e98:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_I2C_MspInit+0xbc>)
 8000e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	039b      	lsls	r3, r3, #14
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b017      	add	sp, #92	; 0x5c
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	50000400 	.word	0x50000400

08000ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d10b      	bne.n	8000ee8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_TIM_Base_MspInit+0x34>)
 8000ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_TIM_Base_MspInit+0x34>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_TIM_Base_MspInit+0x34>)
 8000ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b097      	sub	sp, #92	; 0x5c
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	2344      	movs	r3, #68	; 0x44
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	0018      	movs	r0, r3
 8000f02:	2314      	movs	r3, #20
 8000f04:	001a      	movs	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f004 fb10 	bl	800552c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f0c:	2410      	movs	r4, #16
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	0018      	movs	r0, r3
 8000f12:	2334      	movs	r3, #52	; 0x34
 8000f14:	001a      	movs	r2, r3
 8000f16:	2100      	movs	r1, #0
 8000f18:	f004 fb08 	bl	800552c <memset>
  if(huart->Instance==USART2)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a22      	ldr	r2, [pc, #136]	; (8000fac <HAL_UART_MspInit+0xb8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d13e      	bne.n	8000fa4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	2202      	movs	r2, #2
 8000f2a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	0018      	movs	r0, r3
 8000f36:	f002 fcb7 	bl	80038a8 <HAL_RCCEx_PeriphCLKConfig>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f3e:	f7ff fee9 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_UART_MspInit+0xbc>)
 8000f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_UART_MspInit+0xbc>)
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	0289      	lsls	r1, r1, #10
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0xbc>)
 8000f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	029b      	lsls	r3, r3, #10
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_UART_MspInit+0xbc>)
 8000f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <HAL_UART_MspInit+0xbc>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	635a      	str	r2, [r3, #52]	; 0x34
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_UART_MspInit+0xbc>)
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f76:	2144      	movs	r1, #68	; 0x44
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2202      	movs	r2, #2
 8000f82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2201      	movs	r2, #1
 8000f88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2201      	movs	r2, #1
 8000f94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	187a      	adds	r2, r7, r1
 8000f98:	23a0      	movs	r3, #160	; 0xa0
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	0011      	movs	r1, r2
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f001 f84e 	bl	8002040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b017      	add	sp, #92	; 0x5c
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	40004400 	.word	0x40004400
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <NMI_Handler+0x4>

08000fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <HardFault_Handler+0x4>

08000fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f8d4 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f004 fa92 	bl	800553c <__errno>
 8001018:	0003      	movs	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	2301      	movs	r3, #1
 8001020:	425b      	negs	r3, r3
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	18d2      	adds	r2, r2, r3
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b006      	add	sp, #24
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20009000 	.word	0x20009000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000210 	.word	0x20000210
 800104c:	20000368 	.word	0x20000368

08001050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800105e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001060:	f7ff fff6 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <LoopForever+0x6>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	; (800109c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <LoopForever+0xe>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	; (80010a8 <LoopForever+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800108a:	f004 fa5d 	bl	8005548 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800108e:	f7ff fad7 	bl	8000640 <main>

08001092 <LoopForever>:

LoopForever:
  b LoopForever
 8001092:	e7fe      	b.n	8001092 <LoopForever>
  ldr   r0, =_estack
 8001094:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010a0:	08005fc0 	.word	0x08005fc0
  ldr r2, =_sbss
 80010a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010a8:	20000364 	.word	0x20000364

080010ac <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC1_COMP_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x3c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_Init+0x3c>)
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	0049      	lsls	r1, r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f810 	bl	80010f0 <HAL_InitTick>
 80010d0:	1e03      	subs	r3, r0, #0
 80010d2:	d003      	beq.n	80010dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e001      	b.n	80010e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fe20 	bl	8000d20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	781b      	ldrb	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_InitTick+0x88>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d02b      	beq.n	8001160 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_InitTick+0x8c>)
 800110a:	681c      	ldr	r4, [r3, #0]
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_InitTick+0x88>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	0019      	movs	r1, r3
 8001112:	23fa      	movs	r3, #250	; 0xfa
 8001114:	0098      	lsls	r0, r3, #2
 8001116:	f7ff f807 	bl	8000128 <__udivsi3>
 800111a:	0003      	movs	r3, r0
 800111c:	0019      	movs	r1, r3
 800111e:	0020      	movs	r0, r4
 8001120:	f7ff f802 	bl	8000128 <__udivsi3>
 8001124:	0003      	movs	r3, r0
 8001126:	0018      	movs	r0, r3
 8001128:	f000 ff7d 	bl	8002026 <HAL_SYSTICK_Config>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d112      	bne.n	8001156 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d80a      	bhi.n	800114c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	2301      	movs	r3, #1
 800113a:	425b      	negs	r3, r3
 800113c:	2200      	movs	r2, #0
 800113e:	0018      	movs	r0, r3
 8001140:	f000 ff5c 	bl	8001ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_InitTick+0x90>)
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e00d      	b.n	8001168 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e008      	b.n	8001168 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001156:	230f      	movs	r3, #15
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e003      	b.n	8001168 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001160:	230f      	movs	r3, #15
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001168:	230f      	movs	r3, #15
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	781b      	ldrb	r3, [r3, #0]
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b005      	add	sp, #20
 8001174:	bd90      	pop	{r4, r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	20000008 	.word	0x20000008
 800117c:	20000000 	.word	0x20000000
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x1c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	001a      	movs	r2, r3
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_IncTick+0x20>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	18d2      	adds	r2, r2, r3
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_IncTick+0x20>)
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000214 	.word	0x20000214

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <HAL_GetTick+0x10>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000214 	.word	0x20000214

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff fff0 	bl	80011a8 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3301      	adds	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	001a      	movs	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	189b      	adds	r3, r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	f7ff ffe0 	bl	80011a8 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	20000008 	.word	0x20000008

08001204 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001212:	4013      	ands	r3, r2
 8001214:	0019      	movs	r1, r3
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	40010000 	.word	0x40010000
 800122c:	fffff9ff 	.word	0xfffff9ff

08001230 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001240:	401a      	ands	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	601a      	str	r2, [r3, #0]
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	fe3fffff 	.word	0xfe3fffff

08001258 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	23e0      	movs	r3, #224	; 0xe0
 8001266:	045b      	lsls	r3, r3, #17
 8001268:	4013      	ands	r3, r2
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}

08001272 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	2104      	movs	r1, #4
 8001286:	400a      	ands	r2, r1
 8001288:	2107      	movs	r1, #7
 800128a:	4091      	lsls	r1, r2
 800128c:	000a      	movs	r2, r1
 800128e:	43d2      	mvns	r2, r2
 8001290:	401a      	ands	r2, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2104      	movs	r1, #4
 8001296:	400b      	ands	r3, r1
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4099      	lsls	r1, r3
 800129c:	000b      	movs	r3, r1
 800129e:	431a      	orrs	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b004      	add	sp, #16
 80012aa:	bd80      	pop	{r7, pc}

080012ac <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	2104      	movs	r1, #4
 80012be:	400a      	ands	r2, r1
 80012c0:	2107      	movs	r1, #7
 80012c2:	4091      	lsls	r1, r2
 80012c4:	000a      	movs	r2, r1
 80012c6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2104      	movs	r1, #4
 80012cc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012ce:	40da      	lsrs	r2, r3
 80012d0:	0013      	movs	r3, r2
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}

080012da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	23c0      	movs	r3, #192	; 0xc0
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4013      	ands	r3, r2
 80012ec:	d101      	bne.n	80012f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	211f      	movs	r1, #31
 8001310:	400a      	ands	r2, r1
 8001312:	210f      	movs	r1, #15
 8001314:	4091      	lsls	r1, r2
 8001316:	000a      	movs	r2, r1
 8001318:	43d2      	mvns	r2, r2
 800131a:	401a      	ands	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	0e9b      	lsrs	r3, r3, #26
 8001320:	210f      	movs	r1, #15
 8001322:	4019      	ands	r1, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	201f      	movs	r0, #31
 8001328:	4003      	ands	r3, r0
 800132a:	4099      	lsls	r1, r3
 800132c:	000b      	movs	r3, r1
 800132e:	431a      	orrs	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b004      	add	sp, #16
 800133a:	bd80      	pop	{r7, pc}

0800133c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	035b      	lsls	r3, r3, #13
 800134e:	0b5b      	lsrs	r3, r3, #13
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}

0800135e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	0352      	lsls	r2, r2, #13
 8001370:	0b52      	lsrs	r2, r2, #13
 8001372:	43d2      	mvns	r2, r2
 8001374:	401a      	ands	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	0212      	lsls	r2, r2, #8
 8001398:	43d2      	mvns	r2, r2
 800139a:	401a      	ands	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	400b      	ands	r3, r1
 80013a4:	4904      	ldr	r1, [pc, #16]	; (80013b8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80013a6:	400b      	ands	r3, r1
 80013a8:	431a      	orrs	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b004      	add	sp, #16
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	07ffff00 	.word	0x07ffff00

080013bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	0552      	lsls	r2, r2, #21
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	46bd      	mov	sp, r7
 80013da:	b002      	add	sp, #8
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	6fffffe8 	.word	0x6fffffe8

080013e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	055b      	lsls	r3, r3, #21
 80013f4:	401a      	ands	r2, r3
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	055b      	lsls	r3, r3, #21
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d101      	bne.n	8001402 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001402:	2300      	movs	r3, #0
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}

0800140c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <LL_ADC_Enable+0x20>)
 800141a:	4013      	ands	r3, r2
 800141c:	2201      	movs	r2, #1
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}
 800142c:	7fffffe8 	.word	0x7fffffe8

08001430 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2201      	movs	r2, #1
 800143e:	4013      	ands	r3, r2
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <LL_ADC_IsEnabled+0x18>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <LL_ADC_IsEnabled+0x1a>
 8001448:	2300      	movs	r3, #0
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <LL_ADC_REG_StartConversion+0x20>)
 8001462:	4013      	ands	r3, r2
 8001464:	2204      	movs	r2, #4
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}
 8001474:	7fffffe8 	.word	0x7fffffe8

08001478 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2204      	movs	r2, #4
 8001486:	4013      	ands	r3, r2
 8001488:	2b04      	cmp	r3, #4
 800148a:	d101      	bne.n	8001490 <LL_ADC_REG_IsConversionOngoing+0x18>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001490:	2300      	movs	r3, #0
}
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a4:	231f      	movs	r3, #31
 80014a6:	18fb      	adds	r3, r7, r3
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e17f      	b.n	80017c2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10a      	bne.n	80014e0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fc4f 	bl	8000d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2254      	movs	r2, #84	; 0x54
 80014dc:	2100      	movs	r1, #0
 80014de:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ff7d 	bl	80013e4 <LL_ADC_IsInternalRegulatorEnabled>
 80014ea:	1e03      	subs	r3, r0, #0
 80014ec:	d115      	bne.n	800151a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ff62 	bl	80013bc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014f8:	4bb4      	ldr	r3, [pc, #720]	; (80017cc <HAL_ADC_Init+0x330>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	49b4      	ldr	r1, [pc, #720]	; (80017d0 <HAL_ADC_Init+0x334>)
 80014fe:	0018      	movs	r0, r3
 8001500:	f7fe fe12 	bl	8000128 <__udivsi3>
 8001504:	0003      	movs	r3, r0
 8001506:	3301      	adds	r3, #1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800150c:	e002      	b.n	8001514 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3b01      	subs	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f9      	bne.n	800150e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff ff60 	bl	80013e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001524:	1e03      	subs	r3, r0, #0
 8001526:	d10f      	bne.n	8001548 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152c:	2210      	movs	r2, #16
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	2201      	movs	r2, #1
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001540:	231f      	movs	r3, #31
 8001542:	18fb      	adds	r3, r7, r3
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff ff93 	bl	8001478 <LL_ADC_REG_IsConversionOngoing>
 8001552:	0003      	movs	r3, r0
 8001554:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	2210      	movs	r2, #16
 800155c:	4013      	ands	r3, r2
 800155e:	d000      	beq.n	8001562 <HAL_ADC_Init+0xc6>
 8001560:	e122      	b.n	80017a8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d000      	beq.n	800156a <HAL_ADC_Init+0xce>
 8001568:	e11e      	b.n	80017a8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	4a99      	ldr	r2, [pc, #612]	; (80017d4 <HAL_ADC_Init+0x338>)
 8001570:	4013      	ands	r3, r2
 8001572:	2202      	movs	r2, #2
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff ff56 	bl	8001430 <LL_ADC_IsEnabled>
 8001584:	1e03      	subs	r3, r0, #0
 8001586:	d000      	beq.n	800158a <HAL_ADC_Init+0xee>
 8001588:	e0ad      	b.n	80016e6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7e1b      	ldrb	r3, [r3, #24]
 8001592:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001594:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7e5b      	ldrb	r3, [r3, #25]
 800159a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800159c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7e9b      	ldrb	r3, [r3, #26]
 80015a2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80015a4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_ADC_Init+0x118>
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	015b      	lsls	r3, r3, #5
 80015b2:	e000      	b.n	80015b6 <HAL_ADC_Init+0x11a>
 80015b4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80015b6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80015bc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	da04      	bge.n	80015d0 <HAL_ADC_Init+0x134>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	e001      	b.n	80015d4 <HAL_ADC_Init+0x138>
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80015d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	212c      	movs	r1, #44	; 0x2c
 80015da:	5c5b      	ldrb	r3, [r3, r1]
 80015dc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80015de:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2220      	movs	r2, #32
 80015ea:	5c9b      	ldrb	r3, [r3, r2]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d115      	bne.n	800161c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7e9b      	ldrb	r3, [r3, #26]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2280      	movs	r2, #128	; 0x80
 80015fc:	0252      	lsls	r2, r2, #9
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	e00b      	b.n	800161c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	2220      	movs	r2, #32
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2201      	movs	r2, #1
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00a      	beq.n	800163a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	23e0      	movs	r3, #224	; 0xe0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001632:	4313      	orrs	r3, r2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4a65      	ldr	r2, [pc, #404]	; (80017d8 <HAL_ADC_Init+0x33c>)
 8001642:	4013      	ands	r3, r2
 8001644:	0019      	movs	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	0f9b      	lsrs	r3, r3, #30
 8001656:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800165c:	4313      	orrs	r3, r2
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4313      	orrs	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	223c      	movs	r2, #60	; 0x3c
 8001668:	5c9b      	ldrb	r3, [r3, r2]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d111      	bne.n	8001692 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	0f9b      	lsrs	r3, r3, #30
 8001674:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800167a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001680:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001686:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	4313      	orrs	r3, r2
 800168c:	2201      	movs	r2, #1
 800168e:	4313      	orrs	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	4a50      	ldr	r2, [pc, #320]	; (80017dc <HAL_ADC_Init+0x340>)
 800169a:	4013      	ands	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	23c0      	movs	r3, #192	; 0xc0
 80016ae:	061b      	lsls	r3, r3, #24
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d018      	beq.n	80016e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	05db      	lsls	r3, r3, #23
 80016bc:	429a      	cmp	r2, r3
 80016be:	d012      	beq.n	80016e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d00c      	beq.n	80016e6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80016cc:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <HAL_ADC_Init+0x344>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a44      	ldr	r2, [pc, #272]	; (80017e4 <HAL_ADC_Init+0x348>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	23f0      	movs	r3, #240	; 0xf0
 80016dc:	039b      	lsls	r3, r3, #14
 80016de:	401a      	ands	r2, r3
 80016e0:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <HAL_ADC_Init+0x344>)
 80016e2:	430a      	orrs	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ee:	001a      	movs	r2, r3
 80016f0:	2100      	movs	r1, #0
 80016f2:	f7ff fdbe 	bl	8001272 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fe:	493a      	ldr	r1, [pc, #232]	; (80017e8 <HAL_ADC_Init+0x34c>)
 8001700:	001a      	movs	r2, r3
 8001702:	f7ff fdb6 	bl	8001272 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2110      	movs	r1, #16
 800171a:	4249      	negs	r1, r1
 800171c:	430a      	orrs	r2, r1
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
 8001720:	e018      	b.n	8001754 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	039b      	lsls	r3, r3, #14
 800172a:	429a      	cmp	r2, r3
 800172c:	d112      	bne.n	8001754 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	3b01      	subs	r3, #1
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	221c      	movs	r2, #28
 800173e:	4013      	ands	r3, r2
 8001740:	2210      	movs	r2, #16
 8001742:	4252      	negs	r2, r2
 8001744:	409a      	lsls	r2, r3
 8001746:	0011      	movs	r1, r2
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2100      	movs	r1, #0
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff fda6 	bl	80012ac <LL_ADC_GetSamplingTimeCommonChannels>
 8001760:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001766:	429a      	cmp	r2, r3
 8001768:	d10b      	bne.n	8001782 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	2203      	movs	r2, #3
 8001776:	4393      	bics	r3, r2
 8001778:	2201      	movs	r2, #1
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001780:	e01c      	b.n	80017bc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	2212      	movs	r2, #18
 8001788:	4393      	bics	r3, r2
 800178a:	2210      	movs	r2, #16
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	2201      	movs	r2, #1
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800179e:	231f      	movs	r3, #31
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017a6:	e009      	b.n	80017bc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	2210      	movs	r2, #16
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017b4:	231f      	movs	r3, #31
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80017bc:	231f      	movs	r3, #31
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	781b      	ldrb	r3, [r3, #0]
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b008      	add	sp, #32
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	20000000 	.word	0x20000000
 80017d0:	00030d40 	.word	0x00030d40
 80017d4:	fffffefd 	.word	0xfffffefd
 80017d8:	ffde0201 	.word	0xffde0201
 80017dc:	1ffffc02 	.word	0x1ffffc02
 80017e0:	40012708 	.word	0x40012708
 80017e4:	ffc3ffff 	.word	0xffc3ffff
 80017e8:	07ffff04 	.word	0x07ffff04

080017ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d102      	bne.n	8001804 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80017fe:	2308      	movs	r3, #8
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e00f      	b.n	8001824 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	4013      	ands	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	2220      	movs	r2, #32
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e072      	b.n	8001906 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001820:	2304      	movs	r3, #4
 8001822:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001824:	f7ff fcc0 	bl	80011a8 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800182c:	e01f      	b.n	800186e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	d01c      	beq.n	800186e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001834:	f7ff fcb8 	bl	80011a8 <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d302      	bcc.n	800184a <HAL_ADC_PollForConversion+0x5e>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d111      	bne.n	800186e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	d10b      	bne.n	800186e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	2204      	movs	r2, #4
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2254      	movs	r2, #84	; 0x54
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e04b      	b.n	8001906 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	d0d9      	beq.n	800182e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fd24 	bl	80012da <LL_ADC_REG_IsTriggerSourceSWStart>
 8001892:	1e03      	subs	r3, r0, #0
 8001894:	d02e      	beq.n	80018f4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7e9b      	ldrb	r3, [r3, #26]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d12a      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2208      	movs	r2, #8
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d123      	bne.n	80018f4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff fde1 	bl	8001478 <LL_ADC_REG_IsConversionOngoing>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d110      	bne.n	80018dc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	210c      	movs	r1, #12
 80018c6:	438a      	bics	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_ADC_PollForConversion+0x124>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	2201      	movs	r2, #1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	; 0x58
 80018da:	e00b      	b.n	80018f4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	2220      	movs	r2, #32
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	2201      	movs	r2, #1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7e1b      	ldrb	r3, [r3, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	220c      	movs	r2, #12
 8001902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	fffffefe 	.word	0xfffffefe

08001914 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001914:	b5b0      	push	{r4, r5, r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff fda9 	bl	8001478 <LL_ADC_REG_IsConversionOngoing>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d15f      	bne.n	80019ea <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2254      	movs	r2, #84	; 0x54
 800192e:	5c9b      	ldrb	r3, [r3, r2]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_ADC_Start_IT+0x24>
 8001934:	2302      	movs	r3, #2
 8001936:	e05f      	b.n	80019f8 <HAL_ADC_Start_IT+0xe4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2254      	movs	r2, #84	; 0x54
 800193c:	2101      	movs	r1, #1
 800193e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001940:	250f      	movs	r5, #15
 8001942:	197c      	adds	r4, r7, r5
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f000 fa40 	bl	8001dcc <ADC_Enable>
 800194c:	0003      	movs	r3, r0
 800194e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001950:	197b      	adds	r3, r7, r5
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d143      	bne.n	80019e0 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_ADC_Start_IT+0xec>)
 800195e:	4013      	ands	r3, r2
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	0052      	lsls	r2, r2, #1
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	221c      	movs	r2, #28
 8001976:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2254      	movs	r2, #84	; 0x54
 800197c:	2100      	movs	r1, #0
 800197e:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	211c      	movs	r1, #28
 800198c:	438a      	bics	r2, r1
 800198e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b08      	cmp	r3, #8
 8001996:	d108      	bne.n	80019aa <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2108      	movs	r1, #8
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
          break;
 80019a8:	e008      	b.n	80019bc <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2104      	movs	r1, #4
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
          break;
 80019ba:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d107      	bne.n	80019d4 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2110      	movs	r1, #16
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff fd3b 	bl	8001454 <LL_ADC_REG_StartConversion>
 80019de:	e008      	b.n	80019f2 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2254      	movs	r2, #84	; 0x54
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]
 80019e8:	e003      	b.n	80019f2 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019ea:	230f      	movs	r3, #15
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	2202      	movs	r2, #2
 80019f0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80019f2:	230f      	movs	r3, #15
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	781b      	ldrb	r3, [r3, #0]
}
 80019f8:	0018      	movs	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b004      	add	sp, #16
 80019fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001a00:	fffff0fe 	.word	0xfffff0fe

08001a04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a26:	2317      	movs	r3, #23
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2254      	movs	r2, #84	; 0x54
 8001a36:	5c9b      	ldrb	r3, [r3, r2]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x24>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e1c0      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x3a6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2254      	movs	r2, #84	; 0x54
 8001a44:	2101      	movs	r1, #1
 8001a46:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff fd13 	bl	8001478 <LL_ADC_REG_IsConversionOngoing>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d000      	beq.n	8001a58 <HAL_ADC_ConfigChannel+0x3c>
 8001a56:	e1a3      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d100      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x46>
 8001a60:	e143      	b.n	8001cea <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d004      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a72:	4ac1      	ldr	r2, [pc, #772]	; (8001d78 <HAL_ADC_ConfigChannel+0x35c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d108      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0019      	movs	r1, r3
 8001a82:	0010      	movs	r0, r2
 8001a84:	f7ff fc5a 	bl	800133c <LL_ADC_REG_SetSequencerChAdd>
 8001a88:	e0c9      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	211f      	movs	r1, #31
 8001a94:	400b      	ands	r3, r1
 8001a96:	210f      	movs	r1, #15
 8001a98:	4099      	lsls	r1, r3
 8001a9a:	000b      	movs	r3, r1
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	035b      	lsls	r3, r3, #13
 8001aa8:	0b5b      	lsrs	r3, r3, #13
 8001aaa:	d105      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x9c>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0e9b      	lsrs	r3, r3, #26
 8001ab2:	221f      	movs	r2, #31
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	e098      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d000      	beq.n	8001ac4 <HAL_ADC_ConfigChannel+0xa8>
 8001ac2:	e091      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d000      	beq.n	8001ad0 <HAL_ADC_ConfigChannel+0xb4>
 8001ace:	e089      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x1c8>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d000      	beq.n	8001adc <HAL_ADC_ConfigChannel+0xc0>
 8001ada:	e081      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x1c4>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d000      	beq.n	8001ae8 <HAL_ADC_ConfigChannel+0xcc>
 8001ae6:	e079      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x1c0>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2210      	movs	r2, #16
 8001aee:	4013      	ands	r3, r2
 8001af0:	d000      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0xd8>
 8001af2:	e071      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x1bc>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2220      	movs	r2, #32
 8001afa:	4013      	ands	r3, r2
 8001afc:	d000      	beq.n	8001b00 <HAL_ADC_ConfigChannel+0xe4>
 8001afe:	e069      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x1b8>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	4013      	ands	r3, r2
 8001b08:	d000      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0xf0>
 8001b0a:	e061      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x1b4>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	4013      	ands	r3, r2
 8001b14:	d000      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0xfc>
 8001b16:	e059      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x1b0>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d151      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1ac>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d149      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1a8>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d141      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1a4>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4013      	ands	r3, r2
 8001b46:	d139      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1a0>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	4013      	ands	r3, r2
 8001b52:	d131      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x19c>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	019b      	lsls	r3, r3, #6
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d129      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x198>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	01db      	lsls	r3, r3, #7
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d121      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x194>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	4013      	ands	r3, r2
 8001b76:	d119      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x190>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	4013      	ands	r3, r2
 8001b82:	d111      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x18c>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	029b      	lsls	r3, r3, #10
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x188>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	02db      	lsls	r3, r3, #11
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d001      	beq.n	8001ba0 <HAL_ADC_ConfigChannel+0x184>
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	e024      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e022      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001ba4:	2311      	movs	r3, #17
 8001ba6:	e020      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001ba8:	2310      	movs	r3, #16
 8001baa:	e01e      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bac:	230f      	movs	r3, #15
 8001bae:	e01c      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bb0:	230e      	movs	r3, #14
 8001bb2:	e01a      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bb4:	230d      	movs	r3, #13
 8001bb6:	e018      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bb8:	230c      	movs	r3, #12
 8001bba:	e016      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bbc:	230b      	movs	r3, #11
 8001bbe:	e014      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bc0:	230a      	movs	r3, #10
 8001bc2:	e012      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bc4:	2309      	movs	r3, #9
 8001bc6:	e010      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bc8:	2308      	movs	r3, #8
 8001bca:	e00e      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bcc:	2307      	movs	r3, #7
 8001bce:	e00c      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	e00a      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	e008      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e006      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e004      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1ce>
 8001be8:	2300      	movs	r3, #0
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	6852      	ldr	r2, [r2, #4]
 8001bee:	201f      	movs	r0, #31
 8001bf0:	4002      	ands	r2, r0
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d808      	bhi.n	8001c1e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	001a      	movs	r2, r3
 8001c1a:	f7ff fb6f 	bl	80012fc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6819      	ldr	r1, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	001a      	movs	r2, r3
 8001c2c:	f7ff fbaa 	bl	8001384 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db00      	blt.n	8001c3a <HAL_ADC_ConfigChannel+0x21e>
 8001c38:	e0bc      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c3a:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fb0b 	bl	8001258 <LL_ADC_GetCommonPathInternalCh>
 8001c42:	0003      	movs	r3, r0
 8001c44:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <HAL_ADC_ConfigChannel+0x364>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d122      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	041b      	lsls	r3, r3, #16
 8001c56:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c58:	d11d      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	0412      	lsls	r2, r2, #16
 8001c60:	4313      	orrs	r3, r2
 8001c62:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001c64:	0019      	movs	r1, r3
 8001c66:	0010      	movs	r0, r2
 8001c68:	f7ff fae2 	bl	8001230 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c6c:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <HAL_ADC_ConfigChannel+0x368>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4945      	ldr	r1, [pc, #276]	; (8001d88 <HAL_ADC_ConfigChannel+0x36c>)
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7fe fa58 	bl	8000128 <__udivsi3>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	189b      	adds	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c86:	e002      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c94:	e08e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a3c      	ldr	r2, [pc, #240]	; (8001d8c <HAL_ADC_ConfigChannel+0x370>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d10e      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	045b      	lsls	r3, r3, #17
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d109      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	0452      	lsls	r2, r2, #17
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	4a32      	ldr	r2, [pc, #200]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	f7ff faba 	bl	8001230 <LL_ADC_SetCommonPathInternalCh>
 8001cbc:	e07a      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <HAL_ADC_ConfigChannel+0x374>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d000      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x2ae>
 8001cc8:	e074      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	03db      	lsls	r3, r3, #15
 8001cd0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cd2:	d000      	beq.n	8001cd6 <HAL_ADC_ConfigChannel+0x2ba>
 8001cd4:	e06e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	03d2      	lsls	r2, r2, #15
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	f7ff faa4 	bl	8001230 <LL_ADC_SetCommonPathInternalCh>
 8001ce8:	e064      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d004      	beq.n	8001d00 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_ADC_ConfigChannel+0x35c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d107      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0019      	movs	r1, r3
 8001d0a:	0010      	movs	r0, r2
 8001d0c:	f7ff fb27 	bl	800135e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da4d      	bge.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7ff fa9c 	bl	8001258 <LL_ADC_GetCommonPathInternalCh>
 8001d20:	0003      	movs	r3, r0
 8001d22:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_ADC_ConfigChannel+0x364>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d108      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_ADC_ConfigChannel+0x378>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001d36:	0019      	movs	r1, r3
 8001d38:	0010      	movs	r0, r2
 8001d3a:	f7ff fa79 	bl	8001230 <LL_ADC_SetCommonPathInternalCh>
 8001d3e:	e039      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a11      	ldr	r2, [pc, #68]	; (8001d8c <HAL_ADC_ConfigChannel+0x370>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d108      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_ADC_ConfigChannel+0x37c>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001d52:	0019      	movs	r1, r3
 8001d54:	0010      	movs	r0, r2
 8001d56:	f7ff fa6b 	bl	8001230 <LL_ADC_SetCommonPathInternalCh>
 8001d5a:	e02b      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_ADC_ConfigChannel+0x374>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d126      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <HAL_ADC_ConfigChannel+0x380>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <HAL_ADC_ConfigChannel+0x360>)
 8001d6e:	0019      	movs	r1, r3
 8001d70:	0010      	movs	r0, r2
 8001d72:	f7ff fa5d 	bl	8001230 <LL_ADC_SetCommonPathInternalCh>
 8001d76:	e01d      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x398>
 8001d78:	80000004 	.word	0x80000004
 8001d7c:	40012708 	.word	0x40012708
 8001d80:	b0001000 	.word	0xb0001000
 8001d84:	20000000 	.word	0x20000000
 8001d88:	00030d40 	.word	0x00030d40
 8001d8c:	b8004000 	.word	0xb8004000
 8001d90:	b4002000 	.word	0xb4002000
 8001d94:	ff7fffff 	.word	0xff7fffff
 8001d98:	feffffff 	.word	0xfeffffff
 8001d9c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	2220      	movs	r2, #32
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dac:	2317      	movs	r3, #23
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2254      	movs	r2, #84	; 0x54
 8001db8:	2100      	movs	r1, #0
 8001dba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001dbc:	2317      	movs	r3, #23
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	781b      	ldrb	r3, [r3, #0]
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b006      	add	sp, #24
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)

08001dcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff fb27 	bl	8001430 <LL_ADC_IsEnabled>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d000      	beq.n	8001de8 <ADC_Enable+0x1c>
 8001de6:	e069      	b.n	8001ebc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4a36      	ldr	r2, [pc, #216]	; (8001ec8 <ADC_Enable+0xfc>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	d00d      	beq.n	8001e10 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	2210      	movs	r2, #16
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2201      	movs	r2, #1
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e056      	b.n	8001ebe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff faf9 	bl	800140c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001e1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ecc <ADC_Enable+0x100>)
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f7ff fa1b 	bl	8001258 <LL_ADC_GetCommonPathInternalCh>
 8001e22:	0002      	movs	r2, r0
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d00f      	beq.n	8001e4c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2c:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <ADC_Enable+0x104>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4928      	ldr	r1, [pc, #160]	; (8001ed4 <ADC_Enable+0x108>)
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7fe f978 	bl	8000128 <__udivsi3>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001e3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e3e:	e002      	b.n	8001e46 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f9      	bne.n	8001e40 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7e5b      	ldrb	r3, [r3, #25]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d033      	beq.n	8001ebc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001e54:	f7ff f9a8 	bl	80011a8 <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e5c:	e027      	b.n	8001eae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7ff fae4 	bl	8001430 <LL_ADC_IsEnabled>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d104      	bne.n	8001e76 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff facb 	bl	800140c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e76:	f7ff f997 	bl	80011a8 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d914      	bls.n	8001eae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d00d      	beq.n	8001eae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	2210      	movs	r2, #16
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e007      	b.n	8001ebe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d1d0      	bne.n	8001e5e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b004      	add	sp, #16
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	80000017 	.word	0x80000017
 8001ecc:	40012708 	.word	0x40012708
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	00030d40 	.word	0x00030d40

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	0002      	movs	r2, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b7f      	cmp	r3, #127	; 0x7f
 8001eec:	d828      	bhi.n	8001f40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eee:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <__NVIC_SetPriority+0xd4>)
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b25b      	sxtb	r3, r3
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	33c0      	adds	r3, #192	; 0xc0
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	589b      	ldr	r3, [r3, r2]
 8001efe:	1dfa      	adds	r2, r7, #7
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	0011      	movs	r1, r2
 8001f04:	2203      	movs	r2, #3
 8001f06:	400a      	ands	r2, r1
 8001f08:	00d2      	lsls	r2, r2, #3
 8001f0a:	21ff      	movs	r1, #255	; 0xff
 8001f0c:	4091      	lsls	r1, r2
 8001f0e:	000a      	movs	r2, r1
 8001f10:	43d2      	mvns	r2, r2
 8001f12:	401a      	ands	r2, r3
 8001f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	22ff      	movs	r2, #255	; 0xff
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	0018      	movs	r0, r3
 8001f24:	2303      	movs	r3, #3
 8001f26:	4003      	ands	r3, r0
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f2c:	481f      	ldr	r0, [pc, #124]	; (8001fac <__NVIC_SetPriority+0xd4>)
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	430a      	orrs	r2, r1
 8001f38:	33c0      	adds	r3, #192	; 0xc0
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f3e:	e031      	b.n	8001fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <__NVIC_SetPriority+0xd8>)
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	0019      	movs	r1, r3
 8001f48:	230f      	movs	r3, #15
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	3b08      	subs	r3, #8
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3306      	adds	r3, #6
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	3304      	adds	r3, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	1dfa      	adds	r2, r7, #7
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	0011      	movs	r1, r2
 8001f60:	2203      	movs	r2, #3
 8001f62:	400a      	ands	r2, r1
 8001f64:	00d2      	lsls	r2, r2, #3
 8001f66:	21ff      	movs	r1, #255	; 0xff
 8001f68:	4091      	lsls	r1, r2
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	43d2      	mvns	r2, r2
 8001f6e:	401a      	ands	r2, r3
 8001f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	22ff      	movs	r2, #255	; 0xff
 8001f78:	401a      	ands	r2, r3
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	2303      	movs	r3, #3
 8001f82:	4003      	ands	r3, r0
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f88:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <__NVIC_SetPriority+0xd8>)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	001c      	movs	r4, r3
 8001f90:	230f      	movs	r3, #15
 8001f92:	4023      	ands	r3, r4
 8001f94:	3b08      	subs	r3, #8
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	3306      	adds	r3, #6
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	18c3      	adds	r3, r0, r3
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b003      	add	sp, #12
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1e5a      	subs	r2, r3, #1
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	045b      	lsls	r3, r3, #17
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d301      	bcc.n	8001fcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e010      	b.n	8001fee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <SysTick_Config+0x44>)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	3a01      	subs	r2, #1
 8001fd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	2103      	movs	r1, #3
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff ff7c 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <SysTick_Config+0x44>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe6:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <SysTick_Config+0x44>)
 8001fe8:	2207      	movs	r2, #7
 8001fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	e000e010 	.word	0xe000e010

08001ffc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	210f      	movs	r1, #15
 8002008:	187b      	adds	r3, r7, r1
 800200a:	1c02      	adds	r2, r0, #0
 800200c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	187b      	adds	r3, r7, r1
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b25b      	sxtb	r3, r3
 8002016:	0011      	movs	r1, r2
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ffbf 	bl	8001fb4 <SysTick_Config>
 8002036:	0003      	movs	r3, r0
}
 8002038:	0018      	movs	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	e147      	b.n	80022e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4091      	lsls	r1, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d100      	bne.n	8002068 <HAL_GPIO_Init+0x28>
 8002066:	e138      	b.n	80022da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	4013      	ands	r3, r2
 8002070:	2b01      	cmp	r3, #1
 8002072:	d005      	beq.n	8002080 <HAL_GPIO_Init+0x40>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
 800207c:	2b02      	cmp	r3, #2
 800207e:	d130      	bne.n	80020e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	409a      	lsls	r2, r3
 800208e:	0013      	movs	r3, r2
 8002090:	43da      	mvns	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	0013      	movs	r3, r2
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b6:	2201      	movs	r2, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	43da      	mvns	r2, r3
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	2201      	movs	r2, #1
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
 80020d4:	0013      	movs	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2203      	movs	r2, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d017      	beq.n	800211e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	409a      	lsls	r2, r3
 80020fc:	0013      	movs	r3, r2
 80020fe:	43da      	mvns	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	409a      	lsls	r2, r3
 8002110:	0013      	movs	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2203      	movs	r2, #3
 8002124:	4013      	ands	r3, r2
 8002126:	2b02      	cmp	r3, #2
 8002128:	d123      	bne.n	8002172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	58d3      	ldr	r3, [r2, r3]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2207      	movs	r2, #7
 800213c:	4013      	ands	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	409a      	lsls	r2, r3
 8002144:	0013      	movs	r3, r2
 8002146:	43da      	mvns	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2107      	movs	r1, #7
 8002156:	400b      	ands	r3, r1
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	409a      	lsls	r2, r3
 8002180:	0013      	movs	r3, r2
 8002182:	43da      	mvns	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2203      	movs	r2, #3
 8002190:	401a      	ands	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	23c0      	movs	r3, #192	; 0xc0
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	4013      	ands	r3, r2
 80021b0:	d100      	bne.n	80021b4 <HAL_GPIO_Init+0x174>
 80021b2:	e092      	b.n	80022da <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3318      	adds	r3, #24
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	589b      	ldr	r3, [r3, r2]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2203      	movs	r2, #3
 80021c6:	4013      	ands	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	220f      	movs	r2, #15
 80021cc:	409a      	lsls	r2, r3
 80021ce:	0013      	movs	r3, r2
 80021d0:	43da      	mvns	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	23a0      	movs	r3, #160	; 0xa0
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	429a      	cmp	r2, r3
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0x1ca>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a45      	ldr	r2, [pc, #276]	; (80022fc <HAL_GPIO_Init+0x2bc>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00d      	beq.n	8002206 <HAL_GPIO_Init+0x1c6>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a44      	ldr	r2, [pc, #272]	; (8002300 <HAL_GPIO_Init+0x2c0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x1c2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a43      	ldr	r2, [pc, #268]	; (8002304 <HAL_GPIO_Init+0x2c4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_GPIO_Init+0x1be>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x1cc>
 80021fe:	2305      	movs	r3, #5
 8002200:	e004      	b.n	800220c <HAL_GPIO_Init+0x1cc>
 8002202:	2302      	movs	r3, #2
 8002204:	e002      	b.n	800220c <HAL_GPIO_Init+0x1cc>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_GPIO_Init+0x1cc>
 800220a:	2300      	movs	r3, #0
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	2103      	movs	r1, #3
 8002210:	400a      	ands	r2, r1
 8002212:	00d2      	lsls	r2, r2, #3
 8002214:	4093      	lsls	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800221c:	4936      	ldr	r1, [pc, #216]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3318      	adds	r3, #24
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43da      	mvns	r2, r3
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	035b      	lsls	r3, r3, #13
 8002242:	4013      	ands	r3, r2
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43da      	mvns	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	039b      	lsls	r3, r3, #14
 800226c:	4013      	ands	r3, r2
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800227e:	4a1e      	ldr	r2, [pc, #120]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 8002280:	2384      	movs	r3, #132	; 0x84
 8002282:	58d3      	ldr	r3, [r2, r3]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43da      	mvns	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	029b      	lsls	r3, r3, #10
 8002298:	4013      	ands	r3, r2
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022a4:	4914      	ldr	r1, [pc, #80]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 80022a6:	2284      	movs	r2, #132	; 0x84
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	58d3      	ldr	r3, [r2, r3]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43da      	mvns	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	4013      	ands	r3, r2
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022d2:	4909      	ldr	r1, [pc, #36]	; (80022f8 <HAL_GPIO_Init+0x2b8>)
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	40da      	lsrs	r2, r3
 80022e8:	1e13      	subs	r3, r2, #0
 80022ea:	d000      	beq.n	80022ee <HAL_GPIO_Init+0x2ae>
 80022ec:	e6b0      	b.n	8002050 <HAL_GPIO_Init+0x10>
  }
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b006      	add	sp, #24
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021800 	.word	0x40021800
 80022fc:	50000400 	.word	0x50000400
 8002300:	50000800 	.word	0x50000800
 8002304:	50000c00 	.word	0x50000c00

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	0008      	movs	r0, r1
 8002312:	0011      	movs	r1, r2
 8002314:	1cbb      	adds	r3, r7, #2
 8002316:	1c02      	adds	r2, r0, #0
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	1c7b      	adds	r3, r7, #1
 800231c:	1c0a      	adds	r2, r1, #0
 800231e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002320:	1c7b      	adds	r3, r7, #1
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002328:	1cbb      	adds	r3, r7, #2
 800232a:	881a      	ldrh	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002332:	1cbb      	adds	r3, r7, #2
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e08f      	b.n	8002476 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2241      	movs	r2, #65	; 0x41
 800235a:	5c9b      	ldrb	r3, [r3, r2]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2240      	movs	r2, #64	; 0x40
 8002366:	2100      	movs	r1, #0
 8002368:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f7fe fd43 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2241      	movs	r2, #65	; 0x41
 8002376:	2124      	movs	r1, #36	; 0x24
 8002378:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2101      	movs	r1, #1
 8002386:	438a      	bics	r2, r1
 8002388:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	493b      	ldr	r1, [pc, #236]	; (8002480 <HAL_I2C_Init+0x13c>)
 8002394:	400a      	ands	r2, r1
 8002396:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4938      	ldr	r1, [pc, #224]	; (8002484 <HAL_I2C_Init+0x140>)
 80023a4:	400a      	ands	r2, r1
 80023a6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d108      	bne.n	80023c2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	0209      	lsls	r1, r1, #8
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	e007      	b.n	80023d2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2184      	movs	r1, #132	; 0x84
 80023cc:	0209      	lsls	r1, r1, #8
 80023ce:	430a      	orrs	r2, r1
 80023d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d109      	bne.n	80023ee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0109      	lsls	r1, r1, #4
 80023e8:	430a      	orrs	r2, r1
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	e007      	b.n	80023fe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4923      	ldr	r1, [pc, #140]	; (8002488 <HAL_I2C_Init+0x144>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4920      	ldr	r1, [pc, #128]	; (800248c <HAL_I2C_Init+0x148>)
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	491a      	ldr	r1, [pc, #104]	; (8002484 <HAL_I2C_Init+0x140>)
 800241a:	400a      	ands	r2, r1
 800241c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	431a      	orrs	r2, r3
 8002428:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69d9      	ldr	r1, [r3, #28]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1a      	ldr	r2, [r3, #32]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2101      	movs	r1, #1
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2241      	movs	r2, #65	; 0x41
 8002462:	2120      	movs	r1, #32
 8002464:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2242      	movs	r2, #66	; 0x42
 8002470:	2100      	movs	r1, #0
 8002472:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b002      	add	sp, #8
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	f0ffffff 	.word	0xf0ffffff
 8002484:	ffff7fff 	.word	0xffff7fff
 8002488:	fffff7ff 	.word	0xfffff7ff
 800248c:	02008000 	.word	0x02008000

08002490 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	0008      	movs	r0, r1
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	0019      	movs	r1, r3
 800249e:	230a      	movs	r3, #10
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	1c02      	adds	r2, r0, #0
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	2308      	movs	r3, #8
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	1c0a      	adds	r2, r1, #0
 80024ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2241      	movs	r2, #65	; 0x41
 80024b2:	5c9b      	ldrb	r3, [r3, r2]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d000      	beq.n	80024bc <HAL_I2C_Master_Transmit+0x2c>
 80024ba:	e10a      	b.n	80026d2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2240      	movs	r2, #64	; 0x40
 80024c0:	5c9b      	ldrb	r3, [r3, r2]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Master_Transmit+0x3a>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e104      	b.n	80026d4 <HAL_I2C_Master_Transmit+0x244>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2240      	movs	r2, #64	; 0x40
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024d2:	f7fe fe69 	bl	80011a8 <HAL_GetTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	0219      	lsls	r1, r3, #8
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2319      	movs	r3, #25
 80024e6:	2201      	movs	r2, #1
 80024e8:	f000 fa1a 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 80024ec:	1e03      	subs	r3, r0, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0ef      	b.n	80026d4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2241      	movs	r2, #65	; 0x41
 80024f8:	2121      	movs	r1, #33	; 0x21
 80024fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2242      	movs	r2, #66	; 0x42
 8002500:	2110      	movs	r1, #16
 8002502:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2208      	movs	r2, #8
 8002514:	18ba      	adds	r2, r7, r2
 8002516:	8812      	ldrh	r2, [r2, #0]
 8002518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	2bff      	cmp	r3, #255	; 0xff
 8002528:	d906      	bls.n	8002538 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	22ff      	movs	r2, #255	; 0xff
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	045b      	lsls	r3, r3, #17
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e007      	b.n	8002548 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	049b      	lsls	r3, r3, #18
 8002546:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d027      	beq.n	80025a0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	697c      	ldr	r4, [r7, #20]
 800258c:	230a      	movs	r3, #10
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	8819      	ldrh	r1, [r3, #0]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	4b51      	ldr	r3, [pc, #324]	; (80026dc <HAL_I2C_Master_Transmit+0x24c>)
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	0023      	movs	r3, r4
 800259a:	f000 fba3 	bl	8002ce4 <I2C_TransferConfig>
 800259e:	e06f      	b.n	8002680 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	697c      	ldr	r4, [r7, #20]
 80025a8:	230a      	movs	r3, #10
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	8819      	ldrh	r1, [r3, #0]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <HAL_I2C_Master_Transmit+0x24c>)
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	0023      	movs	r3, r4
 80025b6:	f000 fb95 	bl	8002ce4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025ba:	e061      	b.n	8002680 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 fa04 	bl	80029d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80025c8:	1e03      	subs	r3, r0, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e081      	b.n	80026d4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03a      	beq.n	8002680 <HAL_I2C_Master_Transmit+0x1f0>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d136      	bne.n	8002680 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	0013      	movs	r3, r2
 800261c:	2200      	movs	r2, #0
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	f000 f97e 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e053      	b.n	80026d4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d911      	bls.n	800265a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	22ff      	movs	r2, #255	; 0xff
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	b2da      	uxtb	r2, r3
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	045c      	lsls	r4, r3, #17
 8002646:	230a      	movs	r3, #10
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	8819      	ldrh	r1, [r3, #0]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	0023      	movs	r3, r4
 8002654:	f000 fb46 	bl	8002ce4 <I2C_TransferConfig>
 8002658:	e012      	b.n	8002680 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	b2da      	uxtb	r2, r3
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	049c      	lsls	r4, r3, #18
 800266e:	230a      	movs	r3, #10
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	8819      	ldrh	r1, [r3, #0]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	2300      	movs	r3, #0
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	0023      	movs	r3, r4
 800267c:	f000 fb32 	bl	8002ce4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d198      	bne.n	80025bc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	0018      	movs	r0, r3
 8002692:	f000 f9e3 	bl	8002a5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e01a      	b.n	80026d4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2220      	movs	r2, #32
 80026a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	490b      	ldr	r1, [pc, #44]	; (80026e0 <HAL_I2C_Master_Transmit+0x250>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2241      	movs	r2, #65	; 0x41
 80026ba:	2120      	movs	r1, #32
 80026bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2242      	movs	r2, #66	; 0x42
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2240      	movs	r2, #64	; 0x40
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
  }
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b007      	add	sp, #28
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	80002000 	.word	0x80002000
 80026e0:	fe00e800 	.word	0xfe00e800

080026e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	230a      	movs	r3, #10
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	1c0a      	adds	r2, r1, #0
 80026f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2241      	movs	r2, #65	; 0x41
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	d000      	beq.n	800270a <HAL_I2C_IsDeviceReady+0x26>
 8002708:	e0df      	b.n	80028ca <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	401a      	ands	r2, r3
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	429a      	cmp	r2, r3
 800271c:	d101      	bne.n	8002722 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	e0d4      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2240      	movs	r2, #64	; 0x40
 8002726:	5c9b      	ldrb	r3, [r3, r2]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_I2C_IsDeviceReady+0x4c>
 800272c:	2302      	movs	r3, #2
 800272e:	e0cd      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x1e8>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2240      	movs	r2, #64	; 0x40
 8002734:	2101      	movs	r1, #1
 8002736:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2241      	movs	r2, #65	; 0x41
 800273c:	2124      	movs	r1, #36	; 0x24
 800273e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_I2C_IsDeviceReady+0x7a>
 800274e:	230a      	movs	r3, #10
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	059b      	lsls	r3, r3, #22
 8002756:	0d9b      	lsrs	r3, r3, #22
 8002758:	4a5e      	ldr	r2, [pc, #376]	; (80028d4 <HAL_I2C_IsDeviceReady+0x1f0>)
 800275a:	431a      	orrs	r2, r3
 800275c:	e006      	b.n	800276c <HAL_I2C_IsDeviceReady+0x88>
 800275e:	230a      	movs	r3, #10
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	059b      	lsls	r3, r3, #22
 8002766:	0d9b      	lsrs	r3, r3, #22
 8002768:	4a5b      	ldr	r2, [pc, #364]	; (80028d8 <HAL_I2C_IsDeviceReady+0x1f4>)
 800276a:	431a      	orrs	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fd19 	bl	80011a8 <HAL_GetTick>
 8002776:	0003      	movs	r3, r0
 8002778:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2220      	movs	r2, #32
 8002782:	4013      	ands	r3, r2
 8002784:	3b20      	subs	r3, #32
 8002786:	425a      	negs	r2, r3
 8002788:	4153      	adcs	r3, r2
 800278a:	b2da      	uxtb	r2, r3
 800278c:	231f      	movs	r3, #31
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2210      	movs	r2, #16
 800279a:	4013      	ands	r3, r2
 800279c:	3b10      	subs	r3, #16
 800279e:	425a      	negs	r2, r3
 80027a0:	4153      	adcs	r3, r2
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	231e      	movs	r3, #30
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80027aa:	e035      	b.n	8002818 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3301      	adds	r3, #1
 80027b0:	d01a      	beq.n	80027e8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027b2:	f7fe fcf9 	bl	80011a8 <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <HAL_I2C_IsDeviceReady+0xe4>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10f      	bne.n	80027e8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2241      	movs	r2, #65	; 0x41
 80027cc:	2120      	movs	r1, #32
 80027ce:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	2220      	movs	r2, #32
 80027d6:	431a      	orrs	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e071      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2220      	movs	r2, #32
 80027f0:	4013      	ands	r3, r2
 80027f2:	3b20      	subs	r3, #32
 80027f4:	425a      	negs	r2, r3
 80027f6:	4153      	adcs	r3, r2
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	231f      	movs	r3, #31
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2210      	movs	r2, #16
 8002808:	4013      	ands	r3, r2
 800280a:	3b10      	subs	r3, #16
 800280c:	425a      	negs	r2, r3
 800280e:	4153      	adcs	r3, r2
 8002810:	b2da      	uxtb	r2, r3
 8002812:	231e      	movs	r3, #30
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002818:	231f      	movs	r3, #31
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <HAL_I2C_IsDeviceReady+0x148>
 8002822:	231e      	movs	r3, #30
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0bf      	beq.n	80027ac <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2210      	movs	r2, #16
 8002834:	4013      	ands	r3, r2
 8002836:	2b10      	cmp	r3, #16
 8002838:	d01a      	beq.n	8002870 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	0013      	movs	r3, r2
 8002844:	2200      	movs	r2, #0
 8002846:	2120      	movs	r1, #32
 8002848:	f000 f86a 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e03b      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2220      	movs	r2, #32
 800285a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2241      	movs	r2, #65	; 0x41
 8002860:	2120      	movs	r1, #32
 8002862:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	; 0x40
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e02d      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	0013      	movs	r3, r2
 800287a:	2200      	movs	r2, #0
 800287c:	2120      	movs	r1, #32
 800287e:	f000 f84f 	bl	8002920 <I2C_WaitOnFlagUntilTimeout>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e020      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2210      	movs	r2, #16
 8002890:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2220      	movs	r2, #32
 8002898:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d900      	bls.n	80028aa <HAL_I2C_IsDeviceReady+0x1c6>
 80028a8:	e74d      	b.n	8002746 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2241      	movs	r2, #65	; 0x41
 80028ae:	2120      	movs	r1, #32
 80028b0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	2220      	movs	r2, #32
 80028b8:	431a      	orrs	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2240      	movs	r2, #64	; 0x40
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b008      	add	sp, #32
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	02002000 	.word	0x02002000
 80028d8:	02002800 	.word	0x02002800

080028dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2202      	movs	r2, #2
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d103      	bne.n	80028fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2200      	movs	r2, #0
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2201      	movs	r2, #1
 8002902:	4013      	ands	r3, r2
 8002904:	2b01      	cmp	r3, #1
 8002906:	d007      	beq.n	8002918 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	430a      	orrs	r2, r1
 8002916:	619a      	str	r2, [r3, #24]
  }
}
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}

08002920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002930:	e03a      	b.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	6839      	ldr	r1, [r7, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0018      	movs	r0, r3
 800293a:	f000 f8d3 	bl	8002ae4 <I2C_IsErrorOccurred>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d001      	beq.n	8002946 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e040      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	d02d      	beq.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7fe fc2c 	bl	80011a8 <HAL_GetTick>
 8002950:	0002      	movs	r2, r0
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x42>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d122      	bne.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	4013      	ands	r3, r2
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	425a      	negs	r2, r3
 8002972:	4153      	adcs	r3, r2
 8002974:	b2db      	uxtb	r3, r3
 8002976:	001a      	movs	r2, r3
 8002978:	1dfb      	adds	r3, r7, #7
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d113      	bne.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002984:	2220      	movs	r2, #32
 8002986:	431a      	orrs	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2241      	movs	r2, #65	; 0x41
 8002990:	2120      	movs	r1, #32
 8002992:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2242      	movs	r2, #66	; 0x42
 8002998:	2100      	movs	r1, #0
 800299a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2240      	movs	r2, #64	; 0x40
 80029a0:	2100      	movs	r1, #0
 80029a2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e00f      	b.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4013      	ands	r3, r2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	425a      	negs	r2, r3
 80029b8:	4153      	adcs	r3, r2
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	001a      	movs	r2, r3
 80029be:	1dfb      	adds	r3, r7, #7
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d0b5      	beq.n	8002932 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029dc:	e032      	b.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 f87d 	bl	8002ae4 <I2C_IsErrorOccurred>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e030      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	3301      	adds	r3, #1
 80029f6:	d025      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f8:	f7fe fbd6 	bl	80011a8 <HAL_GetTick>
 80029fc:	0002      	movs	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d302      	bcc.n	8002a0e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11a      	bne.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2202      	movs	r2, #2
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d013      	beq.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	2220      	movs	r2, #32
 8002a22:	431a      	orrs	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2241      	movs	r2, #65	; 0x41
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2242      	movs	r2, #66	; 0x42
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2240      	movs	r2, #64	; 0x40
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e007      	b.n	8002a54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d1c5      	bne.n	80029de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b004      	add	sp, #16
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a68:	e02f      	b.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f837 	bl	8002ae4 <I2C_IsErrorOccurred>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02d      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7fe fb93 	bl	80011a8 <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	d013      	beq.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2241      	movs	r2, #65	; 0x41
 8002ab2:	2120      	movs	r1, #32
 8002ab4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2242      	movs	r2, #66	; 0x42
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2240      	movs	r2, #64	; 0x40
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e007      	b.n	8002ada <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d1c8      	bne.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b004      	add	sp, #16
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b08b      	sub	sp, #44	; 0x2c
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2327      	movs	r3, #39	; 0x27
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <I2C_IsErrorOccurred+0x2e>
 8002b10:	e082      	b.n	8002c18 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2210      	movs	r2, #16
 8002b18:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b1a:	e060      	b.n	8002bde <I2C_IsErrorOccurred+0xfa>
 8002b1c:	2427      	movs	r4, #39	; 0x27
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	193a      	adds	r2, r7, r4
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	d058      	beq.n	8002bde <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	f7fe fb3c 	bl	80011a8 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d306      	bcc.n	8002b4a <I2C_IsErrorOccurred+0x66>
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	193a      	adds	r2, r7, r4
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d149      	bne.n	8002bde <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	01db      	lsls	r3, r3, #7
 8002b54:	4013      	ands	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b58:	2013      	movs	r0, #19
 8002b5a:	183b      	adds	r3, r7, r0
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	2142      	movs	r1, #66	; 0x42
 8002b60:	5c52      	ldrb	r2, [r2, r1]
 8002b62:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	401a      	ands	r2, r3
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d126      	bne.n	8002bc6 <I2C_IsErrorOccurred+0xe2>
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	01db      	lsls	r3, r3, #7
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d021      	beq.n	8002bc6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d01d      	beq.n	8002bc6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	01c9      	lsls	r1, r1, #7
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b9c:	f7fe fb04 	bl	80011a8 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba4:	e00f      	b.n	8002bc6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ba6:	f7fe faff 	bl	80011a8 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b19      	cmp	r3, #25
 8002bb2:	d908      	bls.n	8002bc6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002bbc:	2327      	movs	r3, #39	; 0x27
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]

              break;
 8002bc4:	e00b      	b.n	8002bde <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2127      	movs	r1, #39	; 0x27
 8002bd2:	187a      	adds	r2, r7, r1
 8002bd4:	1879      	adds	r1, r7, r1
 8002bd6:	7809      	ldrb	r1, [r1, #0]
 8002bd8:	7011      	strb	r1, [r2, #0]
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d1e3      	bne.n	8002ba6 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2220      	movs	r2, #32
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d004      	beq.n	8002bf6 <I2C_IsErrorOccurred+0x112>
 8002bec:	2327      	movs	r3, #39	; 0x27
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d092      	beq.n	8002b1c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bf6:	2327      	movs	r3, #39	; 0x27
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d103      	bne.n	8002c08 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2220      	movs	r2, #32
 8002c06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c10:	2327      	movs	r3, #39	; 0x27
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4013      	ands	r3, r2
 8002c28:	d00c      	beq.n	8002c44 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	0052      	lsls	r2, r2, #1
 8002c3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c3c:	2327      	movs	r3, #39	; 0x27
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d00c      	beq.n	8002c68 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	2208      	movs	r2, #8
 8002c52:	4313      	orrs	r3, r2
 8002c54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	00d2      	lsls	r2, r2, #3
 8002c5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c60:	2327      	movs	r3, #39	; 0x27
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d00c      	beq.n	8002c8c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2202      	movs	r2, #2
 8002c76:	4313      	orrs	r3, r2
 8002c78:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2280      	movs	r2, #128	; 0x80
 8002c80:	0092      	lsls	r2, r2, #2
 8002c82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c84:	2327      	movs	r3, #39	; 0x27
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c8c:	2327      	movs	r3, #39	; 0x27
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01d      	beq.n	8002cd2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff fe1f 	bl	80028dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	490d      	ldr	r1, [pc, #52]	; (8002ce0 <I2C_IsErrorOccurred+0x1fc>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2241      	movs	r2, #65	; 0x41
 8002cbe:	2120      	movs	r1, #32
 8002cc0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2242      	movs	r2, #66	; 0x42
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2240      	movs	r2, #64	; 0x40
 8002cce:	2100      	movs	r1, #0
 8002cd0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002cd2:	2327      	movs	r3, #39	; 0x27
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	781b      	ldrb	r3, [r3, #0]
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b00b      	add	sp, #44	; 0x2c
 8002cde:	bd90      	pop	{r4, r7, pc}
 8002ce0:	fe00e800 	.word	0xfe00e800

08002ce4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	0008      	movs	r0, r1
 8002cee:	0011      	movs	r1, r2
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	240a      	movs	r4, #10
 8002cf4:	193b      	adds	r3, r7, r4
 8002cf6:	1c02      	adds	r2, r0, #0
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	2009      	movs	r0, #9
 8002cfc:	183b      	adds	r3, r7, r0
 8002cfe:	1c0a      	adds	r2, r1, #0
 8002d00:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	059b      	lsls	r3, r3, #22
 8002d08:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d0a:	183b      	adds	r3, r7, r0
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	0419      	lsls	r1, r3, #16
 8002d10:	23ff      	movs	r3, #255	; 0xff
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d16:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2e:	0d51      	lsrs	r1, r2, #21
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	00d2      	lsls	r2, r2, #3
 8002d34:	400a      	ands	r2, r1
 8002d36:	4907      	ldr	r1, [pc, #28]	; (8002d54 <I2C_TransferConfig+0x70>)
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	43d2      	mvns	r2, r2
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	0011      	movs	r1, r2
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b007      	add	sp, #28
 8002d50:	bd90      	pop	{r4, r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	03ff63ff 	.word	0x03ff63ff

08002d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2241      	movs	r2, #65	; 0x41
 8002d66:	5c9b      	ldrb	r3, [r3, r2]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d138      	bne.n	8002de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	5c9b      	ldrb	r3, [r3, r2]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e032      	b.n	8002de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2240      	movs	r2, #64	; 0x40
 8002d80:	2101      	movs	r1, #1
 8002d82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2241      	movs	r2, #65	; 0x41
 8002d88:	2124      	movs	r1, #36	; 0x24
 8002d8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	438a      	bics	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4911      	ldr	r1, [pc, #68]	; (8002dec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002da8:	400a      	ands	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2241      	movs	r2, #65	; 0x41
 8002dd0:	2120      	movs	r1, #32
 8002dd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b002      	add	sp, #8
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	ffffefff 	.word	0xffffefff

08002df0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2241      	movs	r2, #65	; 0x41
 8002dfe:	5c9b      	ldrb	r3, [r3, r2]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d139      	bne.n	8002e7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2240      	movs	r2, #64	; 0x40
 8002e0a:	5c9b      	ldrb	r3, [r3, r2]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e033      	b.n	8002e7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2240      	movs	r2, #64	; 0x40
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2241      	movs	r2, #65	; 0x41
 8002e20:	2124      	movs	r1, #36	; 0x24
 8002e22:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	438a      	bics	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2241      	movs	r2, #65	; 0x41
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2240      	movs	r2, #64	; 0x40
 8002e72:	2100      	movs	r1, #0
 8002e74:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	e000      	b.n	8002e7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
  }
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b004      	add	sp, #16
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	fffff0ff 	.word	0xfffff0ff

08002e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	0019      	movs	r1, r3
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d11f      	bne.n	8002eec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	0013      	movs	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	189b      	adds	r3, r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4912      	ldr	r1, [pc, #72]	; (8002f04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7fd f934 	bl	8000128 <__udivsi3>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ec6:	e008      	b.n	8002eda <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e001      	b.n	8002eda <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e009      	b.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d0ed      	beq.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	0018      	movs	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	fffff9ff 	.word	0xfffff9ff
 8002f00:	20000000 	.word	0x20000000
 8002f04:	000f4240 	.word	0x000f4240

08002f08 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <LL_RCC_GetAPB1Prescaler+0x14>)
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	23e0      	movs	r3, #224	; 0xe0
 8002f12:	01db      	lsls	r3, r3, #7
 8002f14:	4013      	ands	r3, r2
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e2fe      	b.n	8003530 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2201      	movs	r2, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <HAL_RCC_OscConfig+0x1e>
 8002f3c:	e07c      	b.n	8003038 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3e:	4bc3      	ldr	r3, [pc, #780]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2238      	movs	r2, #56	; 0x38
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f48:	4bc0      	ldr	r3, [pc, #768]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	4013      	ands	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3e>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d10b      	bne.n	8002f7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	4bb9      	ldr	r3, [pc, #740]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	029b      	lsls	r3, r3, #10
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d062      	beq.n	8003036 <HAL_RCC_OscConfig+0x116>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d15e      	bne.n	8003036 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e2d9      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	025b      	lsls	r3, r3, #9
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_OscConfig+0x78>
 8002f88:	4bb0      	ldr	r3, [pc, #704]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4baf      	ldr	r3, [pc, #700]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	0249      	lsls	r1, r1, #9
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e020      	b.n	8002fda <HAL_RCC_OscConfig+0xba>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	23a0      	movs	r3, #160	; 0xa0
 8002f9e:	02db      	lsls	r3, r3, #11
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d10e      	bne.n	8002fc2 <HAL_RCC_OscConfig+0xa2>
 8002fa4:	4ba9      	ldr	r3, [pc, #676]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4ba8      	ldr	r3, [pc, #672]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	02c9      	lsls	r1, r1, #11
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	4ba6      	ldr	r3, [pc, #664]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4ba5      	ldr	r3, [pc, #660]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0249      	lsls	r1, r1, #9
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e00b      	b.n	8002fda <HAL_RCC_OscConfig+0xba>
 8002fc2:	4ba2      	ldr	r3, [pc, #648]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4ba1      	ldr	r3, [pc, #644]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002fc8:	49a1      	ldr	r1, [pc, #644]	; (8003250 <HAL_RCC_OscConfig+0x330>)
 8002fca:	400a      	ands	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	4b9f      	ldr	r3, [pc, #636]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b9e      	ldr	r3, [pc, #632]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8002fd4:	499f      	ldr	r1, [pc, #636]	; (8003254 <HAL_RCC_OscConfig+0x334>)
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d014      	beq.n	800300c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe2:	f7fe f8e1 	bl	80011a8 <HAL_GetTick>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe f8dc 	bl	80011a8 <HAL_GetTick>
 8002ff0:	0002      	movs	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e298      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffe:	4b93      	ldr	r3, [pc, #588]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	029b      	lsls	r3, r3, #10
 8003006:	4013      	ands	r3, r2
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0xcc>
 800300a:	e015      	b.n	8003038 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe f8cc 	bl	80011a8 <HAL_GetTick>
 8003010:	0003      	movs	r3, r0
 8003012:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003016:	f7fe f8c7 	bl	80011a8 <HAL_GetTick>
 800301a:	0002      	movs	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b64      	cmp	r3, #100	; 0x64
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e283      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003028:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	029b      	lsls	r3, r3, #10
 8003030:	4013      	ands	r3, r2
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0xf6>
 8003034:	e000      	b.n	8003038 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003036:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2202      	movs	r2, #2
 800303e:	4013      	ands	r3, r2
 8003040:	d100      	bne.n	8003044 <HAL_RCC_OscConfig+0x124>
 8003042:	e099      	b.n	8003178 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003044:	4b81      	ldr	r3, [pc, #516]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2238      	movs	r2, #56	; 0x38
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304e:	4b7f      	ldr	r3, [pc, #508]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2203      	movs	r2, #3
 8003054:	4013      	ands	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b10      	cmp	r3, #16
 800305c:	d102      	bne.n	8003064 <HAL_RCC_OscConfig+0x144>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d002      	beq.n	800306a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d135      	bne.n	80030d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800306a:	4b78      	ldr	r3, [pc, #480]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4013      	ands	r3, r2
 8003074:	d005      	beq.n	8003082 <HAL_RCC_OscConfig+0x162>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e256      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	4b72      	ldr	r3, [pc, #456]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4a74      	ldr	r2, [pc, #464]	; (8003258 <HAL_RCC_OscConfig+0x338>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	4b6e      	ldr	r3, [pc, #440]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003094:	430a      	orrs	r2, r1
 8003096:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800309e:	4b6b      	ldr	r3, [pc, #428]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6e      	ldr	r2, [pc, #440]	; (800325c <HAL_RCC_OscConfig+0x33c>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80030b2:	4b66      	ldr	r3, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	0adb      	lsrs	r3, r3, #11
 80030b8:	2207      	movs	r2, #7
 80030ba:	4013      	ands	r3, r2
 80030bc:	4a68      	ldr	r2, [pc, #416]	; (8003260 <HAL_RCC_OscConfig+0x340>)
 80030be:	40da      	lsrs	r2, r3
 80030c0:	4b68      	ldr	r3, [pc, #416]	; (8003264 <HAL_RCC_OscConfig+0x344>)
 80030c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x348>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7fe f811 	bl	80010f0 <HAL_InitTick>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d051      	beq.n	8003176 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e22c      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d030      	beq.n	8003140 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a5e      	ldr	r2, [pc, #376]	; (800325c <HAL_RCC_OscConfig+0x33c>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	4b57      	ldr	r3, [pc, #348]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80030ee:	430a      	orrs	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80030f2:	4b56      	ldr	r3, [pc, #344]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b55      	ldr	r3, [pc, #340]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	0049      	lsls	r1, r1, #1
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003100:	f7fe f852 	bl	80011a8 <HAL_GetTick>
 8003104:	0003      	movs	r3, r0
 8003106:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe f84d 	bl	80011a8 <HAL_GetTick>
 800310e:	0002      	movs	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e209      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800311c:	4b4b      	ldr	r3, [pc, #300]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	2380      	movs	r3, #128	; 0x80
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4013      	ands	r3, r2
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b48      	ldr	r3, [pc, #288]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a4a      	ldr	r2, [pc, #296]	; (8003258 <HAL_RCC_OscConfig+0x338>)
 800312e:	4013      	ands	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	021a      	lsls	r2, r3, #8
 8003138:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	e01b      	b.n	8003178 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003140:	4b42      	ldr	r3, [pc, #264]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003146:	4949      	ldr	r1, [pc, #292]	; (800326c <HAL_RCC_OscConfig+0x34c>)
 8003148:	400a      	ands	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fe f82c 	bl	80011a8 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003156:	f7fe f827 	bl	80011a8 <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e1e3      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003168:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4013      	ands	r3, r2
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x236>
 8003174:	e000      	b.n	8003178 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003176:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2208      	movs	r2, #8
 800317e:	4013      	ands	r3, r2
 8003180:	d047      	beq.n	8003212 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003182:	4b32      	ldr	r3, [pc, #200]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2238      	movs	r2, #56	; 0x38
 8003188:	4013      	ands	r3, r2
 800318a:	2b18      	cmp	r3, #24
 800318c:	d10a      	bne.n	80031a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800318e:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003192:	2202      	movs	r2, #2
 8003194:	4013      	ands	r3, r2
 8003196:	d03c      	beq.n	8003212 <HAL_RCC_OscConfig+0x2f2>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d138      	bne.n	8003212 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e1c5      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d019      	beq.n	80031e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80031ac:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80031ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80031b2:	2101      	movs	r1, #1
 80031b4:	430a      	orrs	r2, r1
 80031b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fd fff6 	bl	80011a8 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fd fff1 	bl	80011a8 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e1ad      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	2202      	movs	r2, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	d0f1      	beq.n	80031c2 <HAL_RCC_OscConfig+0x2a2>
 80031de:	e018      	b.n	8003212 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80031e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 80031e6:	2101      	movs	r1, #1
 80031e8:	438a      	bics	r2, r1
 80031ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fd ffdc 	bl	80011a8 <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fd ffd7 	bl	80011a8 <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e193      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003208:	4b10      	ldr	r3, [pc, #64]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	d1f1      	bne.n	80031f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2204      	movs	r2, #4
 8003218:	4013      	ands	r3, r2
 800321a:	d100      	bne.n	800321e <HAL_RCC_OscConfig+0x2fe>
 800321c:	e0c6      	b.n	80033ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800321e:	231f      	movs	r3, #31
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2238      	movs	r2, #56	; 0x38
 800322c:	4013      	ands	r3, r2
 800322e:	2b20      	cmp	r3, #32
 8003230:	d11e      	bne.n	8003270 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_OscConfig+0x32c>)
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2202      	movs	r2, #2
 8003238:	4013      	ands	r3, r2
 800323a:	d100      	bne.n	800323e <HAL_RCC_OscConfig+0x31e>
 800323c:	e0b6      	b.n	80033ac <HAL_RCC_OscConfig+0x48c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d000      	beq.n	8003248 <HAL_RCC_OscConfig+0x328>
 8003246:	e0b1      	b.n	80033ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e171      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
 800324c:	40021000 	.word	0x40021000
 8003250:	fffeffff 	.word	0xfffeffff
 8003254:	fffbffff 	.word	0xfffbffff
 8003258:	ffff80ff 	.word	0xffff80ff
 800325c:	ffffc7ff 	.word	0xffffc7ff
 8003260:	00f42400 	.word	0x00f42400
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004
 800326c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003270:	4bb1      	ldr	r3, [pc, #708]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	055b      	lsls	r3, r3, #21
 8003278:	4013      	ands	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_RCC_OscConfig+0x360>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x362>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d011      	beq.n	80032aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4bac      	ldr	r3, [pc, #688]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328a:	4bab      	ldr	r3, [pc, #684]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 800328c:	2180      	movs	r1, #128	; 0x80
 800328e:	0549      	lsls	r1, r1, #21
 8003290:	430a      	orrs	r2, r1
 8003292:	63da      	str	r2, [r3, #60]	; 0x3c
 8003294:	4ba8      	ldr	r3, [pc, #672]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	055b      	lsls	r3, r3, #21
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80032a2:	231f      	movs	r3, #31
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032aa:	4ba4      	ldr	r3, [pc, #656]	; (800353c <HAL_RCC_OscConfig+0x61c>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4013      	ands	r3, r2
 80032b4:	d11a      	bne.n	80032ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032b6:	4ba1      	ldr	r3, [pc, #644]	; (800353c <HAL_RCC_OscConfig+0x61c>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4ba0      	ldr	r3, [pc, #640]	; (800353c <HAL_RCC_OscConfig+0x61c>)
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0049      	lsls	r1, r1, #1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80032c4:	f7fd ff70 	bl	80011a8 <HAL_GetTick>
 80032c8:	0003      	movs	r3, r0
 80032ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fd ff6b 	bl	80011a8 <HAL_GetTick>
 80032d2:	0002      	movs	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e127      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e0:	4b96      	ldr	r3, [pc, #600]	; (800353c <HAL_RCC_OscConfig+0x61c>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4013      	ands	r3, r2
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x3e2>
 80032f4:	4b90      	ldr	r3, [pc, #576]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80032f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032f8:	4b8f      	ldr	r3, [pc, #572]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80032fa:	2101      	movs	r1, #1
 80032fc:	430a      	orrs	r2, r1
 80032fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003300:	e01c      	b.n	800333c <HAL_RCC_OscConfig+0x41c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b05      	cmp	r3, #5
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x404>
 800330a:	4b8b      	ldr	r3, [pc, #556]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 800330c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800330e:	4b8a      	ldr	r3, [pc, #552]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003310:	2104      	movs	r1, #4
 8003312:	430a      	orrs	r2, r1
 8003314:	65da      	str	r2, [r3, #92]	; 0x5c
 8003316:	4b88      	ldr	r3, [pc, #544]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003318:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800331a:	4b87      	ldr	r3, [pc, #540]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 800331c:	2101      	movs	r1, #1
 800331e:	430a      	orrs	r2, r1
 8003320:	65da      	str	r2, [r3, #92]	; 0x5c
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0x41c>
 8003324:	4b84      	ldr	r3, [pc, #528]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003328:	4b83      	ldr	r3, [pc, #524]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 800332a:	2101      	movs	r1, #1
 800332c:	438a      	bics	r2, r1
 800332e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003330:	4b81      	ldr	r3, [pc, #516]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003332:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003334:	4b80      	ldr	r3, [pc, #512]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003336:	2104      	movs	r1, #4
 8003338:	438a      	bics	r2, r1
 800333a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d014      	beq.n	800336e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fd ff30 	bl	80011a8 <HAL_GetTick>
 8003348:	0003      	movs	r3, r0
 800334a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334c:	e009      	b.n	8003362 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fd ff2b 	bl	80011a8 <HAL_GetTick>
 8003352:	0002      	movs	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	4a79      	ldr	r2, [pc, #484]	; (8003540 <HAL_RCC_OscConfig+0x620>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0e6      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003362:	4b75      	ldr	r3, [pc, #468]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	2202      	movs	r2, #2
 8003368:	4013      	ands	r3, r2
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x42e>
 800336c:	e013      	b.n	8003396 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fd ff1b 	bl	80011a8 <HAL_GetTick>
 8003372:	0003      	movs	r3, r0
 8003374:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003376:	e009      	b.n	800338c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fd ff16 	bl	80011a8 <HAL_GetTick>
 800337c:	0002      	movs	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	4a6f      	ldr	r2, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x620>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e0d1      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800338c:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	2202      	movs	r2, #2
 8003392:	4013      	ands	r3, r2
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003396:	231f      	movs	r3, #31
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b65      	ldr	r3, [pc, #404]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80033a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a4:	4b64      	ldr	r3, [pc, #400]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80033a6:	4967      	ldr	r1, [pc, #412]	; (8003544 <HAL_RCC_OscConfig+0x624>)
 80033a8:	400a      	ands	r2, r1
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d100      	bne.n	80033b6 <HAL_RCC_OscConfig+0x496>
 80033b4:	e0bb      	b.n	800352e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b6:	4b60      	ldr	r3, [pc, #384]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2238      	movs	r2, #56	; 0x38
 80033bc:	4013      	ands	r3, r2
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d100      	bne.n	80033c4 <HAL_RCC_OscConfig+0x4a4>
 80033c2:	e07b      	b.n	80034bc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d156      	bne.n	800347a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033cc:	4b5a      	ldr	r3, [pc, #360]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80033d2:	495d      	ldr	r1, [pc, #372]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fd fee6 	bl	80011a8 <HAL_GetTick>
 80033dc:	0003      	movs	r3, r0
 80033de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fd fee1 	bl	80011a8 <HAL_GetTick>
 80033e6:	0002      	movs	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e09d      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	049b      	lsls	r3, r3, #18
 80033fc:	4013      	ands	r3, r2
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003400:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a51      	ldr	r2, [pc, #324]	; (800354c <HAL_RCC_OscConfig+0x62c>)
 8003406:	4013      	ands	r3, r2
 8003408:	0019      	movs	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	431a      	orrs	r2, r3
 800342e:	4b42      	ldr	r3, [pc, #264]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003430:	430a      	orrs	r2, r1
 8003432:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003434:	4b40      	ldr	r3, [pc, #256]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b3f      	ldr	r3, [pc, #252]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	0449      	lsls	r1, r1, #17
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003442:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	0549      	lsls	r1, r1, #21
 800344c:	430a      	orrs	r2, r1
 800344e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd feaa 	bl	80011a8 <HAL_GetTick>
 8003454:	0003      	movs	r3, r0
 8003456:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345a:	f7fd fea5 	bl	80011a8 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e061      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346c:	4b32      	ldr	r3, [pc, #200]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	049b      	lsls	r3, r3, #18
 8003474:	4013      	ands	r3, r2
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x53a>
 8003478:	e059      	b.n	800352e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b2f      	ldr	r3, [pc, #188]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 8003480:	4931      	ldr	r1, [pc, #196]	; (8003548 <HAL_RCC_OscConfig+0x628>)
 8003482:	400a      	ands	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fd fe8f 	bl	80011a8 <HAL_GetTick>
 800348a:	0003      	movs	r3, r0
 800348c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003490:	f7fd fe8a 	bl	80011a8 <HAL_GetTick>
 8003494:	0002      	movs	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e046      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	049b      	lsls	r3, r3, #18
 80034aa:	4013      	ands	r3, r2
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80034ae:	4b22      	ldr	r3, [pc, #136]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80034b4:	4926      	ldr	r1, [pc, #152]	; (8003550 <HAL_RCC_OscConfig+0x630>)
 80034b6:	400a      	ands	r2, r1
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	e038      	b.n	800352e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e033      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80034c8:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_RCC_OscConfig+0x618>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2203      	movs	r2, #3
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d126      	bne.n	800352a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2270      	movs	r2, #112	; 0x70
 80034e0:	401a      	ands	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d11f      	bne.n	800352a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	23fe      	movs	r3, #254	; 0xfe
 80034ee:	01db      	lsls	r3, r3, #7
 80034f0:	401a      	ands	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d116      	bne.n	800352a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	23f8      	movs	r3, #248	; 0xf8
 8003500:	039b      	lsls	r3, r3, #14
 8003502:	401a      	ands	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d10e      	bne.n	800352a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	23e0      	movs	r3, #224	; 0xe0
 8003510:	051b      	lsls	r3, r3, #20
 8003512:	401a      	ands	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	0f5b      	lsrs	r3, r3, #29
 8003520:	075a      	lsls	r2, r3, #29
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b008      	add	sp, #32
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	40007000 	.word	0x40007000
 8003540:	00001388 	.word	0x00001388
 8003544:	efffffff 	.word	0xefffffff
 8003548:	feffffff 	.word	0xfeffffff
 800354c:	11c1808c 	.word	0x11c1808c
 8003550:	eefefffc 	.word	0xeefefffc

08003554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0e9      	b.n	800373c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003568:	4b76      	ldr	r3, [pc, #472]	; (8003744 <HAL_RCC_ClockConfig+0x1f0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2207      	movs	r2, #7
 800356e:	4013      	ands	r3, r2
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d91e      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b73      	ldr	r3, [pc, #460]	; (8003744 <HAL_RCC_ClockConfig+0x1f0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2207      	movs	r2, #7
 800357c:	4393      	bics	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	4b70      	ldr	r3, [pc, #448]	; (8003744 <HAL_RCC_ClockConfig+0x1f0>)
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003588:	f7fd fe0e 	bl	80011a8 <HAL_GetTick>
 800358c:	0003      	movs	r3, r0
 800358e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003590:	e009      	b.n	80035a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003592:	f7fd fe09 	bl	80011a8 <HAL_GetTick>
 8003596:	0002      	movs	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	4a6a      	ldr	r2, [pc, #424]	; (8003748 <HAL_RCC_ClockConfig+0x1f4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0ca      	b.n	800373c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035a6:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2207      	movs	r2, #7
 80035ac:	4013      	ands	r3, r2
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1ee      	bne.n	8003592 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2202      	movs	r2, #2
 80035ba:	4013      	ands	r3, r2
 80035bc:	d015      	beq.n	80035ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2204      	movs	r2, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	d006      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035c8:	4b60      	ldr	r3, [pc, #384]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 80035ce:	21e0      	movs	r1, #224	; 0xe0
 80035d0:	01c9      	lsls	r1, r1, #7
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d6:	4b5d      	ldr	r3, [pc, #372]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4a5d      	ldr	r2, [pc, #372]	; (8003750 <HAL_RCC_ClockConfig+0x1fc>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2201      	movs	r2, #1
 80035f0:	4013      	ands	r3, r2
 80035f2:	d057      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	029b      	lsls	r3, r3, #10
 8003604:	4013      	ands	r3, r2
 8003606:	d12b      	bne.n	8003660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e097      	b.n	800373c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d107      	bne.n	8003624 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003614:	4b4d      	ldr	r3, [pc, #308]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	049b      	lsls	r3, r3, #18
 800361c:	4013      	ands	r3, r2
 800361e:	d11f      	bne.n	8003660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e08b      	b.n	800373c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800362c:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4013      	ands	r3, r2
 8003636:	d113      	bne.n	8003660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e07f      	b.n	800373c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d106      	bne.n	8003652 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 8003646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003648:	2202      	movs	r2, #2
 800364a:	4013      	ands	r3, r2
 800364c:	d108      	bne.n	8003660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e074      	b.n	800373c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003652:	4b3e      	ldr	r3, [pc, #248]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	2202      	movs	r2, #2
 8003658:	4013      	ands	r3, r2
 800365a:	d101      	bne.n	8003660 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e06d      	b.n	800373c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003660:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2207      	movs	r2, #7
 8003666:	4393      	bics	r3, r2
 8003668:	0019      	movs	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4b37      	ldr	r3, [pc, #220]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003674:	f7fd fd98 	bl	80011a8 <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367c:	e009      	b.n	8003692 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367e:	f7fd fd93 	bl	80011a8 <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <HAL_RCC_ClockConfig+0x1f4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e054      	b.n	800373c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2238      	movs	r2, #56	; 0x38
 8003698:	401a      	ands	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1ec      	bne.n	800367e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_ClockConfig+0x1f0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2207      	movs	r2, #7
 80036aa:	4013      	ands	r3, r2
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d21e      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2207      	movs	r2, #7
 80036b8:	4393      	bics	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_RCC_ClockConfig+0x1f0>)
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036c4:	f7fd fd70 	bl	80011a8 <HAL_GetTick>
 80036c8:	0003      	movs	r3, r0
 80036ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036cc:	e009      	b.n	80036e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ce:	f7fd fd6b 	bl	80011a8 <HAL_GetTick>
 80036d2:	0002      	movs	r2, r0
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <HAL_RCC_ClockConfig+0x1f4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e02c      	b.n	800373c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036e2:	4b18      	ldr	r3, [pc, #96]	; (8003744 <HAL_RCC_ClockConfig+0x1f0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2207      	movs	r2, #7
 80036e8:	4013      	ands	r3, r2
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1ee      	bne.n	80036ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2204      	movs	r2, #4
 80036f6:	4013      	ands	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	4a15      	ldr	r2, [pc, #84]	; (8003754 <HAL_RCC_ClockConfig+0x200>)
 8003700:	4013      	ands	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 800370a:	430a      	orrs	r2, r1
 800370c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800370e:	f000 f829 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 8003712:	0001      	movs	r1, r0
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <HAL_RCC_ClockConfig+0x1f8>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	220f      	movs	r2, #15
 800371c:	401a      	ands	r2, r3
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_RCC_ClockConfig+0x204>)
 8003720:	0092      	lsls	r2, r2, #2
 8003722:	58d3      	ldr	r3, [r2, r3]
 8003724:	221f      	movs	r2, #31
 8003726:	4013      	ands	r3, r2
 8003728:	000a      	movs	r2, r1
 800372a:	40da      	lsrs	r2, r3
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_ClockConfig+0x208>)
 800372e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_ClockConfig+0x20c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0018      	movs	r0, r3
 8003736:	f7fd fcdb 	bl	80010f0 <HAL_InitTick>
 800373a:	0003      	movs	r3, r0
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b004      	add	sp, #16
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40022000 	.word	0x40022000
 8003748:	00001388 	.word	0x00001388
 800374c:	40021000 	.word	0x40021000
 8003750:	fffff0ff 	.word	0xfffff0ff
 8003754:	ffff8fff 	.word	0xffff8fff
 8003758:	08005ee8 	.word	0x08005ee8
 800375c:	20000000 	.word	0x20000000
 8003760:	20000004 	.word	0x20000004

08003764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800376a:	4b3c      	ldr	r3, [pc, #240]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2238      	movs	r2, #56	; 0x38
 8003770:	4013      	ands	r3, r2
 8003772:	d10f      	bne.n	8003794 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003774:	4b39      	ldr	r3, [pc, #228]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	0adb      	lsrs	r3, r3, #11
 800377a:	2207      	movs	r2, #7
 800377c:	4013      	ands	r3, r2
 800377e:	2201      	movs	r2, #1
 8003780:	409a      	lsls	r2, r3
 8003782:	0013      	movs	r3, r2
 8003784:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	4835      	ldr	r0, [pc, #212]	; (8003860 <HAL_RCC_GetSysClockFreq+0xfc>)
 800378a:	f7fc fccd 	bl	8000128 <__udivsi3>
 800378e:	0003      	movs	r3, r0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	e05d      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003794:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2238      	movs	r2, #56	; 0x38
 800379a:	4013      	ands	r3, r2
 800379c:	2b08      	cmp	r3, #8
 800379e:	d102      	bne.n	80037a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037a0:	4b30      	ldr	r3, [pc, #192]	; (8003864 <HAL_RCC_GetSysClockFreq+0x100>)
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	e054      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a6:	4b2d      	ldr	r3, [pc, #180]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2238      	movs	r2, #56	; 0x38
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d138      	bne.n	8003824 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80037b2:	4b2a      	ldr	r3, [pc, #168]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2203      	movs	r2, #3
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	2207      	movs	r2, #7
 80037c4:	4013      	ands	r3, r2
 80037c6:	3301      	adds	r3, #1
 80037c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d10d      	bne.n	80037ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	4824      	ldr	r0, [pc, #144]	; (8003864 <HAL_RCC_GetSysClockFreq+0x100>)
 80037d4:	f7fc fca8 	bl	8000128 <__udivsi3>
 80037d8:	0003      	movs	r3, r0
 80037da:	0019      	movs	r1, r3
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	227f      	movs	r2, #127	; 0x7f
 80037e4:	4013      	ands	r3, r2
 80037e6:	434b      	muls	r3, r1
 80037e8:	617b      	str	r3, [r7, #20]
        break;
 80037ea:	e00d      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	481c      	ldr	r0, [pc, #112]	; (8003860 <HAL_RCC_GetSysClockFreq+0xfc>)
 80037f0:	f7fc fc9a 	bl	8000128 <__udivsi3>
 80037f4:	0003      	movs	r3, r0
 80037f6:	0019      	movs	r1, r3
 80037f8:	4b18      	ldr	r3, [pc, #96]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	227f      	movs	r2, #127	; 0x7f
 8003800:	4013      	ands	r3, r2
 8003802:	434b      	muls	r3, r1
 8003804:	617b      	str	r3, [r7, #20]
        break;
 8003806:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003808:	4b14      	ldr	r3, [pc, #80]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0f5b      	lsrs	r3, r3, #29
 800380e:	2207      	movs	r2, #7
 8003810:	4013      	ands	r3, r2
 8003812:	3301      	adds	r3, #1
 8003814:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	6978      	ldr	r0, [r7, #20]
 800381a:	f7fc fc85 	bl	8000128 <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e015      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003824:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2238      	movs	r2, #56	; 0x38
 800382a:	4013      	ands	r3, r2
 800382c:	2b20      	cmp	r3, #32
 800382e:	d103      	bne.n	8003838 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	e00b      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_RCC_GetSysClockFreq+0xf8>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2238      	movs	r2, #56	; 0x38
 800383e:	4013      	ands	r3, r2
 8003840:	2b18      	cmp	r3, #24
 8003842:	d103      	bne.n	800384c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003844:	23fa      	movs	r3, #250	; 0xfa
 8003846:	01db      	lsls	r3, r3, #7
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	e001      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003850:	693b      	ldr	r3, [r7, #16]
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b006      	add	sp, #24
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	40021000 	.word	0x40021000
 8003860:	00f42400 	.word	0x00f42400
 8003864:	007a1200 	.word	0x007a1200

08003868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800386c:	4b02      	ldr	r3, [pc, #8]	; (8003878 <HAL_RCC_GetHCLKFreq+0x10>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	20000000 	.word	0x20000000

0800387c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800387c:	b5b0      	push	{r4, r5, r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003880:	f7ff fff2 	bl	8003868 <HAL_RCC_GetHCLKFreq>
 8003884:	0004      	movs	r4, r0
 8003886:	f7ff fb3f 	bl	8002f08 <LL_RCC_GetAPB1Prescaler>
 800388a:	0003      	movs	r3, r0
 800388c:	0b1a      	lsrs	r2, r3, #12
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003890:	0092      	lsls	r2, r2, #2
 8003892:	58d3      	ldr	r3, [r2, r3]
 8003894:	221f      	movs	r2, #31
 8003896:	4013      	ands	r3, r2
 8003898:	40dc      	lsrs	r4, r3
 800389a:	0023      	movs	r3, r4
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	bdb0      	pop	{r4, r5, r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	08005f28 	.word	0x08005f28

080038a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80038b0:	2313      	movs	r3, #19
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038b8:	2312      	movs	r3, #18
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	029b      	lsls	r3, r3, #10
 80038c8:	4013      	ands	r3, r2
 80038ca:	d100      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80038cc:	e0a3      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ce:	2011      	movs	r0, #17
 80038d0:	183b      	adds	r3, r7, r0
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d6:	4bc3      	ldr	r3, [pc, #780]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	055b      	lsls	r3, r3, #21
 80038de:	4013      	ands	r3, r2
 80038e0:	d110      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e2:	4bc0      	ldr	r3, [pc, #768]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038e6:	4bbf      	ldr	r3, [pc, #764]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	0549      	lsls	r1, r1, #21
 80038ec:	430a      	orrs	r2, r1
 80038ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80038f0:	4bbc      	ldr	r3, [pc, #752]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80038f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	055b      	lsls	r3, r3, #21
 80038f8:	4013      	ands	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	2201      	movs	r2, #1
 8003902:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003904:	4bb8      	ldr	r3, [pc, #736]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4bb7      	ldr	r3, [pc, #732]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800390a:	2180      	movs	r1, #128	; 0x80
 800390c:	0049      	lsls	r1, r1, #1
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003912:	f7fd fc49 	bl	80011a8 <HAL_GetTick>
 8003916:	0003      	movs	r3, r0
 8003918:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800391a:	e00b      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391c:	f7fd fc44 	bl	80011a8 <HAL_GetTick>
 8003920:	0002      	movs	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d904      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800392a:	2313      	movs	r3, #19
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	2203      	movs	r2, #3
 8003930:	701a      	strb	r2, [r3, #0]
        break;
 8003932:	e005      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003934:	4bac      	ldr	r3, [pc, #688]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4013      	ands	r3, r2
 800393e:	d0ed      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003940:	2313      	movs	r3, #19
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d154      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800394a:	4ba6      	ldr	r3, [pc, #664]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800394c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800394e:	23c0      	movs	r3, #192	; 0xc0
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4013      	ands	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d019      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	429a      	cmp	r2, r3
 8003964:	d014      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003966:	4b9f      	ldr	r3, [pc, #636]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	4aa0      	ldr	r2, [pc, #640]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800396c:	4013      	ands	r3, r2
 800396e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003970:	4b9c      	ldr	r3, [pc, #624]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003972:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003974:	4b9b      	ldr	r3, [pc, #620]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	0249      	lsls	r1, r1, #9
 800397a:	430a      	orrs	r2, r1
 800397c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800397e:	4b99      	ldr	r3, [pc, #612]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003982:	4b98      	ldr	r3, [pc, #608]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003984:	499a      	ldr	r1, [pc, #616]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003986:	400a      	ands	r2, r1
 8003988:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800398a:	4b96      	ldr	r3, [pc, #600]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2201      	movs	r2, #1
 8003994:	4013      	ands	r3, r2
 8003996:	d016      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd fc06 	bl	80011a8 <HAL_GetTick>
 800399c:	0003      	movs	r3, r0
 800399e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a0:	e00c      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fd fc01 	bl	80011a8 <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	4a91      	ldr	r2, [pc, #580]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d904      	bls.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80039b2:	2313      	movs	r3, #19
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2203      	movs	r2, #3
 80039b8:	701a      	strb	r2, [r3, #0]
            break;
 80039ba:	e004      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039bc:	4b89      	ldr	r3, [pc, #548]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c0:	2202      	movs	r2, #2
 80039c2:	4013      	ands	r3, r2
 80039c4:	d0ed      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80039c6:	2313      	movs	r3, #19
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d0:	4b84      	ldr	r3, [pc, #528]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	4a85      	ldr	r2, [pc, #532]	; (8003bec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039de:	4b81      	ldr	r3, [pc, #516]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039e0:	430a      	orrs	r2, r1
 80039e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80039e4:	e00c      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039e6:	2312      	movs	r3, #18
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	2213      	movs	r2, #19
 80039ec:	18ba      	adds	r2, r7, r2
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	e005      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	2312      	movs	r3, #18
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	2213      	movs	r2, #19
 80039fa:	18ba      	adds	r2, r7, r2
 80039fc:	7812      	ldrb	r2, [r2, #0]
 80039fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a00:	2311      	movs	r3, #17
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0a:	4b76      	ldr	r3, [pc, #472]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a0e:	4b75      	ldr	r3, [pc, #468]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a10:	4979      	ldr	r1, [pc, #484]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003a12:	400a      	ands	r2, r1
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a20:	4b70      	ldr	r3, [pc, #448]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	2203      	movs	r2, #3
 8003a26:	4393      	bics	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	4b6d      	ldr	r3, [pc, #436]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a30:	430a      	orrs	r2, r1
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a3e:	4b69      	ldr	r3, [pc, #420]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	220c      	movs	r2, #12
 8003a44:	4393      	bics	r3, r2
 8003a46:	0019      	movs	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2210      	movs	r2, #16
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a5c:	4b61      	ldr	r3, [pc, #388]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	4a66      	ldr	r2, [pc, #408]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	0019      	movs	r1, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	4b5e      	ldr	r3, [pc, #376]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d009      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a7c:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	0019      	movs	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d009      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a9c:	4b51      	ldr	r3, [pc, #324]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	4a58      	ldr	r2, [pc, #352]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	4b4e      	ldr	r3, [pc, #312]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aac:	430a      	orrs	r2, r1
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aba:	4b4a      	ldr	r3, [pc, #296]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	4b46      	ldr	r3, [pc, #280]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aca:	430a      	orrs	r2, r1
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	01db      	lsls	r3, r3, #7
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d015      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ada:	4b42      	ldr	r3, [pc, #264]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	0899      	lsrs	r1, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
 8003ae6:	4b3f      	ldr	r3, [pc, #252]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1a      	ldr	r2, [r3, #32]
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	05db      	lsls	r3, r3, #23
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d106      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003af8:	4b3a      	ldr	r3, [pc, #232]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003afe:	2180      	movs	r1, #128	; 0x80
 8003b00:	0249      	lsls	r1, r1, #9
 8003b02:	430a      	orrs	r2, r1
 8003b04:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	031b      	lsls	r3, r3, #12
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b12:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	2240      	movs	r2, #64	; 0x40
 8003b18:	4393      	bics	r3, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b20:	4b30      	ldr	r3, [pc, #192]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b22:	430a      	orrs	r2, r1
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	039b      	lsls	r3, r3, #14
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d016      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b32:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	4a35      	ldr	r2, [pc, #212]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b42:	430a      	orrs	r2, r1
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	03db      	lsls	r3, r3, #15
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d106      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	0449      	lsls	r1, r1, #17
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	03db      	lsls	r3, r3, #15
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d016      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	4a27      	ldr	r2, [pc, #156]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	0019      	movs	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7a:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	045b      	lsls	r3, r3, #17
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b92:	2180      	movs	r1, #128	; 0x80
 8003b94:	0449      	lsls	r1, r1, #17
 8003b96:	430a      	orrs	r2, r1
 8003b98:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	4a1a      	ldr	r2, [pc, #104]	; (8003c14 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	0019      	movs	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	01db      	lsls	r3, r3, #7
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	0249      	lsls	r1, r1, #9
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003bd4:	2312      	movs	r3, #18
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	781b      	ldrb	r3, [r3, #0]
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b006      	add	sp, #24
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40007000 	.word	0x40007000
 8003bec:	fffffcff 	.word	0xfffffcff
 8003bf0:	fffeffff 	.word	0xfffeffff
 8003bf4:	00001388 	.word	0x00001388
 8003bf8:	efffffff 	.word	0xefffffff
 8003bfc:	fffff3ff 	.word	0xfffff3ff
 8003c00:	fff3ffff 	.word	0xfff3ffff
 8003c04:	ffcfffff 	.word	0xffcfffff
 8003c08:	ffffcfff 	.word	0xffffcfff
 8003c0c:	ffbfffff 	.word	0xffbfffff
 8003c10:	feffffff 	.word	0xfeffffff
 8003c14:	ffff3fff 	.word	0xffff3fff

08003c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e04a      	b.n	8003cc0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	223d      	movs	r2, #61	; 0x3d
 8003c2e:	5c9b      	ldrb	r3, [r3, r2]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	223c      	movs	r2, #60	; 0x3c
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fd f93b 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	223d      	movs	r2, #61	; 0x3d
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	0019      	movs	r1, r3
 8003c58:	0010      	movs	r0, r2
 8003c5a:	f000 f90b 	bl	8003e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2248      	movs	r2, #72	; 0x48
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	223e      	movs	r2, #62	; 0x3e
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	223f      	movs	r2, #63	; 0x3f
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	5499      	strb	r1, [r3, r2]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2241      	movs	r2, #65	; 0x41
 8003c82:	2101      	movs	r1, #1
 8003c84:	5499      	strb	r1, [r3, r2]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2242      	movs	r2, #66	; 0x42
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	5499      	strb	r1, [r3, r2]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2243      	movs	r2, #67	; 0x43
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2244      	movs	r2, #68	; 0x44
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2245      	movs	r2, #69	; 0x45
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	5499      	strb	r1, [r3, r2]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2246      	movs	r2, #70	; 0x46
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2247      	movs	r2, #71	; 0x47
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	223d      	movs	r2, #61	; 0x3d
 8003cba:	2101      	movs	r1, #1
 8003cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd2:	230f      	movs	r3, #15
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223c      	movs	r2, #60	; 0x3c
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_ConfigClockSource+0x20>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e0bc      	b.n	8003e62 <HAL_TIM_ConfigClockSource+0x19a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	223c      	movs	r2, #60	; 0x3c
 8003cec:	2101      	movs	r1, #1
 8003cee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	223d      	movs	r2, #61	; 0x3d
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4a5a      	ldr	r2, [pc, #360]	; (8003e6c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4a59      	ldr	r2, [pc, #356]	; (8003e70 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	0192      	lsls	r2, r2, #6
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d040      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0xde>
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	0192      	lsls	r2, r2, #6
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d900      	bls.n	8003d2e <HAL_TIM_ConfigClockSource+0x66>
 8003d2c:	e088      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x178>
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	0152      	lsls	r2, r2, #5
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d100      	bne.n	8003d38 <HAL_TIM_ConfigClockSource+0x70>
 8003d36:	e088      	b.n	8003e4a <HAL_TIM_ConfigClockSource+0x182>
 8003d38:	2280      	movs	r2, #128	; 0x80
 8003d3a:	0152      	lsls	r2, r2, #5
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d900      	bls.n	8003d42 <HAL_TIM_ConfigClockSource+0x7a>
 8003d40:	e07e      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x178>
 8003d42:	2b70      	cmp	r3, #112	; 0x70
 8003d44:	d018      	beq.n	8003d78 <HAL_TIM_ConfigClockSource+0xb0>
 8003d46:	d900      	bls.n	8003d4a <HAL_TIM_ConfigClockSource+0x82>
 8003d48:	e07a      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x178>
 8003d4a:	2b60      	cmp	r3, #96	; 0x60
 8003d4c:	d04f      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x126>
 8003d4e:	d900      	bls.n	8003d52 <HAL_TIM_ConfigClockSource+0x8a>
 8003d50:	e076      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x178>
 8003d52:	2b50      	cmp	r3, #80	; 0x50
 8003d54:	d03b      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x106>
 8003d56:	d900      	bls.n	8003d5a <HAL_TIM_ConfigClockSource+0x92>
 8003d58:	e072      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x178>
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d057      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x146>
 8003d5e:	d900      	bls.n	8003d62 <HAL_TIM_ConfigClockSource+0x9a>
 8003d60:	e06e      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x178>
 8003d62:	2b30      	cmp	r3, #48	; 0x30
 8003d64:	d063      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x166>
 8003d66:	d86b      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x178>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d060      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x166>
 8003d6c:	d868      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x178>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d05d      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x166>
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d05b      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x166>
 8003d76:	e063      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d88:	f000 f97e 	bl	8004088 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2277      	movs	r2, #119	; 0x77
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	609a      	str	r2, [r3, #8]
      break;
 8003da4:	e052      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db6:	f000 f967 	bl	8004088 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2180      	movs	r1, #128	; 0x80
 8003dc6:	01c9      	lsls	r1, r1, #7
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
      break;
 8003dcc:	e03e      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	001a      	movs	r2, r3
 8003ddc:	f000 f8d8 	bl	8003f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2150      	movs	r1, #80	; 0x50
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 f932 	bl	8004050 <TIM_ITRx_SetConfig>
      break;
 8003dec:	e02e      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	f000 f8f6 	bl	8003fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2160      	movs	r1, #96	; 0x60
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 f922 	bl	8004050 <TIM_ITRx_SetConfig>
      break;
 8003e0c:	e01e      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	f000 f8b8 	bl	8003f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2140      	movs	r1, #64	; 0x40
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 f912 	bl	8004050 <TIM_ITRx_SetConfig>
      break;
 8003e2c:	e00e      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	0019      	movs	r1, r3
 8003e38:	0010      	movs	r0, r2
 8003e3a:	f000 f909 	bl	8004050 <TIM_ITRx_SetConfig>
      break;
 8003e3e:	e005      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003e40:	230f      	movs	r3, #15
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
      break;
 8003e48:	e000      	b.n	8003e4c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e4a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	223d      	movs	r2, #61	; 0x3d
 8003e50:	2101      	movs	r1, #1
 8003e52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	223c      	movs	r2, #60	; 0x3c
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5499      	strb	r1, [r3, r2]

  return status;
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	781b      	ldrb	r3, [r3, #0]
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	ffceff88 	.word	0xffceff88
 8003e70:	ffff00ff 	.word	0xffff00ff

08003e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3b      	ldr	r2, [pc, #236]	; (8003f74 <TIM_Base_SetConfig+0x100>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d008      	beq.n	8003e9e <TIM_Base_SetConfig+0x2a>
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	05db      	lsls	r3, r3, #23
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d003      	beq.n	8003e9e <TIM_Base_SetConfig+0x2a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a37      	ldr	r2, [pc, #220]	; (8003f78 <TIM_Base_SetConfig+0x104>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2270      	movs	r2, #112	; 0x70
 8003ea2:	4393      	bics	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a30      	ldr	r2, [pc, #192]	; (8003f74 <TIM_Base_SetConfig+0x100>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d018      	beq.n	8003eea <TIM_Base_SetConfig+0x76>
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	2380      	movs	r3, #128	; 0x80
 8003ebc:	05db      	lsls	r3, r3, #23
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d013      	beq.n	8003eea <TIM_Base_SetConfig+0x76>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <TIM_Base_SetConfig+0x104>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00f      	beq.n	8003eea <TIM_Base_SetConfig+0x76>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <TIM_Base_SetConfig+0x108>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_Base_SetConfig+0x76>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2a      	ldr	r2, [pc, #168]	; (8003f80 <TIM_Base_SetConfig+0x10c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <TIM_Base_SetConfig+0x76>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a29      	ldr	r2, [pc, #164]	; (8003f84 <TIM_Base_SetConfig+0x110>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_Base_SetConfig+0x76>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a28      	ldr	r2, [pc, #160]	; (8003f88 <TIM_Base_SetConfig+0x114>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d108      	bne.n	8003efc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <TIM_Base_SetConfig+0x118>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	4393      	bics	r3, r2
 8003f02:	001a      	movs	r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <TIM_Base_SetConfig+0x100>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0xce>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <TIM_Base_SetConfig+0x10c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0xce>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <TIM_Base_SetConfig+0x110>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0xce>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <TIM_Base_SetConfig+0x114>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d103      	bne.n	8003f4a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2201      	movs	r2, #1
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d106      	bne.n	8003f6a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2201      	movs	r2, #1
 8003f62:	4393      	bics	r3, r2
 8003f64:	001a      	movs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	611a      	str	r2, [r3, #16]
  }
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40002000 	.word	0x40002000
 8003f80:	40014000 	.word	0x40014000
 8003f84:	40014400 	.word	0x40014400
 8003f88:	40014800 	.word	0x40014800
 8003f8c:	fffffcff 	.word	0xfffffcff

08003f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4393      	bics	r3, r2
 8003faa:	001a      	movs	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	22f0      	movs	r2, #240	; 0xf0
 8003fba:	4393      	bics	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	220a      	movs	r2, #10
 8003fcc:	4393      	bics	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	621a      	str	r2, [r3, #32]
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b006      	add	sp, #24
 8003fea:	bd80      	pop	{r7, pc}

08003fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	2210      	movs	r2, #16
 8004004:	4393      	bics	r3, r2
 8004006:	001a      	movs	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4a0d      	ldr	r2, [pc, #52]	; (800404c <TIM_TI2_ConfigInputStage+0x60>)
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	22a0      	movs	r2, #160	; 0xa0
 8004028:	4393      	bics	r3, r2
 800402a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b006      	add	sp, #24
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	ffff0fff 	.word	0xffff0fff

08004050 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <TIM_ITRx_SetConfig+0x34>)
 8004064:	4013      	ands	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	2207      	movs	r2, #7
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	609a      	str	r2, [r3, #8]
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b004      	add	sp, #16
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	ffcfff8f 	.word	0xffcfff8f

08004088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4a09      	ldr	r2, [pc, #36]	; (80040c4 <TIM_ETR_SetConfig+0x3c>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	b006      	add	sp, #24
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	ffff00ff 	.word	0xffff00ff

080040c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	223c      	movs	r2, #60	; 0x3c
 80040d6:	5c9b      	ldrb	r3, [r3, r2]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e055      	b.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	223c      	movs	r2, #60	; 0x3c
 80040e4:	2101      	movs	r1, #1
 80040e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	223d      	movs	r2, #61	; 0x3d
 80040ec:	2102      	movs	r1, #2
 80040ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a23      	ldr	r2, [pc, #140]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d108      	bne.n	800411c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a22      	ldr	r2, [pc, #136]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800410e:	4013      	ands	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2270      	movs	r2, #112	; 0x70
 8004120:	4393      	bics	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00f      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	2380      	movs	r3, #128	; 0x80
 8004146:	05db      	lsls	r3, r3, #23
 8004148:	429a      	cmp	r2, r3
 800414a:	d009      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a12      	ldr	r2, [pc, #72]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a11      	ldr	r2, [pc, #68]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d10c      	bne.n	800417a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2280      	movs	r2, #128	; 0x80
 8004164:	4393      	bics	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	4313      	orrs	r3, r2
 8004170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	223d      	movs	r2, #61	; 0x3d
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	223c      	movs	r2, #60	; 0x3c
 8004186:	2100      	movs	r1, #0
 8004188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	b004      	add	sp, #16
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40012c00 	.word	0x40012c00
 8004198:	ff0fffff 	.word	0xff0fffff
 800419c:	40000400 	.word	0x40000400
 80041a0:	40014000 	.word	0x40014000

080041a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e046      	b.n	8004244 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2288      	movs	r2, #136	; 0x88
 80041ba:	589b      	ldr	r3, [r3, r2]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2284      	movs	r2, #132	; 0x84
 80041c4:	2100      	movs	r1, #0
 80041c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7fc fe92 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2288      	movs	r2, #136	; 0x88
 80041d4:	2124      	movs	r1, #36	; 0x24
 80041d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	438a      	bics	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 fb8e 	bl	8004914 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f000 f8cc 	bl	8004398 <UART_SetConfig>
 8004200:	0003      	movs	r3, r0
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e01c      	b.n	8004244 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	490d      	ldr	r1, [pc, #52]	; (800424c <HAL_UART_Init+0xa8>)
 8004216:	400a      	ands	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	212a      	movs	r1, #42	; 0x2a
 8004226:	438a      	bics	r2, r1
 8004228:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2101      	movs	r1, #1
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0018      	movs	r0, r3
 800423e:	f000 fc1d 	bl	8004a7c <UART_CheckIdleState>
 8004242:	0003      	movs	r3, r0
}
 8004244:	0018      	movs	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}
 800424c:	ffffb7ff 	.word	0xffffb7ff

08004250 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	1dbb      	adds	r3, r7, #6
 800425e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2288      	movs	r2, #136	; 0x88
 8004264:	589b      	ldr	r3, [r3, r2]
 8004266:	2b20      	cmp	r3, #32
 8004268:	d000      	beq.n	800426c <HAL_UART_Transmit+0x1c>
 800426a:	e090      	b.n	800438e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_UART_Transmit+0x2a>
 8004272:	1dbb      	adds	r3, r7, #6
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e088      	b.n	8004390 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	015b      	lsls	r3, r3, #5
 8004286:	429a      	cmp	r2, r3
 8004288:	d109      	bne.n	800429e <HAL_UART_Transmit+0x4e>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d105      	bne.n	800429e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2201      	movs	r2, #1
 8004296:	4013      	ands	r3, r2
 8004298:	d001      	beq.n	800429e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e078      	b.n	8004390 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2290      	movs	r2, #144	; 0x90
 80042a2:	2100      	movs	r1, #0
 80042a4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2288      	movs	r2, #136	; 0x88
 80042aa:	2121      	movs	r1, #33	; 0x21
 80042ac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ae:	f7fc ff7b 	bl	80011a8 <HAL_GetTick>
 80042b2:	0003      	movs	r3, r0
 80042b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1dba      	adds	r2, r7, #6
 80042ba:	2154      	movs	r1, #84	; 0x54
 80042bc:	8812      	ldrh	r2, [r2, #0]
 80042be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1dba      	adds	r2, r7, #6
 80042c4:	2156      	movs	r1, #86	; 0x56
 80042c6:	8812      	ldrh	r2, [r2, #0]
 80042c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	2380      	movs	r3, #128	; 0x80
 80042d0:	015b      	lsls	r3, r3, #5
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d108      	bne.n	80042e8 <HAL_UART_Transmit+0x98>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	e003      	b.n	80042f0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042f0:	e030      	b.n	8004354 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	0013      	movs	r3, r2
 80042fc:	2200      	movs	r2, #0
 80042fe:	2180      	movs	r1, #128	; 0x80
 8004300:	f000 fc66 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004304:	1e03      	subs	r3, r0, #0
 8004306:	d005      	beq.n	8004314 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2288      	movs	r2, #136	; 0x88
 800430c:	2120      	movs	r1, #32
 800430e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e03d      	b.n	8004390 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	001a      	movs	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	05d2      	lsls	r2, r2, #23
 8004326:	0dd2      	lsrs	r2, r2, #23
 8004328:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	3302      	adds	r3, #2
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	e007      	b.n	8004342 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	3301      	adds	r3, #1
 8004340:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2256      	movs	r2, #86	; 0x56
 8004346:	5a9b      	ldrh	r3, [r3, r2]
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b299      	uxth	r1, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2256      	movs	r2, #86	; 0x56
 8004352:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2256      	movs	r2, #86	; 0x56
 8004358:	5a9b      	ldrh	r3, [r3, r2]
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1c8      	bne.n	80042f2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	0013      	movs	r3, r2
 800436a:	2200      	movs	r2, #0
 800436c:	2140      	movs	r1, #64	; 0x40
 800436e:	f000 fc2f 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004372:	1e03      	subs	r3, r0, #0
 8004374:	d005      	beq.n	8004382 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2288      	movs	r2, #136	; 0x88
 800437a:	2120      	movs	r1, #32
 800437c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e006      	b.n	8004390 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2288      	movs	r2, #136	; 0x88
 8004386:	2120      	movs	r1, #32
 8004388:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	e000      	b.n	8004390 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
  }
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b008      	add	sp, #32
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	b090      	sub	sp, #64	; 0x40
 800439c:	af00      	add	r7, sp, #0
 800439e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a0:	231a      	movs	r3, #26
 80043a2:	2220      	movs	r2, #32
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	19db      	adds	r3, r3, r7
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4aaf      	ldr	r2, [pc, #700]	; (8004688 <UART_SetConfig+0x2f0>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d6:	430b      	orrs	r3, r1
 80043d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4aaa      	ldr	r2, [pc, #680]	; (800468c <UART_SetConfig+0x2f4>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0018      	movs	r0, r3
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	68d9      	ldr	r1, [r3, #12]
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	0003      	movs	r3, r0
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4aa4      	ldr	r2, [pc, #656]	; (8004690 <UART_SetConfig+0x2f8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800440a:	4313      	orrs	r3, r2
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4a9f      	ldr	r2, [pc, #636]	; (8004694 <UART_SetConfig+0x2fc>)
 8004416:	4013      	ands	r3, r2
 8004418:	0019      	movs	r1, r3
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004420:	430b      	orrs	r3, r1
 8004422:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	220f      	movs	r2, #15
 800442c:	4393      	bics	r3, r2
 800442e:	0018      	movs	r0, r3
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	0003      	movs	r3, r0
 800443a:	430b      	orrs	r3, r1
 800443c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a95      	ldr	r2, [pc, #596]	; (8004698 <UART_SetConfig+0x300>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d131      	bne.n	80044ac <UART_SetConfig+0x114>
 8004448:	4b94      	ldr	r3, [pc, #592]	; (800469c <UART_SetConfig+0x304>)
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	2203      	movs	r2, #3
 800444e:	4013      	ands	r3, r2
 8004450:	2b03      	cmp	r3, #3
 8004452:	d01d      	beq.n	8004490 <UART_SetConfig+0xf8>
 8004454:	d823      	bhi.n	800449e <UART_SetConfig+0x106>
 8004456:	2b02      	cmp	r3, #2
 8004458:	d00c      	beq.n	8004474 <UART_SetConfig+0xdc>
 800445a:	d820      	bhi.n	800449e <UART_SetConfig+0x106>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <UART_SetConfig+0xce>
 8004460:	2b01      	cmp	r3, #1
 8004462:	d00e      	beq.n	8004482 <UART_SetConfig+0xea>
 8004464:	e01b      	b.n	800449e <UART_SetConfig+0x106>
 8004466:	231b      	movs	r3, #27
 8004468:	2220      	movs	r2, #32
 800446a:	189b      	adds	r3, r3, r2
 800446c:	19db      	adds	r3, r3, r7
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e0b4      	b.n	80045de <UART_SetConfig+0x246>
 8004474:	231b      	movs	r3, #27
 8004476:	2220      	movs	r2, #32
 8004478:	189b      	adds	r3, r3, r2
 800447a:	19db      	adds	r3, r3, r7
 800447c:	2202      	movs	r2, #2
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e0ad      	b.n	80045de <UART_SetConfig+0x246>
 8004482:	231b      	movs	r3, #27
 8004484:	2220      	movs	r2, #32
 8004486:	189b      	adds	r3, r3, r2
 8004488:	19db      	adds	r3, r3, r7
 800448a:	2204      	movs	r2, #4
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	e0a6      	b.n	80045de <UART_SetConfig+0x246>
 8004490:	231b      	movs	r3, #27
 8004492:	2220      	movs	r2, #32
 8004494:	189b      	adds	r3, r3, r2
 8004496:	19db      	adds	r3, r3, r7
 8004498:	2208      	movs	r2, #8
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e09f      	b.n	80045de <UART_SetConfig+0x246>
 800449e:	231b      	movs	r3, #27
 80044a0:	2220      	movs	r2, #32
 80044a2:	189b      	adds	r3, r3, r2
 80044a4:	19db      	adds	r3, r3, r7
 80044a6:	2210      	movs	r2, #16
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e098      	b.n	80045de <UART_SetConfig+0x246>
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a7b      	ldr	r2, [pc, #492]	; (80046a0 <UART_SetConfig+0x308>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d131      	bne.n	800451a <UART_SetConfig+0x182>
 80044b6:	4b79      	ldr	r3, [pc, #484]	; (800469c <UART_SetConfig+0x304>)
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	220c      	movs	r2, #12
 80044bc:	4013      	ands	r3, r2
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d01d      	beq.n	80044fe <UART_SetConfig+0x166>
 80044c2:	d823      	bhi.n	800450c <UART_SetConfig+0x174>
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d00c      	beq.n	80044e2 <UART_SetConfig+0x14a>
 80044c8:	d820      	bhi.n	800450c <UART_SetConfig+0x174>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <UART_SetConfig+0x13c>
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d00e      	beq.n	80044f0 <UART_SetConfig+0x158>
 80044d2:	e01b      	b.n	800450c <UART_SetConfig+0x174>
 80044d4:	231b      	movs	r3, #27
 80044d6:	2220      	movs	r2, #32
 80044d8:	189b      	adds	r3, r3, r2
 80044da:	19db      	adds	r3, r3, r7
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
 80044e0:	e07d      	b.n	80045de <UART_SetConfig+0x246>
 80044e2:	231b      	movs	r3, #27
 80044e4:	2220      	movs	r2, #32
 80044e6:	189b      	adds	r3, r3, r2
 80044e8:	19db      	adds	r3, r3, r7
 80044ea:	2202      	movs	r2, #2
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e076      	b.n	80045de <UART_SetConfig+0x246>
 80044f0:	231b      	movs	r3, #27
 80044f2:	2220      	movs	r2, #32
 80044f4:	189b      	adds	r3, r3, r2
 80044f6:	19db      	adds	r3, r3, r7
 80044f8:	2204      	movs	r2, #4
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	e06f      	b.n	80045de <UART_SetConfig+0x246>
 80044fe:	231b      	movs	r3, #27
 8004500:	2220      	movs	r2, #32
 8004502:	189b      	adds	r3, r3, r2
 8004504:	19db      	adds	r3, r3, r7
 8004506:	2208      	movs	r2, #8
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e068      	b.n	80045de <UART_SetConfig+0x246>
 800450c:	231b      	movs	r3, #27
 800450e:	2220      	movs	r2, #32
 8004510:	189b      	adds	r3, r3, r2
 8004512:	19db      	adds	r3, r3, r7
 8004514:	2210      	movs	r2, #16
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	e061      	b.n	80045de <UART_SetConfig+0x246>
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a61      	ldr	r2, [pc, #388]	; (80046a4 <UART_SetConfig+0x30c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d106      	bne.n	8004532 <UART_SetConfig+0x19a>
 8004524:	231b      	movs	r3, #27
 8004526:	2220      	movs	r2, #32
 8004528:	189b      	adds	r3, r3, r2
 800452a:	19db      	adds	r3, r3, r7
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e055      	b.n	80045de <UART_SetConfig+0x246>
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5c      	ldr	r2, [pc, #368]	; (80046a8 <UART_SetConfig+0x310>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d106      	bne.n	800454a <UART_SetConfig+0x1b2>
 800453c:	231b      	movs	r3, #27
 800453e:	2220      	movs	r2, #32
 8004540:	189b      	adds	r3, r3, r2
 8004542:	19db      	adds	r3, r3, r7
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e049      	b.n	80045de <UART_SetConfig+0x246>
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a50      	ldr	r2, [pc, #320]	; (8004690 <UART_SetConfig+0x2f8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d13e      	bne.n	80045d2 <UART_SetConfig+0x23a>
 8004554:	4b51      	ldr	r3, [pc, #324]	; (800469c <UART_SetConfig+0x304>)
 8004556:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004558:	23c0      	movs	r3, #192	; 0xc0
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	4013      	ands	r3, r2
 800455e:	22c0      	movs	r2, #192	; 0xc0
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	4293      	cmp	r3, r2
 8004564:	d027      	beq.n	80045b6 <UART_SetConfig+0x21e>
 8004566:	22c0      	movs	r2, #192	; 0xc0
 8004568:	0112      	lsls	r2, r2, #4
 800456a:	4293      	cmp	r3, r2
 800456c:	d82a      	bhi.n	80045c4 <UART_SetConfig+0x22c>
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	4293      	cmp	r3, r2
 8004574:	d011      	beq.n	800459a <UART_SetConfig+0x202>
 8004576:	2280      	movs	r2, #128	; 0x80
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	4293      	cmp	r3, r2
 800457c:	d822      	bhi.n	80045c4 <UART_SetConfig+0x22c>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <UART_SetConfig+0x1f4>
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	00d2      	lsls	r2, r2, #3
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <UART_SetConfig+0x210>
 800458a:	e01b      	b.n	80045c4 <UART_SetConfig+0x22c>
 800458c:	231b      	movs	r3, #27
 800458e:	2220      	movs	r2, #32
 8004590:	189b      	adds	r3, r3, r2
 8004592:	19db      	adds	r3, r3, r7
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	e021      	b.n	80045de <UART_SetConfig+0x246>
 800459a:	231b      	movs	r3, #27
 800459c:	2220      	movs	r2, #32
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	19db      	adds	r3, r3, r7
 80045a2:	2202      	movs	r2, #2
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e01a      	b.n	80045de <UART_SetConfig+0x246>
 80045a8:	231b      	movs	r3, #27
 80045aa:	2220      	movs	r2, #32
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	19db      	adds	r3, r3, r7
 80045b0:	2204      	movs	r2, #4
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e013      	b.n	80045de <UART_SetConfig+0x246>
 80045b6:	231b      	movs	r3, #27
 80045b8:	2220      	movs	r2, #32
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	19db      	adds	r3, r3, r7
 80045be:	2208      	movs	r2, #8
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e00c      	b.n	80045de <UART_SetConfig+0x246>
 80045c4:	231b      	movs	r3, #27
 80045c6:	2220      	movs	r2, #32
 80045c8:	189b      	adds	r3, r3, r2
 80045ca:	19db      	adds	r3, r3, r7
 80045cc:	2210      	movs	r2, #16
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e005      	b.n	80045de <UART_SetConfig+0x246>
 80045d2:	231b      	movs	r3, #27
 80045d4:	2220      	movs	r2, #32
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	2210      	movs	r2, #16
 80045dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <UART_SetConfig+0x2f8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d000      	beq.n	80045ea <UART_SetConfig+0x252>
 80045e8:	e0a9      	b.n	800473e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045ea:	231b      	movs	r3, #27
 80045ec:	2220      	movs	r2, #32
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	19db      	adds	r3, r3, r7
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d015      	beq.n	8004624 <UART_SetConfig+0x28c>
 80045f8:	dc18      	bgt.n	800462c <UART_SetConfig+0x294>
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d00d      	beq.n	800461a <UART_SetConfig+0x282>
 80045fe:	dc15      	bgt.n	800462c <UART_SetConfig+0x294>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <UART_SetConfig+0x272>
 8004604:	2b02      	cmp	r3, #2
 8004606:	d005      	beq.n	8004614 <UART_SetConfig+0x27c>
 8004608:	e010      	b.n	800462c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460a:	f7ff f937 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 800460e:	0003      	movs	r3, r0
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004612:	e014      	b.n	800463e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004614:	4b25      	ldr	r3, [pc, #148]	; (80046ac <UART_SetConfig+0x314>)
 8004616:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004618:	e011      	b.n	800463e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461a:	f7ff f8a3 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 800461e:	0003      	movs	r3, r0
 8004620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004622:	e00c      	b.n	800463e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800462a:	e008      	b.n	800463e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004630:	231a      	movs	r3, #26
 8004632:	2220      	movs	r2, #32
 8004634:	189b      	adds	r3, r3, r2
 8004636:	19db      	adds	r3, r3, r7
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
        break;
 800463c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	2b00      	cmp	r3, #0
 8004642:	d100      	bne.n	8004646 <UART_SetConfig+0x2ae>
 8004644:	e14b      	b.n	80048de <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800464a:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <UART_SetConfig+0x318>)
 800464c:	0052      	lsls	r2, r2, #1
 800464e:	5ad3      	ldrh	r3, [r2, r3]
 8004650:	0019      	movs	r1, r3
 8004652:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004654:	f7fb fd68 	bl	8000128 <__udivsi3>
 8004658:	0003      	movs	r3, r0
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	0013      	movs	r3, r2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	189b      	adds	r3, r3, r2
 8004666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004668:	429a      	cmp	r2, r3
 800466a:	d305      	bcc.n	8004678 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004674:	429a      	cmp	r2, r3
 8004676:	d91d      	bls.n	80046b4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004678:	231a      	movs	r3, #26
 800467a:	2220      	movs	r2, #32
 800467c:	189b      	adds	r3, r3, r2
 800467e:	19db      	adds	r3, r3, r7
 8004680:	2201      	movs	r2, #1
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	e12b      	b.n	80048de <UART_SetConfig+0x546>
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	cfff69f3 	.word	0xcfff69f3
 800468c:	ffffcfff 	.word	0xffffcfff
 8004690:	40008000 	.word	0x40008000
 8004694:	11fff4ff 	.word	0x11fff4ff
 8004698:	40013800 	.word	0x40013800
 800469c:	40021000 	.word	0x40021000
 80046a0:	40004400 	.word	0x40004400
 80046a4:	40004800 	.word	0x40004800
 80046a8:	40004c00 	.word	0x40004c00
 80046ac:	00f42400 	.word	0x00f42400
 80046b0:	08005f48 	.word	0x08005f48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046c0:	4b92      	ldr	r3, [pc, #584]	; (800490c <UART_SetConfig+0x574>)
 80046c2:	0052      	lsls	r2, r2, #1
 80046c4:	5ad3      	ldrh	r3, [r2, r3]
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	69b8      	ldr	r0, [r7, #24]
 80046d2:	69f9      	ldr	r1, [r7, #28]
 80046d4:	f7fb fe9e 	bl	8000414 <__aeabi_uldivmod>
 80046d8:	0002      	movs	r2, r0
 80046da:	000b      	movs	r3, r1
 80046dc:	0e11      	lsrs	r1, r2, #24
 80046de:	021d      	lsls	r5, r3, #8
 80046e0:	430d      	orrs	r5, r1
 80046e2:	0214      	lsls	r4, r2, #8
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68b8      	ldr	r0, [r7, #8]
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	1900      	adds	r0, r0, r4
 80046f6:	4169      	adcs	r1, r5
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f7fb fe85 	bl	8000414 <__aeabi_uldivmod>
 800470a:	0002      	movs	r2, r0
 800470c:	000b      	movs	r3, r1
 800470e:	0013      	movs	r3, r2
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004714:	23c0      	movs	r3, #192	; 0xc0
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	429a      	cmp	r2, r3
 800471a:	d309      	bcc.n	8004730 <UART_SetConfig+0x398>
 800471c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471e:	2380      	movs	r3, #128	; 0x80
 8004720:	035b      	lsls	r3, r3, #13
 8004722:	429a      	cmp	r2, r3
 8004724:	d204      	bcs.n	8004730 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	e0d6      	b.n	80048de <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004730:	231a      	movs	r3, #26
 8004732:	2220      	movs	r2, #32
 8004734:	189b      	adds	r3, r3, r2
 8004736:	19db      	adds	r3, r3, r7
 8004738:	2201      	movs	r2, #1
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e0cf      	b.n	80048de <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	2380      	movs	r3, #128	; 0x80
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	429a      	cmp	r2, r3
 8004748:	d000      	beq.n	800474c <UART_SetConfig+0x3b4>
 800474a:	e070      	b.n	800482e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800474c:	231b      	movs	r3, #27
 800474e:	2220      	movs	r2, #32
 8004750:	189b      	adds	r3, r3, r2
 8004752:	19db      	adds	r3, r3, r7
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b08      	cmp	r3, #8
 8004758:	d015      	beq.n	8004786 <UART_SetConfig+0x3ee>
 800475a:	dc18      	bgt.n	800478e <UART_SetConfig+0x3f6>
 800475c:	2b04      	cmp	r3, #4
 800475e:	d00d      	beq.n	800477c <UART_SetConfig+0x3e4>
 8004760:	dc15      	bgt.n	800478e <UART_SetConfig+0x3f6>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <UART_SetConfig+0x3d4>
 8004766:	2b02      	cmp	r3, #2
 8004768:	d005      	beq.n	8004776 <UART_SetConfig+0x3de>
 800476a:	e010      	b.n	800478e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800476c:	f7ff f886 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8004770:	0003      	movs	r3, r0
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004774:	e014      	b.n	80047a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004776:	4b66      	ldr	r3, [pc, #408]	; (8004910 <UART_SetConfig+0x578>)
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800477a:	e011      	b.n	80047a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800477c:	f7fe fff2 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 8004780:	0003      	movs	r3, r0
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004784:	e00c      	b.n	80047a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800478c:	e008      	b.n	80047a0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004792:	231a      	movs	r3, #26
 8004794:	2220      	movs	r2, #32
 8004796:	189b      	adds	r3, r3, r2
 8004798:	19db      	adds	r3, r3, r7
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
        break;
 800479e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d100      	bne.n	80047a8 <UART_SetConfig+0x410>
 80047a6:	e09a      	b.n	80048de <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ac:	4b57      	ldr	r3, [pc, #348]	; (800490c <UART_SetConfig+0x574>)
 80047ae:	0052      	lsls	r2, r2, #1
 80047b0:	5ad3      	ldrh	r3, [r2, r3]
 80047b2:	0019      	movs	r1, r3
 80047b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047b6:	f7fb fcb7 	bl	8000128 <__udivsi3>
 80047ba:	0003      	movs	r3, r0
 80047bc:	005a      	lsls	r2, r3, #1
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	18d2      	adds	r2, r2, r3
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	0019      	movs	r1, r3
 80047cc:	0010      	movs	r0, r2
 80047ce:	f7fb fcab 	bl	8000128 <__udivsi3>
 80047d2:	0003      	movs	r3, r0
 80047d4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	2b0f      	cmp	r3, #15
 80047da:	d921      	bls.n	8004820 <UART_SetConfig+0x488>
 80047dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	025b      	lsls	r3, r3, #9
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d21c      	bcs.n	8004820 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	200e      	movs	r0, #14
 80047ec:	2420      	movs	r4, #32
 80047ee:	1903      	adds	r3, r0, r4
 80047f0:	19db      	adds	r3, r3, r7
 80047f2:	210f      	movs	r1, #15
 80047f4:	438a      	bics	r2, r1
 80047f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2207      	movs	r2, #7
 8004800:	4013      	ands	r3, r2
 8004802:	b299      	uxth	r1, r3
 8004804:	1903      	adds	r3, r0, r4
 8004806:	19db      	adds	r3, r3, r7
 8004808:	1902      	adds	r2, r0, r4
 800480a:	19d2      	adds	r2, r2, r7
 800480c:	8812      	ldrh	r2, [r2, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1902      	adds	r2, r0, r4
 8004818:	19d2      	adds	r2, r2, r7
 800481a:	8812      	ldrh	r2, [r2, #0]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	e05e      	b.n	80048de <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004820:	231a      	movs	r3, #26
 8004822:	2220      	movs	r2, #32
 8004824:	189b      	adds	r3, r3, r2
 8004826:	19db      	adds	r3, r3, r7
 8004828:	2201      	movs	r2, #1
 800482a:	701a      	strb	r2, [r3, #0]
 800482c:	e057      	b.n	80048de <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800482e:	231b      	movs	r3, #27
 8004830:	2220      	movs	r2, #32
 8004832:	189b      	adds	r3, r3, r2
 8004834:	19db      	adds	r3, r3, r7
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d015      	beq.n	8004868 <UART_SetConfig+0x4d0>
 800483c:	dc18      	bgt.n	8004870 <UART_SetConfig+0x4d8>
 800483e:	2b04      	cmp	r3, #4
 8004840:	d00d      	beq.n	800485e <UART_SetConfig+0x4c6>
 8004842:	dc15      	bgt.n	8004870 <UART_SetConfig+0x4d8>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <UART_SetConfig+0x4b6>
 8004848:	2b02      	cmp	r3, #2
 800484a:	d005      	beq.n	8004858 <UART_SetConfig+0x4c0>
 800484c:	e010      	b.n	8004870 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800484e:	f7ff f815 	bl	800387c <HAL_RCC_GetPCLK1Freq>
 8004852:	0003      	movs	r3, r0
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004856:	e014      	b.n	8004882 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <UART_SetConfig+0x578>)
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800485c:	e011      	b.n	8004882 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe ff81 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 8004862:	0003      	movs	r3, r0
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004866:	e00c      	b.n	8004882 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800486e:	e008      	b.n	8004882 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004874:	231a      	movs	r3, #26
 8004876:	2220      	movs	r2, #32
 8004878:	189b      	adds	r3, r3, r2
 800487a:	19db      	adds	r3, r3, r7
 800487c:	2201      	movs	r2, #1
 800487e:	701a      	strb	r2, [r3, #0]
        break;
 8004880:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004884:	2b00      	cmp	r3, #0
 8004886:	d02a      	beq.n	80048de <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488c:	4b1f      	ldr	r3, [pc, #124]	; (800490c <UART_SetConfig+0x574>)
 800488e:	0052      	lsls	r2, r2, #1
 8004890:	5ad3      	ldrh	r3, [r2, r3]
 8004892:	0019      	movs	r1, r3
 8004894:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004896:	f7fb fc47 	bl	8000128 <__udivsi3>
 800489a:	0003      	movs	r3, r0
 800489c:	001a      	movs	r2, r3
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	18d2      	adds	r2, r2, r3
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	0019      	movs	r1, r3
 80048ac:	0010      	movs	r0, r2
 80048ae:	f7fb fc3b 	bl	8000128 <__udivsi3>
 80048b2:	0003      	movs	r3, r0
 80048b4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	2b0f      	cmp	r3, #15
 80048ba:	d90a      	bls.n	80048d2 <UART_SetConfig+0x53a>
 80048bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	025b      	lsls	r3, r3, #9
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d205      	bcs.n	80048d2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60da      	str	r2, [r3, #12]
 80048d0:	e005      	b.n	80048de <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80048d2:	231a      	movs	r3, #26
 80048d4:	2220      	movs	r2, #32
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	19db      	adds	r3, r3, r7
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	226a      	movs	r2, #106	; 0x6a
 80048e2:	2101      	movs	r1, #1
 80048e4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	2268      	movs	r2, #104	; 0x68
 80048ea:	2101      	movs	r1, #1
 80048ec:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	2200      	movs	r2, #0
 80048f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	2200      	movs	r2, #0
 80048f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80048fa:	231a      	movs	r3, #26
 80048fc:	2220      	movs	r2, #32
 80048fe:	189b      	adds	r3, r3, r2
 8004900:	19db      	adds	r3, r3, r7
 8004902:	781b      	ldrb	r3, [r3, #0]
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b010      	add	sp, #64	; 0x40
 800490a:	bdb0      	pop	{r4, r5, r7, pc}
 800490c:	08005f48 	.word	0x08005f48
 8004910:	00f42400 	.word	0x00f42400

08004914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	2208      	movs	r2, #8
 8004922:	4013      	ands	r3, r2
 8004924:	d00b      	beq.n	800493e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4a4a      	ldr	r2, [pc, #296]	; (8004a58 <UART_AdvFeatureConfig+0x144>)
 800492e:	4013      	ands	r3, r2
 8004930:	0019      	movs	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	2201      	movs	r2, #1
 8004944:	4013      	ands	r3, r2
 8004946:	d00b      	beq.n	8004960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	4a43      	ldr	r2, [pc, #268]	; (8004a5c <UART_AdvFeatureConfig+0x148>)
 8004950:	4013      	ands	r3, r2
 8004952:	0019      	movs	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	2202      	movs	r2, #2
 8004966:	4013      	ands	r3, r2
 8004968:	d00b      	beq.n	8004982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	4a3b      	ldr	r2, [pc, #236]	; (8004a60 <UART_AdvFeatureConfig+0x14c>)
 8004972:	4013      	ands	r3, r2
 8004974:	0019      	movs	r1, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	2204      	movs	r2, #4
 8004988:	4013      	ands	r3, r2
 800498a:	d00b      	beq.n	80049a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4a34      	ldr	r2, [pc, #208]	; (8004a64 <UART_AdvFeatureConfig+0x150>)
 8004994:	4013      	ands	r3, r2
 8004996:	0019      	movs	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	2210      	movs	r2, #16
 80049aa:	4013      	ands	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a2c      	ldr	r2, [pc, #176]	; (8004a68 <UART_AdvFeatureConfig+0x154>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	2220      	movs	r2, #32
 80049cc:	4013      	ands	r3, r2
 80049ce:	d00b      	beq.n	80049e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	4a25      	ldr	r2, [pc, #148]	; (8004a6c <UART_AdvFeatureConfig+0x158>)
 80049d8:	4013      	ands	r3, r2
 80049da:	0019      	movs	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	2240      	movs	r2, #64	; 0x40
 80049ee:	4013      	ands	r3, r2
 80049f0:	d01d      	beq.n	8004a2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <UART_AdvFeatureConfig+0x15c>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	0019      	movs	r1, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	035b      	lsls	r3, r3, #13
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d10b      	bne.n	8004a2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4a15      	ldr	r2, [pc, #84]	; (8004a74 <UART_AdvFeatureConfig+0x160>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	0019      	movs	r1, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	4013      	ands	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4a0e      	ldr	r2, [pc, #56]	; (8004a78 <UART_AdvFeatureConfig+0x164>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]
  }
}
 8004a50:	46c0      	nop			; (mov r8, r8)
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b002      	add	sp, #8
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	ffff7fff 	.word	0xffff7fff
 8004a5c:	fffdffff 	.word	0xfffdffff
 8004a60:	fffeffff 	.word	0xfffeffff
 8004a64:	fffbffff 	.word	0xfffbffff
 8004a68:	ffffefff 	.word	0xffffefff
 8004a6c:	ffffdfff 	.word	0xffffdfff
 8004a70:	ffefffff 	.word	0xffefffff
 8004a74:	ff9fffff 	.word	0xff9fffff
 8004a78:	fff7ffff 	.word	0xfff7ffff

08004a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b092      	sub	sp, #72	; 0x48
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2290      	movs	r2, #144	; 0x90
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a8c:	f7fc fb8c 	bl	80011a8 <HAL_GetTick>
 8004a90:	0003      	movs	r3, r0
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d12d      	bne.n	8004afe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa4:	2280      	movs	r2, #128	; 0x80
 8004aa6:	0391      	lsls	r1, r2, #14
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4a47      	ldr	r2, [pc, #284]	; (8004bc8 <UART_CheckIdleState+0x14c>)
 8004aac:	9200      	str	r2, [sp, #0]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f000 f88e 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d022      	beq.n	8004afe <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	f383 8810 	msr	PRIMASK, r3
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	438a      	bics	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	f383 8810 	msr	PRIMASK, r3
}
 8004ae8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2288      	movs	r2, #136	; 0x88
 8004aee:	2120      	movs	r1, #32
 8004af0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2284      	movs	r2, #132	; 0x84
 8004af6:	2100      	movs	r1, #0
 8004af8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e060      	b.n	8004bc0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2204      	movs	r2, #4
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d146      	bne.n	8004b9a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0e:	2280      	movs	r2, #128	; 0x80
 8004b10:	03d1      	lsls	r1, r2, #15
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4a2c      	ldr	r2, [pc, #176]	; (8004bc8 <UART_CheckIdleState+0x14c>)
 8004b16:	9200      	str	r2, [sp, #0]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f000 f859 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 8004b1e:	1e03      	subs	r3, r0, #0
 8004b20:	d03b      	beq.n	8004b9a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b22:	f3ef 8310 	mrs	r3, PRIMASK
 8004b26:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f383 8810 	msr	PRIMASK, r3
}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4922      	ldr	r1, [pc, #136]	; (8004bcc <UART_CheckIdleState+0x150>)
 8004b44:	400a      	ands	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f383 8810 	msr	PRIMASK, r3
}
 8004b52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b54:	f3ef 8310 	mrs	r3, PRIMASK
 8004b58:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b5e:	2301      	movs	r3, #1
 8004b60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f383 8810 	msr	PRIMASK, r3
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2101      	movs	r1, #1
 8004b76:	438a      	bics	r2, r1
 8004b78:	609a      	str	r2, [r3, #8]
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f383 8810 	msr	PRIMASK, r3
}
 8004b84:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	228c      	movs	r2, #140	; 0x8c
 8004b8a:	2120      	movs	r1, #32
 8004b8c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2284      	movs	r2, #132	; 0x84
 8004b92:	2100      	movs	r1, #0
 8004b94:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e012      	b.n	8004bc0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2288      	movs	r2, #136	; 0x88
 8004b9e:	2120      	movs	r1, #32
 8004ba0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	228c      	movs	r2, #140	; 0x8c
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2284      	movs	r2, #132	; 0x84
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b010      	add	sp, #64	; 0x40
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	01ffffff 	.word	0x01ffffff
 8004bcc:	fffffedf 	.word	0xfffffedf

08004bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	1dfb      	adds	r3, r7, #7
 8004bde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be0:	e051      	b.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	3301      	adds	r3, #1
 8004be6:	d04e      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fc fade 	bl	80011a8 <HAL_GetTick>
 8004bec:	0002      	movs	r2, r0
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x2e>
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e051      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d03b      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d038      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b40      	cmp	r3, #64	; 0x40
 8004c18:	d035      	beq.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2208      	movs	r2, #8
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d111      	bne.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f83c 	bl	8004cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2290      	movs	r2, #144	; 0x90
 8004c3c:	2108      	movs	r1, #8
 8004c3e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2284      	movs	r2, #132	; 0x84
 8004c44:	2100      	movs	r1, #0
 8004c46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e02c      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	401a      	ands	r2, r3
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d112      	bne.n	8004c86 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2280      	movs	r2, #128	; 0x80
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 f81f 	bl	8004cb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2290      	movs	r2, #144	; 0x90
 8004c76:	2120      	movs	r1, #32
 8004c78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2284      	movs	r2, #132	; 0x84
 8004c7e:	2100      	movs	r1, #0
 8004c80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e00f      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	425a      	negs	r2, r3
 8004c96:	4153      	adcs	r3, r2
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	001a      	movs	r2, r3
 8004c9c:	1dfb      	adds	r3, r7, #7
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d09e      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08e      	sub	sp, #56	; 0x38
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8004cbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f383 8810 	msr	PRIMASK, r3
}
 8004ccc:	46c0      	nop			; (mov r8, r8)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4926      	ldr	r1, [pc, #152]	; (8004d74 <UART_EndRxTransfer+0xc4>)
 8004cda:	400a      	ands	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f383 8810 	msr	PRIMASK, r3
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cea:	f3ef 8310 	mrs	r3, PRIMASK
 8004cee:	623b      	str	r3, [r7, #32]
  return(result);
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	f383 8810 	msr	PRIMASK, r3
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	491b      	ldr	r1, [pc, #108]	; (8004d78 <UART_EndRxTransfer+0xc8>)
 8004d0c:	400a      	ands	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	f383 8810 	msr	PRIMASK, r3
}
 8004d1a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d118      	bne.n	8004d56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d24:	f3ef 8310 	mrs	r3, PRIMASK
 8004d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2e:	2301      	movs	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f383 8810 	msr	PRIMASK, r3
}
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2110      	movs	r1, #16
 8004d46:	438a      	bics	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f383 8810 	msr	PRIMASK, r3
}
 8004d54:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	228c      	movs	r2, #140	; 0x8c
 8004d5a:	2120      	movs	r1, #32
 8004d5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b00e      	add	sp, #56	; 0x38
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	fffffedf 	.word	0xfffffedf
 8004d78:	effffffe 	.word	0xeffffffe

08004d7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2284      	movs	r2, #132	; 0x84
 8004d88:	5c9b      	ldrb	r3, [r3, r2]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e027      	b.n	8004de2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2284      	movs	r2, #132	; 0x84
 8004d96:	2101      	movs	r1, #1
 8004d98:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2288      	movs	r2, #136	; 0x88
 8004d9e:	2124      	movs	r1, #36	; 0x24
 8004da0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2101      	movs	r1, #1
 8004db6:	438a      	bics	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a0b      	ldr	r2, [pc, #44]	; (8004dec <HAL_UARTEx_DisableFifoMode+0x70>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2288      	movs	r2, #136	; 0x88
 8004dd4:	2120      	movs	r1, #32
 8004dd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2284      	movs	r2, #132	; 0x84
 8004ddc:	2100      	movs	r1, #0
 8004dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b004      	add	sp, #16
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	dfffffff 	.word	0xdfffffff

08004df0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2284      	movs	r2, #132	; 0x84
 8004dfe:	5c9b      	ldrb	r3, [r3, r2]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e02e      	b.n	8004e66 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2284      	movs	r2, #132	; 0x84
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2288      	movs	r2, #136	; 0x88
 8004e14:	2124      	movs	r1, #36	; 0x24
 8004e16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	438a      	bics	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	08d9      	lsrs	r1, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	0018      	movs	r0, r3
 8004e48:	f000 f854 	bl	8004ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2288      	movs	r2, #136	; 0x88
 8004e58:	2120      	movs	r1, #32
 8004e5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2284      	movs	r2, #132	; 0x84
 8004e60:	2100      	movs	r1, #0
 8004e62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b004      	add	sp, #16
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2284      	movs	r2, #132	; 0x84
 8004e7e:	5c9b      	ldrb	r3, [r3, r2]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e02f      	b.n	8004ee8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2284      	movs	r2, #132	; 0x84
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2288      	movs	r2, #136	; 0x88
 8004e94:	2124      	movs	r1, #36	; 0x24
 8004e96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2101      	movs	r1, #1
 8004eac:	438a      	bics	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ef0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	0019      	movs	r1, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	0018      	movs	r0, r3
 8004eca:	f000 f813 	bl	8004ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2288      	movs	r2, #136	; 0x88
 8004eda:	2120      	movs	r1, #32
 8004edc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2284      	movs	r2, #132	; 0x84
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	0018      	movs	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b004      	add	sp, #16
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	f1ffffff 	.word	0xf1ffffff

08004ef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d108      	bne.n	8004f16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	226a      	movs	r2, #106	; 0x6a
 8004f08:	2101      	movs	r1, #1
 8004f0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2268      	movs	r2, #104	; 0x68
 8004f10:	2101      	movs	r1, #1
 8004f12:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f14:	e043      	b.n	8004f9e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f16:	260f      	movs	r6, #15
 8004f18:	19bb      	adds	r3, r7, r6
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f1e:	200e      	movs	r0, #14
 8004f20:	183b      	adds	r3, r7, r0
 8004f22:	2208      	movs	r2, #8
 8004f24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	0e5b      	lsrs	r3, r3, #25
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	240d      	movs	r4, #13
 8004f32:	193b      	adds	r3, r7, r4
 8004f34:	2107      	movs	r1, #7
 8004f36:	400a      	ands	r2, r1
 8004f38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	0f5b      	lsrs	r3, r3, #29
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	250c      	movs	r5, #12
 8004f46:	197b      	adds	r3, r7, r5
 8004f48:	2107      	movs	r1, #7
 8004f4a:	400a      	ands	r2, r1
 8004f4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f4e:	183b      	adds	r3, r7, r0
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	197a      	adds	r2, r7, r5
 8004f54:	7812      	ldrb	r2, [r2, #0]
 8004f56:	4914      	ldr	r1, [pc, #80]	; (8004fa8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f58:	5c8a      	ldrb	r2, [r1, r2]
 8004f5a:	435a      	muls	r2, r3
 8004f5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f5e:	197b      	adds	r3, r7, r5
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	4a12      	ldr	r2, [pc, #72]	; (8004fac <UARTEx_SetNbDataToProcess+0xb8>)
 8004f64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f66:	0019      	movs	r1, r3
 8004f68:	f7fb f968 	bl	800023c <__divsi3>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	b299      	uxth	r1, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	226a      	movs	r2, #106	; 0x6a
 8004f74:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f76:	19bb      	adds	r3, r7, r6
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	193a      	adds	r2, r7, r4
 8004f7c:	7812      	ldrb	r2, [r2, #0]
 8004f7e:	490a      	ldr	r1, [pc, #40]	; (8004fa8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f80:	5c8a      	ldrb	r2, [r1, r2]
 8004f82:	435a      	muls	r2, r3
 8004f84:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f86:	193b      	adds	r3, r7, r4
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	4a08      	ldr	r2, [pc, #32]	; (8004fac <UARTEx_SetNbDataToProcess+0xb8>)
 8004f8c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f8e:	0019      	movs	r1, r3
 8004f90:	f7fb f954 	bl	800023c <__divsi3>
 8004f94:	0003      	movs	r3, r0
 8004f96:	b299      	uxth	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2268      	movs	r2, #104	; 0x68
 8004f9c:	5299      	strh	r1, [r3, r2]
}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b005      	add	sp, #20
 8004fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	08005f60 	.word	0x08005f60
 8004fac:	08005f68 	.word	0x08005f68

08004fb0 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	1dfb      	adds	r3, r7, #7
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	1dbb      	adds	r3, r7, #6
 8004fbe:	1c0a      	adds	r2, r1, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8004fc2:	1dfb      	adds	r3, r7, #7
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	4a16      	ldr	r2, [pc, #88]	; (8005020 <I2C_LCD_ExpanderWrite+0x70>)
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	18d3      	adds	r3, r2, r3
 8004fcc:	3301      	adds	r3, #1
 8004fce:	781a      	ldrb	r2, [r3, #0]
 8004fd0:	1dbb      	adds	r3, r7, #6
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	240f      	movs	r4, #15
 8004fda:	193b      	adds	r3, r7, r4
 8004fdc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8004fde:	1dfb      	adds	r3, r7, #7
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	4910      	ldr	r1, [pc, #64]	; (8005024 <I2C_LCD_ExpanderWrite+0x74>)
 8004fe4:	0013      	movs	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	189b      	adds	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	18cb      	adds	r3, r1, r3
 8004fee:	3304      	adds	r3, #4
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	1dfb      	adds	r3, r7, #7
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	490b      	ldr	r1, [pc, #44]	; (8005024 <I2C_LCD_ExpanderWrite+0x74>)
 8004ff8:	0013      	movs	r3, r2
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	189b      	adds	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	18cb      	adds	r3, r1, r3
 8005002:	3308      	adds	r3, #8
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	18db      	adds	r3, r3, r3
 800500a:	b299      	uxth	r1, r3
 800500c:	193a      	adds	r2, r7, r4
 800500e:	2364      	movs	r3, #100	; 0x64
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	2301      	movs	r3, #1
 8005014:	f7fd fa3c 	bl	8002490 <HAL_I2C_Master_Transmit>
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b005      	add	sp, #20
 800501e:	bd90      	pop	{r4, r7, pc}
 8005020:	20000218 	.word	0x20000218
 8005024:	08005f70 	.word	0x08005f70

08005028 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	0002      	movs	r2, r0
 8005030:	1dfb      	adds	r3, r7, #7
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	1dbb      	adds	r3, r7, #6
 8005036:	1c0a      	adds	r2, r1, #0
 8005038:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 800503a:	1dbb      	adds	r3, r7, #6
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2204      	movs	r2, #4
 8005040:	4313      	orrs	r3, r2
 8005042:	b2da      	uxtb	r2, r3
 8005044:	1dfb      	adds	r3, r7, #7
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	0011      	movs	r1, r2
 800504a:	0018      	movs	r0, r3
 800504c:	f7ff ffb0 	bl	8004fb0 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <I2C_LCD_EnPulse+0xc0>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <I2C_LCD_EnPulse+0xc4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4925      	ldr	r1, [pc, #148]	; (80050f0 <I2C_LCD_EnPulse+0xc8>)
 800505c:	0018      	movs	r0, r3
 800505e:	f7fb f863 	bl	8000128 <__udivsi3>
 8005062:	0003      	movs	r3, r0
 8005064:	005c      	lsls	r4, r3, #1
 8005066:	4b21      	ldr	r3, [pc, #132]	; (80050ec <I2C_LCD_EnPulse+0xc4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4921      	ldr	r1, [pc, #132]	; (80050f0 <I2C_LCD_EnPulse+0xc8>)
 800506c:	0018      	movs	r0, r3
 800506e:	f7fb f85b 	bl	8000128 <__udivsi3>
 8005072:	0003      	movs	r3, r0
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	1ae3      	subs	r3, r4, r3
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <I2C_LCD_EnPulse+0xc0>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	429a      	cmp	r2, r3
 8005086:	d8f8      	bhi.n	800507a <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8005088:	1dbb      	adds	r3, r7, #6
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2204      	movs	r2, #4
 800508e:	4393      	bics	r3, r2
 8005090:	b2da      	uxtb	r2, r3
 8005092:	1dfb      	adds	r3, r7, #7
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	0011      	movs	r1, r2
 8005098:	0018      	movs	r0, r3
 800509a:	f7ff ff89 	bl	8004fb0 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <I2C_LCD_EnPulse+0xc0>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	4b11      	ldr	r3, [pc, #68]	; (80050ec <I2C_LCD_EnPulse+0xc4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4911      	ldr	r1, [pc, #68]	; (80050f0 <I2C_LCD_EnPulse+0xc8>)
 80050aa:	0018      	movs	r0, r3
 80050ac:	f7fb f83c 	bl	8000128 <__udivsi3>
 80050b0:	0003      	movs	r3, r0
 80050b2:	001a      	movs	r2, r3
 80050b4:	2332      	movs	r3, #50	; 0x32
 80050b6:	4353      	muls	r3, r2
 80050b8:	001c      	movs	r4, r3
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <I2C_LCD_EnPulse+0xc4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	490c      	ldr	r1, [pc, #48]	; (80050f0 <I2C_LCD_EnPulse+0xc8>)
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7fb f831 	bl	8000128 <__udivsi3>
 80050c6:	0003      	movs	r3, r0
 80050c8:	085b      	lsrs	r3, r3, #1
 80050ca:	1ae3      	subs	r3, r4, r3
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <I2C_LCD_EnPulse+0xc0>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d8f8      	bhi.n	80050ce <I2C_LCD_EnPulse+0xa6>
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b007      	add	sp, #28
 80050e4:	bd90      	pop	{r4, r7, pc}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	e000e010 	.word	0xe000e010
 80050ec:	20000000 	.word	0x20000000
 80050f0:	000f4240 	.word	0x000f4240

080050f4 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	0002      	movs	r2, r0
 80050fc:	1dfb      	adds	r3, r7, #7
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	1dbb      	adds	r3, r7, #6
 8005102:	1c0a      	adds	r2, r1, #0
 8005104:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8005106:	1dbb      	adds	r3, r7, #6
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	1dfb      	adds	r3, r7, #7
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	0011      	movs	r1, r2
 8005110:	0018      	movs	r0, r3
 8005112:	f7ff ff4d 	bl	8004fb0 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8005116:	1dbb      	adds	r3, r7, #6
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	1dfb      	adds	r3, r7, #7
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	0011      	movs	r1, r2
 8005120:	0018      	movs	r0, r3
 8005122:	f7ff ff81 	bl	8005028 <I2C_LCD_EnPulse>
}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b002      	add	sp, #8
 800512c:	bd80      	pop	{r7, pc}

0800512e <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 800512e:	b590      	push	{r4, r7, lr}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	0004      	movs	r4, r0
 8005136:	0008      	movs	r0, r1
 8005138:	0011      	movs	r1, r2
 800513a:	1dfb      	adds	r3, r7, #7
 800513c:	1c22      	adds	r2, r4, #0
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	1dbb      	adds	r3, r7, #6
 8005142:	1c02      	adds	r2, r0, #0
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	1d7b      	adds	r3, r7, #5
 8005148:	1c0a      	adds	r2, r1, #0
 800514a:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 800514c:	200f      	movs	r0, #15
 800514e:	183b      	adds	r3, r7, r0
 8005150:	1dba      	adds	r2, r7, #6
 8005152:	7812      	ldrb	r2, [r2, #0]
 8005154:	210f      	movs	r1, #15
 8005156:	438a      	bics	r2, r1
 8005158:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 800515a:	1dbb      	adds	r3, r7, #6
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	011a      	lsls	r2, r3, #4
 8005160:	240e      	movs	r4, #14
 8005162:	193b      	adds	r3, r7, r4
 8005164:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8005166:	183a      	adds	r2, r7, r0
 8005168:	1d7b      	adds	r3, r7, #5
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	b2da      	uxtb	r2, r3
 8005172:	1dfb      	adds	r3, r7, #7
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	0011      	movs	r1, r2
 8005178:	0018      	movs	r0, r3
 800517a:	f7ff ffbb 	bl	80050f4 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800517e:	193a      	adds	r2, r7, r4
 8005180:	1d7b      	adds	r3, r7, #5
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	b2da      	uxtb	r2, r3
 800518a:	1dfb      	adds	r3, r7, #7
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	0011      	movs	r1, r2
 8005190:	0018      	movs	r0, r3
 8005192:	f7ff ffaf 	bl	80050f4 <I2C_LCD_Write4Bits>
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	46bd      	mov	sp, r7
 800519a:	b005      	add	sp, #20
 800519c:	bd90      	pop	{r4, r7, pc}

0800519e <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	0002      	movs	r2, r0
 80051a6:	1dfb      	adds	r3, r7, #7
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	1dbb      	adds	r3, r7, #6
 80051ac:	1c0a      	adds	r2, r1, #0
 80051ae:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80051b0:	1dbb      	adds	r3, r7, #6
 80051b2:	7819      	ldrb	r1, [r3, #0]
 80051b4:	1dfb      	adds	r3, r7, #7
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2200      	movs	r2, #0
 80051ba:	0018      	movs	r0, r3
 80051bc:	f7ff ffb7 	bl	800512e <I2C_LCD_Send>
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b002      	add	sp, #8
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	0002      	movs	r2, r0
 80051d0:	1dfb      	adds	r3, r7, #7
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	1dbb      	adds	r3, r7, #6
 80051d6:	1c0a      	adds	r2, r1, #0
 80051d8:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80051da:	1dbb      	adds	r3, r7, #6
 80051dc:	7819      	ldrb	r1, [r3, #0]
 80051de:	1dfb      	adds	r3, r7, #7
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2201      	movs	r2, #1
 80051e4:	0018      	movs	r0, r3
 80051e6:	f7ff ffa2 	bl	800512e <I2C_LCD_Send>
}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b002      	add	sp, #8
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b08b      	sub	sp, #44	; 0x2c
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	0002      	movs	r2, r0
 80051fc:	1dfb      	adds	r3, r7, #7
 80051fe:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8005200:	46c0      	nop			; (mov r8, r8)
 8005202:	f7fb ffd1 	bl	80011a8 <HAL_GetTick>
 8005206:	0003      	movs	r3, r0
 8005208:	2b31      	cmp	r3, #49	; 0x31
 800520a:	d9fa      	bls.n	8005202 <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800520c:	1dfb      	adds	r3, r7, #7
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2130      	movs	r1, #48	; 0x30
 8005212:	0018      	movs	r0, r3
 8005214:	f7ff ffc3 	bl	800519e <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8005218:	2300      	movs	r3, #0
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
 800521c:	e025      	b.n	800526a <I2C_LCD_Init+0x76>
 800521e:	4b57      	ldr	r3, [pc, #348]	; (800537c <I2C_LCD_Init+0x188>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	4b56      	ldr	r3, [pc, #344]	; (8005380 <I2C_LCD_Init+0x18c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4956      	ldr	r1, [pc, #344]	; (8005384 <I2C_LCD_Init+0x190>)
 800522a:	0018      	movs	r0, r3
 800522c:	f7fa ff7c 	bl	8000128 <__udivsi3>
 8005230:	0003      	movs	r3, r0
 8005232:	001a      	movs	r2, r3
 8005234:	0013      	movs	r3, r2
 8005236:	015b      	lsls	r3, r3, #5
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	189b      	adds	r3, r3, r2
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	001c      	movs	r4, r3
 8005242:	4b4f      	ldr	r3, [pc, #316]	; (8005380 <I2C_LCD_Init+0x18c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	494f      	ldr	r1, [pc, #316]	; (8005384 <I2C_LCD_Init+0x190>)
 8005248:	0018      	movs	r0, r3
 800524a:	f7fa ff6d 	bl	8000128 <__udivsi3>
 800524e:	0003      	movs	r3, r0
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	1ae3      	subs	r3, r4, r3
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	4b49      	ldr	r3, [pc, #292]	; (800537c <I2C_LCD_Init+0x188>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d8f8      	bhi.n	8005256 <I2C_LCD_Init+0x62>
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	3301      	adds	r3, #1
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	2b04      	cmp	r3, #4
 800526e:	d9d6      	bls.n	800521e <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8005270:	1dfb      	adds	r3, r7, #7
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2130      	movs	r1, #48	; 0x30
 8005276:	0018      	movs	r0, r3
 8005278:	f7ff ff91 	bl	800519e <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 800527c:	2300      	movs	r3, #0
 800527e:	623b      	str	r3, [r7, #32]
 8005280:	e025      	b.n	80052ce <I2C_LCD_Init+0xda>
 8005282:	4b3e      	ldr	r3, [pc, #248]	; (800537c <I2C_LCD_Init+0x188>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	4b3d      	ldr	r3, [pc, #244]	; (8005380 <I2C_LCD_Init+0x18c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	493d      	ldr	r1, [pc, #244]	; (8005384 <I2C_LCD_Init+0x190>)
 800528e:	0018      	movs	r0, r3
 8005290:	f7fa ff4a 	bl	8000128 <__udivsi3>
 8005294:	0003      	movs	r3, r0
 8005296:	001a      	movs	r2, r3
 8005298:	0013      	movs	r3, r2
 800529a:	015b      	lsls	r3, r3, #5
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	189b      	adds	r3, r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	001c      	movs	r4, r3
 80052a6:	4b36      	ldr	r3, [pc, #216]	; (8005380 <I2C_LCD_Init+0x18c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4936      	ldr	r1, [pc, #216]	; (8005384 <I2C_LCD_Init+0x190>)
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7fa ff3b 	bl	8000128 <__udivsi3>
 80052b2:	0003      	movs	r3, r0
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	1ae3      	subs	r3, r4, r3
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	4b30      	ldr	r3, [pc, #192]	; (800537c <I2C_LCD_Init+0x188>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d8f8      	bhi.n	80052ba <I2C_LCD_Init+0xc6>
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	3301      	adds	r3, #1
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d9d6      	bls.n	8005282 <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80052d4:	1dfb      	adds	r3, r7, #7
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2130      	movs	r1, #48	; 0x30
 80052da:	0018      	movs	r0, r3
 80052dc:	f7ff ff5f 	bl	800519e <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80052e0:	4b26      	ldr	r3, [pc, #152]	; (800537c <I2C_LCD_Init+0x188>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	4b26      	ldr	r3, [pc, #152]	; (8005380 <I2C_LCD_Init+0x18c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4926      	ldr	r1, [pc, #152]	; (8005384 <I2C_LCD_Init+0x190>)
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7fa ff1b 	bl	8000128 <__udivsi3>
 80052f2:	0003      	movs	r3, r0
 80052f4:	001a      	movs	r2, r3
 80052f6:	2396      	movs	r3, #150	; 0x96
 80052f8:	4353      	muls	r3, r2
 80052fa:	001c      	movs	r4, r3
 80052fc:	4b20      	ldr	r3, [pc, #128]	; (8005380 <I2C_LCD_Init+0x18c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4920      	ldr	r1, [pc, #128]	; (8005384 <I2C_LCD_Init+0x190>)
 8005302:	0018      	movs	r0, r3
 8005304:	f7fa ff10 	bl	8000128 <__udivsi3>
 8005308:	0003      	movs	r3, r0
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	1ae3      	subs	r3, r4, r3
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	4b1a      	ldr	r3, [pc, #104]	; (800537c <I2C_LCD_Init+0x188>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	429a      	cmp	r2, r3
 800531c:	d8f8      	bhi.n	8005310 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 800531e:	1dfb      	adds	r3, r7, #7
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2102      	movs	r1, #2
 8005324:	0018      	movs	r0, r3
 8005326:	f7ff ff3a 	bl	800519e <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800532a:	1dfb      	adds	r3, r7, #7
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2128      	movs	r1, #40	; 0x28
 8005330:	0018      	movs	r0, r3
 8005332:	f7ff ff34 	bl	800519e <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8005336:	1dfb      	adds	r3, r7, #7
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	210c      	movs	r1, #12
 800533c:	0018      	movs	r0, r3
 800533e:	f7ff ff2e 	bl	800519e <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8005342:	1dfb      	adds	r3, r7, #7
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2106      	movs	r1, #6
 8005348:	0018      	movs	r0, r3
 800534a:	f7ff ff28 	bl	800519e <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800534e:	1dfb      	adds	r3, r7, #7
 8005350:	781a      	ldrb	r2, [r3, #0]
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <I2C_LCD_Init+0x194>)
 8005354:	0052      	lsls	r2, r2, #1
 8005356:	2104      	movs	r1, #4
 8005358:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 800535a:	1dfb      	adds	r3, r7, #7
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <I2C_LCD_Init+0x194>)
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	18d3      	adds	r3, r2, r3
 8005364:	3301      	adds	r3, #1
 8005366:	2208      	movs	r2, #8
 8005368:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 800536a:	1dfb      	adds	r3, r7, #7
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	0018      	movs	r0, r3
 8005370:	f000 f80c 	bl	800538c <I2C_LCD_Clear>
}
 8005374:	46c0      	nop			; (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b00b      	add	sp, #44	; 0x2c
 800537a:	bd90      	pop	{r4, r7, pc}
 800537c:	e000e010 	.word	0xe000e010
 8005380:	20000000 	.word	0x20000000
 8005384:	000f4240 	.word	0x000f4240
 8005388:	20000218 	.word	0x20000218

0800538c <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 800538c:	b590      	push	{r4, r7, lr}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	0002      	movs	r2, r0
 8005394:	1dfb      	adds	r3, r7, #7
 8005396:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8005398:	1dfb      	adds	r3, r7, #7
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2101      	movs	r1, #1
 800539e:	0018      	movs	r0, r3
 80053a0:	f7ff fefd 	bl	800519e <I2C_LCD_Cmd>
    DELAY_MS(2);
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e025      	b.n	80053f6 <I2C_LCD_Clear+0x6a>
 80053aa:	4b17      	ldr	r3, [pc, #92]	; (8005408 <I2C_LCD_Clear+0x7c>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	4b16      	ldr	r3, [pc, #88]	; (800540c <I2C_LCD_Clear+0x80>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4916      	ldr	r1, [pc, #88]	; (8005410 <I2C_LCD_Clear+0x84>)
 80053b6:	0018      	movs	r0, r3
 80053b8:	f7fa feb6 	bl	8000128 <__udivsi3>
 80053bc:	0003      	movs	r3, r0
 80053be:	001a      	movs	r2, r3
 80053c0:	0013      	movs	r3, r2
 80053c2:	015b      	lsls	r3, r3, #5
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	189b      	adds	r3, r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	001c      	movs	r4, r3
 80053ce:	4b0f      	ldr	r3, [pc, #60]	; (800540c <I2C_LCD_Clear+0x80>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	490f      	ldr	r1, [pc, #60]	; (8005410 <I2C_LCD_Clear+0x84>)
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7fa fea7 	bl	8000128 <__udivsi3>
 80053da:	0003      	movs	r3, r0
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	1ae3      	subs	r3, r4, r3
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <I2C_LCD_Clear+0x7c>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d8f8      	bhi.n	80053e2 <I2C_LCD_Clear+0x56>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	3301      	adds	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d9d6      	bls.n	80053aa <I2C_LCD_Clear+0x1e>
}
 80053fc:	46c0      	nop			; (mov r8, r8)
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	46bd      	mov	sp, r7
 8005402:	b007      	add	sp, #28
 8005404:	bd90      	pop	{r4, r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	e000e010 	.word	0xe000e010
 800540c:	20000000 	.word	0x20000000
 8005410:	000f4240 	.word	0x000f4240

08005414 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	0004      	movs	r4, r0
 800541c:	0008      	movs	r0, r1
 800541e:	0011      	movs	r1, r2
 8005420:	1dfb      	adds	r3, r7, #7
 8005422:	1c22      	adds	r2, r4, #0
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	1dbb      	adds	r3, r7, #6
 8005428:	1c02      	adds	r2, r0, #0
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	1d7b      	adds	r3, r7, #5
 800542e:	1c0a      	adds	r2, r1, #0
 8005430:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8005432:	2308      	movs	r3, #8
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <I2C_LCD_SetCursor+0x98>)
 8005438:	ca13      	ldmia	r2!, {r0, r1, r4}
 800543a:	c313      	stmia	r3!, {r0, r1, r4}
 800543c:	6812      	ldr	r2, [r2, #0]
 800543e:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8005440:	1dfb      	adds	r3, r7, #7
 8005442:	781a      	ldrb	r2, [r3, #0]
 8005444:	491a      	ldr	r1, [pc, #104]	; (80054b0 <I2C_LCD_SetCursor+0x9c>)
 8005446:	0013      	movs	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	189b      	adds	r3, r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	18cb      	adds	r3, r1, r3
 8005450:	330a      	adds	r3, #10
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	1d7a      	adds	r2, r7, #5
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d90c      	bls.n	8005476 <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 800545c:	1dfb      	adds	r3, r7, #7
 800545e:	781a      	ldrb	r2, [r3, #0]
 8005460:	4913      	ldr	r1, [pc, #76]	; (80054b0 <I2C_LCD_SetCursor+0x9c>)
 8005462:	0013      	movs	r3, r2
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	189b      	adds	r3, r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	18cb      	adds	r3, r1, r3
 800546c:	330a      	adds	r3, #10
 800546e:	781a      	ldrb	r2, [r3, #0]
 8005470:	1d7b      	adds	r3, r7, #5
 8005472:	3a01      	subs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8005476:	1d7b      	adds	r3, r7, #5
 8005478:	781a      	ldrb	r2, [r3, #0]
 800547a:	2308      	movs	r3, #8
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	0092      	lsls	r2, r2, #2
 8005480:	58d3      	ldr	r3, [r2, r3]
 8005482:	b2da      	uxtb	r2, r3
 8005484:	1dbb      	adds	r3, r7, #6
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	18d3      	adds	r3, r2, r3
 800548a:	b2db      	uxtb	r3, r3
 800548c:	b25b      	sxtb	r3, r3
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	4252      	negs	r2, r2
 8005492:	4313      	orrs	r3, r2
 8005494:	b25b      	sxtb	r3, r3
 8005496:	b2da      	uxtb	r2, r3
 8005498:	1dfb      	adds	r3, r7, #7
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	0011      	movs	r1, r2
 800549e:	0018      	movs	r0, r3
 80054a0:	f7ff fe7d 	bl	800519e <I2C_LCD_Cmd>
}
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b007      	add	sp, #28
 80054aa:	bd90      	pop	{r4, r7, pc}
 80054ac:	08005ed8 	.word	0x08005ed8
 80054b0:	08005f70 	.word	0x08005f70

080054b4 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	0002      	movs	r2, r0
 80054bc:	6039      	str	r1, [r7, #0]
 80054be:	1dfb      	adds	r3, r7, #7
 80054c0:	701a      	strb	r2, [r3, #0]
    while (*Str)
 80054c2:	e009      	b.n	80054d8 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	603a      	str	r2, [r7, #0]
 80054ca:	781a      	ldrb	r2, [r3, #0]
 80054cc:	1dfb      	adds	r3, r7, #7
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	0011      	movs	r1, r2
 80054d2:	0018      	movs	r0, r3
 80054d4:	f7ff fe78 	bl	80051c8 <I2C_LCD_Data>
    while (*Str)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f1      	bne.n	80054c4 <I2C_LCD_WriteString+0x10>
    }
}
 80054e0:	46c0      	nop			; (mov r8, r8)
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b002      	add	sp, #8
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <siprintf>:
 80054ec:	b40e      	push	{r1, r2, r3}
 80054ee:	b500      	push	{lr}
 80054f0:	490b      	ldr	r1, [pc, #44]	; (8005520 <siprintf+0x34>)
 80054f2:	b09c      	sub	sp, #112	; 0x70
 80054f4:	ab1d      	add	r3, sp, #116	; 0x74
 80054f6:	9002      	str	r0, [sp, #8]
 80054f8:	9006      	str	r0, [sp, #24]
 80054fa:	9107      	str	r1, [sp, #28]
 80054fc:	9104      	str	r1, [sp, #16]
 80054fe:	4809      	ldr	r0, [pc, #36]	; (8005524 <siprintf+0x38>)
 8005500:	4909      	ldr	r1, [pc, #36]	; (8005528 <siprintf+0x3c>)
 8005502:	cb04      	ldmia	r3!, {r2}
 8005504:	9105      	str	r1, [sp, #20]
 8005506:	6800      	ldr	r0, [r0, #0]
 8005508:	a902      	add	r1, sp, #8
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	f000 f9a2 	bl	8005854 <_svfiprintf_r>
 8005510:	2200      	movs	r2, #0
 8005512:	9b02      	ldr	r3, [sp, #8]
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	b01c      	add	sp, #112	; 0x70
 8005518:	bc08      	pop	{r3}
 800551a:	b003      	add	sp, #12
 800551c:	4718      	bx	r3
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	7fffffff 	.word	0x7fffffff
 8005524:	20000058 	.word	0x20000058
 8005528:	ffff0208 	.word	0xffff0208

0800552c <memset>:
 800552c:	0003      	movs	r3, r0
 800552e:	1882      	adds	r2, r0, r2
 8005530:	4293      	cmp	r3, r2
 8005532:	d100      	bne.n	8005536 <memset+0xa>
 8005534:	4770      	bx	lr
 8005536:	7019      	strb	r1, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	e7f9      	b.n	8005530 <memset+0x4>

0800553c <__errno>:
 800553c:	4b01      	ldr	r3, [pc, #4]	; (8005544 <__errno+0x8>)
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	4770      	bx	lr
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	20000058 	.word	0x20000058

08005548 <__libc_init_array>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	2600      	movs	r6, #0
 800554c:	4c0c      	ldr	r4, [pc, #48]	; (8005580 <__libc_init_array+0x38>)
 800554e:	4d0d      	ldr	r5, [pc, #52]	; (8005584 <__libc_init_array+0x3c>)
 8005550:	1b64      	subs	r4, r4, r5
 8005552:	10a4      	asrs	r4, r4, #2
 8005554:	42a6      	cmp	r6, r4
 8005556:	d109      	bne.n	800556c <__libc_init_array+0x24>
 8005558:	2600      	movs	r6, #0
 800555a:	f000 fc6d 	bl	8005e38 <_init>
 800555e:	4c0a      	ldr	r4, [pc, #40]	; (8005588 <__libc_init_array+0x40>)
 8005560:	4d0a      	ldr	r5, [pc, #40]	; (800558c <__libc_init_array+0x44>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	42a6      	cmp	r6, r4
 8005568:	d105      	bne.n	8005576 <__libc_init_array+0x2e>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	00b3      	lsls	r3, r6, #2
 800556e:	58eb      	ldr	r3, [r5, r3]
 8005570:	4798      	blx	r3
 8005572:	3601      	adds	r6, #1
 8005574:	e7ee      	b.n	8005554 <__libc_init_array+0xc>
 8005576:	00b3      	lsls	r3, r6, #2
 8005578:	58eb      	ldr	r3, [r5, r3]
 800557a:	4798      	blx	r3
 800557c:	3601      	adds	r6, #1
 800557e:	e7f2      	b.n	8005566 <__libc_init_array+0x1e>
 8005580:	08005fb8 	.word	0x08005fb8
 8005584:	08005fb8 	.word	0x08005fb8
 8005588:	08005fbc 	.word	0x08005fbc
 800558c:	08005fb8 	.word	0x08005fb8

08005590 <__retarget_lock_acquire_recursive>:
 8005590:	4770      	bx	lr

08005592 <__retarget_lock_release_recursive>:
 8005592:	4770      	bx	lr

08005594 <_free_r>:
 8005594:	b570      	push	{r4, r5, r6, lr}
 8005596:	0005      	movs	r5, r0
 8005598:	2900      	cmp	r1, #0
 800559a:	d010      	beq.n	80055be <_free_r+0x2a>
 800559c:	1f0c      	subs	r4, r1, #4
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	da00      	bge.n	80055a6 <_free_r+0x12>
 80055a4:	18e4      	adds	r4, r4, r3
 80055a6:	0028      	movs	r0, r5
 80055a8:	f000 f8e2 	bl	8005770 <__malloc_lock>
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <_free_r+0x90>)
 80055ae:	6813      	ldr	r3, [r2, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <_free_r+0x2c>
 80055b4:	6063      	str	r3, [r4, #4]
 80055b6:	6014      	str	r4, [r2, #0]
 80055b8:	0028      	movs	r0, r5
 80055ba:	f000 f8e1 	bl	8005780 <__malloc_unlock>
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	d908      	bls.n	80055d6 <_free_r+0x42>
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	1821      	adds	r1, r4, r0
 80055c8:	428b      	cmp	r3, r1
 80055ca:	d1f3      	bne.n	80055b4 <_free_r+0x20>
 80055cc:	6819      	ldr	r1, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	1809      	adds	r1, r1, r0
 80055d2:	6021      	str	r1, [r4, #0]
 80055d4:	e7ee      	b.n	80055b4 <_free_r+0x20>
 80055d6:	001a      	movs	r2, r3
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <_free_r+0x4e>
 80055de:	42a3      	cmp	r3, r4
 80055e0:	d9f9      	bls.n	80055d6 <_free_r+0x42>
 80055e2:	6811      	ldr	r1, [r2, #0]
 80055e4:	1850      	adds	r0, r2, r1
 80055e6:	42a0      	cmp	r0, r4
 80055e8:	d10b      	bne.n	8005602 <_free_r+0x6e>
 80055ea:	6820      	ldr	r0, [r4, #0]
 80055ec:	1809      	adds	r1, r1, r0
 80055ee:	1850      	adds	r0, r2, r1
 80055f0:	6011      	str	r1, [r2, #0]
 80055f2:	4283      	cmp	r3, r0
 80055f4:	d1e0      	bne.n	80055b8 <_free_r+0x24>
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	1841      	adds	r1, r0, r1
 80055fc:	6011      	str	r1, [r2, #0]
 80055fe:	6053      	str	r3, [r2, #4]
 8005600:	e7da      	b.n	80055b8 <_free_r+0x24>
 8005602:	42a0      	cmp	r0, r4
 8005604:	d902      	bls.n	800560c <_free_r+0x78>
 8005606:	230c      	movs	r3, #12
 8005608:	602b      	str	r3, [r5, #0]
 800560a:	e7d5      	b.n	80055b8 <_free_r+0x24>
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	1821      	adds	r1, r4, r0
 8005610:	428b      	cmp	r3, r1
 8005612:	d103      	bne.n	800561c <_free_r+0x88>
 8005614:	6819      	ldr	r1, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	1809      	adds	r1, r1, r0
 800561a:	6021      	str	r1, [r4, #0]
 800561c:	6063      	str	r3, [r4, #4]
 800561e:	6054      	str	r4, [r2, #4]
 8005620:	e7ca      	b.n	80055b8 <_free_r+0x24>
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	2000035c 	.word	0x2000035c

08005628 <sbrk_aligned>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4e0f      	ldr	r6, [pc, #60]	; (8005668 <sbrk_aligned+0x40>)
 800562c:	000d      	movs	r5, r1
 800562e:	6831      	ldr	r1, [r6, #0]
 8005630:	0004      	movs	r4, r0
 8005632:	2900      	cmp	r1, #0
 8005634:	d102      	bne.n	800563c <sbrk_aligned+0x14>
 8005636:	f000 fba1 	bl	8005d7c <_sbrk_r>
 800563a:	6030      	str	r0, [r6, #0]
 800563c:	0029      	movs	r1, r5
 800563e:	0020      	movs	r0, r4
 8005640:	f000 fb9c 	bl	8005d7c <_sbrk_r>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d00a      	beq.n	800565e <sbrk_aligned+0x36>
 8005648:	2303      	movs	r3, #3
 800564a:	1cc5      	adds	r5, r0, #3
 800564c:	439d      	bics	r5, r3
 800564e:	42a8      	cmp	r0, r5
 8005650:	d007      	beq.n	8005662 <sbrk_aligned+0x3a>
 8005652:	1a29      	subs	r1, r5, r0
 8005654:	0020      	movs	r0, r4
 8005656:	f000 fb91 	bl	8005d7c <_sbrk_r>
 800565a:	3001      	adds	r0, #1
 800565c:	d101      	bne.n	8005662 <sbrk_aligned+0x3a>
 800565e:	2501      	movs	r5, #1
 8005660:	426d      	negs	r5, r5
 8005662:	0028      	movs	r0, r5
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	20000360 	.word	0x20000360

0800566c <_malloc_r>:
 800566c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800566e:	2203      	movs	r2, #3
 8005670:	1ccb      	adds	r3, r1, #3
 8005672:	4393      	bics	r3, r2
 8005674:	3308      	adds	r3, #8
 8005676:	0006      	movs	r6, r0
 8005678:	001f      	movs	r7, r3
 800567a:	2b0c      	cmp	r3, #12
 800567c:	d238      	bcs.n	80056f0 <_malloc_r+0x84>
 800567e:	270c      	movs	r7, #12
 8005680:	42b9      	cmp	r1, r7
 8005682:	d837      	bhi.n	80056f4 <_malloc_r+0x88>
 8005684:	0030      	movs	r0, r6
 8005686:	f000 f873 	bl	8005770 <__malloc_lock>
 800568a:	4b38      	ldr	r3, [pc, #224]	; (800576c <_malloc_r+0x100>)
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	001c      	movs	r4, r3
 8005692:	2c00      	cmp	r4, #0
 8005694:	d133      	bne.n	80056fe <_malloc_r+0x92>
 8005696:	0039      	movs	r1, r7
 8005698:	0030      	movs	r0, r6
 800569a:	f7ff ffc5 	bl	8005628 <sbrk_aligned>
 800569e:	0004      	movs	r4, r0
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d15e      	bne.n	8005762 <_malloc_r+0xf6>
 80056a4:	9b00      	ldr	r3, [sp, #0]
 80056a6:	681c      	ldr	r4, [r3, #0]
 80056a8:	0025      	movs	r5, r4
 80056aa:	2d00      	cmp	r5, #0
 80056ac:	d14e      	bne.n	800574c <_malloc_r+0xe0>
 80056ae:	2c00      	cmp	r4, #0
 80056b0:	d051      	beq.n	8005756 <_malloc_r+0xea>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	0029      	movs	r1, r5
 80056b6:	18e3      	adds	r3, r4, r3
 80056b8:	0030      	movs	r0, r6
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	f000 fb5e 	bl	8005d7c <_sbrk_r>
 80056c0:	9b01      	ldr	r3, [sp, #4]
 80056c2:	4283      	cmp	r3, r0
 80056c4:	d147      	bne.n	8005756 <_malloc_r+0xea>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	0030      	movs	r0, r6
 80056ca:	1aff      	subs	r7, r7, r3
 80056cc:	0039      	movs	r1, r7
 80056ce:	f7ff ffab 	bl	8005628 <sbrk_aligned>
 80056d2:	3001      	adds	r0, #1
 80056d4:	d03f      	beq.n	8005756 <_malloc_r+0xea>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	19db      	adds	r3, r3, r7
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	9b00      	ldr	r3, [sp, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d040      	beq.n	8005766 <_malloc_r+0xfa>
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	42a2      	cmp	r2, r4
 80056e8:	d133      	bne.n	8005752 <_malloc_r+0xe6>
 80056ea:	2200      	movs	r2, #0
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	e014      	b.n	800571a <_malloc_r+0xae>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	dac5      	bge.n	8005680 <_malloc_r+0x14>
 80056f4:	230c      	movs	r3, #12
 80056f6:	2500      	movs	r5, #0
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	0028      	movs	r0, r5
 80056fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056fe:	6821      	ldr	r1, [r4, #0]
 8005700:	1bc9      	subs	r1, r1, r7
 8005702:	d420      	bmi.n	8005746 <_malloc_r+0xda>
 8005704:	290b      	cmp	r1, #11
 8005706:	d918      	bls.n	800573a <_malloc_r+0xce>
 8005708:	19e2      	adds	r2, r4, r7
 800570a:	6027      	str	r7, [r4, #0]
 800570c:	42a3      	cmp	r3, r4
 800570e:	d112      	bne.n	8005736 <_malloc_r+0xca>
 8005710:	9b00      	ldr	r3, [sp, #0]
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	6011      	str	r1, [r2, #0]
 8005718:	6053      	str	r3, [r2, #4]
 800571a:	0030      	movs	r0, r6
 800571c:	0025      	movs	r5, r4
 800571e:	f000 f82f 	bl	8005780 <__malloc_unlock>
 8005722:	2207      	movs	r2, #7
 8005724:	350b      	adds	r5, #11
 8005726:	1d23      	adds	r3, r4, #4
 8005728:	4395      	bics	r5, r2
 800572a:	1aea      	subs	r2, r5, r3
 800572c:	429d      	cmp	r5, r3
 800572e:	d0e4      	beq.n	80056fa <_malloc_r+0x8e>
 8005730:	1b5b      	subs	r3, r3, r5
 8005732:	50a3      	str	r3, [r4, r2]
 8005734:	e7e1      	b.n	80056fa <_malloc_r+0x8e>
 8005736:	605a      	str	r2, [r3, #4]
 8005738:	e7ec      	b.n	8005714 <_malloc_r+0xa8>
 800573a:	6862      	ldr	r2, [r4, #4]
 800573c:	42a3      	cmp	r3, r4
 800573e:	d1d5      	bne.n	80056ec <_malloc_r+0x80>
 8005740:	9b00      	ldr	r3, [sp, #0]
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e7e9      	b.n	800571a <_malloc_r+0xae>
 8005746:	0023      	movs	r3, r4
 8005748:	6864      	ldr	r4, [r4, #4]
 800574a:	e7a2      	b.n	8005692 <_malloc_r+0x26>
 800574c:	002c      	movs	r4, r5
 800574e:	686d      	ldr	r5, [r5, #4]
 8005750:	e7ab      	b.n	80056aa <_malloc_r+0x3e>
 8005752:	0013      	movs	r3, r2
 8005754:	e7c4      	b.n	80056e0 <_malloc_r+0x74>
 8005756:	230c      	movs	r3, #12
 8005758:	0030      	movs	r0, r6
 800575a:	6033      	str	r3, [r6, #0]
 800575c:	f000 f810 	bl	8005780 <__malloc_unlock>
 8005760:	e7cb      	b.n	80056fa <_malloc_r+0x8e>
 8005762:	6027      	str	r7, [r4, #0]
 8005764:	e7d9      	b.n	800571a <_malloc_r+0xae>
 8005766:	605b      	str	r3, [r3, #4]
 8005768:	deff      	udf	#255	; 0xff
 800576a:	46c0      	nop			; (mov r8, r8)
 800576c:	2000035c 	.word	0x2000035c

08005770 <__malloc_lock>:
 8005770:	b510      	push	{r4, lr}
 8005772:	4802      	ldr	r0, [pc, #8]	; (800577c <__malloc_lock+0xc>)
 8005774:	f7ff ff0c 	bl	8005590 <__retarget_lock_acquire_recursive>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	20000358 	.word	0x20000358

08005780 <__malloc_unlock>:
 8005780:	b510      	push	{r4, lr}
 8005782:	4802      	ldr	r0, [pc, #8]	; (800578c <__malloc_unlock+0xc>)
 8005784:	f7ff ff05 	bl	8005592 <__retarget_lock_release_recursive>
 8005788:	bd10      	pop	{r4, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	20000358 	.word	0x20000358

08005790 <__ssputs_r>:
 8005790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005792:	b085      	sub	sp, #20
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	9203      	str	r2, [sp, #12]
 8005798:	688e      	ldr	r6, [r1, #8]
 800579a:	9a01      	ldr	r2, [sp, #4]
 800579c:	0007      	movs	r7, r0
 800579e:	000c      	movs	r4, r1
 80057a0:	680b      	ldr	r3, [r1, #0]
 80057a2:	4296      	cmp	r6, r2
 80057a4:	d831      	bhi.n	800580a <__ssputs_r+0x7a>
 80057a6:	898a      	ldrh	r2, [r1, #12]
 80057a8:	2190      	movs	r1, #144	; 0x90
 80057aa:	00c9      	lsls	r1, r1, #3
 80057ac:	420a      	tst	r2, r1
 80057ae:	d029      	beq.n	8005804 <__ssputs_r+0x74>
 80057b0:	2003      	movs	r0, #3
 80057b2:	6921      	ldr	r1, [r4, #16]
 80057b4:	1a5b      	subs	r3, r3, r1
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	6963      	ldr	r3, [r4, #20]
 80057ba:	4343      	muls	r3, r0
 80057bc:	0fdd      	lsrs	r5, r3, #31
 80057be:	18ed      	adds	r5, r5, r3
 80057c0:	9b01      	ldr	r3, [sp, #4]
 80057c2:	9802      	ldr	r0, [sp, #8]
 80057c4:	3301      	adds	r3, #1
 80057c6:	181b      	adds	r3, r3, r0
 80057c8:	106d      	asrs	r5, r5, #1
 80057ca:	42ab      	cmp	r3, r5
 80057cc:	d900      	bls.n	80057d0 <__ssputs_r+0x40>
 80057ce:	001d      	movs	r5, r3
 80057d0:	0552      	lsls	r2, r2, #21
 80057d2:	d529      	bpl.n	8005828 <__ssputs_r+0x98>
 80057d4:	0029      	movs	r1, r5
 80057d6:	0038      	movs	r0, r7
 80057d8:	f7ff ff48 	bl	800566c <_malloc_r>
 80057dc:	1e06      	subs	r6, r0, #0
 80057de:	d02d      	beq.n	800583c <__ssputs_r+0xac>
 80057e0:	9a02      	ldr	r2, [sp, #8]
 80057e2:	6921      	ldr	r1, [r4, #16]
 80057e4:	f000 fae7 	bl	8005db6 <memcpy>
 80057e8:	89a2      	ldrh	r2, [r4, #12]
 80057ea:	4b19      	ldr	r3, [pc, #100]	; (8005850 <__ssputs_r+0xc0>)
 80057ec:	401a      	ands	r2, r3
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	4313      	orrs	r3, r2
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	9b02      	ldr	r3, [sp, #8]
 80057f6:	6126      	str	r6, [r4, #16]
 80057f8:	18f6      	adds	r6, r6, r3
 80057fa:	6026      	str	r6, [r4, #0]
 80057fc:	6165      	str	r5, [r4, #20]
 80057fe:	9e01      	ldr	r6, [sp, #4]
 8005800:	1aed      	subs	r5, r5, r3
 8005802:	60a5      	str	r5, [r4, #8]
 8005804:	9b01      	ldr	r3, [sp, #4]
 8005806:	429e      	cmp	r6, r3
 8005808:	d900      	bls.n	800580c <__ssputs_r+0x7c>
 800580a:	9e01      	ldr	r6, [sp, #4]
 800580c:	0032      	movs	r2, r6
 800580e:	9903      	ldr	r1, [sp, #12]
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	f000 fa9f 	bl	8005d54 <memmove>
 8005816:	2000      	movs	r0, #0
 8005818:	68a3      	ldr	r3, [r4, #8]
 800581a:	1b9b      	subs	r3, r3, r6
 800581c:	60a3      	str	r3, [r4, #8]
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	199b      	adds	r3, r3, r6
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	b005      	add	sp, #20
 8005826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005828:	002a      	movs	r2, r5
 800582a:	0038      	movs	r0, r7
 800582c:	f000 facc 	bl	8005dc8 <_realloc_r>
 8005830:	1e06      	subs	r6, r0, #0
 8005832:	d1df      	bne.n	80057f4 <__ssputs_r+0x64>
 8005834:	0038      	movs	r0, r7
 8005836:	6921      	ldr	r1, [r4, #16]
 8005838:	f7ff feac 	bl	8005594 <_free_r>
 800583c:	230c      	movs	r3, #12
 800583e:	2001      	movs	r0, #1
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	89a2      	ldrh	r2, [r4, #12]
 8005844:	3334      	adds	r3, #52	; 0x34
 8005846:	4313      	orrs	r3, r2
 8005848:	81a3      	strh	r3, [r4, #12]
 800584a:	4240      	negs	r0, r0
 800584c:	e7ea      	b.n	8005824 <__ssputs_r+0x94>
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	fffffb7f 	.word	0xfffffb7f

08005854 <_svfiprintf_r>:
 8005854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005856:	b0a1      	sub	sp, #132	; 0x84
 8005858:	9003      	str	r0, [sp, #12]
 800585a:	001d      	movs	r5, r3
 800585c:	898b      	ldrh	r3, [r1, #12]
 800585e:	000f      	movs	r7, r1
 8005860:	0016      	movs	r6, r2
 8005862:	061b      	lsls	r3, r3, #24
 8005864:	d511      	bpl.n	800588a <_svfiprintf_r+0x36>
 8005866:	690b      	ldr	r3, [r1, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10e      	bne.n	800588a <_svfiprintf_r+0x36>
 800586c:	2140      	movs	r1, #64	; 0x40
 800586e:	f7ff fefd 	bl	800566c <_malloc_r>
 8005872:	6038      	str	r0, [r7, #0]
 8005874:	6138      	str	r0, [r7, #16]
 8005876:	2800      	cmp	r0, #0
 8005878:	d105      	bne.n	8005886 <_svfiprintf_r+0x32>
 800587a:	230c      	movs	r3, #12
 800587c:	9a03      	ldr	r2, [sp, #12]
 800587e:	3801      	subs	r0, #1
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	b021      	add	sp, #132	; 0x84
 8005884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005886:	2340      	movs	r3, #64	; 0x40
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	2300      	movs	r3, #0
 800588c:	ac08      	add	r4, sp, #32
 800588e:	6163      	str	r3, [r4, #20]
 8005890:	3320      	adds	r3, #32
 8005892:	7663      	strb	r3, [r4, #25]
 8005894:	3310      	adds	r3, #16
 8005896:	76a3      	strb	r3, [r4, #26]
 8005898:	9507      	str	r5, [sp, #28]
 800589a:	0035      	movs	r5, r6
 800589c:	782b      	ldrb	r3, [r5, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <_svfiprintf_r+0x52>
 80058a2:	2b25      	cmp	r3, #37	; 0x25
 80058a4:	d148      	bne.n	8005938 <_svfiprintf_r+0xe4>
 80058a6:	1bab      	subs	r3, r5, r6
 80058a8:	9305      	str	r3, [sp, #20]
 80058aa:	42b5      	cmp	r5, r6
 80058ac:	d00b      	beq.n	80058c6 <_svfiprintf_r+0x72>
 80058ae:	0032      	movs	r2, r6
 80058b0:	0039      	movs	r1, r7
 80058b2:	9803      	ldr	r0, [sp, #12]
 80058b4:	f7ff ff6c 	bl	8005790 <__ssputs_r>
 80058b8:	3001      	adds	r0, #1
 80058ba:	d100      	bne.n	80058be <_svfiprintf_r+0x6a>
 80058bc:	e0af      	b.n	8005a1e <_svfiprintf_r+0x1ca>
 80058be:	6963      	ldr	r3, [r4, #20]
 80058c0:	9a05      	ldr	r2, [sp, #20]
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	6163      	str	r3, [r4, #20]
 80058c6:	782b      	ldrb	r3, [r5, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d100      	bne.n	80058ce <_svfiprintf_r+0x7a>
 80058cc:	e0a7      	b.n	8005a1e <_svfiprintf_r+0x1ca>
 80058ce:	2201      	movs	r2, #1
 80058d0:	2300      	movs	r3, #0
 80058d2:	4252      	negs	r2, r2
 80058d4:	6062      	str	r2, [r4, #4]
 80058d6:	a904      	add	r1, sp, #16
 80058d8:	3254      	adds	r2, #84	; 0x54
 80058da:	1852      	adds	r2, r2, r1
 80058dc:	1c6e      	adds	r6, r5, #1
 80058de:	6023      	str	r3, [r4, #0]
 80058e0:	60e3      	str	r3, [r4, #12]
 80058e2:	60a3      	str	r3, [r4, #8]
 80058e4:	7013      	strb	r3, [r2, #0]
 80058e6:	65a3      	str	r3, [r4, #88]	; 0x58
 80058e8:	4b55      	ldr	r3, [pc, #340]	; (8005a40 <_svfiprintf_r+0x1ec>)
 80058ea:	2205      	movs	r2, #5
 80058ec:	0018      	movs	r0, r3
 80058ee:	7831      	ldrb	r1, [r6, #0]
 80058f0:	9305      	str	r3, [sp, #20]
 80058f2:	f000 fa55 	bl	8005da0 <memchr>
 80058f6:	1c75      	adds	r5, r6, #1
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d11f      	bne.n	800593c <_svfiprintf_r+0xe8>
 80058fc:	6822      	ldr	r2, [r4, #0]
 80058fe:	06d3      	lsls	r3, r2, #27
 8005900:	d504      	bpl.n	800590c <_svfiprintf_r+0xb8>
 8005902:	2353      	movs	r3, #83	; 0x53
 8005904:	a904      	add	r1, sp, #16
 8005906:	185b      	adds	r3, r3, r1
 8005908:	2120      	movs	r1, #32
 800590a:	7019      	strb	r1, [r3, #0]
 800590c:	0713      	lsls	r3, r2, #28
 800590e:	d504      	bpl.n	800591a <_svfiprintf_r+0xc6>
 8005910:	2353      	movs	r3, #83	; 0x53
 8005912:	a904      	add	r1, sp, #16
 8005914:	185b      	adds	r3, r3, r1
 8005916:	212b      	movs	r1, #43	; 0x2b
 8005918:	7019      	strb	r1, [r3, #0]
 800591a:	7833      	ldrb	r3, [r6, #0]
 800591c:	2b2a      	cmp	r3, #42	; 0x2a
 800591e:	d016      	beq.n	800594e <_svfiprintf_r+0xfa>
 8005920:	0035      	movs	r5, r6
 8005922:	2100      	movs	r1, #0
 8005924:	200a      	movs	r0, #10
 8005926:	68e3      	ldr	r3, [r4, #12]
 8005928:	782a      	ldrb	r2, [r5, #0]
 800592a:	1c6e      	adds	r6, r5, #1
 800592c:	3a30      	subs	r2, #48	; 0x30
 800592e:	2a09      	cmp	r2, #9
 8005930:	d94e      	bls.n	80059d0 <_svfiprintf_r+0x17c>
 8005932:	2900      	cmp	r1, #0
 8005934:	d111      	bne.n	800595a <_svfiprintf_r+0x106>
 8005936:	e017      	b.n	8005968 <_svfiprintf_r+0x114>
 8005938:	3501      	adds	r5, #1
 800593a:	e7af      	b.n	800589c <_svfiprintf_r+0x48>
 800593c:	9b05      	ldr	r3, [sp, #20]
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	1ac0      	subs	r0, r0, r3
 8005942:	2301      	movs	r3, #1
 8005944:	4083      	lsls	r3, r0
 8005946:	4313      	orrs	r3, r2
 8005948:	002e      	movs	r6, r5
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	e7cc      	b.n	80058e8 <_svfiprintf_r+0x94>
 800594e:	9b07      	ldr	r3, [sp, #28]
 8005950:	1d19      	adds	r1, r3, #4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	9107      	str	r1, [sp, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	db01      	blt.n	800595e <_svfiprintf_r+0x10a>
 800595a:	930b      	str	r3, [sp, #44]	; 0x2c
 800595c:	e004      	b.n	8005968 <_svfiprintf_r+0x114>
 800595e:	425b      	negs	r3, r3
 8005960:	60e3      	str	r3, [r4, #12]
 8005962:	2302      	movs	r3, #2
 8005964:	4313      	orrs	r3, r2
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	782b      	ldrb	r3, [r5, #0]
 800596a:	2b2e      	cmp	r3, #46	; 0x2e
 800596c:	d10a      	bne.n	8005984 <_svfiprintf_r+0x130>
 800596e:	786b      	ldrb	r3, [r5, #1]
 8005970:	2b2a      	cmp	r3, #42	; 0x2a
 8005972:	d135      	bne.n	80059e0 <_svfiprintf_r+0x18c>
 8005974:	9b07      	ldr	r3, [sp, #28]
 8005976:	3502      	adds	r5, #2
 8005978:	1d1a      	adds	r2, r3, #4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	9207      	str	r2, [sp, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	db2b      	blt.n	80059da <_svfiprintf_r+0x186>
 8005982:	9309      	str	r3, [sp, #36]	; 0x24
 8005984:	4e2f      	ldr	r6, [pc, #188]	; (8005a44 <_svfiprintf_r+0x1f0>)
 8005986:	2203      	movs	r2, #3
 8005988:	0030      	movs	r0, r6
 800598a:	7829      	ldrb	r1, [r5, #0]
 800598c:	f000 fa08 	bl	8005da0 <memchr>
 8005990:	2800      	cmp	r0, #0
 8005992:	d006      	beq.n	80059a2 <_svfiprintf_r+0x14e>
 8005994:	2340      	movs	r3, #64	; 0x40
 8005996:	1b80      	subs	r0, r0, r6
 8005998:	4083      	lsls	r3, r0
 800599a:	6822      	ldr	r2, [r4, #0]
 800599c:	3501      	adds	r5, #1
 800599e:	4313      	orrs	r3, r2
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	7829      	ldrb	r1, [r5, #0]
 80059a4:	2206      	movs	r2, #6
 80059a6:	4828      	ldr	r0, [pc, #160]	; (8005a48 <_svfiprintf_r+0x1f4>)
 80059a8:	1c6e      	adds	r6, r5, #1
 80059aa:	7621      	strb	r1, [r4, #24]
 80059ac:	f000 f9f8 	bl	8005da0 <memchr>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d03c      	beq.n	8005a2e <_svfiprintf_r+0x1da>
 80059b4:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <_svfiprintf_r+0x1f8>)
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d125      	bne.n	8005a06 <_svfiprintf_r+0x1b2>
 80059ba:	2207      	movs	r2, #7
 80059bc:	9b07      	ldr	r3, [sp, #28]
 80059be:	3307      	adds	r3, #7
 80059c0:	4393      	bics	r3, r2
 80059c2:	3308      	adds	r3, #8
 80059c4:	9307      	str	r3, [sp, #28]
 80059c6:	6963      	ldr	r3, [r4, #20]
 80059c8:	9a04      	ldr	r2, [sp, #16]
 80059ca:	189b      	adds	r3, r3, r2
 80059cc:	6163      	str	r3, [r4, #20]
 80059ce:	e764      	b.n	800589a <_svfiprintf_r+0x46>
 80059d0:	4343      	muls	r3, r0
 80059d2:	0035      	movs	r5, r6
 80059d4:	2101      	movs	r1, #1
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	e7a6      	b.n	8005928 <_svfiprintf_r+0xd4>
 80059da:	2301      	movs	r3, #1
 80059dc:	425b      	negs	r3, r3
 80059de:	e7d0      	b.n	8005982 <_svfiprintf_r+0x12e>
 80059e0:	2300      	movs	r3, #0
 80059e2:	200a      	movs	r0, #10
 80059e4:	001a      	movs	r2, r3
 80059e6:	3501      	adds	r5, #1
 80059e8:	6063      	str	r3, [r4, #4]
 80059ea:	7829      	ldrb	r1, [r5, #0]
 80059ec:	1c6e      	adds	r6, r5, #1
 80059ee:	3930      	subs	r1, #48	; 0x30
 80059f0:	2909      	cmp	r1, #9
 80059f2:	d903      	bls.n	80059fc <_svfiprintf_r+0x1a8>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0c5      	beq.n	8005984 <_svfiprintf_r+0x130>
 80059f8:	9209      	str	r2, [sp, #36]	; 0x24
 80059fa:	e7c3      	b.n	8005984 <_svfiprintf_r+0x130>
 80059fc:	4342      	muls	r2, r0
 80059fe:	0035      	movs	r5, r6
 8005a00:	2301      	movs	r3, #1
 8005a02:	1852      	adds	r2, r2, r1
 8005a04:	e7f1      	b.n	80059ea <_svfiprintf_r+0x196>
 8005a06:	aa07      	add	r2, sp, #28
 8005a08:	9200      	str	r2, [sp, #0]
 8005a0a:	0021      	movs	r1, r4
 8005a0c:	003a      	movs	r2, r7
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <_svfiprintf_r+0x1fc>)
 8005a10:	9803      	ldr	r0, [sp, #12]
 8005a12:	e000      	b.n	8005a16 <_svfiprintf_r+0x1c2>
 8005a14:	bf00      	nop
 8005a16:	9004      	str	r0, [sp, #16]
 8005a18:	9b04      	ldr	r3, [sp, #16]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	d1d3      	bne.n	80059c6 <_svfiprintf_r+0x172>
 8005a1e:	89bb      	ldrh	r3, [r7, #12]
 8005a20:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a22:	065b      	lsls	r3, r3, #25
 8005a24:	d400      	bmi.n	8005a28 <_svfiprintf_r+0x1d4>
 8005a26:	e72c      	b.n	8005882 <_svfiprintf_r+0x2e>
 8005a28:	2001      	movs	r0, #1
 8005a2a:	4240      	negs	r0, r0
 8005a2c:	e729      	b.n	8005882 <_svfiprintf_r+0x2e>
 8005a2e:	aa07      	add	r2, sp, #28
 8005a30:	9200      	str	r2, [sp, #0]
 8005a32:	0021      	movs	r1, r4
 8005a34:	003a      	movs	r2, r7
 8005a36:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <_svfiprintf_r+0x1fc>)
 8005a38:	9803      	ldr	r0, [sp, #12]
 8005a3a:	f000 f87b 	bl	8005b34 <_printf_i>
 8005a3e:	e7ea      	b.n	8005a16 <_svfiprintf_r+0x1c2>
 8005a40:	08005f7c 	.word	0x08005f7c
 8005a44:	08005f82 	.word	0x08005f82
 8005a48:	08005f86 	.word	0x08005f86
 8005a4c:	00000000 	.word	0x00000000
 8005a50:	08005791 	.word	0x08005791

08005a54 <_printf_common>:
 8005a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a56:	0016      	movs	r6, r2
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	688a      	ldr	r2, [r1, #8]
 8005a5c:	690b      	ldr	r3, [r1, #16]
 8005a5e:	000c      	movs	r4, r1
 8005a60:	9000      	str	r0, [sp, #0]
 8005a62:	4293      	cmp	r3, r2
 8005a64:	da00      	bge.n	8005a68 <_printf_common+0x14>
 8005a66:	0013      	movs	r3, r2
 8005a68:	0022      	movs	r2, r4
 8005a6a:	6033      	str	r3, [r6, #0]
 8005a6c:	3243      	adds	r2, #67	; 0x43
 8005a6e:	7812      	ldrb	r2, [r2, #0]
 8005a70:	2a00      	cmp	r2, #0
 8005a72:	d001      	beq.n	8005a78 <_printf_common+0x24>
 8005a74:	3301      	adds	r3, #1
 8005a76:	6033      	str	r3, [r6, #0]
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	069b      	lsls	r3, r3, #26
 8005a7c:	d502      	bpl.n	8005a84 <_printf_common+0x30>
 8005a7e:	6833      	ldr	r3, [r6, #0]
 8005a80:	3302      	adds	r3, #2
 8005a82:	6033      	str	r3, [r6, #0]
 8005a84:	6822      	ldr	r2, [r4, #0]
 8005a86:	2306      	movs	r3, #6
 8005a88:	0015      	movs	r5, r2
 8005a8a:	401d      	ands	r5, r3
 8005a8c:	421a      	tst	r2, r3
 8005a8e:	d027      	beq.n	8005ae0 <_printf_common+0x8c>
 8005a90:	0023      	movs	r3, r4
 8005a92:	3343      	adds	r3, #67	; 0x43
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	1e5a      	subs	r2, r3, #1
 8005a98:	4193      	sbcs	r3, r2
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	0692      	lsls	r2, r2, #26
 8005a9e:	d430      	bmi.n	8005b02 <_printf_common+0xae>
 8005aa0:	0022      	movs	r2, r4
 8005aa2:	9901      	ldr	r1, [sp, #4]
 8005aa4:	9800      	ldr	r0, [sp, #0]
 8005aa6:	9d08      	ldr	r5, [sp, #32]
 8005aa8:	3243      	adds	r2, #67	; 0x43
 8005aaa:	47a8      	blx	r5
 8005aac:	3001      	adds	r0, #1
 8005aae:	d025      	beq.n	8005afc <_printf_common+0xa8>
 8005ab0:	2206      	movs	r2, #6
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	2500      	movs	r5, #0
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d105      	bne.n	8005ac8 <_printf_common+0x74>
 8005abc:	6833      	ldr	r3, [r6, #0]
 8005abe:	68e5      	ldr	r5, [r4, #12]
 8005ac0:	1aed      	subs	r5, r5, r3
 8005ac2:	43eb      	mvns	r3, r5
 8005ac4:	17db      	asrs	r3, r3, #31
 8005ac6:	401d      	ands	r5, r3
 8005ac8:	68a3      	ldr	r3, [r4, #8]
 8005aca:	6922      	ldr	r2, [r4, #16]
 8005acc:	4293      	cmp	r3, r2
 8005ace:	dd01      	ble.n	8005ad4 <_printf_common+0x80>
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	18ed      	adds	r5, r5, r3
 8005ad4:	2600      	movs	r6, #0
 8005ad6:	42b5      	cmp	r5, r6
 8005ad8:	d120      	bne.n	8005b1c <_printf_common+0xc8>
 8005ada:	2000      	movs	r0, #0
 8005adc:	e010      	b.n	8005b00 <_printf_common+0xac>
 8005ade:	3501      	adds	r5, #1
 8005ae0:	68e3      	ldr	r3, [r4, #12]
 8005ae2:	6832      	ldr	r2, [r6, #0]
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	42ab      	cmp	r3, r5
 8005ae8:	ddd2      	ble.n	8005a90 <_printf_common+0x3c>
 8005aea:	0022      	movs	r2, r4
 8005aec:	2301      	movs	r3, #1
 8005aee:	9901      	ldr	r1, [sp, #4]
 8005af0:	9800      	ldr	r0, [sp, #0]
 8005af2:	9f08      	ldr	r7, [sp, #32]
 8005af4:	3219      	adds	r2, #25
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	d1f0      	bne.n	8005ade <_printf_common+0x8a>
 8005afc:	2001      	movs	r0, #1
 8005afe:	4240      	negs	r0, r0
 8005b00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b02:	2030      	movs	r0, #48	; 0x30
 8005b04:	18e1      	adds	r1, r4, r3
 8005b06:	3143      	adds	r1, #67	; 0x43
 8005b08:	7008      	strb	r0, [r1, #0]
 8005b0a:	0021      	movs	r1, r4
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	3145      	adds	r1, #69	; 0x45
 8005b10:	7809      	ldrb	r1, [r1, #0]
 8005b12:	18a2      	adds	r2, r4, r2
 8005b14:	3243      	adds	r2, #67	; 0x43
 8005b16:	3302      	adds	r3, #2
 8005b18:	7011      	strb	r1, [r2, #0]
 8005b1a:	e7c1      	b.n	8005aa0 <_printf_common+0x4c>
 8005b1c:	0022      	movs	r2, r4
 8005b1e:	2301      	movs	r3, #1
 8005b20:	9901      	ldr	r1, [sp, #4]
 8005b22:	9800      	ldr	r0, [sp, #0]
 8005b24:	9f08      	ldr	r7, [sp, #32]
 8005b26:	321a      	adds	r2, #26
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d0e6      	beq.n	8005afc <_printf_common+0xa8>
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7d1      	b.n	8005ad6 <_printf_common+0x82>
	...

08005b34 <_printf_i>:
 8005b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b36:	b08b      	sub	sp, #44	; 0x2c
 8005b38:	9206      	str	r2, [sp, #24]
 8005b3a:	000a      	movs	r2, r1
 8005b3c:	3243      	adds	r2, #67	; 0x43
 8005b3e:	9307      	str	r3, [sp, #28]
 8005b40:	9005      	str	r0, [sp, #20]
 8005b42:	9204      	str	r2, [sp, #16]
 8005b44:	7e0a      	ldrb	r2, [r1, #24]
 8005b46:	000c      	movs	r4, r1
 8005b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b4a:	2a78      	cmp	r2, #120	; 0x78
 8005b4c:	d809      	bhi.n	8005b62 <_printf_i+0x2e>
 8005b4e:	2a62      	cmp	r2, #98	; 0x62
 8005b50:	d80b      	bhi.n	8005b6a <_printf_i+0x36>
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	d100      	bne.n	8005b58 <_printf_i+0x24>
 8005b56:	e0be      	b.n	8005cd6 <_printf_i+0x1a2>
 8005b58:	497c      	ldr	r1, [pc, #496]	; (8005d4c <_printf_i+0x218>)
 8005b5a:	9103      	str	r1, [sp, #12]
 8005b5c:	2a58      	cmp	r2, #88	; 0x58
 8005b5e:	d100      	bne.n	8005b62 <_printf_i+0x2e>
 8005b60:	e093      	b.n	8005c8a <_printf_i+0x156>
 8005b62:	0026      	movs	r6, r4
 8005b64:	3642      	adds	r6, #66	; 0x42
 8005b66:	7032      	strb	r2, [r6, #0]
 8005b68:	e022      	b.n	8005bb0 <_printf_i+0x7c>
 8005b6a:	0010      	movs	r0, r2
 8005b6c:	3863      	subs	r0, #99	; 0x63
 8005b6e:	2815      	cmp	r0, #21
 8005b70:	d8f7      	bhi.n	8005b62 <_printf_i+0x2e>
 8005b72:	f7fa facf 	bl	8000114 <__gnu_thumb1_case_shi>
 8005b76:	0016      	.short	0x0016
 8005b78:	fff6001f 	.word	0xfff6001f
 8005b7c:	fff6fff6 	.word	0xfff6fff6
 8005b80:	001ffff6 	.word	0x001ffff6
 8005b84:	fff6fff6 	.word	0xfff6fff6
 8005b88:	fff6fff6 	.word	0xfff6fff6
 8005b8c:	003600a3 	.word	0x003600a3
 8005b90:	fff60083 	.word	0xfff60083
 8005b94:	00b4fff6 	.word	0x00b4fff6
 8005b98:	0036fff6 	.word	0x0036fff6
 8005b9c:	fff6fff6 	.word	0xfff6fff6
 8005ba0:	0087      	.short	0x0087
 8005ba2:	0026      	movs	r6, r4
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	3642      	adds	r6, #66	; 0x42
 8005ba8:	1d11      	adds	r1, r2, #4
 8005baa:	6019      	str	r1, [r3, #0]
 8005bac:	6813      	ldr	r3, [r2, #0]
 8005bae:	7033      	strb	r3, [r6, #0]
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0a2      	b.n	8005cfa <_printf_i+0x1c6>
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	6809      	ldr	r1, [r1, #0]
 8005bb8:	1d02      	adds	r2, r0, #4
 8005bba:	060d      	lsls	r5, r1, #24
 8005bbc:	d50b      	bpl.n	8005bd6 <_printf_i+0xa2>
 8005bbe:	6805      	ldr	r5, [r0, #0]
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	2d00      	cmp	r5, #0
 8005bc4:	da03      	bge.n	8005bce <_printf_i+0x9a>
 8005bc6:	232d      	movs	r3, #45	; 0x2d
 8005bc8:	9a04      	ldr	r2, [sp, #16]
 8005bca:	426d      	negs	r5, r5
 8005bcc:	7013      	strb	r3, [r2, #0]
 8005bce:	4b5f      	ldr	r3, [pc, #380]	; (8005d4c <_printf_i+0x218>)
 8005bd0:	270a      	movs	r7, #10
 8005bd2:	9303      	str	r3, [sp, #12]
 8005bd4:	e01b      	b.n	8005c0e <_printf_i+0xda>
 8005bd6:	6805      	ldr	r5, [r0, #0]
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	0649      	lsls	r1, r1, #25
 8005bdc:	d5f1      	bpl.n	8005bc2 <_printf_i+0x8e>
 8005bde:	b22d      	sxth	r5, r5
 8005be0:	e7ef      	b.n	8005bc2 <_printf_i+0x8e>
 8005be2:	680d      	ldr	r5, [r1, #0]
 8005be4:	6819      	ldr	r1, [r3, #0]
 8005be6:	1d08      	adds	r0, r1, #4
 8005be8:	6018      	str	r0, [r3, #0]
 8005bea:	062e      	lsls	r6, r5, #24
 8005bec:	d501      	bpl.n	8005bf2 <_printf_i+0xbe>
 8005bee:	680d      	ldr	r5, [r1, #0]
 8005bf0:	e003      	b.n	8005bfa <_printf_i+0xc6>
 8005bf2:	066d      	lsls	r5, r5, #25
 8005bf4:	d5fb      	bpl.n	8005bee <_printf_i+0xba>
 8005bf6:	680d      	ldr	r5, [r1, #0]
 8005bf8:	b2ad      	uxth	r5, r5
 8005bfa:	4b54      	ldr	r3, [pc, #336]	; (8005d4c <_printf_i+0x218>)
 8005bfc:	2708      	movs	r7, #8
 8005bfe:	9303      	str	r3, [sp, #12]
 8005c00:	2a6f      	cmp	r2, #111	; 0x6f
 8005c02:	d000      	beq.n	8005c06 <_printf_i+0xd2>
 8005c04:	3702      	adds	r7, #2
 8005c06:	0023      	movs	r3, r4
 8005c08:	2200      	movs	r2, #0
 8005c0a:	3343      	adds	r3, #67	; 0x43
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	6863      	ldr	r3, [r4, #4]
 8005c10:	60a3      	str	r3, [r4, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	db03      	blt.n	8005c1e <_printf_i+0xea>
 8005c16:	2104      	movs	r1, #4
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	438a      	bics	r2, r1
 8005c1c:	6022      	str	r2, [r4, #0]
 8005c1e:	2d00      	cmp	r5, #0
 8005c20:	d102      	bne.n	8005c28 <_printf_i+0xf4>
 8005c22:	9e04      	ldr	r6, [sp, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00c      	beq.n	8005c42 <_printf_i+0x10e>
 8005c28:	9e04      	ldr	r6, [sp, #16]
 8005c2a:	0028      	movs	r0, r5
 8005c2c:	0039      	movs	r1, r7
 8005c2e:	f7fa fb01 	bl	8000234 <__aeabi_uidivmod>
 8005c32:	9b03      	ldr	r3, [sp, #12]
 8005c34:	3e01      	subs	r6, #1
 8005c36:	5c5b      	ldrb	r3, [r3, r1]
 8005c38:	7033      	strb	r3, [r6, #0]
 8005c3a:	002b      	movs	r3, r5
 8005c3c:	0005      	movs	r5, r0
 8005c3e:	429f      	cmp	r7, r3
 8005c40:	d9f3      	bls.n	8005c2a <_printf_i+0xf6>
 8005c42:	2f08      	cmp	r7, #8
 8005c44:	d109      	bne.n	8005c5a <_printf_i+0x126>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	07db      	lsls	r3, r3, #31
 8005c4a:	d506      	bpl.n	8005c5a <_printf_i+0x126>
 8005c4c:	6862      	ldr	r2, [r4, #4]
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	dc02      	bgt.n	8005c5a <_printf_i+0x126>
 8005c54:	2330      	movs	r3, #48	; 0x30
 8005c56:	3e01      	subs	r6, #1
 8005c58:	7033      	strb	r3, [r6, #0]
 8005c5a:	9b04      	ldr	r3, [sp, #16]
 8005c5c:	1b9b      	subs	r3, r3, r6
 8005c5e:	6123      	str	r3, [r4, #16]
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	0021      	movs	r1, r4
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	9805      	ldr	r0, [sp, #20]
 8005c68:	9b06      	ldr	r3, [sp, #24]
 8005c6a:	aa09      	add	r2, sp, #36	; 0x24
 8005c6c:	f7ff fef2 	bl	8005a54 <_printf_common>
 8005c70:	3001      	adds	r0, #1
 8005c72:	d147      	bne.n	8005d04 <_printf_i+0x1d0>
 8005c74:	2001      	movs	r0, #1
 8005c76:	4240      	negs	r0, r0
 8005c78:	b00b      	add	sp, #44	; 0x2c
 8005c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	6809      	ldr	r1, [r1, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	6022      	str	r2, [r4, #0]
 8005c84:	2278      	movs	r2, #120	; 0x78
 8005c86:	4932      	ldr	r1, [pc, #200]	; (8005d50 <_printf_i+0x21c>)
 8005c88:	9103      	str	r1, [sp, #12]
 8005c8a:	0021      	movs	r1, r4
 8005c8c:	3145      	adds	r1, #69	; 0x45
 8005c8e:	700a      	strb	r2, [r1, #0]
 8005c90:	6819      	ldr	r1, [r3, #0]
 8005c92:	6822      	ldr	r2, [r4, #0]
 8005c94:	c920      	ldmia	r1!, {r5}
 8005c96:	0610      	lsls	r0, r2, #24
 8005c98:	d402      	bmi.n	8005ca0 <_printf_i+0x16c>
 8005c9a:	0650      	lsls	r0, r2, #25
 8005c9c:	d500      	bpl.n	8005ca0 <_printf_i+0x16c>
 8005c9e:	b2ad      	uxth	r5, r5
 8005ca0:	6019      	str	r1, [r3, #0]
 8005ca2:	07d3      	lsls	r3, r2, #31
 8005ca4:	d502      	bpl.n	8005cac <_printf_i+0x178>
 8005ca6:	2320      	movs	r3, #32
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	2710      	movs	r7, #16
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	d1a9      	bne.n	8005c06 <_printf_i+0xd2>
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	4393      	bics	r3, r2
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	e7a4      	b.n	8005c06 <_printf_i+0xd2>
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	680d      	ldr	r5, [r1, #0]
 8005cc0:	1d10      	adds	r0, r2, #4
 8005cc2:	6949      	ldr	r1, [r1, #20]
 8005cc4:	6018      	str	r0, [r3, #0]
 8005cc6:	6813      	ldr	r3, [r2, #0]
 8005cc8:	062e      	lsls	r6, r5, #24
 8005cca:	d501      	bpl.n	8005cd0 <_printf_i+0x19c>
 8005ccc:	6019      	str	r1, [r3, #0]
 8005cce:	e002      	b.n	8005cd6 <_printf_i+0x1a2>
 8005cd0:	066d      	lsls	r5, r5, #25
 8005cd2:	d5fb      	bpl.n	8005ccc <_printf_i+0x198>
 8005cd4:	8019      	strh	r1, [r3, #0]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9e04      	ldr	r6, [sp, #16]
 8005cda:	6123      	str	r3, [r4, #16]
 8005cdc:	e7c0      	b.n	8005c60 <_printf_i+0x12c>
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	1d11      	adds	r1, r2, #4
 8005ce2:	6019      	str	r1, [r3, #0]
 8005ce4:	6816      	ldr	r6, [r2, #0]
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	0030      	movs	r0, r6
 8005cea:	6862      	ldr	r2, [r4, #4]
 8005cec:	f000 f858 	bl	8005da0 <memchr>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d001      	beq.n	8005cf8 <_printf_i+0x1c4>
 8005cf4:	1b80      	subs	r0, r0, r6
 8005cf6:	6060      	str	r0, [r4, #4]
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	6123      	str	r3, [r4, #16]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9a04      	ldr	r2, [sp, #16]
 8005d00:	7013      	strb	r3, [r2, #0]
 8005d02:	e7ad      	b.n	8005c60 <_printf_i+0x12c>
 8005d04:	0032      	movs	r2, r6
 8005d06:	6923      	ldr	r3, [r4, #16]
 8005d08:	9906      	ldr	r1, [sp, #24]
 8005d0a:	9805      	ldr	r0, [sp, #20]
 8005d0c:	9d07      	ldr	r5, [sp, #28]
 8005d0e:	47a8      	blx	r5
 8005d10:	3001      	adds	r0, #1
 8005d12:	d0af      	beq.n	8005c74 <_printf_i+0x140>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	079b      	lsls	r3, r3, #30
 8005d18:	d415      	bmi.n	8005d46 <_printf_i+0x212>
 8005d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1c:	68e0      	ldr	r0, [r4, #12]
 8005d1e:	4298      	cmp	r0, r3
 8005d20:	daaa      	bge.n	8005c78 <_printf_i+0x144>
 8005d22:	0018      	movs	r0, r3
 8005d24:	e7a8      	b.n	8005c78 <_printf_i+0x144>
 8005d26:	0022      	movs	r2, r4
 8005d28:	2301      	movs	r3, #1
 8005d2a:	9906      	ldr	r1, [sp, #24]
 8005d2c:	9805      	ldr	r0, [sp, #20]
 8005d2e:	9e07      	ldr	r6, [sp, #28]
 8005d30:	3219      	adds	r2, #25
 8005d32:	47b0      	blx	r6
 8005d34:	3001      	adds	r0, #1
 8005d36:	d09d      	beq.n	8005c74 <_printf_i+0x140>
 8005d38:	3501      	adds	r5, #1
 8005d3a:	68e3      	ldr	r3, [r4, #12]
 8005d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	42ab      	cmp	r3, r5
 8005d42:	dcf0      	bgt.n	8005d26 <_printf_i+0x1f2>
 8005d44:	e7e9      	b.n	8005d1a <_printf_i+0x1e6>
 8005d46:	2500      	movs	r5, #0
 8005d48:	e7f7      	b.n	8005d3a <_printf_i+0x206>
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	08005f8d 	.word	0x08005f8d
 8005d50:	08005f9e 	.word	0x08005f9e

08005d54 <memmove>:
 8005d54:	b510      	push	{r4, lr}
 8005d56:	4288      	cmp	r0, r1
 8005d58:	d902      	bls.n	8005d60 <memmove+0xc>
 8005d5a:	188b      	adds	r3, r1, r2
 8005d5c:	4298      	cmp	r0, r3
 8005d5e:	d303      	bcc.n	8005d68 <memmove+0x14>
 8005d60:	2300      	movs	r3, #0
 8005d62:	e007      	b.n	8005d74 <memmove+0x20>
 8005d64:	5c8b      	ldrb	r3, [r1, r2]
 8005d66:	5483      	strb	r3, [r0, r2]
 8005d68:	3a01      	subs	r2, #1
 8005d6a:	d2fb      	bcs.n	8005d64 <memmove+0x10>
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	5ccc      	ldrb	r4, [r1, r3]
 8005d70:	54c4      	strb	r4, [r0, r3]
 8005d72:	3301      	adds	r3, #1
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d1fa      	bne.n	8005d6e <memmove+0x1a>
 8005d78:	e7f8      	b.n	8005d6c <memmove+0x18>
	...

08005d7c <_sbrk_r>:
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	b570      	push	{r4, r5, r6, lr}
 8005d80:	4d06      	ldr	r5, [pc, #24]	; (8005d9c <_sbrk_r+0x20>)
 8005d82:	0004      	movs	r4, r0
 8005d84:	0008      	movs	r0, r1
 8005d86:	602b      	str	r3, [r5, #0]
 8005d88:	f7fb f92c 	bl	8000fe4 <_sbrk>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d103      	bne.n	8005d98 <_sbrk_r+0x1c>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d000      	beq.n	8005d98 <_sbrk_r+0x1c>
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	20000354 	.word	0x20000354

08005da0 <memchr>:
 8005da0:	b2c9      	uxtb	r1, r1
 8005da2:	1882      	adds	r2, r0, r2
 8005da4:	4290      	cmp	r0, r2
 8005da6:	d101      	bne.n	8005dac <memchr+0xc>
 8005da8:	2000      	movs	r0, #0
 8005daa:	4770      	bx	lr
 8005dac:	7803      	ldrb	r3, [r0, #0]
 8005dae:	428b      	cmp	r3, r1
 8005db0:	d0fb      	beq.n	8005daa <memchr+0xa>
 8005db2:	3001      	adds	r0, #1
 8005db4:	e7f6      	b.n	8005da4 <memchr+0x4>

08005db6 <memcpy>:
 8005db6:	2300      	movs	r3, #0
 8005db8:	b510      	push	{r4, lr}
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d100      	bne.n	8005dc0 <memcpy+0xa>
 8005dbe:	bd10      	pop	{r4, pc}
 8005dc0:	5ccc      	ldrb	r4, [r1, r3]
 8005dc2:	54c4      	strb	r4, [r0, r3]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	e7f8      	b.n	8005dba <memcpy+0x4>

08005dc8 <_realloc_r>:
 8005dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dca:	0007      	movs	r7, r0
 8005dcc:	000e      	movs	r6, r1
 8005dce:	0014      	movs	r4, r2
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	d105      	bne.n	8005de0 <_realloc_r+0x18>
 8005dd4:	0011      	movs	r1, r2
 8005dd6:	f7ff fc49 	bl	800566c <_malloc_r>
 8005dda:	0005      	movs	r5, r0
 8005ddc:	0028      	movs	r0, r5
 8005dde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	d103      	bne.n	8005dec <_realloc_r+0x24>
 8005de4:	f7ff fbd6 	bl	8005594 <_free_r>
 8005de8:	0025      	movs	r5, r4
 8005dea:	e7f7      	b.n	8005ddc <_realloc_r+0x14>
 8005dec:	f000 f81b 	bl	8005e26 <_malloc_usable_size_r>
 8005df0:	9001      	str	r0, [sp, #4]
 8005df2:	4284      	cmp	r4, r0
 8005df4:	d803      	bhi.n	8005dfe <_realloc_r+0x36>
 8005df6:	0035      	movs	r5, r6
 8005df8:	0843      	lsrs	r3, r0, #1
 8005dfa:	42a3      	cmp	r3, r4
 8005dfc:	d3ee      	bcc.n	8005ddc <_realloc_r+0x14>
 8005dfe:	0021      	movs	r1, r4
 8005e00:	0038      	movs	r0, r7
 8005e02:	f7ff fc33 	bl	800566c <_malloc_r>
 8005e06:	1e05      	subs	r5, r0, #0
 8005e08:	d0e8      	beq.n	8005ddc <_realloc_r+0x14>
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	0022      	movs	r2, r4
 8005e0e:	429c      	cmp	r4, r3
 8005e10:	d900      	bls.n	8005e14 <_realloc_r+0x4c>
 8005e12:	001a      	movs	r2, r3
 8005e14:	0031      	movs	r1, r6
 8005e16:	0028      	movs	r0, r5
 8005e18:	f7ff ffcd 	bl	8005db6 <memcpy>
 8005e1c:	0031      	movs	r1, r6
 8005e1e:	0038      	movs	r0, r7
 8005e20:	f7ff fbb8 	bl	8005594 <_free_r>
 8005e24:	e7da      	b.n	8005ddc <_realloc_r+0x14>

08005e26 <_malloc_usable_size_r>:
 8005e26:	1f0b      	subs	r3, r1, #4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	1f18      	subs	r0, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	da01      	bge.n	8005e34 <_malloc_usable_size_r+0xe>
 8005e30:	580b      	ldr	r3, [r1, r0]
 8005e32:	18c0      	adds	r0, r0, r3
 8005e34:	4770      	bx	lr
	...

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
