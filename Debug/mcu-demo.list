
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006990  08006990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae4  08006ae4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aec  08006aec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aec  08006aec  00016aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000068  08006b5c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006b5c  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001674a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d8a  00000000  00000000  0003681d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  000395a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001021  00000000  00000000  0003aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bbe7  00000000  00000000  0003ba61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001957b  00000000  00000000  00057648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b06f1  00000000  00000000  00070bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005444  00000000  00000000  001212b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001266f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006978 	.word	0x08006978

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08006978 	.word	0x08006978

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fdfe 	bl	8001244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f864 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f9f2 	bl	8000a34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f9a2 	bl	8000998 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000654:	f000 f8a6 	bl	80007a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000658:	f000 f90a 	bl	8000870 <MX_I2C1_Init>
  MX_TIM2_Init();
 800065c:	f000 f948 	bl	80008f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000660:	4b29      	ldr	r3, [pc, #164]	; (8000708 <main+0xc8>)
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fa20 	bl	8001aa8 <HAL_ADC_Start_IT>

  i2cScanner();
 8000668:	f000 fb32 	bl	8000cd0 <i2cScanner>

  I2C_LCD_Init(MyI2C_LCD);
 800066c:	2000      	movs	r0, #0
 800066e:	f004 fea7 	bl	80053c0 <I2C_LCD_Init>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2000      	movs	r0, #0
 8000678:	f004 ffb2 	bl	80055e0 <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(MyI2C_LCD, "Meow");
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <main+0xcc>)
 800067e:	0019      	movs	r1, r3
 8000680:	2000      	movs	r0, #0
 8000682:	f004 fffd 	bl	8005680 <I2C_LCD_WriteString>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000686:	2201      	movs	r2, #1
 8000688:	2100      	movs	r1, #0
 800068a:	2000      	movs	r0, #0
 800068c:	f004 ffa8 	bl	80055e0 <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(MyI2C_LCD, "<3 Julian ");
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <main+0xd0>)
 8000692:	0019      	movs	r1, r3
 8000694:	2000      	movs	r0, #0
 8000696:	f004 fff3 	bl	8005680 <I2C_LCD_WriteString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  I2C_LCD_ShiftRight(MyI2C_LCD);    HAL_Delay(500);
 800069a:	2000      	movs	r0, #0
 800069c:	f005 f81b 	bl	80056d6 <I2C_LCD_ShiftRight>
 80006a0:	23fa      	movs	r3, #250	; 0xfa
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fe53 	bl	8001350 <HAL_Delay>
	  I2C_LCD_ShiftRight(MyI2C_LCD);    HAL_Delay(500);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f005 f813 	bl	80056d6 <I2C_LCD_ShiftRight>
 80006b0:	23fa      	movs	r3, #250	; 0xfa
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fe4b 	bl	8001350 <HAL_Delay>
	  I2C_LCD_ShiftRight(MyI2C_LCD);    HAL_Delay(500);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f005 f80b 	bl	80056d6 <I2C_LCD_ShiftRight>
 80006c0:	23fa      	movs	r3, #250	; 0xfa
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fe43 	bl	8001350 <HAL_Delay>
	  I2C_LCD_ShiftLeft(MyI2C_LCD);    HAL_Delay(500);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f004 fff3 	bl	80056b6 <I2C_LCD_ShiftLeft>
 80006d0:	23fa      	movs	r3, #250	; 0xfa
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fe3b 	bl	8001350 <HAL_Delay>
	  I2C_LCD_ShiftLeft(MyI2C_LCD);    HAL_Delay(500);
 80006da:	2000      	movs	r0, #0
 80006dc:	f004 ffeb 	bl	80056b6 <I2C_LCD_ShiftLeft>
 80006e0:	23fa      	movs	r3, #250	; 0xfa
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fe33 	bl	8001350 <HAL_Delay>
	  I2C_LCD_ShiftLeft(MyI2C_LCD);    HAL_Delay(500);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f004 ffe3 	bl	80056b6 <I2C_LCD_ShiftLeft>
 80006f0:	23fa      	movs	r3, #250	; 0xfa
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fe2b 	bl	8001350 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hardwareTestLED();
 80006fa:	f000 fa3d 	bl	8000b78 <hardwareTestLED>
	  hardwareTestPot();
 80006fe:	f000 fa7d 	bl	8000bfc <hardwareTestPot>
	  hardwareTestButton();
 8000702:	f000 faa9 	bl	8000c58 <hardwareTestButton>
	  I2C_LCD_ShiftRight(MyI2C_LCD);    HAL_Delay(500);
 8000706:	e7c8      	b.n	800069a <main+0x5a>
 8000708:	20000084 	.word	0x20000084
 800070c:	08006990 	.word	0x08006990
 8000710:	08006998 	.word	0x08006998

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b093      	sub	sp, #76	; 0x4c
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	2410      	movs	r4, #16
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2338      	movs	r3, #56	; 0x38
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f005 f927 	bl	8005978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072a:	003b      	movs	r3, r7
 800072c:	0018      	movs	r0, r3
 800072e:	2310      	movs	r3, #16
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f005 f920 	bl	8005978 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	0018      	movs	r0, r3
 800073e:	f002 fc89 	bl	8003054 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2202      	movs	r2, #2
 8000746:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2240      	movs	r2, #64	; 0x40
 800075a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	f002 fcc1 	bl	80030ec <HAL_RCC_OscConfig>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800076e:	f000 fb37 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	003b      	movs	r3, r7
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000778:	003b      	movs	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078a:	003b      	movs	r3, r7
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f002 ffc6 	bl	8003720 <HAL_RCC_ClockConfig>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000798:	f000 fb22 	bl	8000de0 <Error_Handler>
  }
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b013      	add	sp, #76	; 0x4c
 80007a2:	bd90      	pop	{r4, r7, pc}

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0018      	movs	r0, r3
 80007ae:	230c      	movs	r3, #12
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f005 f8e0 	bl	8005978 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007b8:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007ba:	4a2c      	ldr	r2, [pc, #176]	; (800086c <MX_ADC1_Init+0xc8>)
 80007bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	05d2      	lsls	r2, r2, #23
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007da:	2204      	movs	r2, #4
 80007dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC1_Init+0xc4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC1_Init+0xc4>)
 8000804:	222c      	movs	r2, #44	; 0x2c
 8000806:	2100      	movs	r1, #0
 8000808:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_ADC1_Init+0xc4>)
 800080c:	2200      	movs	r2, #0
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_ADC1_Init+0xc4>)
 8000812:	2200      	movs	r2, #0
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_ADC1_Init+0xc4>)
 8000818:	2200      	movs	r2, #0
 800081a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_ADC1_Init+0xc4>)
 800081e:	223c      	movs	r2, #60	; 0x3c
 8000820:	2100      	movs	r1, #0
 8000822:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_ADC1_Init+0xc4>)
 8000826:	2200      	movs	r2, #0
 8000828:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_ADC1_Init+0xc4>)
 800082c:	0018      	movs	r0, r3
 800082e:	f000 feff 	bl	8001630 <HAL_ADC_Init>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000836:	f000 fad3 	bl	8000de0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	1d3a      	adds	r2, r7, #4
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_ADC1_Init+0xc4>)
 8000850:	0011      	movs	r1, r2
 8000852:	0018      	movs	r0, r3
 8000854:	f001 f9ac 	bl	8001bb0 <HAL_ADC_ConfigChannel>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 800085c:	f000 fac0 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b004      	add	sp, #16
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000084 	.word	0x20000084
 800086c:	40012400 	.word	0x40012400

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_I2C1_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f001 fe2f 	bl	8002510 <HAL_I2C_Init>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f000 fa93 	bl	8000de0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008bc:	2100      	movs	r1, #0
 80008be:	0018      	movs	r0, r3
 80008c0:	f002 fb30 	bl	8002f24 <HAL_I2CEx_ConfigAnalogFilter>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f000 fa8a 	bl	8000de0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 fb73 	bl	8002fbc <HAL_I2CEx_ConfigDigitalFilter>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 fa81 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000e8 	.word	0x200000e8
 80008e8:	40005400 	.word	0x40005400
 80008ec:	00303d5b 	.word	0x00303d5b

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	2310      	movs	r3, #16
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	0018      	movs	r0, r3
 80008fc:	2310      	movs	r3, #16
 80008fe:	001a      	movs	r2, r3
 8000900:	2100      	movs	r1, #0
 8000902:	f005 f839 	bl	8005978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	0018      	movs	r0, r3
 800090a:	230c      	movs	r3, #12
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f005 f832 	bl	8005978 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	05d2      	lsls	r2, r2, #23
 800091a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_TIM2_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_TIM2_Init+0xa4>)
 800092a:	2201      	movs	r2, #1
 800092c:	4252      	negs	r2, r2
 800092e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000936:	4b17      	ldr	r3, [pc, #92]	; (8000994 <MX_TIM2_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_TIM2_Init+0xa4>)
 800093e:	0018      	movs	r0, r3
 8000940:	f003 fa50 	bl	8003de4 <HAL_TIM_Base_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fa4a 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094c:	2110      	movs	r1, #16
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2280      	movs	r2, #128	; 0x80
 8000952:	0152      	lsls	r2, r2, #5
 8000954:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000956:	187a      	adds	r2, r7, r1
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_TIM2_Init+0xa4>)
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f003 fa99 	bl	8003e94 <HAL_TIM_ConfigClockSource>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d001      	beq.n	800096a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000966:	f000 fa3b 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000976:	1d3a      	adds	r2, r7, #4
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_TIM2_Init+0xa4>)
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f003 fc89 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000986:	f000 fa2b 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b008      	add	sp, #32
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	2000013c 	.word	0x2000013c

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 800099e:	4a24      	ldr	r2, [pc, #144]	; (8000a30 <MX_USART2_UART_Init+0x98>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009a4:	22e1      	movs	r2, #225	; 0xe1
 80009a6:	0252      	lsls	r2, r2, #9
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f003 fcc4 	bl	8004370 <HAL_UART_Init>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f9f8 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f004 fae1 	bl	8004fbc <HAL_UARTEx_SetTxFifoThreshold>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f9ef 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f004 fb18 	bl	800503c <HAL_UARTEx_SetRxFifoThreshold>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f9e6 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <MX_USART2_UART_Init+0x94>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f004 fa96 	bl	8004f48 <HAL_UARTEx_DisableFifoMode>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f9de 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000188 	.word	0x20000188
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	2414      	movs	r4, #20
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2314      	movs	r3, #20
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f004 ff97 	bl	8005978 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4e:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	430a      	orrs	r2, r1
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
 8000a56:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a62:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a66:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a68:	2120      	movs	r1, #32
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a72:	2220      	movs	r2, #32
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7e:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
 8000a86:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000a98:	2102      	movs	r1, #2
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9e:	4b32      	ldr	r3, [pc, #200]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 fd0f 	bl	80024d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000ab8:	492c      	ldr	r1, [pc, #176]	; (8000b6c <MX_GPIO_Init+0x138>)
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 fd09 	bl	80024d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <MX_GPIO_Init+0x140>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0018      	movs	r0, r3
 8000acc:	f001 fd03 	bl	80024d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2201      	movs	r2, #1
 8000ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	193a      	adds	r2, r7, r4
 8000aea:	23a0      	movs	r3, #160	; 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 fb6f 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <MX_GPIO_Init+0x138>)
 8000afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2201      	movs	r2, #1
 8000b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000b12:	0019      	movs	r1, r3
 8000b14:	0010      	movs	r0, r2
 8000b16:	f001 fb5d 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2201      	movs	r2, #1
 8000b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <MX_GPIO_Init+0x140>)
 8000b36:	0019      	movs	r1, r3
 8000b38:	0010      	movs	r0, r2
 8000b3a:	f001 fb4b 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000b3e:	0021      	movs	r1, r4
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2208      	movs	r2, #8
 8000b44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000b56:	0019      	movs	r1, r3
 8000b58:	0010      	movs	r0, r2
 8000b5a:	f001 fb3b 	bl	80021d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b00b      	add	sp, #44	; 0x2c
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	00004010 	.word	0x00004010
 8000b70:	50000400 	.word	0x50000400
 8000b74:	50000800 	.word	0x50000800

08000b78 <hardwareTestLED>:

/* USER CODE BEGIN 4 */

	/* Test LEDs are working  */
	void hardwareTestLED(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

		/* Lights ON */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <hardwareTestLED+0x7c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	0018      	movs	r0, r3
 8000b84:	f001 fca7 	bl	80024d6 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b88:	2064      	movs	r0, #100	; 0x64
 8000b8a:	f000 fbe1 	bl	8001350 <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	01db      	lsls	r3, r3, #7
 8000b92:	4819      	ldr	r0, [pc, #100]	; (8000bf8 <hardwareTestLED+0x80>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	0019      	movs	r1, r3
 8000b98:	f001 fc9d 	bl	80024d6 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b9c:	2064      	movs	r0, #100	; 0x64
 8000b9e:	f000 fbd7 	bl	8001350 <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <hardwareTestLED+0x80>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f001 fc94 	bl	80024d6 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000bae:	2064      	movs	r0, #100	; 0x64
 8000bb0:	f000 fbce 	bl	8001350 <HAL_Delay>

		/* Lights OFF */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <hardwareTestLED+0x7c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f001 fc8b 	bl	80024d6 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000bc0:	2064      	movs	r0, #100	; 0x64
 8000bc2:	f000 fbc5 	bl	8001350 <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	01db      	lsls	r3, r3, #7
 8000bca:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <hardwareTestLED+0x80>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	0019      	movs	r1, r3
 8000bd0:	f001 fc81 	bl	80024d6 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000bd4:	2064      	movs	r0, #100	; 0x64
 8000bd6:	f000 fbbb 	bl	8001350 <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <hardwareTestLED+0x80>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 fc78 	bl	80024d6 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000be6:	2064      	movs	r0, #100	; 0x64
 8000be8:	f000 fbb2 	bl	8001350 <HAL_Delay>
	}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	50000800 	.word	0x50000800
 8000bf8:	50000400 	.word	0x50000400

08000bfc <hardwareTestPot>:

	/* Test potentiometer is working */
	void hardwareTestPot(void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
		/* Init variable for pot value */
		char msg[20];
		uint16_t potValue;

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <hardwareTestPot+0x50>)
 8000c04:	2105      	movs	r1, #5
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 feba 	bl	8001980 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <hardwareTestPot+0x50>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 ffc2 	bl	8001b98 <HAL_ADC_GetValue>
 8000c14:	0002      	movs	r2, r0
 8000c16:	2116      	movs	r1, #22
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	801a      	strh	r2, [r3, #0]

		/* Print value */
		sprintf(msg, "potValue: %hu\r\n", potValue);
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	881a      	ldrh	r2, [r3, #0]
 8000c20:	490b      	ldr	r1, [pc, #44]	; (8000c50 <hardwareTestPot+0x54>)
 8000c22:	003b      	movs	r3, r7
 8000c24:	0018      	movs	r0, r3
 8000c26:	f004 fe3b 	bl	80058a0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fa69 	bl	8000104 <strlen>
 8000c32:	0003      	movs	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	2301      	movs	r3, #1
 8000c38:	425b      	negs	r3, r3
 8000c3a:	0039      	movs	r1, r7
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <hardwareTestPot+0x58>)
 8000c3e:	f003 fbed 	bl	800441c <HAL_UART_Transmit>

	}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b006      	add	sp, #24
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	20000084 	.word	0x20000084
 8000c50:	080069a4 	.word	0x080069a4
 8000c54:	20000188 	.word	0x20000188

08000c58 <hardwareTestButton>:

	/* Test pushbutton is working */
	void hardwareTestButton(void){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
		char msg[23];
		if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) == 0){
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <hardwareTestButton+0x68>)
 8000c60:	2108      	movs	r1, #8
 8000c62:	0018      	movs	r0, r3
 8000c64:	f001 fc1a 	bl	800249c <HAL_GPIO_ReadPin>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d112      	bne.n	8000c92 <hardwareTestButton+0x3a>
			printf(msg, "BUTTON IS BEING PUSHED");
 8000c6c:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <hardwareTestButton+0x6c>)
 8000c6e:	003b      	movs	r3, r7
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f004 fe04 	bl	8005880 <iprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000c78:	003b      	movs	r3, r7
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fa42 	bl	8000104 <strlen>
 8000c80:	0003      	movs	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	2301      	movs	r3, #1
 8000c86:	425b      	negs	r3, r3
 8000c88:	0039      	movs	r1, r7
 8000c8a:	480f      	ldr	r0, [pc, #60]	; (8000cc8 <hardwareTestButton+0x70>)
 8000c8c:	f003 fbc6 	bl	800441c <HAL_UART_Transmit>
		} else {
			printf(msg, "NO BUTTON :(");
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}
 8000c90:	e011      	b.n	8000cb6 <hardwareTestButton+0x5e>
			printf(msg, "NO BUTTON :(");
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <hardwareTestButton+0x74>)
 8000c94:	003b      	movs	r3, r7
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f004 fdf1 	bl	8005880 <iprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000c9e:	003b      	movs	r3, r7
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff fa2f 	bl	8000104 <strlen>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	2301      	movs	r3, #1
 8000cac:	425b      	negs	r3, r3
 8000cae:	0039      	movs	r1, r7
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <hardwareTestButton+0x70>)
 8000cb2:	f003 fbb3 	bl	800441c <HAL_UART_Transmit>
	}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b006      	add	sp, #24
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	50000400 	.word	0x50000400
 8000cc4:	080069b4 	.word	0x080069b4
 8000cc8:	20000188 	.word	0x20000188
 8000ccc:	080069cc 	.word	0x080069cc

08000cd0 <i2cScanner>:

	/* I2C Scanner Script */
	/* Author:     Khaled Magdy */
	/* Source: 	   www.DeepBlueMbedded.com */

	void i2cScanner(void){
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b092      	sub	sp, #72	; 0x48
 8000cd4:	af00      	add	r7, sp, #0
		uint8_t Buffer[25] = {0};
 8000cd6:	232c      	movs	r3, #44	; 0x2c
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	3304      	adds	r3, #4
 8000ce0:	2215      	movs	r2, #21
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f004 fe47 	bl	8005978 <memset>
		uint8_t Space[] = " - ";
 8000cea:	2328      	movs	r3, #40	; 0x28
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	4a35      	ldr	r2, [pc, #212]	; (8000dc4 <i2cScanner+0xf4>)
 8000cf0:	601a      	str	r2, [r3, #0]
		uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000cf2:	250c      	movs	r5, #12
 8000cf4:	197b      	adds	r3, r7, r5
 8000cf6:	4a34      	ldr	r2, [pc, #208]	; (8000dc8 <i2cScanner+0xf8>)
 8000cf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000cfa:	c313      	stmia	r3!, {r0, r1, r4}
 8000cfc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000cfe:	c313      	stmia	r3!, {r0, r1, r4}
 8000d00:	8812      	ldrh	r2, [r2, #0]
 8000d02:	801a      	strh	r2, [r3, #0]
		uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000d04:	003b      	movs	r3, r7
 8000d06:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <i2cScanner+0xfc>)
 8000d08:	ca03      	ldmia	r2!, {r0, r1}
 8000d0a:	c303      	stmia	r3!, {r0, r1}
 8000d0c:	8811      	ldrh	r1, [r2, #0]
 8000d0e:	8019      	strh	r1, [r3, #0]
 8000d10:	7892      	ldrb	r2, [r2, #2]
 8000d12:	709a      	strb	r2, [r3, #2]

		uint8_t i = 0, ret;
 8000d14:	2447      	movs	r4, #71	; 0x47
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1000);
 8000d1c:	23fa      	movs	r3, #250	; 0xfa
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 fb15 	bl	8001350 <HAL_Delay>

		/*-[ I2C Bus Scanning ]-*/
		HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <i2cScanner+0x100>)
 8000d28:	1979      	adds	r1, r7, r5
 8000d2a:	482a      	ldr	r0, [pc, #168]	; (8000dd4 <i2cScanner+0x104>)
 8000d2c:	221a      	movs	r2, #26
 8000d2e:	f003 fb75 	bl	800441c <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e034      	b.n	8000da4 <i2cScanner+0xd4>
		{
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000d3a:	2347      	movs	r3, #71	; 0x47
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	18db      	adds	r3, r3, r3
 8000d44:	b299      	uxth	r1, r3
 8000d46:	2546      	movs	r5, #70	; 0x46
 8000d48:	197c      	adds	r4, r7, r5
 8000d4a:	4823      	ldr	r0, [pc, #140]	; (8000dd8 <i2cScanner+0x108>)
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	2203      	movs	r2, #3
 8000d50:	f001 fdae 	bl	80028b0 <HAL_I2C_IsDeviceReady>
 8000d54:	0003      	movs	r3, r0
 8000d56:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK) /* No ACK Received At That Address */
 8000d58:	197b      	adds	r3, r7, r5
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <i2cScanner+0xa0>
			{
				HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <i2cScanner+0x100>)
 8000d62:	2228      	movs	r2, #40	; 0x28
 8000d64:	18b9      	adds	r1, r7, r2
 8000d66:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <i2cScanner+0x104>)
 8000d68:	2204      	movs	r2, #4
 8000d6a:	f003 fb57 	bl	800441c <HAL_UART_Transmit>
 8000d6e:	e013      	b.n	8000d98 <i2cScanner+0xc8>
			}
			else if(ret == HAL_OK)
 8000d70:	2346      	movs	r3, #70	; 0x46
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10e      	bne.n	8000d98 <i2cScanner+0xc8>
			{
				sprintf(Buffer, "0x%X", i);
 8000d7a:	2347      	movs	r3, #71	; 0x47
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	4916      	ldr	r1, [pc, #88]	; (8000ddc <i2cScanner+0x10c>)
 8000d82:	242c      	movs	r4, #44	; 0x2c
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	0018      	movs	r0, r3
 8000d88:	f004 fd8a 	bl	80058a0 <siprintf>
				HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <i2cScanner+0x100>)
 8000d8e:	1939      	adds	r1, r7, r4
 8000d90:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <i2cScanner+0x104>)
 8000d92:	2219      	movs	r2, #25
 8000d94:	f003 fb42 	bl	800441c <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000d98:	2147      	movs	r1, #71	; 0x47
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	3201      	adds	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	2347      	movs	r3, #71	; 0x47
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	dac4      	bge.n	8000d3a <i2cScanner+0x6a>
			}
		}
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <i2cScanner+0x100>)
 8000db2:	0039      	movs	r1, r7
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <i2cScanner+0x104>)
 8000db6:	220b      	movs	r2, #11
 8000db8:	f003 fb30 	bl	800441c <HAL_UART_Transmit>
		/*--[ Scanning Done ]--*/
	}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b012      	add	sp, #72	; 0x48
 8000dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc4:	00202d20 	.word	0x00202d20
 8000dc8:	080069e4 	.word	0x080069e4
 8000dcc:	08006a00 	.word	0x08006a00
 8000dd0:	00002710 	.word	0x00002710
 8000dd4:	20000188 	.word	0x20000188
 8000dd8:	200000e8 	.word	0x200000e8
 8000ddc:	080069dc 	.word	0x080069dc

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	2201      	movs	r2, #1
 8000e04:	4013      	ands	r3, r2
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	0549      	lsls	r1, r1, #21
 8000e14:	430a      	orrs	r2, r1
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	055b      	lsls	r3, r3, #21
 8000e20:	4013      	ands	r3, r2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000e26:	23c0      	movs	r3, #192	; 0xc0
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 fab4 	bl	8001398 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b08b      	sub	sp, #44	; 0x2c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	2414      	movs	r4, #20
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f004 fd92 	bl	8005978 <memset>
  if(hadc->Instance==ADC1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <HAL_ADC_MspInit+0x80>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d129      	bne.n	8000eb2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_ADC_MspInit+0x84>)
 8000e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_ADC_MspInit+0x84>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0349      	lsls	r1, r1, #13
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_ADC_MspInit+0x84>)
 8000e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	035b      	lsls	r3, r3, #13
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_ADC_MspInit+0x84>)
 8000e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <HAL_ADC_MspInit+0x84>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	430a      	orrs	r2, r1
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_ADC_MspInit+0x84>)
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	193a      	adds	r2, r7, r4
 8000ea6:	23a0      	movs	r3, #160	; 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f001 f991 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b00b      	add	sp, #44	; 0x2c
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40012400 	.word	0x40012400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b097      	sub	sp, #92	; 0x5c
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	2344      	movs	r3, #68	; 0x44
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	2314      	movs	r3, #20
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	f004 fd4e 	bl	8005978 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	2410      	movs	r4, #16
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	2334      	movs	r3, #52	; 0x34
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	f004 fd46 	bl	8005978 <memset>
  if(hi2c->Instance==I2C1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <HAL_I2C_MspInit+0xb8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d13e      	bne.n	8000f74 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2220      	movs	r2, #32
 8000efa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	0018      	movs	r0, r3
 8000f06:	f002 fdb5 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f0e:	f7ff ff67 	bl	8000de0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_I2C_MspInit+0xbc>)
 8000f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_I2C_MspInit+0xbc>)
 8000f18:	2102      	movs	r1, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_I2C_MspInit+0xbc>)
 8000f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f22:	2202      	movs	r2, #2
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f2a:	2144      	movs	r1, #68	; 0x44
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	22c0      	movs	r2, #192	; 0xc0
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2212      	movs	r2, #18
 8000f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2206      	movs	r2, #6
 8000f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_I2C_MspInit+0xc0>)
 8000f50:	0019      	movs	r1, r3
 8000f52:	0010      	movs	r0, r2
 8000f54:	f001 f93e 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_I2C_MspInit+0xbc>)
 8000f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_I2C_MspInit+0xbc>)
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	0389      	lsls	r1, r1, #14
 8000f62:	430a      	orrs	r2, r1
 8000f64:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_I2C_MspInit+0xbc>)
 8000f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	039b      	lsls	r3, r3, #14
 8000f6e:	4013      	ands	r3, r2
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b017      	add	sp, #92	; 0x5c
 8000f7a:	bd90      	pop	{r4, r7, pc}
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	40021000 	.word	0x40021000
 8000f84:	50000400 	.word	0x50000400

08000f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	05db      	lsls	r3, r3, #23
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d10b      	bne.n	8000fb4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_TIM_Base_MspInit+0x34>)
 8000f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_TIM_Base_MspInit+0x34>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <HAL_TIM_Base_MspInit+0x34>)
 8000faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fac:	2201      	movs	r2, #1
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b097      	sub	sp, #92	; 0x5c
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	2344      	movs	r3, #68	; 0x44
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	0018      	movs	r0, r3
 8000fce:	2314      	movs	r3, #20
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	f004 fcd0 	bl	8005978 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd8:	2410      	movs	r4, #16
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	0018      	movs	r0, r3
 8000fde:	2334      	movs	r3, #52	; 0x34
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f004 fcc8 	bl	8005978 <memset>
  if(huart->Instance==USART2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_UART_MspInit+0xb8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d13e      	bne.n	8001070 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	0018      	movs	r0, r3
 8001002:	f002 fd37 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800100a:	f7ff fee9 	bl	8000de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_UART_MspInit+0xbc>)
 8001010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_UART_MspInit+0xbc>)
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	0289      	lsls	r1, r1, #10
 8001018:	430a      	orrs	r2, r1
 800101a:	63da      	str	r2, [r3, #60]	; 0x3c
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0xbc>)
 800101e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	029b      	lsls	r3, r3, #10
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_UART_MspInit+0xbc>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_UART_MspInit+0xbc>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	; 0x34
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0xbc>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	2201      	movs	r2, #1
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001042:	2144      	movs	r1, #68	; 0x44
 8001044:	187b      	adds	r3, r7, r1
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2202      	movs	r2, #2
 800104e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2201      	movs	r2, #1
 8001054:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2201      	movs	r2, #1
 8001060:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	187a      	adds	r2, r7, r1
 8001064:	23a0      	movs	r3, #160	; 0xa0
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	0011      	movs	r1, r2
 800106a:	0018      	movs	r0, r3
 800106c:	f001 f8b2 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b017      	add	sp, #92	; 0x5c
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	e7fe      	b.n	8001084 <NMI_Handler+0x4>

08001086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <HardFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f938 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e00a      	b.n	80010d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010c0:	e000      	b.n	80010c4 <_read+0x16>
 80010c2:	bf00      	nop
 80010c4:	0001      	movs	r1, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	60ba      	str	r2, [r7, #8]
 80010cc:	b2ca      	uxtb	r2, r1
 80010ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	dbf0      	blt.n	80010c0 <_read+0x12>
  }

  return len;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b006      	add	sp, #24
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e009      	b.n	800110e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	60ba      	str	r2, [r7, #8]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	0018      	movs	r0, r3
 8001104:	e000      	b.n	8001108 <_write+0x20>
 8001106:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	dbf1      	blt.n	80010fa <_write+0x12>
  }
  return len;
 8001116:	687b      	ldr	r3, [r7, #4]
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b006      	add	sp, #24
 800111e:	bd80      	pop	{r7, pc}

08001120 <_close>:

int _close(int file)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001128:	2301      	movs	r3, #1
 800112a:	425b      	negs	r3, r3
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bd80      	pop	{r7, pc}

08001134 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2280      	movs	r2, #128	; 0x80
 8001142:	0192      	lsls	r2, r2, #6
 8001144:	605a      	str	r2, [r3, #4]
  return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}

08001150 <_isatty>:

int _isatty(int file)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001158:	2301      	movs	r3, #1
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}

08001162 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	0018      	movs	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	b004      	add	sp, #16
 8001176:	bd80      	pop	{r7, pc}

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	18d3      	adds	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f004 fc3c 	bl	8005a24 <__errno>
 80011ac:	0003      	movs	r3, r0
 80011ae:	220c      	movs	r2, #12
 80011b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	425b      	negs	r3, r3
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	18d2      	adds	r2, r2, r3
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b006      	add	sp, #24
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20009000 	.word	0x20009000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	2000021c 	.word	0x2000021c
 80011e0:	20000378 	.word	0x20000378

080011e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f4:	f7ff fff6 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <LoopForever+0x6>)
  ldr r1, =_edata
 80011fa:	490d      	ldr	r1, [pc, #52]	; (8001230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <LoopForever+0xe>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001210:	4c0a      	ldr	r4, [pc, #40]	; (800123c <LoopForever+0x16>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800121e:	f004 fc07 	bl	8005a30 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001222:	f7ff fa0d 	bl	8000640 <main>

08001226 <LoopForever>:

LoopForever:
  b LoopForever
 8001226:	e7fe      	b.n	8001226 <LoopForever>
  ldr   r0, =_estack
 8001228:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001234:	08006af4 	.word	0x08006af4
  ldr r2, =_sbss
 8001238:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800123c:	20000374 	.word	0x20000374

08001240 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC1_COMP_IRQHandler>
	...

08001244 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_Init+0x3c>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_Init+0x3c>)
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	0049      	lsls	r1, r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f810 	bl	8001284 <HAL_InitTick>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d003      	beq.n	8001270 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e001      	b.n	8001274 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff fdbc 	bl	8000dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800128c:	230f      	movs	r3, #15
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_InitTick+0x88>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d02b      	beq.n	80012f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_InitTick+0x8c>)
 800129e:	681c      	ldr	r4, [r3, #0]
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_InitTick+0x88>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	0019      	movs	r1, r3
 80012a6:	23fa      	movs	r3, #250	; 0xfa
 80012a8:	0098      	lsls	r0, r3, #2
 80012aa:	f7fe ff3d 	bl	8000128 <__udivsi3>
 80012ae:	0003      	movs	r3, r0
 80012b0:	0019      	movs	r1, r3
 80012b2:	0020      	movs	r0, r4
 80012b4:	f7fe ff38 	bl	8000128 <__udivsi3>
 80012b8:	0003      	movs	r3, r0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 ff7d 	bl	80021ba <HAL_SYSTICK_Config>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d112      	bne.n	80012ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d80a      	bhi.n	80012e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2301      	movs	r3, #1
 80012ce:	425b      	negs	r3, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 ff5c 	bl	8002190 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_InitTick+0x90>)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e00d      	b.n	80012fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012e0:	230f      	movs	r3, #15
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e008      	b.n	80012fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ea:	230f      	movs	r3, #15
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e003      	b.n	80012fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f4:	230f      	movs	r3, #15
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012fc:	230f      	movs	r3, #15
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	781b      	ldrb	r3, [r3, #0]
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b005      	add	sp, #20
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	20000008 	.word	0x20000008
 8001310:	20000000 	.word	0x20000000
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x1c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	001a      	movs	r2, r3
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x20>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	18d2      	adds	r2, r2, r3
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_IncTick+0x20>)
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	20000008 	.word	0x20000008
 8001338:	20000220 	.word	0x20000220

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <HAL_GetTick+0x10>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	20000220 	.word	0x20000220

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff fff0 	bl	800133c <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	001a      	movs	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	189b      	adds	r3, r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	f7ff ffe0 	bl	800133c <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	0019      	movs	r1, r3
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	40010000 	.word	0x40010000
 80013c0:	fffff9ff 	.word	0xfffff9ff

080013c4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80013d4:	401a      	ands	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	fe3fffff 	.word	0xfe3fffff

080013ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	23e0      	movs	r3, #224	; 0xe0
 80013fa:	045b      	lsls	r3, r3, #17
 80013fc:	4013      	ands	r3, r2
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}

08001406 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	2104      	movs	r1, #4
 800141a:	400a      	ands	r2, r1
 800141c:	2107      	movs	r1, #7
 800141e:	4091      	lsls	r1, r2
 8001420:	000a      	movs	r2, r1
 8001422:	43d2      	mvns	r2, r2
 8001424:	401a      	ands	r2, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2104      	movs	r1, #4
 800142a:	400b      	ands	r3, r1
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4099      	lsls	r1, r3
 8001430:	000b      	movs	r3, r1
 8001432:	431a      	orrs	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b004      	add	sp, #16
 800143e:	bd80      	pop	{r7, pc}

08001440 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	2104      	movs	r1, #4
 8001452:	400a      	ands	r2, r1
 8001454:	2107      	movs	r1, #7
 8001456:	4091      	lsls	r1, r2
 8001458:	000a      	movs	r2, r1
 800145a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2104      	movs	r1, #4
 8001460:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001462:	40da      	lsrs	r2, r3
 8001464:	0013      	movs	r3, r2
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b002      	add	sp, #8
 800146c:	bd80      	pop	{r7, pc}

0800146e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	23c0      	movs	r3, #192	; 0xc0
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4013      	ands	r3, r2
 8001480:	d101      	bne.n	8001486 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001486:	2300      	movs	r3, #0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	211f      	movs	r1, #31
 80014a4:	400a      	ands	r2, r1
 80014a6:	210f      	movs	r1, #15
 80014a8:	4091      	lsls	r1, r2
 80014aa:	000a      	movs	r2, r1
 80014ac:	43d2      	mvns	r2, r2
 80014ae:	401a      	ands	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	0e9b      	lsrs	r3, r3, #26
 80014b4:	210f      	movs	r1, #15
 80014b6:	4019      	ands	r1, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	201f      	movs	r0, #31
 80014bc:	4003      	ands	r3, r0
 80014be:	4099      	lsls	r1, r3
 80014c0:	000b      	movs	r3, r1
 80014c2:	431a      	orrs	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014c8:	46c0      	nop			; (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b004      	add	sp, #16
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	035b      	lsls	r3, r3, #13
 80014e2:	0b5b      	lsrs	r3, r3, #13
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	0352      	lsls	r2, r2, #13
 8001504:	0b52      	lsrs	r2, r2, #13
 8001506:	43d2      	mvns	r2, r2
 8001508:	401a      	ands	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	0212      	lsls	r2, r2, #8
 800152c:	43d2      	mvns	r2, r2
 800152e:	401a      	ands	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	400b      	ands	r3, r1
 8001538:	4904      	ldr	r1, [pc, #16]	; (800154c <LL_ADC_SetChannelSamplingTime+0x34>)
 800153a:	400b      	ands	r3, r1
 800153c:	431a      	orrs	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b004      	add	sp, #16
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	07ffff00 	.word	0x07ffff00

08001550 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	4a05      	ldr	r2, [pc, #20]	; (8001574 <LL_ADC_EnableInternalRegulator+0x24>)
 800155e:	4013      	ands	r3, r2
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	0552      	lsls	r2, r2, #21
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	6fffffe8 	.word	0x6fffffe8

08001578 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	055b      	lsls	r3, r3, #21
 8001588:	401a      	ands	r2, r3
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	055b      	lsls	r3, r3, #21
 800158e:	429a      	cmp	r2, r3
 8001590:	d101      	bne.n	8001596 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001596:	2300      	movs	r3, #0
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <LL_ADC_Enable+0x20>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	2201      	movs	r2, #1
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	7fffffe8 	.word	0x7fffffe8

080015c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <LL_ADC_IsEnabled+0x18>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <LL_ADC_IsEnabled+0x1a>
 80015dc:	2300      	movs	r3, #0
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <LL_ADC_REG_StartConversion+0x20>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	2204      	movs	r2, #4
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}
 8001608:	7fffffe8 	.word	0x7fffffe8

0800160c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2204      	movs	r2, #4
 800161a:	4013      	ands	r3, r2
 800161c:	2b04      	cmp	r3, #4
 800161e:	d101      	bne.n	8001624 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001624:	2300      	movs	r3, #0
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001638:	231f      	movs	r3, #31
 800163a:	18fb      	adds	r3, r7, r3
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e17f      	b.n	8001956 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10a      	bne.n	8001674 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff fbeb 	bl	8000e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2254      	movs	r2, #84	; 0x54
 8001670:	2100      	movs	r1, #0
 8001672:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0018      	movs	r0, r3
 800167a:	f7ff ff7d 	bl	8001578 <LL_ADC_IsInternalRegulatorEnabled>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d115      	bne.n	80016ae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff ff62 	bl	8001550 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800168c:	4bb4      	ldr	r3, [pc, #720]	; (8001960 <HAL_ADC_Init+0x330>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	49b4      	ldr	r1, [pc, #720]	; (8001964 <HAL_ADC_Init+0x334>)
 8001692:	0018      	movs	r0, r3
 8001694:	f7fe fd48 	bl	8000128 <__udivsi3>
 8001698:	0003      	movs	r3, r0
 800169a:	3301      	adds	r3, #1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016a0:	e002      	b.n	80016a8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f9      	bne.n	80016a2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	0018      	movs	r0, r3
 80016b4:	f7ff ff60 	bl	8001578 <LL_ADC_IsInternalRegulatorEnabled>
 80016b8:	1e03      	subs	r3, r0, #0
 80016ba:	d10f      	bne.n	80016dc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	2210      	movs	r2, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016cc:	2201      	movs	r2, #1
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016d4:	231f      	movs	r3, #31
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff ff93 	bl	800160c <LL_ADC_REG_IsConversionOngoing>
 80016e6:	0003      	movs	r3, r0
 80016e8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	2210      	movs	r2, #16
 80016f0:	4013      	ands	r3, r2
 80016f2:	d000      	beq.n	80016f6 <HAL_ADC_Init+0xc6>
 80016f4:	e122      	b.n	800193c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d000      	beq.n	80016fe <HAL_ADC_Init+0xce>
 80016fc:	e11e      	b.n	800193c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a99      	ldr	r2, [pc, #612]	; (8001968 <HAL_ADC_Init+0x338>)
 8001704:	4013      	ands	r3, r2
 8001706:	2202      	movs	r2, #2
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff ff56 	bl	80015c4 <LL_ADC_IsEnabled>
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d000      	beq.n	800171e <HAL_ADC_Init+0xee>
 800171c:	e0ad      	b.n	800187a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7e1b      	ldrb	r3, [r3, #24]
 8001726:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001728:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7e5b      	ldrb	r3, [r3, #25]
 800172e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001730:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7e9b      	ldrb	r3, [r3, #26]
 8001736:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001738:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <HAL_ADC_Init+0x118>
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	015b      	lsls	r3, r3, #5
 8001746:	e000      	b.n	800174a <HAL_ADC_Init+0x11a>
 8001748:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800174a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001750:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b00      	cmp	r3, #0
 8001758:	da04      	bge.n	8001764 <HAL_ADC_Init+0x134>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	e001      	b.n	8001768 <HAL_ADC_Init+0x138>
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001768:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	212c      	movs	r1, #44	; 0x2c
 800176e:	5c5b      	ldrb	r3, [r3, r1]
 8001770:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001772:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2220      	movs	r2, #32
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d115      	bne.n	80017b0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7e9b      	ldrb	r3, [r3, #26]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d105      	bne.n	8001798 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	0252      	lsls	r2, r2, #9
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	e00b      	b.n	80017b0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	2220      	movs	r2, #32
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a8:	2201      	movs	r2, #1
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00a      	beq.n	80017ce <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017bc:	23e0      	movs	r3, #224	; 0xe0
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017c6:	4313      	orrs	r3, r2
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a65      	ldr	r2, [pc, #404]	; (800196c <HAL_ADC_Init+0x33c>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	0f9b      	lsrs	r3, r3, #30
 80017ea:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017f0:	4313      	orrs	r3, r2
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	223c      	movs	r2, #60	; 0x3c
 80017fc:	5c9b      	ldrb	r3, [r3, r2]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d111      	bne.n	8001826 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0f9b      	lsrs	r3, r3, #30
 8001808:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800180e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001814:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800181a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4313      	orrs	r3, r2
 8001820:	2201      	movs	r2, #1
 8001822:	4313      	orrs	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	4a50      	ldr	r2, [pc, #320]	; (8001970 <HAL_ADC_Init+0x340>)
 800182e:	4013      	ands	r3, r2
 8001830:	0019      	movs	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	430a      	orrs	r2, r1
 800183a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	23c0      	movs	r3, #192	; 0xc0
 8001842:	061b      	lsls	r3, r3, #24
 8001844:	429a      	cmp	r2, r3
 8001846:	d018      	beq.n	800187a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	429a      	cmp	r2, r3
 8001852:	d012      	beq.n	800187a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	061b      	lsls	r3, r3, #24
 800185c:	429a      	cmp	r2, r3
 800185e:	d00c      	beq.n	800187a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001860:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_ADC_Init+0x344>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a44      	ldr	r2, [pc, #272]	; (8001978 <HAL_ADC_Init+0x348>)
 8001866:	4013      	ands	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	23f0      	movs	r3, #240	; 0xf0
 8001870:	039b      	lsls	r3, r3, #14
 8001872:	401a      	ands	r2, r3
 8001874:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_ADC_Init+0x344>)
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	001a      	movs	r2, r3
 8001884:	2100      	movs	r1, #0
 8001886:	f7ff fdbe 	bl	8001406 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001892:	493a      	ldr	r1, [pc, #232]	; (800197c <HAL_ADC_Init+0x34c>)
 8001894:	001a      	movs	r2, r3
 8001896:	f7ff fdb6 	bl	8001406 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2110      	movs	r1, #16
 80018ae:	4249      	negs	r1, r1
 80018b0:	430a      	orrs	r2, r1
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
 80018b4:	e018      	b.n	80018e8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	039b      	lsls	r3, r3, #14
 80018be:	429a      	cmp	r2, r3
 80018c0:	d112      	bne.n	80018e8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	221c      	movs	r2, #28
 80018d2:	4013      	ands	r3, r2
 80018d4:	2210      	movs	r2, #16
 80018d6:	4252      	negs	r2, r2
 80018d8:	409a      	lsls	r2, r3
 80018da:	0011      	movs	r1, r2
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2100      	movs	r1, #0
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7ff fda6 	bl	8001440 <LL_ADC_GetSamplingTimeCommonChannels>
 80018f4:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d10b      	bne.n	8001916 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	2203      	movs	r2, #3
 800190a:	4393      	bics	r3, r2
 800190c:	2201      	movs	r2, #1
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001914:	e01c      	b.n	8001950 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	2212      	movs	r2, #18
 800191c:	4393      	bics	r3, r2
 800191e:	2210      	movs	r2, #16
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	2201      	movs	r2, #1
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001932:	231f      	movs	r3, #31
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800193a:	e009      	b.n	8001950 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	2210      	movs	r2, #16
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001948:	231f      	movs	r3, #31
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001950:	231f      	movs	r3, #31
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	781b      	ldrb	r3, [r3, #0]
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b008      	add	sp, #32
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	20000000 	.word	0x20000000
 8001964:	00030d40 	.word	0x00030d40
 8001968:	fffffefd 	.word	0xfffffefd
 800196c:	ffde0201 	.word	0xffde0201
 8001970:	1ffffc02 	.word	0x1ffffc02
 8001974:	40012708 	.word	0x40012708
 8001978:	ffc3ffff 	.word	0xffc3ffff
 800197c:	07ffff04 	.word	0x07ffff04

08001980 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	2b08      	cmp	r3, #8
 8001990:	d102      	bne.n	8001998 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001992:	2308      	movs	r3, #8
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e00f      	b.n	80019b8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	d007      	beq.n	80019b4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	2220      	movs	r2, #32
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e072      	b.n	8001a9a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80019b4:	2304      	movs	r3, #4
 80019b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019b8:	f7ff fcc0 	bl	800133c <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80019c0:	e01f      	b.n	8001a02 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	d01c      	beq.n	8001a02 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019c8:	f7ff fcb8 	bl	800133c <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d302      	bcc.n	80019de <HAL_ADC_PollForConversion+0x5e>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d111      	bne.n	8001a02 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4013      	ands	r3, r2
 80019e8:	d10b      	bne.n	8001a02 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	2204      	movs	r2, #4
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2254      	movs	r2, #84	; 0x54
 80019fa:	2100      	movs	r1, #0
 80019fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e04b      	b.n	8001a9a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d0d9      	beq.n	80019c2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff fd24 	bl	800146e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d02e      	beq.n	8001a88 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7e9b      	ldrb	r3, [r3, #26]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d12a      	bne.n	8001a88 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d123      	bne.n	8001a88 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7ff fde1 	bl	800160c <LL_ADC_REG_IsConversionOngoing>
 8001a4a:	1e03      	subs	r3, r0, #0
 8001a4c:	d110      	bne.n	8001a70 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	210c      	movs	r1, #12
 8001a5a:	438a      	bics	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_ADC_PollForConversion+0x124>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	2201      	movs	r2, #1
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a6e:	e00b      	b.n	8001a88 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	2220      	movs	r2, #32
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	2201      	movs	r2, #1
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7e1b      	ldrb	r3, [r3, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	220c      	movs	r2, #12
 8001a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b004      	add	sp, #16
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	fffffefe 	.word	0xfffffefe

08001aa8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff fda9 	bl	800160c <LL_ADC_REG_IsConversionOngoing>
 8001aba:	1e03      	subs	r3, r0, #0
 8001abc:	d15f      	bne.n	8001b7e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2254      	movs	r2, #84	; 0x54
 8001ac2:	5c9b      	ldrb	r3, [r3, r2]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_ADC_Start_IT+0x24>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e05f      	b.n	8001b8c <HAL_ADC_Start_IT+0xe4>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2254      	movs	r2, #84	; 0x54
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ad4:	250f      	movs	r5, #15
 8001ad6:	197c      	adds	r4, r7, r5
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f000 fa40 	bl	8001f60 <ADC_Enable>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ae4:	197b      	adds	r3, r7, r5
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d143      	bne.n	8001b74 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <HAL_ADC_Start_IT+0xec>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	2280      	movs	r2, #128	; 0x80
 8001af6:	0052      	lsls	r2, r2, #1
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	221c      	movs	r2, #28
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2254      	movs	r2, #84	; 0x54
 8001b10:	2100      	movs	r1, #0
 8001b12:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	211c      	movs	r1, #28
 8001b20:	438a      	bics	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d108      	bne.n	8001b3e <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2108      	movs	r1, #8
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
          break;
 8001b3c:	e008      	b.n	8001b50 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2104      	movs	r1, #4
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	605a      	str	r2, [r3, #4]
          break;
 8001b4e:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d107      	bne.n	8001b68 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2110      	movs	r1, #16
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7ff fd3b 	bl	80015e8 <LL_ADC_REG_StartConversion>
 8001b72:	e008      	b.n	8001b86 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2254      	movs	r2, #84	; 0x54
 8001b78:	2100      	movs	r1, #0
 8001b7a:	5499      	strb	r1, [r3, r2]
 8001b7c:	e003      	b.n	8001b86 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b7e:	230f      	movs	r3, #15
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2202      	movs	r2, #2
 8001b84:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001b86:	230f      	movs	r3, #15
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
}
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bdb0      	pop	{r4, r5, r7, pc}
 8001b94:	fffff0fe 	.word	0xfffff0fe

08001b98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b002      	add	sp, #8
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bba:	2317      	movs	r3, #23
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2254      	movs	r2, #84	; 0x54
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x24>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e1c0      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x3a6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2254      	movs	r2, #84	; 0x54
 8001bd8:	2101      	movs	r1, #1
 8001bda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff fd13 	bl	800160c <LL_ADC_REG_IsConversionOngoing>
 8001be6:	1e03      	subs	r3, r0, #0
 8001be8:	d000      	beq.n	8001bec <HAL_ADC_ConfigChannel+0x3c>
 8001bea:	e1a3      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d100      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x46>
 8001bf4:	e143      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d004      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c06:	4ac1      	ldr	r2, [pc, #772]	; (8001f0c <HAL_ADC_ConfigChannel+0x35c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d108      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0019      	movs	r1, r3
 8001c16:	0010      	movs	r0, r2
 8001c18:	f7ff fc5a 	bl	80014d0 <LL_ADC_REG_SetSequencerChAdd>
 8001c1c:	e0c9      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	211f      	movs	r1, #31
 8001c28:	400b      	ands	r3, r1
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	4099      	lsls	r1, r3
 8001c2e:	000b      	movs	r3, r1
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	035b      	lsls	r3, r3, #13
 8001c3c:	0b5b      	lsrs	r3, r3, #13
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x9c>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0e9b      	lsrs	r3, r3, #26
 8001c46:	221f      	movs	r2, #31
 8001c48:	4013      	ands	r3, r2
 8001c4a:	e098      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d000      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0xa8>
 8001c56:	e091      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1cc>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d000      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0xb4>
 8001c62:	e089      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x1c8>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d000      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0xc0>
 8001c6e:	e081      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x1c4>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2208      	movs	r2, #8
 8001c76:	4013      	ands	r3, r2
 8001c78:	d000      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0xcc>
 8001c7a:	e079      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x1c0>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2210      	movs	r2, #16
 8001c82:	4013      	ands	r3, r2
 8001c84:	d000      	beq.n	8001c88 <HAL_ADC_ConfigChannel+0xd8>
 8001c86:	e071      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1bc>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d000      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0xe4>
 8001c92:	e069      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x1b8>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d000      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0xf0>
 8001c9e:	e061      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x1b4>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2280      	movs	r2, #128	; 0x80
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d000      	beq.n	8001cac <HAL_ADC_ConfigChannel+0xfc>
 8001caa:	e059      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x1b0>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d151      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1ac>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d149      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1a8>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d141      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1a4>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d139      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1a0>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	015b      	lsls	r3, r3, #5
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d131      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x19c>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d129      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x198>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	01db      	lsls	r3, r3, #7
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d121      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x194>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d119      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x190>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	025b      	lsls	r3, r3, #9
 8001d14:	4013      	ands	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x18c>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	029b      	lsls	r3, r3, #10
 8001d20:	4013      	ands	r3, r2
 8001d22:	d109      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x188>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	02db      	lsls	r3, r3, #11
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d001      	beq.n	8001d34 <HAL_ADC_ConfigChannel+0x184>
 8001d30:	2312      	movs	r3, #18
 8001d32:	e024      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d34:	2300      	movs	r3, #0
 8001d36:	e022      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d38:	2311      	movs	r3, #17
 8001d3a:	e020      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	e01e      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d40:	230f      	movs	r3, #15
 8001d42:	e01c      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d44:	230e      	movs	r3, #14
 8001d46:	e01a      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d48:	230d      	movs	r3, #13
 8001d4a:	e018      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	e016      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d50:	230b      	movs	r3, #11
 8001d52:	e014      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d54:	230a      	movs	r3, #10
 8001d56:	e012      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d58:	2309      	movs	r3, #9
 8001d5a:	e010      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	e00e      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d60:	2307      	movs	r3, #7
 8001d62:	e00c      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e00a      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d68:	2305      	movs	r3, #5
 8001d6a:	e008      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e006      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d70:	2303      	movs	r3, #3
 8001d72:	e004      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	6852      	ldr	r2, [r2, #4]
 8001d82:	201f      	movs	r0, #31
 8001d84:	4002      	ands	r2, r0
 8001d86:	4093      	lsls	r3, r2
 8001d88:	000a      	movs	r2, r1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d808      	bhi.n	8001db2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	001a      	movs	r2, r3
 8001dae:	f7ff fb6f 	bl	8001490 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	f7ff fbaa 	bl	8001518 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db00      	blt.n	8001dce <HAL_ADC_ConfigChannel+0x21e>
 8001dcc:	e0bc      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dce:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff fb0b 	bl	80013ec <LL_ADC_GetCommonPathInternalCh>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	; (8001f14 <HAL_ADC_ConfigChannel+0x364>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d122      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dec:	d11d      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0412      	lsls	r2, r2, #16
 8001df4:	4313      	orrs	r3, r2
 8001df6:	4a46      	ldr	r2, [pc, #280]	; (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001df8:	0019      	movs	r1, r3
 8001dfa:	0010      	movs	r0, r2
 8001dfc:	f7ff fae2 	bl	80013c4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e00:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <HAL_ADC_ConfigChannel+0x368>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4945      	ldr	r1, [pc, #276]	; (8001f1c <HAL_ADC_ConfigChannel+0x36c>)
 8001e06:	0018      	movs	r0, r3
 8001e08:	f7fe f98e 	bl	8000128 <__udivsi3>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	0013      	movs	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	189b      	adds	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e1a:	e002      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f9      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e28:	e08e      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a3c      	ldr	r2, [pc, #240]	; (8001f20 <HAL_ADC_ConfigChannel+0x370>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d10e      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	045b      	lsls	r3, r3, #17
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d109      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2280      	movs	r2, #128	; 0x80
 8001e42:	0452      	lsls	r2, r2, #17
 8001e44:	4313      	orrs	r3, r2
 8001e46:	4a32      	ldr	r2, [pc, #200]	; (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001e48:	0019      	movs	r1, r3
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	f7ff faba 	bl	80013c4 <LL_ADC_SetCommonPathInternalCh>
 8001e50:	e07a      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <HAL_ADC_ConfigChannel+0x374>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d000      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x2ae>
 8001e5c:	e074      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	03db      	lsls	r3, r3, #15
 8001e64:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e66:	d000      	beq.n	8001e6a <HAL_ADC_ConfigChannel+0x2ba>
 8001e68:	e06e      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	03d2      	lsls	r2, r2, #15
 8001e70:	4313      	orrs	r3, r2
 8001e72:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001e74:	0019      	movs	r1, r3
 8001e76:	0010      	movs	r0, r2
 8001e78:	f7ff faa4 	bl	80013c4 <LL_ADC_SetCommonPathInternalCh>
 8001e7c:	e064      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d004      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_ADC_ConfigChannel+0x35c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d107      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	f7ff fb27 	bl	80014f2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da4d      	bge.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7ff fa9c 	bl	80013ec <LL_ADC_GetCommonPathInternalCh>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <HAL_ADC_ConfigChannel+0x364>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <HAL_ADC_ConfigChannel+0x378>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001eca:	0019      	movs	r1, r3
 8001ecc:	0010      	movs	r0, r2
 8001ece:	f7ff fa79 	bl	80013c4 <LL_ADC_SetCommonPathInternalCh>
 8001ed2:	e039      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <HAL_ADC_ConfigChannel+0x370>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d108      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <HAL_ADC_ConfigChannel+0x37c>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	0010      	movs	r0, r2
 8001eea:	f7ff fa6b 	bl	80013c4 <LL_ADC_SetCommonPathInternalCh>
 8001eee:	e02b      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_ADC_ConfigChannel+0x374>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d126      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_ADC_ConfigChannel+0x380>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001f02:	0019      	movs	r1, r3
 8001f04:	0010      	movs	r0, r2
 8001f06:	f7ff fa5d 	bl	80013c4 <LL_ADC_SetCommonPathInternalCh>
 8001f0a:	e01d      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
 8001f0c:	80000004 	.word	0x80000004
 8001f10:	40012708 	.word	0x40012708
 8001f14:	b0001000 	.word	0xb0001000
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	00030d40 	.word	0x00030d40
 8001f20:	b8004000 	.word	0xb8004000
 8001f24:	b4002000 	.word	0xb4002000
 8001f28:	ff7fffff 	.word	0xff7fffff
 8001f2c:	feffffff 	.word	0xfeffffff
 8001f30:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	2220      	movs	r2, #32
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f40:	2317      	movs	r3, #23
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2254      	movs	r2, #84	; 0x54
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f50:	2317      	movs	r3, #23
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	781b      	ldrb	r3, [r3, #0]
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b006      	add	sp, #24
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)

08001f60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff fb27 	bl	80015c4 <LL_ADC_IsEnabled>
 8001f76:	1e03      	subs	r3, r0, #0
 8001f78:	d000      	beq.n	8001f7c <ADC_Enable+0x1c>
 8001f7a:	e069      	b.n	8002050 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4a36      	ldr	r2, [pc, #216]	; (800205c <ADC_Enable+0xfc>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	d00d      	beq.n	8001fa4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2201      	movs	r2, #1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e056      	b.n	8002052 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff faf9 	bl	80015a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <ADC_Enable+0x100>)
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff fa1b 	bl	80013ec <LL_ADC_GetCommonPathInternalCh>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d00f      	beq.n	8001fe0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <ADC_Enable+0x104>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4928      	ldr	r1, [pc, #160]	; (8002068 <ADC_Enable+0x108>)
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7fe f8ae 	bl	8000128 <__udivsi3>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001fd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fd2:	e002      	b.n	8001fda <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f9      	bne.n	8001fd4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7e5b      	ldrb	r3, [r3, #25]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d033      	beq.n	8002050 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001fe8:	f7ff f9a8 	bl	800133c <HAL_GetTick>
 8001fec:	0003      	movs	r3, r0
 8001fee:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ff0:	e027      	b.n	8002042 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff fae4 	bl	80015c4 <LL_ADC_IsEnabled>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d104      	bne.n	800200a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff facb 	bl	80015a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800200a:	f7ff f997 	bl	800133c <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d914      	bls.n	8002042 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	4013      	ands	r3, r2
 8002022:	2b01      	cmp	r3, #1
 8002024:	d00d      	beq.n	8002042 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	2210      	movs	r2, #16
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	2201      	movs	r2, #1
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e007      	b.n	8002052 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2201      	movs	r2, #1
 800204a:	4013      	ands	r3, r2
 800204c:	2b01      	cmp	r3, #1
 800204e:	d1d0      	bne.n	8001ff2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b004      	add	sp, #16
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	80000017 	.word	0x80000017
 8002060:	40012708 	.word	0x40012708
 8002064:	20000000 	.word	0x20000000
 8002068:	00030d40 	.word	0x00030d40

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	0002      	movs	r2, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b7f      	cmp	r3, #127	; 0x7f
 8002080:	d828      	bhi.n	80020d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002082:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <__NVIC_SetPriority+0xd4>)
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b25b      	sxtb	r3, r3
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	33c0      	adds	r3, #192	; 0xc0
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	589b      	ldr	r3, [r3, r2]
 8002092:	1dfa      	adds	r2, r7, #7
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	0011      	movs	r1, r2
 8002098:	2203      	movs	r2, #3
 800209a:	400a      	ands	r2, r1
 800209c:	00d2      	lsls	r2, r2, #3
 800209e:	21ff      	movs	r1, #255	; 0xff
 80020a0:	4091      	lsls	r1, r2
 80020a2:	000a      	movs	r2, r1
 80020a4:	43d2      	mvns	r2, r2
 80020a6:	401a      	ands	r2, r3
 80020a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	019b      	lsls	r3, r3, #6
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	401a      	ands	r2, r3
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	0018      	movs	r0, r3
 80020b8:	2303      	movs	r3, #3
 80020ba:	4003      	ands	r3, r0
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020c0:	481f      	ldr	r0, [pc, #124]	; (8002140 <__NVIC_SetPriority+0xd4>)
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	430a      	orrs	r2, r1
 80020cc:	33c0      	adds	r3, #192	; 0xc0
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020d2:	e031      	b.n	8002138 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d4:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <__NVIC_SetPriority+0xd8>)
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	0019      	movs	r1, r3
 80020dc:	230f      	movs	r3, #15
 80020de:	400b      	ands	r3, r1
 80020e0:	3b08      	subs	r3, #8
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3306      	adds	r3, #6
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	18d3      	adds	r3, r2, r3
 80020ea:	3304      	adds	r3, #4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	1dfa      	adds	r2, r7, #7
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	0011      	movs	r1, r2
 80020f4:	2203      	movs	r2, #3
 80020f6:	400a      	ands	r2, r1
 80020f8:	00d2      	lsls	r2, r2, #3
 80020fa:	21ff      	movs	r1, #255	; 0xff
 80020fc:	4091      	lsls	r1, r2
 80020fe:	000a      	movs	r2, r1
 8002100:	43d2      	mvns	r2, r2
 8002102:	401a      	ands	r2, r3
 8002104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	22ff      	movs	r2, #255	; 0xff
 800210c:	401a      	ands	r2, r3
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	0018      	movs	r0, r3
 8002114:	2303      	movs	r3, #3
 8002116:	4003      	ands	r3, r0
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <__NVIC_SetPriority+0xd8>)
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	001c      	movs	r4, r3
 8002124:	230f      	movs	r3, #15
 8002126:	4023      	ands	r3, r4
 8002128:	3b08      	subs	r3, #8
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	430a      	orrs	r2, r1
 800212e:	3306      	adds	r3, #6
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	18c3      	adds	r3, r0, r3
 8002134:	3304      	adds	r3, #4
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b003      	add	sp, #12
 800213e:	bd90      	pop	{r4, r7, pc}
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	1e5a      	subs	r2, r3, #1
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	045b      	lsls	r3, r3, #17
 8002158:	429a      	cmp	r2, r3
 800215a:	d301      	bcc.n	8002160 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215c:	2301      	movs	r3, #1
 800215e:	e010      	b.n	8002182 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <SysTick_Config+0x44>)
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	3a01      	subs	r2, #1
 8002166:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002168:	2301      	movs	r3, #1
 800216a:	425b      	negs	r3, r3
 800216c:	2103      	movs	r1, #3
 800216e:	0018      	movs	r0, r3
 8002170:	f7ff ff7c 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x44>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x44>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	210f      	movs	r1, #15
 800219c:	187b      	adds	r3, r7, r1
 800219e:	1c02      	adds	r2, r0, #0
 80021a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	0011      	movs	r1, r2
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b004      	add	sp, #16
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7ff ffbf 	bl	8002148 <SysTick_Config>
 80021ca:	0003      	movs	r3, r0
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e2:	e147      	b.n	8002474 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2101      	movs	r1, #1
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4091      	lsls	r1, r2
 80021ee:	000a      	movs	r2, r1
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d100      	bne.n	80021fc <HAL_GPIO_Init+0x28>
 80021fa:	e138      	b.n	800246e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2203      	movs	r2, #3
 8002202:	4013      	ands	r3, r2
 8002204:	2b01      	cmp	r3, #1
 8002206:	d005      	beq.n	8002214 <HAL_GPIO_Init+0x40>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2203      	movs	r2, #3
 800220e:	4013      	ands	r3, r2
 8002210:	2b02      	cmp	r3, #2
 8002212:	d130      	bne.n	8002276 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	409a      	lsls	r2, r3
 8002222:	0013      	movs	r3, r2
 8002224:	43da      	mvns	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	409a      	lsls	r2, r3
 8002236:	0013      	movs	r3, r2
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800224a:	2201      	movs	r2, #1
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
 8002250:	0013      	movs	r3, r2
 8002252:	43da      	mvns	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	2201      	movs	r2, #1
 8002262:	401a      	ands	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	409a      	lsls	r2, r3
 8002268:	0013      	movs	r3, r2
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2203      	movs	r2, #3
 800227c:	4013      	ands	r3, r2
 800227e:	2b03      	cmp	r3, #3
 8002280:	d017      	beq.n	80022b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	409a      	lsls	r2, r3
 80022a4:	0013      	movs	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2203      	movs	r2, #3
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d123      	bne.n	8002306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	58d3      	ldr	r3, [r2, r3]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2207      	movs	r2, #7
 80022d0:	4013      	ands	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	409a      	lsls	r2, r3
 80022d8:	0013      	movs	r3, r2
 80022da:	43da      	mvns	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2107      	movs	r1, #7
 80022ea:	400b      	ands	r3, r1
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	409a      	lsls	r2, r3
 80022f0:	0013      	movs	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	6939      	ldr	r1, [r7, #16]
 8002304:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	409a      	lsls	r2, r3
 8002314:	0013      	movs	r3, r2
 8002316:	43da      	mvns	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2203      	movs	r2, #3
 8002324:	401a      	ands	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	409a      	lsls	r2, r3
 800232c:	0013      	movs	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	23c0      	movs	r3, #192	; 0xc0
 8002340:	029b      	lsls	r3, r3, #10
 8002342:	4013      	ands	r3, r2
 8002344:	d100      	bne.n	8002348 <HAL_GPIO_Init+0x174>
 8002346:	e092      	b.n	800246e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002348:	4a50      	ldr	r2, [pc, #320]	; (800248c <HAL_GPIO_Init+0x2b8>)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3318      	adds	r3, #24
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	589b      	ldr	r3, [r3, r2]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2203      	movs	r2, #3
 800235a:	4013      	ands	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	220f      	movs	r2, #15
 8002360:	409a      	lsls	r2, r3
 8002362:	0013      	movs	r3, r2
 8002364:	43da      	mvns	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	23a0      	movs	r3, #160	; 0xa0
 8002370:	05db      	lsls	r3, r3, #23
 8002372:	429a      	cmp	r2, r3
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0x1ca>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a45      	ldr	r2, [pc, #276]	; (8002490 <HAL_GPIO_Init+0x2bc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00d      	beq.n	800239a <HAL_GPIO_Init+0x1c6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a44      	ldr	r2, [pc, #272]	; (8002494 <HAL_GPIO_Init+0x2c0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <HAL_GPIO_Init+0x1c2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a43      	ldr	r2, [pc, #268]	; (8002498 <HAL_GPIO_Init+0x2c4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_GPIO_Init+0x1be>
 800238e:	2303      	movs	r3, #3
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x1cc>
 8002392:	2305      	movs	r3, #5
 8002394:	e004      	b.n	80023a0 <HAL_GPIO_Init+0x1cc>
 8002396:	2302      	movs	r3, #2
 8002398:	e002      	b.n	80023a0 <HAL_GPIO_Init+0x1cc>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x1cc>
 800239e:	2300      	movs	r3, #0
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	2103      	movs	r1, #3
 80023a4:	400a      	ands	r2, r1
 80023a6:	00d2      	lsls	r2, r2, #3
 80023a8:	4093      	lsls	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80023b0:	4936      	ldr	r1, [pc, #216]	; (800248c <HAL_GPIO_Init+0x2b8>)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	3318      	adds	r3, #24
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023be:	4b33      	ldr	r3, [pc, #204]	; (800248c <HAL_GPIO_Init+0x2b8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43da      	mvns	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	035b      	lsls	r3, r3, #13
 80023d6:	4013      	ands	r3, r2
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023e2:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_GPIO_Init+0x2b8>)
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <HAL_GPIO_Init+0x2b8>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43da      	mvns	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	039b      	lsls	r3, r3, #14
 8002400:	4013      	ands	r3, r2
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_GPIO_Init+0x2b8>)
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002412:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_GPIO_Init+0x2b8>)
 8002414:	2384      	movs	r3, #132	; 0x84
 8002416:	58d3      	ldr	r3, [r2, r3]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	43da      	mvns	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	029b      	lsls	r3, r3, #10
 800242c:	4013      	ands	r3, r2
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002438:	4914      	ldr	r1, [pc, #80]	; (800248c <HAL_GPIO_Init+0x2b8>)
 800243a:	2284      	movs	r2, #132	; 0x84
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002440:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_GPIO_Init+0x2b8>)
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	58d3      	ldr	r3, [r2, r3]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43da      	mvns	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	025b      	lsls	r3, r3, #9
 800245a:	4013      	ands	r3, r2
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002466:	4909      	ldr	r1, [pc, #36]	; (800248c <HAL_GPIO_Init+0x2b8>)
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	3301      	adds	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	40da      	lsrs	r2, r3
 800247c:	1e13      	subs	r3, r2, #0
 800247e:	d000      	beq.n	8002482 <HAL_GPIO_Init+0x2ae>
 8002480:	e6b0      	b.n	80021e4 <HAL_GPIO_Init+0x10>
  }
}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b006      	add	sp, #24
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021800 	.word	0x40021800
 8002490:	50000400 	.word	0x50000400
 8002494:	50000800 	.word	0x50000800
 8002498:	50000c00 	.word	0x50000c00

0800249c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	000a      	movs	r2, r1
 80024a6:	1cbb      	adds	r3, r7, #2
 80024a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	1cba      	adds	r2, r7, #2
 80024b0:	8812      	ldrh	r2, [r2, #0]
 80024b2:	4013      	ands	r3, r2
 80024b4:	d004      	beq.n	80024c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80024b6:	230f      	movs	r3, #15
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e003      	b.n	80024c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024c0:	230f      	movs	r3, #15
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80024c8:	230f      	movs	r3, #15
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b004      	add	sp, #16
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	0008      	movs	r0, r1
 80024e0:	0011      	movs	r1, r2
 80024e2:	1cbb      	adds	r3, r7, #2
 80024e4:	1c02      	adds	r2, r0, #0
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	1c7b      	adds	r3, r7, #1
 80024ea:	1c0a      	adds	r2, r1, #0
 80024ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ee:	1c7b      	adds	r3, r7, #1
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f6:	1cbb      	adds	r3, r7, #2
 80024f8:	881a      	ldrh	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024fe:	e003      	b.n	8002508 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002500:	1cbb      	adds	r3, r7, #2
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e08f      	b.n	8002642 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2241      	movs	r2, #65	; 0x41
 8002526:	5c9b      	ldrb	r3, [r3, r2]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2240      	movs	r2, #64	; 0x40
 8002532:	2100      	movs	r1, #0
 8002534:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f7fe fcc3 	bl	8000ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2241      	movs	r2, #65	; 0x41
 8002542:	2124      	movs	r1, #36	; 0x24
 8002544:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2101      	movs	r1, #1
 8002552:	438a      	bics	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	493b      	ldr	r1, [pc, #236]	; (800264c <HAL_I2C_Init+0x13c>)
 8002560:	400a      	ands	r2, r1
 8002562:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4938      	ldr	r1, [pc, #224]	; (8002650 <HAL_I2C_Init+0x140>)
 8002570:	400a      	ands	r2, r1
 8002572:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	0209      	lsls	r1, r1, #8
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	e007      	b.n	800259e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2184      	movs	r1, #132	; 0x84
 8002598:	0209      	lsls	r1, r1, #8
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d109      	bne.n	80025ba <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0109      	lsls	r1, r1, #4
 80025b4:	430a      	orrs	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	e007      	b.n	80025ca <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4923      	ldr	r1, [pc, #140]	; (8002654 <HAL_I2C_Init+0x144>)
 80025c6:	400a      	ands	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4920      	ldr	r1, [pc, #128]	; (8002658 <HAL_I2C_Init+0x148>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	491a      	ldr	r1, [pc, #104]	; (8002650 <HAL_I2C_Init+0x140>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69d9      	ldr	r1, [r3, #28]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1a      	ldr	r2, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2101      	movs	r1, #1
 8002620:	430a      	orrs	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2241      	movs	r2, #65	; 0x41
 800262e:	2120      	movs	r1, #32
 8002630:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2242      	movs	r2, #66	; 0x42
 800263c:	2100      	movs	r1, #0
 800263e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	b002      	add	sp, #8
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	f0ffffff 	.word	0xf0ffffff
 8002650:	ffff7fff 	.word	0xffff7fff
 8002654:	fffff7ff 	.word	0xfffff7ff
 8002658:	02008000 	.word	0x02008000

0800265c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	0008      	movs	r0, r1
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	0019      	movs	r1, r3
 800266a:	230a      	movs	r3, #10
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	1c02      	adds	r2, r0, #0
 8002670:	801a      	strh	r2, [r3, #0]
 8002672:	2308      	movs	r3, #8
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	1c0a      	adds	r2, r1, #0
 8002678:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2241      	movs	r2, #65	; 0x41
 800267e:	5c9b      	ldrb	r3, [r3, r2]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b20      	cmp	r3, #32
 8002684:	d000      	beq.n	8002688 <HAL_I2C_Master_Transmit+0x2c>
 8002686:	e10a      	b.n	800289e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2240      	movs	r2, #64	; 0x40
 800268c:	5c9b      	ldrb	r3, [r3, r2]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_I2C_Master_Transmit+0x3a>
 8002692:	2302      	movs	r3, #2
 8002694:	e104      	b.n	80028a0 <HAL_I2C_Master_Transmit+0x244>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800269e:	f7fe fe4d 	bl	800133c <HAL_GetTick>
 80026a2:	0003      	movs	r3, r0
 80026a4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	0219      	lsls	r1, r3, #8
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2319      	movs	r3, #25
 80026b2:	2201      	movs	r2, #1
 80026b4:	f000 fa1a 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80026b8:	1e03      	subs	r3, r0, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0ef      	b.n	80028a0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2241      	movs	r2, #65	; 0x41
 80026c4:	2121      	movs	r1, #33	; 0x21
 80026c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2242      	movs	r2, #66	; 0x42
 80026cc:	2110      	movs	r1, #16
 80026ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2208      	movs	r2, #8
 80026e0:	18ba      	adds	r2, r7, r2
 80026e2:	8812      	ldrh	r2, [r2, #0]
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2bff      	cmp	r3, #255	; 0xff
 80026f4:	d906      	bls.n	8002704 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	22ff      	movs	r2, #255	; 0xff
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	045b      	lsls	r3, r3, #17
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e007      	b.n	8002714 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	049b      	lsls	r3, r3, #18
 8002712:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d027      	beq.n	800276c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	b2db      	uxtb	r3, r3
 8002752:	3301      	adds	r3, #1
 8002754:	b2da      	uxtb	r2, r3
 8002756:	697c      	ldr	r4, [r7, #20]
 8002758:	230a      	movs	r3, #10
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	8819      	ldrh	r1, [r3, #0]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	4b51      	ldr	r3, [pc, #324]	; (80028a8 <HAL_I2C_Master_Transmit+0x24c>)
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	0023      	movs	r3, r4
 8002766:	f000 fba3 	bl	8002eb0 <I2C_TransferConfig>
 800276a:	e06f      	b.n	800284c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	b2da      	uxtb	r2, r3
 8002772:	697c      	ldr	r4, [r7, #20]
 8002774:	230a      	movs	r3, #10
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	8819      	ldrh	r1, [r3, #0]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <HAL_I2C_Master_Transmit+0x24c>)
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	0023      	movs	r3, r4
 8002782:	f000 fb95 	bl	8002eb0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002786:	e061      	b.n	800284c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fa04 	bl	8002b9c <I2C_WaitOnTXISFlagUntilTimeout>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e081      	b.n	80028a0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d03a      	beq.n	800284c <HAL_I2C_Master_Transmit+0x1f0>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d136      	bne.n	800284c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	0013      	movs	r3, r2
 80027e8:	2200      	movs	r2, #0
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	f000 f97e 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e053      	b.n	80028a0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2bff      	cmp	r3, #255	; 0xff
 8002800:	d911      	bls.n	8002826 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	22ff      	movs	r2, #255	; 0xff
 8002806:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	b2da      	uxtb	r2, r3
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	045c      	lsls	r4, r3, #17
 8002812:	230a      	movs	r3, #10
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	8819      	ldrh	r1, [r3, #0]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	2300      	movs	r3, #0
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	0023      	movs	r3, r4
 8002820:	f000 fb46 	bl	8002eb0 <I2C_TransferConfig>
 8002824:	e012      	b.n	800284c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	b2da      	uxtb	r2, r3
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	049c      	lsls	r4, r3, #18
 800283a:	230a      	movs	r3, #10
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	8819      	ldrh	r1, [r3, #0]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	0023      	movs	r3, r4
 8002848:	f000 fb32 	bl	8002eb0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d198      	bne.n	8002788 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 f9e3 	bl	8002c28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002862:	1e03      	subs	r3, r0, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e01a      	b.n	80028a0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2220      	movs	r2, #32
 8002870:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	490b      	ldr	r1, [pc, #44]	; (80028ac <HAL_I2C_Master_Transmit+0x250>)
 800287e:	400a      	ands	r2, r1
 8002880:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2241      	movs	r2, #65	; 0x41
 8002886:	2120      	movs	r1, #32
 8002888:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2242      	movs	r2, #66	; 0x42
 800288e:	2100      	movs	r1, #0
 8002890:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	2100      	movs	r1, #0
 8002898:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	e000      	b.n	80028a0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b007      	add	sp, #28
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	80002000 	.word	0x80002000
 80028ac:	fe00e800 	.word	0xfe00e800

080028b0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af02      	add	r7, sp, #8
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	230a      	movs	r3, #10
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	1c0a      	adds	r2, r1, #0
 80028c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2241      	movs	r2, #65	; 0x41
 80028cc:	5c9b      	ldrb	r3, [r3, r2]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d000      	beq.n	80028d6 <HAL_I2C_IsDeviceReady+0x26>
 80028d4:	e0df      	b.n	8002a96 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	401a      	ands	r2, r3
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d101      	bne.n	80028ee <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	e0d4      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	5c9b      	ldrb	r3, [r3, r2]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_I2C_IsDeviceReady+0x4c>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0cd      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x1e8>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	2101      	movs	r1, #1
 8002902:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2241      	movs	r2, #65	; 0x41
 8002908:	2124      	movs	r1, #36	; 0x24
 800290a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_I2C_IsDeviceReady+0x7a>
 800291a:	230a      	movs	r3, #10
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	059b      	lsls	r3, r3, #22
 8002922:	0d9b      	lsrs	r3, r3, #22
 8002924:	4a5e      	ldr	r2, [pc, #376]	; (8002aa0 <HAL_I2C_IsDeviceReady+0x1f0>)
 8002926:	431a      	orrs	r2, r3
 8002928:	e006      	b.n	8002938 <HAL_I2C_IsDeviceReady+0x88>
 800292a:	230a      	movs	r3, #10
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	059b      	lsls	r3, r3, #22
 8002932:	0d9b      	lsrs	r3, r3, #22
 8002934:	4a5b      	ldr	r2, [pc, #364]	; (8002aa4 <HAL_I2C_IsDeviceReady+0x1f4>)
 8002936:	431a      	orrs	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800293e:	f7fe fcfd 	bl	800133c <HAL_GetTick>
 8002942:	0003      	movs	r3, r0
 8002944:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2220      	movs	r2, #32
 800294e:	4013      	ands	r3, r2
 8002950:	3b20      	subs	r3, #32
 8002952:	425a      	negs	r2, r3
 8002954:	4153      	adcs	r3, r2
 8002956:	b2da      	uxtb	r2, r3
 8002958:	231f      	movs	r3, #31
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2210      	movs	r2, #16
 8002966:	4013      	ands	r3, r2
 8002968:	3b10      	subs	r3, #16
 800296a:	425a      	negs	r2, r3
 800296c:	4153      	adcs	r3, r2
 800296e:	b2da      	uxtb	r2, r3
 8002970:	231e      	movs	r3, #30
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002976:	e035      	b.n	80029e4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	d01a      	beq.n	80029b4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7fe fcdd 	bl	800133c <HAL_GetTick>
 8002982:	0002      	movs	r2, r0
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <HAL_I2C_IsDeviceReady+0xe4>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10f      	bne.n	80029b4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2241      	movs	r2, #65	; 0x41
 8002998:	2120      	movs	r1, #32
 800299a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	2220      	movs	r2, #32
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2240      	movs	r2, #64	; 0x40
 80029ac:	2100      	movs	r1, #0
 80029ae:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e071      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2220      	movs	r2, #32
 80029bc:	4013      	ands	r3, r2
 80029be:	3b20      	subs	r3, #32
 80029c0:	425a      	negs	r2, r3
 80029c2:	4153      	adcs	r3, r2
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	231f      	movs	r3, #31
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2210      	movs	r2, #16
 80029d4:	4013      	ands	r3, r2
 80029d6:	3b10      	subs	r3, #16
 80029d8:	425a      	negs	r2, r3
 80029da:	4153      	adcs	r3, r2
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	231e      	movs	r3, #30
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029e4:	231f      	movs	r3, #31
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d104      	bne.n	80029f8 <HAL_I2C_IsDeviceReady+0x148>
 80029ee:	231e      	movs	r3, #30
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0bf      	beq.n	8002978 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2210      	movs	r2, #16
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d01a      	beq.n	8002a3c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	0013      	movs	r3, r2
 8002a10:	2200      	movs	r2, #0
 8002a12:	2120      	movs	r1, #32
 8002a14:	f000 f86a 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e03b      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2220      	movs	r2, #32
 8002a26:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2241      	movs	r2, #65	; 0x41
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2240      	movs	r2, #64	; 0x40
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e02d      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	0013      	movs	r3, r2
 8002a46:	2200      	movs	r2, #0
 8002a48:	2120      	movs	r1, #32
 8002a4a:	f000 f84f 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	1e03      	subs	r3, r0, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e020      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2220      	movs	r2, #32
 8002a64:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d900      	bls.n	8002a76 <HAL_I2C_IsDeviceReady+0x1c6>
 8002a74:	e74d      	b.n	8002912 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2241      	movs	r2, #65	; 0x41
 8002a7a:	2120      	movs	r1, #32
 8002a7c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	2220      	movs	r2, #32
 8002a84:	431a      	orrs	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2240      	movs	r2, #64	; 0x40
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b008      	add	sp, #32
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	02002000 	.word	0x02002000
 8002aa4:	02002800 	.word	0x02002800

08002aa8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d103      	bne.n	8002ac6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2201      	movs	r2, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d007      	beq.n	8002ae4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2101      	movs	r1, #1
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	619a      	str	r2, [r3, #24]
  }
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e03a      	b.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 f8d3 	bl	8002cb0 <I2C_IsErrorOccurred>
 8002b0a:	1e03      	subs	r3, r0, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e040      	b.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	d02d      	beq.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b18:	f7fe fc10 	bl	800133c <HAL_GetTick>
 8002b1c:	0002      	movs	r2, r0
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d302      	bcc.n	8002b2e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d122      	bne.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4013      	ands	r3, r2
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	425a      	negs	r2, r3
 8002b3e:	4153      	adcs	r3, r2
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	001a      	movs	r2, r3
 8002b44:	1dfb      	adds	r3, r7, #7
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d113      	bne.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	2220      	movs	r2, #32
 8002b52:	431a      	orrs	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2241      	movs	r2, #65	; 0x41
 8002b5c:	2120      	movs	r1, #32
 8002b5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2242      	movs	r2, #66	; 0x42
 8002b64:	2100      	movs	r1, #0
 8002b66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2240      	movs	r2, #64	; 0x40
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e00f      	b.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	425a      	negs	r2, r3
 8002b84:	4153      	adcs	r3, r2
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	001a      	movs	r2, r3
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d0b5      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b004      	add	sp, #16
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ba8:	e032      	b.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 f87d 	bl	8002cb0 <I2C_IsErrorOccurred>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e030      	b.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	d025      	beq.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc4:	f7fe fbba 	bl	800133c <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d302      	bcc.n	8002bda <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11a      	bne.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2202      	movs	r2, #2
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d013      	beq.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	2220      	movs	r2, #32
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2241      	movs	r2, #65	; 0x41
 8002bf8:	2120      	movs	r1, #32
 8002bfa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2242      	movs	r2, #66	; 0x42
 8002c00:	2100      	movs	r1, #0
 8002c02:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	2100      	movs	r1, #0
 8002c0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e007      	b.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2202      	movs	r2, #2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d1c5      	bne.n	8002baa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c34:	e02f      	b.n	8002c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 f837 	bl	8002cb0 <I2C_IsErrorOccurred>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e02d      	b.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fe fb77 	bl	800133c <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11a      	bne.n	8002c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2220      	movs	r2, #32
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d013      	beq.n	8002c96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	2220      	movs	r2, #32
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2241      	movs	r2, #65	; 0x41
 8002c7e:	2120      	movs	r1, #32
 8002c80:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2242      	movs	r2, #66	; 0x42
 8002c86:	2100      	movs	r1, #0
 8002c88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2240      	movs	r2, #64	; 0x40
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e007      	b.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d1c8      	bne.n	8002c36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b08b      	sub	sp, #44	; 0x2c
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2327      	movs	r3, #39	; 0x27
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d100      	bne.n	8002cde <I2C_IsErrorOccurred+0x2e>
 8002cdc:	e082      	b.n	8002de4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ce6:	e060      	b.n	8002daa <I2C_IsErrorOccurred+0xfa>
 8002ce8:	2427      	movs	r4, #39	; 0x27
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	193a      	adds	r2, r7, r4
 8002cee:	7812      	ldrb	r2, [r2, #0]
 8002cf0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	d058      	beq.n	8002daa <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cf8:	f7fe fb20 	bl	800133c <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d306      	bcc.n	8002d16 <I2C_IsErrorOccurred+0x66>
 8002d08:	193b      	adds	r3, r7, r4
 8002d0a:	193a      	adds	r2, r7, r4
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d149      	bne.n	8002daa <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	01db      	lsls	r3, r3, #7
 8002d20:	4013      	ands	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d24:	2013      	movs	r0, #19
 8002d26:	183b      	adds	r3, r7, r0
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	2142      	movs	r1, #66	; 0x42
 8002d2c:	5c52      	ldrb	r2, [r2, r1]
 8002d2e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d126      	bne.n	8002d92 <I2C_IsErrorOccurred+0xe2>
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	01db      	lsls	r3, r3, #7
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d021      	beq.n	8002d92 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d01d      	beq.n	8002d92 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	01c9      	lsls	r1, r1, #7
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d68:	f7fe fae8 	bl	800133c <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d70:	e00f      	b.n	8002d92 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d72:	f7fe fae3 	bl	800133c <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b19      	cmp	r3, #25
 8002d7e:	d908      	bls.n	8002d92 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2220      	movs	r2, #32
 8002d84:	4313      	orrs	r3, r2
 8002d86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d88:	2327      	movs	r3, #39	; 0x27
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]

              break;
 8002d90:	e00b      	b.n	8002daa <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2127      	movs	r1, #39	; 0x27
 8002d9e:	187a      	adds	r2, r7, r1
 8002da0:	1879      	adds	r1, r7, r1
 8002da2:	7809      	ldrb	r1, [r1, #0]
 8002da4:	7011      	strb	r1, [r2, #0]
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d1e3      	bne.n	8002d72 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	2220      	movs	r2, #32
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d004      	beq.n	8002dc2 <I2C_IsErrorOccurred+0x112>
 8002db8:	2327      	movs	r3, #39	; 0x27
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d092      	beq.n	8002ce8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dc2:	2327      	movs	r3, #39	; 0x27
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ddc:	2327      	movs	r3, #39	; 0x27
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4013      	ands	r3, r2
 8002df4:	d00c      	beq.n	8002e10 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	0052      	lsls	r2, r2, #1
 8002e06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e08:	2327      	movs	r3, #39	; 0x27
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4013      	ands	r3, r2
 8002e18:	d00c      	beq.n	8002e34 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	00d2      	lsls	r2, r2, #3
 8002e2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e2c:	2327      	movs	r3, #39	; 0x27
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d00c      	beq.n	8002e58 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	2202      	movs	r2, #2
 8002e42:	4313      	orrs	r3, r2
 8002e44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	0092      	lsls	r2, r2, #2
 8002e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e50:	2327      	movs	r3, #39	; 0x27
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002e58:	2327      	movs	r3, #39	; 0x27
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01d      	beq.n	8002e9e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7ff fe1f 	bl	8002aa8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	490d      	ldr	r1, [pc, #52]	; (8002eac <I2C_IsErrorOccurred+0x1fc>)
 8002e76:	400a      	ands	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2241      	movs	r2, #65	; 0x41
 8002e8a:	2120      	movs	r1, #32
 8002e8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2242      	movs	r2, #66	; 0x42
 8002e92:	2100      	movs	r1, #0
 8002e94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2240      	movs	r2, #64	; 0x40
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002e9e:	2327      	movs	r3, #39	; 0x27
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	781b      	ldrb	r3, [r3, #0]
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b00b      	add	sp, #44	; 0x2c
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	fe00e800 	.word	0xfe00e800

08002eb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	0008      	movs	r0, r1
 8002eba:	0011      	movs	r1, r2
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	240a      	movs	r4, #10
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	1c02      	adds	r2, r0, #0
 8002ec4:	801a      	strh	r2, [r3, #0]
 8002ec6:	2009      	movs	r0, #9
 8002ec8:	183b      	adds	r3, r7, r0
 8002eca:	1c0a      	adds	r2, r1, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	059b      	lsls	r3, r3, #22
 8002ed4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ed6:	183b      	adds	r3, r7, r0
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	0419      	lsls	r1, r3, #16
 8002edc:	23ff      	movs	r3, #255	; 0xff
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ee2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	4313      	orrs	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efa:	0d51      	lsrs	r1, r2, #21
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	00d2      	lsls	r2, r2, #3
 8002f00:	400a      	ands	r2, r1
 8002f02:	4907      	ldr	r1, [pc, #28]	; (8002f20 <I2C_TransferConfig+0x70>)
 8002f04:	430a      	orrs	r2, r1
 8002f06:	43d2      	mvns	r2, r2
 8002f08:	401a      	ands	r2, r3
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b007      	add	sp, #28
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	03ff63ff 	.word	0x03ff63ff

08002f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2241      	movs	r2, #65	; 0x41
 8002f32:	5c9b      	ldrb	r3, [r3, r2]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d138      	bne.n	8002fac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	5c9b      	ldrb	r3, [r3, r2]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e032      	b.n	8002fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2241      	movs	r2, #65	; 0x41
 8002f54:	2124      	movs	r1, #36	; 0x24
 8002f56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2101      	movs	r1, #1
 8002f64:	438a      	bics	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4911      	ldr	r1, [pc, #68]	; (8002fb8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f74:	400a      	ands	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2101      	movs	r1, #1
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2241      	movs	r2, #65	; 0x41
 8002f9c:	2120      	movs	r1, #32
 8002f9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2240      	movs	r2, #64	; 0x40
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	ffffefff 	.word	0xffffefff

08002fbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2241      	movs	r2, #65	; 0x41
 8002fca:	5c9b      	ldrb	r3, [r3, r2]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d139      	bne.n	8003046 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e033      	b.n	8003048 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2241      	movs	r2, #65	; 0x41
 8002fec:	2124      	movs	r1, #36	; 0x24
 8002fee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a11      	ldr	r2, [pc, #68]	; (8003050 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800300c:	4013      	ands	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	021b      	lsls	r3, r3, #8
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2241      	movs	r2, #65	; 0x41
 8003036:	2120      	movs	r1, #32
 8003038:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2240      	movs	r2, #64	; 0x40
 800303e:	2100      	movs	r1, #0
 8003040:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
  }
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b004      	add	sp, #16
 800304e:	bd80      	pop	{r7, pc}
 8003050:	fffff0ff 	.word	0xfffff0ff

08003054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003062:	4013      	ands	r3, r2
 8003064:	0019      	movs	r1, r3
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	429a      	cmp	r2, r3
 8003076:	d11f      	bne.n	80030b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003078:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	0013      	movs	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	189b      	adds	r3, r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4912      	ldr	r1, [pc, #72]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003086:	0018      	movs	r0, r3
 8003088:	f7fd f84e 	bl	8000128 <__udivsi3>
 800308c:	0003      	movs	r3, r0
 800308e:	3301      	adds	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003092:	e008      	b.n	80030a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3b01      	subs	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e001      	b.n	80030a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e009      	b.n	80030ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	401a      	ands	r2, r3
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d0ed      	beq.n	8003094 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b004      	add	sp, #16
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	40007000 	.word	0x40007000
 80030c8:	fffff9ff 	.word	0xfffff9ff
 80030cc:	20000000 	.word	0x20000000
 80030d0:	000f4240 	.word	0x000f4240

080030d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	23e0      	movs	r3, #224	; 0xe0
 80030de:	01db      	lsls	r3, r3, #7
 80030e0:	4013      	ands	r3, r2
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000

080030ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e2fe      	b.n	80036fc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	4013      	ands	r3, r2
 8003106:	d100      	bne.n	800310a <HAL_RCC_OscConfig+0x1e>
 8003108:	e07c      	b.n	8003204 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800310a:	4bc3      	ldr	r3, [pc, #780]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2238      	movs	r2, #56	; 0x38
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003114:	4bc0      	ldr	r3, [pc, #768]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2203      	movs	r2, #3
 800311a:	4013      	ands	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b10      	cmp	r3, #16
 8003122:	d102      	bne.n	800312a <HAL_RCC_OscConfig+0x3e>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d002      	beq.n	8003130 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d10b      	bne.n	8003148 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	4bb9      	ldr	r3, [pc, #740]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2380      	movs	r3, #128	; 0x80
 8003136:	029b      	lsls	r3, r3, #10
 8003138:	4013      	ands	r3, r2
 800313a:	d062      	beq.n	8003202 <HAL_RCC_OscConfig+0x116>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d15e      	bne.n	8003202 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e2d9      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	025b      	lsls	r3, r3, #9
 8003150:	429a      	cmp	r2, r3
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x78>
 8003154:	4bb0      	ldr	r3, [pc, #704]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4baf      	ldr	r3, [pc, #700]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	0249      	lsls	r1, r1, #9
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e020      	b.n	80031a6 <HAL_RCC_OscConfig+0xba>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	23a0      	movs	r3, #160	; 0xa0
 800316a:	02db      	lsls	r3, r3, #11
 800316c:	429a      	cmp	r2, r3
 800316e:	d10e      	bne.n	800318e <HAL_RCC_OscConfig+0xa2>
 8003170:	4ba9      	ldr	r3, [pc, #676]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4ba8      	ldr	r3, [pc, #672]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	02c9      	lsls	r1, r1, #11
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	4ba6      	ldr	r3, [pc, #664]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4ba5      	ldr	r3, [pc, #660]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	0249      	lsls	r1, r1, #9
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e00b      	b.n	80031a6 <HAL_RCC_OscConfig+0xba>
 800318e:	4ba2      	ldr	r3, [pc, #648]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4ba1      	ldr	r3, [pc, #644]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003194:	49a1      	ldr	r1, [pc, #644]	; (800341c <HAL_RCC_OscConfig+0x330>)
 8003196:	400a      	ands	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	4b9f      	ldr	r3, [pc, #636]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b9e      	ldr	r3, [pc, #632]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80031a0:	499f      	ldr	r1, [pc, #636]	; (8003420 <HAL_RCC_OscConfig+0x334>)
 80031a2:	400a      	ands	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d014      	beq.n	80031d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe f8c5 	bl	800133c <HAL_GetTick>
 80031b2:	0003      	movs	r3, r0
 80031b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe f8c0 	bl	800133c <HAL_GetTick>
 80031bc:	0002      	movs	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e298      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ca:	4b93      	ldr	r3, [pc, #588]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	029b      	lsls	r3, r3, #10
 80031d2:	4013      	ands	r3, r2
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0xcc>
 80031d6:	e015      	b.n	8003204 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe f8b0 	bl	800133c <HAL_GetTick>
 80031dc:	0003      	movs	r3, r0
 80031de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e2:	f7fe f8ab 	bl	800133c <HAL_GetTick>
 80031e6:	0002      	movs	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b64      	cmp	r3, #100	; 0x64
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e283      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f4:	4b88      	ldr	r3, [pc, #544]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	029b      	lsls	r3, r3, #10
 80031fc:	4013      	ands	r3, r2
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0xf6>
 8003200:	e000      	b.n	8003204 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2202      	movs	r2, #2
 800320a:	4013      	ands	r3, r2
 800320c:	d100      	bne.n	8003210 <HAL_RCC_OscConfig+0x124>
 800320e:	e099      	b.n	8003344 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003210:	4b81      	ldr	r3, [pc, #516]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2238      	movs	r2, #56	; 0x38
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800321a:	4b7f      	ldr	r3, [pc, #508]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2203      	movs	r2, #3
 8003220:	4013      	ands	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b10      	cmp	r3, #16
 8003228:	d102      	bne.n	8003230 <HAL_RCC_OscConfig+0x144>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d002      	beq.n	8003236 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d135      	bne.n	80032a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003236:	4b78      	ldr	r3, [pc, #480]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4013      	ands	r3, r2
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x162>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e256      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b72      	ldr	r3, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4a74      	ldr	r2, [pc, #464]	; (8003424 <HAL_RCC_OscConfig+0x338>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	021a      	lsls	r2, r3, #8
 800325e:	4b6e      	ldr	r3, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d112      	bne.n	8003290 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800326a:	4b6b      	ldr	r3, [pc, #428]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6e      	ldr	r2, [pc, #440]	; (8003428 <HAL_RCC_OscConfig+0x33c>)
 8003270:	4013      	ands	r3, r2
 8003272:	0019      	movs	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	4b67      	ldr	r3, [pc, #412]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800327a:	430a      	orrs	r2, r1
 800327c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800327e:	4b66      	ldr	r3, [pc, #408]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0adb      	lsrs	r3, r3, #11
 8003284:	2207      	movs	r2, #7
 8003286:	4013      	ands	r3, r2
 8003288:	4a68      	ldr	r2, [pc, #416]	; (800342c <HAL_RCC_OscConfig+0x340>)
 800328a:	40da      	lsrs	r2, r3
 800328c:	4b68      	ldr	r3, [pc, #416]	; (8003430 <HAL_RCC_OscConfig+0x344>)
 800328e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003290:	4b68      	ldr	r3, [pc, #416]	; (8003434 <HAL_RCC_OscConfig+0x348>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0018      	movs	r0, r3
 8003296:	f7fd fff5 	bl	8001284 <HAL_InitTick>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d051      	beq.n	8003342 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e22c      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d030      	beq.n	800330c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032aa:	4b5b      	ldr	r3, [pc, #364]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a5e      	ldr	r2, [pc, #376]	; (8003428 <HAL_RCC_OscConfig+0x33c>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	4b57      	ldr	r3, [pc, #348]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b55      	ldr	r3, [pc, #340]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80032c4:	2180      	movs	r1, #128	; 0x80
 80032c6:	0049      	lsls	r1, r1, #1
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe f836 	bl	800133c <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7fe f831 	bl	800133c <HAL_GetTick>
 80032da:	0002      	movs	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e209      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e8:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4013      	ands	r3, r2
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b48      	ldr	r3, [pc, #288]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_RCC_OscConfig+0x338>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	021a      	lsls	r2, r3, #8
 8003304:	4b44      	ldr	r3, [pc, #272]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	e01b      	b.n	8003344 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800330c:	4b42      	ldr	r3, [pc, #264]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003312:	4949      	ldr	r1, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0x34c>)
 8003314:	400a      	ands	r2, r1
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe f810 	bl	800133c <HAL_GetTick>
 800331c:	0003      	movs	r3, r0
 800331e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003322:	f7fe f80b 	bl	800133c <HAL_GetTick>
 8003326:	0002      	movs	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e1e3      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003334:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4013      	ands	r3, r2
 800333e:	d1f0      	bne.n	8003322 <HAL_RCC_OscConfig+0x236>
 8003340:	e000      	b.n	8003344 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003342:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2208      	movs	r2, #8
 800334a:	4013      	ands	r3, r2
 800334c:	d047      	beq.n	80033de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800334e:	4b32      	ldr	r3, [pc, #200]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2238      	movs	r2, #56	; 0x38
 8003354:	4013      	ands	r3, r2
 8003356:	2b18      	cmp	r3, #24
 8003358:	d10a      	bne.n	8003370 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335e:	2202      	movs	r2, #2
 8003360:	4013      	ands	r3, r2
 8003362:	d03c      	beq.n	80033de <HAL_RCC_OscConfig+0x2f2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d138      	bne.n	80033de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e1c5      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d019      	beq.n	80033ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800337a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800337c:	4b26      	ldr	r3, [pc, #152]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 800337e:	2101      	movs	r1, #1
 8003380:	430a      	orrs	r2, r1
 8003382:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd ffda 	bl	800133c <HAL_GetTick>
 8003388:	0003      	movs	r3, r0
 800338a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338e:	f7fd ffd5 	bl	800133c <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1ad      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80033a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a4:	2202      	movs	r2, #2
 80033a6:	4013      	ands	r3, r2
 80033a8:	d0f1      	beq.n	800338e <HAL_RCC_OscConfig+0x2a2>
 80033aa:	e018      	b.n	80033de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80033ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80033b2:	2101      	movs	r1, #1
 80033b4:	438a      	bics	r2, r1
 80033b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd ffc0 	bl	800133c <HAL_GetTick>
 80033bc:	0003      	movs	r3, r0
 80033be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fd ffbb 	bl	800133c <HAL_GetTick>
 80033c6:	0002      	movs	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e193      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d4:	4b10      	ldr	r3, [pc, #64]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	2202      	movs	r2, #2
 80033da:	4013      	ands	r3, r2
 80033dc:	d1f1      	bne.n	80033c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2204      	movs	r2, #4
 80033e4:	4013      	ands	r3, r2
 80033e6:	d100      	bne.n	80033ea <HAL_RCC_OscConfig+0x2fe>
 80033e8:	e0c6      	b.n	8003578 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ea:	231f      	movs	r3, #31
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2238      	movs	r2, #56	; 0x38
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d11e      	bne.n	800343c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_OscConfig+0x32c>)
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	2202      	movs	r2, #2
 8003404:	4013      	ands	r3, r2
 8003406:	d100      	bne.n	800340a <HAL_RCC_OscConfig+0x31e>
 8003408:	e0b6      	b.n	8003578 <HAL_RCC_OscConfig+0x48c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d000      	beq.n	8003414 <HAL_RCC_OscConfig+0x328>
 8003412:	e0b1      	b.n	8003578 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e171      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
 8003418:	40021000 	.word	0x40021000
 800341c:	fffeffff 	.word	0xfffeffff
 8003420:	fffbffff 	.word	0xfffbffff
 8003424:	ffff80ff 	.word	0xffff80ff
 8003428:	ffffc7ff 	.word	0xffffc7ff
 800342c:	00f42400 	.word	0x00f42400
 8003430:	20000000 	.word	0x20000000
 8003434:	20000004 	.word	0x20000004
 8003438:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800343c:	4bb1      	ldr	r3, [pc, #708]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 800343e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	055b      	lsls	r3, r3, #21
 8003444:	4013      	ands	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_RCC_OscConfig+0x360>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x362>
 800344c:	2300      	movs	r3, #0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d011      	beq.n	8003476 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4bac      	ldr	r3, [pc, #688]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003456:	4bab      	ldr	r3, [pc, #684]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	0549      	lsls	r1, r1, #21
 800345c:	430a      	orrs	r2, r1
 800345e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003460:	4ba8      	ldr	r3, [pc, #672]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	055b      	lsls	r3, r3, #21
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800346e:	231f      	movs	r3, #31
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003476:	4ba4      	ldr	r3, [pc, #656]	; (8003708 <HAL_RCC_OscConfig+0x61c>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4013      	ands	r3, r2
 8003480:	d11a      	bne.n	80034b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003482:	4ba1      	ldr	r3, [pc, #644]	; (8003708 <HAL_RCC_OscConfig+0x61c>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4ba0      	ldr	r3, [pc, #640]	; (8003708 <HAL_RCC_OscConfig+0x61c>)
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	0049      	lsls	r1, r1, #1
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003490:	f7fd ff54 	bl	800133c <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349a:	f7fd ff4f 	bl	800133c <HAL_GetTick>
 800349e:	0002      	movs	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e127      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ac:	4b96      	ldr	r3, [pc, #600]	; (8003708 <HAL_RCC_OscConfig+0x61c>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4013      	ands	r3, r2
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x3e2>
 80034c0:	4b90      	ldr	r3, [pc, #576]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80034c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034c4:	4b8f      	ldr	r3, [pc, #572]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80034c6:	2101      	movs	r1, #1
 80034c8:	430a      	orrs	r2, r1
 80034ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80034cc:	e01c      	b.n	8003508 <HAL_RCC_OscConfig+0x41c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x404>
 80034d6:	4b8b      	ldr	r3, [pc, #556]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80034d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034da:	4b8a      	ldr	r3, [pc, #552]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80034dc:	2104      	movs	r1, #4
 80034de:	430a      	orrs	r2, r1
 80034e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80034e2:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80034e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034e6:	4b87      	ldr	r3, [pc, #540]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80034e8:	2101      	movs	r1, #1
 80034ea:	430a      	orrs	r2, r1
 80034ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ee:	e00b      	b.n	8003508 <HAL_RCC_OscConfig+0x41c>
 80034f0:	4b84      	ldr	r3, [pc, #528]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80034f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034f4:	4b83      	ldr	r3, [pc, #524]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80034f6:	2101      	movs	r1, #1
 80034f8:	438a      	bics	r2, r1
 80034fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80034fc:	4b81      	ldr	r3, [pc, #516]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80034fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003500:	4b80      	ldr	r3, [pc, #512]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003502:	2104      	movs	r1, #4
 8003504:	438a      	bics	r2, r1
 8003506:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d014      	beq.n	800353a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fd ff14 	bl	800133c <HAL_GetTick>
 8003514:	0003      	movs	r3, r0
 8003516:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003518:	e009      	b.n	800352e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fd ff0f 	bl	800133c <HAL_GetTick>
 800351e:	0002      	movs	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	4a79      	ldr	r2, [pc, #484]	; (800370c <HAL_RCC_OscConfig+0x620>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0e6      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800352e:	4b75      	ldr	r3, [pc, #468]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	2202      	movs	r2, #2
 8003534:	4013      	ands	r3, r2
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x42e>
 8003538:	e013      	b.n	8003562 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fd feff 	bl	800133c <HAL_GetTick>
 800353e:	0003      	movs	r3, r0
 8003540:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003542:	e009      	b.n	8003558 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fd fefa 	bl	800133c <HAL_GetTick>
 8003548:	0002      	movs	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	4a6f      	ldr	r2, [pc, #444]	; (800370c <HAL_RCC_OscConfig+0x620>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0d1      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	2202      	movs	r2, #2
 800355e:	4013      	ands	r3, r2
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003562:	231f      	movs	r3, #31
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d105      	bne.n	8003578 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800356c:	4b65      	ldr	r3, [pc, #404]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 800356e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003570:	4b64      	ldr	r3, [pc, #400]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003572:	4967      	ldr	r1, [pc, #412]	; (8003710 <HAL_RCC_OscConfig+0x624>)
 8003574:	400a      	ands	r2, r1
 8003576:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d100      	bne.n	8003582 <HAL_RCC_OscConfig+0x496>
 8003580:	e0bb      	b.n	80036fa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003582:	4b60      	ldr	r3, [pc, #384]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2238      	movs	r2, #56	; 0x38
 8003588:	4013      	ands	r3, r2
 800358a:	2b10      	cmp	r3, #16
 800358c:	d100      	bne.n	8003590 <HAL_RCC_OscConfig+0x4a4>
 800358e:	e07b      	b.n	8003688 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d156      	bne.n	8003646 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b5a      	ldr	r3, [pc, #360]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 800359e:	495d      	ldr	r1, [pc, #372]	; (8003714 <HAL_RCC_OscConfig+0x628>)
 80035a0:	400a      	ands	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fd feca 	bl	800133c <HAL_GetTick>
 80035a8:	0003      	movs	r3, r0
 80035aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fd fec5 	bl	800133c <HAL_GetTick>
 80035b2:	0002      	movs	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e09d      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	049b      	lsls	r3, r3, #18
 80035c8:	4013      	ands	r3, r2
 80035ca:	d1f0      	bne.n	80035ae <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035cc:	4b4d      	ldr	r3, [pc, #308]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a51      	ldr	r2, [pc, #324]	; (8003718 <HAL_RCC_OscConfig+0x62c>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	0019      	movs	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1a      	ldr	r2, [r3, #32]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f8:	431a      	orrs	r2, r3
 80035fa:	4b42      	ldr	r3, [pc, #264]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 80035fc:	430a      	orrs	r2, r1
 80035fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003600:	4b40      	ldr	r3, [pc, #256]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003606:	2180      	movs	r1, #128	; 0x80
 8003608:	0449      	lsls	r1, r1, #17
 800360a:	430a      	orrs	r2, r1
 800360c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800360e:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	4b3c      	ldr	r3, [pc, #240]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	0549      	lsls	r1, r1, #21
 8003618:	430a      	orrs	r2, r1
 800361a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd fe8e 	bl	800133c <HAL_GetTick>
 8003620:	0003      	movs	r3, r0
 8003622:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7fd fe89 	bl	800133c <HAL_GetTick>
 800362a:	0002      	movs	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e061      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003638:	4b32      	ldr	r3, [pc, #200]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	049b      	lsls	r3, r3, #18
 8003640:	4013      	ands	r3, r2
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x53a>
 8003644:	e059      	b.n	80036fa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 800364c:	4931      	ldr	r1, [pc, #196]	; (8003714 <HAL_RCC_OscConfig+0x628>)
 800364e:	400a      	ands	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fd fe73 	bl	800133c <HAL_GetTick>
 8003656:	0003      	movs	r3, r0
 8003658:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fd fe6e 	bl	800133c <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e046      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366e:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	049b      	lsls	r3, r3, #18
 8003676:	4013      	ands	r3, r2
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800367a:	4b22      	ldr	r3, [pc, #136]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003680:	4926      	ldr	r1, [pc, #152]	; (800371c <HAL_RCC_OscConfig+0x630>)
 8003682:	400a      	ands	r2, r1
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	e038      	b.n	80036fa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e033      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003694:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_RCC_OscConfig+0x618>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2203      	movs	r2, #3
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d126      	bne.n	80036f6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2270      	movs	r2, #112	; 0x70
 80036ac:	401a      	ands	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d11f      	bne.n	80036f6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	23fe      	movs	r3, #254	; 0xfe
 80036ba:	01db      	lsls	r3, r3, #7
 80036bc:	401a      	ands	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d116      	bne.n	80036f6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	23f8      	movs	r3, #248	; 0xf8
 80036cc:	039b      	lsls	r3, r3, #14
 80036ce:	401a      	ands	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d10e      	bne.n	80036f6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	23e0      	movs	r3, #224	; 0xe0
 80036dc:	051b      	lsls	r3, r3, #20
 80036de:	401a      	ands	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	0f5b      	lsrs	r3, r3, #29
 80036ec:	075a      	lsls	r2, r3, #29
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b008      	add	sp, #32
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000
 8003708:	40007000 	.word	0x40007000
 800370c:	00001388 	.word	0x00001388
 8003710:	efffffff 	.word	0xefffffff
 8003714:	feffffff 	.word	0xfeffffff
 8003718:	11c1808c 	.word	0x11c1808c
 800371c:	eefefffc 	.word	0xeefefffc

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0e9      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b76      	ldr	r3, [pc, #472]	; (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2207      	movs	r2, #7
 800373a:	4013      	ands	r3, r2
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d91e      	bls.n	8003780 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b73      	ldr	r3, [pc, #460]	; (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2207      	movs	r2, #7
 8003748:	4393      	bics	r3, r2
 800374a:	0019      	movs	r1, r3
 800374c:	4b70      	ldr	r3, [pc, #448]	; (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003754:	f7fd fdf2 	bl	800133c <HAL_GetTick>
 8003758:	0003      	movs	r3, r0
 800375a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800375c:	e009      	b.n	8003772 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375e:	f7fd fded 	bl	800133c <HAL_GetTick>
 8003762:	0002      	movs	r2, r0
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	4a6a      	ldr	r2, [pc, #424]	; (8003914 <HAL_RCC_ClockConfig+0x1f4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e0ca      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003772:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2207      	movs	r2, #7
 8003778:	4013      	ands	r3, r2
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d1ee      	bne.n	800375e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2202      	movs	r2, #2
 8003786:	4013      	ands	r3, r2
 8003788:	d015      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2204      	movs	r2, #4
 8003790:	4013      	ands	r3, r2
 8003792:	d006      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003794:	4b60      	ldr	r3, [pc, #384]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 800379a:	21e0      	movs	r1, #224	; 0xe0
 800379c:	01c9      	lsls	r1, r1, #7
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a2:	4b5d      	ldr	r3, [pc, #372]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	4a5d      	ldr	r2, [pc, #372]	; (800391c <HAL_RCC_ClockConfig+0x1fc>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2201      	movs	r2, #1
 80037bc:	4013      	ands	r3, r2
 80037be:	d057      	beq.n	8003870 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d107      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c8:	4b53      	ldr	r3, [pc, #332]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	029b      	lsls	r3, r3, #10
 80037d0:	4013      	ands	r3, r2
 80037d2:	d12b      	bne.n	800382c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e097      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e0:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	049b      	lsls	r3, r3, #18
 80037e8:	4013      	ands	r3, r2
 80037ea:	d11f      	bne.n	800382c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e08b      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f8:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	2380      	movs	r3, #128	; 0x80
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4013      	ands	r3, r2
 8003802:	d113      	bne.n	800382c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e07f      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d106      	bne.n	800381e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003810:	4b41      	ldr	r3, [pc, #260]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 8003812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003814:	2202      	movs	r2, #2
 8003816:	4013      	ands	r3, r2
 8003818:	d108      	bne.n	800382c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e074      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	2202      	movs	r2, #2
 8003824:	4013      	ands	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e06d      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800382c:	4b3a      	ldr	r3, [pc, #232]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2207      	movs	r2, #7
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003840:	f7fd fd7c 	bl	800133c <HAL_GetTick>
 8003844:	0003      	movs	r3, r0
 8003846:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003848:	e009      	b.n	800385e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384a:	f7fd fd77 	bl	800133c <HAL_GetTick>
 800384e:	0002      	movs	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	4a2f      	ldr	r2, [pc, #188]	; (8003914 <HAL_RCC_ClockConfig+0x1f4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e054      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	4b2e      	ldr	r3, [pc, #184]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2238      	movs	r2, #56	; 0x38
 8003864:	401a      	ands	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	429a      	cmp	r2, r3
 800386e:	d1ec      	bne.n	800384a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2207      	movs	r2, #7
 8003876:	4013      	ands	r3, r2
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d21e      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2207      	movs	r2, #7
 8003884:	4393      	bics	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003890:	f7fd fd54 	bl	800133c <HAL_GetTick>
 8003894:	0003      	movs	r3, r0
 8003896:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003898:	e009      	b.n	80038ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389a:	f7fd fd4f 	bl	800133c <HAL_GetTick>
 800389e:	0002      	movs	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_RCC_ClockConfig+0x1f4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e02c      	b.n	8003908 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038ae:	4b18      	ldr	r3, [pc, #96]	; (8003910 <HAL_RCC_ClockConfig+0x1f0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2207      	movs	r2, #7
 80038b4:	4013      	ands	r3, r2
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1ee      	bne.n	800389a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2204      	movs	r2, #4
 80038c2:	4013      	ands	r3, r2
 80038c4:	d009      	beq.n	80038da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	4a15      	ldr	r2, [pc, #84]	; (8003920 <HAL_RCC_ClockConfig+0x200>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	0019      	movs	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80038da:	f000 f829 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 80038de:	0001      	movs	r1, r0
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_RCC_ClockConfig+0x1f8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	0a1b      	lsrs	r3, r3, #8
 80038e6:	220f      	movs	r2, #15
 80038e8:	401a      	ands	r2, r3
 80038ea:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <HAL_RCC_ClockConfig+0x204>)
 80038ec:	0092      	lsls	r2, r2, #2
 80038ee:	58d3      	ldr	r3, [r2, r3]
 80038f0:	221f      	movs	r2, #31
 80038f2:	4013      	ands	r3, r2
 80038f4:	000a      	movs	r2, r1
 80038f6:	40da      	lsrs	r2, r3
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_ClockConfig+0x208>)
 80038fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038fc:	4b0b      	ldr	r3, [pc, #44]	; (800392c <HAL_RCC_ClockConfig+0x20c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0018      	movs	r0, r3
 8003902:	f7fd fcbf 	bl	8001284 <HAL_InitTick>
 8003906:	0003      	movs	r3, r0
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	b004      	add	sp, #16
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40022000 	.word	0x40022000
 8003914:	00001388 	.word	0x00001388
 8003918:	40021000 	.word	0x40021000
 800391c:	fffff0ff 	.word	0xfffff0ff
 8003920:	ffff8fff 	.word	0xffff8fff
 8003924:	08006a1c 	.word	0x08006a1c
 8003928:	20000000 	.word	0x20000000
 800392c:	20000004 	.word	0x20000004

08003930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003936:	4b3c      	ldr	r3, [pc, #240]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2238      	movs	r2, #56	; 0x38
 800393c:	4013      	ands	r3, r2
 800393e:	d10f      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003940:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	0adb      	lsrs	r3, r3, #11
 8003946:	2207      	movs	r2, #7
 8003948:	4013      	ands	r3, r2
 800394a:	2201      	movs	r2, #1
 800394c:	409a      	lsls	r2, r3
 800394e:	0013      	movs	r3, r2
 8003950:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003952:	6839      	ldr	r1, [r7, #0]
 8003954:	4835      	ldr	r0, [pc, #212]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003956:	f7fc fbe7 	bl	8000128 <__udivsi3>
 800395a:	0003      	movs	r3, r0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e05d      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003960:	4b31      	ldr	r3, [pc, #196]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2238      	movs	r2, #56	; 0x38
 8003966:	4013      	ands	r3, r2
 8003968:	2b08      	cmp	r3, #8
 800396a:	d102      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800396c:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x100>)
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	e054      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003972:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2238      	movs	r2, #56	; 0x38
 8003978:	4013      	ands	r3, r2
 800397a:	2b10      	cmp	r3, #16
 800397c:	d138      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800397e:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2203      	movs	r2, #3
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	2207      	movs	r2, #7
 8003990:	4013      	ands	r3, r2
 8003992:	3301      	adds	r3, #1
 8003994:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d10d      	bne.n	80039b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	4824      	ldr	r0, [pc, #144]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x100>)
 80039a0:	f7fc fbc2 	bl	8000128 <__udivsi3>
 80039a4:	0003      	movs	r3, r0
 80039a6:	0019      	movs	r1, r3
 80039a8:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	227f      	movs	r2, #127	; 0x7f
 80039b0:	4013      	ands	r3, r2
 80039b2:	434b      	muls	r3, r1
 80039b4:	617b      	str	r3, [r7, #20]
        break;
 80039b6:	e00d      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	481c      	ldr	r0, [pc, #112]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xfc>)
 80039bc:	f7fc fbb4 	bl	8000128 <__udivsi3>
 80039c0:	0003      	movs	r3, r0
 80039c2:	0019      	movs	r1, r3
 80039c4:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	227f      	movs	r2, #127	; 0x7f
 80039cc:	4013      	ands	r3, r2
 80039ce:	434b      	muls	r3, r1
 80039d0:	617b      	str	r3, [r7, #20]
        break;
 80039d2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	0f5b      	lsrs	r3, r3, #29
 80039da:	2207      	movs	r2, #7
 80039dc:	4013      	ands	r3, r2
 80039de:	3301      	adds	r3, #1
 80039e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	6978      	ldr	r0, [r7, #20]
 80039e6:	f7fc fb9f 	bl	8000128 <__udivsi3>
 80039ea:	0003      	movs	r3, r0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e015      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2238      	movs	r2, #56	; 0x38
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d103      	bne.n	8003a04 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2238      	movs	r2, #56	; 0x38
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b18      	cmp	r3, #24
 8003a0e:	d103      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003a10:	23fa      	movs	r3, #250	; 0xfa
 8003a12:	01db      	lsls	r3, r3, #7
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	e001      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a1c:	693b      	ldr	r3, [r7, #16]
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b006      	add	sp, #24
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	00f42400 	.word	0x00f42400
 8003a30:	007a1200 	.word	0x007a1200

08003a34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	20000000 	.word	0x20000000

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b5b0      	push	{r4, r5, r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a4c:	f7ff fff2 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a50:	0004      	movs	r4, r0
 8003a52:	f7ff fb3f 	bl	80030d4 <LL_RCC_GetAPB1Prescaler>
 8003a56:	0003      	movs	r3, r0
 8003a58:	0b1a      	lsrs	r2, r3, #12
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a5c:	0092      	lsls	r2, r2, #2
 8003a5e:	58d3      	ldr	r3, [r2, r3]
 8003a60:	221f      	movs	r2, #31
 8003a62:	4013      	ands	r3, r2
 8003a64:	40dc      	lsrs	r4, r3
 8003a66:	0023      	movs	r3, r4
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	08006a5c 	.word	0x08006a5c

08003a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003a7c:	2313      	movs	r3, #19
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a84:	2312      	movs	r3, #18
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	029b      	lsls	r3, r3, #10
 8003a94:	4013      	ands	r3, r2
 8003a96:	d100      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a98:	e0a3      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2011      	movs	r0, #17
 8003a9c:	183b      	adds	r3, r7, r0
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa2:	4bc3      	ldr	r3, [pc, #780]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	055b      	lsls	r3, r3, #21
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d110      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4bc0      	ldr	r3, [pc, #768]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab2:	4bbf      	ldr	r3, [pc, #764]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	0549      	lsls	r1, r1, #21
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
 8003abc:	4bbc      	ldr	r3, [pc, #752]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac0:	2380      	movs	r3, #128	; 0x80
 8003ac2:	055b      	lsls	r3, r3, #21
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aca:	183b      	adds	r3, r7, r0
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad0:	4bb8      	ldr	r3, [pc, #736]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4bb7      	ldr	r3, [pc, #732]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	0049      	lsls	r1, r1, #1
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ade:	f7fd fc2d 	bl	800133c <HAL_GetTick>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7fd fc28 	bl	800133c <HAL_GetTick>
 8003aec:	0002      	movs	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d904      	bls.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003af6:	2313      	movs	r3, #19
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2203      	movs	r2, #3
 8003afc:	701a      	strb	r2, [r3, #0]
        break;
 8003afe:	e005      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b00:	4bac      	ldr	r3, [pc, #688]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d0ed      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003b0c:	2313      	movs	r3, #19
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d154      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b16:	4ba6      	ldr	r3, [pc, #664]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b1a:	23c0      	movs	r3, #192	; 0xc0
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4013      	ands	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d019      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d014      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b32:	4b9f      	ldr	r3, [pc, #636]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	4aa0      	ldr	r2, [pc, #640]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b3c:	4b9c      	ldr	r3, [pc, #624]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b40:	4b9b      	ldr	r3, [pc, #620]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	0249      	lsls	r1, r1, #9
 8003b46:	430a      	orrs	r2, r1
 8003b48:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4a:	4b99      	ldr	r3, [pc, #612]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b4e:	4b98      	ldr	r3, [pc, #608]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b50:	499a      	ldr	r1, [pc, #616]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003b52:	400a      	ands	r2, r1
 8003b54:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b56:	4b96      	ldr	r3, [pc, #600]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4013      	ands	r3, r2
 8003b62:	d016      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7fd fbea 	bl	800133c <HAL_GetTick>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b6c:	e00c      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fd fbe5 	bl	800133c <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	4a91      	ldr	r2, [pc, #580]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d904      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003b7e:	2313      	movs	r3, #19
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2203      	movs	r2, #3
 8003b84:	701a      	strb	r2, [r3, #0]
            break;
 8003b86:	e004      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b88:	4b89      	ldr	r3, [pc, #548]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d0ed      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003b92:	2313      	movs	r3, #19
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9c:	4b84      	ldr	r3, [pc, #528]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	4a85      	ldr	r2, [pc, #532]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003baa:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bac:	430a      	orrs	r2, r1
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bb0:	e00c      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bb2:	2312      	movs	r3, #18
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	2213      	movs	r2, #19
 8003bb8:	18ba      	adds	r2, r7, r2
 8003bba:	7812      	ldrb	r2, [r2, #0]
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	e005      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	2312      	movs	r3, #18
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	2213      	movs	r2, #19
 8003bc6:	18ba      	adds	r2, r7, r2
 8003bc8:	7812      	ldrb	r2, [r2, #0]
 8003bca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bcc:	2311      	movs	r3, #17
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd6:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bda:	4b75      	ldr	r3, [pc, #468]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bdc:	4979      	ldr	r1, [pc, #484]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003bde:	400a      	ands	r2, r1
 8003be0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2201      	movs	r2, #1
 8003be8:	4013      	ands	r3, r2
 8003bea:	d009      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bec:	4b70      	ldr	r3, [pc, #448]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	4393      	bics	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2202      	movs	r2, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0a:	4b69      	ldr	r3, [pc, #420]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0e:	220c      	movs	r2, #12
 8003c10:	4393      	bics	r3, r2
 8003c12:	0019      	movs	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2210      	movs	r2, #16
 8003c24:	4013      	ands	r3, r2
 8003c26:	d009      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	4a66      	ldr	r2, [pc, #408]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4013      	ands	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	4a5f      	ldr	r2, [pc, #380]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	0019      	movs	r1, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	4b56      	ldr	r3, [pc, #344]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4013      	ands	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c68:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	0019      	movs	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	4b4e      	ldr	r3, [pc, #312]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2220      	movs	r2, #32
 8003c82:	4013      	ands	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	4a52      	ldr	r2, [pc, #328]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	0019      	movs	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c96:	430a      	orrs	r2, r1
 8003c98:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	01db      	lsls	r3, r3, #7
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d015      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ca6:	4b42      	ldr	r3, [pc, #264]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	0899      	lsrs	r1, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1a      	ldr	r2, [r3, #32]
 8003cb2:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	05db      	lsls	r3, r3, #23
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003cc4:	4b3a      	ldr	r3, [pc, #232]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	0249      	lsls	r1, r1, #9
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	031b      	lsls	r3, r3, #12
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cde:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	2240      	movs	r2, #64	; 0x40
 8003ce4:	4393      	bics	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cec:	4b30      	ldr	r3, [pc, #192]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	039b      	lsls	r3, r3, #14
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d016      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cfe:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	4a35      	ldr	r2, [pc, #212]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	0019      	movs	r1, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d0c:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d16:	2380      	movs	r3, #128	; 0x80
 8003d18:	03db      	lsls	r3, r3, #15
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d106      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	0449      	lsls	r1, r1, #17
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	03db      	lsls	r3, r3, #15
 8003d34:	4013      	ands	r3, r2
 8003d36:	d016      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	4a27      	ldr	r2, [pc, #156]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	0019      	movs	r1, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d46:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	045b      	lsls	r3, r3, #17
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d106      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d5e:	2180      	movs	r1, #128	; 0x80
 8003d60:	0449      	lsls	r1, r1, #17
 8003d62:	430a      	orrs	r2, r1
 8003d64:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d016      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	4a1a      	ldr	r2, [pc, #104]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	01db      	lsls	r3, r3, #7
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d106      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	0249      	lsls	r1, r1, #9
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003da0:	2312      	movs	r3, #18
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	781b      	ldrb	r3, [r3, #0]
}
 8003da6:	0018      	movs	r0, r3
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b006      	add	sp, #24
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
 8003db8:	fffffcff 	.word	0xfffffcff
 8003dbc:	fffeffff 	.word	0xfffeffff
 8003dc0:	00001388 	.word	0x00001388
 8003dc4:	efffffff 	.word	0xefffffff
 8003dc8:	fffff3ff 	.word	0xfffff3ff
 8003dcc:	fff3ffff 	.word	0xfff3ffff
 8003dd0:	ffcfffff 	.word	0xffcfffff
 8003dd4:	ffffcfff 	.word	0xffffcfff
 8003dd8:	ffbfffff 	.word	0xffbfffff
 8003ddc:	feffffff 	.word	0xfeffffff
 8003de0:	ffff3fff 	.word	0xffff3fff

08003de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e04a      	b.n	8003e8c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	223d      	movs	r2, #61	; 0x3d
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223c      	movs	r2, #60	; 0x3c
 8003e06:	2100      	movs	r1, #0
 8003e08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7fd f8bb 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	223d      	movs	r2, #61	; 0x3d
 8003e16:	2102      	movs	r1, #2
 8003e18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	0019      	movs	r1, r3
 8003e24:	0010      	movs	r0, r2
 8003e26:	f000 f90b 	bl	8004040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2248      	movs	r2, #72	; 0x48
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223e      	movs	r2, #62	; 0x3e
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	223f      	movs	r2, #63	; 0x3f
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2241      	movs	r2, #65	; 0x41
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2242      	movs	r2, #66	; 0x42
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2243      	movs	r2, #67	; 0x43
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2244      	movs	r2, #68	; 0x44
 8003e66:	2101      	movs	r1, #1
 8003e68:	5499      	strb	r1, [r3, r2]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2245      	movs	r2, #69	; 0x45
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2246      	movs	r2, #70	; 0x46
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2247      	movs	r2, #71	; 0x47
 8003e7e:	2101      	movs	r1, #1
 8003e80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	223d      	movs	r2, #61	; 0x3d
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b002      	add	sp, #8
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	230f      	movs	r3, #15
 8003ea0:	18fb      	adds	r3, r7, r3
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	223c      	movs	r2, #60	; 0x3c
 8003eaa:	5c9b      	ldrb	r3, [r3, r2]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIM_ConfigClockSource+0x20>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0bc      	b.n	800402e <HAL_TIM_ConfigClockSource+0x19a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	223c      	movs	r2, #60	; 0x3c
 8003eb8:	2101      	movs	r1, #1
 8003eba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	223d      	movs	r2, #61	; 0x3d
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4a5a      	ldr	r2, [pc, #360]	; (8004038 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4a59      	ldr	r2, [pc, #356]	; (800403c <HAL_TIM_ConfigClockSource+0x1a8>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2280      	movs	r2, #128	; 0x80
 8003eea:	0192      	lsls	r2, r2, #6
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d040      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0xde>
 8003ef0:	2280      	movs	r2, #128	; 0x80
 8003ef2:	0192      	lsls	r2, r2, #6
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d900      	bls.n	8003efa <HAL_TIM_ConfigClockSource+0x66>
 8003ef8:	e088      	b.n	800400c <HAL_TIM_ConfigClockSource+0x178>
 8003efa:	2280      	movs	r2, #128	; 0x80
 8003efc:	0152      	lsls	r2, r2, #5
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d100      	bne.n	8003f04 <HAL_TIM_ConfigClockSource+0x70>
 8003f02:	e088      	b.n	8004016 <HAL_TIM_ConfigClockSource+0x182>
 8003f04:	2280      	movs	r2, #128	; 0x80
 8003f06:	0152      	lsls	r2, r2, #5
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d900      	bls.n	8003f0e <HAL_TIM_ConfigClockSource+0x7a>
 8003f0c:	e07e      	b.n	800400c <HAL_TIM_ConfigClockSource+0x178>
 8003f0e:	2b70      	cmp	r3, #112	; 0x70
 8003f10:	d018      	beq.n	8003f44 <HAL_TIM_ConfigClockSource+0xb0>
 8003f12:	d900      	bls.n	8003f16 <HAL_TIM_ConfigClockSource+0x82>
 8003f14:	e07a      	b.n	800400c <HAL_TIM_ConfigClockSource+0x178>
 8003f16:	2b60      	cmp	r3, #96	; 0x60
 8003f18:	d04f      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x126>
 8003f1a:	d900      	bls.n	8003f1e <HAL_TIM_ConfigClockSource+0x8a>
 8003f1c:	e076      	b.n	800400c <HAL_TIM_ConfigClockSource+0x178>
 8003f1e:	2b50      	cmp	r3, #80	; 0x50
 8003f20:	d03b      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x106>
 8003f22:	d900      	bls.n	8003f26 <HAL_TIM_ConfigClockSource+0x92>
 8003f24:	e072      	b.n	800400c <HAL_TIM_ConfigClockSource+0x178>
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d057      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x146>
 8003f2a:	d900      	bls.n	8003f2e <HAL_TIM_ConfigClockSource+0x9a>
 8003f2c:	e06e      	b.n	800400c <HAL_TIM_ConfigClockSource+0x178>
 8003f2e:	2b30      	cmp	r3, #48	; 0x30
 8003f30:	d063      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x166>
 8003f32:	d86b      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x178>
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d060      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x166>
 8003f38:	d868      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x178>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d05d      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x166>
 8003f3e:	2b10      	cmp	r3, #16
 8003f40:	d05b      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x166>
 8003f42:	e063      	b.n	800400c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f54:	f000 f97e 	bl	8004254 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2277      	movs	r2, #119	; 0x77
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	609a      	str	r2, [r3, #8]
      break;
 8003f70:	e052      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f82:	f000 f967 	bl	8004254 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2180      	movs	r1, #128	; 0x80
 8003f92:	01c9      	lsls	r1, r1, #7
 8003f94:	430a      	orrs	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]
      break;
 8003f98:	e03e      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	f000 f8d8 	bl	800415c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2150      	movs	r1, #80	; 0x50
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 f932 	bl	800421c <TIM_ITRx_SetConfig>
      break;
 8003fb8:	e02e      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc6:	001a      	movs	r2, r3
 8003fc8:	f000 f8f6 	bl	80041b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2160      	movs	r1, #96	; 0x60
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f000 f922 	bl	800421c <TIM_ITRx_SetConfig>
      break;
 8003fd8:	e01e      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	f000 f8b8 	bl	800415c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2140      	movs	r1, #64	; 0x40
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 f912 	bl	800421c <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e00e      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	0019      	movs	r1, r3
 8004004:	0010      	movs	r0, r2
 8004006:	f000 f909 	bl	800421c <TIM_ITRx_SetConfig>
      break;
 800400a:	e005      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800400c:	230f      	movs	r3, #15
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
      break;
 8004014:	e000      	b.n	8004018 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004016:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	223d      	movs	r2, #61	; 0x3d
 800401c:	2101      	movs	r1, #1
 800401e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	223c      	movs	r2, #60	; 0x3c
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]

  return status;
 8004028:	230f      	movs	r3, #15
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	781b      	ldrb	r3, [r3, #0]
}
 800402e:	0018      	movs	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	b004      	add	sp, #16
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	ffceff88 	.word	0xffceff88
 800403c:	ffff00ff 	.word	0xffff00ff

08004040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3b      	ldr	r2, [pc, #236]	; (8004140 <TIM_Base_SetConfig+0x100>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d008      	beq.n	800406a <TIM_Base_SetConfig+0x2a>
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	05db      	lsls	r3, r3, #23
 800405e:	429a      	cmp	r2, r3
 8004060:	d003      	beq.n	800406a <TIM_Base_SetConfig+0x2a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a37      	ldr	r2, [pc, #220]	; (8004144 <TIM_Base_SetConfig+0x104>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d108      	bne.n	800407c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2270      	movs	r2, #112	; 0x70
 800406e:	4393      	bics	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a30      	ldr	r2, [pc, #192]	; (8004140 <TIM_Base_SetConfig+0x100>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d018      	beq.n	80040b6 <TIM_Base_SetConfig+0x76>
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	2380      	movs	r3, #128	; 0x80
 8004088:	05db      	lsls	r3, r3, #23
 800408a:	429a      	cmp	r2, r3
 800408c:	d013      	beq.n	80040b6 <TIM_Base_SetConfig+0x76>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <TIM_Base_SetConfig+0x104>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00f      	beq.n	80040b6 <TIM_Base_SetConfig+0x76>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <TIM_Base_SetConfig+0x108>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00b      	beq.n	80040b6 <TIM_Base_SetConfig+0x76>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2a      	ldr	r2, [pc, #168]	; (800414c <TIM_Base_SetConfig+0x10c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <TIM_Base_SetConfig+0x76>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a29      	ldr	r2, [pc, #164]	; (8004150 <TIM_Base_SetConfig+0x110>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_Base_SetConfig+0x76>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a28      	ldr	r2, [pc, #160]	; (8004154 <TIM_Base_SetConfig+0x114>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d108      	bne.n	80040c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a27      	ldr	r2, [pc, #156]	; (8004158 <TIM_Base_SetConfig+0x118>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2280      	movs	r2, #128	; 0x80
 80040cc:	4393      	bics	r3, r2
 80040ce:	001a      	movs	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a13      	ldr	r2, [pc, #76]	; (8004140 <TIM_Base_SetConfig+0x100>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_Base_SetConfig+0xce>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a14      	ldr	r2, [pc, #80]	; (800414c <TIM_Base_SetConfig+0x10c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_Base_SetConfig+0xce>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a13      	ldr	r2, [pc, #76]	; (8004150 <TIM_Base_SetConfig+0x110>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_Base_SetConfig+0xce>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a12      	ldr	r2, [pc, #72]	; (8004154 <TIM_Base_SetConfig+0x114>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d103      	bne.n	8004116 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	2b01      	cmp	r3, #1
 8004126:	d106      	bne.n	8004136 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2201      	movs	r2, #1
 800412e:	4393      	bics	r3, r2
 8004130:	001a      	movs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]
  }
}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	b004      	add	sp, #16
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40002000 	.word	0x40002000
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800
 8004158:	fffffcff 	.word	0xfffffcff

0800415c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	2201      	movs	r2, #1
 8004174:	4393      	bics	r3, r2
 8004176:	001a      	movs	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	22f0      	movs	r2, #240	; 0xf0
 8004186:	4393      	bics	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	220a      	movs	r2, #10
 8004198:	4393      	bics	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	621a      	str	r2, [r3, #32]
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b006      	add	sp, #24
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	2210      	movs	r2, #16
 80041d0:	4393      	bics	r3, r2
 80041d2:	001a      	movs	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <TIM_TI2_ConfigInputStage+0x60>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	031b      	lsls	r3, r3, #12
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	22a0      	movs	r2, #160	; 0xa0
 80041f4:	4393      	bics	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b006      	add	sp, #24
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	ffff0fff 	.word	0xffff0fff

0800421c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a08      	ldr	r2, [pc, #32]	; (8004250 <TIM_ITRx_SetConfig+0x34>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	2207      	movs	r2, #7
 800423c:	4313      	orrs	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	609a      	str	r2, [r3, #8]
}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	46bd      	mov	sp, r7
 800424a:	b004      	add	sp, #16
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	ffcfff8f 	.word	0xffcfff8f

08004254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	4a09      	ldr	r2, [pc, #36]	; (8004290 <TIM_ETR_SetConfig+0x3c>)
 800426c:	4013      	ands	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	431a      	orrs	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4313      	orrs	r3, r2
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	609a      	str	r2, [r3, #8]
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	b006      	add	sp, #24
 800428e:	bd80      	pop	{r7, pc}
 8004290:	ffff00ff 	.word	0xffff00ff

08004294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	223c      	movs	r2, #60	; 0x3c
 80042a2:	5c9b      	ldrb	r3, [r3, r2]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e055      	b.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223c      	movs	r2, #60	; 0x3c
 80042b0:	2101      	movs	r1, #1
 80042b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	223d      	movs	r2, #61	; 0x3d
 80042b8:	2102      	movs	r1, #2
 80042ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a23      	ldr	r2, [pc, #140]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d108      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a22      	ldr	r2, [pc, #136]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042da:	4013      	ands	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2270      	movs	r2, #112	; 0x70
 80042ec:	4393      	bics	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a16      	ldr	r2, [pc, #88]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00f      	beq.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	05db      	lsls	r3, r3, #23
 8004314:	429a      	cmp	r2, r3
 8004316:	d009      	beq.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a12      	ldr	r2, [pc, #72]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a11      	ldr	r2, [pc, #68]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d10c      	bne.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	4393      	bics	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	4313      	orrs	r3, r2
 800433c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	223d      	movs	r2, #61	; 0x3d
 800434a:	2101      	movs	r1, #1
 800434c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	223c      	movs	r2, #60	; 0x3c
 8004352:	2100      	movs	r1, #0
 8004354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	b004      	add	sp, #16
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40012c00 	.word	0x40012c00
 8004364:	ff0fffff 	.word	0xff0fffff
 8004368:	40000400 	.word	0x40000400
 800436c:	40014000 	.word	0x40014000

08004370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e046      	b.n	8004410 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2288      	movs	r2, #136	; 0x88
 8004386:	589b      	ldr	r3, [r3, r2]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2284      	movs	r2, #132	; 0x84
 8004390:	2100      	movs	r1, #0
 8004392:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0018      	movs	r0, r3
 8004398:	f7fc fe12 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2288      	movs	r2, #136	; 0x88
 80043a0:	2124      	movs	r1, #36	; 0x24
 80043a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2101      	movs	r1, #1
 80043b0:	438a      	bics	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	0018      	movs	r0, r3
 80043c0:	f000 fb8e 	bl	8004ae0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 f8cc 	bl	8004564 <UART_SetConfig>
 80043cc:	0003      	movs	r3, r0
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e01c      	b.n	8004410 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	490d      	ldr	r1, [pc, #52]	; (8004418 <HAL_UART_Init+0xa8>)
 80043e2:	400a      	ands	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	212a      	movs	r1, #42	; 0x2a
 80043f2:	438a      	bics	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2101      	movs	r1, #1
 8004402:	430a      	orrs	r2, r1
 8004404:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 fc1d 	bl	8004c48 <UART_CheckIdleState>
 800440e:	0003      	movs	r3, r0
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}
 8004418:	ffffb7ff 	.word	0xffffb7ff

0800441c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	1dbb      	adds	r3, r7, #6
 800442a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2288      	movs	r2, #136	; 0x88
 8004430:	589b      	ldr	r3, [r3, r2]
 8004432:	2b20      	cmp	r3, #32
 8004434:	d000      	beq.n	8004438 <HAL_UART_Transmit+0x1c>
 8004436:	e090      	b.n	800455a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_UART_Transmit+0x2a>
 800443e:	1dbb      	adds	r3, r7, #6
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e088      	b.n	800455c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	015b      	lsls	r3, r3, #5
 8004452:	429a      	cmp	r2, r3
 8004454:	d109      	bne.n	800446a <HAL_UART_Transmit+0x4e>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2201      	movs	r2, #1
 8004462:	4013      	ands	r3, r2
 8004464:	d001      	beq.n	800446a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e078      	b.n	800455c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2290      	movs	r2, #144	; 0x90
 800446e:	2100      	movs	r1, #0
 8004470:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2288      	movs	r2, #136	; 0x88
 8004476:	2121      	movs	r1, #33	; 0x21
 8004478:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800447a:	f7fc ff5f 	bl	800133c <HAL_GetTick>
 800447e:	0003      	movs	r3, r0
 8004480:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1dba      	adds	r2, r7, #6
 8004486:	2154      	movs	r1, #84	; 0x54
 8004488:	8812      	ldrh	r2, [r2, #0]
 800448a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1dba      	adds	r2, r7, #6
 8004490:	2156      	movs	r1, #86	; 0x56
 8004492:	8812      	ldrh	r2, [r2, #0]
 8004494:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	015b      	lsls	r3, r3, #5
 800449e:	429a      	cmp	r2, r3
 80044a0:	d108      	bne.n	80044b4 <HAL_UART_Transmit+0x98>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	e003      	b.n	80044bc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044bc:	e030      	b.n	8004520 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	0013      	movs	r3, r2
 80044c8:	2200      	movs	r2, #0
 80044ca:	2180      	movs	r1, #128	; 0x80
 80044cc:	f000 fc66 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 80044d0:	1e03      	subs	r3, r0, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2288      	movs	r2, #136	; 0x88
 80044d8:	2120      	movs	r1, #32
 80044da:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e03d      	b.n	800455c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	001a      	movs	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	05d2      	lsls	r2, r2, #23
 80044f2:	0dd2      	lsrs	r2, r2, #23
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	3302      	adds	r3, #2
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	e007      	b.n	800450e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	781a      	ldrb	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	3301      	adds	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2256      	movs	r2, #86	; 0x56
 8004512:	5a9b      	ldrh	r3, [r3, r2]
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b299      	uxth	r1, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2256      	movs	r2, #86	; 0x56
 800451e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2256      	movs	r2, #86	; 0x56
 8004524:	5a9b      	ldrh	r3, [r3, r2]
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1c8      	bne.n	80044be <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	0013      	movs	r3, r2
 8004536:	2200      	movs	r2, #0
 8004538:	2140      	movs	r1, #64	; 0x40
 800453a:	f000 fc2f 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 800453e:	1e03      	subs	r3, r0, #0
 8004540:	d005      	beq.n	800454e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2288      	movs	r2, #136	; 0x88
 8004546:	2120      	movs	r1, #32
 8004548:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e006      	b.n	800455c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2288      	movs	r2, #136	; 0x88
 8004552:	2120      	movs	r1, #32
 8004554:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	e000      	b.n	800455c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
  }
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b008      	add	sp, #32
 8004562:	bd80      	pop	{r7, pc}

08004564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004564:	b5b0      	push	{r4, r5, r7, lr}
 8004566:	b090      	sub	sp, #64	; 0x40
 8004568:	af00      	add	r7, sp, #0
 800456a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800456c:	231a      	movs	r3, #26
 800456e:	2220      	movs	r2, #32
 8004570:	189b      	adds	r3, r3, r2
 8004572:	19db      	adds	r3, r3, r7
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	431a      	orrs	r2, r3
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	431a      	orrs	r2, r3
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	4313      	orrs	r3, r2
 800458e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4aaf      	ldr	r2, [pc, #700]	; (8004854 <UART_SetConfig+0x2f0>)
 8004598:	4013      	ands	r3, r2
 800459a:	0019      	movs	r1, r3
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4aaa      	ldr	r2, [pc, #680]	; (8004858 <UART_SetConfig+0x2f4>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	0018      	movs	r0, r3
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	68d9      	ldr	r1, [r3, #12]
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	0003      	movs	r3, r0
 80045bc:	430b      	orrs	r3, r1
 80045be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4aa4      	ldr	r2, [pc, #656]	; (800485c <UART_SetConfig+0x2f8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045d6:	4313      	orrs	r3, r2
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a9f      	ldr	r2, [pc, #636]	; (8004860 <UART_SetConfig+0x2fc>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	220f      	movs	r2, #15
 80045f8:	4393      	bics	r3, r2
 80045fa:	0018      	movs	r0, r3
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	0003      	movs	r3, r0
 8004606:	430b      	orrs	r3, r1
 8004608:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a95      	ldr	r2, [pc, #596]	; (8004864 <UART_SetConfig+0x300>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d131      	bne.n	8004678 <UART_SetConfig+0x114>
 8004614:	4b94      	ldr	r3, [pc, #592]	; (8004868 <UART_SetConfig+0x304>)
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	2203      	movs	r2, #3
 800461a:	4013      	ands	r3, r2
 800461c:	2b03      	cmp	r3, #3
 800461e:	d01d      	beq.n	800465c <UART_SetConfig+0xf8>
 8004620:	d823      	bhi.n	800466a <UART_SetConfig+0x106>
 8004622:	2b02      	cmp	r3, #2
 8004624:	d00c      	beq.n	8004640 <UART_SetConfig+0xdc>
 8004626:	d820      	bhi.n	800466a <UART_SetConfig+0x106>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <UART_SetConfig+0xce>
 800462c:	2b01      	cmp	r3, #1
 800462e:	d00e      	beq.n	800464e <UART_SetConfig+0xea>
 8004630:	e01b      	b.n	800466a <UART_SetConfig+0x106>
 8004632:	231b      	movs	r3, #27
 8004634:	2220      	movs	r2, #32
 8004636:	189b      	adds	r3, r3, r2
 8004638:	19db      	adds	r3, r3, r7
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e0b4      	b.n	80047aa <UART_SetConfig+0x246>
 8004640:	231b      	movs	r3, #27
 8004642:	2220      	movs	r2, #32
 8004644:	189b      	adds	r3, r3, r2
 8004646:	19db      	adds	r3, r3, r7
 8004648:	2202      	movs	r2, #2
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e0ad      	b.n	80047aa <UART_SetConfig+0x246>
 800464e:	231b      	movs	r3, #27
 8004650:	2220      	movs	r2, #32
 8004652:	189b      	adds	r3, r3, r2
 8004654:	19db      	adds	r3, r3, r7
 8004656:	2204      	movs	r2, #4
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	e0a6      	b.n	80047aa <UART_SetConfig+0x246>
 800465c:	231b      	movs	r3, #27
 800465e:	2220      	movs	r2, #32
 8004660:	189b      	adds	r3, r3, r2
 8004662:	19db      	adds	r3, r3, r7
 8004664:	2208      	movs	r2, #8
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e09f      	b.n	80047aa <UART_SetConfig+0x246>
 800466a:	231b      	movs	r3, #27
 800466c:	2220      	movs	r2, #32
 800466e:	189b      	adds	r3, r3, r2
 8004670:	19db      	adds	r3, r3, r7
 8004672:	2210      	movs	r2, #16
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	e098      	b.n	80047aa <UART_SetConfig+0x246>
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a7b      	ldr	r2, [pc, #492]	; (800486c <UART_SetConfig+0x308>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d131      	bne.n	80046e6 <UART_SetConfig+0x182>
 8004682:	4b79      	ldr	r3, [pc, #484]	; (8004868 <UART_SetConfig+0x304>)
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	220c      	movs	r2, #12
 8004688:	4013      	ands	r3, r2
 800468a:	2b0c      	cmp	r3, #12
 800468c:	d01d      	beq.n	80046ca <UART_SetConfig+0x166>
 800468e:	d823      	bhi.n	80046d8 <UART_SetConfig+0x174>
 8004690:	2b08      	cmp	r3, #8
 8004692:	d00c      	beq.n	80046ae <UART_SetConfig+0x14a>
 8004694:	d820      	bhi.n	80046d8 <UART_SetConfig+0x174>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <UART_SetConfig+0x13c>
 800469a:	2b04      	cmp	r3, #4
 800469c:	d00e      	beq.n	80046bc <UART_SetConfig+0x158>
 800469e:	e01b      	b.n	80046d8 <UART_SetConfig+0x174>
 80046a0:	231b      	movs	r3, #27
 80046a2:	2220      	movs	r2, #32
 80046a4:	189b      	adds	r3, r3, r2
 80046a6:	19db      	adds	r3, r3, r7
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e07d      	b.n	80047aa <UART_SetConfig+0x246>
 80046ae:	231b      	movs	r3, #27
 80046b0:	2220      	movs	r2, #32
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	19db      	adds	r3, r3, r7
 80046b6:	2202      	movs	r2, #2
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e076      	b.n	80047aa <UART_SetConfig+0x246>
 80046bc:	231b      	movs	r3, #27
 80046be:	2220      	movs	r2, #32
 80046c0:	189b      	adds	r3, r3, r2
 80046c2:	19db      	adds	r3, r3, r7
 80046c4:	2204      	movs	r2, #4
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e06f      	b.n	80047aa <UART_SetConfig+0x246>
 80046ca:	231b      	movs	r3, #27
 80046cc:	2220      	movs	r2, #32
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	19db      	adds	r3, r3, r7
 80046d2:	2208      	movs	r2, #8
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e068      	b.n	80047aa <UART_SetConfig+0x246>
 80046d8:	231b      	movs	r3, #27
 80046da:	2220      	movs	r2, #32
 80046dc:	189b      	adds	r3, r3, r2
 80046de:	19db      	adds	r3, r3, r7
 80046e0:	2210      	movs	r2, #16
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	e061      	b.n	80047aa <UART_SetConfig+0x246>
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a61      	ldr	r2, [pc, #388]	; (8004870 <UART_SetConfig+0x30c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d106      	bne.n	80046fe <UART_SetConfig+0x19a>
 80046f0:	231b      	movs	r3, #27
 80046f2:	2220      	movs	r2, #32
 80046f4:	189b      	adds	r3, r3, r2
 80046f6:	19db      	adds	r3, r3, r7
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e055      	b.n	80047aa <UART_SetConfig+0x246>
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a5c      	ldr	r2, [pc, #368]	; (8004874 <UART_SetConfig+0x310>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d106      	bne.n	8004716 <UART_SetConfig+0x1b2>
 8004708:	231b      	movs	r3, #27
 800470a:	2220      	movs	r2, #32
 800470c:	189b      	adds	r3, r3, r2
 800470e:	19db      	adds	r3, r3, r7
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e049      	b.n	80047aa <UART_SetConfig+0x246>
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a50      	ldr	r2, [pc, #320]	; (800485c <UART_SetConfig+0x2f8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d13e      	bne.n	800479e <UART_SetConfig+0x23a>
 8004720:	4b51      	ldr	r3, [pc, #324]	; (8004868 <UART_SetConfig+0x304>)
 8004722:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004724:	23c0      	movs	r3, #192	; 0xc0
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	4013      	ands	r3, r2
 800472a:	22c0      	movs	r2, #192	; 0xc0
 800472c:	0112      	lsls	r2, r2, #4
 800472e:	4293      	cmp	r3, r2
 8004730:	d027      	beq.n	8004782 <UART_SetConfig+0x21e>
 8004732:	22c0      	movs	r2, #192	; 0xc0
 8004734:	0112      	lsls	r2, r2, #4
 8004736:	4293      	cmp	r3, r2
 8004738:	d82a      	bhi.n	8004790 <UART_SetConfig+0x22c>
 800473a:	2280      	movs	r2, #128	; 0x80
 800473c:	0112      	lsls	r2, r2, #4
 800473e:	4293      	cmp	r3, r2
 8004740:	d011      	beq.n	8004766 <UART_SetConfig+0x202>
 8004742:	2280      	movs	r2, #128	; 0x80
 8004744:	0112      	lsls	r2, r2, #4
 8004746:	4293      	cmp	r3, r2
 8004748:	d822      	bhi.n	8004790 <UART_SetConfig+0x22c>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d004      	beq.n	8004758 <UART_SetConfig+0x1f4>
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	00d2      	lsls	r2, r2, #3
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <UART_SetConfig+0x210>
 8004756:	e01b      	b.n	8004790 <UART_SetConfig+0x22c>
 8004758:	231b      	movs	r3, #27
 800475a:	2220      	movs	r2, #32
 800475c:	189b      	adds	r3, r3, r2
 800475e:	19db      	adds	r3, r3, r7
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e021      	b.n	80047aa <UART_SetConfig+0x246>
 8004766:	231b      	movs	r3, #27
 8004768:	2220      	movs	r2, #32
 800476a:	189b      	adds	r3, r3, r2
 800476c:	19db      	adds	r3, r3, r7
 800476e:	2202      	movs	r2, #2
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e01a      	b.n	80047aa <UART_SetConfig+0x246>
 8004774:	231b      	movs	r3, #27
 8004776:	2220      	movs	r2, #32
 8004778:	189b      	adds	r3, r3, r2
 800477a:	19db      	adds	r3, r3, r7
 800477c:	2204      	movs	r2, #4
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e013      	b.n	80047aa <UART_SetConfig+0x246>
 8004782:	231b      	movs	r3, #27
 8004784:	2220      	movs	r2, #32
 8004786:	189b      	adds	r3, r3, r2
 8004788:	19db      	adds	r3, r3, r7
 800478a:	2208      	movs	r2, #8
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	e00c      	b.n	80047aa <UART_SetConfig+0x246>
 8004790:	231b      	movs	r3, #27
 8004792:	2220      	movs	r2, #32
 8004794:	189b      	adds	r3, r3, r2
 8004796:	19db      	adds	r3, r3, r7
 8004798:	2210      	movs	r2, #16
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e005      	b.n	80047aa <UART_SetConfig+0x246>
 800479e:	231b      	movs	r3, #27
 80047a0:	2220      	movs	r2, #32
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	19db      	adds	r3, r3, r7
 80047a6:	2210      	movs	r2, #16
 80047a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a2b      	ldr	r2, [pc, #172]	; (800485c <UART_SetConfig+0x2f8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d000      	beq.n	80047b6 <UART_SetConfig+0x252>
 80047b4:	e0a9      	b.n	800490a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047b6:	231b      	movs	r3, #27
 80047b8:	2220      	movs	r2, #32
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	19db      	adds	r3, r3, r7
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d015      	beq.n	80047f0 <UART_SetConfig+0x28c>
 80047c4:	dc18      	bgt.n	80047f8 <UART_SetConfig+0x294>
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d00d      	beq.n	80047e6 <UART_SetConfig+0x282>
 80047ca:	dc15      	bgt.n	80047f8 <UART_SetConfig+0x294>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <UART_SetConfig+0x272>
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d005      	beq.n	80047e0 <UART_SetConfig+0x27c>
 80047d4:	e010      	b.n	80047f8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d6:	f7ff f937 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 80047da:	0003      	movs	r3, r0
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047de:	e014      	b.n	800480a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <UART_SetConfig+0x314>)
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047e4:	e011      	b.n	800480a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e6:	f7ff f8a3 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 80047ea:	0003      	movs	r3, r0
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047ee:	e00c      	b.n	800480a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047f6:	e008      	b.n	800480a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80047fc:	231a      	movs	r3, #26
 80047fe:	2220      	movs	r2, #32
 8004800:	189b      	adds	r3, r3, r2
 8004802:	19db      	adds	r3, r3, r7
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]
        break;
 8004808:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	2b00      	cmp	r3, #0
 800480e:	d100      	bne.n	8004812 <UART_SetConfig+0x2ae>
 8004810:	e14b      	b.n	8004aaa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004816:	4b19      	ldr	r3, [pc, #100]	; (800487c <UART_SetConfig+0x318>)
 8004818:	0052      	lsls	r2, r2, #1
 800481a:	5ad3      	ldrh	r3, [r2, r3]
 800481c:	0019      	movs	r1, r3
 800481e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004820:	f7fb fc82 	bl	8000128 <__udivsi3>
 8004824:	0003      	movs	r3, r0
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	0013      	movs	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	189b      	adds	r3, r3, r2
 8004832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004834:	429a      	cmp	r2, r3
 8004836:	d305      	bcc.n	8004844 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800483e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004840:	429a      	cmp	r2, r3
 8004842:	d91d      	bls.n	8004880 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004844:	231a      	movs	r3, #26
 8004846:	2220      	movs	r2, #32
 8004848:	189b      	adds	r3, r3, r2
 800484a:	19db      	adds	r3, r3, r7
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e12b      	b.n	8004aaa <UART_SetConfig+0x546>
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	cfff69f3 	.word	0xcfff69f3
 8004858:	ffffcfff 	.word	0xffffcfff
 800485c:	40008000 	.word	0x40008000
 8004860:	11fff4ff 	.word	0x11fff4ff
 8004864:	40013800 	.word	0x40013800
 8004868:	40021000 	.word	0x40021000
 800486c:	40004400 	.word	0x40004400
 8004870:	40004800 	.word	0x40004800
 8004874:	40004c00 	.word	0x40004c00
 8004878:	00f42400 	.word	0x00f42400
 800487c:	08006a7c 	.word	0x08006a7c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	2300      	movs	r3, #0
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488c:	4b92      	ldr	r3, [pc, #584]	; (8004ad8 <UART_SetConfig+0x574>)
 800488e:	0052      	lsls	r2, r2, #1
 8004890:	5ad3      	ldrh	r3, [r2, r3]
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	69b8      	ldr	r0, [r7, #24]
 800489e:	69f9      	ldr	r1, [r7, #28]
 80048a0:	f7fb fdb8 	bl	8000414 <__aeabi_uldivmod>
 80048a4:	0002      	movs	r2, r0
 80048a6:	000b      	movs	r3, r1
 80048a8:	0e11      	lsrs	r1, r2, #24
 80048aa:	021d      	lsls	r5, r3, #8
 80048ac:	430d      	orrs	r5, r1
 80048ae:	0214      	lsls	r4, r2, #8
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68b8      	ldr	r0, [r7, #8]
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	1900      	adds	r0, r0, r4
 80048c2:	4169      	adcs	r1, r5
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	2300      	movs	r3, #0
 80048cc:	607b      	str	r3, [r7, #4]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f7fb fd9f 	bl	8000414 <__aeabi_uldivmod>
 80048d6:	0002      	movs	r2, r0
 80048d8:	000b      	movs	r3, r1
 80048da:	0013      	movs	r3, r2
 80048dc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e0:	23c0      	movs	r3, #192	; 0xc0
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d309      	bcc.n	80048fc <UART_SetConfig+0x398>
 80048e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	035b      	lsls	r3, r3, #13
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d204      	bcs.n	80048fc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	e0d6      	b.n	8004aaa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80048fc:	231a      	movs	r3, #26
 80048fe:	2220      	movs	r2, #32
 8004900:	189b      	adds	r3, r3, r2
 8004902:	19db      	adds	r3, r3, r7
 8004904:	2201      	movs	r2, #1
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	e0cf      	b.n	8004aaa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	429a      	cmp	r2, r3
 8004914:	d000      	beq.n	8004918 <UART_SetConfig+0x3b4>
 8004916:	e070      	b.n	80049fa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004918:	231b      	movs	r3, #27
 800491a:	2220      	movs	r2, #32
 800491c:	189b      	adds	r3, r3, r2
 800491e:	19db      	adds	r3, r3, r7
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b08      	cmp	r3, #8
 8004924:	d015      	beq.n	8004952 <UART_SetConfig+0x3ee>
 8004926:	dc18      	bgt.n	800495a <UART_SetConfig+0x3f6>
 8004928:	2b04      	cmp	r3, #4
 800492a:	d00d      	beq.n	8004948 <UART_SetConfig+0x3e4>
 800492c:	dc15      	bgt.n	800495a <UART_SetConfig+0x3f6>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <UART_SetConfig+0x3d4>
 8004932:	2b02      	cmp	r3, #2
 8004934:	d005      	beq.n	8004942 <UART_SetConfig+0x3de>
 8004936:	e010      	b.n	800495a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004938:	f7ff f886 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 800493c:	0003      	movs	r3, r0
 800493e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004940:	e014      	b.n	800496c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004942:	4b66      	ldr	r3, [pc, #408]	; (8004adc <UART_SetConfig+0x578>)
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004946:	e011      	b.n	800496c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004948:	f7fe fff2 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 800494c:	0003      	movs	r3, r0
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004950:	e00c      	b.n	800496c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004958:	e008      	b.n	800496c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800495e:	231a      	movs	r3, #26
 8004960:	2220      	movs	r2, #32
 8004962:	189b      	adds	r3, r3, r2
 8004964:	19db      	adds	r3, r3, r7
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
        break;
 800496a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	2b00      	cmp	r3, #0
 8004970:	d100      	bne.n	8004974 <UART_SetConfig+0x410>
 8004972:	e09a      	b.n	8004aaa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004978:	4b57      	ldr	r3, [pc, #348]	; (8004ad8 <UART_SetConfig+0x574>)
 800497a:	0052      	lsls	r2, r2, #1
 800497c:	5ad3      	ldrh	r3, [r2, r3]
 800497e:	0019      	movs	r1, r3
 8004980:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004982:	f7fb fbd1 	bl	8000128 <__udivsi3>
 8004986:	0003      	movs	r3, r0
 8004988:	005a      	lsls	r2, r3, #1
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	18d2      	adds	r2, r2, r3
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	0019      	movs	r1, r3
 8004998:	0010      	movs	r0, r2
 800499a:	f7fb fbc5 	bl	8000128 <__udivsi3>
 800499e:	0003      	movs	r3, r0
 80049a0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2b0f      	cmp	r3, #15
 80049a6:	d921      	bls.n	80049ec <UART_SetConfig+0x488>
 80049a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049aa:	2380      	movs	r3, #128	; 0x80
 80049ac:	025b      	lsls	r3, r3, #9
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d21c      	bcs.n	80049ec <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	200e      	movs	r0, #14
 80049b8:	2420      	movs	r4, #32
 80049ba:	1903      	adds	r3, r0, r4
 80049bc:	19db      	adds	r3, r3, r7
 80049be:	210f      	movs	r1, #15
 80049c0:	438a      	bics	r2, r1
 80049c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2207      	movs	r2, #7
 80049cc:	4013      	ands	r3, r2
 80049ce:	b299      	uxth	r1, r3
 80049d0:	1903      	adds	r3, r0, r4
 80049d2:	19db      	adds	r3, r3, r7
 80049d4:	1902      	adds	r2, r0, r4
 80049d6:	19d2      	adds	r2, r2, r7
 80049d8:	8812      	ldrh	r2, [r2, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	1902      	adds	r2, r0, r4
 80049e4:	19d2      	adds	r2, r2, r7
 80049e6:	8812      	ldrh	r2, [r2, #0]
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	e05e      	b.n	8004aaa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80049ec:	231a      	movs	r3, #26
 80049ee:	2220      	movs	r2, #32
 80049f0:	189b      	adds	r3, r3, r2
 80049f2:	19db      	adds	r3, r3, r7
 80049f4:	2201      	movs	r2, #1
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	e057      	b.n	8004aaa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049fa:	231b      	movs	r3, #27
 80049fc:	2220      	movs	r2, #32
 80049fe:	189b      	adds	r3, r3, r2
 8004a00:	19db      	adds	r3, r3, r7
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d015      	beq.n	8004a34 <UART_SetConfig+0x4d0>
 8004a08:	dc18      	bgt.n	8004a3c <UART_SetConfig+0x4d8>
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d00d      	beq.n	8004a2a <UART_SetConfig+0x4c6>
 8004a0e:	dc15      	bgt.n	8004a3c <UART_SetConfig+0x4d8>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <UART_SetConfig+0x4b6>
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d005      	beq.n	8004a24 <UART_SetConfig+0x4c0>
 8004a18:	e010      	b.n	8004a3c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7ff f815 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a22:	e014      	b.n	8004a4e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a24:	4b2d      	ldr	r3, [pc, #180]	; (8004adc <UART_SetConfig+0x578>)
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a28:	e011      	b.n	8004a4e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2a:	f7fe ff81 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a32:	e00c      	b.n	8004a4e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a3a:	e008      	b.n	8004a4e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004a40:	231a      	movs	r3, #26
 8004a42:	2220      	movs	r2, #32
 8004a44:	189b      	adds	r3, r3, r2
 8004a46:	19db      	adds	r3, r3, r7
 8004a48:	2201      	movs	r2, #1
 8004a4a:	701a      	strb	r2, [r3, #0]
        break;
 8004a4c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d02a      	beq.n	8004aaa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a58:	4b1f      	ldr	r3, [pc, #124]	; (8004ad8 <UART_SetConfig+0x574>)
 8004a5a:	0052      	lsls	r2, r2, #1
 8004a5c:	5ad3      	ldrh	r3, [r2, r3]
 8004a5e:	0019      	movs	r1, r3
 8004a60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a62:	f7fb fb61 	bl	8000128 <__udivsi3>
 8004a66:	0003      	movs	r3, r0
 8004a68:	001a      	movs	r2, r3
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	18d2      	adds	r2, r2, r3
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	0019      	movs	r1, r3
 8004a78:	0010      	movs	r0, r2
 8004a7a:	f7fb fb55 	bl	8000128 <__udivsi3>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	2b0f      	cmp	r3, #15
 8004a86:	d90a      	bls.n	8004a9e <UART_SetConfig+0x53a>
 8004a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8a:	2380      	movs	r3, #128	; 0x80
 8004a8c:	025b      	lsls	r3, r3, #9
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d205      	bcs.n	8004a9e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60da      	str	r2, [r3, #12]
 8004a9c:	e005      	b.n	8004aaa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004a9e:	231a      	movs	r3, #26
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	19db      	adds	r3, r3, r7
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	226a      	movs	r2, #106	; 0x6a
 8004aae:	2101      	movs	r1, #1
 8004ab0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	2268      	movs	r2, #104	; 0x68
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	2200      	movs	r2, #0
 8004abe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004ac6:	231a      	movs	r3, #26
 8004ac8:	2220      	movs	r2, #32
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	19db      	adds	r3, r3, r7
 8004ace:	781b      	ldrb	r3, [r3, #0]
}
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b010      	add	sp, #64	; 0x40
 8004ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ad8:	08006a7c 	.word	0x08006a7c
 8004adc:	00f42400 	.word	0x00f42400

08004ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	2208      	movs	r2, #8
 8004aee:	4013      	ands	r3, r2
 8004af0:	d00b      	beq.n	8004b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a4a      	ldr	r2, [pc, #296]	; (8004c24 <UART_AdvFeatureConfig+0x144>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	0019      	movs	r1, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4013      	ands	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4a43      	ldr	r2, [pc, #268]	; (8004c28 <UART_AdvFeatureConfig+0x148>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	2202      	movs	r2, #2
 8004b32:	4013      	ands	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4a3b      	ldr	r2, [pc, #236]	; (8004c2c <UART_AdvFeatureConfig+0x14c>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	2204      	movs	r2, #4
 8004b54:	4013      	ands	r3, r2
 8004b56:	d00b      	beq.n	8004b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <UART_AdvFeatureConfig+0x150>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	2210      	movs	r2, #16
 8004b76:	4013      	ands	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a2c      	ldr	r2, [pc, #176]	; (8004c34 <UART_AdvFeatureConfig+0x154>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	2220      	movs	r2, #32
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	4a25      	ldr	r2, [pc, #148]	; (8004c38 <UART_AdvFeatureConfig+0x158>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	2240      	movs	r2, #64	; 0x40
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <UART_AdvFeatureConfig+0x15c>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	035b      	lsls	r3, r3, #13
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d10b      	bne.n	8004bfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <UART_AdvFeatureConfig+0x160>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	2280      	movs	r2, #128	; 0x80
 8004c00:	4013      	ands	r3, r2
 8004c02:	d00b      	beq.n	8004c1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4a0e      	ldr	r2, [pc, #56]	; (8004c44 <UART_AdvFeatureConfig+0x164>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b002      	add	sp, #8
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	ffff7fff 	.word	0xffff7fff
 8004c28:	fffdffff 	.word	0xfffdffff
 8004c2c:	fffeffff 	.word	0xfffeffff
 8004c30:	fffbffff 	.word	0xfffbffff
 8004c34:	ffffefff 	.word	0xffffefff
 8004c38:	ffffdfff 	.word	0xffffdfff
 8004c3c:	ffefffff 	.word	0xffefffff
 8004c40:	ff9fffff 	.word	0xff9fffff
 8004c44:	fff7ffff 	.word	0xfff7ffff

08004c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b092      	sub	sp, #72	; 0x48
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2290      	movs	r2, #144	; 0x90
 8004c54:	2100      	movs	r1, #0
 8004c56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c58:	f7fc fb70 	bl	800133c <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2208      	movs	r2, #8
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d12d      	bne.n	8004cca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	0391      	lsls	r1, r2, #14
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4a47      	ldr	r2, [pc, #284]	; (8004d94 <UART_CheckIdleState+0x14c>)
 8004c78:	9200      	str	r2, [sp, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f000 f88e 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d022      	beq.n	8004cca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c84:	f3ef 8310 	mrs	r3, PRIMASK
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8e:	2301      	movs	r3, #1
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	f383 8810 	msr	PRIMASK, r3
}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2180      	movs	r1, #128	; 0x80
 8004ca6:	438a      	bics	r2, r1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	f383 8810 	msr	PRIMASK, r3
}
 8004cb4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2288      	movs	r2, #136	; 0x88
 8004cba:	2120      	movs	r1, #32
 8004cbc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2284      	movs	r2, #132	; 0x84
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e060      	b.n	8004d8c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d146      	bne.n	8004d66 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	2280      	movs	r2, #128	; 0x80
 8004cdc:	03d1      	lsls	r1, r2, #15
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4a2c      	ldr	r2, [pc, #176]	; (8004d94 <UART_CheckIdleState+0x14c>)
 8004ce2:	9200      	str	r2, [sp, #0]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f000 f859 	bl	8004d9c <UART_WaitOnFlagUntilTimeout>
 8004cea:	1e03      	subs	r3, r0, #0
 8004cec:	d03b      	beq.n	8004d66 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cee:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f383 8810 	msr	PRIMASK, r3
}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4922      	ldr	r1, [pc, #136]	; (8004d98 <UART_CheckIdleState+0x150>)
 8004d10:	400a      	ands	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f383 8810 	msr	PRIMASK, r3
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d20:	f3ef 8310 	mrs	r3, PRIMASK
 8004d24:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d26:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f383 8810 	msr	PRIMASK, r3
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2101      	movs	r1, #1
 8004d42:	438a      	bics	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f383 8810 	msr	PRIMASK, r3
}
 8004d50:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	228c      	movs	r2, #140	; 0x8c
 8004d56:	2120      	movs	r1, #32
 8004d58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2284      	movs	r2, #132	; 0x84
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e012      	b.n	8004d8c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2288      	movs	r2, #136	; 0x88
 8004d6a:	2120      	movs	r1, #32
 8004d6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	228c      	movs	r2, #140	; 0x8c
 8004d72:	2120      	movs	r1, #32
 8004d74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2284      	movs	r2, #132	; 0x84
 8004d86:	2100      	movs	r1, #0
 8004d88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b010      	add	sp, #64	; 0x40
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	01ffffff 	.word	0x01ffffff
 8004d98:	fffffedf 	.word	0xfffffedf

08004d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dac:	e051      	b.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3301      	adds	r3, #1
 8004db2:	d04e      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db4:	f7fc fac2 	bl	800133c <HAL_GetTick>
 8004db8:	0002      	movs	r2, r0
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d302      	bcc.n	8004dca <UART_WaitOnFlagUntilTimeout+0x2e>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e051      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d03b      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d038      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b40      	cmp	r3, #64	; 0x40
 8004de4:	d035      	beq.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	2208      	movs	r2, #8
 8004dee:	4013      	ands	r3, r2
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d111      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f000 f83c 	bl	8004e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2290      	movs	r2, #144	; 0x90
 8004e08:	2108      	movs	r1, #8
 8004e0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2284      	movs	r2, #132	; 0x84
 8004e10:	2100      	movs	r1, #0
 8004e12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e02c      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	401a      	ands	r2, r3
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d112      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2280      	movs	r2, #128	; 0x80
 8004e32:	0112      	lsls	r2, r2, #4
 8004e34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f000 f81f 	bl	8004e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2290      	movs	r2, #144	; 0x90
 8004e42:	2120      	movs	r1, #32
 8004e44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2284      	movs	r2, #132	; 0x84
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e00f      	b.n	8004e72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	425a      	negs	r2, r3
 8004e62:	4153      	adcs	r3, r2
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	001a      	movs	r2, r3
 8004e68:	1dfb      	adds	r3, r7, #7
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d09e      	beq.n	8004dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b004      	add	sp, #16
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08e      	sub	sp, #56	; 0x38
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e84:	f3ef 8310 	mrs	r3, PRIMASK
 8004e88:	617b      	str	r3, [r7, #20]
  return(result);
 8004e8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4926      	ldr	r1, [pc, #152]	; (8004f40 <UART_EndRxTransfer+0xc4>)
 8004ea6:	400a      	ands	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f383 8810 	msr	PRIMASK, r3
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eba:	623b      	str	r3, [r7, #32]
  return(result);
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	f383 8810 	msr	PRIMASK, r3
}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	491b      	ldr	r1, [pc, #108]	; (8004f44 <UART_EndRxTransfer+0xc8>)
 8004ed8:	400a      	ands	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	f383 8810 	msr	PRIMASK, r3
}
 8004ee6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d118      	bne.n	8004f22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004efa:	2301      	movs	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2110      	movs	r1, #16
 8004f12:	438a      	bics	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f383 8810 	msr	PRIMASK, r3
}
 8004f20:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	228c      	movs	r2, #140	; 0x8c
 8004f26:	2120      	movs	r1, #32
 8004f28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b00e      	add	sp, #56	; 0x38
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	fffffedf 	.word	0xfffffedf
 8004f44:	effffffe 	.word	0xeffffffe

08004f48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2284      	movs	r2, #132	; 0x84
 8004f54:	5c9b      	ldrb	r3, [r3, r2]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_UARTEx_DisableFifoMode+0x16>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e027      	b.n	8004fae <HAL_UARTEx_DisableFifoMode+0x66>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2284      	movs	r2, #132	; 0x84
 8004f62:	2101      	movs	r1, #1
 8004f64:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2288      	movs	r2, #136	; 0x88
 8004f6a:	2124      	movs	r1, #36	; 0x24
 8004f6c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2101      	movs	r1, #1
 8004f82:	438a      	bics	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a0b      	ldr	r2, [pc, #44]	; (8004fb8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2288      	movs	r2, #136	; 0x88
 8004fa0:	2120      	movs	r1, #32
 8004fa2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2284      	movs	r2, #132	; 0x84
 8004fa8:	2100      	movs	r1, #0
 8004faa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b004      	add	sp, #16
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	dfffffff 	.word	0xdfffffff

08004fbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2284      	movs	r2, #132	; 0x84
 8004fca:	5c9b      	ldrb	r3, [r3, r2]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e02e      	b.n	8005032 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2284      	movs	r2, #132	; 0x84
 8004fd8:	2101      	movs	r1, #1
 8004fda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2288      	movs	r2, #136	; 0x88
 8004fe0:	2124      	movs	r1, #36	; 0x24
 8004fe2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	438a      	bics	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	08d9      	lsrs	r1, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	0018      	movs	r0, r3
 8005014:	f000 f854 	bl	80050c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2288      	movs	r2, #136	; 0x88
 8005024:	2120      	movs	r1, #32
 8005026:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2284      	movs	r2, #132	; 0x84
 800502c:	2100      	movs	r1, #0
 800502e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b004      	add	sp, #16
 8005038:	bd80      	pop	{r7, pc}
	...

0800503c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2284      	movs	r2, #132	; 0x84
 800504a:	5c9b      	ldrb	r3, [r3, r2]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e02f      	b.n	80050b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2284      	movs	r2, #132	; 0x84
 8005058:	2101      	movs	r1, #1
 800505a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2288      	movs	r2, #136	; 0x88
 8005060:	2124      	movs	r1, #36	; 0x24
 8005062:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2101      	movs	r1, #1
 8005078:	438a      	bics	r2, r1
 800507a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	0018      	movs	r0, r3
 8005096:	f000 f813 	bl	80050c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2288      	movs	r2, #136	; 0x88
 80050a6:	2120      	movs	r1, #32
 80050a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2284      	movs	r2, #132	; 0x84
 80050ae:	2100      	movs	r1, #0
 80050b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	0018      	movs	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b004      	add	sp, #16
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	f1ffffff 	.word	0xf1ffffff

080050c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d108      	bne.n	80050e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	226a      	movs	r2, #106	; 0x6a
 80050d4:	2101      	movs	r1, #1
 80050d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2268      	movs	r2, #104	; 0x68
 80050dc:	2101      	movs	r1, #1
 80050de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050e0:	e043      	b.n	800516a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050e2:	260f      	movs	r6, #15
 80050e4:	19bb      	adds	r3, r7, r6
 80050e6:	2208      	movs	r2, #8
 80050e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050ea:	200e      	movs	r0, #14
 80050ec:	183b      	adds	r3, r7, r0
 80050ee:	2208      	movs	r2, #8
 80050f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	0e5b      	lsrs	r3, r3, #25
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	240d      	movs	r4, #13
 80050fe:	193b      	adds	r3, r7, r4
 8005100:	2107      	movs	r1, #7
 8005102:	400a      	ands	r2, r1
 8005104:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	0f5b      	lsrs	r3, r3, #29
 800510e:	b2da      	uxtb	r2, r3
 8005110:	250c      	movs	r5, #12
 8005112:	197b      	adds	r3, r7, r5
 8005114:	2107      	movs	r1, #7
 8005116:	400a      	ands	r2, r1
 8005118:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800511a:	183b      	adds	r3, r7, r0
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	197a      	adds	r2, r7, r5
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	4914      	ldr	r1, [pc, #80]	; (8005174 <UARTEx_SetNbDataToProcess+0xb4>)
 8005124:	5c8a      	ldrb	r2, [r1, r2]
 8005126:	435a      	muls	r2, r3
 8005128:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800512a:	197b      	adds	r3, r7, r5
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	4a12      	ldr	r2, [pc, #72]	; (8005178 <UARTEx_SetNbDataToProcess+0xb8>)
 8005130:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005132:	0019      	movs	r1, r3
 8005134:	f7fb f882 	bl	800023c <__divsi3>
 8005138:	0003      	movs	r3, r0
 800513a:	b299      	uxth	r1, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	226a      	movs	r2, #106	; 0x6a
 8005140:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005142:	19bb      	adds	r3, r7, r6
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	193a      	adds	r2, r7, r4
 8005148:	7812      	ldrb	r2, [r2, #0]
 800514a:	490a      	ldr	r1, [pc, #40]	; (8005174 <UARTEx_SetNbDataToProcess+0xb4>)
 800514c:	5c8a      	ldrb	r2, [r1, r2]
 800514e:	435a      	muls	r2, r3
 8005150:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005152:	193b      	adds	r3, r7, r4
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	4a08      	ldr	r2, [pc, #32]	; (8005178 <UARTEx_SetNbDataToProcess+0xb8>)
 8005158:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800515a:	0019      	movs	r1, r3
 800515c:	f7fb f86e 	bl	800023c <__divsi3>
 8005160:	0003      	movs	r3, r0
 8005162:	b299      	uxth	r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2268      	movs	r2, #104	; 0x68
 8005168:	5299      	strh	r1, [r3, r2]
}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	b005      	add	sp, #20
 8005170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	08006a94 	.word	0x08006a94
 8005178:	08006a9c 	.word	0x08006a9c

0800517c <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b087      	sub	sp, #28
 8005180:	af02      	add	r7, sp, #8
 8005182:	0002      	movs	r2, r0
 8005184:	1dfb      	adds	r3, r7, #7
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	1dbb      	adds	r3, r7, #6
 800518a:	1c0a      	adds	r2, r1, #0
 800518c:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 800518e:	1dfb      	adds	r3, r7, #7
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	4a16      	ldr	r2, [pc, #88]	; (80051ec <I2C_LCD_ExpanderWrite+0x70>)
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	18d3      	adds	r3, r2, r3
 8005198:	3301      	adds	r3, #1
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	1dbb      	adds	r3, r7, #6
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	240f      	movs	r4, #15
 80051a6:	193b      	adds	r3, r7, r4
 80051a8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 80051aa:	1dfb      	adds	r3, r7, #7
 80051ac:	781a      	ldrb	r2, [r3, #0]
 80051ae:	4910      	ldr	r1, [pc, #64]	; (80051f0 <I2C_LCD_ExpanderWrite+0x74>)
 80051b0:	0013      	movs	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	18cb      	adds	r3, r1, r3
 80051ba:	3304      	adds	r3, #4
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	1dfb      	adds	r3, r7, #7
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	490b      	ldr	r1, [pc, #44]	; (80051f0 <I2C_LCD_ExpanderWrite+0x74>)
 80051c4:	0013      	movs	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	18cb      	adds	r3, r1, r3
 80051ce:	3308      	adds	r3, #8
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	18db      	adds	r3, r3, r3
 80051d6:	b299      	uxth	r1, r3
 80051d8:	193a      	adds	r2, r7, r4
 80051da:	2364      	movs	r3, #100	; 0x64
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	2301      	movs	r3, #1
 80051e0:	f7fd fa3c 	bl	800265c <HAL_I2C_Master_Transmit>
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b005      	add	sp, #20
 80051ea:	bd90      	pop	{r4, r7, pc}
 80051ec:	20000224 	.word	0x20000224
 80051f0:	08006aa4 	.word	0x08006aa4

080051f4 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	0002      	movs	r2, r0
 80051fc:	1dfb      	adds	r3, r7, #7
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	1dbb      	adds	r3, r7, #6
 8005202:	1c0a      	adds	r2, r1, #0
 8005204:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8005206:	1dbb      	adds	r3, r7, #6
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2204      	movs	r2, #4
 800520c:	4313      	orrs	r3, r2
 800520e:	b2da      	uxtb	r2, r3
 8005210:	1dfb      	adds	r3, r7, #7
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	0011      	movs	r1, r2
 8005216:	0018      	movs	r0, r3
 8005218:	f7ff ffb0 	bl	800517c <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <I2C_LCD_EnPulse+0xc0>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	4b25      	ldr	r3, [pc, #148]	; (80052b8 <I2C_LCD_EnPulse+0xc4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4925      	ldr	r1, [pc, #148]	; (80052bc <I2C_LCD_EnPulse+0xc8>)
 8005228:	0018      	movs	r0, r3
 800522a:	f7fa ff7d 	bl	8000128 <__udivsi3>
 800522e:	0003      	movs	r3, r0
 8005230:	005c      	lsls	r4, r3, #1
 8005232:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <I2C_LCD_EnPulse+0xc4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4921      	ldr	r1, [pc, #132]	; (80052bc <I2C_LCD_EnPulse+0xc8>)
 8005238:	0018      	movs	r0, r3
 800523a:	f7fa ff75 	bl	8000128 <__udivsi3>
 800523e:	0003      	movs	r3, r0
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	1ae3      	subs	r3, r4, r3
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <I2C_LCD_EnPulse+0xc0>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	429a      	cmp	r2, r3
 8005252:	d8f8      	bhi.n	8005246 <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8005254:	1dbb      	adds	r3, r7, #6
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2204      	movs	r2, #4
 800525a:	4393      	bics	r3, r2
 800525c:	b2da      	uxtb	r2, r3
 800525e:	1dfb      	adds	r3, r7, #7
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	0011      	movs	r1, r2
 8005264:	0018      	movs	r0, r3
 8005266:	f7ff ff89 	bl	800517c <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 800526a:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <I2C_LCD_EnPulse+0xc0>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <I2C_LCD_EnPulse+0xc4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4911      	ldr	r1, [pc, #68]	; (80052bc <I2C_LCD_EnPulse+0xc8>)
 8005276:	0018      	movs	r0, r3
 8005278:	f7fa ff56 	bl	8000128 <__udivsi3>
 800527c:	0003      	movs	r3, r0
 800527e:	001a      	movs	r2, r3
 8005280:	2332      	movs	r3, #50	; 0x32
 8005282:	4353      	muls	r3, r2
 8005284:	001c      	movs	r4, r3
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <I2C_LCD_EnPulse+0xc4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	490c      	ldr	r1, [pc, #48]	; (80052bc <I2C_LCD_EnPulse+0xc8>)
 800528c:	0018      	movs	r0, r3
 800528e:	f7fa ff4b 	bl	8000128 <__udivsi3>
 8005292:	0003      	movs	r3, r0
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	1ae3      	subs	r3, r4, r3
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <I2C_LCD_EnPulse+0xc0>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d8f8      	bhi.n	800529a <I2C_LCD_EnPulse+0xa6>
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b007      	add	sp, #28
 80052b0:	bd90      	pop	{r4, r7, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	e000e010 	.word	0xe000e010
 80052b8:	20000000 	.word	0x20000000
 80052bc:	000f4240 	.word	0x000f4240

080052c0 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	0002      	movs	r2, r0
 80052c8:	1dfb      	adds	r3, r7, #7
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	1dbb      	adds	r3, r7, #6
 80052ce:	1c0a      	adds	r2, r1, #0
 80052d0:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 80052d2:	1dbb      	adds	r3, r7, #6
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	1dfb      	adds	r3, r7, #7
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	0011      	movs	r1, r2
 80052dc:	0018      	movs	r0, r3
 80052de:	f7ff ff4d 	bl	800517c <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 80052e2:	1dbb      	adds	r3, r7, #6
 80052e4:	781a      	ldrb	r2, [r3, #0]
 80052e6:	1dfb      	adds	r3, r7, #7
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	0011      	movs	r1, r2
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7ff ff81 	bl	80051f4 <I2C_LCD_EnPulse>
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b002      	add	sp, #8
 80052f8:	bd80      	pop	{r7, pc}

080052fa <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 80052fa:	b590      	push	{r4, r7, lr}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	0004      	movs	r4, r0
 8005302:	0008      	movs	r0, r1
 8005304:	0011      	movs	r1, r2
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	1c22      	adds	r2, r4, #0
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	1dbb      	adds	r3, r7, #6
 800530e:	1c02      	adds	r2, r0, #0
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	1d7b      	adds	r3, r7, #5
 8005314:	1c0a      	adds	r2, r1, #0
 8005316:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8005318:	200f      	movs	r0, #15
 800531a:	183b      	adds	r3, r7, r0
 800531c:	1dba      	adds	r2, r7, #6
 800531e:	7812      	ldrb	r2, [r2, #0]
 8005320:	210f      	movs	r1, #15
 8005322:	438a      	bics	r2, r1
 8005324:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8005326:	1dbb      	adds	r3, r7, #6
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	011a      	lsls	r2, r3, #4
 800532c:	240e      	movs	r4, #14
 800532e:	193b      	adds	r3, r7, r4
 8005330:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8005332:	183a      	adds	r2, r7, r0
 8005334:	1d7b      	adds	r3, r7, #5
 8005336:	7812      	ldrb	r2, [r2, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	4313      	orrs	r3, r2
 800533c:	b2da      	uxtb	r2, r3
 800533e:	1dfb      	adds	r3, r7, #7
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	0011      	movs	r1, r2
 8005344:	0018      	movs	r0, r3
 8005346:	f7ff ffbb 	bl	80052c0 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800534a:	193a      	adds	r2, r7, r4
 800534c:	1d7b      	adds	r3, r7, #5
 800534e:	7812      	ldrb	r2, [r2, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	4313      	orrs	r3, r2
 8005354:	b2da      	uxtb	r2, r3
 8005356:	1dfb      	adds	r3, r7, #7
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	0011      	movs	r1, r2
 800535c:	0018      	movs	r0, r3
 800535e:	f7ff ffaf 	bl	80052c0 <I2C_LCD_Write4Bits>
}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	46bd      	mov	sp, r7
 8005366:	b005      	add	sp, #20
 8005368:	bd90      	pop	{r4, r7, pc}

0800536a <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	0002      	movs	r2, r0
 8005372:	1dfb      	adds	r3, r7, #7
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	1dbb      	adds	r3, r7, #6
 8005378:	1c0a      	adds	r2, r1, #0
 800537a:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 800537c:	1dbb      	adds	r3, r7, #6
 800537e:	7819      	ldrb	r1, [r3, #0]
 8005380:	1dfb      	adds	r3, r7, #7
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2200      	movs	r2, #0
 8005386:	0018      	movs	r0, r3
 8005388:	f7ff ffb7 	bl	80052fa <I2C_LCD_Send>
}
 800538c:	46c0      	nop			; (mov r8, r8)
 800538e:	46bd      	mov	sp, r7
 8005390:	b002      	add	sp, #8
 8005392:	bd80      	pop	{r7, pc}

08005394 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	0002      	movs	r2, r0
 800539c:	1dfb      	adds	r3, r7, #7
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	1dbb      	adds	r3, r7, #6
 80053a2:	1c0a      	adds	r2, r1, #0
 80053a4:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80053a6:	1dbb      	adds	r3, r7, #6
 80053a8:	7819      	ldrb	r1, [r3, #0]
 80053aa:	1dfb      	adds	r3, r7, #7
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2201      	movs	r2, #1
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7ff ffa2 	bl	80052fa <I2C_LCD_Send>
}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	46bd      	mov	sp, r7
 80053ba:	b002      	add	sp, #8
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b08b      	sub	sp, #44	; 0x2c
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	0002      	movs	r2, r0
 80053c8:	1dfb      	adds	r3, r7, #7
 80053ca:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	f7fb ffb5 	bl	800133c <HAL_GetTick>
 80053d2:	0003      	movs	r3, r0
 80053d4:	2b31      	cmp	r3, #49	; 0x31
 80053d6:	d9fa      	bls.n	80053ce <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80053d8:	1dfb      	adds	r3, r7, #7
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2130      	movs	r1, #48	; 0x30
 80053de:	0018      	movs	r0, r3
 80053e0:	f7ff ffc3 	bl	800536a <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80053e4:	2300      	movs	r3, #0
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
 80053e8:	e025      	b.n	8005436 <I2C_LCD_Init+0x76>
 80053ea:	4b57      	ldr	r3, [pc, #348]	; (8005548 <I2C_LCD_Init+0x188>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	4b56      	ldr	r3, [pc, #344]	; (800554c <I2C_LCD_Init+0x18c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4956      	ldr	r1, [pc, #344]	; (8005550 <I2C_LCD_Init+0x190>)
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7fa fe96 	bl	8000128 <__udivsi3>
 80053fc:	0003      	movs	r3, r0
 80053fe:	001a      	movs	r2, r3
 8005400:	0013      	movs	r3, r2
 8005402:	015b      	lsls	r3, r3, #5
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	189b      	adds	r3, r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	001c      	movs	r4, r3
 800540e:	4b4f      	ldr	r3, [pc, #316]	; (800554c <I2C_LCD_Init+0x18c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	494f      	ldr	r1, [pc, #316]	; (8005550 <I2C_LCD_Init+0x190>)
 8005414:	0018      	movs	r0, r3
 8005416:	f7fa fe87 	bl	8000128 <__udivsi3>
 800541a:	0003      	movs	r3, r0
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	1ae3      	subs	r3, r4, r3
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	4b49      	ldr	r3, [pc, #292]	; (8005548 <I2C_LCD_Init+0x188>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	d8f8      	bhi.n	8005422 <I2C_LCD_Init+0x62>
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	3301      	adds	r3, #1
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	2b04      	cmp	r3, #4
 800543a:	d9d6      	bls.n	80053ea <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800543c:	1dfb      	adds	r3, r7, #7
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2130      	movs	r1, #48	; 0x30
 8005442:	0018      	movs	r0, r3
 8005444:	f7ff ff91 	bl	800536a <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8005448:	2300      	movs	r3, #0
 800544a:	623b      	str	r3, [r7, #32]
 800544c:	e025      	b.n	800549a <I2C_LCD_Init+0xda>
 800544e:	4b3e      	ldr	r3, [pc, #248]	; (8005548 <I2C_LCD_Init+0x188>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	4b3d      	ldr	r3, [pc, #244]	; (800554c <I2C_LCD_Init+0x18c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	493d      	ldr	r1, [pc, #244]	; (8005550 <I2C_LCD_Init+0x190>)
 800545a:	0018      	movs	r0, r3
 800545c:	f7fa fe64 	bl	8000128 <__udivsi3>
 8005460:	0003      	movs	r3, r0
 8005462:	001a      	movs	r2, r3
 8005464:	0013      	movs	r3, r2
 8005466:	015b      	lsls	r3, r3, #5
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	189b      	adds	r3, r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	001c      	movs	r4, r3
 8005472:	4b36      	ldr	r3, [pc, #216]	; (800554c <I2C_LCD_Init+0x18c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4936      	ldr	r1, [pc, #216]	; (8005550 <I2C_LCD_Init+0x190>)
 8005478:	0018      	movs	r0, r3
 800547a:	f7fa fe55 	bl	8000128 <__udivsi3>
 800547e:	0003      	movs	r3, r0
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	1ae3      	subs	r3, r4, r3
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	4b30      	ldr	r3, [pc, #192]	; (8005548 <I2C_LCD_Init+0x188>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	429a      	cmp	r2, r3
 8005492:	d8f8      	bhi.n	8005486 <I2C_LCD_Init+0xc6>
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	3301      	adds	r3, #1
 8005498:	623b      	str	r3, [r7, #32]
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	2b04      	cmp	r3, #4
 800549e:	d9d6      	bls.n	800544e <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80054a0:	1dfb      	adds	r3, r7, #7
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2130      	movs	r1, #48	; 0x30
 80054a6:	0018      	movs	r0, r3
 80054a8:	f7ff ff5f 	bl	800536a <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80054ac:	4b26      	ldr	r3, [pc, #152]	; (8005548 <I2C_LCD_Init+0x188>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	4b26      	ldr	r3, [pc, #152]	; (800554c <I2C_LCD_Init+0x18c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4926      	ldr	r1, [pc, #152]	; (8005550 <I2C_LCD_Init+0x190>)
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7fa fe35 	bl	8000128 <__udivsi3>
 80054be:	0003      	movs	r3, r0
 80054c0:	001a      	movs	r2, r3
 80054c2:	2396      	movs	r3, #150	; 0x96
 80054c4:	4353      	muls	r3, r2
 80054c6:	001c      	movs	r4, r3
 80054c8:	4b20      	ldr	r3, [pc, #128]	; (800554c <I2C_LCD_Init+0x18c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4920      	ldr	r1, [pc, #128]	; (8005550 <I2C_LCD_Init+0x190>)
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7fa fe2a 	bl	8000128 <__udivsi3>
 80054d4:	0003      	movs	r3, r0
 80054d6:	085b      	lsrs	r3, r3, #1
 80054d8:	1ae3      	subs	r3, r4, r3
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <I2C_LCD_Init+0x188>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d8f8      	bhi.n	80054dc <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80054ea:	1dfb      	adds	r3, r7, #7
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2102      	movs	r1, #2
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7ff ff3a 	bl	800536a <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80054f6:	1dfb      	adds	r3, r7, #7
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2128      	movs	r1, #40	; 0x28
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7ff ff34 	bl	800536a <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8005502:	1dfb      	adds	r3, r7, #7
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	210c      	movs	r1, #12
 8005508:	0018      	movs	r0, r3
 800550a:	f7ff ff2e 	bl	800536a <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 800550e:	1dfb      	adds	r3, r7, #7
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2106      	movs	r1, #6
 8005514:	0018      	movs	r0, r3
 8005516:	f7ff ff28 	bl	800536a <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800551a:	1dfb      	adds	r3, r7, #7
 800551c:	781a      	ldrb	r2, [r3, #0]
 800551e:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <I2C_LCD_Init+0x194>)
 8005520:	0052      	lsls	r2, r2, #1
 8005522:	2104      	movs	r1, #4
 8005524:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8005526:	1dfb      	adds	r3, r7, #7
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	4a0a      	ldr	r2, [pc, #40]	; (8005554 <I2C_LCD_Init+0x194>)
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	18d3      	adds	r3, r2, r3
 8005530:	3301      	adds	r3, #1
 8005532:	2208      	movs	r2, #8
 8005534:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8005536:	1dfb      	adds	r3, r7, #7
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	0018      	movs	r0, r3
 800553c:	f000 f80c 	bl	8005558 <I2C_LCD_Clear>
}
 8005540:	46c0      	nop			; (mov r8, r8)
 8005542:	46bd      	mov	sp, r7
 8005544:	b00b      	add	sp, #44	; 0x2c
 8005546:	bd90      	pop	{r4, r7, pc}
 8005548:	e000e010 	.word	0xe000e010
 800554c:	20000000 	.word	0x20000000
 8005550:	000f4240 	.word	0x000f4240
 8005554:	20000224 	.word	0x20000224

08005558 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	0002      	movs	r2, r0
 8005560:	1dfb      	adds	r3, r7, #7
 8005562:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8005564:	1dfb      	adds	r3, r7, #7
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2101      	movs	r1, #1
 800556a:	0018      	movs	r0, r3
 800556c:	f7ff fefd 	bl	800536a <I2C_LCD_Cmd>
    DELAY_MS(2);
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	e025      	b.n	80055c2 <I2C_LCD_Clear+0x6a>
 8005576:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <I2C_LCD_Clear+0x7c>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <I2C_LCD_Clear+0x80>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4916      	ldr	r1, [pc, #88]	; (80055dc <I2C_LCD_Clear+0x84>)
 8005582:	0018      	movs	r0, r3
 8005584:	f7fa fdd0 	bl	8000128 <__udivsi3>
 8005588:	0003      	movs	r3, r0
 800558a:	001a      	movs	r2, r3
 800558c:	0013      	movs	r3, r2
 800558e:	015b      	lsls	r3, r3, #5
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	189b      	adds	r3, r3, r2
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	001c      	movs	r4, r3
 800559a:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <I2C_LCD_Clear+0x80>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	490f      	ldr	r1, [pc, #60]	; (80055dc <I2C_LCD_Clear+0x84>)
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7fa fdc1 	bl	8000128 <__udivsi3>
 80055a6:	0003      	movs	r3, r0
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	1ae3      	subs	r3, r4, r3
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	4b09      	ldr	r3, [pc, #36]	; (80055d4 <I2C_LCD_Clear+0x7c>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d8f8      	bhi.n	80055ae <I2C_LCD_Clear+0x56>
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	3301      	adds	r3, #1
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d9d6      	bls.n	8005576 <I2C_LCD_Clear+0x1e>
}
 80055c8:	46c0      	nop			; (mov r8, r8)
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b007      	add	sp, #28
 80055d0:	bd90      	pop	{r4, r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	e000e010 	.word	0xe000e010
 80055d8:	20000000 	.word	0x20000000
 80055dc:	000f4240 	.word	0x000f4240

080055e0 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	0004      	movs	r4, r0
 80055e8:	0008      	movs	r0, r1
 80055ea:	0011      	movs	r1, r2
 80055ec:	1dfb      	adds	r3, r7, #7
 80055ee:	1c22      	adds	r2, r4, #0
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	1dbb      	adds	r3, r7, #6
 80055f4:	1c02      	adds	r2, r0, #0
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	1d7b      	adds	r3, r7, #5
 80055fa:	1c0a      	adds	r2, r1, #0
 80055fc:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80055fe:	2308      	movs	r3, #8
 8005600:	18fb      	adds	r3, r7, r3
 8005602:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <I2C_LCD_SetCursor+0x98>)
 8005604:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005606:	c313      	stmia	r3!, {r0, r1, r4}
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800560c:	1dfb      	adds	r3, r7, #7
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	491a      	ldr	r1, [pc, #104]	; (800567c <I2C_LCD_SetCursor+0x9c>)
 8005612:	0013      	movs	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	189b      	adds	r3, r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	18cb      	adds	r3, r1, r3
 800561c:	330a      	adds	r3, #10
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	1d7a      	adds	r2, r7, #5
 8005622:	7812      	ldrb	r2, [r2, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d90c      	bls.n	8005642 <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8005628:	1dfb      	adds	r3, r7, #7
 800562a:	781a      	ldrb	r2, [r3, #0]
 800562c:	4913      	ldr	r1, [pc, #76]	; (800567c <I2C_LCD_SetCursor+0x9c>)
 800562e:	0013      	movs	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	189b      	adds	r3, r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	18cb      	adds	r3, r1, r3
 8005638:	330a      	adds	r3, #10
 800563a:	781a      	ldrb	r2, [r3, #0]
 800563c:	1d7b      	adds	r3, r7, #5
 800563e:	3a01      	subs	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8005642:	1d7b      	adds	r3, r7, #5
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	2308      	movs	r3, #8
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	0092      	lsls	r2, r2, #2
 800564c:	58d3      	ldr	r3, [r2, r3]
 800564e:	b2da      	uxtb	r2, r3
 8005650:	1dbb      	adds	r3, r7, #6
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	18d3      	adds	r3, r2, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	b25b      	sxtb	r3, r3
 800565a:	2280      	movs	r2, #128	; 0x80
 800565c:	4252      	negs	r2, r2
 800565e:	4313      	orrs	r3, r2
 8005660:	b25b      	sxtb	r3, r3
 8005662:	b2da      	uxtb	r2, r3
 8005664:	1dfb      	adds	r3, r7, #7
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	0011      	movs	r1, r2
 800566a:	0018      	movs	r0, r3
 800566c:	f7ff fe7d 	bl	800536a <I2C_LCD_Cmd>
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b007      	add	sp, #28
 8005676:	bd90      	pop	{r4, r7, pc}
 8005678:	08006a0c 	.word	0x08006a0c
 800567c:	08006aa4 	.word	0x08006aa4

08005680 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	0002      	movs	r2, r0
 8005688:	6039      	str	r1, [r7, #0]
 800568a:	1dfb      	adds	r3, r7, #7
 800568c:	701a      	strb	r2, [r3, #0]
    while (*Str)
 800568e:	e009      	b.n	80056a4 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	603a      	str	r2, [r7, #0]
 8005696:	781a      	ldrb	r2, [r3, #0]
 8005698:	1dfb      	adds	r3, r7, #7
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	0011      	movs	r1, r2
 800569e:	0018      	movs	r0, r3
 80056a0:	f7ff fe78 	bl	8005394 <I2C_LCD_Data>
    while (*Str)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f1      	bne.n	8005690 <I2C_LCD_WriteString+0x10>
    }
}
 80056ac:	46c0      	nop			; (mov r8, r8)
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b002      	add	sp, #8
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <I2C_LCD_ShiftLeft>:

void I2C_LCD_ShiftLeft(uint8_t I2C_LCD_InstanceIndex)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	0002      	movs	r2, r0
 80056be:	1dfb      	adds	r3, r7, #7
 80056c0:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80056c2:	1dfb      	adds	r3, r7, #7
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2118      	movs	r1, #24
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7ff fe4e 	bl	800536a <I2C_LCD_Cmd>
}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b002      	add	sp, #8
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <I2C_LCD_ShiftRight>:

void I2C_LCD_ShiftRight(uint8_t I2C_LCD_InstanceIndex)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	0002      	movs	r2, r0
 80056de:	1dfb      	adds	r3, r7, #7
 80056e0:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 80056e2:	1dfb      	adds	r3, r7, #7
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	211c      	movs	r1, #28
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff fe3e 	bl	800536a <I2C_LCD_Cmd>
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b002      	add	sp, #8
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <std>:
 80056f8:	2300      	movs	r3, #0
 80056fa:	b510      	push	{r4, lr}
 80056fc:	0004      	movs	r4, r0
 80056fe:	6003      	str	r3, [r0, #0]
 8005700:	6043      	str	r3, [r0, #4]
 8005702:	6083      	str	r3, [r0, #8]
 8005704:	8181      	strh	r1, [r0, #12]
 8005706:	6643      	str	r3, [r0, #100]	; 0x64
 8005708:	81c2      	strh	r2, [r0, #14]
 800570a:	6103      	str	r3, [r0, #16]
 800570c:	6143      	str	r3, [r0, #20]
 800570e:	6183      	str	r3, [r0, #24]
 8005710:	0019      	movs	r1, r3
 8005712:	2208      	movs	r2, #8
 8005714:	305c      	adds	r0, #92	; 0x5c
 8005716:	f000 f92f 	bl	8005978 <memset>
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <std+0x50>)
 800571c:	6224      	str	r4, [r4, #32]
 800571e:	6263      	str	r3, [r4, #36]	; 0x24
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <std+0x54>)
 8005722:	62a3      	str	r3, [r4, #40]	; 0x28
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <std+0x58>)
 8005726:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <std+0x5c>)
 800572a:	6323      	str	r3, [r4, #48]	; 0x30
 800572c:	4b0a      	ldr	r3, [pc, #40]	; (8005758 <std+0x60>)
 800572e:	429c      	cmp	r4, r3
 8005730:	d005      	beq.n	800573e <std+0x46>
 8005732:	4b0a      	ldr	r3, [pc, #40]	; (800575c <std+0x64>)
 8005734:	429c      	cmp	r4, r3
 8005736:	d002      	beq.n	800573e <std+0x46>
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <std+0x68>)
 800573a:	429c      	cmp	r4, r3
 800573c:	d103      	bne.n	8005746 <std+0x4e>
 800573e:	0020      	movs	r0, r4
 8005740:	3058      	adds	r0, #88	; 0x58
 8005742:	f000 f999 	bl	8005a78 <__retarget_lock_init_recursive>
 8005746:	bd10      	pop	{r4, pc}
 8005748:	080058e1 	.word	0x080058e1
 800574c:	08005909 	.word	0x08005909
 8005750:	08005941 	.word	0x08005941
 8005754:	0800596d 	.word	0x0800596d
 8005758:	20000228 	.word	0x20000228
 800575c:	20000290 	.word	0x20000290
 8005760:	200002f8 	.word	0x200002f8

08005764 <stdio_exit_handler>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4a03      	ldr	r2, [pc, #12]	; (8005774 <stdio_exit_handler+0x10>)
 8005768:	4903      	ldr	r1, [pc, #12]	; (8005778 <stdio_exit_handler+0x14>)
 800576a:	4804      	ldr	r0, [pc, #16]	; (800577c <stdio_exit_handler+0x18>)
 800576c:	f000 f86c 	bl	8005848 <_fwalk_sglue>
 8005770:	bd10      	pop	{r4, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	2000000c 	.word	0x2000000c
 8005778:	080065dd 	.word	0x080065dd
 800577c:	20000018 	.word	0x20000018

08005780 <cleanup_stdio>:
 8005780:	6841      	ldr	r1, [r0, #4]
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <cleanup_stdio+0x30>)
 8005784:	b510      	push	{r4, lr}
 8005786:	0004      	movs	r4, r0
 8005788:	4299      	cmp	r1, r3
 800578a:	d001      	beq.n	8005790 <cleanup_stdio+0x10>
 800578c:	f000 ff26 	bl	80065dc <_fflush_r>
 8005790:	68a1      	ldr	r1, [r4, #8]
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <cleanup_stdio+0x34>)
 8005794:	4299      	cmp	r1, r3
 8005796:	d002      	beq.n	800579e <cleanup_stdio+0x1e>
 8005798:	0020      	movs	r0, r4
 800579a:	f000 ff1f 	bl	80065dc <_fflush_r>
 800579e:	68e1      	ldr	r1, [r4, #12]
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <cleanup_stdio+0x38>)
 80057a2:	4299      	cmp	r1, r3
 80057a4:	d002      	beq.n	80057ac <cleanup_stdio+0x2c>
 80057a6:	0020      	movs	r0, r4
 80057a8:	f000 ff18 	bl	80065dc <_fflush_r>
 80057ac:	bd10      	pop	{r4, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	20000228 	.word	0x20000228
 80057b4:	20000290 	.word	0x20000290
 80057b8:	200002f8 	.word	0x200002f8

080057bc <global_stdio_init.part.0>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <global_stdio_init.part.0+0x28>)
 80057c0:	4a09      	ldr	r2, [pc, #36]	; (80057e8 <global_stdio_init.part.0+0x2c>)
 80057c2:	2104      	movs	r1, #4
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	4809      	ldr	r0, [pc, #36]	; (80057ec <global_stdio_init.part.0+0x30>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	f7ff ff95 	bl	80056f8 <std>
 80057ce:	2201      	movs	r2, #1
 80057d0:	2109      	movs	r1, #9
 80057d2:	4807      	ldr	r0, [pc, #28]	; (80057f0 <global_stdio_init.part.0+0x34>)
 80057d4:	f7ff ff90 	bl	80056f8 <std>
 80057d8:	2202      	movs	r2, #2
 80057da:	2112      	movs	r1, #18
 80057dc:	4805      	ldr	r0, [pc, #20]	; (80057f4 <global_stdio_init.part.0+0x38>)
 80057de:	f7ff ff8b 	bl	80056f8 <std>
 80057e2:	bd10      	pop	{r4, pc}
 80057e4:	20000360 	.word	0x20000360
 80057e8:	08005765 	.word	0x08005765
 80057ec:	20000228 	.word	0x20000228
 80057f0:	20000290 	.word	0x20000290
 80057f4:	200002f8 	.word	0x200002f8

080057f8 <__sfp_lock_acquire>:
 80057f8:	b510      	push	{r4, lr}
 80057fa:	4802      	ldr	r0, [pc, #8]	; (8005804 <__sfp_lock_acquire+0xc>)
 80057fc:	f000 f93d 	bl	8005a7a <__retarget_lock_acquire_recursive>
 8005800:	bd10      	pop	{r4, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	20000369 	.word	0x20000369

08005808 <__sfp_lock_release>:
 8005808:	b510      	push	{r4, lr}
 800580a:	4802      	ldr	r0, [pc, #8]	; (8005814 <__sfp_lock_release+0xc>)
 800580c:	f000 f936 	bl	8005a7c <__retarget_lock_release_recursive>
 8005810:	bd10      	pop	{r4, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	20000369 	.word	0x20000369

08005818 <__sinit>:
 8005818:	b510      	push	{r4, lr}
 800581a:	0004      	movs	r4, r0
 800581c:	f7ff ffec 	bl	80057f8 <__sfp_lock_acquire>
 8005820:	6a23      	ldr	r3, [r4, #32]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <__sinit+0x14>
 8005826:	f7ff ffef 	bl	8005808 <__sfp_lock_release>
 800582a:	bd10      	pop	{r4, pc}
 800582c:	4b04      	ldr	r3, [pc, #16]	; (8005840 <__sinit+0x28>)
 800582e:	6223      	str	r3, [r4, #32]
 8005830:	4b04      	ldr	r3, [pc, #16]	; (8005844 <__sinit+0x2c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f6      	bne.n	8005826 <__sinit+0xe>
 8005838:	f7ff ffc0 	bl	80057bc <global_stdio_init.part.0>
 800583c:	e7f3      	b.n	8005826 <__sinit+0xe>
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	08005781 	.word	0x08005781
 8005844:	20000360 	.word	0x20000360

08005848 <_fwalk_sglue>:
 8005848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800584a:	0014      	movs	r4, r2
 800584c:	2600      	movs	r6, #0
 800584e:	9000      	str	r0, [sp, #0]
 8005850:	9101      	str	r1, [sp, #4]
 8005852:	68a5      	ldr	r5, [r4, #8]
 8005854:	6867      	ldr	r7, [r4, #4]
 8005856:	3f01      	subs	r7, #1
 8005858:	d504      	bpl.n	8005864 <_fwalk_sglue+0x1c>
 800585a:	6824      	ldr	r4, [r4, #0]
 800585c:	2c00      	cmp	r4, #0
 800585e:	d1f8      	bne.n	8005852 <_fwalk_sglue+0xa>
 8005860:	0030      	movs	r0, r6
 8005862:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005864:	89ab      	ldrh	r3, [r5, #12]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d908      	bls.n	800587c <_fwalk_sglue+0x34>
 800586a:	220e      	movs	r2, #14
 800586c:	5eab      	ldrsh	r3, [r5, r2]
 800586e:	3301      	adds	r3, #1
 8005870:	d004      	beq.n	800587c <_fwalk_sglue+0x34>
 8005872:	0029      	movs	r1, r5
 8005874:	9800      	ldr	r0, [sp, #0]
 8005876:	9b01      	ldr	r3, [sp, #4]
 8005878:	4798      	blx	r3
 800587a:	4306      	orrs	r6, r0
 800587c:	3568      	adds	r5, #104	; 0x68
 800587e:	e7ea      	b.n	8005856 <_fwalk_sglue+0xe>

08005880 <iprintf>:
 8005880:	b40f      	push	{r0, r1, r2, r3}
 8005882:	b507      	push	{r0, r1, r2, lr}
 8005884:	4905      	ldr	r1, [pc, #20]	; (800589c <iprintf+0x1c>)
 8005886:	ab04      	add	r3, sp, #16
 8005888:	6808      	ldr	r0, [r1, #0]
 800588a:	cb04      	ldmia	r3!, {r2}
 800588c:	6881      	ldr	r1, [r0, #8]
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	f000 fb7e 	bl	8005f90 <_vfiprintf_r>
 8005894:	b003      	add	sp, #12
 8005896:	bc08      	pop	{r3}
 8005898:	b004      	add	sp, #16
 800589a:	4718      	bx	r3
 800589c:	20000064 	.word	0x20000064

080058a0 <siprintf>:
 80058a0:	b40e      	push	{r1, r2, r3}
 80058a2:	b500      	push	{lr}
 80058a4:	490b      	ldr	r1, [pc, #44]	; (80058d4 <siprintf+0x34>)
 80058a6:	b09c      	sub	sp, #112	; 0x70
 80058a8:	ab1d      	add	r3, sp, #116	; 0x74
 80058aa:	9002      	str	r0, [sp, #8]
 80058ac:	9006      	str	r0, [sp, #24]
 80058ae:	9107      	str	r1, [sp, #28]
 80058b0:	9104      	str	r1, [sp, #16]
 80058b2:	4809      	ldr	r0, [pc, #36]	; (80058d8 <siprintf+0x38>)
 80058b4:	4909      	ldr	r1, [pc, #36]	; (80058dc <siprintf+0x3c>)
 80058b6:	cb04      	ldmia	r3!, {r2}
 80058b8:	9105      	str	r1, [sp, #20]
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	a902      	add	r1, sp, #8
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	f000 fa3e 	bl	8005d40 <_svfiprintf_r>
 80058c4:	2200      	movs	r2, #0
 80058c6:	9b02      	ldr	r3, [sp, #8]
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	b01c      	add	sp, #112	; 0x70
 80058cc:	bc08      	pop	{r3}
 80058ce:	b003      	add	sp, #12
 80058d0:	4718      	bx	r3
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	7fffffff 	.word	0x7fffffff
 80058d8:	20000064 	.word	0x20000064
 80058dc:	ffff0208 	.word	0xffff0208

080058e0 <__sread>:
 80058e0:	b570      	push	{r4, r5, r6, lr}
 80058e2:	000c      	movs	r4, r1
 80058e4:	250e      	movs	r5, #14
 80058e6:	5f49      	ldrsh	r1, [r1, r5]
 80058e8:	f000 f874 	bl	80059d4 <_read_r>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	db03      	blt.n	80058f8 <__sread+0x18>
 80058f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058f2:	181b      	adds	r3, r3, r0
 80058f4:	6563      	str	r3, [r4, #84]	; 0x54
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	89a3      	ldrh	r3, [r4, #12]
 80058fa:	4a02      	ldr	r2, [pc, #8]	; (8005904 <__sread+0x24>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	e7f9      	b.n	80058f6 <__sread+0x16>
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	ffffefff 	.word	0xffffefff

08005908 <__swrite>:
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	001f      	movs	r7, r3
 800590c:	898b      	ldrh	r3, [r1, #12]
 800590e:	0005      	movs	r5, r0
 8005910:	000c      	movs	r4, r1
 8005912:	0016      	movs	r6, r2
 8005914:	05db      	lsls	r3, r3, #23
 8005916:	d505      	bpl.n	8005924 <__swrite+0x1c>
 8005918:	230e      	movs	r3, #14
 800591a:	5ec9      	ldrsh	r1, [r1, r3]
 800591c:	2200      	movs	r2, #0
 800591e:	2302      	movs	r3, #2
 8005920:	f000 f844 	bl	80059ac <_lseek_r>
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	4a05      	ldr	r2, [pc, #20]	; (800593c <__swrite+0x34>)
 8005928:	0028      	movs	r0, r5
 800592a:	4013      	ands	r3, r2
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	0032      	movs	r2, r6
 8005930:	230e      	movs	r3, #14
 8005932:	5ee1      	ldrsh	r1, [r4, r3]
 8005934:	003b      	movs	r3, r7
 8005936:	f000 f861 	bl	80059fc <_write_r>
 800593a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800593c:	ffffefff 	.word	0xffffefff

08005940 <__sseek>:
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	000c      	movs	r4, r1
 8005944:	250e      	movs	r5, #14
 8005946:	5f49      	ldrsh	r1, [r1, r5]
 8005948:	f000 f830 	bl	80059ac <_lseek_r>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	1c42      	adds	r2, r0, #1
 8005950:	d103      	bne.n	800595a <__sseek+0x1a>
 8005952:	4a05      	ldr	r2, [pc, #20]	; (8005968 <__sseek+0x28>)
 8005954:	4013      	ands	r3, r2
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	bd70      	pop	{r4, r5, r6, pc}
 800595a:	2280      	movs	r2, #128	; 0x80
 800595c:	0152      	lsls	r2, r2, #5
 800595e:	4313      	orrs	r3, r2
 8005960:	81a3      	strh	r3, [r4, #12]
 8005962:	6560      	str	r0, [r4, #84]	; 0x54
 8005964:	e7f8      	b.n	8005958 <__sseek+0x18>
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	ffffefff 	.word	0xffffefff

0800596c <__sclose>:
 800596c:	b510      	push	{r4, lr}
 800596e:	230e      	movs	r3, #14
 8005970:	5ec9      	ldrsh	r1, [r1, r3]
 8005972:	f000 f809 	bl	8005988 <_close_r>
 8005976:	bd10      	pop	{r4, pc}

08005978 <memset>:
 8005978:	0003      	movs	r3, r0
 800597a:	1882      	adds	r2, r0, r2
 800597c:	4293      	cmp	r3, r2
 800597e:	d100      	bne.n	8005982 <memset+0xa>
 8005980:	4770      	bx	lr
 8005982:	7019      	strb	r1, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	e7f9      	b.n	800597c <memset+0x4>

08005988 <_close_r>:
 8005988:	2300      	movs	r3, #0
 800598a:	b570      	push	{r4, r5, r6, lr}
 800598c:	4d06      	ldr	r5, [pc, #24]	; (80059a8 <_close_r+0x20>)
 800598e:	0004      	movs	r4, r0
 8005990:	0008      	movs	r0, r1
 8005992:	602b      	str	r3, [r5, #0]
 8005994:	f7fb fbc4 	bl	8001120 <_close>
 8005998:	1c43      	adds	r3, r0, #1
 800599a:	d103      	bne.n	80059a4 <_close_r+0x1c>
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d000      	beq.n	80059a4 <_close_r+0x1c>
 80059a2:	6023      	str	r3, [r4, #0]
 80059a4:	bd70      	pop	{r4, r5, r6, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	20000364 	.word	0x20000364

080059ac <_lseek_r>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	0004      	movs	r4, r0
 80059b0:	0008      	movs	r0, r1
 80059b2:	0011      	movs	r1, r2
 80059b4:	001a      	movs	r2, r3
 80059b6:	2300      	movs	r3, #0
 80059b8:	4d05      	ldr	r5, [pc, #20]	; (80059d0 <_lseek_r+0x24>)
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	f7fb fbd1 	bl	8001162 <_lseek>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d103      	bne.n	80059cc <_lseek_r+0x20>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d000      	beq.n	80059cc <_lseek_r+0x20>
 80059ca:	6023      	str	r3, [r4, #0]
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	20000364 	.word	0x20000364

080059d4 <_read_r>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	0004      	movs	r4, r0
 80059d8:	0008      	movs	r0, r1
 80059da:	0011      	movs	r1, r2
 80059dc:	001a      	movs	r2, r3
 80059de:	2300      	movs	r3, #0
 80059e0:	4d05      	ldr	r5, [pc, #20]	; (80059f8 <_read_r+0x24>)
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb fb63 	bl	80010ae <_read>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d103      	bne.n	80059f4 <_read_r+0x20>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d000      	beq.n	80059f4 <_read_r+0x20>
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	bd70      	pop	{r4, r5, r6, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	20000364 	.word	0x20000364

080059fc <_write_r>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	0004      	movs	r4, r0
 8005a00:	0008      	movs	r0, r1
 8005a02:	0011      	movs	r1, r2
 8005a04:	001a      	movs	r2, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	4d05      	ldr	r5, [pc, #20]	; (8005a20 <_write_r+0x24>)
 8005a0a:	602b      	str	r3, [r5, #0]
 8005a0c:	f7fb fb6c 	bl	80010e8 <_write>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d103      	bne.n	8005a1c <_write_r+0x20>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d000      	beq.n	8005a1c <_write_r+0x20>
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	20000364 	.word	0x20000364

08005a24 <__errno>:
 8005a24:	4b01      	ldr	r3, [pc, #4]	; (8005a2c <__errno+0x8>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	4770      	bx	lr
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	20000064 	.word	0x20000064

08005a30 <__libc_init_array>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	2600      	movs	r6, #0
 8005a34:	4c0c      	ldr	r4, [pc, #48]	; (8005a68 <__libc_init_array+0x38>)
 8005a36:	4d0d      	ldr	r5, [pc, #52]	; (8005a6c <__libc_init_array+0x3c>)
 8005a38:	1b64      	subs	r4, r4, r5
 8005a3a:	10a4      	asrs	r4, r4, #2
 8005a3c:	42a6      	cmp	r6, r4
 8005a3e:	d109      	bne.n	8005a54 <__libc_init_array+0x24>
 8005a40:	2600      	movs	r6, #0
 8005a42:	f000 ff99 	bl	8006978 <_init>
 8005a46:	4c0a      	ldr	r4, [pc, #40]	; (8005a70 <__libc_init_array+0x40>)
 8005a48:	4d0a      	ldr	r5, [pc, #40]	; (8005a74 <__libc_init_array+0x44>)
 8005a4a:	1b64      	subs	r4, r4, r5
 8005a4c:	10a4      	asrs	r4, r4, #2
 8005a4e:	42a6      	cmp	r6, r4
 8005a50:	d105      	bne.n	8005a5e <__libc_init_array+0x2e>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	00b3      	lsls	r3, r6, #2
 8005a56:	58eb      	ldr	r3, [r5, r3]
 8005a58:	4798      	blx	r3
 8005a5a:	3601      	adds	r6, #1
 8005a5c:	e7ee      	b.n	8005a3c <__libc_init_array+0xc>
 8005a5e:	00b3      	lsls	r3, r6, #2
 8005a60:	58eb      	ldr	r3, [r5, r3]
 8005a62:	4798      	blx	r3
 8005a64:	3601      	adds	r6, #1
 8005a66:	e7f2      	b.n	8005a4e <__libc_init_array+0x1e>
 8005a68:	08006aec 	.word	0x08006aec
 8005a6c:	08006aec 	.word	0x08006aec
 8005a70:	08006af0 	.word	0x08006af0
 8005a74:	08006aec 	.word	0x08006aec

08005a78 <__retarget_lock_init_recursive>:
 8005a78:	4770      	bx	lr

08005a7a <__retarget_lock_acquire_recursive>:
 8005a7a:	4770      	bx	lr

08005a7c <__retarget_lock_release_recursive>:
 8005a7c:	4770      	bx	lr
	...

08005a80 <_free_r>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	0005      	movs	r5, r0
 8005a84:	2900      	cmp	r1, #0
 8005a86:	d010      	beq.n	8005aaa <_free_r+0x2a>
 8005a88:	1f0c      	subs	r4, r1, #4
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	da00      	bge.n	8005a92 <_free_r+0x12>
 8005a90:	18e4      	adds	r4, r4, r3
 8005a92:	0028      	movs	r0, r5
 8005a94:	f000 f8e2 	bl	8005c5c <__malloc_lock>
 8005a98:	4a1d      	ldr	r2, [pc, #116]	; (8005b10 <_free_r+0x90>)
 8005a9a:	6813      	ldr	r3, [r2, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d105      	bne.n	8005aac <_free_r+0x2c>
 8005aa0:	6063      	str	r3, [r4, #4]
 8005aa2:	6014      	str	r4, [r2, #0]
 8005aa4:	0028      	movs	r0, r5
 8005aa6:	f000 f8e1 	bl	8005c6c <__malloc_unlock>
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	d908      	bls.n	8005ac2 <_free_r+0x42>
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	1821      	adds	r1, r4, r0
 8005ab4:	428b      	cmp	r3, r1
 8005ab6:	d1f3      	bne.n	8005aa0 <_free_r+0x20>
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	1809      	adds	r1, r1, r0
 8005abe:	6021      	str	r1, [r4, #0]
 8005ac0:	e7ee      	b.n	8005aa0 <_free_r+0x20>
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <_free_r+0x4e>
 8005aca:	42a3      	cmp	r3, r4
 8005acc:	d9f9      	bls.n	8005ac2 <_free_r+0x42>
 8005ace:	6811      	ldr	r1, [r2, #0]
 8005ad0:	1850      	adds	r0, r2, r1
 8005ad2:	42a0      	cmp	r0, r4
 8005ad4:	d10b      	bne.n	8005aee <_free_r+0x6e>
 8005ad6:	6820      	ldr	r0, [r4, #0]
 8005ad8:	1809      	adds	r1, r1, r0
 8005ada:	1850      	adds	r0, r2, r1
 8005adc:	6011      	str	r1, [r2, #0]
 8005ade:	4283      	cmp	r3, r0
 8005ae0:	d1e0      	bne.n	8005aa4 <_free_r+0x24>
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	1841      	adds	r1, r0, r1
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	6053      	str	r3, [r2, #4]
 8005aec:	e7da      	b.n	8005aa4 <_free_r+0x24>
 8005aee:	42a0      	cmp	r0, r4
 8005af0:	d902      	bls.n	8005af8 <_free_r+0x78>
 8005af2:	230c      	movs	r3, #12
 8005af4:	602b      	str	r3, [r5, #0]
 8005af6:	e7d5      	b.n	8005aa4 <_free_r+0x24>
 8005af8:	6820      	ldr	r0, [r4, #0]
 8005afa:	1821      	adds	r1, r4, r0
 8005afc:	428b      	cmp	r3, r1
 8005afe:	d103      	bne.n	8005b08 <_free_r+0x88>
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	1809      	adds	r1, r1, r0
 8005b06:	6021      	str	r1, [r4, #0]
 8005b08:	6063      	str	r3, [r4, #4]
 8005b0a:	6054      	str	r4, [r2, #4]
 8005b0c:	e7ca      	b.n	8005aa4 <_free_r+0x24>
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	2000036c 	.word	0x2000036c

08005b14 <sbrk_aligned>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	4e0f      	ldr	r6, [pc, #60]	; (8005b54 <sbrk_aligned+0x40>)
 8005b18:	000d      	movs	r5, r1
 8005b1a:	6831      	ldr	r1, [r6, #0]
 8005b1c:	0004      	movs	r4, r0
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d102      	bne.n	8005b28 <sbrk_aligned+0x14>
 8005b22:	f000 fe41 	bl	80067a8 <_sbrk_r>
 8005b26:	6030      	str	r0, [r6, #0]
 8005b28:	0029      	movs	r1, r5
 8005b2a:	0020      	movs	r0, r4
 8005b2c:	f000 fe3c 	bl	80067a8 <_sbrk_r>
 8005b30:	1c43      	adds	r3, r0, #1
 8005b32:	d00a      	beq.n	8005b4a <sbrk_aligned+0x36>
 8005b34:	2303      	movs	r3, #3
 8005b36:	1cc5      	adds	r5, r0, #3
 8005b38:	439d      	bics	r5, r3
 8005b3a:	42a8      	cmp	r0, r5
 8005b3c:	d007      	beq.n	8005b4e <sbrk_aligned+0x3a>
 8005b3e:	1a29      	subs	r1, r5, r0
 8005b40:	0020      	movs	r0, r4
 8005b42:	f000 fe31 	bl	80067a8 <_sbrk_r>
 8005b46:	3001      	adds	r0, #1
 8005b48:	d101      	bne.n	8005b4e <sbrk_aligned+0x3a>
 8005b4a:	2501      	movs	r5, #1
 8005b4c:	426d      	negs	r5, r5
 8005b4e:	0028      	movs	r0, r5
 8005b50:	bd70      	pop	{r4, r5, r6, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	20000370 	.word	0x20000370

08005b58 <_malloc_r>:
 8005b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	1ccb      	adds	r3, r1, #3
 8005b5e:	4393      	bics	r3, r2
 8005b60:	3308      	adds	r3, #8
 8005b62:	0006      	movs	r6, r0
 8005b64:	001f      	movs	r7, r3
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d238      	bcs.n	8005bdc <_malloc_r+0x84>
 8005b6a:	270c      	movs	r7, #12
 8005b6c:	42b9      	cmp	r1, r7
 8005b6e:	d837      	bhi.n	8005be0 <_malloc_r+0x88>
 8005b70:	0030      	movs	r0, r6
 8005b72:	f000 f873 	bl	8005c5c <__malloc_lock>
 8005b76:	4b38      	ldr	r3, [pc, #224]	; (8005c58 <_malloc_r+0x100>)
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	001c      	movs	r4, r3
 8005b7e:	2c00      	cmp	r4, #0
 8005b80:	d133      	bne.n	8005bea <_malloc_r+0x92>
 8005b82:	0039      	movs	r1, r7
 8005b84:	0030      	movs	r0, r6
 8005b86:	f7ff ffc5 	bl	8005b14 <sbrk_aligned>
 8005b8a:	0004      	movs	r4, r0
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d15e      	bne.n	8005c4e <_malloc_r+0xf6>
 8005b90:	9b00      	ldr	r3, [sp, #0]
 8005b92:	681c      	ldr	r4, [r3, #0]
 8005b94:	0025      	movs	r5, r4
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	d14e      	bne.n	8005c38 <_malloc_r+0xe0>
 8005b9a:	2c00      	cmp	r4, #0
 8005b9c:	d051      	beq.n	8005c42 <_malloc_r+0xea>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	0029      	movs	r1, r5
 8005ba2:	18e3      	adds	r3, r4, r3
 8005ba4:	0030      	movs	r0, r6
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	f000 fdfe 	bl	80067a8 <_sbrk_r>
 8005bac:	9b01      	ldr	r3, [sp, #4]
 8005bae:	4283      	cmp	r3, r0
 8005bb0:	d147      	bne.n	8005c42 <_malloc_r+0xea>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	0030      	movs	r0, r6
 8005bb6:	1aff      	subs	r7, r7, r3
 8005bb8:	0039      	movs	r1, r7
 8005bba:	f7ff ffab 	bl	8005b14 <sbrk_aligned>
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	d03f      	beq.n	8005c42 <_malloc_r+0xea>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	19db      	adds	r3, r3, r7
 8005bc6:	6023      	str	r3, [r4, #0]
 8005bc8:	9b00      	ldr	r3, [sp, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d040      	beq.n	8005c52 <_malloc_r+0xfa>
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	42a2      	cmp	r2, r4
 8005bd4:	d133      	bne.n	8005c3e <_malloc_r+0xe6>
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	e014      	b.n	8005c06 <_malloc_r+0xae>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	dac5      	bge.n	8005b6c <_malloc_r+0x14>
 8005be0:	230c      	movs	r3, #12
 8005be2:	2500      	movs	r5, #0
 8005be4:	6033      	str	r3, [r6, #0]
 8005be6:	0028      	movs	r0, r5
 8005be8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bea:	6821      	ldr	r1, [r4, #0]
 8005bec:	1bc9      	subs	r1, r1, r7
 8005bee:	d420      	bmi.n	8005c32 <_malloc_r+0xda>
 8005bf0:	290b      	cmp	r1, #11
 8005bf2:	d918      	bls.n	8005c26 <_malloc_r+0xce>
 8005bf4:	19e2      	adds	r2, r4, r7
 8005bf6:	6027      	str	r7, [r4, #0]
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	d112      	bne.n	8005c22 <_malloc_r+0xca>
 8005bfc:	9b00      	ldr	r3, [sp, #0]
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	6011      	str	r1, [r2, #0]
 8005c04:	6053      	str	r3, [r2, #4]
 8005c06:	0030      	movs	r0, r6
 8005c08:	0025      	movs	r5, r4
 8005c0a:	f000 f82f 	bl	8005c6c <__malloc_unlock>
 8005c0e:	2207      	movs	r2, #7
 8005c10:	350b      	adds	r5, #11
 8005c12:	1d23      	adds	r3, r4, #4
 8005c14:	4395      	bics	r5, r2
 8005c16:	1aea      	subs	r2, r5, r3
 8005c18:	429d      	cmp	r5, r3
 8005c1a:	d0e4      	beq.n	8005be6 <_malloc_r+0x8e>
 8005c1c:	1b5b      	subs	r3, r3, r5
 8005c1e:	50a3      	str	r3, [r4, r2]
 8005c20:	e7e1      	b.n	8005be6 <_malloc_r+0x8e>
 8005c22:	605a      	str	r2, [r3, #4]
 8005c24:	e7ec      	b.n	8005c00 <_malloc_r+0xa8>
 8005c26:	6862      	ldr	r2, [r4, #4]
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d1d5      	bne.n	8005bd8 <_malloc_r+0x80>
 8005c2c:	9b00      	ldr	r3, [sp, #0]
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e7e9      	b.n	8005c06 <_malloc_r+0xae>
 8005c32:	0023      	movs	r3, r4
 8005c34:	6864      	ldr	r4, [r4, #4]
 8005c36:	e7a2      	b.n	8005b7e <_malloc_r+0x26>
 8005c38:	002c      	movs	r4, r5
 8005c3a:	686d      	ldr	r5, [r5, #4]
 8005c3c:	e7ab      	b.n	8005b96 <_malloc_r+0x3e>
 8005c3e:	0013      	movs	r3, r2
 8005c40:	e7c4      	b.n	8005bcc <_malloc_r+0x74>
 8005c42:	230c      	movs	r3, #12
 8005c44:	0030      	movs	r0, r6
 8005c46:	6033      	str	r3, [r6, #0]
 8005c48:	f000 f810 	bl	8005c6c <__malloc_unlock>
 8005c4c:	e7cb      	b.n	8005be6 <_malloc_r+0x8e>
 8005c4e:	6027      	str	r7, [r4, #0]
 8005c50:	e7d9      	b.n	8005c06 <_malloc_r+0xae>
 8005c52:	605b      	str	r3, [r3, #4]
 8005c54:	deff      	udf	#255	; 0xff
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	2000036c 	.word	0x2000036c

08005c5c <__malloc_lock>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4802      	ldr	r0, [pc, #8]	; (8005c68 <__malloc_lock+0xc>)
 8005c60:	f7ff ff0b 	bl	8005a7a <__retarget_lock_acquire_recursive>
 8005c64:	bd10      	pop	{r4, pc}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	20000368 	.word	0x20000368

08005c6c <__malloc_unlock>:
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	4802      	ldr	r0, [pc, #8]	; (8005c78 <__malloc_unlock+0xc>)
 8005c70:	f7ff ff04 	bl	8005a7c <__retarget_lock_release_recursive>
 8005c74:	bd10      	pop	{r4, pc}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	20000368 	.word	0x20000368

08005c7c <__ssputs_r>:
 8005c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	9203      	str	r2, [sp, #12]
 8005c84:	688e      	ldr	r6, [r1, #8]
 8005c86:	9a01      	ldr	r2, [sp, #4]
 8005c88:	0007      	movs	r7, r0
 8005c8a:	000c      	movs	r4, r1
 8005c8c:	680b      	ldr	r3, [r1, #0]
 8005c8e:	4296      	cmp	r6, r2
 8005c90:	d831      	bhi.n	8005cf6 <__ssputs_r+0x7a>
 8005c92:	898a      	ldrh	r2, [r1, #12]
 8005c94:	2190      	movs	r1, #144	; 0x90
 8005c96:	00c9      	lsls	r1, r1, #3
 8005c98:	420a      	tst	r2, r1
 8005c9a:	d029      	beq.n	8005cf0 <__ssputs_r+0x74>
 8005c9c:	2003      	movs	r0, #3
 8005c9e:	6921      	ldr	r1, [r4, #16]
 8005ca0:	1a5b      	subs	r3, r3, r1
 8005ca2:	9302      	str	r3, [sp, #8]
 8005ca4:	6963      	ldr	r3, [r4, #20]
 8005ca6:	4343      	muls	r3, r0
 8005ca8:	0fdd      	lsrs	r5, r3, #31
 8005caa:	18ed      	adds	r5, r5, r3
 8005cac:	9b01      	ldr	r3, [sp, #4]
 8005cae:	9802      	ldr	r0, [sp, #8]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	181b      	adds	r3, r3, r0
 8005cb4:	106d      	asrs	r5, r5, #1
 8005cb6:	42ab      	cmp	r3, r5
 8005cb8:	d900      	bls.n	8005cbc <__ssputs_r+0x40>
 8005cba:	001d      	movs	r5, r3
 8005cbc:	0552      	lsls	r2, r2, #21
 8005cbe:	d529      	bpl.n	8005d14 <__ssputs_r+0x98>
 8005cc0:	0029      	movs	r1, r5
 8005cc2:	0038      	movs	r0, r7
 8005cc4:	f7ff ff48 	bl	8005b58 <_malloc_r>
 8005cc8:	1e06      	subs	r6, r0, #0
 8005cca:	d02d      	beq.n	8005d28 <__ssputs_r+0xac>
 8005ccc:	9a02      	ldr	r2, [sp, #8]
 8005cce:	6921      	ldr	r1, [r4, #16]
 8005cd0:	f000 fd87 	bl	80067e2 <memcpy>
 8005cd4:	89a2      	ldrh	r2, [r4, #12]
 8005cd6:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <__ssputs_r+0xc0>)
 8005cd8:	401a      	ands	r2, r3
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	81a3      	strh	r3, [r4, #12]
 8005ce0:	9b02      	ldr	r3, [sp, #8]
 8005ce2:	6126      	str	r6, [r4, #16]
 8005ce4:	18f6      	adds	r6, r6, r3
 8005ce6:	6026      	str	r6, [r4, #0]
 8005ce8:	6165      	str	r5, [r4, #20]
 8005cea:	9e01      	ldr	r6, [sp, #4]
 8005cec:	1aed      	subs	r5, r5, r3
 8005cee:	60a5      	str	r5, [r4, #8]
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	429e      	cmp	r6, r3
 8005cf4:	d900      	bls.n	8005cf8 <__ssputs_r+0x7c>
 8005cf6:	9e01      	ldr	r6, [sp, #4]
 8005cf8:	0032      	movs	r2, r6
 8005cfa:	9903      	ldr	r1, [sp, #12]
 8005cfc:	6820      	ldr	r0, [r4, #0]
 8005cfe:	f000 fd3f 	bl	8006780 <memmove>
 8005d02:	2000      	movs	r0, #0
 8005d04:	68a3      	ldr	r3, [r4, #8]
 8005d06:	1b9b      	subs	r3, r3, r6
 8005d08:	60a3      	str	r3, [r4, #8]
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	199b      	adds	r3, r3, r6
 8005d0e:	6023      	str	r3, [r4, #0]
 8005d10:	b005      	add	sp, #20
 8005d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d14:	002a      	movs	r2, r5
 8005d16:	0038      	movs	r0, r7
 8005d18:	f000 fd6c 	bl	80067f4 <_realloc_r>
 8005d1c:	1e06      	subs	r6, r0, #0
 8005d1e:	d1df      	bne.n	8005ce0 <__ssputs_r+0x64>
 8005d20:	0038      	movs	r0, r7
 8005d22:	6921      	ldr	r1, [r4, #16]
 8005d24:	f7ff feac 	bl	8005a80 <_free_r>
 8005d28:	230c      	movs	r3, #12
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	603b      	str	r3, [r7, #0]
 8005d2e:	89a2      	ldrh	r2, [r4, #12]
 8005d30:	3334      	adds	r3, #52	; 0x34
 8005d32:	4313      	orrs	r3, r2
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	4240      	negs	r0, r0
 8005d38:	e7ea      	b.n	8005d10 <__ssputs_r+0x94>
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	fffffb7f 	.word	0xfffffb7f

08005d40 <_svfiprintf_r>:
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d42:	b0a1      	sub	sp, #132	; 0x84
 8005d44:	9003      	str	r0, [sp, #12]
 8005d46:	001d      	movs	r5, r3
 8005d48:	898b      	ldrh	r3, [r1, #12]
 8005d4a:	000f      	movs	r7, r1
 8005d4c:	0016      	movs	r6, r2
 8005d4e:	061b      	lsls	r3, r3, #24
 8005d50:	d511      	bpl.n	8005d76 <_svfiprintf_r+0x36>
 8005d52:	690b      	ldr	r3, [r1, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10e      	bne.n	8005d76 <_svfiprintf_r+0x36>
 8005d58:	2140      	movs	r1, #64	; 0x40
 8005d5a:	f7ff fefd 	bl	8005b58 <_malloc_r>
 8005d5e:	6038      	str	r0, [r7, #0]
 8005d60:	6138      	str	r0, [r7, #16]
 8005d62:	2800      	cmp	r0, #0
 8005d64:	d105      	bne.n	8005d72 <_svfiprintf_r+0x32>
 8005d66:	230c      	movs	r3, #12
 8005d68:	9a03      	ldr	r2, [sp, #12]
 8005d6a:	3801      	subs	r0, #1
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	b021      	add	sp, #132	; 0x84
 8005d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d72:	2340      	movs	r3, #64	; 0x40
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	2300      	movs	r3, #0
 8005d78:	ac08      	add	r4, sp, #32
 8005d7a:	6163      	str	r3, [r4, #20]
 8005d7c:	3320      	adds	r3, #32
 8005d7e:	7663      	strb	r3, [r4, #25]
 8005d80:	3310      	adds	r3, #16
 8005d82:	76a3      	strb	r3, [r4, #26]
 8005d84:	9507      	str	r5, [sp, #28]
 8005d86:	0035      	movs	r5, r6
 8005d88:	782b      	ldrb	r3, [r5, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <_svfiprintf_r+0x52>
 8005d8e:	2b25      	cmp	r3, #37	; 0x25
 8005d90:	d148      	bne.n	8005e24 <_svfiprintf_r+0xe4>
 8005d92:	1bab      	subs	r3, r5, r6
 8005d94:	9305      	str	r3, [sp, #20]
 8005d96:	42b5      	cmp	r5, r6
 8005d98:	d00b      	beq.n	8005db2 <_svfiprintf_r+0x72>
 8005d9a:	0032      	movs	r2, r6
 8005d9c:	0039      	movs	r1, r7
 8005d9e:	9803      	ldr	r0, [sp, #12]
 8005da0:	f7ff ff6c 	bl	8005c7c <__ssputs_r>
 8005da4:	3001      	adds	r0, #1
 8005da6:	d100      	bne.n	8005daa <_svfiprintf_r+0x6a>
 8005da8:	e0af      	b.n	8005f0a <_svfiprintf_r+0x1ca>
 8005daa:	6963      	ldr	r3, [r4, #20]
 8005dac:	9a05      	ldr	r2, [sp, #20]
 8005dae:	189b      	adds	r3, r3, r2
 8005db0:	6163      	str	r3, [r4, #20]
 8005db2:	782b      	ldrb	r3, [r5, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d100      	bne.n	8005dba <_svfiprintf_r+0x7a>
 8005db8:	e0a7      	b.n	8005f0a <_svfiprintf_r+0x1ca>
 8005dba:	2201      	movs	r2, #1
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4252      	negs	r2, r2
 8005dc0:	6062      	str	r2, [r4, #4]
 8005dc2:	a904      	add	r1, sp, #16
 8005dc4:	3254      	adds	r2, #84	; 0x54
 8005dc6:	1852      	adds	r2, r2, r1
 8005dc8:	1c6e      	adds	r6, r5, #1
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	60e3      	str	r3, [r4, #12]
 8005dce:	60a3      	str	r3, [r4, #8]
 8005dd0:	7013      	strb	r3, [r2, #0]
 8005dd2:	65a3      	str	r3, [r4, #88]	; 0x58
 8005dd4:	4b55      	ldr	r3, [pc, #340]	; (8005f2c <_svfiprintf_r+0x1ec>)
 8005dd6:	2205      	movs	r2, #5
 8005dd8:	0018      	movs	r0, r3
 8005dda:	7831      	ldrb	r1, [r6, #0]
 8005ddc:	9305      	str	r3, [sp, #20]
 8005dde:	f000 fcf5 	bl	80067cc <memchr>
 8005de2:	1c75      	adds	r5, r6, #1
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d11f      	bne.n	8005e28 <_svfiprintf_r+0xe8>
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	06d3      	lsls	r3, r2, #27
 8005dec:	d504      	bpl.n	8005df8 <_svfiprintf_r+0xb8>
 8005dee:	2353      	movs	r3, #83	; 0x53
 8005df0:	a904      	add	r1, sp, #16
 8005df2:	185b      	adds	r3, r3, r1
 8005df4:	2120      	movs	r1, #32
 8005df6:	7019      	strb	r1, [r3, #0]
 8005df8:	0713      	lsls	r3, r2, #28
 8005dfa:	d504      	bpl.n	8005e06 <_svfiprintf_r+0xc6>
 8005dfc:	2353      	movs	r3, #83	; 0x53
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	185b      	adds	r3, r3, r1
 8005e02:	212b      	movs	r1, #43	; 0x2b
 8005e04:	7019      	strb	r1, [r3, #0]
 8005e06:	7833      	ldrb	r3, [r6, #0]
 8005e08:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0a:	d016      	beq.n	8005e3a <_svfiprintf_r+0xfa>
 8005e0c:	0035      	movs	r5, r6
 8005e0e:	2100      	movs	r1, #0
 8005e10:	200a      	movs	r0, #10
 8005e12:	68e3      	ldr	r3, [r4, #12]
 8005e14:	782a      	ldrb	r2, [r5, #0]
 8005e16:	1c6e      	adds	r6, r5, #1
 8005e18:	3a30      	subs	r2, #48	; 0x30
 8005e1a:	2a09      	cmp	r2, #9
 8005e1c:	d94e      	bls.n	8005ebc <_svfiprintf_r+0x17c>
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	d111      	bne.n	8005e46 <_svfiprintf_r+0x106>
 8005e22:	e017      	b.n	8005e54 <_svfiprintf_r+0x114>
 8005e24:	3501      	adds	r5, #1
 8005e26:	e7af      	b.n	8005d88 <_svfiprintf_r+0x48>
 8005e28:	9b05      	ldr	r3, [sp, #20]
 8005e2a:	6822      	ldr	r2, [r4, #0]
 8005e2c:	1ac0      	subs	r0, r0, r3
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4083      	lsls	r3, r0
 8005e32:	4313      	orrs	r3, r2
 8005e34:	002e      	movs	r6, r5
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	e7cc      	b.n	8005dd4 <_svfiprintf_r+0x94>
 8005e3a:	9b07      	ldr	r3, [sp, #28]
 8005e3c:	1d19      	adds	r1, r3, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	9107      	str	r1, [sp, #28]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	db01      	blt.n	8005e4a <_svfiprintf_r+0x10a>
 8005e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e48:	e004      	b.n	8005e54 <_svfiprintf_r+0x114>
 8005e4a:	425b      	negs	r3, r3
 8005e4c:	60e3      	str	r3, [r4, #12]
 8005e4e:	2302      	movs	r3, #2
 8005e50:	4313      	orrs	r3, r2
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	782b      	ldrb	r3, [r5, #0]
 8005e56:	2b2e      	cmp	r3, #46	; 0x2e
 8005e58:	d10a      	bne.n	8005e70 <_svfiprintf_r+0x130>
 8005e5a:	786b      	ldrb	r3, [r5, #1]
 8005e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e5e:	d135      	bne.n	8005ecc <_svfiprintf_r+0x18c>
 8005e60:	9b07      	ldr	r3, [sp, #28]
 8005e62:	3502      	adds	r5, #2
 8005e64:	1d1a      	adds	r2, r3, #4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	9207      	str	r2, [sp, #28]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	db2b      	blt.n	8005ec6 <_svfiprintf_r+0x186>
 8005e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e70:	4e2f      	ldr	r6, [pc, #188]	; (8005f30 <_svfiprintf_r+0x1f0>)
 8005e72:	2203      	movs	r2, #3
 8005e74:	0030      	movs	r0, r6
 8005e76:	7829      	ldrb	r1, [r5, #0]
 8005e78:	f000 fca8 	bl	80067cc <memchr>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d006      	beq.n	8005e8e <_svfiprintf_r+0x14e>
 8005e80:	2340      	movs	r3, #64	; 0x40
 8005e82:	1b80      	subs	r0, r0, r6
 8005e84:	4083      	lsls	r3, r0
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	3501      	adds	r5, #1
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	7829      	ldrb	r1, [r5, #0]
 8005e90:	2206      	movs	r2, #6
 8005e92:	4828      	ldr	r0, [pc, #160]	; (8005f34 <_svfiprintf_r+0x1f4>)
 8005e94:	1c6e      	adds	r6, r5, #1
 8005e96:	7621      	strb	r1, [r4, #24]
 8005e98:	f000 fc98 	bl	80067cc <memchr>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d03c      	beq.n	8005f1a <_svfiprintf_r+0x1da>
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <_svfiprintf_r+0x1f8>)
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d125      	bne.n	8005ef2 <_svfiprintf_r+0x1b2>
 8005ea6:	2207      	movs	r2, #7
 8005ea8:	9b07      	ldr	r3, [sp, #28]
 8005eaa:	3307      	adds	r3, #7
 8005eac:	4393      	bics	r3, r2
 8005eae:	3308      	adds	r3, #8
 8005eb0:	9307      	str	r3, [sp, #28]
 8005eb2:	6963      	ldr	r3, [r4, #20]
 8005eb4:	9a04      	ldr	r2, [sp, #16]
 8005eb6:	189b      	adds	r3, r3, r2
 8005eb8:	6163      	str	r3, [r4, #20]
 8005eba:	e764      	b.n	8005d86 <_svfiprintf_r+0x46>
 8005ebc:	4343      	muls	r3, r0
 8005ebe:	0035      	movs	r5, r6
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	189b      	adds	r3, r3, r2
 8005ec4:	e7a6      	b.n	8005e14 <_svfiprintf_r+0xd4>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	425b      	negs	r3, r3
 8005eca:	e7d0      	b.n	8005e6e <_svfiprintf_r+0x12e>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	200a      	movs	r0, #10
 8005ed0:	001a      	movs	r2, r3
 8005ed2:	3501      	adds	r5, #1
 8005ed4:	6063      	str	r3, [r4, #4]
 8005ed6:	7829      	ldrb	r1, [r5, #0]
 8005ed8:	1c6e      	adds	r6, r5, #1
 8005eda:	3930      	subs	r1, #48	; 0x30
 8005edc:	2909      	cmp	r1, #9
 8005ede:	d903      	bls.n	8005ee8 <_svfiprintf_r+0x1a8>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0c5      	beq.n	8005e70 <_svfiprintf_r+0x130>
 8005ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ee6:	e7c3      	b.n	8005e70 <_svfiprintf_r+0x130>
 8005ee8:	4342      	muls	r2, r0
 8005eea:	0035      	movs	r5, r6
 8005eec:	2301      	movs	r3, #1
 8005eee:	1852      	adds	r2, r2, r1
 8005ef0:	e7f1      	b.n	8005ed6 <_svfiprintf_r+0x196>
 8005ef2:	aa07      	add	r2, sp, #28
 8005ef4:	9200      	str	r2, [sp, #0]
 8005ef6:	0021      	movs	r1, r4
 8005ef8:	003a      	movs	r2, r7
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <_svfiprintf_r+0x1fc>)
 8005efc:	9803      	ldr	r0, [sp, #12]
 8005efe:	e000      	b.n	8005f02 <_svfiprintf_r+0x1c2>
 8005f00:	bf00      	nop
 8005f02:	9004      	str	r0, [sp, #16]
 8005f04:	9b04      	ldr	r3, [sp, #16]
 8005f06:	3301      	adds	r3, #1
 8005f08:	d1d3      	bne.n	8005eb2 <_svfiprintf_r+0x172>
 8005f0a:	89bb      	ldrh	r3, [r7, #12]
 8005f0c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005f0e:	065b      	lsls	r3, r3, #25
 8005f10:	d400      	bmi.n	8005f14 <_svfiprintf_r+0x1d4>
 8005f12:	e72c      	b.n	8005d6e <_svfiprintf_r+0x2e>
 8005f14:	2001      	movs	r0, #1
 8005f16:	4240      	negs	r0, r0
 8005f18:	e729      	b.n	8005d6e <_svfiprintf_r+0x2e>
 8005f1a:	aa07      	add	r2, sp, #28
 8005f1c:	9200      	str	r2, [sp, #0]
 8005f1e:	0021      	movs	r1, r4
 8005f20:	003a      	movs	r2, r7
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <_svfiprintf_r+0x1fc>)
 8005f24:	9803      	ldr	r0, [sp, #12]
 8005f26:	f000 f9bf 	bl	80062a8 <_printf_i>
 8005f2a:	e7ea      	b.n	8005f02 <_svfiprintf_r+0x1c2>
 8005f2c:	08006ab0 	.word	0x08006ab0
 8005f30:	08006ab6 	.word	0x08006ab6
 8005f34:	08006aba 	.word	0x08006aba
 8005f38:	00000000 	.word	0x00000000
 8005f3c:	08005c7d 	.word	0x08005c7d

08005f40 <__sfputc_r>:
 8005f40:	6893      	ldr	r3, [r2, #8]
 8005f42:	b510      	push	{r4, lr}
 8005f44:	3b01      	subs	r3, #1
 8005f46:	6093      	str	r3, [r2, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	da04      	bge.n	8005f56 <__sfputc_r+0x16>
 8005f4c:	6994      	ldr	r4, [r2, #24]
 8005f4e:	42a3      	cmp	r3, r4
 8005f50:	db07      	blt.n	8005f62 <__sfputc_r+0x22>
 8005f52:	290a      	cmp	r1, #10
 8005f54:	d005      	beq.n	8005f62 <__sfputc_r+0x22>
 8005f56:	6813      	ldr	r3, [r2, #0]
 8005f58:	1c58      	adds	r0, r3, #1
 8005f5a:	6010      	str	r0, [r2, #0]
 8005f5c:	7019      	strb	r1, [r3, #0]
 8005f5e:	0008      	movs	r0, r1
 8005f60:	bd10      	pop	{r4, pc}
 8005f62:	f000 fb66 	bl	8006632 <__swbuf_r>
 8005f66:	0001      	movs	r1, r0
 8005f68:	e7f9      	b.n	8005f5e <__sfputc_r+0x1e>

08005f6a <__sfputs_r>:
 8005f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6c:	0006      	movs	r6, r0
 8005f6e:	000f      	movs	r7, r1
 8005f70:	0014      	movs	r4, r2
 8005f72:	18d5      	adds	r5, r2, r3
 8005f74:	42ac      	cmp	r4, r5
 8005f76:	d101      	bne.n	8005f7c <__sfputs_r+0x12>
 8005f78:	2000      	movs	r0, #0
 8005f7a:	e007      	b.n	8005f8c <__sfputs_r+0x22>
 8005f7c:	7821      	ldrb	r1, [r4, #0]
 8005f7e:	003a      	movs	r2, r7
 8005f80:	0030      	movs	r0, r6
 8005f82:	f7ff ffdd 	bl	8005f40 <__sfputc_r>
 8005f86:	3401      	adds	r4, #1
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d1f3      	bne.n	8005f74 <__sfputs_r+0xa>
 8005f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f90 <_vfiprintf_r>:
 8005f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f92:	b0a1      	sub	sp, #132	; 0x84
 8005f94:	000f      	movs	r7, r1
 8005f96:	0015      	movs	r5, r2
 8005f98:	001e      	movs	r6, r3
 8005f9a:	9003      	str	r0, [sp, #12]
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d004      	beq.n	8005faa <_vfiprintf_r+0x1a>
 8005fa0:	6a03      	ldr	r3, [r0, #32]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <_vfiprintf_r+0x1a>
 8005fa6:	f7ff fc37 	bl	8005818 <__sinit>
 8005faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fac:	07db      	lsls	r3, r3, #31
 8005fae:	d405      	bmi.n	8005fbc <_vfiprintf_r+0x2c>
 8005fb0:	89bb      	ldrh	r3, [r7, #12]
 8005fb2:	059b      	lsls	r3, r3, #22
 8005fb4:	d402      	bmi.n	8005fbc <_vfiprintf_r+0x2c>
 8005fb6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005fb8:	f7ff fd5f 	bl	8005a7a <__retarget_lock_acquire_recursive>
 8005fbc:	89bb      	ldrh	r3, [r7, #12]
 8005fbe:	071b      	lsls	r3, r3, #28
 8005fc0:	d502      	bpl.n	8005fc8 <_vfiprintf_r+0x38>
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d113      	bne.n	8005ff0 <_vfiprintf_r+0x60>
 8005fc8:	0039      	movs	r1, r7
 8005fca:	9803      	ldr	r0, [sp, #12]
 8005fcc:	f000 fb74 	bl	80066b8 <__swsetup_r>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d00d      	beq.n	8005ff0 <_vfiprintf_r+0x60>
 8005fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd6:	07db      	lsls	r3, r3, #31
 8005fd8:	d503      	bpl.n	8005fe2 <_vfiprintf_r+0x52>
 8005fda:	2001      	movs	r0, #1
 8005fdc:	4240      	negs	r0, r0
 8005fde:	b021      	add	sp, #132	; 0x84
 8005fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe2:	89bb      	ldrh	r3, [r7, #12]
 8005fe4:	059b      	lsls	r3, r3, #22
 8005fe6:	d4f8      	bmi.n	8005fda <_vfiprintf_r+0x4a>
 8005fe8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005fea:	f7ff fd47 	bl	8005a7c <__retarget_lock_release_recursive>
 8005fee:	e7f4      	b.n	8005fda <_vfiprintf_r+0x4a>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	ac08      	add	r4, sp, #32
 8005ff4:	6163      	str	r3, [r4, #20]
 8005ff6:	3320      	adds	r3, #32
 8005ff8:	7663      	strb	r3, [r4, #25]
 8005ffa:	3310      	adds	r3, #16
 8005ffc:	76a3      	strb	r3, [r4, #26]
 8005ffe:	9607      	str	r6, [sp, #28]
 8006000:	002e      	movs	r6, r5
 8006002:	7833      	ldrb	r3, [r6, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <_vfiprintf_r+0x7c>
 8006008:	2b25      	cmp	r3, #37	; 0x25
 800600a:	d148      	bne.n	800609e <_vfiprintf_r+0x10e>
 800600c:	1b73      	subs	r3, r6, r5
 800600e:	9305      	str	r3, [sp, #20]
 8006010:	42ae      	cmp	r6, r5
 8006012:	d00b      	beq.n	800602c <_vfiprintf_r+0x9c>
 8006014:	002a      	movs	r2, r5
 8006016:	0039      	movs	r1, r7
 8006018:	9803      	ldr	r0, [sp, #12]
 800601a:	f7ff ffa6 	bl	8005f6a <__sfputs_r>
 800601e:	3001      	adds	r0, #1
 8006020:	d100      	bne.n	8006024 <_vfiprintf_r+0x94>
 8006022:	e0af      	b.n	8006184 <_vfiprintf_r+0x1f4>
 8006024:	6963      	ldr	r3, [r4, #20]
 8006026:	9a05      	ldr	r2, [sp, #20]
 8006028:	189b      	adds	r3, r3, r2
 800602a:	6163      	str	r3, [r4, #20]
 800602c:	7833      	ldrb	r3, [r6, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d100      	bne.n	8006034 <_vfiprintf_r+0xa4>
 8006032:	e0a7      	b.n	8006184 <_vfiprintf_r+0x1f4>
 8006034:	2201      	movs	r2, #1
 8006036:	2300      	movs	r3, #0
 8006038:	4252      	negs	r2, r2
 800603a:	6062      	str	r2, [r4, #4]
 800603c:	a904      	add	r1, sp, #16
 800603e:	3254      	adds	r2, #84	; 0x54
 8006040:	1852      	adds	r2, r2, r1
 8006042:	1c75      	adds	r5, r6, #1
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	60e3      	str	r3, [r4, #12]
 8006048:	60a3      	str	r3, [r4, #8]
 800604a:	7013      	strb	r3, [r2, #0]
 800604c:	65a3      	str	r3, [r4, #88]	; 0x58
 800604e:	4b59      	ldr	r3, [pc, #356]	; (80061b4 <_vfiprintf_r+0x224>)
 8006050:	2205      	movs	r2, #5
 8006052:	0018      	movs	r0, r3
 8006054:	7829      	ldrb	r1, [r5, #0]
 8006056:	9305      	str	r3, [sp, #20]
 8006058:	f000 fbb8 	bl	80067cc <memchr>
 800605c:	1c6e      	adds	r6, r5, #1
 800605e:	2800      	cmp	r0, #0
 8006060:	d11f      	bne.n	80060a2 <_vfiprintf_r+0x112>
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	06d3      	lsls	r3, r2, #27
 8006066:	d504      	bpl.n	8006072 <_vfiprintf_r+0xe2>
 8006068:	2353      	movs	r3, #83	; 0x53
 800606a:	a904      	add	r1, sp, #16
 800606c:	185b      	adds	r3, r3, r1
 800606e:	2120      	movs	r1, #32
 8006070:	7019      	strb	r1, [r3, #0]
 8006072:	0713      	lsls	r3, r2, #28
 8006074:	d504      	bpl.n	8006080 <_vfiprintf_r+0xf0>
 8006076:	2353      	movs	r3, #83	; 0x53
 8006078:	a904      	add	r1, sp, #16
 800607a:	185b      	adds	r3, r3, r1
 800607c:	212b      	movs	r1, #43	; 0x2b
 800607e:	7019      	strb	r1, [r3, #0]
 8006080:	782b      	ldrb	r3, [r5, #0]
 8006082:	2b2a      	cmp	r3, #42	; 0x2a
 8006084:	d016      	beq.n	80060b4 <_vfiprintf_r+0x124>
 8006086:	002e      	movs	r6, r5
 8006088:	2100      	movs	r1, #0
 800608a:	200a      	movs	r0, #10
 800608c:	68e3      	ldr	r3, [r4, #12]
 800608e:	7832      	ldrb	r2, [r6, #0]
 8006090:	1c75      	adds	r5, r6, #1
 8006092:	3a30      	subs	r2, #48	; 0x30
 8006094:	2a09      	cmp	r2, #9
 8006096:	d94e      	bls.n	8006136 <_vfiprintf_r+0x1a6>
 8006098:	2900      	cmp	r1, #0
 800609a:	d111      	bne.n	80060c0 <_vfiprintf_r+0x130>
 800609c:	e017      	b.n	80060ce <_vfiprintf_r+0x13e>
 800609e:	3601      	adds	r6, #1
 80060a0:	e7af      	b.n	8006002 <_vfiprintf_r+0x72>
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	6822      	ldr	r2, [r4, #0]
 80060a6:	1ac0      	subs	r0, r0, r3
 80060a8:	2301      	movs	r3, #1
 80060aa:	4083      	lsls	r3, r0
 80060ac:	4313      	orrs	r3, r2
 80060ae:	0035      	movs	r5, r6
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	e7cc      	b.n	800604e <_vfiprintf_r+0xbe>
 80060b4:	9b07      	ldr	r3, [sp, #28]
 80060b6:	1d19      	adds	r1, r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	9107      	str	r1, [sp, #28]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	db01      	blt.n	80060c4 <_vfiprintf_r+0x134>
 80060c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80060c2:	e004      	b.n	80060ce <_vfiprintf_r+0x13e>
 80060c4:	425b      	negs	r3, r3
 80060c6:	60e3      	str	r3, [r4, #12]
 80060c8:	2302      	movs	r3, #2
 80060ca:	4313      	orrs	r3, r2
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	7833      	ldrb	r3, [r6, #0]
 80060d0:	2b2e      	cmp	r3, #46	; 0x2e
 80060d2:	d10a      	bne.n	80060ea <_vfiprintf_r+0x15a>
 80060d4:	7873      	ldrb	r3, [r6, #1]
 80060d6:	2b2a      	cmp	r3, #42	; 0x2a
 80060d8:	d135      	bne.n	8006146 <_vfiprintf_r+0x1b6>
 80060da:	9b07      	ldr	r3, [sp, #28]
 80060dc:	3602      	adds	r6, #2
 80060de:	1d1a      	adds	r2, r3, #4
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	9207      	str	r2, [sp, #28]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	db2b      	blt.n	8006140 <_vfiprintf_r+0x1b0>
 80060e8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ea:	4d33      	ldr	r5, [pc, #204]	; (80061b8 <_vfiprintf_r+0x228>)
 80060ec:	2203      	movs	r2, #3
 80060ee:	0028      	movs	r0, r5
 80060f0:	7831      	ldrb	r1, [r6, #0]
 80060f2:	f000 fb6b 	bl	80067cc <memchr>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d006      	beq.n	8006108 <_vfiprintf_r+0x178>
 80060fa:	2340      	movs	r3, #64	; 0x40
 80060fc:	1b40      	subs	r0, r0, r5
 80060fe:	4083      	lsls	r3, r0
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	3601      	adds	r6, #1
 8006104:	4313      	orrs	r3, r2
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	7831      	ldrb	r1, [r6, #0]
 800610a:	2206      	movs	r2, #6
 800610c:	482b      	ldr	r0, [pc, #172]	; (80061bc <_vfiprintf_r+0x22c>)
 800610e:	1c75      	adds	r5, r6, #1
 8006110:	7621      	strb	r1, [r4, #24]
 8006112:	f000 fb5b 	bl	80067cc <memchr>
 8006116:	2800      	cmp	r0, #0
 8006118:	d043      	beq.n	80061a2 <_vfiprintf_r+0x212>
 800611a:	4b29      	ldr	r3, [pc, #164]	; (80061c0 <_vfiprintf_r+0x230>)
 800611c:	2b00      	cmp	r3, #0
 800611e:	d125      	bne.n	800616c <_vfiprintf_r+0x1dc>
 8006120:	2207      	movs	r2, #7
 8006122:	9b07      	ldr	r3, [sp, #28]
 8006124:	3307      	adds	r3, #7
 8006126:	4393      	bics	r3, r2
 8006128:	3308      	adds	r3, #8
 800612a:	9307      	str	r3, [sp, #28]
 800612c:	6963      	ldr	r3, [r4, #20]
 800612e:	9a04      	ldr	r2, [sp, #16]
 8006130:	189b      	adds	r3, r3, r2
 8006132:	6163      	str	r3, [r4, #20]
 8006134:	e764      	b.n	8006000 <_vfiprintf_r+0x70>
 8006136:	4343      	muls	r3, r0
 8006138:	002e      	movs	r6, r5
 800613a:	2101      	movs	r1, #1
 800613c:	189b      	adds	r3, r3, r2
 800613e:	e7a6      	b.n	800608e <_vfiprintf_r+0xfe>
 8006140:	2301      	movs	r3, #1
 8006142:	425b      	negs	r3, r3
 8006144:	e7d0      	b.n	80060e8 <_vfiprintf_r+0x158>
 8006146:	2300      	movs	r3, #0
 8006148:	200a      	movs	r0, #10
 800614a:	001a      	movs	r2, r3
 800614c:	3601      	adds	r6, #1
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	7831      	ldrb	r1, [r6, #0]
 8006152:	1c75      	adds	r5, r6, #1
 8006154:	3930      	subs	r1, #48	; 0x30
 8006156:	2909      	cmp	r1, #9
 8006158:	d903      	bls.n	8006162 <_vfiprintf_r+0x1d2>
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0c5      	beq.n	80060ea <_vfiprintf_r+0x15a>
 800615e:	9209      	str	r2, [sp, #36]	; 0x24
 8006160:	e7c3      	b.n	80060ea <_vfiprintf_r+0x15a>
 8006162:	4342      	muls	r2, r0
 8006164:	002e      	movs	r6, r5
 8006166:	2301      	movs	r3, #1
 8006168:	1852      	adds	r2, r2, r1
 800616a:	e7f1      	b.n	8006150 <_vfiprintf_r+0x1c0>
 800616c:	aa07      	add	r2, sp, #28
 800616e:	9200      	str	r2, [sp, #0]
 8006170:	0021      	movs	r1, r4
 8006172:	003a      	movs	r2, r7
 8006174:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <_vfiprintf_r+0x234>)
 8006176:	9803      	ldr	r0, [sp, #12]
 8006178:	e000      	b.n	800617c <_vfiprintf_r+0x1ec>
 800617a:	bf00      	nop
 800617c:	9004      	str	r0, [sp, #16]
 800617e:	9b04      	ldr	r3, [sp, #16]
 8006180:	3301      	adds	r3, #1
 8006182:	d1d3      	bne.n	800612c <_vfiprintf_r+0x19c>
 8006184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006186:	07db      	lsls	r3, r3, #31
 8006188:	d405      	bmi.n	8006196 <_vfiprintf_r+0x206>
 800618a:	89bb      	ldrh	r3, [r7, #12]
 800618c:	059b      	lsls	r3, r3, #22
 800618e:	d402      	bmi.n	8006196 <_vfiprintf_r+0x206>
 8006190:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006192:	f7ff fc73 	bl	8005a7c <__retarget_lock_release_recursive>
 8006196:	89bb      	ldrh	r3, [r7, #12]
 8006198:	065b      	lsls	r3, r3, #25
 800619a:	d500      	bpl.n	800619e <_vfiprintf_r+0x20e>
 800619c:	e71d      	b.n	8005fda <_vfiprintf_r+0x4a>
 800619e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80061a0:	e71d      	b.n	8005fde <_vfiprintf_r+0x4e>
 80061a2:	aa07      	add	r2, sp, #28
 80061a4:	9200      	str	r2, [sp, #0]
 80061a6:	0021      	movs	r1, r4
 80061a8:	003a      	movs	r2, r7
 80061aa:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <_vfiprintf_r+0x234>)
 80061ac:	9803      	ldr	r0, [sp, #12]
 80061ae:	f000 f87b 	bl	80062a8 <_printf_i>
 80061b2:	e7e3      	b.n	800617c <_vfiprintf_r+0x1ec>
 80061b4:	08006ab0 	.word	0x08006ab0
 80061b8:	08006ab6 	.word	0x08006ab6
 80061bc:	08006aba 	.word	0x08006aba
 80061c0:	00000000 	.word	0x00000000
 80061c4:	08005f6b 	.word	0x08005f6b

080061c8 <_printf_common>:
 80061c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ca:	0016      	movs	r6, r2
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	688a      	ldr	r2, [r1, #8]
 80061d0:	690b      	ldr	r3, [r1, #16]
 80061d2:	000c      	movs	r4, r1
 80061d4:	9000      	str	r0, [sp, #0]
 80061d6:	4293      	cmp	r3, r2
 80061d8:	da00      	bge.n	80061dc <_printf_common+0x14>
 80061da:	0013      	movs	r3, r2
 80061dc:	0022      	movs	r2, r4
 80061de:	6033      	str	r3, [r6, #0]
 80061e0:	3243      	adds	r2, #67	; 0x43
 80061e2:	7812      	ldrb	r2, [r2, #0]
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	d001      	beq.n	80061ec <_printf_common+0x24>
 80061e8:	3301      	adds	r3, #1
 80061ea:	6033      	str	r3, [r6, #0]
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	069b      	lsls	r3, r3, #26
 80061f0:	d502      	bpl.n	80061f8 <_printf_common+0x30>
 80061f2:	6833      	ldr	r3, [r6, #0]
 80061f4:	3302      	adds	r3, #2
 80061f6:	6033      	str	r3, [r6, #0]
 80061f8:	6822      	ldr	r2, [r4, #0]
 80061fa:	2306      	movs	r3, #6
 80061fc:	0015      	movs	r5, r2
 80061fe:	401d      	ands	r5, r3
 8006200:	421a      	tst	r2, r3
 8006202:	d027      	beq.n	8006254 <_printf_common+0x8c>
 8006204:	0023      	movs	r3, r4
 8006206:	3343      	adds	r3, #67	; 0x43
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	1e5a      	subs	r2, r3, #1
 800620c:	4193      	sbcs	r3, r2
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	0692      	lsls	r2, r2, #26
 8006212:	d430      	bmi.n	8006276 <_printf_common+0xae>
 8006214:	0022      	movs	r2, r4
 8006216:	9901      	ldr	r1, [sp, #4]
 8006218:	9800      	ldr	r0, [sp, #0]
 800621a:	9d08      	ldr	r5, [sp, #32]
 800621c:	3243      	adds	r2, #67	; 0x43
 800621e:	47a8      	blx	r5
 8006220:	3001      	adds	r0, #1
 8006222:	d025      	beq.n	8006270 <_printf_common+0xa8>
 8006224:	2206      	movs	r2, #6
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	2500      	movs	r5, #0
 800622a:	4013      	ands	r3, r2
 800622c:	2b04      	cmp	r3, #4
 800622e:	d105      	bne.n	800623c <_printf_common+0x74>
 8006230:	6833      	ldr	r3, [r6, #0]
 8006232:	68e5      	ldr	r5, [r4, #12]
 8006234:	1aed      	subs	r5, r5, r3
 8006236:	43eb      	mvns	r3, r5
 8006238:	17db      	asrs	r3, r3, #31
 800623a:	401d      	ands	r5, r3
 800623c:	68a3      	ldr	r3, [r4, #8]
 800623e:	6922      	ldr	r2, [r4, #16]
 8006240:	4293      	cmp	r3, r2
 8006242:	dd01      	ble.n	8006248 <_printf_common+0x80>
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	18ed      	adds	r5, r5, r3
 8006248:	2600      	movs	r6, #0
 800624a:	42b5      	cmp	r5, r6
 800624c:	d120      	bne.n	8006290 <_printf_common+0xc8>
 800624e:	2000      	movs	r0, #0
 8006250:	e010      	b.n	8006274 <_printf_common+0xac>
 8006252:	3501      	adds	r5, #1
 8006254:	68e3      	ldr	r3, [r4, #12]
 8006256:	6832      	ldr	r2, [r6, #0]
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	42ab      	cmp	r3, r5
 800625c:	ddd2      	ble.n	8006204 <_printf_common+0x3c>
 800625e:	0022      	movs	r2, r4
 8006260:	2301      	movs	r3, #1
 8006262:	9901      	ldr	r1, [sp, #4]
 8006264:	9800      	ldr	r0, [sp, #0]
 8006266:	9f08      	ldr	r7, [sp, #32]
 8006268:	3219      	adds	r2, #25
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	d1f0      	bne.n	8006252 <_printf_common+0x8a>
 8006270:	2001      	movs	r0, #1
 8006272:	4240      	negs	r0, r0
 8006274:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006276:	2030      	movs	r0, #48	; 0x30
 8006278:	18e1      	adds	r1, r4, r3
 800627a:	3143      	adds	r1, #67	; 0x43
 800627c:	7008      	strb	r0, [r1, #0]
 800627e:	0021      	movs	r1, r4
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	3145      	adds	r1, #69	; 0x45
 8006284:	7809      	ldrb	r1, [r1, #0]
 8006286:	18a2      	adds	r2, r4, r2
 8006288:	3243      	adds	r2, #67	; 0x43
 800628a:	3302      	adds	r3, #2
 800628c:	7011      	strb	r1, [r2, #0]
 800628e:	e7c1      	b.n	8006214 <_printf_common+0x4c>
 8006290:	0022      	movs	r2, r4
 8006292:	2301      	movs	r3, #1
 8006294:	9901      	ldr	r1, [sp, #4]
 8006296:	9800      	ldr	r0, [sp, #0]
 8006298:	9f08      	ldr	r7, [sp, #32]
 800629a:	321a      	adds	r2, #26
 800629c:	47b8      	blx	r7
 800629e:	3001      	adds	r0, #1
 80062a0:	d0e6      	beq.n	8006270 <_printf_common+0xa8>
 80062a2:	3601      	adds	r6, #1
 80062a4:	e7d1      	b.n	800624a <_printf_common+0x82>
	...

080062a8 <_printf_i>:
 80062a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062aa:	b08b      	sub	sp, #44	; 0x2c
 80062ac:	9206      	str	r2, [sp, #24]
 80062ae:	000a      	movs	r2, r1
 80062b0:	3243      	adds	r2, #67	; 0x43
 80062b2:	9307      	str	r3, [sp, #28]
 80062b4:	9005      	str	r0, [sp, #20]
 80062b6:	9204      	str	r2, [sp, #16]
 80062b8:	7e0a      	ldrb	r2, [r1, #24]
 80062ba:	000c      	movs	r4, r1
 80062bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062be:	2a78      	cmp	r2, #120	; 0x78
 80062c0:	d809      	bhi.n	80062d6 <_printf_i+0x2e>
 80062c2:	2a62      	cmp	r2, #98	; 0x62
 80062c4:	d80b      	bhi.n	80062de <_printf_i+0x36>
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d100      	bne.n	80062cc <_printf_i+0x24>
 80062ca:	e0be      	b.n	800644a <_printf_i+0x1a2>
 80062cc:	497c      	ldr	r1, [pc, #496]	; (80064c0 <_printf_i+0x218>)
 80062ce:	9103      	str	r1, [sp, #12]
 80062d0:	2a58      	cmp	r2, #88	; 0x58
 80062d2:	d100      	bne.n	80062d6 <_printf_i+0x2e>
 80062d4:	e093      	b.n	80063fe <_printf_i+0x156>
 80062d6:	0026      	movs	r6, r4
 80062d8:	3642      	adds	r6, #66	; 0x42
 80062da:	7032      	strb	r2, [r6, #0]
 80062dc:	e022      	b.n	8006324 <_printf_i+0x7c>
 80062de:	0010      	movs	r0, r2
 80062e0:	3863      	subs	r0, #99	; 0x63
 80062e2:	2815      	cmp	r0, #21
 80062e4:	d8f7      	bhi.n	80062d6 <_printf_i+0x2e>
 80062e6:	f7f9 ff15 	bl	8000114 <__gnu_thumb1_case_shi>
 80062ea:	0016      	.short	0x0016
 80062ec:	fff6001f 	.word	0xfff6001f
 80062f0:	fff6fff6 	.word	0xfff6fff6
 80062f4:	001ffff6 	.word	0x001ffff6
 80062f8:	fff6fff6 	.word	0xfff6fff6
 80062fc:	fff6fff6 	.word	0xfff6fff6
 8006300:	003600a3 	.word	0x003600a3
 8006304:	fff60083 	.word	0xfff60083
 8006308:	00b4fff6 	.word	0x00b4fff6
 800630c:	0036fff6 	.word	0x0036fff6
 8006310:	fff6fff6 	.word	0xfff6fff6
 8006314:	0087      	.short	0x0087
 8006316:	0026      	movs	r6, r4
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	3642      	adds	r6, #66	; 0x42
 800631c:	1d11      	adds	r1, r2, #4
 800631e:	6019      	str	r1, [r3, #0]
 8006320:	6813      	ldr	r3, [r2, #0]
 8006322:	7033      	strb	r3, [r6, #0]
 8006324:	2301      	movs	r3, #1
 8006326:	e0a2      	b.n	800646e <_printf_i+0x1c6>
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	6809      	ldr	r1, [r1, #0]
 800632c:	1d02      	adds	r2, r0, #4
 800632e:	060d      	lsls	r5, r1, #24
 8006330:	d50b      	bpl.n	800634a <_printf_i+0xa2>
 8006332:	6805      	ldr	r5, [r0, #0]
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	2d00      	cmp	r5, #0
 8006338:	da03      	bge.n	8006342 <_printf_i+0x9a>
 800633a:	232d      	movs	r3, #45	; 0x2d
 800633c:	9a04      	ldr	r2, [sp, #16]
 800633e:	426d      	negs	r5, r5
 8006340:	7013      	strb	r3, [r2, #0]
 8006342:	4b5f      	ldr	r3, [pc, #380]	; (80064c0 <_printf_i+0x218>)
 8006344:	270a      	movs	r7, #10
 8006346:	9303      	str	r3, [sp, #12]
 8006348:	e01b      	b.n	8006382 <_printf_i+0xda>
 800634a:	6805      	ldr	r5, [r0, #0]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	0649      	lsls	r1, r1, #25
 8006350:	d5f1      	bpl.n	8006336 <_printf_i+0x8e>
 8006352:	b22d      	sxth	r5, r5
 8006354:	e7ef      	b.n	8006336 <_printf_i+0x8e>
 8006356:	680d      	ldr	r5, [r1, #0]
 8006358:	6819      	ldr	r1, [r3, #0]
 800635a:	1d08      	adds	r0, r1, #4
 800635c:	6018      	str	r0, [r3, #0]
 800635e:	062e      	lsls	r6, r5, #24
 8006360:	d501      	bpl.n	8006366 <_printf_i+0xbe>
 8006362:	680d      	ldr	r5, [r1, #0]
 8006364:	e003      	b.n	800636e <_printf_i+0xc6>
 8006366:	066d      	lsls	r5, r5, #25
 8006368:	d5fb      	bpl.n	8006362 <_printf_i+0xba>
 800636a:	680d      	ldr	r5, [r1, #0]
 800636c:	b2ad      	uxth	r5, r5
 800636e:	4b54      	ldr	r3, [pc, #336]	; (80064c0 <_printf_i+0x218>)
 8006370:	2708      	movs	r7, #8
 8006372:	9303      	str	r3, [sp, #12]
 8006374:	2a6f      	cmp	r2, #111	; 0x6f
 8006376:	d000      	beq.n	800637a <_printf_i+0xd2>
 8006378:	3702      	adds	r7, #2
 800637a:	0023      	movs	r3, r4
 800637c:	2200      	movs	r2, #0
 800637e:	3343      	adds	r3, #67	; 0x43
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	6863      	ldr	r3, [r4, #4]
 8006384:	60a3      	str	r3, [r4, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	db03      	blt.n	8006392 <_printf_i+0xea>
 800638a:	2104      	movs	r1, #4
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	438a      	bics	r2, r1
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	2d00      	cmp	r5, #0
 8006394:	d102      	bne.n	800639c <_printf_i+0xf4>
 8006396:	9e04      	ldr	r6, [sp, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <_printf_i+0x10e>
 800639c:	9e04      	ldr	r6, [sp, #16]
 800639e:	0028      	movs	r0, r5
 80063a0:	0039      	movs	r1, r7
 80063a2:	f7f9 ff47 	bl	8000234 <__aeabi_uidivmod>
 80063a6:	9b03      	ldr	r3, [sp, #12]
 80063a8:	3e01      	subs	r6, #1
 80063aa:	5c5b      	ldrb	r3, [r3, r1]
 80063ac:	7033      	strb	r3, [r6, #0]
 80063ae:	002b      	movs	r3, r5
 80063b0:	0005      	movs	r5, r0
 80063b2:	429f      	cmp	r7, r3
 80063b4:	d9f3      	bls.n	800639e <_printf_i+0xf6>
 80063b6:	2f08      	cmp	r7, #8
 80063b8:	d109      	bne.n	80063ce <_printf_i+0x126>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	07db      	lsls	r3, r3, #31
 80063be:	d506      	bpl.n	80063ce <_printf_i+0x126>
 80063c0:	6862      	ldr	r2, [r4, #4]
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	dc02      	bgt.n	80063ce <_printf_i+0x126>
 80063c8:	2330      	movs	r3, #48	; 0x30
 80063ca:	3e01      	subs	r6, #1
 80063cc:	7033      	strb	r3, [r6, #0]
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	1b9b      	subs	r3, r3, r6
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	0021      	movs	r1, r4
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	9805      	ldr	r0, [sp, #20]
 80063dc:	9b06      	ldr	r3, [sp, #24]
 80063de:	aa09      	add	r2, sp, #36	; 0x24
 80063e0:	f7ff fef2 	bl	80061c8 <_printf_common>
 80063e4:	3001      	adds	r0, #1
 80063e6:	d147      	bne.n	8006478 <_printf_i+0x1d0>
 80063e8:	2001      	movs	r0, #1
 80063ea:	4240      	negs	r0, r0
 80063ec:	b00b      	add	sp, #44	; 0x2c
 80063ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f0:	2220      	movs	r2, #32
 80063f2:	6809      	ldr	r1, [r1, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	6022      	str	r2, [r4, #0]
 80063f8:	2278      	movs	r2, #120	; 0x78
 80063fa:	4932      	ldr	r1, [pc, #200]	; (80064c4 <_printf_i+0x21c>)
 80063fc:	9103      	str	r1, [sp, #12]
 80063fe:	0021      	movs	r1, r4
 8006400:	3145      	adds	r1, #69	; 0x45
 8006402:	700a      	strb	r2, [r1, #0]
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	c920      	ldmia	r1!, {r5}
 800640a:	0610      	lsls	r0, r2, #24
 800640c:	d402      	bmi.n	8006414 <_printf_i+0x16c>
 800640e:	0650      	lsls	r0, r2, #25
 8006410:	d500      	bpl.n	8006414 <_printf_i+0x16c>
 8006412:	b2ad      	uxth	r5, r5
 8006414:	6019      	str	r1, [r3, #0]
 8006416:	07d3      	lsls	r3, r2, #31
 8006418:	d502      	bpl.n	8006420 <_printf_i+0x178>
 800641a:	2320      	movs	r3, #32
 800641c:	4313      	orrs	r3, r2
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	2710      	movs	r7, #16
 8006422:	2d00      	cmp	r5, #0
 8006424:	d1a9      	bne.n	800637a <_printf_i+0xd2>
 8006426:	2220      	movs	r2, #32
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	4393      	bics	r3, r2
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	e7a4      	b.n	800637a <_printf_i+0xd2>
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	680d      	ldr	r5, [r1, #0]
 8006434:	1d10      	adds	r0, r2, #4
 8006436:	6949      	ldr	r1, [r1, #20]
 8006438:	6018      	str	r0, [r3, #0]
 800643a:	6813      	ldr	r3, [r2, #0]
 800643c:	062e      	lsls	r6, r5, #24
 800643e:	d501      	bpl.n	8006444 <_printf_i+0x19c>
 8006440:	6019      	str	r1, [r3, #0]
 8006442:	e002      	b.n	800644a <_printf_i+0x1a2>
 8006444:	066d      	lsls	r5, r5, #25
 8006446:	d5fb      	bpl.n	8006440 <_printf_i+0x198>
 8006448:	8019      	strh	r1, [r3, #0]
 800644a:	2300      	movs	r3, #0
 800644c:	9e04      	ldr	r6, [sp, #16]
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	e7c0      	b.n	80063d4 <_printf_i+0x12c>
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	1d11      	adds	r1, r2, #4
 8006456:	6019      	str	r1, [r3, #0]
 8006458:	6816      	ldr	r6, [r2, #0]
 800645a:	2100      	movs	r1, #0
 800645c:	0030      	movs	r0, r6
 800645e:	6862      	ldr	r2, [r4, #4]
 8006460:	f000 f9b4 	bl	80067cc <memchr>
 8006464:	2800      	cmp	r0, #0
 8006466:	d001      	beq.n	800646c <_printf_i+0x1c4>
 8006468:	1b80      	subs	r0, r0, r6
 800646a:	6060      	str	r0, [r4, #4]
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	6123      	str	r3, [r4, #16]
 8006470:	2300      	movs	r3, #0
 8006472:	9a04      	ldr	r2, [sp, #16]
 8006474:	7013      	strb	r3, [r2, #0]
 8006476:	e7ad      	b.n	80063d4 <_printf_i+0x12c>
 8006478:	0032      	movs	r2, r6
 800647a:	6923      	ldr	r3, [r4, #16]
 800647c:	9906      	ldr	r1, [sp, #24]
 800647e:	9805      	ldr	r0, [sp, #20]
 8006480:	9d07      	ldr	r5, [sp, #28]
 8006482:	47a8      	blx	r5
 8006484:	3001      	adds	r0, #1
 8006486:	d0af      	beq.n	80063e8 <_printf_i+0x140>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	079b      	lsls	r3, r3, #30
 800648c:	d415      	bmi.n	80064ba <_printf_i+0x212>
 800648e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006490:	68e0      	ldr	r0, [r4, #12]
 8006492:	4298      	cmp	r0, r3
 8006494:	daaa      	bge.n	80063ec <_printf_i+0x144>
 8006496:	0018      	movs	r0, r3
 8006498:	e7a8      	b.n	80063ec <_printf_i+0x144>
 800649a:	0022      	movs	r2, r4
 800649c:	2301      	movs	r3, #1
 800649e:	9906      	ldr	r1, [sp, #24]
 80064a0:	9805      	ldr	r0, [sp, #20]
 80064a2:	9e07      	ldr	r6, [sp, #28]
 80064a4:	3219      	adds	r2, #25
 80064a6:	47b0      	blx	r6
 80064a8:	3001      	adds	r0, #1
 80064aa:	d09d      	beq.n	80063e8 <_printf_i+0x140>
 80064ac:	3501      	adds	r5, #1
 80064ae:	68e3      	ldr	r3, [r4, #12]
 80064b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	dcf0      	bgt.n	800649a <_printf_i+0x1f2>
 80064b8:	e7e9      	b.n	800648e <_printf_i+0x1e6>
 80064ba:	2500      	movs	r5, #0
 80064bc:	e7f7      	b.n	80064ae <_printf_i+0x206>
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	08006ac1 	.word	0x08006ac1
 80064c4:	08006ad2 	.word	0x08006ad2

080064c8 <__sflush_r>:
 80064c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ca:	898b      	ldrh	r3, [r1, #12]
 80064cc:	0005      	movs	r5, r0
 80064ce:	000c      	movs	r4, r1
 80064d0:	071a      	lsls	r2, r3, #28
 80064d2:	d45c      	bmi.n	800658e <__sflush_r+0xc6>
 80064d4:	684a      	ldr	r2, [r1, #4]
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	dc04      	bgt.n	80064e4 <__sflush_r+0x1c>
 80064da:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80064dc:	2a00      	cmp	r2, #0
 80064de:	dc01      	bgt.n	80064e4 <__sflush_r+0x1c>
 80064e0:	2000      	movs	r0, #0
 80064e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80064e6:	2f00      	cmp	r7, #0
 80064e8:	d0fa      	beq.n	80064e0 <__sflush_r+0x18>
 80064ea:	2200      	movs	r2, #0
 80064ec:	2080      	movs	r0, #128	; 0x80
 80064ee:	682e      	ldr	r6, [r5, #0]
 80064f0:	602a      	str	r2, [r5, #0]
 80064f2:	001a      	movs	r2, r3
 80064f4:	0140      	lsls	r0, r0, #5
 80064f6:	6a21      	ldr	r1, [r4, #32]
 80064f8:	4002      	ands	r2, r0
 80064fa:	4203      	tst	r3, r0
 80064fc:	d034      	beq.n	8006568 <__sflush_r+0xa0>
 80064fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	075b      	lsls	r3, r3, #29
 8006504:	d506      	bpl.n	8006514 <__sflush_r+0x4c>
 8006506:	6863      	ldr	r3, [r4, #4]
 8006508:	1ac0      	subs	r0, r0, r3
 800650a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <__sflush_r+0x4c>
 8006510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006512:	1ac0      	subs	r0, r0, r3
 8006514:	0002      	movs	r2, r0
 8006516:	2300      	movs	r3, #0
 8006518:	0028      	movs	r0, r5
 800651a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	47b8      	blx	r7
 8006520:	89a2      	ldrh	r2, [r4, #12]
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	d106      	bne.n	8006534 <__sflush_r+0x6c>
 8006526:	6829      	ldr	r1, [r5, #0]
 8006528:	291d      	cmp	r1, #29
 800652a:	d82c      	bhi.n	8006586 <__sflush_r+0xbe>
 800652c:	4b2a      	ldr	r3, [pc, #168]	; (80065d8 <__sflush_r+0x110>)
 800652e:	410b      	asrs	r3, r1
 8006530:	07db      	lsls	r3, r3, #31
 8006532:	d428      	bmi.n	8006586 <__sflush_r+0xbe>
 8006534:	2300      	movs	r3, #0
 8006536:	6063      	str	r3, [r4, #4]
 8006538:	6923      	ldr	r3, [r4, #16]
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	04d2      	lsls	r2, r2, #19
 800653e:	d505      	bpl.n	800654c <__sflush_r+0x84>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <__sflush_r+0x82>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d100      	bne.n	800654c <__sflush_r+0x84>
 800654a:	6560      	str	r0, [r4, #84]	; 0x54
 800654c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800654e:	602e      	str	r6, [r5, #0]
 8006550:	2900      	cmp	r1, #0
 8006552:	d0c5      	beq.n	80064e0 <__sflush_r+0x18>
 8006554:	0023      	movs	r3, r4
 8006556:	3344      	adds	r3, #68	; 0x44
 8006558:	4299      	cmp	r1, r3
 800655a:	d002      	beq.n	8006562 <__sflush_r+0x9a>
 800655c:	0028      	movs	r0, r5
 800655e:	f7ff fa8f 	bl	8005a80 <_free_r>
 8006562:	2000      	movs	r0, #0
 8006564:	6360      	str	r0, [r4, #52]	; 0x34
 8006566:	e7bc      	b.n	80064e2 <__sflush_r+0x1a>
 8006568:	2301      	movs	r3, #1
 800656a:	0028      	movs	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	1c43      	adds	r3, r0, #1
 8006570:	d1c6      	bne.n	8006500 <__sflush_r+0x38>
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0c3      	beq.n	8006500 <__sflush_r+0x38>
 8006578:	2b1d      	cmp	r3, #29
 800657a:	d001      	beq.n	8006580 <__sflush_r+0xb8>
 800657c:	2b16      	cmp	r3, #22
 800657e:	d101      	bne.n	8006584 <__sflush_r+0xbc>
 8006580:	602e      	str	r6, [r5, #0]
 8006582:	e7ad      	b.n	80064e0 <__sflush_r+0x18>
 8006584:	89a2      	ldrh	r2, [r4, #12]
 8006586:	2340      	movs	r3, #64	; 0x40
 8006588:	4313      	orrs	r3, r2
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	e7a9      	b.n	80064e2 <__sflush_r+0x1a>
 800658e:	690e      	ldr	r6, [r1, #16]
 8006590:	2e00      	cmp	r6, #0
 8006592:	d0a5      	beq.n	80064e0 <__sflush_r+0x18>
 8006594:	680f      	ldr	r7, [r1, #0]
 8006596:	600e      	str	r6, [r1, #0]
 8006598:	1bba      	subs	r2, r7, r6
 800659a:	9201      	str	r2, [sp, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	079b      	lsls	r3, r3, #30
 80065a0:	d100      	bne.n	80065a4 <__sflush_r+0xdc>
 80065a2:	694a      	ldr	r2, [r1, #20]
 80065a4:	60a2      	str	r2, [r4, #8]
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dd99      	ble.n	80064e0 <__sflush_r+0x18>
 80065ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065ae:	0032      	movs	r2, r6
 80065b0:	001f      	movs	r7, r3
 80065b2:	0028      	movs	r0, r5
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	6a21      	ldr	r1, [r4, #32]
 80065b8:	47b8      	blx	r7
 80065ba:	2800      	cmp	r0, #0
 80065bc:	dc06      	bgt.n	80065cc <__sflush_r+0x104>
 80065be:	2340      	movs	r3, #64	; 0x40
 80065c0:	2001      	movs	r0, #1
 80065c2:	89a2      	ldrh	r2, [r4, #12]
 80065c4:	4240      	negs	r0, r0
 80065c6:	4313      	orrs	r3, r2
 80065c8:	81a3      	strh	r3, [r4, #12]
 80065ca:	e78a      	b.n	80064e2 <__sflush_r+0x1a>
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	1836      	adds	r6, r6, r0
 80065d0:	1a1b      	subs	r3, r3, r0
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	e7e7      	b.n	80065a6 <__sflush_r+0xde>
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	dfbffffe 	.word	0xdfbffffe

080065dc <_fflush_r>:
 80065dc:	690b      	ldr	r3, [r1, #16]
 80065de:	b570      	push	{r4, r5, r6, lr}
 80065e0:	0005      	movs	r5, r0
 80065e2:	000c      	movs	r4, r1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d102      	bne.n	80065ee <_fflush_r+0x12>
 80065e8:	2500      	movs	r5, #0
 80065ea:	0028      	movs	r0, r5
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d004      	beq.n	80065fc <_fflush_r+0x20>
 80065f2:	6a03      	ldr	r3, [r0, #32]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <_fflush_r+0x20>
 80065f8:	f7ff f90e 	bl	8005818 <__sinit>
 80065fc:	220c      	movs	r2, #12
 80065fe:	5ea3      	ldrsh	r3, [r4, r2]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0f1      	beq.n	80065e8 <_fflush_r+0xc>
 8006604:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006606:	07d2      	lsls	r2, r2, #31
 8006608:	d404      	bmi.n	8006614 <_fflush_r+0x38>
 800660a:	059b      	lsls	r3, r3, #22
 800660c:	d402      	bmi.n	8006614 <_fflush_r+0x38>
 800660e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006610:	f7ff fa33 	bl	8005a7a <__retarget_lock_acquire_recursive>
 8006614:	0028      	movs	r0, r5
 8006616:	0021      	movs	r1, r4
 8006618:	f7ff ff56 	bl	80064c8 <__sflush_r>
 800661c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800661e:	0005      	movs	r5, r0
 8006620:	07db      	lsls	r3, r3, #31
 8006622:	d4e2      	bmi.n	80065ea <_fflush_r+0xe>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	059b      	lsls	r3, r3, #22
 8006628:	d4df      	bmi.n	80065ea <_fflush_r+0xe>
 800662a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662c:	f7ff fa26 	bl	8005a7c <__retarget_lock_release_recursive>
 8006630:	e7db      	b.n	80065ea <_fflush_r+0xe>

08006632 <__swbuf_r>:
 8006632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006634:	0006      	movs	r6, r0
 8006636:	000d      	movs	r5, r1
 8006638:	0014      	movs	r4, r2
 800663a:	2800      	cmp	r0, #0
 800663c:	d004      	beq.n	8006648 <__swbuf_r+0x16>
 800663e:	6a03      	ldr	r3, [r0, #32]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <__swbuf_r+0x16>
 8006644:	f7ff f8e8 	bl	8005818 <__sinit>
 8006648:	69a3      	ldr	r3, [r4, #24]
 800664a:	60a3      	str	r3, [r4, #8]
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	071b      	lsls	r3, r3, #28
 8006650:	d528      	bpl.n	80066a4 <__swbuf_r+0x72>
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d025      	beq.n	80066a4 <__swbuf_r+0x72>
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	b2ef      	uxtb	r7, r5
 800665e:	1ac0      	subs	r0, r0, r3
 8006660:	6963      	ldr	r3, [r4, #20]
 8006662:	b2ed      	uxtb	r5, r5
 8006664:	4283      	cmp	r3, r0
 8006666:	dc05      	bgt.n	8006674 <__swbuf_r+0x42>
 8006668:	0021      	movs	r1, r4
 800666a:	0030      	movs	r0, r6
 800666c:	f7ff ffb6 	bl	80065dc <_fflush_r>
 8006670:	2800      	cmp	r0, #0
 8006672:	d11d      	bne.n	80066b0 <__swbuf_r+0x7e>
 8006674:	68a3      	ldr	r3, [r4, #8]
 8006676:	3001      	adds	r0, #1
 8006678:	3b01      	subs	r3, #1
 800667a:	60a3      	str	r3, [r4, #8]
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	6022      	str	r2, [r4, #0]
 8006682:	701f      	strb	r7, [r3, #0]
 8006684:	6963      	ldr	r3, [r4, #20]
 8006686:	4283      	cmp	r3, r0
 8006688:	d004      	beq.n	8006694 <__swbuf_r+0x62>
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	07db      	lsls	r3, r3, #31
 800668e:	d507      	bpl.n	80066a0 <__swbuf_r+0x6e>
 8006690:	2d0a      	cmp	r5, #10
 8006692:	d105      	bne.n	80066a0 <__swbuf_r+0x6e>
 8006694:	0021      	movs	r1, r4
 8006696:	0030      	movs	r0, r6
 8006698:	f7ff ffa0 	bl	80065dc <_fflush_r>
 800669c:	2800      	cmp	r0, #0
 800669e:	d107      	bne.n	80066b0 <__swbuf_r+0x7e>
 80066a0:	0028      	movs	r0, r5
 80066a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a4:	0021      	movs	r1, r4
 80066a6:	0030      	movs	r0, r6
 80066a8:	f000 f806 	bl	80066b8 <__swsetup_r>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d0d3      	beq.n	8006658 <__swbuf_r+0x26>
 80066b0:	2501      	movs	r5, #1
 80066b2:	426d      	negs	r5, r5
 80066b4:	e7f4      	b.n	80066a0 <__swbuf_r+0x6e>
	...

080066b8 <__swsetup_r>:
 80066b8:	4b30      	ldr	r3, [pc, #192]	; (800677c <__swsetup_r+0xc4>)
 80066ba:	b570      	push	{r4, r5, r6, lr}
 80066bc:	0005      	movs	r5, r0
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	000c      	movs	r4, r1
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d004      	beq.n	80066d0 <__swsetup_r+0x18>
 80066c6:	6a03      	ldr	r3, [r0, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <__swsetup_r+0x18>
 80066cc:	f7ff f8a4 	bl	8005818 <__sinit>
 80066d0:	230c      	movs	r3, #12
 80066d2:	5ee2      	ldrsh	r2, [r4, r3]
 80066d4:	b293      	uxth	r3, r2
 80066d6:	0711      	lsls	r1, r2, #28
 80066d8:	d423      	bmi.n	8006722 <__swsetup_r+0x6a>
 80066da:	06d9      	lsls	r1, r3, #27
 80066dc:	d407      	bmi.n	80066ee <__swsetup_r+0x36>
 80066de:	2309      	movs	r3, #9
 80066e0:	2001      	movs	r0, #1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	3337      	adds	r3, #55	; 0x37
 80066e6:	4313      	orrs	r3, r2
 80066e8:	81a3      	strh	r3, [r4, #12]
 80066ea:	4240      	negs	r0, r0
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
 80066ee:	075b      	lsls	r3, r3, #29
 80066f0:	d513      	bpl.n	800671a <__swsetup_r+0x62>
 80066f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d008      	beq.n	800670a <__swsetup_r+0x52>
 80066f8:	0023      	movs	r3, r4
 80066fa:	3344      	adds	r3, #68	; 0x44
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d002      	beq.n	8006706 <__swsetup_r+0x4e>
 8006700:	0028      	movs	r0, r5
 8006702:	f7ff f9bd 	bl	8005a80 <_free_r>
 8006706:	2300      	movs	r3, #0
 8006708:	6363      	str	r3, [r4, #52]	; 0x34
 800670a:	2224      	movs	r2, #36	; 0x24
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	4393      	bics	r3, r2
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	2300      	movs	r3, #0
 8006714:	6063      	str	r3, [r4, #4]
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	2308      	movs	r3, #8
 800671c:	89a2      	ldrh	r2, [r4, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	6923      	ldr	r3, [r4, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <__swsetup_r+0x88>
 8006728:	21a0      	movs	r1, #160	; 0xa0
 800672a:	2280      	movs	r2, #128	; 0x80
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	0089      	lsls	r1, r1, #2
 8006730:	0092      	lsls	r2, r2, #2
 8006732:	400b      	ands	r3, r1
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <__swsetup_r+0x88>
 8006738:	0021      	movs	r1, r4
 800673a:	0028      	movs	r0, r5
 800673c:	f000 f8b2 	bl	80068a4 <__smakebuf_r>
 8006740:	220c      	movs	r2, #12
 8006742:	5ea3      	ldrsh	r3, [r4, r2]
 8006744:	2001      	movs	r0, #1
 8006746:	001a      	movs	r2, r3
 8006748:	b299      	uxth	r1, r3
 800674a:	4002      	ands	r2, r0
 800674c:	4203      	tst	r3, r0
 800674e:	d00f      	beq.n	8006770 <__swsetup_r+0xb8>
 8006750:	2200      	movs	r2, #0
 8006752:	60a2      	str	r2, [r4, #8]
 8006754:	6962      	ldr	r2, [r4, #20]
 8006756:	4252      	negs	r2, r2
 8006758:	61a2      	str	r2, [r4, #24]
 800675a:	2000      	movs	r0, #0
 800675c:	6922      	ldr	r2, [r4, #16]
 800675e:	4282      	cmp	r2, r0
 8006760:	d1c4      	bne.n	80066ec <__swsetup_r+0x34>
 8006762:	0609      	lsls	r1, r1, #24
 8006764:	d5c2      	bpl.n	80066ec <__swsetup_r+0x34>
 8006766:	2240      	movs	r2, #64	; 0x40
 8006768:	4313      	orrs	r3, r2
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	3801      	subs	r0, #1
 800676e:	e7bd      	b.n	80066ec <__swsetup_r+0x34>
 8006770:	0788      	lsls	r0, r1, #30
 8006772:	d400      	bmi.n	8006776 <__swsetup_r+0xbe>
 8006774:	6962      	ldr	r2, [r4, #20]
 8006776:	60a2      	str	r2, [r4, #8]
 8006778:	e7ef      	b.n	800675a <__swsetup_r+0xa2>
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	20000064 	.word	0x20000064

08006780 <memmove>:
 8006780:	b510      	push	{r4, lr}
 8006782:	4288      	cmp	r0, r1
 8006784:	d902      	bls.n	800678c <memmove+0xc>
 8006786:	188b      	adds	r3, r1, r2
 8006788:	4298      	cmp	r0, r3
 800678a:	d303      	bcc.n	8006794 <memmove+0x14>
 800678c:	2300      	movs	r3, #0
 800678e:	e007      	b.n	80067a0 <memmove+0x20>
 8006790:	5c8b      	ldrb	r3, [r1, r2]
 8006792:	5483      	strb	r3, [r0, r2]
 8006794:	3a01      	subs	r2, #1
 8006796:	d2fb      	bcs.n	8006790 <memmove+0x10>
 8006798:	bd10      	pop	{r4, pc}
 800679a:	5ccc      	ldrb	r4, [r1, r3]
 800679c:	54c4      	strb	r4, [r0, r3]
 800679e:	3301      	adds	r3, #1
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d1fa      	bne.n	800679a <memmove+0x1a>
 80067a4:	e7f8      	b.n	8006798 <memmove+0x18>
	...

080067a8 <_sbrk_r>:
 80067a8:	2300      	movs	r3, #0
 80067aa:	b570      	push	{r4, r5, r6, lr}
 80067ac:	4d06      	ldr	r5, [pc, #24]	; (80067c8 <_sbrk_r+0x20>)
 80067ae:	0004      	movs	r4, r0
 80067b0:	0008      	movs	r0, r1
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	f7fa fce0 	bl	8001178 <_sbrk>
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d103      	bne.n	80067c4 <_sbrk_r+0x1c>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d000      	beq.n	80067c4 <_sbrk_r+0x1c>
 80067c2:	6023      	str	r3, [r4, #0]
 80067c4:	bd70      	pop	{r4, r5, r6, pc}
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	20000364 	.word	0x20000364

080067cc <memchr>:
 80067cc:	b2c9      	uxtb	r1, r1
 80067ce:	1882      	adds	r2, r0, r2
 80067d0:	4290      	cmp	r0, r2
 80067d2:	d101      	bne.n	80067d8 <memchr+0xc>
 80067d4:	2000      	movs	r0, #0
 80067d6:	4770      	bx	lr
 80067d8:	7803      	ldrb	r3, [r0, #0]
 80067da:	428b      	cmp	r3, r1
 80067dc:	d0fb      	beq.n	80067d6 <memchr+0xa>
 80067de:	3001      	adds	r0, #1
 80067e0:	e7f6      	b.n	80067d0 <memchr+0x4>

080067e2 <memcpy>:
 80067e2:	2300      	movs	r3, #0
 80067e4:	b510      	push	{r4, lr}
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d100      	bne.n	80067ec <memcpy+0xa>
 80067ea:	bd10      	pop	{r4, pc}
 80067ec:	5ccc      	ldrb	r4, [r1, r3]
 80067ee:	54c4      	strb	r4, [r0, r3]
 80067f0:	3301      	adds	r3, #1
 80067f2:	e7f8      	b.n	80067e6 <memcpy+0x4>

080067f4 <_realloc_r>:
 80067f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067f6:	0007      	movs	r7, r0
 80067f8:	000e      	movs	r6, r1
 80067fa:	0014      	movs	r4, r2
 80067fc:	2900      	cmp	r1, #0
 80067fe:	d105      	bne.n	800680c <_realloc_r+0x18>
 8006800:	0011      	movs	r1, r2
 8006802:	f7ff f9a9 	bl	8005b58 <_malloc_r>
 8006806:	0005      	movs	r5, r0
 8006808:	0028      	movs	r0, r5
 800680a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800680c:	2a00      	cmp	r2, #0
 800680e:	d103      	bne.n	8006818 <_realloc_r+0x24>
 8006810:	f7ff f936 	bl	8005a80 <_free_r>
 8006814:	0025      	movs	r5, r4
 8006816:	e7f7      	b.n	8006808 <_realloc_r+0x14>
 8006818:	f000 f8a6 	bl	8006968 <_malloc_usable_size_r>
 800681c:	9001      	str	r0, [sp, #4]
 800681e:	4284      	cmp	r4, r0
 8006820:	d803      	bhi.n	800682a <_realloc_r+0x36>
 8006822:	0035      	movs	r5, r6
 8006824:	0843      	lsrs	r3, r0, #1
 8006826:	42a3      	cmp	r3, r4
 8006828:	d3ee      	bcc.n	8006808 <_realloc_r+0x14>
 800682a:	0021      	movs	r1, r4
 800682c:	0038      	movs	r0, r7
 800682e:	f7ff f993 	bl	8005b58 <_malloc_r>
 8006832:	1e05      	subs	r5, r0, #0
 8006834:	d0e8      	beq.n	8006808 <_realloc_r+0x14>
 8006836:	9b01      	ldr	r3, [sp, #4]
 8006838:	0022      	movs	r2, r4
 800683a:	429c      	cmp	r4, r3
 800683c:	d900      	bls.n	8006840 <_realloc_r+0x4c>
 800683e:	001a      	movs	r2, r3
 8006840:	0031      	movs	r1, r6
 8006842:	0028      	movs	r0, r5
 8006844:	f7ff ffcd 	bl	80067e2 <memcpy>
 8006848:	0031      	movs	r1, r6
 800684a:	0038      	movs	r0, r7
 800684c:	f7ff f918 	bl	8005a80 <_free_r>
 8006850:	e7da      	b.n	8006808 <_realloc_r+0x14>
	...

08006854 <__swhatbuf_r>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	000e      	movs	r6, r1
 8006858:	001d      	movs	r5, r3
 800685a:	230e      	movs	r3, #14
 800685c:	5ec9      	ldrsh	r1, [r1, r3]
 800685e:	0014      	movs	r4, r2
 8006860:	b096      	sub	sp, #88	; 0x58
 8006862:	2900      	cmp	r1, #0
 8006864:	da0c      	bge.n	8006880 <__swhatbuf_r+0x2c>
 8006866:	89b2      	ldrh	r2, [r6, #12]
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	0011      	movs	r1, r2
 800686c:	4019      	ands	r1, r3
 800686e:	421a      	tst	r2, r3
 8006870:	d013      	beq.n	800689a <__swhatbuf_r+0x46>
 8006872:	2100      	movs	r1, #0
 8006874:	3b40      	subs	r3, #64	; 0x40
 8006876:	2000      	movs	r0, #0
 8006878:	6029      	str	r1, [r5, #0]
 800687a:	6023      	str	r3, [r4, #0]
 800687c:	b016      	add	sp, #88	; 0x58
 800687e:	bd70      	pop	{r4, r5, r6, pc}
 8006880:	466a      	mov	r2, sp
 8006882:	f000 f84d 	bl	8006920 <_fstat_r>
 8006886:	2800      	cmp	r0, #0
 8006888:	dbed      	blt.n	8006866 <__swhatbuf_r+0x12>
 800688a:	23f0      	movs	r3, #240	; 0xf0
 800688c:	9901      	ldr	r1, [sp, #4]
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	4019      	ands	r1, r3
 8006892:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <__swhatbuf_r+0x4c>)
 8006894:	18c9      	adds	r1, r1, r3
 8006896:	424b      	negs	r3, r1
 8006898:	4159      	adcs	r1, r3
 800689a:	2380      	movs	r3, #128	; 0x80
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	e7ea      	b.n	8006876 <__swhatbuf_r+0x22>
 80068a0:	ffffe000 	.word	0xffffe000

080068a4 <__smakebuf_r>:
 80068a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068a6:	2602      	movs	r6, #2
 80068a8:	898b      	ldrh	r3, [r1, #12]
 80068aa:	0005      	movs	r5, r0
 80068ac:	000c      	movs	r4, r1
 80068ae:	4233      	tst	r3, r6
 80068b0:	d006      	beq.n	80068c0 <__smakebuf_r+0x1c>
 80068b2:	0023      	movs	r3, r4
 80068b4:	3347      	adds	r3, #71	; 0x47
 80068b6:	6023      	str	r3, [r4, #0]
 80068b8:	6123      	str	r3, [r4, #16]
 80068ba:	2301      	movs	r3, #1
 80068bc:	6163      	str	r3, [r4, #20]
 80068be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80068c0:	466a      	mov	r2, sp
 80068c2:	ab01      	add	r3, sp, #4
 80068c4:	f7ff ffc6 	bl	8006854 <__swhatbuf_r>
 80068c8:	9900      	ldr	r1, [sp, #0]
 80068ca:	0007      	movs	r7, r0
 80068cc:	0028      	movs	r0, r5
 80068ce:	f7ff f943 	bl	8005b58 <_malloc_r>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d108      	bne.n	80068e8 <__smakebuf_r+0x44>
 80068d6:	220c      	movs	r2, #12
 80068d8:	5ea3      	ldrsh	r3, [r4, r2]
 80068da:	059a      	lsls	r2, r3, #22
 80068dc:	d4ef      	bmi.n	80068be <__smakebuf_r+0x1a>
 80068de:	2203      	movs	r2, #3
 80068e0:	4393      	bics	r3, r2
 80068e2:	431e      	orrs	r6, r3
 80068e4:	81a6      	strh	r6, [r4, #12]
 80068e6:	e7e4      	b.n	80068b2 <__smakebuf_r+0xe>
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	89a2      	ldrh	r2, [r4, #12]
 80068ec:	6020      	str	r0, [r4, #0]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	9b00      	ldr	r3, [sp, #0]
 80068f4:	6120      	str	r0, [r4, #16]
 80068f6:	6163      	str	r3, [r4, #20]
 80068f8:	9b01      	ldr	r3, [sp, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <__smakebuf_r+0x74>
 80068fe:	0028      	movs	r0, r5
 8006900:	230e      	movs	r3, #14
 8006902:	5ee1      	ldrsh	r1, [r4, r3]
 8006904:	f000 f81e 	bl	8006944 <_isatty_r>
 8006908:	2800      	cmp	r0, #0
 800690a:	d005      	beq.n	8006918 <__smakebuf_r+0x74>
 800690c:	2303      	movs	r3, #3
 800690e:	89a2      	ldrh	r2, [r4, #12]
 8006910:	439a      	bics	r2, r3
 8006912:	3b02      	subs	r3, #2
 8006914:	4313      	orrs	r3, r2
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	433b      	orrs	r3, r7
 800691c:	81a3      	strh	r3, [r4, #12]
 800691e:	e7ce      	b.n	80068be <__smakebuf_r+0x1a>

08006920 <_fstat_r>:
 8006920:	2300      	movs	r3, #0
 8006922:	b570      	push	{r4, r5, r6, lr}
 8006924:	4d06      	ldr	r5, [pc, #24]	; (8006940 <_fstat_r+0x20>)
 8006926:	0004      	movs	r4, r0
 8006928:	0008      	movs	r0, r1
 800692a:	0011      	movs	r1, r2
 800692c:	602b      	str	r3, [r5, #0]
 800692e:	f7fa fc01 	bl	8001134 <_fstat>
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	d103      	bne.n	800693e <_fstat_r+0x1e>
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d000      	beq.n	800693e <_fstat_r+0x1e>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	20000364 	.word	0x20000364

08006944 <_isatty_r>:
 8006944:	2300      	movs	r3, #0
 8006946:	b570      	push	{r4, r5, r6, lr}
 8006948:	4d06      	ldr	r5, [pc, #24]	; (8006964 <_isatty_r+0x20>)
 800694a:	0004      	movs	r4, r0
 800694c:	0008      	movs	r0, r1
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	f7fa fbfe 	bl	8001150 <_isatty>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d103      	bne.n	8006960 <_isatty_r+0x1c>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d000      	beq.n	8006960 <_isatty_r+0x1c>
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	bd70      	pop	{r4, r5, r6, pc}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	20000364 	.word	0x20000364

08006968 <_malloc_usable_size_r>:
 8006968:	1f0b      	subs	r3, r1, #4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	1f18      	subs	r0, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	da01      	bge.n	8006976 <_malloc_usable_size_r+0xe>
 8006972:	580b      	ldr	r3, [r1, r0]
 8006974:	18c0      	adds	r0, r0, r3
 8006976:	4770      	bx	lr

08006978 <_init>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697e:	bc08      	pop	{r3}
 8006980:	469e      	mov	lr, r3
 8006982:	4770      	bx	lr

08006984 <_fini>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr
