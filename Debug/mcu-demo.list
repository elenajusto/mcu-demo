
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c40  08006c40  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c40  08006c40  00016c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c48  08006c48  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000005c  08006cac  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08006cac  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001628d  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c1b  00000000  00000000  00036354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00038f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc6  00000000  00000000  0003a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af4d  00000000  00000000  0003b34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d92  00000000  00000000  0005629b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aeaff  00000000  00000000  0006f02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004eb8  00000000  00000000  0011db2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001229e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006a74 	.word	0x08006a74

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08006a74 	.word	0x08006a74

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fe20 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f826 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 fa36 	bl	8000abc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f9e6 	bl	8000a20 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000654:	f000 f868 	bl	8000728 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000658:	f000 f8cc 	bl	80007f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800065c:	f000 f90a 	bl	8000874 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000660:	f000 f95c 	bl	800091c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Enable PWM on TIM3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <main+0x50>)
 8000666:	2100      	movs	r1, #0
 8000668:	0018      	movs	r0, r3
 800066a:	f003 fc79 	bl	8003f60 <HAL_TIM_PWM_Start>

  // Scan I2C addresses on startup
  i2cScanner();
 800066e:	f000 fb65 	bl	8000d3c <i2cScanner>

  // I2C Display
  hardwareTestLCD();
 8000672:	f000 fb35 	bl	8000ce0 <hardwareTestLCD>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 motorControl(50);
 8000676:	2032      	movs	r0, #50	; 0x32
 8000678:	f000 fb52 	bl	8000d20 <motorControl>

	//  Start conversion after each ADC cycle
	HAL_ADC_Start_IT(&hadc1);
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <main+0x54>)
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fa34 	bl	8001aec <HAL_ADC_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hardwareTestLED();
 8000684:	f000 fabc 	bl	8000c00 <hardwareTestLED>
	  hardwareTestPot();
 8000688:	f000 fafc 	bl	8000c84 <hardwareTestPot>
	 motorControl(50);
 800068c:	e7f3      	b.n	8000676 <main+0x36>
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	2000017c 	.word	0x2000017c
 8000694:	20000078 	.word	0x20000078

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b093      	sub	sp, #76	; 0x4c
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	2410      	movs	r4, #16
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	2338      	movs	r3, #56	; 0x38
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f005 fd5d 	bl	8006168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ae:	003b      	movs	r3, r7
 80006b0:	0018      	movs	r0, r3
 80006b2:	2310      	movs	r3, #16
 80006b4:	001a      	movs	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	f005 fd56 	bl	8006168 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f002 fccd 	bl	8003060 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2202      	movs	r2, #2
 80006ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0052      	lsls	r2, r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2240      	movs	r2, #64	; 0x40
 80006de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 fd05 	bl	80030f8 <HAL_RCC_OscConfig>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006f2:	f000 fbab 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	003b      	movs	r3, r7
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	003b      	movs	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	003b      	movs	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070e:	003b      	movs	r3, r7
 8000710:	2100      	movs	r1, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f003 f80a 	bl	800372c <HAL_RCC_ClockConfig>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800071c:	f000 fb96 	bl	8000e4c <Error_Handler>
  }
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b013      	add	sp, #76	; 0x4c
 8000726:	bd90      	pop	{r4, r7, pc}

08000728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	0018      	movs	r0, r3
 8000732:	230c      	movs	r3, #12
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f005 fd16 	bl	8006168 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_ADC1_Init+0xc4>)
 800073e:	4a2c      	ldr	r2, [pc, #176]	; (80007f0 <MX_ADC1_Init+0xc8>)
 8000740:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	05d2      	lsls	r2, r2, #23
 8000748:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <MX_ADC1_Init+0xc4>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_ADC1_Init+0xc4>)
 800075e:	2204      	movs	r2, #4
 8000760:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000764:	2200      	movs	r2, #0
 8000766:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000768:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_ADC1_Init+0xc4>)
 800076a:	2200      	movs	r2, #0
 800076c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000770:	2201      	movs	r2, #1
 8000772:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000776:	2201      	movs	r2, #1
 8000778:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_ADC1_Init+0xc4>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000788:	222c      	movs	r2, #44	; 0x2c
 800078a:	2100      	movs	r1, #0
 800078c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_ADC1_Init+0xc4>)
 8000796:	2200      	movs	r2, #0
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_ADC1_Init+0xc4>)
 800079c:	2200      	movs	r2, #0
 800079e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_ADC1_Init+0xc4>)
 80007a2:	223c      	movs	r2, #60	; 0x3c
 80007a4:	2100      	movs	r1, #0
 80007a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_ADC1_Init+0xc4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_ADC1_Init+0xc4>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 ff5f 	bl	8001674 <HAL_ADC_Init>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007ba:	f000 fb47 	bl	8000e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2201      	movs	r2, #1
 80007c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	1d3a      	adds	r2, r7, #4
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_ADC1_Init+0xc4>)
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 fa0c 	bl	8001bf4 <HAL_ADC_ConfigChannel>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80007e0:	f000 fb34 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b004      	add	sp, #16
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000078 	.word	0x20000078
 80007f0:	40012400 	.word	0x40012400

080007f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_I2C1_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_I2C1_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_I2C1_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <MX_I2C1_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_I2C1_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_I2C1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2C1_Init+0x74>)
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fe73 	bl	800251c <HAL_I2C_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800083a:	f000 fb07 	bl	8000e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_I2C1_Init+0x74>)
 8000840:	2100      	movs	r1, #0
 8000842:	0018      	movs	r0, r3
 8000844:	f002 fb74 	bl	8002f30 <HAL_I2CEx_ConfigAnalogFilter>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 fafe 	bl	8000e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_I2C1_Init+0x74>)
 8000852:	2100      	movs	r1, #0
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fbb7 	bl	8002fc8 <HAL_I2CEx_ConfigDigitalFilter>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 faf5 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000dc 	.word	0x200000dc
 800086c:	40005400 	.word	0x40005400
 8000870:	00303d5b 	.word	0x00303d5b

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	2310      	movs	r3, #16
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	0018      	movs	r0, r3
 8000880:	2310      	movs	r3, #16
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f005 fc6f 	bl	8006168 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	0018      	movs	r0, r3
 800088e:	230c      	movs	r3, #12
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f005 fc68 	bl	8006168 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_TIM2_Init+0xa4>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	05d2      	lsls	r2, r2, #23
 800089e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_TIM2_Init+0xa4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM2_Init+0xa4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_TIM2_Init+0xa4>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	4252      	negs	r2, r2
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_TIM2_Init+0xa4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_TIM2_Init+0xa4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_TIM2_Init+0xa4>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f003 fa94 	bl	8003df0 <HAL_TIM_Base_Init>
 80008c8:	1e03      	subs	r3, r0, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 fabe 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	2110      	movs	r1, #16
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	0152      	lsls	r2, r2, #5
 80008d8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008da:	187a      	adds	r2, r7, r1
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_TIM2_Init+0xa4>)
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f003 fd27 	bl	8004334 <HAL_TIM_ConfigClockSource>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008ea:	f000 faaf 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008fa:	1d3a      	adds	r2, r7, #4
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_TIM2_Init+0xa4>)
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f004 f9ff 	bl	8004d04 <HAL_TIMEx_MasterConfigSynchronization>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800090a:	f000 fa9f 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b008      	add	sp, #32
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	20000130 	.word	0x20000130

0800091c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	; 0x38
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	2328      	movs	r3, #40	; 0x28
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	0018      	movs	r0, r3
 8000928:	2310      	movs	r3, #16
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f005 fc1b 	bl	8006168 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000932:	231c      	movs	r3, #28
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	0018      	movs	r0, r3
 8000938:	230c      	movs	r3, #12
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f005 fc13 	bl	8006168 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	003b      	movs	r3, r7
 8000944:	0018      	movs	r0, r3
 8000946:	231c      	movs	r3, #28
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f005 fc0c 	bl	8006168 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000950:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <MX_TIM3_Init+0xf8>)
 8000952:	4a31      	ldr	r2, [pc, #196]	; (8000a18 <MX_TIM3_Init+0xfc>)
 8000954:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <MX_TIM3_Init+0xf8>)
 8000958:	2240      	movs	r2, #64	; 0x40
 800095a:	32ff      	adds	r2, #255	; 0xff
 800095c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <MX_TIM3_Init+0xf8>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <MX_TIM3_Init+0xf8>)
 8000966:	4a2d      	ldr	r2, [pc, #180]	; (8000a1c <MX_TIM3_Init+0x100>)
 8000968:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <MX_TIM3_Init+0xf8>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <MX_TIM3_Init+0xf8>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_TIM3_Init+0xf8>)
 8000978:	0018      	movs	r0, r3
 800097a:	f003 fa39 	bl	8003df0 <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 fa63 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2128      	movs	r1, #40	; 0x28
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_TIM3_Init+0xf8>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f003 fccc 	bl	8004334 <HAL_TIM_ConfigClockSource>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80009a0:	f000 fa54 	bl	8000e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_TIM3_Init+0xf8>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fa7a 	bl	8003ea0 <HAL_TIM_PWM_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009b0:	f000 fa4c 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	211c      	movs	r1, #28
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c2:	187a      	adds	r2, r7, r1
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_TIM3_Init+0xf8>)
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f004 f99b 	bl	8004d04 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80009d2:	f000 fa3b 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d6:	003b      	movs	r3, r7
 80009d8:	2260      	movs	r2, #96	; 0x60
 80009da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009dc:	003b      	movs	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	003b      	movs	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	003b      	movs	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ee:	0039      	movs	r1, r7
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_TIM3_Init+0xf8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f003 fb9d 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80009fe:	f000 fa25 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <MX_TIM3_Init+0xf8>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 fb25 	bl	8001054 <HAL_TIM_MspPostInit>

}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b00e      	add	sp, #56	; 0x38
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	2000017c 	.word	0x2000017c
 8000a18:	40000400 	.word	0x40000400
 8000a1c:	000003e7 	.word	0x000003e7

08000a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a26:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <MX_USART2_UART_Init+0x98>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a2c:	22e1      	movs	r2, #225	; 0xe1
 8000a2e:	0252      	lsls	r2, r2, #9
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f004 f9b8 	bl	8004de0 <HAL_UART_Init>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a74:	f000 f9ea 	bl	8000e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f004 ffd5 	bl	8005a2c <HAL_UARTEx_SetTxFifoThreshold>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a86:	f000 f9e1 	bl	8000e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f005 f80c 	bl	8005aac <HAL_UARTEx_SetRxFifoThreshold>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a98:	f000 f9d8 	bl	8000e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x94>)
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f004 ff8a 	bl	80059b8 <HAL_UARTEx_DisableFifoMode>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000aa8:	f000 f9d0 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	200001c8 	.word	0x200001c8
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	2414      	movs	r4, #20
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2314      	movs	r3, #20
 8000aca:	001a      	movs	r2, r3
 8000acc:	2100      	movs	r1, #0
 8000ace:	f005 fb4b 	bl	8006168 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	4b47      	ldr	r3, [pc, #284]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad6:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000ad8:	2104      	movs	r1, #4
 8000ada:	430a      	orrs	r2, r1
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ade:	4b44      	ldr	r3, [pc, #272]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aea:	4b41      	ldr	r3, [pc, #260]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aee:	4b40      	ldr	r3, [pc, #256]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000af0:	2120      	movs	r1, #32
 8000af2:	430a      	orrs	r2, r1
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
 8000af6:	4b3e      	ldr	r3, [pc, #248]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afa:	2220      	movs	r2, #32
 8000afc:	4013      	ands	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b06:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b0e:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b1e:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b20:	2102      	movs	r1, #2
 8000b22:	430a      	orrs	r2, r1
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
 8000b26:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b32:	23a0      	movs	r3, #160	; 0xa0
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	2200      	movs	r2, #0
 8000b38:	2120      	movs	r1, #32
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 fcd0 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000b40:	492c      	ldr	r1, [pc, #176]	; (8000bf4 <MX_GPIO_Init+0x138>)
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_GPIO_Init+0x13c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 fcca 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <MX_GPIO_Init+0x140>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 fcc4 	bl	80024e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2201      	movs	r2, #1
 8000b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b70:	193a      	adds	r2, r7, r4
 8000b72:	23a0      	movs	r3, #160	; 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f001 fb4d 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <MX_GPIO_Init+0x138>)
 8000b82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2201      	movs	r2, #1
 8000b88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <MX_GPIO_Init+0x13c>)
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	0010      	movs	r0, r2
 8000b9e:	f001 fb3b 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2201      	movs	r2, #1
 8000bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <MX_GPIO_Init+0x140>)
 8000bbe:	0019      	movs	r1, r3
 8000bc0:	0010      	movs	r0, r2
 8000bc2:	f001 fb29 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000bc6:	0021      	movs	r1, r4
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2208      	movs	r2, #8
 8000bcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <MX_GPIO_Init+0x13c>)
 8000bde:	0019      	movs	r1, r3
 8000be0:	0010      	movs	r0, r2
 8000be2:	f001 fb19 	bl	8002218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b00b      	add	sp, #44	; 0x2c
 8000bec:	bd90      	pop	{r4, r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	00004010 	.word	0x00004010
 8000bf8:	50000400 	.word	0x50000400
 8000bfc:	50000800 	.word	0x50000800

08000c00 <hardwareTestLED>:

/* USER CODE BEGIN 4 */

	/* Test LEDs are working  */
	void hardwareTestLED(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

		/* Lights ON */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <hardwareTestLED+0x7c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f001 fc68 	bl	80024e0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c10:	2064      	movs	r0, #100	; 0x64
 8000c12:	f000 fbbf 	bl	8001394 <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	01db      	lsls	r3, r3, #7
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <hardwareTestLED+0x80>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	0019      	movs	r1, r3
 8000c20:	f001 fc5e 	bl	80024e0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c24:	2064      	movs	r0, #100	; 0x64
 8000c26:	f000 fbb5 	bl	8001394 <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <hardwareTestLED+0x80>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2110      	movs	r1, #16
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 fc55 	bl	80024e0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c36:	2064      	movs	r0, #100	; 0x64
 8000c38:	f000 fbac 	bl	8001394 <HAL_Delay>

		/* Lights OFF */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <hardwareTestLED+0x7c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 fc4c 	bl	80024e0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c48:	2064      	movs	r0, #100	; 0x64
 8000c4a:	f000 fba3 	bl	8001394 <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	01db      	lsls	r3, r3, #7
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <hardwareTestLED+0x80>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	0019      	movs	r1, r3
 8000c58:	f001 fc42 	bl	80024e0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f000 fb99 	bl	8001394 <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <hardwareTestLED+0x80>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	2110      	movs	r1, #16
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f001 fc39 	bl	80024e0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000c6e:	2064      	movs	r0, #100	; 0x64
 8000c70:	f000 fb90 	bl	8001394 <HAL_Delay>
	}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	50000800 	.word	0x50000800
 8000c80:	50000400 	.word	0x50000400

08000c84 <hardwareTestPot>:

	/* Test potentiometer is working */
	void hardwareTestPot(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
		/* Init variable for pot value */
		char msg[20];
		uint16_t potValue;

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <hardwareTestPot+0x50>)
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 fe98 	bl	80019c4 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <hardwareTestPot+0x50>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 ffa0 	bl	8001bdc <HAL_ADC_GetValue>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	2116      	movs	r1, #22
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	801a      	strh	r2, [r3, #0]

		/* Print value */
		sprintf(msg, "potValue: %hu\r\n", potValue);
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	490b      	ldr	r1, [pc, #44]	; (8000cd8 <hardwareTestPot+0x54>)
 8000caa:	003b      	movs	r3, r7
 8000cac:	0018      	movs	r0, r3
 8000cae:	f005 fa3b 	bl	8006128 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000cb2:	003b      	movs	r3, r7
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff fa25 	bl	8000104 <strlen>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	425b      	negs	r3, r3
 8000cc2:	0039      	movs	r1, r7
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <hardwareTestPot+0x58>)
 8000cc6:	f004 f8e1 	bl	8004e8c <HAL_UART_Transmit>

	}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b006      	add	sp, #24
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000078 	.word	0x20000078
 8000cd8:	08006a8c 	.word	0x08006a8c
 8000cdc:	200001c8 	.word	0x200001c8

08000ce0 <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f005 f8a3 	bl	8005e30 <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f005 f9ae 	bl	8006050 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <hardwareTestLCD+0x38>)
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f005 f9f9 	bl	80060f0 <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2100      	movs	r1, #0
 8000d02:	2000      	movs	r0, #0
 8000d04:	f005 f9a4 	bl	8006050 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <hardwareTestLCD+0x3c>)
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f005 f9ef 	bl	80060f0 <I2C_LCD_WriteString>
	}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	08006ac4 	.word	0x08006ac4
 8000d1c:	08006ad4 	.word	0x08006ad4

08000d20 <motorControl>:

	/* Motor control */
	void motorControl(int adcValue){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, adcValue); // Interpolate ADC values to PWM range
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <motorControl+0x18>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34

	}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b002      	add	sp, #8
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	2000017c 	.word	0x2000017c

08000d3c <i2cScanner>:

	/* I2C Scanner Script */
	/* Author:     Khaled Magdy */
	/* Source: 	   www.DeepBlueMbedded.com */
	void i2cScanner(void){
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b092      	sub	sp, #72	; 0x48
 8000d40:	af00      	add	r7, sp, #0
		uint8_t Buffer[25] = {0};
 8000d42:	232c      	movs	r3, #44	; 0x2c
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	2215      	movs	r2, #21
 8000d4e:	2100      	movs	r1, #0
 8000d50:	0018      	movs	r0, r3
 8000d52:	f005 fa09 	bl	8006168 <memset>
		uint8_t Space[] = " - ";
 8000d56:	2328      	movs	r3, #40	; 0x28
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	4a35      	ldr	r2, [pc, #212]	; (8000e30 <i2cScanner+0xf4>)
 8000d5c:	601a      	str	r2, [r3, #0]
		uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000d5e:	250c      	movs	r5, #12
 8000d60:	197b      	adds	r3, r7, r5
 8000d62:	4a34      	ldr	r2, [pc, #208]	; (8000e34 <i2cScanner+0xf8>)
 8000d64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d66:	c313      	stmia	r3!, {r0, r1, r4}
 8000d68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d6a:	c313      	stmia	r3!, {r0, r1, r4}
 8000d6c:	8812      	ldrh	r2, [r2, #0]
 8000d6e:	801a      	strh	r2, [r3, #0]
		uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000d70:	003b      	movs	r3, r7
 8000d72:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <i2cScanner+0xfc>)
 8000d74:	ca03      	ldmia	r2!, {r0, r1}
 8000d76:	c303      	stmia	r3!, {r0, r1}
 8000d78:	8811      	ldrh	r1, [r2, #0]
 8000d7a:	8019      	strh	r1, [r3, #0]
 8000d7c:	7892      	ldrb	r2, [r2, #2]
 8000d7e:	709a      	strb	r2, [r3, #2]

		uint8_t i = 0, ret;
 8000d80:	2447      	movs	r4, #71	; 0x47
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1000);
 8000d88:	23fa      	movs	r3, #250	; 0xfa
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 fb01 	bl	8001394 <HAL_Delay>

		/*-[ I2C Bus Scanning ]-*/
		HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <i2cScanner+0x100>)
 8000d94:	1979      	adds	r1, r7, r5
 8000d96:	482a      	ldr	r0, [pc, #168]	; (8000e40 <i2cScanner+0x104>)
 8000d98:	221a      	movs	r2, #26
 8000d9a:	f004 f877 	bl	8004e8c <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
 8000da4:	e034      	b.n	8000e10 <i2cScanner+0xd4>
		{
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000da6:	2347      	movs	r3, #71	; 0x47
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	18db      	adds	r3, r3, r3
 8000db0:	b299      	uxth	r1, r3
 8000db2:	2546      	movs	r5, #70	; 0x46
 8000db4:	197c      	adds	r4, r7, r5
 8000db6:	4823      	ldr	r0, [pc, #140]	; (8000e44 <i2cScanner+0x108>)
 8000db8:	2305      	movs	r3, #5
 8000dba:	2203      	movs	r2, #3
 8000dbc:	f001 fd7e 	bl	80028bc <HAL_I2C_IsDeviceReady>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK) /* No ACK Received At That Address */
 8000dc4:	197b      	adds	r3, r7, r5
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d007      	beq.n	8000ddc <i2cScanner+0xa0>
			{
				HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <i2cScanner+0x100>)
 8000dce:	2228      	movs	r2, #40	; 0x28
 8000dd0:	18b9      	adds	r1, r7, r2
 8000dd2:	481b      	ldr	r0, [pc, #108]	; (8000e40 <i2cScanner+0x104>)
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	f004 f859 	bl	8004e8c <HAL_UART_Transmit>
 8000dda:	e013      	b.n	8000e04 <i2cScanner+0xc8>
			}
			else if(ret == HAL_OK)
 8000ddc:	2346      	movs	r3, #70	; 0x46
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10e      	bne.n	8000e04 <i2cScanner+0xc8>
			{
				sprintf(Buffer, "0x%X", i);
 8000de6:	2347      	movs	r3, #71	; 0x47
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	4916      	ldr	r1, [pc, #88]	; (8000e48 <i2cScanner+0x10c>)
 8000dee:	242c      	movs	r4, #44	; 0x2c
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	0018      	movs	r0, r3
 8000df4:	f005 f998 	bl	8006128 <siprintf>
				HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <i2cScanner+0x100>)
 8000dfa:	1939      	adds	r1, r7, r4
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <i2cScanner+0x104>)
 8000dfe:	2219      	movs	r2, #25
 8000e00:	f004 f844 	bl	8004e8c <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000e04:	2147      	movs	r1, #71	; 0x47
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	3201      	adds	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	2347      	movs	r3, #71	; 0x47
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dac4      	bge.n	8000da6 <i2cScanner+0x6a>
			}
		}
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <i2cScanner+0x100>)
 8000e1e:	0039      	movs	r1, r7
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <i2cScanner+0x104>)
 8000e22:	220b      	movs	r2, #11
 8000e24:	f004 f832 	bl	8004e8c <HAL_UART_Transmit>
		/*--[ Scanning Done ]--*/
	}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b012      	add	sp, #72	; 0x48
 8000e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e30:	00202d20 	.word	0x00202d20
 8000e34:	08006aec 	.word	0x08006aec
 8000e38:	08006b08 	.word	0x08006b08
 8000e3c:	00002710 	.word	0x00002710
 8000e40:	200001c8 	.word	0x200001c8
 8000e44:	200000dc 	.word	0x200000dc
 8000e48:	08006ae4 	.word	0x08006ae4

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e64:	2101      	movs	r1, #1
 8000e66:	430a      	orrs	r2, r1
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4013      	ands	r3, r2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0549      	lsls	r1, r1, #21
 8000e80:	430a      	orrs	r2, r1
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	055b      	lsls	r3, r3, #21
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000e92:	23c0      	movs	r3, #192	; 0xc0
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 faa0 	bl	80013dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b08b      	sub	sp, #44	; 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	2414      	movs	r4, #20
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	2314      	movs	r3, #20
 8000eb8:	001a      	movs	r2, r3
 8000eba:	2100      	movs	r1, #0
 8000ebc:	f005 f954 	bl	8006168 <memset>
  if(hadc->Instance==ADC1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <HAL_ADC_MspInit+0x80>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d129      	bne.n	8000f1e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_ADC_MspInit+0x84>)
 8000ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_ADC_MspInit+0x84>)
 8000ed0:	2180      	movs	r1, #128	; 0x80
 8000ed2:	0349      	lsls	r1, r1, #13
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_ADC_MspInit+0x84>)
 8000eda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	035b      	lsls	r3, r3, #13
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_ADC_MspInit+0x84>)
 8000ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_ADC_MspInit+0x84>)
 8000eec:	2101      	movs	r1, #1
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_ADC_MspInit+0x84>)
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	2203      	movs	r2, #3
 8000f08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000f10:	193a      	adds	r2, r7, r4
 8000f12:	23a0      	movs	r3, #160	; 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f001 f97d 	bl	8002218 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b00b      	add	sp, #44	; 0x2c
 8000f24:	bd90      	pop	{r4, r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	40012400 	.word	0x40012400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b097      	sub	sp, #92	; 0x5c
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	2344      	movs	r3, #68	; 0x44
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	2314      	movs	r3, #20
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	f005 f910 	bl	8006168 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	2410      	movs	r4, #16
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	2334      	movs	r3, #52	; 0x34
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f005 f908 	bl	8006168 <memset>
  if(hi2c->Instance==I2C1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <HAL_I2C_MspInit+0xb8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d13e      	bne.n	8000fe0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	2220      	movs	r2, #32
 8000f66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	0018      	movs	r0, r3
 8000f72:	f002 fd85 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f7a:	f7ff ff67 	bl	8000e4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_I2C_MspInit+0xbc>)
 8000f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_I2C_MspInit+0xbc>)
 8000f84:	2102      	movs	r1, #2
 8000f86:	430a      	orrs	r2, r1
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_I2C_MspInit+0xbc>)
 8000f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8e:	2202      	movs	r2, #2
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f96:	2144      	movs	r1, #68	; 0x44
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	22c0      	movs	r2, #192	; 0xc0
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2212      	movs	r2, #18
 8000fa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2206      	movs	r2, #6
 8000fb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_I2C_MspInit+0xc0>)
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	f001 f92a 	bl	8002218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_I2C_MspInit+0xbc>)
 8000fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_I2C_MspInit+0xbc>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0389      	lsls	r1, r1, #14
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_I2C_MspInit+0xbc>)
 8000fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	039b      	lsls	r3, r3, #14
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b017      	add	sp, #92	; 0x5c
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	50000400 	.word	0x50000400

08000ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	429a      	cmp	r2, r3
 8001006:	d10c      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_TIM_Base_MspInit+0x58>)
 800100a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_TIM_Base_MspInit+0x58>)
 800100e:	2101      	movs	r1, #1
 8001010:	430a      	orrs	r2, r1
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_TIM_Base_MspInit+0x58>)
 8001016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001018:	2201      	movs	r2, #1
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001020:	e010      	b.n	8001044 <HAL_TIM_Base_MspInit+0x50>
  else if(htim_base->Instance==TIM3)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_TIM_Base_MspInit+0x5c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d10b      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_TIM_Base_MspInit+0x58>)
 800102e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_TIM_Base_MspInit+0x58>)
 8001032:	2102      	movs	r1, #2
 8001034:	430a      	orrs	r2, r1
 8001036:	63da      	str	r2, [r3, #60]	; 0x3c
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <HAL_TIM_Base_MspInit+0x58>)
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	2202      	movs	r2, #2
 800103e:	4013      	ands	r3, r2
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b004      	add	sp, #16
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	40000400 	.word	0x40000400

08001054 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	240c      	movs	r4, #12
 800105e:	193b      	adds	r3, r7, r4
 8001060:	0018      	movs	r0, r3
 8001062:	2314      	movs	r3, #20
 8001064:	001a      	movs	r2, r3
 8001066:	2100      	movs	r1, #0
 8001068:	f005 f87e 	bl	8006168 <memset>
  if(htim->Instance==TIM3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_TIM_MspPostInit+0x70>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d122      	bne.n	80010bc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_TIM_MspPostInit+0x74>)
 8001078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_TIM_MspPostInit+0x74>)
 800107c:	2101      	movs	r1, #1
 800107e:	430a      	orrs	r2, r1
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_TIM_MspPostInit+0x74>)
 8001084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001086:	2201      	movs	r2, #1
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800108e:	0021      	movs	r1, r4
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2240      	movs	r2, #64	; 0x40
 8001094:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2202      	movs	r2, #2
 800109a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2201      	movs	r2, #1
 80010ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	187a      	adds	r2, r7, r1
 80010b0:	23a0      	movs	r3, #160	; 0xa0
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	0011      	movs	r1, r2
 80010b6:	0018      	movs	r0, r3
 80010b8:	f001 f8ae 	bl	8002218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b009      	add	sp, #36	; 0x24
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	40000400 	.word	0x40000400
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b097      	sub	sp, #92	; 0x5c
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	2344      	movs	r3, #68	; 0x44
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	0018      	movs	r0, r3
 80010da:	2314      	movs	r3, #20
 80010dc:	001a      	movs	r2, r3
 80010de:	2100      	movs	r1, #0
 80010e0:	f005 f842 	bl	8006168 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	2410      	movs	r4, #16
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	0018      	movs	r0, r3
 80010ea:	2334      	movs	r3, #52	; 0x34
 80010ec:	001a      	movs	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	f005 f83a 	bl	8006168 <memset>
  if(huart->Instance==USART2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a22      	ldr	r2, [pc, #136]	; (8001184 <HAL_UART_MspInit+0xb8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d13e      	bne.n	800117c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2202      	movs	r2, #2
 8001102:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110a:	193b      	adds	r3, r7, r4
 800110c:	0018      	movs	r0, r3
 800110e:	f002 fcb7 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	1e03      	subs	r3, r0, #0
 8001114:	d001      	beq.n	800111a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001116:	f7ff fe99 	bl	8000e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_UART_MspInit+0xbc>)
 800111c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_UART_MspInit+0xbc>)
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	0289      	lsls	r1, r1, #10
 8001124:	430a      	orrs	r2, r1
 8001126:	63da      	str	r2, [r3, #60]	; 0x3c
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_MspInit+0xbc>)
 800112a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_UART_MspInit+0xbc>)
 8001138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_UART_MspInit+0xbc>)
 800113c:	2101      	movs	r1, #1
 800113e:	430a      	orrs	r2, r1
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_UART_MspInit+0xbc>)
 8001144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001146:	2201      	movs	r2, #1
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800114e:	2144      	movs	r1, #68	; 0x44
 8001150:	187b      	adds	r3, r7, r1
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2202      	movs	r2, #2
 800115a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2201      	movs	r2, #1
 8001160:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	187b      	adds	r3, r7, r1
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001168:	187b      	adds	r3, r7, r1
 800116a:	2201      	movs	r2, #1
 800116c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	187a      	adds	r2, r7, r1
 8001170:	23a0      	movs	r3, #160	; 0xa0
 8001172:	05db      	lsls	r3, r3, #23
 8001174:	0011      	movs	r1, r2
 8001176:	0018      	movs	r0, r3
 8001178:	f001 f84e 	bl	8002218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b017      	add	sp, #92	; 0x5c
 8001182:	bd90      	pop	{r4, r7, pc}
 8001184:	40004400 	.word	0x40004400
 8001188:	40021000 	.word	0x40021000

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b0:	f000 f8d4 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <_sbrk+0x5c>)
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <_sbrk+0x60>)
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <_sbrk+0x64>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <_sbrk+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	18d3      	adds	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d207      	bcs.n	80011fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ec:	f004 ffc4 	bl	8006178 <__errno>
 80011f0:	0003      	movs	r3, r0
 80011f2:	220c      	movs	r2, #12
 80011f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	425b      	negs	r3, r3
 80011fa:	e009      	b.n	8001210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	18d2      	adds	r2, r2, r3
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <_sbrk+0x64>)
 800120c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b006      	add	sp, #24
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20009000 	.word	0x20009000
 800121c:	00000400 	.word	0x00000400
 8001220:	2000025c 	.word	0x2000025c
 8001224:	200003b0 	.word	0x200003b0

08001228 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001236:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001238:	f7ff fff6 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <LoopForever+0x6>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LoopForever+0xe>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <LoopForever+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001262:	f004 ff8f 	bl	8006184 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001266:	f7ff f9eb 	bl	8000640 <main>

0800126a <LoopForever>:

LoopForever:
  b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   r0, =_estack
 800126c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001278:	08006c50 	.word	0x08006c50
  ldr r2, =_sbss
 800127c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001280:	200003b0 	.word	0x200003b0

08001284 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_COMP_IRQHandler>
	...

08001288 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_Init+0x3c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_Init+0x3c>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0049      	lsls	r1, r1, #1
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a2:	2000      	movs	r0, #0
 80012a4:	f000 f810 	bl	80012c8 <HAL_InitTick>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e001      	b.n	80012b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fdd0 	bl	8000e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b8:	1dfb      	adds	r3, r7, #7
 80012ba:	781b      	ldrb	r3, [r3, #0]
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40022000 	.word	0x40022000

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	230f      	movs	r3, #15
 80012d2:	18fb      	adds	r3, r7, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_InitTick+0x88>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d02b      	beq.n	8001338 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_InitTick+0x8c>)
 80012e2:	681c      	ldr	r4, [r3, #0]
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_InitTick+0x88>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	0019      	movs	r1, r3
 80012ea:	23fa      	movs	r3, #250	; 0xfa
 80012ec:	0098      	lsls	r0, r3, #2
 80012ee:	f7fe ff1b 	bl	8000128 <__udivsi3>
 80012f2:	0003      	movs	r3, r0
 80012f4:	0019      	movs	r1, r3
 80012f6:	0020      	movs	r0, r4
 80012f8:	f7fe ff16 	bl	8000128 <__udivsi3>
 80012fc:	0003      	movs	r3, r0
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 ff7d 	bl	80021fe <HAL_SYSTICK_Config>
 8001304:	1e03      	subs	r3, r0, #0
 8001306:	d112      	bne.n	800132e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d80a      	bhi.n	8001324 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	2301      	movs	r3, #1
 8001312:	425b      	negs	r3, r3
 8001314:	2200      	movs	r2, #0
 8001316:	0018      	movs	r0, r3
 8001318:	f000 ff5c 	bl	80021d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_InitTick+0x90>)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e00d      	b.n	8001340 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001324:	230f      	movs	r3, #15
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	e008      	b.n	8001340 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800132e:	230f      	movs	r3, #15
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	e003      	b.n	8001340 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001340:	230f      	movs	r3, #15
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	781b      	ldrb	r3, [r3, #0]
}
 8001346:	0018      	movs	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	b005      	add	sp, #20
 800134c:	bd90      	pop	{r4, r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000008 	.word	0x20000008
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	18d2      	adds	r2, r2, r3
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_IncTick+0x20>)
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	20000008 	.word	0x20000008
 800137c:	20000260 	.word	0x20000260

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	20000260 	.word	0x20000260

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff0 	bl	8001380 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	001a      	movs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	189b      	adds	r3, r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	f7ff ffe0 	bl	8001380 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	20000008 	.word	0x20000008

080013dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	0019      	movs	r1, r3
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b002      	add	sp, #8
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40010000 	.word	0x40010000
 8001404:	fffff9ff 	.word	0xfffff9ff

08001408 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001418:	401a      	ands	r2, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b002      	add	sp, #8
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	fe3fffff 	.word	0xfe3fffff

08001430 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	23e0      	movs	r3, #224	; 0xe0
 800143e:	045b      	lsls	r3, r3, #17
 8001440:	4013      	ands	r3, r2
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}

0800144a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	2104      	movs	r1, #4
 800145e:	400a      	ands	r2, r1
 8001460:	2107      	movs	r1, #7
 8001462:	4091      	lsls	r1, r2
 8001464:	000a      	movs	r2, r1
 8001466:	43d2      	mvns	r2, r2
 8001468:	401a      	ands	r2, r3
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	2104      	movs	r1, #4
 800146e:	400b      	ands	r3, r1
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4099      	lsls	r1, r3
 8001474:	000b      	movs	r3, r1
 8001476:	431a      	orrs	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b004      	add	sp, #16
 8001482:	bd80      	pop	{r7, pc}

08001484 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	2104      	movs	r1, #4
 8001496:	400a      	ands	r2, r1
 8001498:	2107      	movs	r1, #7
 800149a:	4091      	lsls	r1, r2
 800149c:	000a      	movs	r2, r1
 800149e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2104      	movs	r1, #4
 80014a4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80014a6:	40da      	lsrs	r2, r3
 80014a8:	0013      	movs	r3, r2
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	23c0      	movs	r3, #192	; 0xc0
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4013      	ands	r3, r2
 80014c4:	d101      	bne.n	80014ca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b002      	add	sp, #8
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	211f      	movs	r1, #31
 80014e8:	400a      	ands	r2, r1
 80014ea:	210f      	movs	r1, #15
 80014ec:	4091      	lsls	r1, r2
 80014ee:	000a      	movs	r2, r1
 80014f0:	43d2      	mvns	r2, r2
 80014f2:	401a      	ands	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	0e9b      	lsrs	r3, r3, #26
 80014f8:	210f      	movs	r1, #15
 80014fa:	4019      	ands	r1, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	201f      	movs	r0, #31
 8001500:	4003      	ands	r3, r0
 8001502:	4099      	lsls	r1, r3
 8001504:	000b      	movs	r3, r1
 8001506:	431a      	orrs	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b004      	add	sp, #16
 8001512:	bd80      	pop	{r7, pc}

08001514 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	035b      	lsls	r3, r3, #13
 8001526:	0b5b      	lsrs	r3, r3, #13
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}

08001536 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	0352      	lsls	r2, r2, #13
 8001548:	0b52      	lsrs	r2, r2, #13
 800154a:	43d2      	mvns	r2, r2
 800154c:	401a      	ands	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	0212      	lsls	r2, r2, #8
 8001570:	43d2      	mvns	r2, r2
 8001572:	401a      	ands	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	400b      	ands	r3, r1
 800157c:	4904      	ldr	r1, [pc, #16]	; (8001590 <LL_ADC_SetChannelSamplingTime+0x34>)
 800157e:	400b      	ands	r3, r1
 8001580:	431a      	orrs	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	07ffff00 	.word	0x07ffff00

08001594 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	0552      	lsls	r2, r2, #21
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	6fffffe8 	.word	0x6fffffe8

080015bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	055b      	lsls	r3, r3, #21
 80015cc:	401a      	ands	r2, r3
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	055b      	lsls	r3, r3, #21
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d101      	bne.n	80015da <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80015da:	2300      	movs	r3, #0
}
 80015dc:	0018      	movs	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <LL_ADC_Enable+0x20>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	2201      	movs	r2, #1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}
 8001604:	7fffffe8 	.word	0x7fffffe8

08001608 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2201      	movs	r2, #1
 8001616:	4013      	ands	r3, r2
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <LL_ADC_IsEnabled+0x18>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <LL_ADC_IsEnabled+0x1a>
 8001620:	2300      	movs	r3, #0
}
 8001622:	0018      	movs	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <LL_ADC_REG_StartConversion+0x20>)
 800163a:	4013      	ands	r3, r2
 800163c:	2204      	movs	r2, #4
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}
 800164c:	7fffffe8 	.word	0x7fffffe8

08001650 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2204      	movs	r2, #4
 800165e:	4013      	ands	r3, r2
 8001660:	2b04      	cmp	r3, #4
 8001662:	d101      	bne.n	8001668 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001668:	2300      	movs	r3, #0
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167c:	231f      	movs	r3, #31
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e17f      	b.n	800199a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10a      	bne.n	80016b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fbff 	bl	8000ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2254      	movs	r2, #84	; 0x54
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	0018      	movs	r0, r3
 80016be:	f7ff ff7d 	bl	80015bc <LL_ADC_IsInternalRegulatorEnabled>
 80016c2:	1e03      	subs	r3, r0, #0
 80016c4:	d115      	bne.n	80016f2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7ff ff62 	bl	8001594 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d0:	4bb4      	ldr	r3, [pc, #720]	; (80019a4 <HAL_ADC_Init+0x330>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	49b4      	ldr	r1, [pc, #720]	; (80019a8 <HAL_ADC_Init+0x334>)
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7fe fd26 	bl	8000128 <__udivsi3>
 80016dc:	0003      	movs	r3, r0
 80016de:	3301      	adds	r3, #1
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016e4:	e002      	b.n	80016ec <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f9      	bne.n	80016e6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff ff60 	bl	80015bc <LL_ADC_IsInternalRegulatorEnabled>
 80016fc:	1e03      	subs	r3, r0, #0
 80016fe:	d10f      	bne.n	8001720 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	2210      	movs	r2, #16
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001710:	2201      	movs	r2, #1
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001718:	231f      	movs	r3, #31
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff ff93 	bl	8001650 <LL_ADC_REG_IsConversionOngoing>
 800172a:	0003      	movs	r3, r0
 800172c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	2210      	movs	r2, #16
 8001734:	4013      	ands	r3, r2
 8001736:	d000      	beq.n	800173a <HAL_ADC_Init+0xc6>
 8001738:	e122      	b.n	8001980 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d000      	beq.n	8001742 <HAL_ADC_Init+0xce>
 8001740:	e11e      	b.n	8001980 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	4a99      	ldr	r2, [pc, #612]	; (80019ac <HAL_ADC_Init+0x338>)
 8001748:	4013      	ands	r3, r2
 800174a:	2202      	movs	r2, #2
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	f7ff ff56 	bl	8001608 <LL_ADC_IsEnabled>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d000      	beq.n	8001762 <HAL_ADC_Init+0xee>
 8001760:	e0ad      	b.n	80018be <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7e1b      	ldrb	r3, [r3, #24]
 800176a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800176c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7e5b      	ldrb	r3, [r3, #25]
 8001772:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001774:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7e9b      	ldrb	r3, [r3, #26]
 800177a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800177c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_ADC_Init+0x118>
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	015b      	lsls	r3, r3, #5
 800178a:	e000      	b.n	800178e <HAL_ADC_Init+0x11a>
 800178c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800178e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001794:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	da04      	bge.n	80017a8 <HAL_ADC_Init+0x134>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	e001      	b.n	80017ac <HAL_ADC_Init+0x138>
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80017ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	212c      	movs	r1, #44	; 0x2c
 80017b2:	5c5b      	ldrb	r3, [r3, r1]
 80017b4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017b6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2220      	movs	r2, #32
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d115      	bne.n	80017f4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7e9b      	ldrb	r3, [r3, #26]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	0252      	lsls	r2, r2, #9
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	e00b      	b.n	80017f4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	2220      	movs	r2, #32
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ec:	2201      	movs	r2, #1
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001800:	23e0      	movs	r3, #224	; 0xe0
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800180a:	4313      	orrs	r3, r2
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4a65      	ldr	r2, [pc, #404]	; (80019b0 <HAL_ADC_Init+0x33c>)
 800181a:	4013      	ands	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	430a      	orrs	r2, r1
 8001826:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	0f9b      	lsrs	r3, r3, #30
 800182e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001834:	4313      	orrs	r3, r2
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	223c      	movs	r2, #60	; 0x3c
 8001840:	5c9b      	ldrb	r3, [r3, r2]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d111      	bne.n	800186a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	0f9b      	lsrs	r3, r3, #30
 800184c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001852:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001858:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800185e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	2201      	movs	r2, #1
 8001866:	4313      	orrs	r3, r2
 8001868:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	4a50      	ldr	r2, [pc, #320]	; (80019b4 <HAL_ADC_Init+0x340>)
 8001872:	4013      	ands	r3, r2
 8001874:	0019      	movs	r1, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	430a      	orrs	r2, r1
 800187e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	23c0      	movs	r3, #192	; 0xc0
 8001886:	061b      	lsls	r3, r3, #24
 8001888:	429a      	cmp	r2, r3
 800188a:	d018      	beq.n	80018be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	05db      	lsls	r3, r3, #23
 8001894:	429a      	cmp	r2, r3
 8001896:	d012      	beq.n	80018be <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	061b      	lsls	r3, r3, #24
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d00c      	beq.n	80018be <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80018a4:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <HAL_ADC_Init+0x344>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a44      	ldr	r2, [pc, #272]	; (80019bc <HAL_ADC_Init+0x348>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	0019      	movs	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	23f0      	movs	r3, #240	; 0xf0
 80018b4:	039b      	lsls	r3, r3, #14
 80018b6:	401a      	ands	r2, r3
 80018b8:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <HAL_ADC_Init+0x344>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c6:	001a      	movs	r2, r3
 80018c8:	2100      	movs	r1, #0
 80018ca:	f7ff fdbe 	bl	800144a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d6:	493a      	ldr	r1, [pc, #232]	; (80019c0 <HAL_ADC_Init+0x34c>)
 80018d8:	001a      	movs	r2, r3
 80018da:	f7ff fdb6 	bl	800144a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2110      	movs	r1, #16
 80018f2:	4249      	negs	r1, r1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
 80018f8:	e018      	b.n	800192c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691a      	ldr	r2, [r3, #16]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	039b      	lsls	r3, r3, #14
 8001902:	429a      	cmp	r2, r3
 8001904:	d112      	bne.n	800192c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	3b01      	subs	r3, #1
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	221c      	movs	r2, #28
 8001916:	4013      	ands	r3, r2
 8001918:	2210      	movs	r2, #16
 800191a:	4252      	negs	r2, r2
 800191c:	409a      	lsls	r2, r3
 800191e:	0011      	movs	r1, r2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2100      	movs	r1, #0
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff fda6 	bl	8001484 <LL_ADC_GetSamplingTimeCommonChannels>
 8001938:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800193e:	429a      	cmp	r2, r3
 8001940:	d10b      	bne.n	800195a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	2203      	movs	r2, #3
 800194e:	4393      	bics	r3, r2
 8001950:	2201      	movs	r2, #1
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001958:	e01c      	b.n	8001994 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	2212      	movs	r2, #18
 8001960:	4393      	bics	r3, r2
 8001962:	2210      	movs	r2, #16
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196e:	2201      	movs	r2, #1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001976:	231f      	movs	r3, #31
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800197e:	e009      	b.n	8001994 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	2210      	movs	r2, #16
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800198c:	231f      	movs	r3, #31
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001994:	231f      	movs	r3, #31
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	781b      	ldrb	r3, [r3, #0]
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b008      	add	sp, #32
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	20000000 	.word	0x20000000
 80019a8:	00030d40 	.word	0x00030d40
 80019ac:	fffffefd 	.word	0xfffffefd
 80019b0:	ffde0201 	.word	0xffde0201
 80019b4:	1ffffc02 	.word	0x1ffffc02
 80019b8:	40012708 	.word	0x40012708
 80019bc:	ffc3ffff 	.word	0xffc3ffff
 80019c0:	07ffff04 	.word	0x07ffff04

080019c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d102      	bne.n	80019dc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80019d6:	2308      	movs	r3, #8
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e00f      	b.n	80019fc <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4013      	ands	r3, r2
 80019e6:	d007      	beq.n	80019f8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	2220      	movs	r2, #32
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e072      	b.n	8001ade <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80019f8:	2304      	movs	r3, #4
 80019fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019fc:	f7ff fcc0 	bl	8001380 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001a04:	e01f      	b.n	8001a46 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	d01c      	beq.n	8001a46 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a0c:	f7ff fcb8 	bl	8001380 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d302      	bcc.n	8001a22 <HAL_ADC_PollForConversion+0x5e>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d111      	bne.n	8001a46 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d10b      	bne.n	8001a46 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	2204      	movs	r2, #4
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2254      	movs	r2, #84	; 0x54
 8001a3e:	2100      	movs	r1, #0
 8001a40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e04b      	b.n	8001ade <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d0d9      	beq.n	8001a06 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff fd24 	bl	80014b2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d02e      	beq.n	8001acc <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7e9b      	ldrb	r3, [r3, #26]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d12a      	bne.n	8001acc <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d123      	bne.n	8001acc <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fde1 	bl	8001650 <LL_ADC_REG_IsConversionOngoing>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d110      	bne.n	8001ab4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	210c      	movs	r1, #12
 8001a9e:	438a      	bics	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <HAL_ADC_PollForConversion+0x124>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2201      	movs	r2, #1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8001ab2:	e00b      	b.n	8001acc <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	2220      	movs	r2, #32
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7e1b      	ldrb	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d103      	bne.n	8001adc <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	220c      	movs	r2, #12
 8001ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	fffffefe 	.word	0xfffffefe

08001aec <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001aec:	b5b0      	push	{r4, r5, r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7ff fda9 	bl	8001650 <LL_ADC_REG_IsConversionOngoing>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d15f      	bne.n	8001bc2 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2254      	movs	r2, #84	; 0x54
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_Start_IT+0x24>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e05f      	b.n	8001bd0 <HAL_ADC_Start_IT+0xe4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2254      	movs	r2, #84	; 0x54
 8001b14:	2101      	movs	r1, #1
 8001b16:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b18:	250f      	movs	r5, #15
 8001b1a:	197c      	adds	r4, r7, r5
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 fa40 	bl	8001fa4 <ADC_Enable>
 8001b24:	0003      	movs	r3, r0
 8001b26:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b28:	197b      	adds	r3, r7, r5
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d143      	bne.n	8001bb8 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	4a28      	ldr	r2, [pc, #160]	; (8001bd8 <HAL_ADC_Start_IT+0xec>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	0052      	lsls	r2, r2, #1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	221c      	movs	r2, #28
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2254      	movs	r2, #84	; 0x54
 8001b54:	2100      	movs	r1, #0
 8001b56:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	211c      	movs	r1, #28
 8001b64:	438a      	bics	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d108      	bne.n	8001b82 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	605a      	str	r2, [r3, #4]
          break;
 8001b80:	e008      	b.n	8001b94 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]
          break;
 8001b92:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fd3b 	bl	800162c <LL_ADC_REG_StartConversion>
 8001bb6:	e008      	b.n	8001bca <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2254      	movs	r2, #84	; 0x54
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]
 8001bc0:	e003      	b.n	8001bca <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bc2:	230f      	movs	r3, #15
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001bca:	230f      	movs	r3, #15
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd8:	fffff0fe 	.word	0xfffff0fe

08001bdc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bea:	0018      	movs	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b002      	add	sp, #8
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bfe:	2317      	movs	r3, #23
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2254      	movs	r2, #84	; 0x54
 8001c0e:	5c9b      	ldrb	r3, [r3, r2]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x24>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e1c0      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x3a6>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2254      	movs	r2, #84	; 0x54
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7ff fd13 	bl	8001650 <LL_ADC_REG_IsConversionOngoing>
 8001c2a:	1e03      	subs	r3, r0, #0
 8001c2c:	d000      	beq.n	8001c30 <HAL_ADC_ConfigChannel+0x3c>
 8001c2e:	e1a3      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d100      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x46>
 8001c38:	e143      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d004      	beq.n	8001c50 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c4a:	4ac1      	ldr	r2, [pc, #772]	; (8001f50 <HAL_ADC_ConfigChannel+0x35c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d108      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0019      	movs	r1, r3
 8001c5a:	0010      	movs	r0, r2
 8001c5c:	f7ff fc5a 	bl	8001514 <LL_ADC_REG_SetSequencerChAdd>
 8001c60:	e0c9      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	211f      	movs	r1, #31
 8001c6c:	400b      	ands	r3, r1
 8001c6e:	210f      	movs	r1, #15
 8001c70:	4099      	lsls	r1, r3
 8001c72:	000b      	movs	r3, r1
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4013      	ands	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	035b      	lsls	r3, r3, #13
 8001c80:	0b5b      	lsrs	r3, r3, #13
 8001c82:	d105      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x9c>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0e9b      	lsrs	r3, r3, #26
 8001c8a:	221f      	movs	r2, #31
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	e098      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2201      	movs	r2, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	d000      	beq.n	8001c9c <HAL_ADC_ConfigChannel+0xa8>
 8001c9a:	e091      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x1cc>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d000      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0xb4>
 8001ca6:	e089      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1c8>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2204      	movs	r2, #4
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d000      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0xc0>
 8001cb2:	e081      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x1c4>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2208      	movs	r2, #8
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d000      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0xcc>
 8001cbe:	e079      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x1c0>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d000      	beq.n	8001ccc <HAL_ADC_ConfigChannel+0xd8>
 8001cca:	e071      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x1bc>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d000      	beq.n	8001cd8 <HAL_ADC_ConfigChannel+0xe4>
 8001cd6:	e069      	b.n	8001dac <HAL_ADC_ConfigChannel+0x1b8>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d000      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0xf0>
 8001ce2:	e061      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x1b4>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	4013      	ands	r3, r2
 8001cec:	d000      	beq.n	8001cf0 <HAL_ADC_ConfigChannel+0xfc>
 8001cee:	e059      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x1b0>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d151      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1ac>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	d149      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1a8>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4013      	ands	r3, r2
 8001d12:	d141      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1a4>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d139      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x1a0>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	015b      	lsls	r3, r3, #5
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d131      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x19c>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	019b      	lsls	r3, r3, #6
 8001d34:	4013      	ands	r3, r2
 8001d36:	d129      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x198>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	4013      	ands	r3, r2
 8001d42:	d121      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x194>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d119      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x190>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	025b      	lsls	r3, r3, #9
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d111      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x18c>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	029b      	lsls	r3, r3, #10
 8001d64:	4013      	ands	r3, r2
 8001d66:	d109      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x188>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	02db      	lsls	r3, r3, #11
 8001d70:	4013      	ands	r3, r2
 8001d72:	d001      	beq.n	8001d78 <HAL_ADC_ConfigChannel+0x184>
 8001d74:	2312      	movs	r3, #18
 8001d76:	e024      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e022      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d7c:	2311      	movs	r3, #17
 8001d7e:	e020      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d80:	2310      	movs	r3, #16
 8001d82:	e01e      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d84:	230f      	movs	r3, #15
 8001d86:	e01c      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d88:	230e      	movs	r3, #14
 8001d8a:	e01a      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d8c:	230d      	movs	r3, #13
 8001d8e:	e018      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d90:	230c      	movs	r3, #12
 8001d92:	e016      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d94:	230b      	movs	r3, #11
 8001d96:	e014      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d98:	230a      	movs	r3, #10
 8001d9a:	e012      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d9c:	2309      	movs	r3, #9
 8001d9e:	e010      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001da0:	2308      	movs	r3, #8
 8001da2:	e00e      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001da4:	2307      	movs	r3, #7
 8001da6:	e00c      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001da8:	2306      	movs	r3, #6
 8001daa:	e00a      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dac:	2305      	movs	r3, #5
 8001dae:	e008      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001db0:	2304      	movs	r3, #4
 8001db2:	e006      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001db4:	2303      	movs	r3, #3
 8001db6:	e004      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	6852      	ldr	r2, [r2, #4]
 8001dc6:	201f      	movs	r0, #31
 8001dc8:	4002      	ands	r2, r0
 8001dca:	4093      	lsls	r3, r2
 8001dcc:	000a      	movs	r2, r1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d808      	bhi.n	8001df6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	001a      	movs	r2, r3
 8001df2:	f7ff fb6f 	bl	80014d4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	001a      	movs	r2, r3
 8001e04:	f7ff fbaa 	bl	800155c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db00      	blt.n	8001e12 <HAL_ADC_ConfigChannel+0x21e>
 8001e10:	e0bc      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <HAL_ADC_ConfigChannel+0x360>)
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff fb0b 	bl	8001430 <LL_ADC_GetCommonPathInternalCh>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a4d      	ldr	r2, [pc, #308]	; (8001f58 <HAL_ADC_ConfigChannel+0x364>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d122      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e30:	d11d      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	0412      	lsls	r2, r2, #16
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	4a46      	ldr	r2, [pc, #280]	; (8001f54 <HAL_ADC_ConfigChannel+0x360>)
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	0010      	movs	r0, r2
 8001e40:	f7ff fae2 	bl	8001408 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e44:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <HAL_ADC_ConfigChannel+0x368>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4945      	ldr	r1, [pc, #276]	; (8001f60 <HAL_ADC_ConfigChannel+0x36c>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7fe f96c 	bl	8000128 <__udivsi3>
 8001e50:	0003      	movs	r3, r0
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	0013      	movs	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	189b      	adds	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e5e:	e002      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f9      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e6c:	e08e      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a3c      	ldr	r2, [pc, #240]	; (8001f64 <HAL_ADC_ConfigChannel+0x370>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d10e      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	045b      	lsls	r3, r3, #17
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d109      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	0452      	lsls	r2, r2, #17
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <HAL_ADC_ConfigChannel+0x360>)
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	0010      	movs	r0, r2
 8001e90:	f7ff faba 	bl	8001408 <LL_ADC_SetCommonPathInternalCh>
 8001e94:	e07a      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a33      	ldr	r2, [pc, #204]	; (8001f68 <HAL_ADC_ConfigChannel+0x374>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d000      	beq.n	8001ea2 <HAL_ADC_ConfigChannel+0x2ae>
 8001ea0:	e074      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	03db      	lsls	r3, r3, #15
 8001ea8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001eaa:	d000      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x2ba>
 8001eac:	e06e      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	03d2      	lsls	r2, r2, #15
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <HAL_ADC_ConfigChannel+0x360>)
 8001eb8:	0019      	movs	r1, r3
 8001eba:	0010      	movs	r0, r2
 8001ebc:	f7ff faa4 	bl	8001408 <LL_ADC_SetCommonPathInternalCh>
 8001ec0:	e064      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691a      	ldr	r2, [r3, #16]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d004      	beq.n	8001ed8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <HAL_ADC_ConfigChannel+0x35c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d107      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	f7ff fb27 	bl	8001536 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da4d      	bge.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_ADC_ConfigChannel+0x360>)
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff fa9c 	bl	8001430 <LL_ADC_GetCommonPathInternalCh>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <HAL_ADC_ConfigChannel+0x364>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d108      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4a18      	ldr	r2, [pc, #96]	; (8001f6c <HAL_ADC_ConfigChannel+0x378>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_ADC_ConfigChannel+0x360>)
 8001f0e:	0019      	movs	r1, r3
 8001f10:	0010      	movs	r0, r2
 8001f12:	f7ff fa79 	bl	8001408 <LL_ADC_SetCommonPathInternalCh>
 8001f16:	e039      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_ADC_ConfigChannel+0x370>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d108      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <HAL_ADC_ConfigChannel+0x37c>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_ADC_ConfigChannel+0x360>)
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	f7ff fa6b 	bl	8001408 <LL_ADC_SetCommonPathInternalCh>
 8001f32:	e02b      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <HAL_ADC_ConfigChannel+0x374>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d126      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <HAL_ADC_ConfigChannel+0x380>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_ADC_ConfigChannel+0x360>)
 8001f46:	0019      	movs	r1, r3
 8001f48:	0010      	movs	r0, r2
 8001f4a:	f7ff fa5d 	bl	8001408 <LL_ADC_SetCommonPathInternalCh>
 8001f4e:	e01d      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x398>
 8001f50:	80000004 	.word	0x80000004
 8001f54:	40012708 	.word	0x40012708
 8001f58:	b0001000 	.word	0xb0001000
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	00030d40 	.word	0x00030d40
 8001f64:	b8004000 	.word	0xb8004000
 8001f68:	b4002000 	.word	0xb4002000
 8001f6c:	ff7fffff 	.word	0xff7fffff
 8001f70:	feffffff 	.word	0xfeffffff
 8001f74:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f84:	2317      	movs	r3, #23
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2254      	movs	r2, #84	; 0x54
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f94:	2317      	movs	r3, #23
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b006      	add	sp, #24
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)

08001fa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff fb27 	bl	8001608 <LL_ADC_IsEnabled>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d000      	beq.n	8001fc0 <ADC_Enable+0x1c>
 8001fbe:	e069      	b.n	8002094 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4a36      	ldr	r2, [pc, #216]	; (80020a0 <ADC_Enable+0xfc>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d00d      	beq.n	8001fe8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	2201      	movs	r2, #1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e056      	b.n	8002096 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff faf9 	bl	80015e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <ADC_Enable+0x100>)
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f7ff fa1b 	bl	8001430 <LL_ADC_GetCommonPathInternalCh>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	4013      	ands	r3, r2
 8002002:	d00f      	beq.n	8002024 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <ADC_Enable+0x104>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4928      	ldr	r1, [pc, #160]	; (80020ac <ADC_Enable+0x108>)
 800200a:	0018      	movs	r0, r3
 800200c:	f7fe f88c 	bl	8000128 <__udivsi3>
 8002010:	0003      	movs	r3, r0
 8002012:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002014:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002016:	e002      	b.n	800201e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	3b01      	subs	r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7e5b      	ldrb	r3, [r3, #25]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d033      	beq.n	8002094 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800202c:	f7ff f9a8 	bl	8001380 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002034:	e027      	b.n	8002086 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff fae4 	bl	8001608 <LL_ADC_IsEnabled>
 8002040:	1e03      	subs	r3, r0, #0
 8002042:	d104      	bne.n	800204e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff facb 	bl	80015e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800204e:	f7ff f997 	bl	8001380 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d914      	bls.n	8002086 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2201      	movs	r2, #1
 8002064:	4013      	ands	r3, r2
 8002066:	2b01      	cmp	r3, #1
 8002068:	d00d      	beq.n	8002086 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	2210      	movs	r2, #16
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2201      	movs	r2, #1
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e007      	b.n	8002096 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	2b01      	cmp	r3, #1
 8002092:	d1d0      	bne.n	8002036 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	80000017 	.word	0x80000017
 80020a4:	40012708 	.word	0x40012708
 80020a8:	20000000 	.word	0x20000000
 80020ac:	00030d40 	.word	0x00030d40

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	0002      	movs	r2, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b7f      	cmp	r3, #127	; 0x7f
 80020c4:	d828      	bhi.n	8002118 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020c6:	4a2f      	ldr	r2, [pc, #188]	; (8002184 <__NVIC_SetPriority+0xd4>)
 80020c8:	1dfb      	adds	r3, r7, #7
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	33c0      	adds	r3, #192	; 0xc0
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	589b      	ldr	r3, [r3, r2]
 80020d6:	1dfa      	adds	r2, r7, #7
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	0011      	movs	r1, r2
 80020dc:	2203      	movs	r2, #3
 80020de:	400a      	ands	r2, r1
 80020e0:	00d2      	lsls	r2, r2, #3
 80020e2:	21ff      	movs	r1, #255	; 0xff
 80020e4:	4091      	lsls	r1, r2
 80020e6:	000a      	movs	r2, r1
 80020e8:	43d2      	mvns	r2, r2
 80020ea:	401a      	ands	r2, r3
 80020ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	019b      	lsls	r3, r3, #6
 80020f2:	22ff      	movs	r2, #255	; 0xff
 80020f4:	401a      	ands	r2, r3
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	0018      	movs	r0, r3
 80020fc:	2303      	movs	r3, #3
 80020fe:	4003      	ands	r3, r0
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002104:	481f      	ldr	r0, [pc, #124]	; (8002184 <__NVIC_SetPriority+0xd4>)
 8002106:	1dfb      	adds	r3, r7, #7
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b25b      	sxtb	r3, r3
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	430a      	orrs	r2, r1
 8002110:	33c0      	adds	r3, #192	; 0xc0
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002116:	e031      	b.n	800217c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <__NVIC_SetPriority+0xd8>)
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	0019      	movs	r1, r3
 8002120:	230f      	movs	r3, #15
 8002122:	400b      	ands	r3, r1
 8002124:	3b08      	subs	r3, #8
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3306      	adds	r3, #6
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	18d3      	adds	r3, r2, r3
 800212e:	3304      	adds	r3, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1dfa      	adds	r2, r7, #7
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	0011      	movs	r1, r2
 8002138:	2203      	movs	r2, #3
 800213a:	400a      	ands	r2, r1
 800213c:	00d2      	lsls	r2, r2, #3
 800213e:	21ff      	movs	r1, #255	; 0xff
 8002140:	4091      	lsls	r1, r2
 8002142:	000a      	movs	r2, r1
 8002144:	43d2      	mvns	r2, r2
 8002146:	401a      	ands	r2, r3
 8002148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	401a      	ands	r2, r3
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	0018      	movs	r0, r3
 8002158:	2303      	movs	r3, #3
 800215a:	4003      	ands	r3, r0
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002160:	4809      	ldr	r0, [pc, #36]	; (8002188 <__NVIC_SetPriority+0xd8>)
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	001c      	movs	r4, r3
 8002168:	230f      	movs	r3, #15
 800216a:	4023      	ands	r3, r4
 800216c:	3b08      	subs	r3, #8
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	430a      	orrs	r2, r1
 8002172:	3306      	adds	r3, #6
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	18c3      	adds	r3, r0, r3
 8002178:	3304      	adds	r3, #4
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b003      	add	sp, #12
 8002182:	bd90      	pop	{r4, r7, pc}
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	1e5a      	subs	r2, r3, #1
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	045b      	lsls	r3, r3, #17
 800219c:	429a      	cmp	r2, r3
 800219e:	d301      	bcc.n	80021a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a0:	2301      	movs	r3, #1
 80021a2:	e010      	b.n	80021c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <SysTick_Config+0x44>)
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	3a01      	subs	r2, #1
 80021aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ac:	2301      	movs	r3, #1
 80021ae:	425b      	negs	r3, r3
 80021b0:	2103      	movs	r1, #3
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7ff ff7c 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SysTick_Config+0x44>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <SysTick_Config+0x44>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	210f      	movs	r1, #15
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	1c02      	adds	r2, r0, #0
 80021e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	0011      	movs	r1, r2
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff ff5d 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f7ff ffbf 	bl	800218c <SysTick_Config>
 800220e:	0003      	movs	r3, r0
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e147      	b.n	80024b8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4091      	lsls	r1, r2
 8002232:	000a      	movs	r2, r1
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d100      	bne.n	8002240 <HAL_GPIO_Init+0x28>
 800223e:	e138      	b.n	80024b2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	4013      	ands	r3, r2
 8002248:	2b01      	cmp	r3, #1
 800224a:	d005      	beq.n	8002258 <HAL_GPIO_Init+0x40>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2203      	movs	r2, #3
 8002252:	4013      	ands	r3, r2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d130      	bne.n	80022ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	409a      	lsls	r2, r3
 8002266:	0013      	movs	r3, r2
 8002268:	43da      	mvns	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	409a      	lsls	r2, r3
 800227a:	0013      	movs	r3, r2
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228e:	2201      	movs	r2, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
 8002294:	0013      	movs	r3, r2
 8002296:	43da      	mvns	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	2201      	movs	r2, #1
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d017      	beq.n	80022f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	409a      	lsls	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	43da      	mvns	r2, r3
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2203      	movs	r2, #3
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d123      	bne.n	800234a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	0092      	lsls	r2, r2, #2
 800230c:	58d3      	ldr	r3, [r2, r3]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2207      	movs	r2, #7
 8002314:	4013      	ands	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2107      	movs	r1, #7
 800232e:	400b      	ands	r3, r1
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	409a      	lsls	r2, r3
 8002334:	0013      	movs	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	6939      	ldr	r1, [r7, #16]
 8002348:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	43da      	mvns	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2203      	movs	r2, #3
 8002368:	401a      	ands	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	409a      	lsls	r2, r3
 8002370:	0013      	movs	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	23c0      	movs	r3, #192	; 0xc0
 8002384:	029b      	lsls	r3, r3, #10
 8002386:	4013      	ands	r3, r2
 8002388:	d100      	bne.n	800238c <HAL_GPIO_Init+0x174>
 800238a:	e092      	b.n	80024b2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800238c:	4a50      	ldr	r2, [pc, #320]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3318      	adds	r3, #24
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	589b      	ldr	r3, [r3, r2]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2203      	movs	r2, #3
 800239e:	4013      	ands	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	220f      	movs	r2, #15
 80023a4:	409a      	lsls	r2, r3
 80023a6:	0013      	movs	r3, r2
 80023a8:	43da      	mvns	r2, r3
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	23a0      	movs	r3, #160	; 0xa0
 80023b4:	05db      	lsls	r3, r3, #23
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d013      	beq.n	80023e2 <HAL_GPIO_Init+0x1ca>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <HAL_GPIO_Init+0x2bc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00d      	beq.n	80023de <HAL_GPIO_Init+0x1c6>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a44      	ldr	r2, [pc, #272]	; (80024d8 <HAL_GPIO_Init+0x2c0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <HAL_GPIO_Init+0x1c2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a43      	ldr	r2, [pc, #268]	; (80024dc <HAL_GPIO_Init+0x2c4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_GPIO_Init+0x1be>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x1cc>
 80023d6:	2305      	movs	r3, #5
 80023d8:	e004      	b.n	80023e4 <HAL_GPIO_Init+0x1cc>
 80023da:	2302      	movs	r3, #2
 80023dc:	e002      	b.n	80023e4 <HAL_GPIO_Init+0x1cc>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_GPIO_Init+0x1cc>
 80023e2:	2300      	movs	r3, #0
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	2103      	movs	r1, #3
 80023e8:	400a      	ands	r2, r1
 80023ea:	00d2      	lsls	r2, r2, #3
 80023ec:	4093      	lsls	r3, r2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80023f4:	4936      	ldr	r1, [pc, #216]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3318      	adds	r3, #24
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002402:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43da      	mvns	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	035b      	lsls	r3, r3, #13
 800241a:	4013      	ands	r3, r2
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002426:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43da      	mvns	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	039b      	lsls	r3, r3, #14
 8002444:	4013      	ands	r3, r2
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002450:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002456:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 8002458:	2384      	movs	r3, #132	; 0x84
 800245a:	58d3      	ldr	r3, [r2, r3]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43da      	mvns	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	029b      	lsls	r3, r3, #10
 8002470:	4013      	ands	r3, r2
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800247c:	4914      	ldr	r1, [pc, #80]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 800247e:	2284      	movs	r2, #132	; 0x84
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	58d3      	ldr	r3, [r2, r3]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43da      	mvns	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	025b      	lsls	r3, r3, #9
 800249e:	4013      	ands	r3, r2
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024aa:	4909      	ldr	r1, [pc, #36]	; (80024d0 <HAL_GPIO_Init+0x2b8>)
 80024ac:	2280      	movs	r2, #128	; 0x80
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	40da      	lsrs	r2, r3
 80024c0:	1e13      	subs	r3, r2, #0
 80024c2:	d000      	beq.n	80024c6 <HAL_GPIO_Init+0x2ae>
 80024c4:	e6b0      	b.n	8002228 <HAL_GPIO_Init+0x10>
  }
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021800 	.word	0x40021800
 80024d4:	50000400 	.word	0x50000400
 80024d8:	50000800 	.word	0x50000800
 80024dc:	50000c00 	.word	0x50000c00

080024e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	0008      	movs	r0, r1
 80024ea:	0011      	movs	r1, r2
 80024ec:	1cbb      	adds	r3, r7, #2
 80024ee:	1c02      	adds	r2, r0, #0
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	1c7b      	adds	r3, r7, #1
 80024f4:	1c0a      	adds	r2, r1, #0
 80024f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f8:	1c7b      	adds	r3, r7, #1
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002500:	1cbb      	adds	r3, r7, #2
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002508:	e003      	b.n	8002512 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800250a:	1cbb      	adds	r3, r7, #2
 800250c:	881a      	ldrh	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e08f      	b.n	800264e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2241      	movs	r2, #65	; 0x41
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d107      	bne.n	800254a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2240      	movs	r2, #64	; 0x40
 800253e:	2100      	movs	r1, #0
 8002540:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f7fe fcf3 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2241      	movs	r2, #65	; 0x41
 800254e:	2124      	movs	r1, #36	; 0x24
 8002550:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	438a      	bics	r2, r1
 8002560:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	493b      	ldr	r1, [pc, #236]	; (8002658 <HAL_I2C_Init+0x13c>)
 800256c:	400a      	ands	r2, r1
 800256e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4938      	ldr	r1, [pc, #224]	; (800265c <HAL_I2C_Init+0x140>)
 800257c:	400a      	ands	r2, r1
 800257e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d108      	bne.n	800259a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	0209      	lsls	r1, r1, #8
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	e007      	b.n	80025aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2184      	movs	r1, #132	; 0x84
 80025a4:	0209      	lsls	r1, r1, #8
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d109      	bne.n	80025c6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	0109      	lsls	r1, r1, #4
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	e007      	b.n	80025d6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4923      	ldr	r1, [pc, #140]	; (8002660 <HAL_I2C_Init+0x144>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4920      	ldr	r1, [pc, #128]	; (8002664 <HAL_I2C_Init+0x148>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	491a      	ldr	r1, [pc, #104]	; (800265c <HAL_I2C_Init+0x140>)
 80025f2:	400a      	ands	r2, r1
 80025f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	431a      	orrs	r2, r3
 8002600:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69d9      	ldr	r1, [r3, #28]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1a      	ldr	r2, [r3, #32]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2101      	movs	r1, #1
 800262c:	430a      	orrs	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2241      	movs	r2, #65	; 0x41
 800263a:	2120      	movs	r1, #32
 800263c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2242      	movs	r2, #66	; 0x42
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b002      	add	sp, #8
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	f0ffffff 	.word	0xf0ffffff
 800265c:	ffff7fff 	.word	0xffff7fff
 8002660:	fffff7ff 	.word	0xfffff7ff
 8002664:	02008000 	.word	0x02008000

08002668 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	0008      	movs	r0, r1
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	0019      	movs	r1, r3
 8002676:	230a      	movs	r3, #10
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	1c02      	adds	r2, r0, #0
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	2308      	movs	r3, #8
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	1c0a      	adds	r2, r1, #0
 8002684:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2241      	movs	r2, #65	; 0x41
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b20      	cmp	r3, #32
 8002690:	d000      	beq.n	8002694 <HAL_I2C_Master_Transmit+0x2c>
 8002692:	e10a      	b.n	80028aa <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	5c9b      	ldrb	r3, [r3, r2]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_Master_Transmit+0x3a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e104      	b.n	80028ac <HAL_I2C_Master_Transmit+0x244>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2240      	movs	r2, #64	; 0x40
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026aa:	f7fe fe69 	bl	8001380 <HAL_GetTick>
 80026ae:	0003      	movs	r3, r0
 80026b0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026b2:	2380      	movs	r3, #128	; 0x80
 80026b4:	0219      	lsls	r1, r3, #8
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2319      	movs	r3, #25
 80026be:	2201      	movs	r2, #1
 80026c0:	f000 fa1a 	bl	8002af8 <I2C_WaitOnFlagUntilTimeout>
 80026c4:	1e03      	subs	r3, r0, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0ef      	b.n	80028ac <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2241      	movs	r2, #65	; 0x41
 80026d0:	2121      	movs	r1, #33	; 0x21
 80026d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2242      	movs	r2, #66	; 0x42
 80026d8:	2110      	movs	r1, #16
 80026da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2208      	movs	r2, #8
 80026ec:	18ba      	adds	r2, r7, r2
 80026ee:	8812      	ldrh	r2, [r2, #0]
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2bff      	cmp	r3, #255	; 0xff
 8002700:	d906      	bls.n	8002710 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	22ff      	movs	r2, #255	; 0xff
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	045b      	lsls	r3, r3, #17
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e007      	b.n	8002720 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	049b      	lsls	r3, r3, #18
 800271e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d027      	beq.n	8002778 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	b2db      	uxtb	r3, r3
 800275e:	3301      	adds	r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	697c      	ldr	r4, [r7, #20]
 8002764:	230a      	movs	r3, #10
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	8819      	ldrh	r1, [r3, #0]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <HAL_I2C_Master_Transmit+0x24c>)
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	0023      	movs	r3, r4
 8002772:	f000 fba3 	bl	8002ebc <I2C_TransferConfig>
 8002776:	e06f      	b.n	8002858 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	b2da      	uxtb	r2, r3
 800277e:	697c      	ldr	r4, [r7, #20]
 8002780:	230a      	movs	r3, #10
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	8819      	ldrh	r1, [r3, #0]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_I2C_Master_Transmit+0x24c>)
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	0023      	movs	r3, r4
 800278e:	f000 fb95 	bl	8002ebc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002792:	e061      	b.n	8002858 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	0018      	movs	r0, r3
 800279c:	f000 fa04 	bl	8002ba8 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a0:	1e03      	subs	r3, r0, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e081      	b.n	80028ac <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d03a      	beq.n	8002858 <HAL_I2C_Master_Transmit+0x1f0>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d136      	bne.n	8002858 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	0013      	movs	r3, r2
 80027f4:	2200      	movs	r2, #0
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	f000 f97e 	bl	8002af8 <I2C_WaitOnFlagUntilTimeout>
 80027fc:	1e03      	subs	r3, r0, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e053      	b.n	80028ac <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d911      	bls.n	8002832 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22ff      	movs	r2, #255	; 0xff
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	b2da      	uxtb	r2, r3
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	045c      	lsls	r4, r3, #17
 800281e:	230a      	movs	r3, #10
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	8819      	ldrh	r1, [r3, #0]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	2300      	movs	r3, #0
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	0023      	movs	r3, r4
 800282c:	f000 fb46 	bl	8002ebc <I2C_TransferConfig>
 8002830:	e012      	b.n	8002858 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002840:	b2da      	uxtb	r2, r3
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	049c      	lsls	r4, r3, #18
 8002846:	230a      	movs	r3, #10
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	8819      	ldrh	r1, [r3, #0]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	2300      	movs	r3, #0
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	0023      	movs	r3, r4
 8002854:	f000 fb32 	bl	8002ebc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d198      	bne.n	8002794 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f9e3 	bl	8002c34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e01a      	b.n	80028ac <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2220      	movs	r2, #32
 800287c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	490b      	ldr	r1, [pc, #44]	; (80028b8 <HAL_I2C_Master_Transmit+0x250>)
 800288a:	400a      	ands	r2, r1
 800288c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2241      	movs	r2, #65	; 0x41
 8002892:	2120      	movs	r1, #32
 8002894:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2242      	movs	r2, #66	; 0x42
 800289a:	2100      	movs	r1, #0
 800289c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2240      	movs	r2, #64	; 0x40
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	e000      	b.n	80028ac <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80028aa:	2302      	movs	r3, #2
  }
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b007      	add	sp, #28
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	80002000 	.word	0x80002000
 80028b8:	fe00e800 	.word	0xfe00e800

080028bc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	230a      	movs	r3, #10
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	1c0a      	adds	r2, r1, #0
 80028ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2241      	movs	r2, #65	; 0x41
 80028d8:	5c9b      	ldrb	r3, [r3, r2]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d000      	beq.n	80028e2 <HAL_I2C_IsDeviceReady+0x26>
 80028e0:	e0df      	b.n	8002aa2 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	021b      	lsls	r3, r3, #8
 80028ec:	401a      	ands	r2, r3
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0d4      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	5c9b      	ldrb	r3, [r3, r2]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_I2C_IsDeviceReady+0x4c>
 8002904:	2302      	movs	r3, #2
 8002906:	e0cd      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1e8>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	2101      	movs	r1, #1
 800290e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2241      	movs	r2, #65	; 0x41
 8002914:	2124      	movs	r1, #36	; 0x24
 8002916:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <HAL_I2C_IsDeviceReady+0x7a>
 8002926:	230a      	movs	r3, #10
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	059b      	lsls	r3, r3, #22
 800292e:	0d9b      	lsrs	r3, r3, #22
 8002930:	4a5e      	ldr	r2, [pc, #376]	; (8002aac <HAL_I2C_IsDeviceReady+0x1f0>)
 8002932:	431a      	orrs	r2, r3
 8002934:	e006      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x88>
 8002936:	230a      	movs	r3, #10
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	059b      	lsls	r3, r3, #22
 800293e:	0d9b      	lsrs	r3, r3, #22
 8002940:	4a5b      	ldr	r2, [pc, #364]	; (8002ab0 <HAL_I2C_IsDeviceReady+0x1f4>)
 8002942:	431a      	orrs	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800294a:	f7fe fd19 	bl	8001380 <HAL_GetTick>
 800294e:	0003      	movs	r3, r0
 8002950:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2220      	movs	r2, #32
 800295a:	4013      	ands	r3, r2
 800295c:	3b20      	subs	r3, #32
 800295e:	425a      	negs	r2, r3
 8002960:	4153      	adcs	r3, r2
 8002962:	b2da      	uxtb	r2, r3
 8002964:	231f      	movs	r3, #31
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2210      	movs	r2, #16
 8002972:	4013      	ands	r3, r2
 8002974:	3b10      	subs	r3, #16
 8002976:	425a      	negs	r2, r3
 8002978:	4153      	adcs	r3, r2
 800297a:	b2da      	uxtb	r2, r3
 800297c:	231e      	movs	r3, #30
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002982:	e035      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	d01a      	beq.n	80029c0 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe fcf9 	bl	8001380 <HAL_GetTick>
 800298e:	0002      	movs	r2, r0
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <HAL_I2C_IsDeviceReady+0xe4>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10f      	bne.n	80029c0 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2241      	movs	r2, #65	; 0x41
 80029a4:	2120      	movs	r1, #32
 80029a6:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	2220      	movs	r2, #32
 80029ae:	431a      	orrs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2240      	movs	r2, #64	; 0x40
 80029b8:	2100      	movs	r1, #0
 80029ba:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e071      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2220      	movs	r2, #32
 80029c8:	4013      	ands	r3, r2
 80029ca:	3b20      	subs	r3, #32
 80029cc:	425a      	negs	r2, r3
 80029ce:	4153      	adcs	r3, r2
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	231f      	movs	r3, #31
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2210      	movs	r2, #16
 80029e0:	4013      	ands	r3, r2
 80029e2:	3b10      	subs	r3, #16
 80029e4:	425a      	negs	r2, r3
 80029e6:	4153      	adcs	r3, r2
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	231e      	movs	r3, #30
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029f0:	231f      	movs	r3, #31
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d104      	bne.n	8002a04 <HAL_I2C_IsDeviceReady+0x148>
 80029fa:	231e      	movs	r3, #30
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0bf      	beq.n	8002984 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d01a      	beq.n	8002a48 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	0013      	movs	r3, r2
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2120      	movs	r1, #32
 8002a20:	f000 f86a 	bl	8002af8 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e03b      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2220      	movs	r2, #32
 8002a32:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2241      	movs	r2, #65	; 0x41
 8002a38:	2120      	movs	r1, #32
 8002a3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2240      	movs	r2, #64	; 0x40
 8002a40:	2100      	movs	r1, #0
 8002a42:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e02d      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	0013      	movs	r3, r2
 8002a52:	2200      	movs	r2, #0
 8002a54:	2120      	movs	r1, #32
 8002a56:	f000 f84f 	bl	8002af8 <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e020      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d900      	bls.n	8002a82 <HAL_I2C_IsDeviceReady+0x1c6>
 8002a80:	e74d      	b.n	800291e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2241      	movs	r2, #65	; 0x41
 8002a86:	2120      	movs	r1, #32
 8002a88:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	2220      	movs	r2, #32
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2240      	movs	r2, #64	; 0x40
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
  }
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b008      	add	sp, #32
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	02002000 	.word	0x02002000
 8002ab0:	02002800 	.word	0x02002800

08002ab4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d103      	bne.n	8002ad2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d007      	beq.n	8002af0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2101      	movs	r1, #1
 8002aec:	430a      	orrs	r2, r1
 8002aee:	619a      	str	r2, [r3, #24]
  }
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b08:	e03a      	b.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	6839      	ldr	r1, [r7, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 f8d3 	bl	8002cbc <I2C_IsErrorOccurred>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e040      	b.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	d02d      	beq.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b24:	f7fe fc2c 	bl	8001380 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d302      	bcc.n	8002b3a <I2C_WaitOnFlagUntilTimeout+0x42>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d122      	bne.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	4013      	ands	r3, r2
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	425a      	negs	r2, r3
 8002b4a:	4153      	adcs	r3, r2
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	001a      	movs	r2, r3
 8002b50:	1dfb      	adds	r3, r7, #7
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d113      	bne.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2241      	movs	r2, #65	; 0x41
 8002b68:	2120      	movs	r1, #32
 8002b6a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2242      	movs	r2, #66	; 0x42
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	2100      	movs	r1, #0
 8002b7a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e00f      	b.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	425a      	negs	r2, r3
 8002b90:	4153      	adcs	r3, r2
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	001a      	movs	r2, r3
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d0b5      	beq.n	8002b0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bb4:	e032      	b.n	8002c1c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 f87d 	bl	8002cbc <I2C_IsErrorOccurred>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d001      	beq.n	8002bca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e030      	b.n	8002c2c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	d025      	beq.n	8002c1c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7fe fbd6 	bl	8001380 <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11a      	bne.n	8002c1c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2202      	movs	r2, #2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d013      	beq.n	8002c1c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2241      	movs	r2, #65	; 0x41
 8002c04:	2120      	movs	r1, #32
 8002c06:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2242      	movs	r2, #66	; 0x42
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2240      	movs	r2, #64	; 0x40
 8002c14:	2100      	movs	r1, #0
 8002c16:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e007      	b.n	8002c2c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d1c5      	bne.n	8002bb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b004      	add	sp, #16
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c40:	e02f      	b.n	8002ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f837 	bl	8002cbc <I2C_IsErrorOccurred>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e02d      	b.n	8002cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7fe fb93 	bl	8001380 <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d11a      	bne.n	8002ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2220      	movs	r2, #32
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d013      	beq.n	8002ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	2220      	movs	r2, #32
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2241      	movs	r2, #65	; 0x41
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2242      	movs	r2, #66	; 0x42
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2240      	movs	r2, #64	; 0x40
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e007      	b.n	8002cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d1c8      	bne.n	8002c42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b004      	add	sp, #16
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b08b      	sub	sp, #44	; 0x2c
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2327      	movs	r3, #39	; 0x27
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d100      	bne.n	8002cea <I2C_IsErrorOccurred+0x2e>
 8002ce8:	e082      	b.n	8002df0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2210      	movs	r2, #16
 8002cf0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cf2:	e060      	b.n	8002db6 <I2C_IsErrorOccurred+0xfa>
 8002cf4:	2427      	movs	r4, #39	; 0x27
 8002cf6:	193b      	adds	r3, r7, r4
 8002cf8:	193a      	adds	r2, r7, r4
 8002cfa:	7812      	ldrb	r2, [r2, #0]
 8002cfc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	d058      	beq.n	8002db6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7fe fb3c 	bl	8001380 <HAL_GetTick>
 8002d08:	0002      	movs	r2, r0
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d306      	bcc.n	8002d22 <I2C_IsErrorOccurred+0x66>
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	193a      	adds	r2, r7, r4
 8002d18:	7812      	ldrb	r2, [r2, #0]
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d149      	bne.n	8002db6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	01db      	lsls	r3, r3, #7
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d30:	2013      	movs	r0, #19
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	2142      	movs	r1, #66	; 0x42
 8002d38:	5c52      	ldrb	r2, [r2, r1]
 8002d3a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	401a      	ands	r2, r3
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d126      	bne.n	8002d9e <I2C_IsErrorOccurred+0xe2>
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	01db      	lsls	r3, r3, #7
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d021      	beq.n	8002d9e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002d5a:	183b      	adds	r3, r7, r0
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d01d      	beq.n	8002d9e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2180      	movs	r1, #128	; 0x80
 8002d6e:	01c9      	lsls	r1, r1, #7
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d74:	f7fe fb04 	bl	8001380 <HAL_GetTick>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d7c:	e00f      	b.n	8002d9e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d7e:	f7fe faff 	bl	8001380 <HAL_GetTick>
 8002d82:	0002      	movs	r2, r0
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b19      	cmp	r3, #25
 8002d8a:	d908      	bls.n	8002d9e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	4313      	orrs	r3, r2
 8002d92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d94:	2327      	movs	r3, #39	; 0x27
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]

              break;
 8002d9c:	e00b      	b.n	8002db6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2220      	movs	r2, #32
 8002da6:	4013      	ands	r3, r2
 8002da8:	2127      	movs	r1, #39	; 0x27
 8002daa:	187a      	adds	r2, r7, r1
 8002dac:	1879      	adds	r1, r7, r1
 8002dae:	7809      	ldrb	r1, [r1, #0]
 8002db0:	7011      	strb	r1, [r2, #0]
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d1e3      	bne.n	8002d7e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d004      	beq.n	8002dce <I2C_IsErrorOccurred+0x112>
 8002dc4:	2327      	movs	r3, #39	; 0x27
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d092      	beq.n	8002cf4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dce:	2327      	movs	r3, #39	; 0x27
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	2204      	movs	r2, #4
 8002de4:	4313      	orrs	r3, r2
 8002de6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002de8:	2327      	movs	r3, #39	; 0x27
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d00c      	beq.n	8002e1c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2201      	movs	r2, #1
 8002e06:	4313      	orrs	r3, r2
 8002e08:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	0052      	lsls	r2, r2, #1
 8002e12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e14:	2327      	movs	r3, #39	; 0x27
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4013      	ands	r3, r2
 8002e24:	d00c      	beq.n	8002e40 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	2208      	movs	r2, #8
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	00d2      	lsls	r2, r2, #3
 8002e36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e38:	2327      	movs	r3, #39	; 0x27
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4013      	ands	r3, r2
 8002e48:	d00c      	beq.n	8002e64 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e5c:	2327      	movs	r3, #39	; 0x27
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002e64:	2327      	movs	r3, #39	; 0x27
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01d      	beq.n	8002eaa <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff fe1f 	bl	8002ab4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	490d      	ldr	r1, [pc, #52]	; (8002eb8 <I2C_IsErrorOccurred+0x1fc>)
 8002e82:	400a      	ands	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2241      	movs	r2, #65	; 0x41
 8002e96:	2120      	movs	r1, #32
 8002e98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2242      	movs	r2, #66	; 0x42
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2240      	movs	r2, #64	; 0x40
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002eaa:	2327      	movs	r3, #39	; 0x27
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	781b      	ldrb	r3, [r3, #0]
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b00b      	add	sp, #44	; 0x2c
 8002eb6:	bd90      	pop	{r4, r7, pc}
 8002eb8:	fe00e800 	.word	0xfe00e800

08002ebc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	0008      	movs	r0, r1
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	240a      	movs	r4, #10
 8002ecc:	193b      	adds	r3, r7, r4
 8002ece:	1c02      	adds	r2, r0, #0
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	2009      	movs	r0, #9
 8002ed4:	183b      	adds	r3, r7, r0
 8002ed6:	1c0a      	adds	r2, r1, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	059b      	lsls	r3, r3, #22
 8002ee0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ee2:	183b      	adds	r3, r7, r0
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	0419      	lsls	r1, r3, #16
 8002ee8:	23ff      	movs	r3, #255	; 0xff
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f06:	0d51      	lsrs	r1, r2, #21
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	00d2      	lsls	r2, r2, #3
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	4907      	ldr	r1, [pc, #28]	; (8002f2c <I2C_TransferConfig+0x70>)
 8002f10:	430a      	orrs	r2, r1
 8002f12:	43d2      	mvns	r2, r2
 8002f14:	401a      	ands	r2, r3
 8002f16:	0011      	movs	r1, r2
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b007      	add	sp, #28
 8002f28:	bd90      	pop	{r4, r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	03ff63ff 	.word	0x03ff63ff

08002f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2241      	movs	r2, #65	; 0x41
 8002f3e:	5c9b      	ldrb	r3, [r3, r2]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b20      	cmp	r3, #32
 8002f44:	d138      	bne.n	8002fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	5c9b      	ldrb	r3, [r3, r2]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e032      	b.n	8002fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	2101      	movs	r1, #1
 8002f5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2241      	movs	r2, #65	; 0x41
 8002f60:	2124      	movs	r1, #36	; 0x24
 8002f62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2101      	movs	r1, #1
 8002f70:	438a      	bics	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4911      	ldr	r1, [pc, #68]	; (8002fc4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f80:	400a      	ands	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6819      	ldr	r1, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2241      	movs	r2, #65	; 0x41
 8002fa8:	2120      	movs	r1, #32
 8002faa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2240      	movs	r2, #64	; 0x40
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e000      	b.n	8002fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	ffffefff 	.word	0xffffefff

08002fc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2241      	movs	r2, #65	; 0x41
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d139      	bne.n	8003052 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2240      	movs	r2, #64	; 0x40
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e033      	b.n	8003054 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2240      	movs	r2, #64	; 0x40
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2241      	movs	r2, #65	; 0x41
 8002ff8:	2124      	movs	r1, #36	; 0x24
 8002ffa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2101      	movs	r1, #1
 8003008:	438a      	bics	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a11      	ldr	r2, [pc, #68]	; (800305c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	430a      	orrs	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2241      	movs	r2, #65	; 0x41
 8003042:	2120      	movs	r1, #32
 8003044:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2240      	movs	r2, #64	; 0x40
 800304a:	2100      	movs	r1, #0
 800304c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	e000      	b.n	8003054 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
  }
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	b004      	add	sp, #16
 800305a:	bd80      	pop	{r7, pc}
 800305c:	fffff0ff 	.word	0xfffff0ff

08003060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800306e:	4013      	ands	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	430a      	orrs	r2, r1
 8003078:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d11f      	bne.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003084:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	0013      	movs	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	189b      	adds	r3, r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4912      	ldr	r1, [pc, #72]	; (80030dc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003092:	0018      	movs	r0, r3
 8003094:	f7fd f848 	bl	8000128 <__udivsi3>
 8003098:	0003      	movs	r3, r0
 800309a:	3301      	adds	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800309e:	e008      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e001      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e009      	b.n	80030c6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	2380      	movs	r3, #128	; 0x80
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	401a      	ands	r2, r3
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d0ed      	beq.n	80030a0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b004      	add	sp, #16
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	40007000 	.word	0x40007000
 80030d4:	fffff9ff 	.word	0xfffff9ff
 80030d8:	20000000 	.word	0x20000000
 80030dc:	000f4240 	.word	0x000f4240

080030e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	23e0      	movs	r3, #224	; 0xe0
 80030ea:	01db      	lsls	r3, r3, #7
 80030ec:	4013      	ands	r3, r2
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e2fe      	b.n	8003708 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2201      	movs	r2, #1
 8003110:	4013      	ands	r3, r2
 8003112:	d100      	bne.n	8003116 <HAL_RCC_OscConfig+0x1e>
 8003114:	e07c      	b.n	8003210 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003116:	4bc3      	ldr	r3, [pc, #780]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2238      	movs	r2, #56	; 0x38
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003120:	4bc0      	ldr	r3, [pc, #768]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2203      	movs	r2, #3
 8003126:	4013      	ands	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b10      	cmp	r3, #16
 800312e:	d102      	bne.n	8003136 <HAL_RCC_OscConfig+0x3e>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b03      	cmp	r3, #3
 8003134:	d002      	beq.n	800313c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d10b      	bne.n	8003154 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313c:	4bb9      	ldr	r3, [pc, #740]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	029b      	lsls	r3, r3, #10
 8003144:	4013      	ands	r3, r2
 8003146:	d062      	beq.n	800320e <HAL_RCC_OscConfig+0x116>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d15e      	bne.n	800320e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e2d9      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	025b      	lsls	r3, r3, #9
 800315c:	429a      	cmp	r2, r3
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x78>
 8003160:	4bb0      	ldr	r3, [pc, #704]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4baf      	ldr	r3, [pc, #700]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	0249      	lsls	r1, r1, #9
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e020      	b.n	80031b2 <HAL_RCC_OscConfig+0xba>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	23a0      	movs	r3, #160	; 0xa0
 8003176:	02db      	lsls	r3, r3, #11
 8003178:	429a      	cmp	r2, r3
 800317a:	d10e      	bne.n	800319a <HAL_RCC_OscConfig+0xa2>
 800317c:	4ba9      	ldr	r3, [pc, #676]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4ba8      	ldr	r3, [pc, #672]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003182:	2180      	movs	r1, #128	; 0x80
 8003184:	02c9      	lsls	r1, r1, #11
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	4ba6      	ldr	r3, [pc, #664]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4ba5      	ldr	r3, [pc, #660]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	0249      	lsls	r1, r1, #9
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e00b      	b.n	80031b2 <HAL_RCC_OscConfig+0xba>
 800319a:	4ba2      	ldr	r3, [pc, #648]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4ba1      	ldr	r3, [pc, #644]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80031a0:	49a1      	ldr	r1, [pc, #644]	; (8003428 <HAL_RCC_OscConfig+0x330>)
 80031a2:	400a      	ands	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	4b9f      	ldr	r3, [pc, #636]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b9e      	ldr	r3, [pc, #632]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80031ac:	499f      	ldr	r1, [pc, #636]	; (800342c <HAL_RCC_OscConfig+0x334>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d014      	beq.n	80031e4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ba:	f7fe f8e1 	bl	8001380 <HAL_GetTick>
 80031be:	0003      	movs	r3, r0
 80031c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fe f8dc 	bl	8001380 <HAL_GetTick>
 80031c8:	0002      	movs	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e298      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d6:	4b93      	ldr	r3, [pc, #588]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	029b      	lsls	r3, r3, #10
 80031de:	4013      	ands	r3, r2
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0xcc>
 80031e2:	e015      	b.n	8003210 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe f8cc 	bl	8001380 <HAL_GetTick>
 80031e8:	0003      	movs	r3, r0
 80031ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ee:	f7fe f8c7 	bl	8001380 <HAL_GetTick>
 80031f2:	0002      	movs	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b64      	cmp	r3, #100	; 0x64
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e283      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003200:	4b88      	ldr	r3, [pc, #544]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	029b      	lsls	r3, r3, #10
 8003208:	4013      	ands	r3, r2
 800320a:	d1f0      	bne.n	80031ee <HAL_RCC_OscConfig+0xf6>
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2202      	movs	r2, #2
 8003216:	4013      	ands	r3, r2
 8003218:	d100      	bne.n	800321c <HAL_RCC_OscConfig+0x124>
 800321a:	e099      	b.n	8003350 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800321c:	4b81      	ldr	r3, [pc, #516]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2238      	movs	r2, #56	; 0x38
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003226:	4b7f      	ldr	r3, [pc, #508]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2203      	movs	r2, #3
 800322c:	4013      	ands	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b10      	cmp	r3, #16
 8003234:	d102      	bne.n	800323c <HAL_RCC_OscConfig+0x144>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d002      	beq.n	8003242 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d135      	bne.n	80032ae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003242:	4b78      	ldr	r3, [pc, #480]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4013      	ands	r3, r2
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x162>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e256      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325a:	4b72      	ldr	r3, [pc, #456]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a74      	ldr	r2, [pc, #464]	; (8003430 <HAL_RCC_OscConfig+0x338>)
 8003260:	4013      	ands	r3, r2
 8003262:	0019      	movs	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	021a      	lsls	r2, r3, #8
 800326a:	4b6e      	ldr	r3, [pc, #440]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d112      	bne.n	800329c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003276:	4b6b      	ldr	r3, [pc, #428]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6e      	ldr	r2, [pc, #440]	; (8003434 <HAL_RCC_OscConfig+0x33c>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	4b67      	ldr	r3, [pc, #412]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800328a:	4b66      	ldr	r3, [pc, #408]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	0adb      	lsrs	r3, r3, #11
 8003290:	2207      	movs	r2, #7
 8003292:	4013      	ands	r3, r2
 8003294:	4a68      	ldr	r2, [pc, #416]	; (8003438 <HAL_RCC_OscConfig+0x340>)
 8003296:	40da      	lsrs	r2, r3
 8003298:	4b68      	ldr	r3, [pc, #416]	; (800343c <HAL_RCC_OscConfig+0x344>)
 800329a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800329c:	4b68      	ldr	r3, [pc, #416]	; (8003440 <HAL_RCC_OscConfig+0x348>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7fe f811 	bl	80012c8 <HAL_InitTick>
 80032a6:	1e03      	subs	r3, r0, #0
 80032a8:	d051      	beq.n	800334e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e22c      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d030      	beq.n	8003318 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032b6:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5e      	ldr	r2, [pc, #376]	; (8003434 <HAL_RCC_OscConfig+0x33c>)
 80032bc:	4013      	ands	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	4b57      	ldr	r3, [pc, #348]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80032ca:	4b56      	ldr	r3, [pc, #344]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b55      	ldr	r3, [pc, #340]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	0049      	lsls	r1, r1, #1
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe f852 	bl	8001380 <HAL_GetTick>
 80032dc:	0003      	movs	r3, r0
 80032de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe f84d 	bl	8001380 <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e209      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f4:	4b4b      	ldr	r3, [pc, #300]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4013      	ands	r3, r2
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003300:	4b48      	ldr	r3, [pc, #288]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a4a      	ldr	r2, [pc, #296]	; (8003430 <HAL_RCC_OscConfig+0x338>)
 8003306:	4013      	ands	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	021a      	lsls	r2, r3, #8
 8003310:	4b44      	ldr	r3, [pc, #272]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	e01b      	b.n	8003350 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003318:	4b42      	ldr	r3, [pc, #264]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800331e:	4949      	ldr	r1, [pc, #292]	; (8003444 <HAL_RCC_OscConfig+0x34c>)
 8003320:	400a      	ands	r2, r1
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe f82c 	bl	8001380 <HAL_GetTick>
 8003328:	0003      	movs	r3, r0
 800332a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe f827 	bl	8001380 <HAL_GetTick>
 8003332:	0002      	movs	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1e3      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003340:	4b38      	ldr	r3, [pc, #224]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4013      	ands	r3, r2
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x236>
 800334c:	e000      	b.n	8003350 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2208      	movs	r2, #8
 8003356:	4013      	ands	r3, r2
 8003358:	d047      	beq.n	80033ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800335a:	4b32      	ldr	r3, [pc, #200]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2238      	movs	r2, #56	; 0x38
 8003360:	4013      	ands	r3, r2
 8003362:	2b18      	cmp	r3, #24
 8003364:	d10a      	bne.n	800337c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003366:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	2202      	movs	r2, #2
 800336c:	4013      	ands	r3, r2
 800336e:	d03c      	beq.n	80033ea <HAL_RCC_OscConfig+0x2f2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d138      	bne.n	80033ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e1c5      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d019      	beq.n	80033b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003386:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003388:	4b26      	ldr	r3, [pc, #152]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800338a:	2101      	movs	r1, #1
 800338c:	430a      	orrs	r2, r1
 800338e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd fff6 	bl	8001380 <HAL_GetTick>
 8003394:	0003      	movs	r3, r0
 8003396:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339a:	f7fd fff1 	bl	8001380 <HAL_GetTick>
 800339e:	0002      	movs	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1ad      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80033ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b0:	2202      	movs	r2, #2
 80033b2:	4013      	ands	r3, r2
 80033b4:	d0f1      	beq.n	800339a <HAL_RCC_OscConfig+0x2a2>
 80033b6:	e018      	b.n	80033ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80033ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd ffdc 	bl	8001380 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ce:	f7fd ffd7 	bl	8001380 <HAL_GetTick>
 80033d2:	0002      	movs	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e193      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e0:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	2202      	movs	r2, #2
 80033e6:	4013      	ands	r3, r2
 80033e8:	d1f1      	bne.n	80033ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2204      	movs	r2, #4
 80033f0:	4013      	ands	r3, r2
 80033f2:	d100      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2fe>
 80033f4:	e0c6      	b.n	8003584 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f6:	231f      	movs	r3, #31
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2238      	movs	r2, #56	; 0x38
 8003404:	4013      	ands	r3, r2
 8003406:	2b20      	cmp	r3, #32
 8003408:	d11e      	bne.n	8003448 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_OscConfig+0x32c>)
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	2202      	movs	r2, #2
 8003410:	4013      	ands	r3, r2
 8003412:	d100      	bne.n	8003416 <HAL_RCC_OscConfig+0x31e>
 8003414:	e0b6      	b.n	8003584 <HAL_RCC_OscConfig+0x48c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d000      	beq.n	8003420 <HAL_RCC_OscConfig+0x328>
 800341e:	e0b1      	b.n	8003584 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e171      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
 8003424:	40021000 	.word	0x40021000
 8003428:	fffeffff 	.word	0xfffeffff
 800342c:	fffbffff 	.word	0xfffbffff
 8003430:	ffff80ff 	.word	0xffff80ff
 8003434:	ffffc7ff 	.word	0xffffc7ff
 8003438:	00f42400 	.word	0x00f42400
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004
 8003444:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003448:	4bb1      	ldr	r3, [pc, #708]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800344a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	055b      	lsls	r3, r3, #21
 8003450:	4013      	ands	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_RCC_OscConfig+0x360>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x362>
 8003458:	2300      	movs	r3, #0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d011      	beq.n	8003482 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	4bac      	ldr	r3, [pc, #688]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003462:	4bab      	ldr	r3, [pc, #684]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	0549      	lsls	r1, r1, #21
 8003468:	430a      	orrs	r2, r1
 800346a:	63da      	str	r2, [r3, #60]	; 0x3c
 800346c:	4ba8      	ldr	r3, [pc, #672]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800346e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	055b      	lsls	r3, r3, #21
 8003474:	4013      	ands	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800347a:	231f      	movs	r3, #31
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003482:	4ba4      	ldr	r3, [pc, #656]	; (8003714 <HAL_RCC_OscConfig+0x61c>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4013      	ands	r3, r2
 800348c:	d11a      	bne.n	80034c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800348e:	4ba1      	ldr	r3, [pc, #644]	; (8003714 <HAL_RCC_OscConfig+0x61c>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <HAL_RCC_OscConfig+0x61c>)
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	0049      	lsls	r1, r1, #1
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800349c:	f7fd ff70 	bl	8001380 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a6:	f7fd ff6b 	bl	8001380 <HAL_GetTick>
 80034aa:	0002      	movs	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e127      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b8:	4b96      	ldr	r3, [pc, #600]	; (8003714 <HAL_RCC_OscConfig+0x61c>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4013      	ands	r3, r2
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x3e2>
 80034cc:	4b90      	ldr	r3, [pc, #576]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80034ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034d0:	4b8f      	ldr	r3, [pc, #572]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80034d2:	2101      	movs	r1, #1
 80034d4:	430a      	orrs	r2, r1
 80034d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80034d8:	e01c      	b.n	8003514 <HAL_RCC_OscConfig+0x41c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b05      	cmp	r3, #5
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x404>
 80034e2:	4b8b      	ldr	r3, [pc, #556]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80034e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034e6:	4b8a      	ldr	r3, [pc, #552]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80034e8:	2104      	movs	r1, #4
 80034ea:	430a      	orrs	r2, r1
 80034ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80034ee:	4b88      	ldr	r3, [pc, #544]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80034f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034f2:	4b87      	ldr	r3, [pc, #540]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80034f4:	2101      	movs	r1, #1
 80034f6:	430a      	orrs	r2, r1
 80034f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80034fa:	e00b      	b.n	8003514 <HAL_RCC_OscConfig+0x41c>
 80034fc:	4b84      	ldr	r3, [pc, #528]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80034fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003500:	4b83      	ldr	r3, [pc, #524]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003502:	2101      	movs	r1, #1
 8003504:	438a      	bics	r2, r1
 8003506:	65da      	str	r2, [r3, #92]	; 0x5c
 8003508:	4b81      	ldr	r3, [pc, #516]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800350a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800350c:	4b80      	ldr	r3, [pc, #512]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800350e:	2104      	movs	r1, #4
 8003510:	438a      	bics	r2, r1
 8003512:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d014      	beq.n	8003546 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd ff30 	bl	8001380 <HAL_GetTick>
 8003520:	0003      	movs	r3, r0
 8003522:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003524:	e009      	b.n	800353a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fd ff2b 	bl	8001380 <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	4a79      	ldr	r2, [pc, #484]	; (8003718 <HAL_RCC_OscConfig+0x620>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0e6      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353a:	4b75      	ldr	r3, [pc, #468]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	2202      	movs	r2, #2
 8003540:	4013      	ands	r3, r2
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x42e>
 8003544:	e013      	b.n	800356e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fd ff1b 	bl	8001380 <HAL_GetTick>
 800354a:	0003      	movs	r3, r0
 800354c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800354e:	e009      	b.n	8003564 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003550:	f7fd ff16 	bl	8001380 <HAL_GetTick>
 8003554:	0002      	movs	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	4a6f      	ldr	r2, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x620>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e0d1      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800356e:	231f      	movs	r3, #31
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003578:	4b65      	ldr	r3, [pc, #404]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800357a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800357c:	4b64      	ldr	r3, [pc, #400]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800357e:	4967      	ldr	r1, [pc, #412]	; (800371c <HAL_RCC_OscConfig+0x624>)
 8003580:	400a      	ands	r2, r1
 8003582:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d100      	bne.n	800358e <HAL_RCC_OscConfig+0x496>
 800358c:	e0bb      	b.n	8003706 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358e:	4b60      	ldr	r3, [pc, #384]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2238      	movs	r2, #56	; 0x38
 8003594:	4013      	ands	r3, r2
 8003596:	2b10      	cmp	r3, #16
 8003598:	d100      	bne.n	800359c <HAL_RCC_OscConfig+0x4a4>
 800359a:	e07b      	b.n	8003694 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d156      	bne.n	8003652 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	4b5a      	ldr	r3, [pc, #360]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80035aa:	495d      	ldr	r1, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x628>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd fee6 	bl	8001380 <HAL_GetTick>
 80035b4:	0003      	movs	r3, r0
 80035b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fd fee1 	bl	8001380 <HAL_GetTick>
 80035be:	0002      	movs	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e09d      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035cc:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	049b      	lsls	r3, r3, #18
 80035d4:	4013      	ands	r3, r2
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d8:	4b4d      	ldr	r3, [pc, #308]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a51      	ldr	r2, [pc, #324]	; (8003724 <HAL_RCC_OscConfig+0x62c>)
 80035de:	4013      	ands	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1a      	ldr	r2, [r3, #32]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	431a      	orrs	r2, r3
 8003606:	4b42      	ldr	r3, [pc, #264]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003608:	430a      	orrs	r2, r1
 800360a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b40      	ldr	r3, [pc, #256]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	0449      	lsls	r1, r1, #17
 8003616:	430a      	orrs	r2, r1
 8003618:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800361a:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	4b3c      	ldr	r3, [pc, #240]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	0549      	lsls	r1, r1, #21
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd feaa 	bl	8001380 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003632:	f7fd fea5 	bl	8001380 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e061      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003644:	4b32      	ldr	r3, [pc, #200]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	049b      	lsls	r3, r3, #18
 800364c:	4013      	ands	r3, r2
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x53a>
 8003650:	e059      	b.n	8003706 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003658:	4931      	ldr	r1, [pc, #196]	; (8003720 <HAL_RCC_OscConfig+0x628>)
 800365a:	400a      	ands	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd fe8f 	bl	8001380 <HAL_GetTick>
 8003662:	0003      	movs	r3, r0
 8003664:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7fd fe8a 	bl	8001380 <HAL_GetTick>
 800366c:	0002      	movs	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e046      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367a:	4b25      	ldr	r3, [pc, #148]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	049b      	lsls	r3, r3, #18
 8003682:	4013      	ands	r3, r2
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	4b21      	ldr	r3, [pc, #132]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 800368c:	4926      	ldr	r1, [pc, #152]	; (8003728 <HAL_RCC_OscConfig+0x630>)
 800368e:	400a      	ands	r2, r1
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	e038      	b.n	8003706 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e033      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x618>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2203      	movs	r2, #3
 80036aa:	401a      	ands	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d126      	bne.n	8003702 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2270      	movs	r2, #112	; 0x70
 80036b8:	401a      	ands	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d11f      	bne.n	8003702 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	23fe      	movs	r3, #254	; 0xfe
 80036c6:	01db      	lsls	r3, r3, #7
 80036c8:	401a      	ands	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d116      	bne.n	8003702 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	23f8      	movs	r3, #248	; 0xf8
 80036d8:	039b      	lsls	r3, r3, #14
 80036da:	401a      	ands	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d10e      	bne.n	8003702 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	23e0      	movs	r3, #224	; 0xe0
 80036e8:	051b      	lsls	r3, r3, #20
 80036ea:	401a      	ands	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	0f5b      	lsrs	r3, r3, #29
 80036f8:	075a      	lsls	r2, r3, #29
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b008      	add	sp, #32
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	40007000 	.word	0x40007000
 8003718:	00001388 	.word	0x00001388
 800371c:	efffffff 	.word	0xefffffff
 8003720:	feffffff 	.word	0xfeffffff
 8003724:	11c1808c 	.word	0x11c1808c
 8003728:	eefefffc 	.word	0xeefefffc

0800372c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0e9      	b.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003740:	4b76      	ldr	r3, [pc, #472]	; (800391c <HAL_RCC_ClockConfig+0x1f0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2207      	movs	r2, #7
 8003746:	4013      	ands	r3, r2
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d91e      	bls.n	800378c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b73      	ldr	r3, [pc, #460]	; (800391c <HAL_RCC_ClockConfig+0x1f0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2207      	movs	r2, #7
 8003754:	4393      	bics	r3, r2
 8003756:	0019      	movs	r1, r3
 8003758:	4b70      	ldr	r3, [pc, #448]	; (800391c <HAL_RCC_ClockConfig+0x1f0>)
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003760:	f7fd fe0e 	bl	8001380 <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003768:	e009      	b.n	800377e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376a:	f7fd fe09 	bl	8001380 <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	4a6a      	ldr	r2, [pc, #424]	; (8003920 <HAL_RCC_ClockConfig+0x1f4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0ca      	b.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2207      	movs	r2, #7
 8003784:	4013      	ands	r3, r2
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d1ee      	bne.n	800376a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2202      	movs	r2, #2
 8003792:	4013      	ands	r3, r2
 8003794:	d015      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2204      	movs	r2, #4
 800379c:	4013      	ands	r3, r2
 800379e:	d006      	beq.n	80037ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80037a0:	4b60      	ldr	r3, [pc, #384]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 80037a6:	21e0      	movs	r1, #224	; 0xe0
 80037a8:	01c9      	lsls	r1, r1, #7
 80037aa:	430a      	orrs	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ae:	4b5d      	ldr	r3, [pc, #372]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	4a5d      	ldr	r2, [pc, #372]	; (8003928 <HAL_RCC_ClockConfig+0x1fc>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2201      	movs	r2, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	d057      	beq.n	800387c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	029b      	lsls	r3, r3, #10
 80037dc:	4013      	ands	r3, r2
 80037de:	d12b      	bne.n	8003838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e097      	b.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d107      	bne.n	80037fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ec:	4b4d      	ldr	r3, [pc, #308]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	049b      	lsls	r3, r3, #18
 80037f4:	4013      	ands	r3, r2
 80037f6:	d11f      	bne.n	8003838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e08b      	b.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d107      	bne.n	8003814 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003804:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4013      	ands	r3, r2
 800380e:	d113      	bne.n	8003838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e07f      	b.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d106      	bne.n	800382a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800381c:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 800381e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003820:	2202      	movs	r2, #2
 8003822:	4013      	ands	r3, r2
 8003824:	d108      	bne.n	8003838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e074      	b.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382a:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	2202      	movs	r2, #2
 8003830:	4013      	ands	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e06d      	b.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003838:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2207      	movs	r2, #7
 800383e:	4393      	bics	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 8003848:	430a      	orrs	r2, r1
 800384a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fd fd98 	bl	8001380 <HAL_GetTick>
 8003850:	0003      	movs	r3, r0
 8003852:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003854:	e009      	b.n	800386a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003856:	f7fd fd93 	bl	8001380 <HAL_GetTick>
 800385a:	0002      	movs	r2, r0
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	4a2f      	ldr	r2, [pc, #188]	; (8003920 <HAL_RCC_ClockConfig+0x1f4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e054      	b.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2238      	movs	r2, #56	; 0x38
 8003870:	401a      	ands	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	429a      	cmp	r2, r3
 800387a:	d1ec      	bne.n	8003856 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800387c:	4b27      	ldr	r3, [pc, #156]	; (800391c <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2207      	movs	r2, #7
 8003882:	4013      	ands	r3, r2
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d21e      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2207      	movs	r2, #7
 8003890:	4393      	bics	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	4b21      	ldr	r3, [pc, #132]	; (800391c <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800389c:	f7fd fd70 	bl	8001380 <HAL_GetTick>
 80038a0:	0003      	movs	r3, r0
 80038a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038a4:	e009      	b.n	80038ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a6:	f7fd fd6b 	bl	8001380 <HAL_GetTick>
 80038aa:	0002      	movs	r2, r0
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <HAL_RCC_ClockConfig+0x1f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e02c      	b.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80038ba:	4b18      	ldr	r3, [pc, #96]	; (800391c <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2207      	movs	r2, #7
 80038c0:	4013      	ands	r3, r2
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1ee      	bne.n	80038a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2204      	movs	r2, #4
 80038ce:	4013      	ands	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4a15      	ldr	r2, [pc, #84]	; (800392c <HAL_RCC_ClockConfig+0x200>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80038e6:	f000 f829 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038ea:	0001      	movs	r1, r0
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_RCC_ClockConfig+0x1f8>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	220f      	movs	r2, #15
 80038f4:	401a      	ands	r2, r3
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_RCC_ClockConfig+0x204>)
 80038f8:	0092      	lsls	r2, r2, #2
 80038fa:	58d3      	ldr	r3, [r2, r3]
 80038fc:	221f      	movs	r2, #31
 80038fe:	4013      	ands	r3, r2
 8003900:	000a      	movs	r2, r1
 8003902:	40da      	lsrs	r2, r3
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_ClockConfig+0x208>)
 8003906:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_ClockConfig+0x20c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0018      	movs	r0, r3
 800390e:	f7fd fcdb 	bl	80012c8 <HAL_InitTick>
 8003912:	0003      	movs	r3, r0
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b004      	add	sp, #16
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40022000 	.word	0x40022000
 8003920:	00001388 	.word	0x00001388
 8003924:	40021000 	.word	0x40021000
 8003928:	fffff0ff 	.word	0xfffff0ff
 800392c:	ffff8fff 	.word	0xffff8fff
 8003930:	08006b24 	.word	0x08006b24
 8003934:	20000000 	.word	0x20000000
 8003938:	20000004 	.word	0x20000004

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003942:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2238      	movs	r2, #56	; 0x38
 8003948:	4013      	ands	r3, r2
 800394a:	d10f      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800394c:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0adb      	lsrs	r3, r3, #11
 8003952:	2207      	movs	r2, #7
 8003954:	4013      	ands	r3, r2
 8003956:	2201      	movs	r2, #1
 8003958:	409a      	lsls	r2, r3
 800395a:	0013      	movs	r3, r2
 800395c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	4835      	ldr	r0, [pc, #212]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003962:	f7fc fbe1 	bl	8000128 <__udivsi3>
 8003966:	0003      	movs	r3, r0
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	e05d      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800396c:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2238      	movs	r2, #56	; 0x38
 8003972:	4013      	ands	r3, r2
 8003974:	2b08      	cmp	r3, #8
 8003976:	d102      	bne.n	800397e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003978:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x100>)
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e054      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397e:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2238      	movs	r2, #56	; 0x38
 8003984:	4013      	ands	r3, r2
 8003986:	2b10      	cmp	r3, #16
 8003988:	d138      	bne.n	80039fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800398a:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2203      	movs	r2, #3
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003994:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	2207      	movs	r2, #7
 800399c:	4013      	ands	r3, r2
 800399e:	3301      	adds	r3, #1
 80039a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	4824      	ldr	r0, [pc, #144]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x100>)
 80039ac:	f7fc fbbc 	bl	8000128 <__udivsi3>
 80039b0:	0003      	movs	r3, r0
 80039b2:	0019      	movs	r1, r3
 80039b4:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	227f      	movs	r2, #127	; 0x7f
 80039bc:	4013      	ands	r3, r2
 80039be:	434b      	muls	r3, r1
 80039c0:	617b      	str	r3, [r7, #20]
        break;
 80039c2:	e00d      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	481c      	ldr	r0, [pc, #112]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xfc>)
 80039c8:	f7fc fbae 	bl	8000128 <__udivsi3>
 80039cc:	0003      	movs	r3, r0
 80039ce:	0019      	movs	r1, r3
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	227f      	movs	r2, #127	; 0x7f
 80039d8:	4013      	ands	r3, r2
 80039da:	434b      	muls	r3, r1
 80039dc:	617b      	str	r3, [r7, #20]
        break;
 80039de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0f5b      	lsrs	r3, r3, #29
 80039e6:	2207      	movs	r2, #7
 80039e8:	4013      	ands	r3, r2
 80039ea:	3301      	adds	r3, #1
 80039ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6978      	ldr	r0, [r7, #20]
 80039f2:	f7fc fb99 	bl	8000128 <__udivsi3>
 80039f6:	0003      	movs	r3, r0
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	e015      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2238      	movs	r2, #56	; 0x38
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d103      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2238      	movs	r2, #56	; 0x38
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b18      	cmp	r3, #24
 8003a1a:	d103      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003a1c:	23fa      	movs	r3, #250	; 0xfa
 8003a1e:	01db      	lsls	r3, r3, #7
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e001      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a28:	693b      	ldr	r3, [r7, #16]
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b006      	add	sp, #24
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	40021000 	.word	0x40021000
 8003a38:	00f42400 	.word	0x00f42400
 8003a3c:	007a1200 	.word	0x007a1200

08003a40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a44:	4b02      	ldr	r3, [pc, #8]	; (8003a50 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a46:	681b      	ldr	r3, [r3, #0]
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	20000000 	.word	0x20000000

08003a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a54:	b5b0      	push	{r4, r5, r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a58:	f7ff fff2 	bl	8003a40 <HAL_RCC_GetHCLKFreq>
 8003a5c:	0004      	movs	r4, r0
 8003a5e:	f7ff fb3f 	bl	80030e0 <LL_RCC_GetAPB1Prescaler>
 8003a62:	0003      	movs	r3, r0
 8003a64:	0b1a      	lsrs	r2, r3, #12
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a68:	0092      	lsls	r2, r2, #2
 8003a6a:	58d3      	ldr	r3, [r2, r3]
 8003a6c:	221f      	movs	r2, #31
 8003a6e:	4013      	ands	r3, r2
 8003a70:	40dc      	lsrs	r4, r3
 8003a72:	0023      	movs	r3, r4
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	08006b64 	.word	0x08006b64

08003a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003a88:	2313      	movs	r3, #19
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a90:	2312      	movs	r3, #18
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	029b      	lsls	r3, r3, #10
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d100      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003aa4:	e0a3      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2011      	movs	r0, #17
 8003aa8:	183b      	adds	r3, r7, r0
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4bc3      	ldr	r3, [pc, #780]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	055b      	lsls	r3, r3, #21
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d110      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4bc0      	ldr	r3, [pc, #768]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003abe:	4bbf      	ldr	r3, [pc, #764]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	0549      	lsls	r1, r1, #21
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ac8:	4bbc      	ldr	r3, [pc, #752]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003acc:	2380      	movs	r3, #128	; 0x80
 8003ace:	055b      	lsls	r3, r3, #21
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	183b      	adds	r3, r7, r0
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003adc:	4bb8      	ldr	r3, [pc, #736]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4bb7      	ldr	r3, [pc, #732]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	0049      	lsls	r1, r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aea:	f7fd fc49 	bl	8001380 <HAL_GetTick>
 8003aee:	0003      	movs	r3, r0
 8003af0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af2:	e00b      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fd fc44 	bl	8001380 <HAL_GetTick>
 8003af8:	0002      	movs	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d904      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003b02:	2313      	movs	r3, #19
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	2203      	movs	r2, #3
 8003b08:	701a      	strb	r2, [r3, #0]
        break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0c:	4bac      	ldr	r3, [pc, #688]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4013      	ands	r3, r2
 8003b16:	d0ed      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003b18:	2313      	movs	r3, #19
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d154      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b22:	4ba6      	ldr	r3, [pc, #664]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b26:	23c0      	movs	r3, #192	; 0xc0
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d019      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d014      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b3e:	4b9f      	ldr	r3, [pc, #636]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	4aa0      	ldr	r2, [pc, #640]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b48:	4b9c      	ldr	r3, [pc, #624]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b4c:	4b9b      	ldr	r3, [pc, #620]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	0249      	lsls	r1, r1, #9
 8003b52:	430a      	orrs	r2, r1
 8003b54:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b56:	4b99      	ldr	r3, [pc, #612]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b5a:	4b98      	ldr	r3, [pc, #608]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b5c:	499a      	ldr	r1, [pc, #616]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003b5e:	400a      	ands	r2, r1
 8003b60:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b62:	4b96      	ldr	r3, [pc, #600]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d016      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fc06 	bl	8001380 <HAL_GetTick>
 8003b74:	0003      	movs	r3, r0
 8003b76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b78:	e00c      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd fc01 	bl	8001380 <HAL_GetTick>
 8003b7e:	0002      	movs	r2, r0
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	4a91      	ldr	r2, [pc, #580]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d904      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003b8a:	2313      	movs	r3, #19
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	2203      	movs	r2, #3
 8003b90:	701a      	strb	r2, [r3, #0]
            break;
 8003b92:	e004      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b94:	4b89      	ldr	r3, [pc, #548]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	2202      	movs	r2, #2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d0ed      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003b9e:	2313      	movs	r3, #19
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10a      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba8:	4b84      	ldr	r3, [pc, #528]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	4a85      	ldr	r2, [pc, #532]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb6:	4b81      	ldr	r3, [pc, #516]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bbc:	e00c      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bbe:	2312      	movs	r3, #18
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	2213      	movs	r2, #19
 8003bc4:	18ba      	adds	r2, r7, r2
 8003bc6:	7812      	ldrb	r2, [r2, #0]
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	e005      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	2312      	movs	r3, #18
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	2213      	movs	r2, #19
 8003bd2:	18ba      	adds	r2, r7, r2
 8003bd4:	7812      	ldrb	r2, [r2, #0]
 8003bd6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd8:	2311      	movs	r3, #17
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003be4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be6:	4b75      	ldr	r3, [pc, #468]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003be8:	4979      	ldr	r1, [pc, #484]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003bea:	400a      	ands	r2, r1
 8003bec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf8:	4b70      	ldr	r3, [pc, #448]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	4393      	bics	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2202      	movs	r2, #2
 8003c12:	4013      	ands	r3, r2
 8003c14:	d009      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c16:	4b69      	ldr	r3, [pc, #420]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	220c      	movs	r2, #12
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	0019      	movs	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	4b65      	ldr	r3, [pc, #404]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c26:	430a      	orrs	r2, r1
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2210      	movs	r2, #16
 8003c30:	4013      	ands	r3, r2
 8003c32:	d009      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c34:	4b61      	ldr	r3, [pc, #388]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	4a66      	ldr	r2, [pc, #408]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	4b5e      	ldr	r3, [pc, #376]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c44:	430a      	orrs	r2, r1
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4013      	ands	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c54:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	4a5f      	ldr	r2, [pc, #380]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	4b56      	ldr	r3, [pc, #344]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c64:	430a      	orrs	r2, r1
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4013      	ands	r3, r2
 8003c72:	d009      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c74:	4b51      	ldr	r3, [pc, #324]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	4a58      	ldr	r2, [pc, #352]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	4b4e      	ldr	r3, [pc, #312]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c84:	430a      	orrs	r2, r1
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c92:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	4a52      	ldr	r2, [pc, #328]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	01db      	lsls	r3, r3, #7
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d015      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb2:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	0899      	lsrs	r1, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1a      	ldr	r2, [r3, #32]
 8003cbe:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	05db      	lsls	r3, r3, #23
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d106      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003cd0:	4b3a      	ldr	r3, [pc, #232]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cd6:	2180      	movs	r1, #128	; 0x80
 8003cd8:	0249      	lsls	r1, r1, #9
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cea:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	2240      	movs	r2, #64	; 0x40
 8003cf0:	4393      	bics	r3, r2
 8003cf2:	0019      	movs	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf8:	4b30      	ldr	r3, [pc, #192]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	039b      	lsls	r3, r3, #14
 8003d06:	4013      	ands	r3, r2
 8003d08:	d016      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d0a:	4b2c      	ldr	r3, [pc, #176]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	4a35      	ldr	r2, [pc, #212]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	0019      	movs	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	03db      	lsls	r3, r3, #15
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d106      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	4b23      	ldr	r3, [pc, #140]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	0449      	lsls	r1, r1, #17
 8003d34:	430a      	orrs	r2, r1
 8003d36:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	03db      	lsls	r3, r3, #15
 8003d40:	4013      	ands	r3, r2
 8003d42:	d016      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d52:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d54:	430a      	orrs	r2, r1
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	045b      	lsls	r3, r3, #17
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d106      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d6a:	2180      	movs	r1, #128	; 0x80
 8003d6c:	0449      	lsls	r1, r1, #17
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d016      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	4a1a      	ldr	r2, [pc, #104]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	0019      	movs	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	01db      	lsls	r3, r3, #7
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d106      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	0249      	lsls	r1, r1, #9
 8003da8:	430a      	orrs	r2, r1
 8003daa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003dac:	2312      	movs	r3, #18
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	781b      	ldrb	r3, [r3, #0]
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b006      	add	sp, #24
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	fffffcff 	.word	0xfffffcff
 8003dc8:	fffeffff 	.word	0xfffeffff
 8003dcc:	00001388 	.word	0x00001388
 8003dd0:	efffffff 	.word	0xefffffff
 8003dd4:	fffff3ff 	.word	0xfffff3ff
 8003dd8:	fff3ffff 	.word	0xfff3ffff
 8003ddc:	ffcfffff 	.word	0xffcfffff
 8003de0:	ffffcfff 	.word	0xffffcfff
 8003de4:	ffbfffff 	.word	0xffbfffff
 8003de8:	feffffff 	.word	0xfeffffff
 8003dec:	ffff3fff 	.word	0xffff3fff

08003df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e04a      	b.n	8003e98 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223d      	movs	r2, #61	; 0x3d
 8003e06:	5c9b      	ldrb	r3, [r3, r2]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	223c      	movs	r2, #60	; 0x3c
 8003e12:	2100      	movs	r1, #0
 8003e14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7fd f8eb 	bl	8000ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	223d      	movs	r2, #61	; 0x3d
 8003e22:	2102      	movs	r1, #2
 8003e24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	0019      	movs	r1, r3
 8003e30:	0010      	movs	r0, r2
 8003e32:	f000 fb55 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2248      	movs	r2, #72	; 0x48
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223e      	movs	r2, #62	; 0x3e
 8003e42:	2101      	movs	r1, #1
 8003e44:	5499      	strb	r1, [r3, r2]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	223f      	movs	r2, #63	; 0x3f
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2240      	movs	r2, #64	; 0x40
 8003e52:	2101      	movs	r1, #1
 8003e54:	5499      	strb	r1, [r3, r2]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2241      	movs	r2, #65	; 0x41
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	5499      	strb	r1, [r3, r2]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2242      	movs	r2, #66	; 0x42
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2243      	movs	r2, #67	; 0x43
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2244      	movs	r2, #68	; 0x44
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2245      	movs	r2, #69	; 0x45
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2246      	movs	r2, #70	; 0x46
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2247      	movs	r2, #71	; 0x47
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	223d      	movs	r2, #61	; 0x3d
 8003e92:	2101      	movs	r1, #1
 8003e94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e04a      	b.n	8003f48 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	223d      	movs	r2, #61	; 0x3d
 8003eb6:	5c9b      	ldrb	r3, [r3, r2]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	223c      	movs	r2, #60	; 0x3c
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 f841 	bl	8003f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223d      	movs	r2, #61	; 0x3d
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3304      	adds	r3, #4
 8003ede:	0019      	movs	r1, r3
 8003ee0:	0010      	movs	r0, r2
 8003ee2:	f000 fafd 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2248      	movs	r2, #72	; 0x48
 8003eea:	2101      	movs	r1, #1
 8003eec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	223e      	movs	r2, #62	; 0x3e
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223f      	movs	r2, #63	; 0x3f
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2240      	movs	r2, #64	; 0x40
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2241      	movs	r2, #65	; 0x41
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2242      	movs	r2, #66	; 0x42
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2243      	movs	r2, #67	; 0x43
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2244      	movs	r2, #68	; 0x44
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2245      	movs	r2, #69	; 0x45
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2246      	movs	r2, #70	; 0x46
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2247      	movs	r2, #71	; 0x47
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	223d      	movs	r2, #61	; 0x3d
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f58:	46c0      	nop			; (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d108      	bne.n	8003f82 <HAL_TIM_PWM_Start+0x22>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	223e      	movs	r2, #62	; 0x3e
 8003f74:	5c9b      	ldrb	r3, [r3, r2]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	1e5a      	subs	r2, r3, #1
 8003f7c:	4193      	sbcs	r3, r2
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e037      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d108      	bne.n	8003f9a <HAL_TIM_PWM_Start+0x3a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	223f      	movs	r2, #63	; 0x3f
 8003f8c:	5c9b      	ldrb	r3, [r3, r2]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	4193      	sbcs	r3, r2
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e02b      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d108      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0x52>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	5c9b      	ldrb	r3, [r3, r2]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	1e5a      	subs	r2, r3, #1
 8003fac:	4193      	sbcs	r3, r2
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	e01f      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d108      	bne.n	8003fca <HAL_TIM_PWM_Start+0x6a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2241      	movs	r2, #65	; 0x41
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	4193      	sbcs	r3, r2
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e013      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d108      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0x82>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2242      	movs	r2, #66	; 0x42
 8003fd4:	5c9b      	ldrb	r3, [r3, r2]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	1e5a      	subs	r2, r3, #1
 8003fdc:	4193      	sbcs	r3, r2
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e007      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x92>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2243      	movs	r2, #67	; 0x43
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	1e5a      	subs	r2, r3, #1
 8003fee:	4193      	sbcs	r3, r2
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e08b      	b.n	8004112 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <HAL_TIM_PWM_Start+0xaa>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	223e      	movs	r2, #62	; 0x3e
 8004004:	2102      	movs	r1, #2
 8004006:	5499      	strb	r1, [r3, r2]
 8004008:	e023      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Start+0xba>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	223f      	movs	r2, #63	; 0x3f
 8004014:	2102      	movs	r1, #2
 8004016:	5499      	strb	r1, [r3, r2]
 8004018:	e01b      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d104      	bne.n	800402a <HAL_TIM_PWM_Start+0xca>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2240      	movs	r2, #64	; 0x40
 8004024:	2102      	movs	r1, #2
 8004026:	5499      	strb	r1, [r3, r2]
 8004028:	e013      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Start+0xda>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2241      	movs	r2, #65	; 0x41
 8004034:	2102      	movs	r1, #2
 8004036:	5499      	strb	r1, [r3, r2]
 8004038:	e00b      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b10      	cmp	r3, #16
 800403e:	d104      	bne.n	800404a <HAL_TIM_PWM_Start+0xea>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2242      	movs	r2, #66	; 0x42
 8004044:	2102      	movs	r1, #2
 8004046:	5499      	strb	r1, [r3, r2]
 8004048:	e003      	b.n	8004052 <HAL_TIM_PWM_Start+0xf2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2243      	movs	r2, #67	; 0x43
 800404e:	2102      	movs	r1, #2
 8004050:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	0018      	movs	r0, r3
 800405c:	f000 fe2e 	bl	8004cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2d      	ldr	r2, [pc, #180]	; (800411c <HAL_TIM_PWM_Start+0x1bc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00e      	beq.n	8004088 <HAL_TIM_PWM_Start+0x128>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2c      	ldr	r2, [pc, #176]	; (8004120 <HAL_TIM_PWM_Start+0x1c0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d009      	beq.n	8004088 <HAL_TIM_PWM_Start+0x128>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2a      	ldr	r2, [pc, #168]	; (8004124 <HAL_TIM_PWM_Start+0x1c4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_TIM_PWM_Start+0x128>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a29      	ldr	r2, [pc, #164]	; (8004128 <HAL_TIM_PWM_Start+0x1c8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_TIM_PWM_Start+0x12c>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_TIM_PWM_Start+0x12e>
 800408c:	2300      	movs	r3, #0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2180      	movs	r1, #128	; 0x80
 800409e:	0209      	lsls	r1, r1, #8
 80040a0:	430a      	orrs	r2, r1
 80040a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_TIM_PWM_Start+0x1bc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00f      	beq.n	80040ce <HAL_TIM_PWM_Start+0x16e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	05db      	lsls	r3, r3, #23
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d009      	beq.n	80040ce <HAL_TIM_PWM_Start+0x16e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_TIM_PWM_Start+0x1cc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d004      	beq.n	80040ce <HAL_TIM_PWM_Start+0x16e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a15      	ldr	r2, [pc, #84]	; (8004120 <HAL_TIM_PWM_Start+0x1c0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d116      	bne.n	80040fc <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a16      	ldr	r2, [pc, #88]	; (8004130 <HAL_TIM_PWM_Start+0x1d0>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b06      	cmp	r3, #6
 80040de:	d016      	beq.n	800410e <HAL_TIM_PWM_Start+0x1ae>
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	025b      	lsls	r3, r3, #9
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d011      	beq.n	800410e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2101      	movs	r1, #1
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	e008      	b.n	800410e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2101      	movs	r1, #1
 8004108:	430a      	orrs	r2, r1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e000      	b.n	8004110 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	0018      	movs	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	b004      	add	sp, #16
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800
 800412c:	40000400 	.word	0x40000400
 8004130:	00010007 	.word	0x00010007

08004134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2317      	movs	r3, #23
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	223c      	movs	r2, #60	; 0x3c
 800414c:	5c9b      	ldrb	r3, [r3, r2]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004152:	2302      	movs	r3, #2
 8004154:	e0e5      	b.n	8004322 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	223c      	movs	r2, #60	; 0x3c
 800415a:	2101      	movs	r1, #1
 800415c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b14      	cmp	r3, #20
 8004162:	d900      	bls.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004164:	e0d1      	b.n	800430a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	009a      	lsls	r2, r3, #2
 800416a:	4b70      	ldr	r3, [pc, #448]	; (800432c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800416c:	18d3      	adds	r3, r2, r3
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	0011      	movs	r1, r2
 800417a:	0018      	movs	r0, r3
 800417c:	f000 fa3e 	bl	80045fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2108      	movs	r1, #8
 800418c:	430a      	orrs	r2, r1
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2104      	movs	r1, #4
 800419c:	438a      	bics	r2, r1
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	619a      	str	r2, [r3, #24]
      break;
 80041b2:	e0af      	b.n	8004314 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	0011      	movs	r1, r2
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 faa7 	bl	8004710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2180      	movs	r1, #128	; 0x80
 80041ce:	0109      	lsls	r1, r1, #4
 80041d0:	430a      	orrs	r2, r1
 80041d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4954      	ldr	r1, [pc, #336]	; (8004330 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	619a      	str	r2, [r3, #24]
      break;
 80041f8:	e08c      	b.n	8004314 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f000 fb08 	bl	8004818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2108      	movs	r1, #8
 8004214:	430a      	orrs	r2, r1
 8004216:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2104      	movs	r1, #4
 8004224:	438a      	bics	r2, r1
 8004226:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69d9      	ldr	r1, [r3, #28]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	61da      	str	r2, [r3, #28]
      break;
 800423a:	e06b      	b.n	8004314 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	0011      	movs	r1, r2
 8004244:	0018      	movs	r0, r3
 8004246:	f000 fb6f 	bl	8004928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	0109      	lsls	r1, r1, #4
 8004258:	430a      	orrs	r2, r1
 800425a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4932      	ldr	r1, [pc, #200]	; (8004330 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004268:	400a      	ands	r2, r1
 800426a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69d9      	ldr	r1, [r3, #28]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	61da      	str	r2, [r3, #28]
      break;
 8004280:	e048      	b.n	8004314 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0011      	movs	r1, r2
 800428a:	0018      	movs	r0, r3
 800428c:	f000 fbb6 	bl	80049fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2108      	movs	r1, #8
 800429c:	430a      	orrs	r2, r1
 800429e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2104      	movs	r1, #4
 80042ac:	438a      	bics	r2, r1
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042c2:	e027      	b.n	8004314 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	0011      	movs	r1, r2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 fbf5 	bl	8004abc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	0109      	lsls	r1, r1, #4
 80042e0:	430a      	orrs	r2, r1
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4910      	ldr	r1, [pc, #64]	; (8004330 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80042f0:	400a      	ands	r2, r1
 80042f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	021a      	lsls	r2, r3, #8
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004308:	e004      	b.n	8004314 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800430a:	2317      	movs	r3, #23
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2201      	movs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
      break;
 8004312:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	223c      	movs	r2, #60	; 0x3c
 8004318:	2100      	movs	r1, #0
 800431a:	5499      	strb	r1, [r3, r2]

  return status;
 800431c:	2317      	movs	r3, #23
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	781b      	ldrb	r3, [r3, #0]
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b006      	add	sp, #24
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	08006b84 	.word	0x08006b84
 8004330:	fffffbff 	.word	0xfffffbff

08004334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433e:	230f      	movs	r3, #15
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	223c      	movs	r2, #60	; 0x3c
 800434a:	5c9b      	ldrb	r3, [r3, r2]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIM_ConfigClockSource+0x20>
 8004350:	2302      	movs	r3, #2
 8004352:	e0bc      	b.n	80044ce <HAL_TIM_ConfigClockSource+0x19a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	223c      	movs	r2, #60	; 0x3c
 8004358:	2101      	movs	r1, #1
 800435a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	223d      	movs	r2, #61	; 0x3d
 8004360:	2102      	movs	r1, #2
 8004362:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4a5a      	ldr	r2, [pc, #360]	; (80044d8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004370:	4013      	ands	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4a59      	ldr	r2, [pc, #356]	; (80044dc <HAL_TIM_ConfigClockSource+0x1a8>)
 8004378:	4013      	ands	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2280      	movs	r2, #128	; 0x80
 800438a:	0192      	lsls	r2, r2, #6
 800438c:	4293      	cmp	r3, r2
 800438e:	d040      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0xde>
 8004390:	2280      	movs	r2, #128	; 0x80
 8004392:	0192      	lsls	r2, r2, #6
 8004394:	4293      	cmp	r3, r2
 8004396:	d900      	bls.n	800439a <HAL_TIM_ConfigClockSource+0x66>
 8004398:	e088      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x178>
 800439a:	2280      	movs	r2, #128	; 0x80
 800439c:	0152      	lsls	r2, r2, #5
 800439e:	4293      	cmp	r3, r2
 80043a0:	d100      	bne.n	80043a4 <HAL_TIM_ConfigClockSource+0x70>
 80043a2:	e088      	b.n	80044b6 <HAL_TIM_ConfigClockSource+0x182>
 80043a4:	2280      	movs	r2, #128	; 0x80
 80043a6:	0152      	lsls	r2, r2, #5
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d900      	bls.n	80043ae <HAL_TIM_ConfigClockSource+0x7a>
 80043ac:	e07e      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x178>
 80043ae:	2b70      	cmp	r3, #112	; 0x70
 80043b0:	d018      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0xb0>
 80043b2:	d900      	bls.n	80043b6 <HAL_TIM_ConfigClockSource+0x82>
 80043b4:	e07a      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x178>
 80043b6:	2b60      	cmp	r3, #96	; 0x60
 80043b8:	d04f      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x126>
 80043ba:	d900      	bls.n	80043be <HAL_TIM_ConfigClockSource+0x8a>
 80043bc:	e076      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x178>
 80043be:	2b50      	cmp	r3, #80	; 0x50
 80043c0:	d03b      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x106>
 80043c2:	d900      	bls.n	80043c6 <HAL_TIM_ConfigClockSource+0x92>
 80043c4:	e072      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x178>
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	d057      	beq.n	800447a <HAL_TIM_ConfigClockSource+0x146>
 80043ca:	d900      	bls.n	80043ce <HAL_TIM_ConfigClockSource+0x9a>
 80043cc:	e06e      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x178>
 80043ce:	2b30      	cmp	r3, #48	; 0x30
 80043d0:	d063      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x166>
 80043d2:	d86b      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x178>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d060      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x166>
 80043d8:	d868      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x178>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d05d      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x166>
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d05b      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x166>
 80043e2:	e063      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043f4:	f000 fc42 	bl	8004c7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2277      	movs	r2, #119	; 0x77
 8004404:	4313      	orrs	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]
      break;
 8004410:	e052      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004422:	f000 fc2b 	bl	8004c7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	01c9      	lsls	r1, r1, #7
 8004434:	430a      	orrs	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
      break;
 8004438:	e03e      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004446:	001a      	movs	r2, r3
 8004448:	f000 fb9c 	bl	8004b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2150      	movs	r1, #80	; 0x50
 8004452:	0018      	movs	r0, r3
 8004454:	f000 fbf6 	bl	8004c44 <TIM_ITRx_SetConfig>
      break;
 8004458:	e02e      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004466:	001a      	movs	r2, r3
 8004468:	f000 fbba 	bl	8004be0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2160      	movs	r1, #96	; 0x60
 8004472:	0018      	movs	r0, r3
 8004474:	f000 fbe6 	bl	8004c44 <TIM_ITRx_SetConfig>
      break;
 8004478:	e01e      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004486:	001a      	movs	r2, r3
 8004488:	f000 fb7c 	bl	8004b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2140      	movs	r1, #64	; 0x40
 8004492:	0018      	movs	r0, r3
 8004494:	f000 fbd6 	bl	8004c44 <TIM_ITRx_SetConfig>
      break;
 8004498:	e00e      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	0019      	movs	r1, r3
 80044a4:	0010      	movs	r0, r2
 80044a6:	f000 fbcd 	bl	8004c44 <TIM_ITRx_SetConfig>
      break;
 80044aa:	e005      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80044ac:	230f      	movs	r3, #15
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2201      	movs	r2, #1
 80044b2:	701a      	strb	r2, [r3, #0]
      break;
 80044b4:	e000      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80044b6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	223d      	movs	r2, #61	; 0x3d
 80044bc:	2101      	movs	r1, #1
 80044be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	223c      	movs	r2, #60	; 0x3c
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

  return status;
 80044c8:	230f      	movs	r3, #15
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	781b      	ldrb	r3, [r3, #0]
}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b004      	add	sp, #16
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	ffceff88 	.word	0xffceff88
 80044dc:	ffff00ff 	.word	0xffff00ff

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a3b      	ldr	r2, [pc, #236]	; (80045e0 <TIM_Base_SetConfig+0x100>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d008      	beq.n	800450a <TIM_Base_SetConfig+0x2a>
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	05db      	lsls	r3, r3, #23
 80044fe:	429a      	cmp	r2, r3
 8004500:	d003      	beq.n	800450a <TIM_Base_SetConfig+0x2a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a37      	ldr	r2, [pc, #220]	; (80045e4 <TIM_Base_SetConfig+0x104>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d108      	bne.n	800451c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2270      	movs	r2, #112	; 0x70
 800450e:	4393      	bics	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a30      	ldr	r2, [pc, #192]	; (80045e0 <TIM_Base_SetConfig+0x100>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d018      	beq.n	8004556 <TIM_Base_SetConfig+0x76>
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	05db      	lsls	r3, r3, #23
 800452a:	429a      	cmp	r2, r3
 800452c:	d013      	beq.n	8004556 <TIM_Base_SetConfig+0x76>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <TIM_Base_SetConfig+0x104>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00f      	beq.n	8004556 <TIM_Base_SetConfig+0x76>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a2b      	ldr	r2, [pc, #172]	; (80045e8 <TIM_Base_SetConfig+0x108>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00b      	beq.n	8004556 <TIM_Base_SetConfig+0x76>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2a      	ldr	r2, [pc, #168]	; (80045ec <TIM_Base_SetConfig+0x10c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <TIM_Base_SetConfig+0x76>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a29      	ldr	r2, [pc, #164]	; (80045f0 <TIM_Base_SetConfig+0x110>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d003      	beq.n	8004556 <TIM_Base_SetConfig+0x76>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <TIM_Base_SetConfig+0x114>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d108      	bne.n	8004568 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <TIM_Base_SetConfig+0x118>)
 800455a:	4013      	ands	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2280      	movs	r2, #128	; 0x80
 800456c:	4393      	bics	r3, r2
 800456e:	001a      	movs	r2, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <TIM_Base_SetConfig+0x100>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_Base_SetConfig+0xce>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a14      	ldr	r2, [pc, #80]	; (80045ec <TIM_Base_SetConfig+0x10c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0xce>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <TIM_Base_SetConfig+0x110>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0xce>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <TIM_Base_SetConfig+0x114>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d103      	bne.n	80045b6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2201      	movs	r2, #1
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d106      	bne.n	80045d6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2201      	movs	r2, #1
 80045ce:	4393      	bics	r3, r2
 80045d0:	001a      	movs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	611a      	str	r2, [r3, #16]
  }
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b004      	add	sp, #16
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40002000 	.word	0x40002000
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40014400 	.word	0x40014400
 80045f4:	40014800 	.word	0x40014800
 80045f8:	fffffcff 	.word	0xfffffcff

080045fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	2201      	movs	r2, #1
 8004612:	4393      	bics	r3, r2
 8004614:	001a      	movs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a32      	ldr	r2, [pc, #200]	; (80046f4 <TIM_OC1_SetConfig+0xf8>)
 800462a:	4013      	ands	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2203      	movs	r2, #3
 8004632:	4393      	bics	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2202      	movs	r2, #2
 8004644:	4393      	bics	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <TIM_OC1_SetConfig+0xfc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00b      	beq.n	8004672 <TIM_OC1_SetConfig+0x76>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a27      	ldr	r2, [pc, #156]	; (80046fc <TIM_OC1_SetConfig+0x100>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <TIM_OC1_SetConfig+0x76>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a26      	ldr	r2, [pc, #152]	; (8004700 <TIM_OC1_SetConfig+0x104>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d003      	beq.n	8004672 <TIM_OC1_SetConfig+0x76>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a25      	ldr	r2, [pc, #148]	; (8004704 <TIM_OC1_SetConfig+0x108>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10c      	bne.n	800468c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2208      	movs	r2, #8
 8004676:	4393      	bics	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2204      	movs	r2, #4
 8004688:	4393      	bics	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <TIM_OC1_SetConfig+0xfc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00b      	beq.n	80046ac <TIM_OC1_SetConfig+0xb0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a19      	ldr	r2, [pc, #100]	; (80046fc <TIM_OC1_SetConfig+0x100>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <TIM_OC1_SetConfig+0xb0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a18      	ldr	r2, [pc, #96]	; (8004700 <TIM_OC1_SetConfig+0x104>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_OC1_SetConfig+0xb0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a17      	ldr	r2, [pc, #92]	; (8004704 <TIM_OC1_SetConfig+0x108>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d111      	bne.n	80046d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4a16      	ldr	r2, [pc, #88]	; (8004708 <TIM_OC1_SetConfig+0x10c>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4a15      	ldr	r2, [pc, #84]	; (800470c <TIM_OC1_SetConfig+0x110>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	621a      	str	r2, [r3, #32]
}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b006      	add	sp, #24
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	fffeff8f 	.word	0xfffeff8f
 80046f8:	40012c00 	.word	0x40012c00
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800
 8004708:	fffffeff 	.word	0xfffffeff
 800470c:	fffffdff 	.word	0xfffffdff

08004710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	2210      	movs	r2, #16
 8004726:	4393      	bics	r3, r2
 8004728:	001a      	movs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a2e      	ldr	r2, [pc, #184]	; (80047f8 <TIM_OC2_SetConfig+0xe8>)
 800473e:	4013      	ands	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a2d      	ldr	r2, [pc, #180]	; (80047fc <TIM_OC2_SetConfig+0xec>)
 8004746:	4013      	ands	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2220      	movs	r2, #32
 800475a:	4393      	bics	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a24      	ldr	r2, [pc, #144]	; (8004800 <TIM_OC2_SetConfig+0xf0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10d      	bne.n	800478e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	4393      	bics	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2240      	movs	r2, #64	; 0x40
 800478a:	4393      	bics	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <TIM_OC2_SetConfig+0xf0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00b      	beq.n	80047ae <TIM_OC2_SetConfig+0x9e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <TIM_OC2_SetConfig+0xf4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d007      	beq.n	80047ae <TIM_OC2_SetConfig+0x9e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a19      	ldr	r2, [pc, #100]	; (8004808 <TIM_OC2_SetConfig+0xf8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d003      	beq.n	80047ae <TIM_OC2_SetConfig+0x9e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a18      	ldr	r2, [pc, #96]	; (800480c <TIM_OC2_SetConfig+0xfc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d113      	bne.n	80047d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <TIM_OC2_SetConfig+0x100>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4a16      	ldr	r2, [pc, #88]	; (8004814 <TIM_OC2_SetConfig+0x104>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b006      	add	sp, #24
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	feff8fff 	.word	0xfeff8fff
 80047fc:	fffffcff 	.word	0xfffffcff
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800
 8004810:	fffffbff 	.word	0xfffffbff
 8004814:	fffff7ff 	.word	0xfffff7ff

08004818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	4a33      	ldr	r2, [pc, #204]	; (80048fc <TIM_OC3_SetConfig+0xe4>)
 800482e:	401a      	ands	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a2f      	ldr	r2, [pc, #188]	; (8004900 <TIM_OC3_SetConfig+0xe8>)
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2203      	movs	r2, #3
 800484c:	4393      	bics	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	4a29      	ldr	r2, [pc, #164]	; (8004904 <TIM_OC3_SetConfig+0xec>)
 800485e:	4013      	ands	r3, r2
 8004860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a25      	ldr	r2, [pc, #148]	; (8004908 <TIM_OC3_SetConfig+0xf0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d10d      	bne.n	8004892 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4a24      	ldr	r2, [pc, #144]	; (800490c <TIM_OC3_SetConfig+0xf4>)
 800487a:	4013      	ands	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	4a20      	ldr	r2, [pc, #128]	; (8004910 <TIM_OC3_SetConfig+0xf8>)
 800488e:	4013      	ands	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <TIM_OC3_SetConfig+0xf0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_OC3_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <TIM_OC3_SetConfig+0xfc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_OC3_SetConfig+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <TIM_OC3_SetConfig+0x100>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC3_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1b      	ldr	r2, [pc, #108]	; (800491c <TIM_OC3_SetConfig+0x104>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d113      	bne.n	80048da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4a1a      	ldr	r2, [pc, #104]	; (8004920 <TIM_OC3_SetConfig+0x108>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4a19      	ldr	r2, [pc, #100]	; (8004924 <TIM_OC3_SetConfig+0x10c>)
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b006      	add	sp, #24
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	fffffeff 	.word	0xfffffeff
 8004900:	fffeff8f 	.word	0xfffeff8f
 8004904:	fffffdff 	.word	0xfffffdff
 8004908:	40012c00 	.word	0x40012c00
 800490c:	fffff7ff 	.word	0xfffff7ff
 8004910:	fffffbff 	.word	0xfffffbff
 8004914:	40014000 	.word	0x40014000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800
 8004920:	ffffefff 	.word	0xffffefff
 8004924:	ffffdfff 	.word	0xffffdfff

08004928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <TIM_OC4_SetConfig+0xb0>)
 800493e:	401a      	ands	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a22      	ldr	r2, [pc, #136]	; (80049dc <TIM_OC4_SetConfig+0xb4>)
 8004954:	4013      	ands	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4a21      	ldr	r2, [pc, #132]	; (80049e0 <TIM_OC4_SetConfig+0xb8>)
 800495c:	4013      	ands	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <TIM_OC4_SetConfig+0xbc>)
 8004970:	4013      	ands	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	031b      	lsls	r3, r3, #12
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <TIM_OC4_SetConfig+0xc0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00b      	beq.n	80049a0 <TIM_OC4_SetConfig+0x78>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a18      	ldr	r2, [pc, #96]	; (80049ec <TIM_OC4_SetConfig+0xc4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_OC4_SetConfig+0x78>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <TIM_OC4_SetConfig+0xc8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_OC4_SetConfig+0x78>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <TIM_OC4_SetConfig+0xcc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d109      	bne.n	80049b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <TIM_OC4_SetConfig+0xd0>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	019b      	lsls	r3, r3, #6
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b006      	add	sp, #24
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	ffffefff 	.word	0xffffefff
 80049dc:	feff8fff 	.word	0xfeff8fff
 80049e0:	fffffcff 	.word	0xfffffcff
 80049e4:	ffffdfff 	.word	0xffffdfff
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800
 80049f8:	ffffbfff 	.word	0xffffbfff

080049fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4a23      	ldr	r2, [pc, #140]	; (8004aa0 <TIM_OC5_SetConfig+0xa4>)
 8004a12:	401a      	ands	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a1f      	ldr	r2, [pc, #124]	; (8004aa4 <TIM_OC5_SetConfig+0xa8>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <TIM_OC5_SetConfig+0xac>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a17      	ldr	r2, [pc, #92]	; (8004aac <TIM_OC5_SetConfig+0xb0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00b      	beq.n	8004a6a <TIM_OC5_SetConfig+0x6e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <TIM_OC5_SetConfig+0xb4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <TIM_OC5_SetConfig+0x6e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <TIM_OC5_SetConfig+0xb8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d003      	beq.n	8004a6a <TIM_OC5_SetConfig+0x6e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <TIM_OC5_SetConfig+0xbc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d109      	bne.n	8004a7e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4a0c      	ldr	r2, [pc, #48]	; (8004aa0 <TIM_OC5_SetConfig+0xa4>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	621a      	str	r2, [r3, #32]
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b006      	add	sp, #24
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	fffeffff 	.word	0xfffeffff
 8004aa4:	fffeff8f 	.word	0xfffeff8f
 8004aa8:	fffdffff 	.word	0xfffdffff
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800

08004abc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <TIM_OC6_SetConfig+0xa8>)
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <TIM_OC6_SetConfig+0xac>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4a1c      	ldr	r2, [pc, #112]	; (8004b6c <TIM_OC6_SetConfig+0xb0>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	051b      	lsls	r3, r3, #20
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <TIM_OC6_SetConfig+0xb4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <TIM_OC6_SetConfig+0x70>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a17      	ldr	r2, [pc, #92]	; (8004b74 <TIM_OC6_SetConfig+0xb8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <TIM_OC6_SetConfig+0x70>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <TIM_OC6_SetConfig+0xbc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_OC6_SetConfig+0x70>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <TIM_OC6_SetConfig+0xc0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d109      	bne.n	8004b40 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4a14      	ldr	r2, [pc, #80]	; (8004b80 <TIM_OC6_SetConfig+0xc4>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	029b      	lsls	r3, r3, #10
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b006      	add	sp, #24
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	ffefffff 	.word	0xffefffff
 8004b68:	feff8fff 	.word	0xfeff8fff
 8004b6c:	ffdfffff 	.word	0xffdfffff
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40014400 	.word	0x40014400
 8004b7c:	40014800 	.word	0x40014800
 8004b80:	fffbffff 	.word	0xfffbffff

08004b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	4393      	bics	r3, r2
 8004b9e:	001a      	movs	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	22f0      	movs	r2, #240	; 0xf0
 8004bae:	4393      	bics	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	220a      	movs	r2, #10
 8004bc0:	4393      	bics	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b006      	add	sp, #24
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4a0d      	ldr	r2, [pc, #52]	; (8004c40 <TIM_TI2_ConfigInputStage+0x60>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	031b      	lsls	r3, r3, #12
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	22a0      	movs	r2, #160	; 0xa0
 8004c1c:	4393      	bics	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	621a      	str	r2, [r3, #32]
}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	b006      	add	sp, #24
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	ffff0fff 	.word	0xffff0fff

08004c44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4a08      	ldr	r2, [pc, #32]	; (8004c78 <TIM_ITRx_SetConfig+0x34>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	2207      	movs	r2, #7
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	609a      	str	r2, [r3, #8]
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	ffcfff8f 	.word	0xffcfff8f

08004c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <TIM_ETR_SetConfig+0x3c>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	021a      	lsls	r2, r3, #8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	609a      	str	r2, [r3, #8]
}
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b006      	add	sp, #24
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	ffff00ff 	.word	0xffff00ff

08004cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	221f      	movs	r2, #31
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2201      	movs	r2, #1
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	0013      	movs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	43d2      	mvns	r2, r2
 8004cde:	401a      	ands	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1a      	ldr	r2, [r3, #32]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	211f      	movs	r1, #31
 8004cec:	400b      	ands	r3, r1
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4099      	lsls	r1, r3
 8004cf2:	000b      	movs	r3, r1
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b006      	add	sp, #24
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	223c      	movs	r2, #60	; 0x3c
 8004d12:	5c9b      	ldrb	r3, [r3, r2]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e055      	b.n	8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	223c      	movs	r2, #60	; 0x3c
 8004d20:	2101      	movs	r1, #1
 8004d22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	223d      	movs	r2, #61	; 0x3d
 8004d28:	2102      	movs	r1, #2
 8004d2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a23      	ldr	r2, [pc, #140]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d108      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2270      	movs	r2, #112	; 0x70
 8004d5c:	4393      	bics	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a16      	ldr	r2, [pc, #88]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	05db      	lsls	r3, r3, #23
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d009      	beq.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a12      	ldr	r2, [pc, #72]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d10c      	bne.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	4393      	bics	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	223d      	movs	r2, #61	; 0x3d
 8004dba:	2101      	movs	r1, #1
 8004dbc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	223c      	movs	r2, #60	; 0x3c
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b004      	add	sp, #16
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	ff0fffff 	.word	0xff0fffff
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40014000 	.word	0x40014000

08004de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e046      	b.n	8004e80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2288      	movs	r2, #136	; 0x88
 8004df6:	589b      	ldr	r3, [r3, r2]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d107      	bne.n	8004e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2284      	movs	r2, #132	; 0x84
 8004e00:	2100      	movs	r1, #0
 8004e02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	0018      	movs	r0, r3
 8004e08:	f7fc f960 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2288      	movs	r2, #136	; 0x88
 8004e10:	2124      	movs	r1, #36	; 0x24
 8004e12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2101      	movs	r1, #1
 8004e20:	438a      	bics	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 fb8e 	bl	8005550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 f8cc 	bl	8004fd4 <UART_SetConfig>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e01c      	b.n	8004e80 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	490d      	ldr	r1, [pc, #52]	; (8004e88 <HAL_UART_Init+0xa8>)
 8004e52:	400a      	ands	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	212a      	movs	r1, #42	; 0x2a
 8004e62:	438a      	bics	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2101      	movs	r1, #1
 8004e72:	430a      	orrs	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f000 fc1d 	bl	80056b8 <UART_CheckIdleState>
 8004e7e:	0003      	movs	r3, r0
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b002      	add	sp, #8
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	ffffb7ff 	.word	0xffffb7ff

08004e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	1dbb      	adds	r3, r7, #6
 8004e9a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2288      	movs	r2, #136	; 0x88
 8004ea0:	589b      	ldr	r3, [r3, r2]
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d000      	beq.n	8004ea8 <HAL_UART_Transmit+0x1c>
 8004ea6:	e090      	b.n	8004fca <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_UART_Transmit+0x2a>
 8004eae:	1dbb      	adds	r3, r7, #6
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e088      	b.n	8004fcc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	015b      	lsls	r3, r3, #5
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d109      	bne.n	8004eda <HAL_UART_Transmit+0x4e>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d105      	bne.n	8004eda <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d001      	beq.n	8004eda <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e078      	b.n	8004fcc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2290      	movs	r2, #144	; 0x90
 8004ede:	2100      	movs	r1, #0
 8004ee0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2288      	movs	r2, #136	; 0x88
 8004ee6:	2121      	movs	r1, #33	; 0x21
 8004ee8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eea:	f7fc fa49 	bl	8001380 <HAL_GetTick>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1dba      	adds	r2, r7, #6
 8004ef6:	2154      	movs	r1, #84	; 0x54
 8004ef8:	8812      	ldrh	r2, [r2, #0]
 8004efa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	1dba      	adds	r2, r7, #6
 8004f00:	2156      	movs	r1, #86	; 0x56
 8004f02:	8812      	ldrh	r2, [r2, #0]
 8004f04:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	015b      	lsls	r3, r3, #5
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d108      	bne.n	8004f24 <HAL_UART_Transmit+0x98>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	e003      	b.n	8004f2c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f2c:	e030      	b.n	8004f90 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	0013      	movs	r3, r2
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2180      	movs	r1, #128	; 0x80
 8004f3c:	f000 fc66 	bl	800580c <UART_WaitOnFlagUntilTimeout>
 8004f40:	1e03      	subs	r3, r0, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2288      	movs	r2, #136	; 0x88
 8004f48:	2120      	movs	r1, #32
 8004f4a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e03d      	b.n	8004fcc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	001a      	movs	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	05d2      	lsls	r2, r2, #23
 8004f62:	0dd2      	lsrs	r2, r2, #23
 8004f64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3302      	adds	r3, #2
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	e007      	b.n	8004f7e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	781a      	ldrb	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2256      	movs	r2, #86	; 0x56
 8004f82:	5a9b      	ldrh	r3, [r3, r2]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b299      	uxth	r1, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2256      	movs	r2, #86	; 0x56
 8004f8e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2256      	movs	r2, #86	; 0x56
 8004f94:	5a9b      	ldrh	r3, [r3, r2]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1c8      	bne.n	8004f2e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	0013      	movs	r3, r2
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2140      	movs	r1, #64	; 0x40
 8004faa:	f000 fc2f 	bl	800580c <UART_WaitOnFlagUntilTimeout>
 8004fae:	1e03      	subs	r3, r0, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2288      	movs	r2, #136	; 0x88
 8004fb6:	2120      	movs	r1, #32
 8004fb8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e006      	b.n	8004fcc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2288      	movs	r2, #136	; 0x88
 8004fc2:	2120      	movs	r1, #32
 8004fc4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004fca:	2302      	movs	r3, #2
  }
}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b008      	add	sp, #32
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	b5b0      	push	{r4, r5, r7, lr}
 8004fd6:	b090      	sub	sp, #64	; 0x40
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fdc:	231a      	movs	r3, #26
 8004fde:	2220      	movs	r2, #32
 8004fe0:	189b      	adds	r3, r3, r2
 8004fe2:	19db      	adds	r3, r3, r7
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4aaf      	ldr	r2, [pc, #700]	; (80052c4 <UART_SetConfig+0x2f0>)
 8005008:	4013      	ands	r3, r2
 800500a:	0019      	movs	r1, r3
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005012:	430b      	orrs	r3, r1
 8005014:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4aaa      	ldr	r2, [pc, #680]	; (80052c8 <UART_SetConfig+0x2f4>)
 800501e:	4013      	ands	r3, r2
 8005020:	0018      	movs	r0, r3
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	68d9      	ldr	r1, [r3, #12]
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	0003      	movs	r3, r0
 800502c:	430b      	orrs	r3, r1
 800502e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4aa4      	ldr	r2, [pc, #656]	; (80052cc <UART_SetConfig+0x2f8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005046:	4313      	orrs	r3, r2
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4a9f      	ldr	r2, [pc, #636]	; (80052d0 <UART_SetConfig+0x2fc>)
 8005052:	4013      	ands	r3, r2
 8005054:	0019      	movs	r1, r3
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505c:	430b      	orrs	r3, r1
 800505e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	220f      	movs	r2, #15
 8005068:	4393      	bics	r3, r2
 800506a:	0018      	movs	r0, r3
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	0003      	movs	r3, r0
 8005076:	430b      	orrs	r3, r1
 8005078:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a95      	ldr	r2, [pc, #596]	; (80052d4 <UART_SetConfig+0x300>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d131      	bne.n	80050e8 <UART_SetConfig+0x114>
 8005084:	4b94      	ldr	r3, [pc, #592]	; (80052d8 <UART_SetConfig+0x304>)
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	2203      	movs	r2, #3
 800508a:	4013      	ands	r3, r2
 800508c:	2b03      	cmp	r3, #3
 800508e:	d01d      	beq.n	80050cc <UART_SetConfig+0xf8>
 8005090:	d823      	bhi.n	80050da <UART_SetConfig+0x106>
 8005092:	2b02      	cmp	r3, #2
 8005094:	d00c      	beq.n	80050b0 <UART_SetConfig+0xdc>
 8005096:	d820      	bhi.n	80050da <UART_SetConfig+0x106>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <UART_SetConfig+0xce>
 800509c:	2b01      	cmp	r3, #1
 800509e:	d00e      	beq.n	80050be <UART_SetConfig+0xea>
 80050a0:	e01b      	b.n	80050da <UART_SetConfig+0x106>
 80050a2:	231b      	movs	r3, #27
 80050a4:	2220      	movs	r2, #32
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	19db      	adds	r3, r3, r7
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	e0b4      	b.n	800521a <UART_SetConfig+0x246>
 80050b0:	231b      	movs	r3, #27
 80050b2:	2220      	movs	r2, #32
 80050b4:	189b      	adds	r3, r3, r2
 80050b6:	19db      	adds	r3, r3, r7
 80050b8:	2202      	movs	r2, #2
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e0ad      	b.n	800521a <UART_SetConfig+0x246>
 80050be:	231b      	movs	r3, #27
 80050c0:	2220      	movs	r2, #32
 80050c2:	189b      	adds	r3, r3, r2
 80050c4:	19db      	adds	r3, r3, r7
 80050c6:	2204      	movs	r2, #4
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	e0a6      	b.n	800521a <UART_SetConfig+0x246>
 80050cc:	231b      	movs	r3, #27
 80050ce:	2220      	movs	r2, #32
 80050d0:	189b      	adds	r3, r3, r2
 80050d2:	19db      	adds	r3, r3, r7
 80050d4:	2208      	movs	r2, #8
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	e09f      	b.n	800521a <UART_SetConfig+0x246>
 80050da:	231b      	movs	r3, #27
 80050dc:	2220      	movs	r2, #32
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	19db      	adds	r3, r3, r7
 80050e2:	2210      	movs	r2, #16
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e098      	b.n	800521a <UART_SetConfig+0x246>
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a7b      	ldr	r2, [pc, #492]	; (80052dc <UART_SetConfig+0x308>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d131      	bne.n	8005156 <UART_SetConfig+0x182>
 80050f2:	4b79      	ldr	r3, [pc, #484]	; (80052d8 <UART_SetConfig+0x304>)
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	220c      	movs	r2, #12
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d01d      	beq.n	800513a <UART_SetConfig+0x166>
 80050fe:	d823      	bhi.n	8005148 <UART_SetConfig+0x174>
 8005100:	2b08      	cmp	r3, #8
 8005102:	d00c      	beq.n	800511e <UART_SetConfig+0x14a>
 8005104:	d820      	bhi.n	8005148 <UART_SetConfig+0x174>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <UART_SetConfig+0x13c>
 800510a:	2b04      	cmp	r3, #4
 800510c:	d00e      	beq.n	800512c <UART_SetConfig+0x158>
 800510e:	e01b      	b.n	8005148 <UART_SetConfig+0x174>
 8005110:	231b      	movs	r3, #27
 8005112:	2220      	movs	r2, #32
 8005114:	189b      	adds	r3, r3, r2
 8005116:	19db      	adds	r3, r3, r7
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e07d      	b.n	800521a <UART_SetConfig+0x246>
 800511e:	231b      	movs	r3, #27
 8005120:	2220      	movs	r2, #32
 8005122:	189b      	adds	r3, r3, r2
 8005124:	19db      	adds	r3, r3, r7
 8005126:	2202      	movs	r2, #2
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e076      	b.n	800521a <UART_SetConfig+0x246>
 800512c:	231b      	movs	r3, #27
 800512e:	2220      	movs	r2, #32
 8005130:	189b      	adds	r3, r3, r2
 8005132:	19db      	adds	r3, r3, r7
 8005134:	2204      	movs	r2, #4
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e06f      	b.n	800521a <UART_SetConfig+0x246>
 800513a:	231b      	movs	r3, #27
 800513c:	2220      	movs	r2, #32
 800513e:	189b      	adds	r3, r3, r2
 8005140:	19db      	adds	r3, r3, r7
 8005142:	2208      	movs	r2, #8
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e068      	b.n	800521a <UART_SetConfig+0x246>
 8005148:	231b      	movs	r3, #27
 800514a:	2220      	movs	r2, #32
 800514c:	189b      	adds	r3, r3, r2
 800514e:	19db      	adds	r3, r3, r7
 8005150:	2210      	movs	r2, #16
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	e061      	b.n	800521a <UART_SetConfig+0x246>
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a61      	ldr	r2, [pc, #388]	; (80052e0 <UART_SetConfig+0x30c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d106      	bne.n	800516e <UART_SetConfig+0x19a>
 8005160:	231b      	movs	r3, #27
 8005162:	2220      	movs	r2, #32
 8005164:	189b      	adds	r3, r3, r2
 8005166:	19db      	adds	r3, r3, r7
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	e055      	b.n	800521a <UART_SetConfig+0x246>
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a5c      	ldr	r2, [pc, #368]	; (80052e4 <UART_SetConfig+0x310>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d106      	bne.n	8005186 <UART_SetConfig+0x1b2>
 8005178:	231b      	movs	r3, #27
 800517a:	2220      	movs	r2, #32
 800517c:	189b      	adds	r3, r3, r2
 800517e:	19db      	adds	r3, r3, r7
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e049      	b.n	800521a <UART_SetConfig+0x246>
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a50      	ldr	r2, [pc, #320]	; (80052cc <UART_SetConfig+0x2f8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d13e      	bne.n	800520e <UART_SetConfig+0x23a>
 8005190:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <UART_SetConfig+0x304>)
 8005192:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005194:	23c0      	movs	r3, #192	; 0xc0
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	4013      	ands	r3, r2
 800519a:	22c0      	movs	r2, #192	; 0xc0
 800519c:	0112      	lsls	r2, r2, #4
 800519e:	4293      	cmp	r3, r2
 80051a0:	d027      	beq.n	80051f2 <UART_SetConfig+0x21e>
 80051a2:	22c0      	movs	r2, #192	; 0xc0
 80051a4:	0112      	lsls	r2, r2, #4
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d82a      	bhi.n	8005200 <UART_SetConfig+0x22c>
 80051aa:	2280      	movs	r2, #128	; 0x80
 80051ac:	0112      	lsls	r2, r2, #4
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d011      	beq.n	80051d6 <UART_SetConfig+0x202>
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	0112      	lsls	r2, r2, #4
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d822      	bhi.n	8005200 <UART_SetConfig+0x22c>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <UART_SetConfig+0x1f4>
 80051be:	2280      	movs	r2, #128	; 0x80
 80051c0:	00d2      	lsls	r2, r2, #3
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <UART_SetConfig+0x210>
 80051c6:	e01b      	b.n	8005200 <UART_SetConfig+0x22c>
 80051c8:	231b      	movs	r3, #27
 80051ca:	2220      	movs	r2, #32
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	19db      	adds	r3, r3, r7
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e021      	b.n	800521a <UART_SetConfig+0x246>
 80051d6:	231b      	movs	r3, #27
 80051d8:	2220      	movs	r2, #32
 80051da:	189b      	adds	r3, r3, r2
 80051dc:	19db      	adds	r3, r3, r7
 80051de:	2202      	movs	r2, #2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	e01a      	b.n	800521a <UART_SetConfig+0x246>
 80051e4:	231b      	movs	r3, #27
 80051e6:	2220      	movs	r2, #32
 80051e8:	189b      	adds	r3, r3, r2
 80051ea:	19db      	adds	r3, r3, r7
 80051ec:	2204      	movs	r2, #4
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e013      	b.n	800521a <UART_SetConfig+0x246>
 80051f2:	231b      	movs	r3, #27
 80051f4:	2220      	movs	r2, #32
 80051f6:	189b      	adds	r3, r3, r2
 80051f8:	19db      	adds	r3, r3, r7
 80051fa:	2208      	movs	r2, #8
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e00c      	b.n	800521a <UART_SetConfig+0x246>
 8005200:	231b      	movs	r3, #27
 8005202:	2220      	movs	r2, #32
 8005204:	189b      	adds	r3, r3, r2
 8005206:	19db      	adds	r3, r3, r7
 8005208:	2210      	movs	r2, #16
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e005      	b.n	800521a <UART_SetConfig+0x246>
 800520e:	231b      	movs	r3, #27
 8005210:	2220      	movs	r2, #32
 8005212:	189b      	adds	r3, r3, r2
 8005214:	19db      	adds	r3, r3, r7
 8005216:	2210      	movs	r2, #16
 8005218:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <UART_SetConfig+0x2f8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d000      	beq.n	8005226 <UART_SetConfig+0x252>
 8005224:	e0a9      	b.n	800537a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005226:	231b      	movs	r3, #27
 8005228:	2220      	movs	r2, #32
 800522a:	189b      	adds	r3, r3, r2
 800522c:	19db      	adds	r3, r3, r7
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d015      	beq.n	8005260 <UART_SetConfig+0x28c>
 8005234:	dc18      	bgt.n	8005268 <UART_SetConfig+0x294>
 8005236:	2b04      	cmp	r3, #4
 8005238:	d00d      	beq.n	8005256 <UART_SetConfig+0x282>
 800523a:	dc15      	bgt.n	8005268 <UART_SetConfig+0x294>
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <UART_SetConfig+0x272>
 8005240:	2b02      	cmp	r3, #2
 8005242:	d005      	beq.n	8005250 <UART_SetConfig+0x27c>
 8005244:	e010      	b.n	8005268 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005246:	f7fe fc05 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 800524a:	0003      	movs	r3, r0
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800524e:	e014      	b.n	800527a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005250:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <UART_SetConfig+0x314>)
 8005252:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005254:	e011      	b.n	800527a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005256:	f7fe fb71 	bl	800393c <HAL_RCC_GetSysClockFreq>
 800525a:	0003      	movs	r3, r0
 800525c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800525e:	e00c      	b.n	800527a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005266:	e008      	b.n	800527a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800526c:	231a      	movs	r3, #26
 800526e:	2220      	movs	r2, #32
 8005270:	189b      	adds	r3, r3, r2
 8005272:	19db      	adds	r3, r3, r7
 8005274:	2201      	movs	r2, #1
 8005276:	701a      	strb	r2, [r3, #0]
        break;
 8005278:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	2b00      	cmp	r3, #0
 800527e:	d100      	bne.n	8005282 <UART_SetConfig+0x2ae>
 8005280:	e14b      	b.n	800551a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005286:	4b19      	ldr	r3, [pc, #100]	; (80052ec <UART_SetConfig+0x318>)
 8005288:	0052      	lsls	r2, r2, #1
 800528a:	5ad3      	ldrh	r3, [r2, r3]
 800528c:	0019      	movs	r1, r3
 800528e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005290:	f7fa ff4a 	bl	8000128 <__udivsi3>
 8005294:	0003      	movs	r3, r0
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	0013      	movs	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	189b      	adds	r3, r3, r2
 80052a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d305      	bcc.n	80052b4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d91d      	bls.n	80052f0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80052b4:	231a      	movs	r3, #26
 80052b6:	2220      	movs	r2, #32
 80052b8:	189b      	adds	r3, r3, r2
 80052ba:	19db      	adds	r3, r3, r7
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e12b      	b.n	800551a <UART_SetConfig+0x546>
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	cfff69f3 	.word	0xcfff69f3
 80052c8:	ffffcfff 	.word	0xffffcfff
 80052cc:	40008000 	.word	0x40008000
 80052d0:	11fff4ff 	.word	0x11fff4ff
 80052d4:	40013800 	.word	0x40013800
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40004400 	.word	0x40004400
 80052e0:	40004800 	.word	0x40004800
 80052e4:	40004c00 	.word	0x40004c00
 80052e8:	00f42400 	.word	0x00f42400
 80052ec:	08006bd8 	.word	0x08006bd8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	2300      	movs	r3, #0
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052fc:	4b92      	ldr	r3, [pc, #584]	; (8005548 <UART_SetConfig+0x574>)
 80052fe:	0052      	lsls	r2, r2, #1
 8005300:	5ad3      	ldrh	r3, [r2, r3]
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	69b8      	ldr	r0, [r7, #24]
 800530e:	69f9      	ldr	r1, [r7, #28]
 8005310:	f7fb f880 	bl	8000414 <__aeabi_uldivmod>
 8005314:	0002      	movs	r2, r0
 8005316:	000b      	movs	r3, r1
 8005318:	0e11      	lsrs	r1, r2, #24
 800531a:	021d      	lsls	r5, r3, #8
 800531c:	430d      	orrs	r5, r1
 800531e:	0214      	lsls	r4, r2, #8
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68b8      	ldr	r0, [r7, #8]
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	1900      	adds	r0, r0, r4
 8005332:	4169      	adcs	r1, r5
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	607b      	str	r3, [r7, #4]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f7fb f867 	bl	8000414 <__aeabi_uldivmod>
 8005346:	0002      	movs	r2, r0
 8005348:	000b      	movs	r3, r1
 800534a:	0013      	movs	r3, r2
 800534c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800534e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005350:	23c0      	movs	r3, #192	; 0xc0
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	429a      	cmp	r2, r3
 8005356:	d309      	bcc.n	800536c <UART_SetConfig+0x398>
 8005358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	035b      	lsls	r3, r3, #13
 800535e:	429a      	cmp	r2, r3
 8005360:	d204      	bcs.n	800536c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005368:	60da      	str	r2, [r3, #12]
 800536a:	e0d6      	b.n	800551a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800536c:	231a      	movs	r3, #26
 800536e:	2220      	movs	r2, #32
 8005370:	189b      	adds	r3, r3, r2
 8005372:	19db      	adds	r3, r3, r7
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e0cf      	b.n	800551a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	429a      	cmp	r2, r3
 8005384:	d000      	beq.n	8005388 <UART_SetConfig+0x3b4>
 8005386:	e070      	b.n	800546a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005388:	231b      	movs	r3, #27
 800538a:	2220      	movs	r2, #32
 800538c:	189b      	adds	r3, r3, r2
 800538e:	19db      	adds	r3, r3, r7
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b08      	cmp	r3, #8
 8005394:	d015      	beq.n	80053c2 <UART_SetConfig+0x3ee>
 8005396:	dc18      	bgt.n	80053ca <UART_SetConfig+0x3f6>
 8005398:	2b04      	cmp	r3, #4
 800539a:	d00d      	beq.n	80053b8 <UART_SetConfig+0x3e4>
 800539c:	dc15      	bgt.n	80053ca <UART_SetConfig+0x3f6>
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <UART_SetConfig+0x3d4>
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d005      	beq.n	80053b2 <UART_SetConfig+0x3de>
 80053a6:	e010      	b.n	80053ca <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a8:	f7fe fb54 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 80053ac:	0003      	movs	r3, r0
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053b0:	e014      	b.n	80053dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b2:	4b66      	ldr	r3, [pc, #408]	; (800554c <UART_SetConfig+0x578>)
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053b6:	e011      	b.n	80053dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b8:	f7fe fac0 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80053bc:	0003      	movs	r3, r0
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053c0:	e00c      	b.n	80053dc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053c8:	e008      	b.n	80053dc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80053ce:	231a      	movs	r3, #26
 80053d0:	2220      	movs	r2, #32
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	19db      	adds	r3, r3, r7
 80053d6:	2201      	movs	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]
        break;
 80053da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d100      	bne.n	80053e4 <UART_SetConfig+0x410>
 80053e2:	e09a      	b.n	800551a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e8:	4b57      	ldr	r3, [pc, #348]	; (8005548 <UART_SetConfig+0x574>)
 80053ea:	0052      	lsls	r2, r2, #1
 80053ec:	5ad3      	ldrh	r3, [r2, r3]
 80053ee:	0019      	movs	r1, r3
 80053f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053f2:	f7fa fe99 	bl	8000128 <__udivsi3>
 80053f6:	0003      	movs	r3, r0
 80053f8:	005a      	lsls	r2, r3, #1
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	085b      	lsrs	r3, r3, #1
 8005400:	18d2      	adds	r2, r2, r3
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	0019      	movs	r1, r3
 8005408:	0010      	movs	r0, r2
 800540a:	f7fa fe8d 	bl	8000128 <__udivsi3>
 800540e:	0003      	movs	r3, r0
 8005410:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	2b0f      	cmp	r3, #15
 8005416:	d921      	bls.n	800545c <UART_SetConfig+0x488>
 8005418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	025b      	lsls	r3, r3, #9
 800541e:	429a      	cmp	r2, r3
 8005420:	d21c      	bcs.n	800545c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	b29a      	uxth	r2, r3
 8005426:	200e      	movs	r0, #14
 8005428:	2420      	movs	r4, #32
 800542a:	1903      	adds	r3, r0, r4
 800542c:	19db      	adds	r3, r3, r7
 800542e:	210f      	movs	r1, #15
 8005430:	438a      	bics	r2, r1
 8005432:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	b29b      	uxth	r3, r3
 800543a:	2207      	movs	r2, #7
 800543c:	4013      	ands	r3, r2
 800543e:	b299      	uxth	r1, r3
 8005440:	1903      	adds	r3, r0, r4
 8005442:	19db      	adds	r3, r3, r7
 8005444:	1902      	adds	r2, r0, r4
 8005446:	19d2      	adds	r2, r2, r7
 8005448:	8812      	ldrh	r2, [r2, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	1902      	adds	r2, r0, r4
 8005454:	19d2      	adds	r2, r2, r7
 8005456:	8812      	ldrh	r2, [r2, #0]
 8005458:	60da      	str	r2, [r3, #12]
 800545a:	e05e      	b.n	800551a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800545c:	231a      	movs	r3, #26
 800545e:	2220      	movs	r2, #32
 8005460:	189b      	adds	r3, r3, r2
 8005462:	19db      	adds	r3, r3, r7
 8005464:	2201      	movs	r2, #1
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	e057      	b.n	800551a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800546a:	231b      	movs	r3, #27
 800546c:	2220      	movs	r2, #32
 800546e:	189b      	adds	r3, r3, r2
 8005470:	19db      	adds	r3, r3, r7
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d015      	beq.n	80054a4 <UART_SetConfig+0x4d0>
 8005478:	dc18      	bgt.n	80054ac <UART_SetConfig+0x4d8>
 800547a:	2b04      	cmp	r3, #4
 800547c:	d00d      	beq.n	800549a <UART_SetConfig+0x4c6>
 800547e:	dc15      	bgt.n	80054ac <UART_SetConfig+0x4d8>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <UART_SetConfig+0x4b6>
 8005484:	2b02      	cmp	r3, #2
 8005486:	d005      	beq.n	8005494 <UART_SetConfig+0x4c0>
 8005488:	e010      	b.n	80054ac <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800548a:	f7fe fae3 	bl	8003a54 <HAL_RCC_GetPCLK1Freq>
 800548e:	0003      	movs	r3, r0
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005492:	e014      	b.n	80054be <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005494:	4b2d      	ldr	r3, [pc, #180]	; (800554c <UART_SetConfig+0x578>)
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005498:	e011      	b.n	80054be <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549a:	f7fe fa4f 	bl	800393c <HAL_RCC_GetSysClockFreq>
 800549e:	0003      	movs	r3, r0
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054a2:	e00c      	b.n	80054be <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054aa:	e008      	b.n	80054be <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80054b0:	231a      	movs	r3, #26
 80054b2:	2220      	movs	r2, #32
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	19db      	adds	r3, r3, r7
 80054b8:	2201      	movs	r2, #1
 80054ba:	701a      	strb	r2, [r3, #0]
        break;
 80054bc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80054be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d02a      	beq.n	800551a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054c8:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <UART_SetConfig+0x574>)
 80054ca:	0052      	lsls	r2, r2, #1
 80054cc:	5ad3      	ldrh	r3, [r2, r3]
 80054ce:	0019      	movs	r1, r3
 80054d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054d2:	f7fa fe29 	bl	8000128 <__udivsi3>
 80054d6:	0003      	movs	r3, r0
 80054d8:	001a      	movs	r2, r3
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	18d2      	adds	r2, r2, r3
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	0019      	movs	r1, r3
 80054e8:	0010      	movs	r0, r2
 80054ea:	f7fa fe1d 	bl	8000128 <__udivsi3>
 80054ee:	0003      	movs	r3, r0
 80054f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d90a      	bls.n	800550e <UART_SetConfig+0x53a>
 80054f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	025b      	lsls	r3, r3, #9
 80054fe:	429a      	cmp	r2, r3
 8005500:	d205      	bcs.n	800550e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	b29a      	uxth	r2, r3
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60da      	str	r2, [r3, #12]
 800550c:	e005      	b.n	800551a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800550e:	231a      	movs	r3, #26
 8005510:	2220      	movs	r2, #32
 8005512:	189b      	adds	r3, r3, r2
 8005514:	19db      	adds	r3, r3, r7
 8005516:	2201      	movs	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	226a      	movs	r2, #106	; 0x6a
 800551e:	2101      	movs	r1, #1
 8005520:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	2268      	movs	r2, #104	; 0x68
 8005526:	2101      	movs	r1, #1
 8005528:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	2200      	movs	r2, #0
 800552e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	2200      	movs	r2, #0
 8005534:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005536:	231a      	movs	r3, #26
 8005538:	2220      	movs	r2, #32
 800553a:	189b      	adds	r3, r3, r2
 800553c:	19db      	adds	r3, r3, r7
 800553e:	781b      	ldrb	r3, [r3, #0]
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b010      	add	sp, #64	; 0x40
 8005546:	bdb0      	pop	{r4, r5, r7, pc}
 8005548:	08006bd8 	.word	0x08006bd8
 800554c:	00f42400 	.word	0x00f42400

08005550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	2208      	movs	r2, #8
 800555e:	4013      	ands	r3, r2
 8005560:	d00b      	beq.n	800557a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a4a      	ldr	r2, [pc, #296]	; (8005694 <UART_AdvFeatureConfig+0x144>)
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	2201      	movs	r2, #1
 8005580:	4013      	ands	r3, r2
 8005582:	d00b      	beq.n	800559c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	4a43      	ldr	r2, [pc, #268]	; (8005698 <UART_AdvFeatureConfig+0x148>)
 800558c:	4013      	ands	r3, r2
 800558e:	0019      	movs	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	2202      	movs	r2, #2
 80055a2:	4013      	ands	r3, r2
 80055a4:	d00b      	beq.n	80055be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a3b      	ldr	r2, [pc, #236]	; (800569c <UART_AdvFeatureConfig+0x14c>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	0019      	movs	r1, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	2204      	movs	r2, #4
 80055c4:	4013      	ands	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4a34      	ldr	r2, [pc, #208]	; (80056a0 <UART_AdvFeatureConfig+0x150>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e4:	2210      	movs	r2, #16
 80055e6:	4013      	ands	r3, r2
 80055e8:	d00b      	beq.n	8005602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <UART_AdvFeatureConfig+0x154>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	0019      	movs	r1, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	2220      	movs	r2, #32
 8005608:	4013      	ands	r3, r2
 800560a:	d00b      	beq.n	8005624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <UART_AdvFeatureConfig+0x158>)
 8005614:	4013      	ands	r3, r2
 8005616:	0019      	movs	r1, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	2240      	movs	r2, #64	; 0x40
 800562a:	4013      	ands	r3, r2
 800562c:	d01d      	beq.n	800566a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <UART_AdvFeatureConfig+0x15c>)
 8005636:	4013      	ands	r3, r2
 8005638:	0019      	movs	r1, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	035b      	lsls	r3, r3, #13
 800564e:	429a      	cmp	r2, r3
 8005650:	d10b      	bne.n	800566a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4a15      	ldr	r2, [pc, #84]	; (80056b0 <UART_AdvFeatureConfig+0x160>)
 800565a:	4013      	ands	r3, r2
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	4013      	ands	r3, r2
 8005672:	d00b      	beq.n	800568c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	4a0e      	ldr	r2, [pc, #56]	; (80056b4 <UART_AdvFeatureConfig+0x164>)
 800567c:	4013      	ands	r3, r2
 800567e:	0019      	movs	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
  }
}
 800568c:	46c0      	nop			; (mov r8, r8)
 800568e:	46bd      	mov	sp, r7
 8005690:	b002      	add	sp, #8
 8005692:	bd80      	pop	{r7, pc}
 8005694:	ffff7fff 	.word	0xffff7fff
 8005698:	fffdffff 	.word	0xfffdffff
 800569c:	fffeffff 	.word	0xfffeffff
 80056a0:	fffbffff 	.word	0xfffbffff
 80056a4:	ffffefff 	.word	0xffffefff
 80056a8:	ffffdfff 	.word	0xffffdfff
 80056ac:	ffefffff 	.word	0xffefffff
 80056b0:	ff9fffff 	.word	0xff9fffff
 80056b4:	fff7ffff 	.word	0xfff7ffff

080056b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b092      	sub	sp, #72	; 0x48
 80056bc:	af02      	add	r7, sp, #8
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2290      	movs	r2, #144	; 0x90
 80056c4:	2100      	movs	r1, #0
 80056c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056c8:	f7fb fe5a 	bl	8001380 <HAL_GetTick>
 80056cc:	0003      	movs	r3, r0
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2208      	movs	r2, #8
 80056d8:	4013      	ands	r3, r2
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d12d      	bne.n	800573a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e0:	2280      	movs	r2, #128	; 0x80
 80056e2:	0391      	lsls	r1, r2, #14
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4a47      	ldr	r2, [pc, #284]	; (8005804 <UART_CheckIdleState+0x14c>)
 80056e8:	9200      	str	r2, [sp, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f000 f88e 	bl	800580c <UART_WaitOnFlagUntilTimeout>
 80056f0:	1e03      	subs	r3, r0, #0
 80056f2:	d022      	beq.n	800573a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f4:	f3ef 8310 	mrs	r3, PRIMASK
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80056fe:	2301      	movs	r3, #1
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	f383 8810 	msr	PRIMASK, r3
}
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2180      	movs	r1, #128	; 0x80
 8005716:	438a      	bics	r2, r1
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	f383 8810 	msr	PRIMASK, r3
}
 8005724:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2288      	movs	r2, #136	; 0x88
 800572a:	2120      	movs	r1, #32
 800572c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2284      	movs	r2, #132	; 0x84
 8005732:	2100      	movs	r1, #0
 8005734:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e060      	b.n	80057fc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2204      	movs	r2, #4
 8005742:	4013      	ands	r3, r2
 8005744:	2b04      	cmp	r3, #4
 8005746:	d146      	bne.n	80057d6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	2280      	movs	r2, #128	; 0x80
 800574c:	03d1      	lsls	r1, r2, #15
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	4a2c      	ldr	r2, [pc, #176]	; (8005804 <UART_CheckIdleState+0x14c>)
 8005752:	9200      	str	r2, [sp, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	f000 f859 	bl	800580c <UART_WaitOnFlagUntilTimeout>
 800575a:	1e03      	subs	r3, r0, #0
 800575c:	d03b      	beq.n	80057d6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575e:	f3ef 8310 	mrs	r3, PRIMASK
 8005762:	60fb      	str	r3, [r7, #12]
  return(result);
 8005764:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
 8005768:	2301      	movs	r3, #1
 800576a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f383 8810 	msr	PRIMASK, r3
}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4922      	ldr	r1, [pc, #136]	; (8005808 <UART_CheckIdleState+0x150>)
 8005780:	400a      	ands	r2, r1
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005786:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f383 8810 	msr	PRIMASK, r3
}
 800578e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005790:	f3ef 8310 	mrs	r3, PRIMASK
 8005794:	61bb      	str	r3, [r7, #24]
  return(result);
 8005796:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005798:	633b      	str	r3, [r7, #48]	; 0x30
 800579a:	2301      	movs	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f383 8810 	msr	PRIMASK, r3
}
 80057a4:	46c0      	nop			; (mov r8, r8)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2101      	movs	r1, #1
 80057b2:	438a      	bics	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	f383 8810 	msr	PRIMASK, r3
}
 80057c0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	228c      	movs	r2, #140	; 0x8c
 80057c6:	2120      	movs	r1, #32
 80057c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2284      	movs	r2, #132	; 0x84
 80057ce:	2100      	movs	r1, #0
 80057d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e012      	b.n	80057fc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2288      	movs	r2, #136	; 0x88
 80057da:	2120      	movs	r1, #32
 80057dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	228c      	movs	r2, #140	; 0x8c
 80057e2:	2120      	movs	r1, #32
 80057e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2284      	movs	r2, #132	; 0x84
 80057f6:	2100      	movs	r1, #0
 80057f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	0018      	movs	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	b010      	add	sp, #64	; 0x40
 8005802:	bd80      	pop	{r7, pc}
 8005804:	01ffffff 	.word	0x01ffffff
 8005808:	fffffedf 	.word	0xfffffedf

0800580c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	1dfb      	adds	r3, r7, #7
 800581a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581c:	e051      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	3301      	adds	r3, #1
 8005822:	d04e      	beq.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005824:	f7fb fdac 	bl	8001380 <HAL_GetTick>
 8005828:	0002      	movs	r2, r0
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	429a      	cmp	r2, r3
 8005832:	d302      	bcc.n	800583a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e051      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2204      	movs	r2, #4
 8005846:	4013      	ands	r3, r2
 8005848:	d03b      	beq.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b80      	cmp	r3, #128	; 0x80
 800584e:	d038      	beq.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b40      	cmp	r3, #64	; 0x40
 8005854:	d035      	beq.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	2208      	movs	r2, #8
 800585e:	4013      	ands	r3, r2
 8005860:	2b08      	cmp	r3, #8
 8005862:	d111      	bne.n	8005888 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2208      	movs	r2, #8
 800586a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	0018      	movs	r0, r3
 8005870:	f000 f83c 	bl	80058ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2290      	movs	r2, #144	; 0x90
 8005878:	2108      	movs	r1, #8
 800587a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2284      	movs	r2, #132	; 0x84
 8005880:	2100      	movs	r1, #0
 8005882:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e02c      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69da      	ldr	r2, [r3, #28]
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	401a      	ands	r2, r3
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	429a      	cmp	r2, r3
 800589a:	d112      	bne.n	80058c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2280      	movs	r2, #128	; 0x80
 80058a2:	0112      	lsls	r2, r2, #4
 80058a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 f81f 	bl	80058ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2290      	movs	r2, #144	; 0x90
 80058b2:	2120      	movs	r1, #32
 80058b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2284      	movs	r2, #132	; 0x84
 80058ba:	2100      	movs	r1, #0
 80058bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e00f      	b.n	80058e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	4013      	ands	r3, r2
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	425a      	negs	r2, r3
 80058d2:	4153      	adcs	r3, r2
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	001a      	movs	r2, r3
 80058d8:	1dfb      	adds	r3, r7, #7
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d09e      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	0018      	movs	r0, r3
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b004      	add	sp, #16
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08e      	sub	sp, #56	; 0x38
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f4:	f3ef 8310 	mrs	r3, PRIMASK
 80058f8:	617b      	str	r3, [r7, #20]
  return(result);
 80058fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
 80058fe:	2301      	movs	r3, #1
 8005900:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f383 8810 	msr	PRIMASK, r3
}
 8005908:	46c0      	nop			; (mov r8, r8)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4926      	ldr	r1, [pc, #152]	; (80059b0 <UART_EndRxTransfer+0xc4>)
 8005916:	400a      	ands	r2, r1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f383 8810 	msr	PRIMASK, r3
}
 8005924:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005926:	f3ef 8310 	mrs	r3, PRIMASK
 800592a:	623b      	str	r3, [r7, #32]
  return(result);
 800592c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800592e:	633b      	str	r3, [r7, #48]	; 0x30
 8005930:	2301      	movs	r3, #1
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	f383 8810 	msr	PRIMASK, r3
}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	491b      	ldr	r1, [pc, #108]	; (80059b4 <UART_EndRxTransfer+0xc8>)
 8005948:	400a      	ands	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005952:	f383 8810 	msr	PRIMASK, r3
}
 8005956:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800595c:	2b01      	cmp	r3, #1
 800595e:	d118      	bne.n	8005992 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005960:	f3ef 8310 	mrs	r3, PRIMASK
 8005964:	60bb      	str	r3, [r7, #8]
  return(result);
 8005966:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800596a:	2301      	movs	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f383 8810 	msr	PRIMASK, r3
}
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2110      	movs	r1, #16
 8005982:	438a      	bics	r2, r1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f383 8810 	msr	PRIMASK, r3
}
 8005990:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	228c      	movs	r2, #140	; 0x8c
 8005996:	2120      	movs	r1, #32
 8005998:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b00e      	add	sp, #56	; 0x38
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	fffffedf 	.word	0xfffffedf
 80059b4:	effffffe 	.word	0xeffffffe

080059b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2284      	movs	r2, #132	; 0x84
 80059c4:	5c9b      	ldrb	r3, [r3, r2]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UARTEx_DisableFifoMode+0x16>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e027      	b.n	8005a1e <HAL_UARTEx_DisableFifoMode+0x66>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2284      	movs	r2, #132	; 0x84
 80059d2:	2101      	movs	r1, #1
 80059d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2288      	movs	r2, #136	; 0x88
 80059da:	2124      	movs	r1, #36	; 0x24
 80059dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2101      	movs	r1, #1
 80059f2:	438a      	bics	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a0b      	ldr	r2, [pc, #44]	; (8005a28 <HAL_UARTEx_DisableFifoMode+0x70>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2288      	movs	r2, #136	; 0x88
 8005a10:	2120      	movs	r1, #32
 8005a12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2284      	movs	r2, #132	; 0x84
 8005a18:	2100      	movs	r1, #0
 8005a1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	0018      	movs	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b004      	add	sp, #16
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	dfffffff 	.word	0xdfffffff

08005a2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2284      	movs	r2, #132	; 0x84
 8005a3a:	5c9b      	ldrb	r3, [r3, r2]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e02e      	b.n	8005aa2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2284      	movs	r2, #132	; 0x84
 8005a48:	2101      	movs	r1, #1
 8005a4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2288      	movs	r2, #136	; 0x88
 8005a50:	2124      	movs	r1, #36	; 0x24
 8005a52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2101      	movs	r1, #1
 8005a68:	438a      	bics	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	08d9      	lsrs	r1, r3, #3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f000 f854 	bl	8005b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2288      	movs	r2, #136	; 0x88
 8005a94:	2120      	movs	r1, #32
 8005a96:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2284      	movs	r2, #132	; 0x84
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b004      	add	sp, #16
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2284      	movs	r2, #132	; 0x84
 8005aba:	5c9b      	ldrb	r3, [r3, r2]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e02f      	b.n	8005b24 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2284      	movs	r2, #132	; 0x84
 8005ac8:	2101      	movs	r1, #1
 8005aca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2288      	movs	r2, #136	; 0x88
 8005ad0:	2124      	movs	r1, #36	; 0x24
 8005ad2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	438a      	bics	r2, r1
 8005aea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4a0e      	ldr	r2, [pc, #56]	; (8005b2c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	0019      	movs	r1, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 f813 	bl	8005b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2288      	movs	r2, #136	; 0x88
 8005b16:	2120      	movs	r1, #32
 8005b18:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2284      	movs	r2, #132	; 0x84
 8005b1e:	2100      	movs	r1, #0
 8005b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	0018      	movs	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b004      	add	sp, #16
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	f1ffffff 	.word	0xf1ffffff

08005b30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d108      	bne.n	8005b52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	226a      	movs	r2, #106	; 0x6a
 8005b44:	2101      	movs	r1, #1
 8005b46:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2268      	movs	r2, #104	; 0x68
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b50:	e043      	b.n	8005bda <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b52:	260f      	movs	r6, #15
 8005b54:	19bb      	adds	r3, r7, r6
 8005b56:	2208      	movs	r2, #8
 8005b58:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b5a:	200e      	movs	r0, #14
 8005b5c:	183b      	adds	r3, r7, r0
 8005b5e:	2208      	movs	r2, #8
 8005b60:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	0e5b      	lsrs	r3, r3, #25
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	240d      	movs	r4, #13
 8005b6e:	193b      	adds	r3, r7, r4
 8005b70:	2107      	movs	r1, #7
 8005b72:	400a      	ands	r2, r1
 8005b74:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	0f5b      	lsrs	r3, r3, #29
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	250c      	movs	r5, #12
 8005b82:	197b      	adds	r3, r7, r5
 8005b84:	2107      	movs	r1, #7
 8005b86:	400a      	ands	r2, r1
 8005b88:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b8a:	183b      	adds	r3, r7, r0
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	197a      	adds	r2, r7, r5
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	4914      	ldr	r1, [pc, #80]	; (8005be4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005b94:	5c8a      	ldrb	r2, [r1, r2]
 8005b96:	435a      	muls	r2, r3
 8005b98:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b9a:	197b      	adds	r3, r7, r5
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005ba0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	f7fa fb4a 	bl	800023c <__divsi3>
 8005ba8:	0003      	movs	r3, r0
 8005baa:	b299      	uxth	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	226a      	movs	r2, #106	; 0x6a
 8005bb0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bb2:	19bb      	adds	r3, r7, r6
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	193a      	adds	r2, r7, r4
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	490a      	ldr	r1, [pc, #40]	; (8005be4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005bbc:	5c8a      	ldrb	r2, [r1, r2]
 8005bbe:	435a      	muls	r2, r3
 8005bc0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bc2:	193b      	adds	r3, r7, r4
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005bc8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bca:	0019      	movs	r1, r3
 8005bcc:	f7fa fb36 	bl	800023c <__divsi3>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	b299      	uxth	r1, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2268      	movs	r2, #104	; 0x68
 8005bd8:	5299      	strh	r1, [r3, r2]
}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b005      	add	sp, #20
 8005be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	08006bf0 	.word	0x08006bf0
 8005be8:	08006bf8 	.word	0x08006bf8

08005bec <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	0002      	movs	r2, r0
 8005bf4:	1dfb      	adds	r3, r7, #7
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	1dbb      	adds	r3, r7, #6
 8005bfa:	1c0a      	adds	r2, r1, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8005bfe:	1dfb      	adds	r3, r7, #7
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <I2C_LCD_ExpanderWrite+0x70>)
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	18d3      	adds	r3, r2, r3
 8005c08:	3301      	adds	r3, #1
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	1dbb      	adds	r3, r7, #6
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	240f      	movs	r4, #15
 8005c16:	193b      	adds	r3, r7, r4
 8005c18:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8005c1a:	1dfb      	adds	r3, r7, #7
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	4910      	ldr	r1, [pc, #64]	; (8005c60 <I2C_LCD_ExpanderWrite+0x74>)
 8005c20:	0013      	movs	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	189b      	adds	r3, r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	18cb      	adds	r3, r1, r3
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	1dfb      	adds	r3, r7, #7
 8005c30:	781a      	ldrb	r2, [r3, #0]
 8005c32:	490b      	ldr	r1, [pc, #44]	; (8005c60 <I2C_LCD_ExpanderWrite+0x74>)
 8005c34:	0013      	movs	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	189b      	adds	r3, r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	18cb      	adds	r3, r1, r3
 8005c3e:	3308      	adds	r3, #8
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	18db      	adds	r3, r3, r3
 8005c46:	b299      	uxth	r1, r3
 8005c48:	193a      	adds	r2, r7, r4
 8005c4a:	2364      	movs	r3, #100	; 0x64
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f7fc fd0a 	bl	8002668 <HAL_I2C_Master_Transmit>
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b005      	add	sp, #20
 8005c5a:	bd90      	pop	{r4, r7, pc}
 8005c5c:	20000264 	.word	0x20000264
 8005c60:	08006c00 	.word	0x08006c00

08005c64 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8005c64:	b590      	push	{r4, r7, lr}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	0002      	movs	r2, r0
 8005c6c:	1dfb      	adds	r3, r7, #7
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	1dbb      	adds	r3, r7, #6
 8005c72:	1c0a      	adds	r2, r1, #0
 8005c74:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8005c76:	1dbb      	adds	r3, r7, #6
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2204      	movs	r2, #4
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	0011      	movs	r1, r2
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7ff ffb0 	bl	8005bec <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8005c8c:	4b25      	ldr	r3, [pc, #148]	; (8005d24 <I2C_LCD_EnPulse+0xc0>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <I2C_LCD_EnPulse+0xc4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4925      	ldr	r1, [pc, #148]	; (8005d2c <I2C_LCD_EnPulse+0xc8>)
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7fa fa45 	bl	8000128 <__udivsi3>
 8005c9e:	0003      	movs	r3, r0
 8005ca0:	005c      	lsls	r4, r3, #1
 8005ca2:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <I2C_LCD_EnPulse+0xc4>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4921      	ldr	r1, [pc, #132]	; (8005d2c <I2C_LCD_EnPulse+0xc8>)
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7fa fa3d 	bl	8000128 <__udivsi3>
 8005cae:	0003      	movs	r3, r0
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	1ae3      	subs	r3, r4, r3
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <I2C_LCD_EnPulse+0xc0>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d8f8      	bhi.n	8005cb6 <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8005cc4:	1dbb      	adds	r3, r7, #6
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	4393      	bics	r3, r2
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	1dfb      	adds	r3, r7, #7
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	0011      	movs	r1, r2
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f7ff ff89 	bl	8005bec <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <I2C_LCD_EnPulse+0xc0>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <I2C_LCD_EnPulse+0xc4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4911      	ldr	r1, [pc, #68]	; (8005d2c <I2C_LCD_EnPulse+0xc8>)
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f7fa fa1e 	bl	8000128 <__udivsi3>
 8005cec:	0003      	movs	r3, r0
 8005cee:	001a      	movs	r2, r3
 8005cf0:	2332      	movs	r3, #50	; 0x32
 8005cf2:	4353      	muls	r3, r2
 8005cf4:	001c      	movs	r4, r3
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <I2C_LCD_EnPulse+0xc4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	490c      	ldr	r1, [pc, #48]	; (8005d2c <I2C_LCD_EnPulse+0xc8>)
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7fa fa13 	bl	8000128 <__udivsi3>
 8005d02:	0003      	movs	r3, r0
 8005d04:	085b      	lsrs	r3, r3, #1
 8005d06:	1ae3      	subs	r3, r4, r3
 8005d08:	60bb      	str	r3, [r7, #8]
 8005d0a:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <I2C_LCD_EnPulse+0xc0>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d8f8      	bhi.n	8005d0a <I2C_LCD_EnPulse+0xa6>
}
 8005d18:	46c0      	nop			; (mov r8, r8)
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b007      	add	sp, #28
 8005d20:	bd90      	pop	{r4, r7, pc}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	e000e010 	.word	0xe000e010
 8005d28:	20000000 	.word	0x20000000
 8005d2c:	000f4240 	.word	0x000f4240

08005d30 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	0002      	movs	r2, r0
 8005d38:	1dfb      	adds	r3, r7, #7
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	1dbb      	adds	r3, r7, #6
 8005d3e:	1c0a      	adds	r2, r1, #0
 8005d40:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8005d42:	1dbb      	adds	r3, r7, #6
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	1dfb      	adds	r3, r7, #7
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	0011      	movs	r1, r2
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7ff ff4d 	bl	8005bec <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8005d52:	1dbb      	adds	r3, r7, #6
 8005d54:	781a      	ldrb	r2, [r3, #0]
 8005d56:	1dfb      	adds	r3, r7, #7
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f7ff ff81 	bl	8005c64 <I2C_LCD_EnPulse>
}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b002      	add	sp, #8
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8005d6a:	b590      	push	{r4, r7, lr}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	0004      	movs	r4, r0
 8005d72:	0008      	movs	r0, r1
 8005d74:	0011      	movs	r1, r2
 8005d76:	1dfb      	adds	r3, r7, #7
 8005d78:	1c22      	adds	r2, r4, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	1dbb      	adds	r3, r7, #6
 8005d7e:	1c02      	adds	r2, r0, #0
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	1d7b      	adds	r3, r7, #5
 8005d84:	1c0a      	adds	r2, r1, #0
 8005d86:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8005d88:	200f      	movs	r0, #15
 8005d8a:	183b      	adds	r3, r7, r0
 8005d8c:	1dba      	adds	r2, r7, #6
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	210f      	movs	r1, #15
 8005d92:	438a      	bics	r2, r1
 8005d94:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8005d96:	1dbb      	adds	r3, r7, #6
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	011a      	lsls	r2, r3, #4
 8005d9c:	240e      	movs	r4, #14
 8005d9e:	193b      	adds	r3, r7, r4
 8005da0:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8005da2:	183a      	adds	r2, r7, r0
 8005da4:	1d7b      	adds	r3, r7, #5
 8005da6:	7812      	ldrb	r2, [r2, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	1dfb      	adds	r3, r7, #7
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	0011      	movs	r1, r2
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7ff ffbb 	bl	8005d30 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8005dba:	193a      	adds	r2, r7, r4
 8005dbc:	1d7b      	adds	r3, r7, #5
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	1dfb      	adds	r3, r7, #7
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	0011      	movs	r1, r2
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f7ff ffaf 	bl	8005d30 <I2C_LCD_Write4Bits>
}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	b005      	add	sp, #20
 8005dd8:	bd90      	pop	{r4, r7, pc}

08005dda <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	0002      	movs	r2, r0
 8005de2:	1dfb      	adds	r3, r7, #7
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	1dbb      	adds	r3, r7, #6
 8005de8:	1c0a      	adds	r2, r1, #0
 8005dea:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8005dec:	1dbb      	adds	r3, r7, #6
 8005dee:	7819      	ldrb	r1, [r3, #0]
 8005df0:	1dfb      	adds	r3, r7, #7
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2200      	movs	r2, #0
 8005df6:	0018      	movs	r0, r3
 8005df8:	f7ff ffb7 	bl	8005d6a <I2C_LCD_Send>
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b002      	add	sp, #8
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	0002      	movs	r2, r0
 8005e0c:	1dfb      	adds	r3, r7, #7
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	1dbb      	adds	r3, r7, #6
 8005e12:	1c0a      	adds	r2, r1, #0
 8005e14:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8005e16:	1dbb      	adds	r3, r7, #6
 8005e18:	7819      	ldrb	r1, [r3, #0]
 8005e1a:	1dfb      	adds	r3, r7, #7
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	0018      	movs	r0, r3
 8005e22:	f7ff ffa2 	bl	8005d6a <I2C_LCD_Send>
}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b002      	add	sp, #8
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b08b      	sub	sp, #44	; 0x2c
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	0002      	movs	r2, r0
 8005e38:	1dfb      	adds	r3, r7, #7
 8005e3a:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	f7fb fa9f 	bl	8001380 <HAL_GetTick>
 8005e42:	0003      	movs	r3, r0
 8005e44:	2b31      	cmp	r3, #49	; 0x31
 8005e46:	d9fa      	bls.n	8005e3e <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8005e48:	1dfb      	adds	r3, r7, #7
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2130      	movs	r1, #48	; 0x30
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f7ff ffc3 	bl	8005dda <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8005e54:	2300      	movs	r3, #0
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
 8005e58:	e025      	b.n	8005ea6 <I2C_LCD_Init+0x76>
 8005e5a:	4b57      	ldr	r3, [pc, #348]	; (8005fb8 <I2C_LCD_Init+0x188>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	4b56      	ldr	r3, [pc, #344]	; (8005fbc <I2C_LCD_Init+0x18c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4956      	ldr	r1, [pc, #344]	; (8005fc0 <I2C_LCD_Init+0x190>)
 8005e66:	0018      	movs	r0, r3
 8005e68:	f7fa f95e 	bl	8000128 <__udivsi3>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	001a      	movs	r2, r3
 8005e70:	0013      	movs	r3, r2
 8005e72:	015b      	lsls	r3, r3, #5
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	189b      	adds	r3, r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	001c      	movs	r4, r3
 8005e7e:	4b4f      	ldr	r3, [pc, #316]	; (8005fbc <I2C_LCD_Init+0x18c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	494f      	ldr	r1, [pc, #316]	; (8005fc0 <I2C_LCD_Init+0x190>)
 8005e84:	0018      	movs	r0, r3
 8005e86:	f7fa f94f 	bl	8000128 <__udivsi3>
 8005e8a:	0003      	movs	r3, r0
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	1ae3      	subs	r3, r4, r3
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	4b49      	ldr	r3, [pc, #292]	; (8005fb8 <I2C_LCD_Init+0x188>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d8f8      	bhi.n	8005e92 <I2C_LCD_Init+0x62>
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d9d6      	bls.n	8005e5a <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8005eac:	1dfb      	adds	r3, r7, #7
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2130      	movs	r1, #48	; 0x30
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f7ff ff91 	bl	8005dda <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8005eb8:	2300      	movs	r3, #0
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	e025      	b.n	8005f0a <I2C_LCD_Init+0xda>
 8005ebe:	4b3e      	ldr	r3, [pc, #248]	; (8005fb8 <I2C_LCD_Init+0x188>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	4b3d      	ldr	r3, [pc, #244]	; (8005fbc <I2C_LCD_Init+0x18c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	493d      	ldr	r1, [pc, #244]	; (8005fc0 <I2C_LCD_Init+0x190>)
 8005eca:	0018      	movs	r0, r3
 8005ecc:	f7fa f92c 	bl	8000128 <__udivsi3>
 8005ed0:	0003      	movs	r3, r0
 8005ed2:	001a      	movs	r2, r3
 8005ed4:	0013      	movs	r3, r2
 8005ed6:	015b      	lsls	r3, r3, #5
 8005ed8:	1a9b      	subs	r3, r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	189b      	adds	r3, r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	001c      	movs	r4, r3
 8005ee2:	4b36      	ldr	r3, [pc, #216]	; (8005fbc <I2C_LCD_Init+0x18c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4936      	ldr	r1, [pc, #216]	; (8005fc0 <I2C_LCD_Init+0x190>)
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7fa f91d 	bl	8000128 <__udivsi3>
 8005eee:	0003      	movs	r3, r0
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	1ae3      	subs	r3, r4, r3
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	4b30      	ldr	r3, [pc, #192]	; (8005fb8 <I2C_LCD_Init+0x188>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d8f8      	bhi.n	8005ef6 <I2C_LCD_Init+0xc6>
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	3301      	adds	r3, #1
 8005f08:	623b      	str	r3, [r7, #32]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d9d6      	bls.n	8005ebe <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8005f10:	1dfb      	adds	r3, r7, #7
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2130      	movs	r1, #48	; 0x30
 8005f16:	0018      	movs	r0, r3
 8005f18:	f7ff ff5f 	bl	8005dda <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8005f1c:	4b26      	ldr	r3, [pc, #152]	; (8005fb8 <I2C_LCD_Init+0x188>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	61fb      	str	r3, [r7, #28]
 8005f22:	4b26      	ldr	r3, [pc, #152]	; (8005fbc <I2C_LCD_Init+0x18c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4926      	ldr	r1, [pc, #152]	; (8005fc0 <I2C_LCD_Init+0x190>)
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f7fa f8fd 	bl	8000128 <__udivsi3>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	001a      	movs	r2, r3
 8005f32:	2396      	movs	r3, #150	; 0x96
 8005f34:	4353      	muls	r3, r2
 8005f36:	001c      	movs	r4, r3
 8005f38:	4b20      	ldr	r3, [pc, #128]	; (8005fbc <I2C_LCD_Init+0x18c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4920      	ldr	r1, [pc, #128]	; (8005fc0 <I2C_LCD_Init+0x190>)
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f7fa f8f2 	bl	8000128 <__udivsi3>
 8005f44:	0003      	movs	r3, r0
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	1ae3      	subs	r3, r4, r3
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <I2C_LCD_Init+0x188>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d8f8      	bhi.n	8005f4c <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8005f5a:	1dfb      	adds	r3, r7, #7
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2102      	movs	r1, #2
 8005f60:	0018      	movs	r0, r3
 8005f62:	f7ff ff3a 	bl	8005dda <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8005f66:	1dfb      	adds	r3, r7, #7
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2128      	movs	r1, #40	; 0x28
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f7ff ff34 	bl	8005dda <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8005f72:	1dfb      	adds	r3, r7, #7
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	210c      	movs	r1, #12
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f7ff ff2e 	bl	8005dda <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8005f7e:	1dfb      	adds	r3, r7, #7
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2106      	movs	r1, #6
 8005f84:	0018      	movs	r0, r3
 8005f86:	f7ff ff28 	bl	8005dda <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8005f8a:	1dfb      	adds	r3, r7, #7
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <I2C_LCD_Init+0x194>)
 8005f90:	0052      	lsls	r2, r2, #1
 8005f92:	2104      	movs	r1, #4
 8005f94:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8005f96:	1dfb      	adds	r3, r7, #7
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <I2C_LCD_Init+0x194>)
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	18d3      	adds	r3, r2, r3
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8005fa6:	1dfb      	adds	r3, r7, #7
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 f80c 	bl	8005fc8 <I2C_LCD_Clear>
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b00b      	add	sp, #44	; 0x2c
 8005fb6:	bd90      	pop	{r4, r7, pc}
 8005fb8:	e000e010 	.word	0xe000e010
 8005fbc:	20000000 	.word	0x20000000
 8005fc0:	000f4240 	.word	0x000f4240
 8005fc4:	20000264 	.word	0x20000264

08005fc8 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8005fc8:	b590      	push	{r4, r7, lr}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	0002      	movs	r2, r0
 8005fd0:	1dfb      	adds	r3, r7, #7
 8005fd2:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8005fd4:	1dfb      	adds	r3, r7, #7
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2101      	movs	r1, #1
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f7ff fefd 	bl	8005dda <I2C_LCD_Cmd>
    DELAY_MS(2);
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e025      	b.n	8006032 <I2C_LCD_Clear+0x6a>
 8005fe6:	4b17      	ldr	r3, [pc, #92]	; (8006044 <I2C_LCD_Clear+0x7c>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	4b16      	ldr	r3, [pc, #88]	; (8006048 <I2C_LCD_Clear+0x80>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4916      	ldr	r1, [pc, #88]	; (800604c <I2C_LCD_Clear+0x84>)
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f7fa f898 	bl	8000128 <__udivsi3>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	001a      	movs	r2, r3
 8005ffc:	0013      	movs	r3, r2
 8005ffe:	015b      	lsls	r3, r3, #5
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	189b      	adds	r3, r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	001c      	movs	r4, r3
 800600a:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <I2C_LCD_Clear+0x80>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	490f      	ldr	r1, [pc, #60]	; (800604c <I2C_LCD_Clear+0x84>)
 8006010:	0018      	movs	r0, r3
 8006012:	f7fa f889 	bl	8000128 <__udivsi3>
 8006016:	0003      	movs	r3, r0
 8006018:	085b      	lsrs	r3, r3, #1
 800601a:	1ae3      	subs	r3, r4, r3
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <I2C_LCD_Clear+0x7c>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	429a      	cmp	r2, r3
 800602a:	d8f8      	bhi.n	800601e <I2C_LCD_Clear+0x56>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3301      	adds	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d9d6      	bls.n	8005fe6 <I2C_LCD_Clear+0x1e>
}
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	46bd      	mov	sp, r7
 800603e:	b007      	add	sp, #28
 8006040:	bd90      	pop	{r4, r7, pc}
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	e000e010 	.word	0xe000e010
 8006048:	20000000 	.word	0x20000000
 800604c:	000f4240 	.word	0x000f4240

08006050 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8006050:	b590      	push	{r4, r7, lr}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	0004      	movs	r4, r0
 8006058:	0008      	movs	r0, r1
 800605a:	0011      	movs	r1, r2
 800605c:	1dfb      	adds	r3, r7, #7
 800605e:	1c22      	adds	r2, r4, #0
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	1dbb      	adds	r3, r7, #6
 8006064:	1c02      	adds	r2, r0, #0
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	1d7b      	adds	r3, r7, #5
 800606a:	1c0a      	adds	r2, r1, #0
 800606c:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800606e:	2308      	movs	r3, #8
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	4a1d      	ldr	r2, [pc, #116]	; (80060e8 <I2C_LCD_SetCursor+0x98>)
 8006074:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006076:	c313      	stmia	r3!, {r0, r1, r4}
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800607c:	1dfb      	adds	r3, r7, #7
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	491a      	ldr	r1, [pc, #104]	; (80060ec <I2C_LCD_SetCursor+0x9c>)
 8006082:	0013      	movs	r3, r2
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	189b      	adds	r3, r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	18cb      	adds	r3, r1, r3
 800608c:	330a      	adds	r3, #10
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	1d7a      	adds	r2, r7, #5
 8006092:	7812      	ldrb	r2, [r2, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d90c      	bls.n	80060b2 <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8006098:	1dfb      	adds	r3, r7, #7
 800609a:	781a      	ldrb	r2, [r3, #0]
 800609c:	4913      	ldr	r1, [pc, #76]	; (80060ec <I2C_LCD_SetCursor+0x9c>)
 800609e:	0013      	movs	r3, r2
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	189b      	adds	r3, r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	18cb      	adds	r3, r1, r3
 80060a8:	330a      	adds	r3, #10
 80060aa:	781a      	ldrb	r2, [r3, #0]
 80060ac:	1d7b      	adds	r3, r7, #5
 80060ae:	3a01      	subs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 80060b2:	1d7b      	adds	r3, r7, #5
 80060b4:	781a      	ldrb	r2, [r3, #0]
 80060b6:	2308      	movs	r3, #8
 80060b8:	18fb      	adds	r3, r7, r3
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	58d3      	ldr	r3, [r2, r3]
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	1dbb      	adds	r3, r7, #6
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	18d3      	adds	r3, r2, r3
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	b25b      	sxtb	r3, r3
 80060ca:	2280      	movs	r2, #128	; 0x80
 80060cc:	4252      	negs	r2, r2
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b25b      	sxtb	r3, r3
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	1dfb      	adds	r3, r7, #7
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	0011      	movs	r1, r2
 80060da:	0018      	movs	r0, r3
 80060dc:	f7ff fe7d 	bl	8005dda <I2C_LCD_Cmd>
}
 80060e0:	46c0      	nop			; (mov r8, r8)
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b007      	add	sp, #28
 80060e6:	bd90      	pop	{r4, r7, pc}
 80060e8:	08006b14 	.word	0x08006b14
 80060ec:	08006c00 	.word	0x08006c00

080060f0 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	0002      	movs	r2, r0
 80060f8:	6039      	str	r1, [r7, #0]
 80060fa:	1dfb      	adds	r3, r7, #7
 80060fc:	701a      	strb	r2, [r3, #0]
    while (*Str)
 80060fe:	e009      	b.n	8006114 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	603a      	str	r2, [r7, #0]
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	1dfb      	adds	r3, r7, #7
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	0011      	movs	r1, r2
 800610e:	0018      	movs	r0, r3
 8006110:	f7ff fe78 	bl	8005e04 <I2C_LCD_Data>
    while (*Str)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f1      	bne.n	8006100 <I2C_LCD_WriteString+0x10>
    }
}
 800611c:	46c0      	nop			; (mov r8, r8)
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	46bd      	mov	sp, r7
 8006122:	b002      	add	sp, #8
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <siprintf>:
 8006128:	b40e      	push	{r1, r2, r3}
 800612a:	b500      	push	{lr}
 800612c:	490b      	ldr	r1, [pc, #44]	; (800615c <siprintf+0x34>)
 800612e:	b09c      	sub	sp, #112	; 0x70
 8006130:	ab1d      	add	r3, sp, #116	; 0x74
 8006132:	9002      	str	r0, [sp, #8]
 8006134:	9006      	str	r0, [sp, #24]
 8006136:	9107      	str	r1, [sp, #28]
 8006138:	9104      	str	r1, [sp, #16]
 800613a:	4809      	ldr	r0, [pc, #36]	; (8006160 <siprintf+0x38>)
 800613c:	4909      	ldr	r1, [pc, #36]	; (8006164 <siprintf+0x3c>)
 800613e:	cb04      	ldmia	r3!, {r2}
 8006140:	9105      	str	r1, [sp, #20]
 8006142:	6800      	ldr	r0, [r0, #0]
 8006144:	a902      	add	r1, sp, #8
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	f000 f9a2 	bl	8006490 <_svfiprintf_r>
 800614c:	2200      	movs	r2, #0
 800614e:	9b02      	ldr	r3, [sp, #8]
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	b01c      	add	sp, #112	; 0x70
 8006154:	bc08      	pop	{r3}
 8006156:	b003      	add	sp, #12
 8006158:	4718      	bx	r3
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	7fffffff 	.word	0x7fffffff
 8006160:	20000058 	.word	0x20000058
 8006164:	ffff0208 	.word	0xffff0208

08006168 <memset>:
 8006168:	0003      	movs	r3, r0
 800616a:	1882      	adds	r2, r0, r2
 800616c:	4293      	cmp	r3, r2
 800616e:	d100      	bne.n	8006172 <memset+0xa>
 8006170:	4770      	bx	lr
 8006172:	7019      	strb	r1, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	e7f9      	b.n	800616c <memset+0x4>

08006178 <__errno>:
 8006178:	4b01      	ldr	r3, [pc, #4]	; (8006180 <__errno+0x8>)
 800617a:	6818      	ldr	r0, [r3, #0]
 800617c:	4770      	bx	lr
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	20000058 	.word	0x20000058

08006184 <__libc_init_array>:
 8006184:	b570      	push	{r4, r5, r6, lr}
 8006186:	2600      	movs	r6, #0
 8006188:	4c0c      	ldr	r4, [pc, #48]	; (80061bc <__libc_init_array+0x38>)
 800618a:	4d0d      	ldr	r5, [pc, #52]	; (80061c0 <__libc_init_array+0x3c>)
 800618c:	1b64      	subs	r4, r4, r5
 800618e:	10a4      	asrs	r4, r4, #2
 8006190:	42a6      	cmp	r6, r4
 8006192:	d109      	bne.n	80061a8 <__libc_init_array+0x24>
 8006194:	2600      	movs	r6, #0
 8006196:	f000 fc6d 	bl	8006a74 <_init>
 800619a:	4c0a      	ldr	r4, [pc, #40]	; (80061c4 <__libc_init_array+0x40>)
 800619c:	4d0a      	ldr	r5, [pc, #40]	; (80061c8 <__libc_init_array+0x44>)
 800619e:	1b64      	subs	r4, r4, r5
 80061a0:	10a4      	asrs	r4, r4, #2
 80061a2:	42a6      	cmp	r6, r4
 80061a4:	d105      	bne.n	80061b2 <__libc_init_array+0x2e>
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
 80061a8:	00b3      	lsls	r3, r6, #2
 80061aa:	58eb      	ldr	r3, [r5, r3]
 80061ac:	4798      	blx	r3
 80061ae:	3601      	adds	r6, #1
 80061b0:	e7ee      	b.n	8006190 <__libc_init_array+0xc>
 80061b2:	00b3      	lsls	r3, r6, #2
 80061b4:	58eb      	ldr	r3, [r5, r3]
 80061b6:	4798      	blx	r3
 80061b8:	3601      	adds	r6, #1
 80061ba:	e7f2      	b.n	80061a2 <__libc_init_array+0x1e>
 80061bc:	08006c48 	.word	0x08006c48
 80061c0:	08006c48 	.word	0x08006c48
 80061c4:	08006c4c 	.word	0x08006c4c
 80061c8:	08006c48 	.word	0x08006c48

080061cc <__retarget_lock_acquire_recursive>:
 80061cc:	4770      	bx	lr

080061ce <__retarget_lock_release_recursive>:
 80061ce:	4770      	bx	lr

080061d0 <_free_r>:
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	0005      	movs	r5, r0
 80061d4:	2900      	cmp	r1, #0
 80061d6:	d010      	beq.n	80061fa <_free_r+0x2a>
 80061d8:	1f0c      	subs	r4, r1, #4
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da00      	bge.n	80061e2 <_free_r+0x12>
 80061e0:	18e4      	adds	r4, r4, r3
 80061e2:	0028      	movs	r0, r5
 80061e4:	f000 f8e2 	bl	80063ac <__malloc_lock>
 80061e8:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <_free_r+0x90>)
 80061ea:	6813      	ldr	r3, [r2, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <_free_r+0x2c>
 80061f0:	6063      	str	r3, [r4, #4]
 80061f2:	6014      	str	r4, [r2, #0]
 80061f4:	0028      	movs	r0, r5
 80061f6:	f000 f8e1 	bl	80063bc <__malloc_unlock>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d908      	bls.n	8006212 <_free_r+0x42>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	1821      	adds	r1, r4, r0
 8006204:	428b      	cmp	r3, r1
 8006206:	d1f3      	bne.n	80061f0 <_free_r+0x20>
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	1809      	adds	r1, r1, r0
 800620e:	6021      	str	r1, [r4, #0]
 8006210:	e7ee      	b.n	80061f0 <_free_r+0x20>
 8006212:	001a      	movs	r2, r3
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <_free_r+0x4e>
 800621a:	42a3      	cmp	r3, r4
 800621c:	d9f9      	bls.n	8006212 <_free_r+0x42>
 800621e:	6811      	ldr	r1, [r2, #0]
 8006220:	1850      	adds	r0, r2, r1
 8006222:	42a0      	cmp	r0, r4
 8006224:	d10b      	bne.n	800623e <_free_r+0x6e>
 8006226:	6820      	ldr	r0, [r4, #0]
 8006228:	1809      	adds	r1, r1, r0
 800622a:	1850      	adds	r0, r2, r1
 800622c:	6011      	str	r1, [r2, #0]
 800622e:	4283      	cmp	r3, r0
 8006230:	d1e0      	bne.n	80061f4 <_free_r+0x24>
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	1841      	adds	r1, r0, r1
 8006238:	6011      	str	r1, [r2, #0]
 800623a:	6053      	str	r3, [r2, #4]
 800623c:	e7da      	b.n	80061f4 <_free_r+0x24>
 800623e:	42a0      	cmp	r0, r4
 8006240:	d902      	bls.n	8006248 <_free_r+0x78>
 8006242:	230c      	movs	r3, #12
 8006244:	602b      	str	r3, [r5, #0]
 8006246:	e7d5      	b.n	80061f4 <_free_r+0x24>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	1821      	adds	r1, r4, r0
 800624c:	428b      	cmp	r3, r1
 800624e:	d103      	bne.n	8006258 <_free_r+0x88>
 8006250:	6819      	ldr	r1, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	1809      	adds	r1, r1, r0
 8006256:	6021      	str	r1, [r4, #0]
 8006258:	6063      	str	r3, [r4, #4]
 800625a:	6054      	str	r4, [r2, #4]
 800625c:	e7ca      	b.n	80061f4 <_free_r+0x24>
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	200003a8 	.word	0x200003a8

08006264 <sbrk_aligned>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	4e0f      	ldr	r6, [pc, #60]	; (80062a4 <sbrk_aligned+0x40>)
 8006268:	000d      	movs	r5, r1
 800626a:	6831      	ldr	r1, [r6, #0]
 800626c:	0004      	movs	r4, r0
 800626e:	2900      	cmp	r1, #0
 8006270:	d102      	bne.n	8006278 <sbrk_aligned+0x14>
 8006272:	f000 fba1 	bl	80069b8 <_sbrk_r>
 8006276:	6030      	str	r0, [r6, #0]
 8006278:	0029      	movs	r1, r5
 800627a:	0020      	movs	r0, r4
 800627c:	f000 fb9c 	bl	80069b8 <_sbrk_r>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d00a      	beq.n	800629a <sbrk_aligned+0x36>
 8006284:	2303      	movs	r3, #3
 8006286:	1cc5      	adds	r5, r0, #3
 8006288:	439d      	bics	r5, r3
 800628a:	42a8      	cmp	r0, r5
 800628c:	d007      	beq.n	800629e <sbrk_aligned+0x3a>
 800628e:	1a29      	subs	r1, r5, r0
 8006290:	0020      	movs	r0, r4
 8006292:	f000 fb91 	bl	80069b8 <_sbrk_r>
 8006296:	3001      	adds	r0, #1
 8006298:	d101      	bne.n	800629e <sbrk_aligned+0x3a>
 800629a:	2501      	movs	r5, #1
 800629c:	426d      	negs	r5, r5
 800629e:	0028      	movs	r0, r5
 80062a0:	bd70      	pop	{r4, r5, r6, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	200003ac 	.word	0x200003ac

080062a8 <_malloc_r>:
 80062a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062aa:	2203      	movs	r2, #3
 80062ac:	1ccb      	adds	r3, r1, #3
 80062ae:	4393      	bics	r3, r2
 80062b0:	3308      	adds	r3, #8
 80062b2:	0006      	movs	r6, r0
 80062b4:	001f      	movs	r7, r3
 80062b6:	2b0c      	cmp	r3, #12
 80062b8:	d238      	bcs.n	800632c <_malloc_r+0x84>
 80062ba:	270c      	movs	r7, #12
 80062bc:	42b9      	cmp	r1, r7
 80062be:	d837      	bhi.n	8006330 <_malloc_r+0x88>
 80062c0:	0030      	movs	r0, r6
 80062c2:	f000 f873 	bl	80063ac <__malloc_lock>
 80062c6:	4b38      	ldr	r3, [pc, #224]	; (80063a8 <_malloc_r+0x100>)
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	001c      	movs	r4, r3
 80062ce:	2c00      	cmp	r4, #0
 80062d0:	d133      	bne.n	800633a <_malloc_r+0x92>
 80062d2:	0039      	movs	r1, r7
 80062d4:	0030      	movs	r0, r6
 80062d6:	f7ff ffc5 	bl	8006264 <sbrk_aligned>
 80062da:	0004      	movs	r4, r0
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d15e      	bne.n	800639e <_malloc_r+0xf6>
 80062e0:	9b00      	ldr	r3, [sp, #0]
 80062e2:	681c      	ldr	r4, [r3, #0]
 80062e4:	0025      	movs	r5, r4
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	d14e      	bne.n	8006388 <_malloc_r+0xe0>
 80062ea:	2c00      	cmp	r4, #0
 80062ec:	d051      	beq.n	8006392 <_malloc_r+0xea>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	0029      	movs	r1, r5
 80062f2:	18e3      	adds	r3, r4, r3
 80062f4:	0030      	movs	r0, r6
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	f000 fb5e 	bl	80069b8 <_sbrk_r>
 80062fc:	9b01      	ldr	r3, [sp, #4]
 80062fe:	4283      	cmp	r3, r0
 8006300:	d147      	bne.n	8006392 <_malloc_r+0xea>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	0030      	movs	r0, r6
 8006306:	1aff      	subs	r7, r7, r3
 8006308:	0039      	movs	r1, r7
 800630a:	f7ff ffab 	bl	8006264 <sbrk_aligned>
 800630e:	3001      	adds	r0, #1
 8006310:	d03f      	beq.n	8006392 <_malloc_r+0xea>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	19db      	adds	r3, r3, r7
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	9b00      	ldr	r3, [sp, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d040      	beq.n	80063a2 <_malloc_r+0xfa>
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	42a2      	cmp	r2, r4
 8006324:	d133      	bne.n	800638e <_malloc_r+0xe6>
 8006326:	2200      	movs	r2, #0
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	e014      	b.n	8006356 <_malloc_r+0xae>
 800632c:	2b00      	cmp	r3, #0
 800632e:	dac5      	bge.n	80062bc <_malloc_r+0x14>
 8006330:	230c      	movs	r3, #12
 8006332:	2500      	movs	r5, #0
 8006334:	6033      	str	r3, [r6, #0]
 8006336:	0028      	movs	r0, r5
 8006338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800633a:	6821      	ldr	r1, [r4, #0]
 800633c:	1bc9      	subs	r1, r1, r7
 800633e:	d420      	bmi.n	8006382 <_malloc_r+0xda>
 8006340:	290b      	cmp	r1, #11
 8006342:	d918      	bls.n	8006376 <_malloc_r+0xce>
 8006344:	19e2      	adds	r2, r4, r7
 8006346:	6027      	str	r7, [r4, #0]
 8006348:	42a3      	cmp	r3, r4
 800634a:	d112      	bne.n	8006372 <_malloc_r+0xca>
 800634c:	9b00      	ldr	r3, [sp, #0]
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	6011      	str	r1, [r2, #0]
 8006354:	6053      	str	r3, [r2, #4]
 8006356:	0030      	movs	r0, r6
 8006358:	0025      	movs	r5, r4
 800635a:	f000 f82f 	bl	80063bc <__malloc_unlock>
 800635e:	2207      	movs	r2, #7
 8006360:	350b      	adds	r5, #11
 8006362:	1d23      	adds	r3, r4, #4
 8006364:	4395      	bics	r5, r2
 8006366:	1aea      	subs	r2, r5, r3
 8006368:	429d      	cmp	r5, r3
 800636a:	d0e4      	beq.n	8006336 <_malloc_r+0x8e>
 800636c:	1b5b      	subs	r3, r3, r5
 800636e:	50a3      	str	r3, [r4, r2]
 8006370:	e7e1      	b.n	8006336 <_malloc_r+0x8e>
 8006372:	605a      	str	r2, [r3, #4]
 8006374:	e7ec      	b.n	8006350 <_malloc_r+0xa8>
 8006376:	6862      	ldr	r2, [r4, #4]
 8006378:	42a3      	cmp	r3, r4
 800637a:	d1d5      	bne.n	8006328 <_malloc_r+0x80>
 800637c:	9b00      	ldr	r3, [sp, #0]
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e7e9      	b.n	8006356 <_malloc_r+0xae>
 8006382:	0023      	movs	r3, r4
 8006384:	6864      	ldr	r4, [r4, #4]
 8006386:	e7a2      	b.n	80062ce <_malloc_r+0x26>
 8006388:	002c      	movs	r4, r5
 800638a:	686d      	ldr	r5, [r5, #4]
 800638c:	e7ab      	b.n	80062e6 <_malloc_r+0x3e>
 800638e:	0013      	movs	r3, r2
 8006390:	e7c4      	b.n	800631c <_malloc_r+0x74>
 8006392:	230c      	movs	r3, #12
 8006394:	0030      	movs	r0, r6
 8006396:	6033      	str	r3, [r6, #0]
 8006398:	f000 f810 	bl	80063bc <__malloc_unlock>
 800639c:	e7cb      	b.n	8006336 <_malloc_r+0x8e>
 800639e:	6027      	str	r7, [r4, #0]
 80063a0:	e7d9      	b.n	8006356 <_malloc_r+0xae>
 80063a2:	605b      	str	r3, [r3, #4]
 80063a4:	deff      	udf	#255	; 0xff
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	200003a8 	.word	0x200003a8

080063ac <__malloc_lock>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4802      	ldr	r0, [pc, #8]	; (80063b8 <__malloc_lock+0xc>)
 80063b0:	f7ff ff0c 	bl	80061cc <__retarget_lock_acquire_recursive>
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	200003a4 	.word	0x200003a4

080063bc <__malloc_unlock>:
 80063bc:	b510      	push	{r4, lr}
 80063be:	4802      	ldr	r0, [pc, #8]	; (80063c8 <__malloc_unlock+0xc>)
 80063c0:	f7ff ff05 	bl	80061ce <__retarget_lock_release_recursive>
 80063c4:	bd10      	pop	{r4, pc}
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	200003a4 	.word	0x200003a4

080063cc <__ssputs_r>:
 80063cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ce:	b085      	sub	sp, #20
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	9203      	str	r2, [sp, #12]
 80063d4:	688e      	ldr	r6, [r1, #8]
 80063d6:	9a01      	ldr	r2, [sp, #4]
 80063d8:	0007      	movs	r7, r0
 80063da:	000c      	movs	r4, r1
 80063dc:	680b      	ldr	r3, [r1, #0]
 80063de:	4296      	cmp	r6, r2
 80063e0:	d831      	bhi.n	8006446 <__ssputs_r+0x7a>
 80063e2:	898a      	ldrh	r2, [r1, #12]
 80063e4:	2190      	movs	r1, #144	; 0x90
 80063e6:	00c9      	lsls	r1, r1, #3
 80063e8:	420a      	tst	r2, r1
 80063ea:	d029      	beq.n	8006440 <__ssputs_r+0x74>
 80063ec:	2003      	movs	r0, #3
 80063ee:	6921      	ldr	r1, [r4, #16]
 80063f0:	1a5b      	subs	r3, r3, r1
 80063f2:	9302      	str	r3, [sp, #8]
 80063f4:	6963      	ldr	r3, [r4, #20]
 80063f6:	4343      	muls	r3, r0
 80063f8:	0fdd      	lsrs	r5, r3, #31
 80063fa:	18ed      	adds	r5, r5, r3
 80063fc:	9b01      	ldr	r3, [sp, #4]
 80063fe:	9802      	ldr	r0, [sp, #8]
 8006400:	3301      	adds	r3, #1
 8006402:	181b      	adds	r3, r3, r0
 8006404:	106d      	asrs	r5, r5, #1
 8006406:	42ab      	cmp	r3, r5
 8006408:	d900      	bls.n	800640c <__ssputs_r+0x40>
 800640a:	001d      	movs	r5, r3
 800640c:	0552      	lsls	r2, r2, #21
 800640e:	d529      	bpl.n	8006464 <__ssputs_r+0x98>
 8006410:	0029      	movs	r1, r5
 8006412:	0038      	movs	r0, r7
 8006414:	f7ff ff48 	bl	80062a8 <_malloc_r>
 8006418:	1e06      	subs	r6, r0, #0
 800641a:	d02d      	beq.n	8006478 <__ssputs_r+0xac>
 800641c:	9a02      	ldr	r2, [sp, #8]
 800641e:	6921      	ldr	r1, [r4, #16]
 8006420:	f000 fae7 	bl	80069f2 <memcpy>
 8006424:	89a2      	ldrh	r2, [r4, #12]
 8006426:	4b19      	ldr	r3, [pc, #100]	; (800648c <__ssputs_r+0xc0>)
 8006428:	401a      	ands	r2, r3
 800642a:	2380      	movs	r3, #128	; 0x80
 800642c:	4313      	orrs	r3, r2
 800642e:	81a3      	strh	r3, [r4, #12]
 8006430:	9b02      	ldr	r3, [sp, #8]
 8006432:	6126      	str	r6, [r4, #16]
 8006434:	18f6      	adds	r6, r6, r3
 8006436:	6026      	str	r6, [r4, #0]
 8006438:	6165      	str	r5, [r4, #20]
 800643a:	9e01      	ldr	r6, [sp, #4]
 800643c:	1aed      	subs	r5, r5, r3
 800643e:	60a5      	str	r5, [r4, #8]
 8006440:	9b01      	ldr	r3, [sp, #4]
 8006442:	429e      	cmp	r6, r3
 8006444:	d900      	bls.n	8006448 <__ssputs_r+0x7c>
 8006446:	9e01      	ldr	r6, [sp, #4]
 8006448:	0032      	movs	r2, r6
 800644a:	9903      	ldr	r1, [sp, #12]
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	f000 fa9f 	bl	8006990 <memmove>
 8006452:	2000      	movs	r0, #0
 8006454:	68a3      	ldr	r3, [r4, #8]
 8006456:	1b9b      	subs	r3, r3, r6
 8006458:	60a3      	str	r3, [r4, #8]
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	199b      	adds	r3, r3, r6
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	b005      	add	sp, #20
 8006462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006464:	002a      	movs	r2, r5
 8006466:	0038      	movs	r0, r7
 8006468:	f000 facc 	bl	8006a04 <_realloc_r>
 800646c:	1e06      	subs	r6, r0, #0
 800646e:	d1df      	bne.n	8006430 <__ssputs_r+0x64>
 8006470:	0038      	movs	r0, r7
 8006472:	6921      	ldr	r1, [r4, #16]
 8006474:	f7ff feac 	bl	80061d0 <_free_r>
 8006478:	230c      	movs	r3, #12
 800647a:	2001      	movs	r0, #1
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	89a2      	ldrh	r2, [r4, #12]
 8006480:	3334      	adds	r3, #52	; 0x34
 8006482:	4313      	orrs	r3, r2
 8006484:	81a3      	strh	r3, [r4, #12]
 8006486:	4240      	negs	r0, r0
 8006488:	e7ea      	b.n	8006460 <__ssputs_r+0x94>
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	fffffb7f 	.word	0xfffffb7f

08006490 <_svfiprintf_r>:
 8006490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006492:	b0a1      	sub	sp, #132	; 0x84
 8006494:	9003      	str	r0, [sp, #12]
 8006496:	001d      	movs	r5, r3
 8006498:	898b      	ldrh	r3, [r1, #12]
 800649a:	000f      	movs	r7, r1
 800649c:	0016      	movs	r6, r2
 800649e:	061b      	lsls	r3, r3, #24
 80064a0:	d511      	bpl.n	80064c6 <_svfiprintf_r+0x36>
 80064a2:	690b      	ldr	r3, [r1, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10e      	bne.n	80064c6 <_svfiprintf_r+0x36>
 80064a8:	2140      	movs	r1, #64	; 0x40
 80064aa:	f7ff fefd 	bl	80062a8 <_malloc_r>
 80064ae:	6038      	str	r0, [r7, #0]
 80064b0:	6138      	str	r0, [r7, #16]
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d105      	bne.n	80064c2 <_svfiprintf_r+0x32>
 80064b6:	230c      	movs	r3, #12
 80064b8:	9a03      	ldr	r2, [sp, #12]
 80064ba:	3801      	subs	r0, #1
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	b021      	add	sp, #132	; 0x84
 80064c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c2:	2340      	movs	r3, #64	; 0x40
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	2300      	movs	r3, #0
 80064c8:	ac08      	add	r4, sp, #32
 80064ca:	6163      	str	r3, [r4, #20]
 80064cc:	3320      	adds	r3, #32
 80064ce:	7663      	strb	r3, [r4, #25]
 80064d0:	3310      	adds	r3, #16
 80064d2:	76a3      	strb	r3, [r4, #26]
 80064d4:	9507      	str	r5, [sp, #28]
 80064d6:	0035      	movs	r5, r6
 80064d8:	782b      	ldrb	r3, [r5, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <_svfiprintf_r+0x52>
 80064de:	2b25      	cmp	r3, #37	; 0x25
 80064e0:	d148      	bne.n	8006574 <_svfiprintf_r+0xe4>
 80064e2:	1bab      	subs	r3, r5, r6
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	42b5      	cmp	r5, r6
 80064e8:	d00b      	beq.n	8006502 <_svfiprintf_r+0x72>
 80064ea:	0032      	movs	r2, r6
 80064ec:	0039      	movs	r1, r7
 80064ee:	9803      	ldr	r0, [sp, #12]
 80064f0:	f7ff ff6c 	bl	80063cc <__ssputs_r>
 80064f4:	3001      	adds	r0, #1
 80064f6:	d100      	bne.n	80064fa <_svfiprintf_r+0x6a>
 80064f8:	e0af      	b.n	800665a <_svfiprintf_r+0x1ca>
 80064fa:	6963      	ldr	r3, [r4, #20]
 80064fc:	9a05      	ldr	r2, [sp, #20]
 80064fe:	189b      	adds	r3, r3, r2
 8006500:	6163      	str	r3, [r4, #20]
 8006502:	782b      	ldrb	r3, [r5, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d100      	bne.n	800650a <_svfiprintf_r+0x7a>
 8006508:	e0a7      	b.n	800665a <_svfiprintf_r+0x1ca>
 800650a:	2201      	movs	r2, #1
 800650c:	2300      	movs	r3, #0
 800650e:	4252      	negs	r2, r2
 8006510:	6062      	str	r2, [r4, #4]
 8006512:	a904      	add	r1, sp, #16
 8006514:	3254      	adds	r2, #84	; 0x54
 8006516:	1852      	adds	r2, r2, r1
 8006518:	1c6e      	adds	r6, r5, #1
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	60e3      	str	r3, [r4, #12]
 800651e:	60a3      	str	r3, [r4, #8]
 8006520:	7013      	strb	r3, [r2, #0]
 8006522:	65a3      	str	r3, [r4, #88]	; 0x58
 8006524:	4b55      	ldr	r3, [pc, #340]	; (800667c <_svfiprintf_r+0x1ec>)
 8006526:	2205      	movs	r2, #5
 8006528:	0018      	movs	r0, r3
 800652a:	7831      	ldrb	r1, [r6, #0]
 800652c:	9305      	str	r3, [sp, #20]
 800652e:	f000 fa55 	bl	80069dc <memchr>
 8006532:	1c75      	adds	r5, r6, #1
 8006534:	2800      	cmp	r0, #0
 8006536:	d11f      	bne.n	8006578 <_svfiprintf_r+0xe8>
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	06d3      	lsls	r3, r2, #27
 800653c:	d504      	bpl.n	8006548 <_svfiprintf_r+0xb8>
 800653e:	2353      	movs	r3, #83	; 0x53
 8006540:	a904      	add	r1, sp, #16
 8006542:	185b      	adds	r3, r3, r1
 8006544:	2120      	movs	r1, #32
 8006546:	7019      	strb	r1, [r3, #0]
 8006548:	0713      	lsls	r3, r2, #28
 800654a:	d504      	bpl.n	8006556 <_svfiprintf_r+0xc6>
 800654c:	2353      	movs	r3, #83	; 0x53
 800654e:	a904      	add	r1, sp, #16
 8006550:	185b      	adds	r3, r3, r1
 8006552:	212b      	movs	r1, #43	; 0x2b
 8006554:	7019      	strb	r1, [r3, #0]
 8006556:	7833      	ldrb	r3, [r6, #0]
 8006558:	2b2a      	cmp	r3, #42	; 0x2a
 800655a:	d016      	beq.n	800658a <_svfiprintf_r+0xfa>
 800655c:	0035      	movs	r5, r6
 800655e:	2100      	movs	r1, #0
 8006560:	200a      	movs	r0, #10
 8006562:	68e3      	ldr	r3, [r4, #12]
 8006564:	782a      	ldrb	r2, [r5, #0]
 8006566:	1c6e      	adds	r6, r5, #1
 8006568:	3a30      	subs	r2, #48	; 0x30
 800656a:	2a09      	cmp	r2, #9
 800656c:	d94e      	bls.n	800660c <_svfiprintf_r+0x17c>
 800656e:	2900      	cmp	r1, #0
 8006570:	d111      	bne.n	8006596 <_svfiprintf_r+0x106>
 8006572:	e017      	b.n	80065a4 <_svfiprintf_r+0x114>
 8006574:	3501      	adds	r5, #1
 8006576:	e7af      	b.n	80064d8 <_svfiprintf_r+0x48>
 8006578:	9b05      	ldr	r3, [sp, #20]
 800657a:	6822      	ldr	r2, [r4, #0]
 800657c:	1ac0      	subs	r0, r0, r3
 800657e:	2301      	movs	r3, #1
 8006580:	4083      	lsls	r3, r0
 8006582:	4313      	orrs	r3, r2
 8006584:	002e      	movs	r6, r5
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	e7cc      	b.n	8006524 <_svfiprintf_r+0x94>
 800658a:	9b07      	ldr	r3, [sp, #28]
 800658c:	1d19      	adds	r1, r3, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	9107      	str	r1, [sp, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	db01      	blt.n	800659a <_svfiprintf_r+0x10a>
 8006596:	930b      	str	r3, [sp, #44]	; 0x2c
 8006598:	e004      	b.n	80065a4 <_svfiprintf_r+0x114>
 800659a:	425b      	negs	r3, r3
 800659c:	60e3      	str	r3, [r4, #12]
 800659e:	2302      	movs	r3, #2
 80065a0:	4313      	orrs	r3, r2
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	782b      	ldrb	r3, [r5, #0]
 80065a6:	2b2e      	cmp	r3, #46	; 0x2e
 80065a8:	d10a      	bne.n	80065c0 <_svfiprintf_r+0x130>
 80065aa:	786b      	ldrb	r3, [r5, #1]
 80065ac:	2b2a      	cmp	r3, #42	; 0x2a
 80065ae:	d135      	bne.n	800661c <_svfiprintf_r+0x18c>
 80065b0:	9b07      	ldr	r3, [sp, #28]
 80065b2:	3502      	adds	r5, #2
 80065b4:	1d1a      	adds	r2, r3, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	9207      	str	r2, [sp, #28]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	db2b      	blt.n	8006616 <_svfiprintf_r+0x186>
 80065be:	9309      	str	r3, [sp, #36]	; 0x24
 80065c0:	4e2f      	ldr	r6, [pc, #188]	; (8006680 <_svfiprintf_r+0x1f0>)
 80065c2:	2203      	movs	r2, #3
 80065c4:	0030      	movs	r0, r6
 80065c6:	7829      	ldrb	r1, [r5, #0]
 80065c8:	f000 fa08 	bl	80069dc <memchr>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d006      	beq.n	80065de <_svfiprintf_r+0x14e>
 80065d0:	2340      	movs	r3, #64	; 0x40
 80065d2:	1b80      	subs	r0, r0, r6
 80065d4:	4083      	lsls	r3, r0
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	3501      	adds	r5, #1
 80065da:	4313      	orrs	r3, r2
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	7829      	ldrb	r1, [r5, #0]
 80065e0:	2206      	movs	r2, #6
 80065e2:	4828      	ldr	r0, [pc, #160]	; (8006684 <_svfiprintf_r+0x1f4>)
 80065e4:	1c6e      	adds	r6, r5, #1
 80065e6:	7621      	strb	r1, [r4, #24]
 80065e8:	f000 f9f8 	bl	80069dc <memchr>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d03c      	beq.n	800666a <_svfiprintf_r+0x1da>
 80065f0:	4b25      	ldr	r3, [pc, #148]	; (8006688 <_svfiprintf_r+0x1f8>)
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d125      	bne.n	8006642 <_svfiprintf_r+0x1b2>
 80065f6:	2207      	movs	r2, #7
 80065f8:	9b07      	ldr	r3, [sp, #28]
 80065fa:	3307      	adds	r3, #7
 80065fc:	4393      	bics	r3, r2
 80065fe:	3308      	adds	r3, #8
 8006600:	9307      	str	r3, [sp, #28]
 8006602:	6963      	ldr	r3, [r4, #20]
 8006604:	9a04      	ldr	r2, [sp, #16]
 8006606:	189b      	adds	r3, r3, r2
 8006608:	6163      	str	r3, [r4, #20]
 800660a:	e764      	b.n	80064d6 <_svfiprintf_r+0x46>
 800660c:	4343      	muls	r3, r0
 800660e:	0035      	movs	r5, r6
 8006610:	2101      	movs	r1, #1
 8006612:	189b      	adds	r3, r3, r2
 8006614:	e7a6      	b.n	8006564 <_svfiprintf_r+0xd4>
 8006616:	2301      	movs	r3, #1
 8006618:	425b      	negs	r3, r3
 800661a:	e7d0      	b.n	80065be <_svfiprintf_r+0x12e>
 800661c:	2300      	movs	r3, #0
 800661e:	200a      	movs	r0, #10
 8006620:	001a      	movs	r2, r3
 8006622:	3501      	adds	r5, #1
 8006624:	6063      	str	r3, [r4, #4]
 8006626:	7829      	ldrb	r1, [r5, #0]
 8006628:	1c6e      	adds	r6, r5, #1
 800662a:	3930      	subs	r1, #48	; 0x30
 800662c:	2909      	cmp	r1, #9
 800662e:	d903      	bls.n	8006638 <_svfiprintf_r+0x1a8>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0c5      	beq.n	80065c0 <_svfiprintf_r+0x130>
 8006634:	9209      	str	r2, [sp, #36]	; 0x24
 8006636:	e7c3      	b.n	80065c0 <_svfiprintf_r+0x130>
 8006638:	4342      	muls	r2, r0
 800663a:	0035      	movs	r5, r6
 800663c:	2301      	movs	r3, #1
 800663e:	1852      	adds	r2, r2, r1
 8006640:	e7f1      	b.n	8006626 <_svfiprintf_r+0x196>
 8006642:	aa07      	add	r2, sp, #28
 8006644:	9200      	str	r2, [sp, #0]
 8006646:	0021      	movs	r1, r4
 8006648:	003a      	movs	r2, r7
 800664a:	4b10      	ldr	r3, [pc, #64]	; (800668c <_svfiprintf_r+0x1fc>)
 800664c:	9803      	ldr	r0, [sp, #12]
 800664e:	e000      	b.n	8006652 <_svfiprintf_r+0x1c2>
 8006650:	bf00      	nop
 8006652:	9004      	str	r0, [sp, #16]
 8006654:	9b04      	ldr	r3, [sp, #16]
 8006656:	3301      	adds	r3, #1
 8006658:	d1d3      	bne.n	8006602 <_svfiprintf_r+0x172>
 800665a:	89bb      	ldrh	r3, [r7, #12]
 800665c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800665e:	065b      	lsls	r3, r3, #25
 8006660:	d400      	bmi.n	8006664 <_svfiprintf_r+0x1d4>
 8006662:	e72c      	b.n	80064be <_svfiprintf_r+0x2e>
 8006664:	2001      	movs	r0, #1
 8006666:	4240      	negs	r0, r0
 8006668:	e729      	b.n	80064be <_svfiprintf_r+0x2e>
 800666a:	aa07      	add	r2, sp, #28
 800666c:	9200      	str	r2, [sp, #0]
 800666e:	0021      	movs	r1, r4
 8006670:	003a      	movs	r2, r7
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <_svfiprintf_r+0x1fc>)
 8006674:	9803      	ldr	r0, [sp, #12]
 8006676:	f000 f87b 	bl	8006770 <_printf_i>
 800667a:	e7ea      	b.n	8006652 <_svfiprintf_r+0x1c2>
 800667c:	08006c0c 	.word	0x08006c0c
 8006680:	08006c12 	.word	0x08006c12
 8006684:	08006c16 	.word	0x08006c16
 8006688:	00000000 	.word	0x00000000
 800668c:	080063cd 	.word	0x080063cd

08006690 <_printf_common>:
 8006690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006692:	0016      	movs	r6, r2
 8006694:	9301      	str	r3, [sp, #4]
 8006696:	688a      	ldr	r2, [r1, #8]
 8006698:	690b      	ldr	r3, [r1, #16]
 800669a:	000c      	movs	r4, r1
 800669c:	9000      	str	r0, [sp, #0]
 800669e:	4293      	cmp	r3, r2
 80066a0:	da00      	bge.n	80066a4 <_printf_common+0x14>
 80066a2:	0013      	movs	r3, r2
 80066a4:	0022      	movs	r2, r4
 80066a6:	6033      	str	r3, [r6, #0]
 80066a8:	3243      	adds	r2, #67	; 0x43
 80066aa:	7812      	ldrb	r2, [r2, #0]
 80066ac:	2a00      	cmp	r2, #0
 80066ae:	d001      	beq.n	80066b4 <_printf_common+0x24>
 80066b0:	3301      	adds	r3, #1
 80066b2:	6033      	str	r3, [r6, #0]
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	069b      	lsls	r3, r3, #26
 80066b8:	d502      	bpl.n	80066c0 <_printf_common+0x30>
 80066ba:	6833      	ldr	r3, [r6, #0]
 80066bc:	3302      	adds	r3, #2
 80066be:	6033      	str	r3, [r6, #0]
 80066c0:	6822      	ldr	r2, [r4, #0]
 80066c2:	2306      	movs	r3, #6
 80066c4:	0015      	movs	r5, r2
 80066c6:	401d      	ands	r5, r3
 80066c8:	421a      	tst	r2, r3
 80066ca:	d027      	beq.n	800671c <_printf_common+0x8c>
 80066cc:	0023      	movs	r3, r4
 80066ce:	3343      	adds	r3, #67	; 0x43
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	1e5a      	subs	r2, r3, #1
 80066d4:	4193      	sbcs	r3, r2
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	0692      	lsls	r2, r2, #26
 80066da:	d430      	bmi.n	800673e <_printf_common+0xae>
 80066dc:	0022      	movs	r2, r4
 80066de:	9901      	ldr	r1, [sp, #4]
 80066e0:	9800      	ldr	r0, [sp, #0]
 80066e2:	9d08      	ldr	r5, [sp, #32]
 80066e4:	3243      	adds	r2, #67	; 0x43
 80066e6:	47a8      	blx	r5
 80066e8:	3001      	adds	r0, #1
 80066ea:	d025      	beq.n	8006738 <_printf_common+0xa8>
 80066ec:	2206      	movs	r2, #6
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	2500      	movs	r5, #0
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d105      	bne.n	8006704 <_printf_common+0x74>
 80066f8:	6833      	ldr	r3, [r6, #0]
 80066fa:	68e5      	ldr	r5, [r4, #12]
 80066fc:	1aed      	subs	r5, r5, r3
 80066fe:	43eb      	mvns	r3, r5
 8006700:	17db      	asrs	r3, r3, #31
 8006702:	401d      	ands	r5, r3
 8006704:	68a3      	ldr	r3, [r4, #8]
 8006706:	6922      	ldr	r2, [r4, #16]
 8006708:	4293      	cmp	r3, r2
 800670a:	dd01      	ble.n	8006710 <_printf_common+0x80>
 800670c:	1a9b      	subs	r3, r3, r2
 800670e:	18ed      	adds	r5, r5, r3
 8006710:	2600      	movs	r6, #0
 8006712:	42b5      	cmp	r5, r6
 8006714:	d120      	bne.n	8006758 <_printf_common+0xc8>
 8006716:	2000      	movs	r0, #0
 8006718:	e010      	b.n	800673c <_printf_common+0xac>
 800671a:	3501      	adds	r5, #1
 800671c:	68e3      	ldr	r3, [r4, #12]
 800671e:	6832      	ldr	r2, [r6, #0]
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	42ab      	cmp	r3, r5
 8006724:	ddd2      	ble.n	80066cc <_printf_common+0x3c>
 8006726:	0022      	movs	r2, r4
 8006728:	2301      	movs	r3, #1
 800672a:	9901      	ldr	r1, [sp, #4]
 800672c:	9800      	ldr	r0, [sp, #0]
 800672e:	9f08      	ldr	r7, [sp, #32]
 8006730:	3219      	adds	r2, #25
 8006732:	47b8      	blx	r7
 8006734:	3001      	adds	r0, #1
 8006736:	d1f0      	bne.n	800671a <_printf_common+0x8a>
 8006738:	2001      	movs	r0, #1
 800673a:	4240      	negs	r0, r0
 800673c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800673e:	2030      	movs	r0, #48	; 0x30
 8006740:	18e1      	adds	r1, r4, r3
 8006742:	3143      	adds	r1, #67	; 0x43
 8006744:	7008      	strb	r0, [r1, #0]
 8006746:	0021      	movs	r1, r4
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	3145      	adds	r1, #69	; 0x45
 800674c:	7809      	ldrb	r1, [r1, #0]
 800674e:	18a2      	adds	r2, r4, r2
 8006750:	3243      	adds	r2, #67	; 0x43
 8006752:	3302      	adds	r3, #2
 8006754:	7011      	strb	r1, [r2, #0]
 8006756:	e7c1      	b.n	80066dc <_printf_common+0x4c>
 8006758:	0022      	movs	r2, r4
 800675a:	2301      	movs	r3, #1
 800675c:	9901      	ldr	r1, [sp, #4]
 800675e:	9800      	ldr	r0, [sp, #0]
 8006760:	9f08      	ldr	r7, [sp, #32]
 8006762:	321a      	adds	r2, #26
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	d0e6      	beq.n	8006738 <_printf_common+0xa8>
 800676a:	3601      	adds	r6, #1
 800676c:	e7d1      	b.n	8006712 <_printf_common+0x82>
	...

08006770 <_printf_i>:
 8006770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006772:	b08b      	sub	sp, #44	; 0x2c
 8006774:	9206      	str	r2, [sp, #24]
 8006776:	000a      	movs	r2, r1
 8006778:	3243      	adds	r2, #67	; 0x43
 800677a:	9307      	str	r3, [sp, #28]
 800677c:	9005      	str	r0, [sp, #20]
 800677e:	9204      	str	r2, [sp, #16]
 8006780:	7e0a      	ldrb	r2, [r1, #24]
 8006782:	000c      	movs	r4, r1
 8006784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006786:	2a78      	cmp	r2, #120	; 0x78
 8006788:	d809      	bhi.n	800679e <_printf_i+0x2e>
 800678a:	2a62      	cmp	r2, #98	; 0x62
 800678c:	d80b      	bhi.n	80067a6 <_printf_i+0x36>
 800678e:	2a00      	cmp	r2, #0
 8006790:	d100      	bne.n	8006794 <_printf_i+0x24>
 8006792:	e0be      	b.n	8006912 <_printf_i+0x1a2>
 8006794:	497c      	ldr	r1, [pc, #496]	; (8006988 <_printf_i+0x218>)
 8006796:	9103      	str	r1, [sp, #12]
 8006798:	2a58      	cmp	r2, #88	; 0x58
 800679a:	d100      	bne.n	800679e <_printf_i+0x2e>
 800679c:	e093      	b.n	80068c6 <_printf_i+0x156>
 800679e:	0026      	movs	r6, r4
 80067a0:	3642      	adds	r6, #66	; 0x42
 80067a2:	7032      	strb	r2, [r6, #0]
 80067a4:	e022      	b.n	80067ec <_printf_i+0x7c>
 80067a6:	0010      	movs	r0, r2
 80067a8:	3863      	subs	r0, #99	; 0x63
 80067aa:	2815      	cmp	r0, #21
 80067ac:	d8f7      	bhi.n	800679e <_printf_i+0x2e>
 80067ae:	f7f9 fcb1 	bl	8000114 <__gnu_thumb1_case_shi>
 80067b2:	0016      	.short	0x0016
 80067b4:	fff6001f 	.word	0xfff6001f
 80067b8:	fff6fff6 	.word	0xfff6fff6
 80067bc:	001ffff6 	.word	0x001ffff6
 80067c0:	fff6fff6 	.word	0xfff6fff6
 80067c4:	fff6fff6 	.word	0xfff6fff6
 80067c8:	003600a3 	.word	0x003600a3
 80067cc:	fff60083 	.word	0xfff60083
 80067d0:	00b4fff6 	.word	0x00b4fff6
 80067d4:	0036fff6 	.word	0x0036fff6
 80067d8:	fff6fff6 	.word	0xfff6fff6
 80067dc:	0087      	.short	0x0087
 80067de:	0026      	movs	r6, r4
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	3642      	adds	r6, #66	; 0x42
 80067e4:	1d11      	adds	r1, r2, #4
 80067e6:	6019      	str	r1, [r3, #0]
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	7033      	strb	r3, [r6, #0]
 80067ec:	2301      	movs	r3, #1
 80067ee:	e0a2      	b.n	8006936 <_printf_i+0x1c6>
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	6809      	ldr	r1, [r1, #0]
 80067f4:	1d02      	adds	r2, r0, #4
 80067f6:	060d      	lsls	r5, r1, #24
 80067f8:	d50b      	bpl.n	8006812 <_printf_i+0xa2>
 80067fa:	6805      	ldr	r5, [r0, #0]
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	2d00      	cmp	r5, #0
 8006800:	da03      	bge.n	800680a <_printf_i+0x9a>
 8006802:	232d      	movs	r3, #45	; 0x2d
 8006804:	9a04      	ldr	r2, [sp, #16]
 8006806:	426d      	negs	r5, r5
 8006808:	7013      	strb	r3, [r2, #0]
 800680a:	4b5f      	ldr	r3, [pc, #380]	; (8006988 <_printf_i+0x218>)
 800680c:	270a      	movs	r7, #10
 800680e:	9303      	str	r3, [sp, #12]
 8006810:	e01b      	b.n	800684a <_printf_i+0xda>
 8006812:	6805      	ldr	r5, [r0, #0]
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	0649      	lsls	r1, r1, #25
 8006818:	d5f1      	bpl.n	80067fe <_printf_i+0x8e>
 800681a:	b22d      	sxth	r5, r5
 800681c:	e7ef      	b.n	80067fe <_printf_i+0x8e>
 800681e:	680d      	ldr	r5, [r1, #0]
 8006820:	6819      	ldr	r1, [r3, #0]
 8006822:	1d08      	adds	r0, r1, #4
 8006824:	6018      	str	r0, [r3, #0]
 8006826:	062e      	lsls	r6, r5, #24
 8006828:	d501      	bpl.n	800682e <_printf_i+0xbe>
 800682a:	680d      	ldr	r5, [r1, #0]
 800682c:	e003      	b.n	8006836 <_printf_i+0xc6>
 800682e:	066d      	lsls	r5, r5, #25
 8006830:	d5fb      	bpl.n	800682a <_printf_i+0xba>
 8006832:	680d      	ldr	r5, [r1, #0]
 8006834:	b2ad      	uxth	r5, r5
 8006836:	4b54      	ldr	r3, [pc, #336]	; (8006988 <_printf_i+0x218>)
 8006838:	2708      	movs	r7, #8
 800683a:	9303      	str	r3, [sp, #12]
 800683c:	2a6f      	cmp	r2, #111	; 0x6f
 800683e:	d000      	beq.n	8006842 <_printf_i+0xd2>
 8006840:	3702      	adds	r7, #2
 8006842:	0023      	movs	r3, r4
 8006844:	2200      	movs	r2, #0
 8006846:	3343      	adds	r3, #67	; 0x43
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	60a3      	str	r3, [r4, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	db03      	blt.n	800685a <_printf_i+0xea>
 8006852:	2104      	movs	r1, #4
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	438a      	bics	r2, r1
 8006858:	6022      	str	r2, [r4, #0]
 800685a:	2d00      	cmp	r5, #0
 800685c:	d102      	bne.n	8006864 <_printf_i+0xf4>
 800685e:	9e04      	ldr	r6, [sp, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00c      	beq.n	800687e <_printf_i+0x10e>
 8006864:	9e04      	ldr	r6, [sp, #16]
 8006866:	0028      	movs	r0, r5
 8006868:	0039      	movs	r1, r7
 800686a:	f7f9 fce3 	bl	8000234 <__aeabi_uidivmod>
 800686e:	9b03      	ldr	r3, [sp, #12]
 8006870:	3e01      	subs	r6, #1
 8006872:	5c5b      	ldrb	r3, [r3, r1]
 8006874:	7033      	strb	r3, [r6, #0]
 8006876:	002b      	movs	r3, r5
 8006878:	0005      	movs	r5, r0
 800687a:	429f      	cmp	r7, r3
 800687c:	d9f3      	bls.n	8006866 <_printf_i+0xf6>
 800687e:	2f08      	cmp	r7, #8
 8006880:	d109      	bne.n	8006896 <_printf_i+0x126>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	07db      	lsls	r3, r3, #31
 8006886:	d506      	bpl.n	8006896 <_printf_i+0x126>
 8006888:	6862      	ldr	r2, [r4, #4]
 800688a:	6923      	ldr	r3, [r4, #16]
 800688c:	429a      	cmp	r2, r3
 800688e:	dc02      	bgt.n	8006896 <_printf_i+0x126>
 8006890:	2330      	movs	r3, #48	; 0x30
 8006892:	3e01      	subs	r6, #1
 8006894:	7033      	strb	r3, [r6, #0]
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	1b9b      	subs	r3, r3, r6
 800689a:	6123      	str	r3, [r4, #16]
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	0021      	movs	r1, r4
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	9805      	ldr	r0, [sp, #20]
 80068a4:	9b06      	ldr	r3, [sp, #24]
 80068a6:	aa09      	add	r2, sp, #36	; 0x24
 80068a8:	f7ff fef2 	bl	8006690 <_printf_common>
 80068ac:	3001      	adds	r0, #1
 80068ae:	d147      	bne.n	8006940 <_printf_i+0x1d0>
 80068b0:	2001      	movs	r0, #1
 80068b2:	4240      	negs	r0, r0
 80068b4:	b00b      	add	sp, #44	; 0x2c
 80068b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b8:	2220      	movs	r2, #32
 80068ba:	6809      	ldr	r1, [r1, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	6022      	str	r2, [r4, #0]
 80068c0:	2278      	movs	r2, #120	; 0x78
 80068c2:	4932      	ldr	r1, [pc, #200]	; (800698c <_printf_i+0x21c>)
 80068c4:	9103      	str	r1, [sp, #12]
 80068c6:	0021      	movs	r1, r4
 80068c8:	3145      	adds	r1, #69	; 0x45
 80068ca:	700a      	strb	r2, [r1, #0]
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	c920      	ldmia	r1!, {r5}
 80068d2:	0610      	lsls	r0, r2, #24
 80068d4:	d402      	bmi.n	80068dc <_printf_i+0x16c>
 80068d6:	0650      	lsls	r0, r2, #25
 80068d8:	d500      	bpl.n	80068dc <_printf_i+0x16c>
 80068da:	b2ad      	uxth	r5, r5
 80068dc:	6019      	str	r1, [r3, #0]
 80068de:	07d3      	lsls	r3, r2, #31
 80068e0:	d502      	bpl.n	80068e8 <_printf_i+0x178>
 80068e2:	2320      	movs	r3, #32
 80068e4:	4313      	orrs	r3, r2
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	2710      	movs	r7, #16
 80068ea:	2d00      	cmp	r5, #0
 80068ec:	d1a9      	bne.n	8006842 <_printf_i+0xd2>
 80068ee:	2220      	movs	r2, #32
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	4393      	bics	r3, r2
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	e7a4      	b.n	8006842 <_printf_i+0xd2>
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	680d      	ldr	r5, [r1, #0]
 80068fc:	1d10      	adds	r0, r2, #4
 80068fe:	6949      	ldr	r1, [r1, #20]
 8006900:	6018      	str	r0, [r3, #0]
 8006902:	6813      	ldr	r3, [r2, #0]
 8006904:	062e      	lsls	r6, r5, #24
 8006906:	d501      	bpl.n	800690c <_printf_i+0x19c>
 8006908:	6019      	str	r1, [r3, #0]
 800690a:	e002      	b.n	8006912 <_printf_i+0x1a2>
 800690c:	066d      	lsls	r5, r5, #25
 800690e:	d5fb      	bpl.n	8006908 <_printf_i+0x198>
 8006910:	8019      	strh	r1, [r3, #0]
 8006912:	2300      	movs	r3, #0
 8006914:	9e04      	ldr	r6, [sp, #16]
 8006916:	6123      	str	r3, [r4, #16]
 8006918:	e7c0      	b.n	800689c <_printf_i+0x12c>
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	1d11      	adds	r1, r2, #4
 800691e:	6019      	str	r1, [r3, #0]
 8006920:	6816      	ldr	r6, [r2, #0]
 8006922:	2100      	movs	r1, #0
 8006924:	0030      	movs	r0, r6
 8006926:	6862      	ldr	r2, [r4, #4]
 8006928:	f000 f858 	bl	80069dc <memchr>
 800692c:	2800      	cmp	r0, #0
 800692e:	d001      	beq.n	8006934 <_printf_i+0x1c4>
 8006930:	1b80      	subs	r0, r0, r6
 8006932:	6060      	str	r0, [r4, #4]
 8006934:	6863      	ldr	r3, [r4, #4]
 8006936:	6123      	str	r3, [r4, #16]
 8006938:	2300      	movs	r3, #0
 800693a:	9a04      	ldr	r2, [sp, #16]
 800693c:	7013      	strb	r3, [r2, #0]
 800693e:	e7ad      	b.n	800689c <_printf_i+0x12c>
 8006940:	0032      	movs	r2, r6
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	9906      	ldr	r1, [sp, #24]
 8006946:	9805      	ldr	r0, [sp, #20]
 8006948:	9d07      	ldr	r5, [sp, #28]
 800694a:	47a8      	blx	r5
 800694c:	3001      	adds	r0, #1
 800694e:	d0af      	beq.n	80068b0 <_printf_i+0x140>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	079b      	lsls	r3, r3, #30
 8006954:	d415      	bmi.n	8006982 <_printf_i+0x212>
 8006956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006958:	68e0      	ldr	r0, [r4, #12]
 800695a:	4298      	cmp	r0, r3
 800695c:	daaa      	bge.n	80068b4 <_printf_i+0x144>
 800695e:	0018      	movs	r0, r3
 8006960:	e7a8      	b.n	80068b4 <_printf_i+0x144>
 8006962:	0022      	movs	r2, r4
 8006964:	2301      	movs	r3, #1
 8006966:	9906      	ldr	r1, [sp, #24]
 8006968:	9805      	ldr	r0, [sp, #20]
 800696a:	9e07      	ldr	r6, [sp, #28]
 800696c:	3219      	adds	r2, #25
 800696e:	47b0      	blx	r6
 8006970:	3001      	adds	r0, #1
 8006972:	d09d      	beq.n	80068b0 <_printf_i+0x140>
 8006974:	3501      	adds	r5, #1
 8006976:	68e3      	ldr	r3, [r4, #12]
 8006978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800697a:	1a9b      	subs	r3, r3, r2
 800697c:	42ab      	cmp	r3, r5
 800697e:	dcf0      	bgt.n	8006962 <_printf_i+0x1f2>
 8006980:	e7e9      	b.n	8006956 <_printf_i+0x1e6>
 8006982:	2500      	movs	r5, #0
 8006984:	e7f7      	b.n	8006976 <_printf_i+0x206>
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	08006c1d 	.word	0x08006c1d
 800698c:	08006c2e 	.word	0x08006c2e

08006990 <memmove>:
 8006990:	b510      	push	{r4, lr}
 8006992:	4288      	cmp	r0, r1
 8006994:	d902      	bls.n	800699c <memmove+0xc>
 8006996:	188b      	adds	r3, r1, r2
 8006998:	4298      	cmp	r0, r3
 800699a:	d303      	bcc.n	80069a4 <memmove+0x14>
 800699c:	2300      	movs	r3, #0
 800699e:	e007      	b.n	80069b0 <memmove+0x20>
 80069a0:	5c8b      	ldrb	r3, [r1, r2]
 80069a2:	5483      	strb	r3, [r0, r2]
 80069a4:	3a01      	subs	r2, #1
 80069a6:	d2fb      	bcs.n	80069a0 <memmove+0x10>
 80069a8:	bd10      	pop	{r4, pc}
 80069aa:	5ccc      	ldrb	r4, [r1, r3]
 80069ac:	54c4      	strb	r4, [r0, r3]
 80069ae:	3301      	adds	r3, #1
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d1fa      	bne.n	80069aa <memmove+0x1a>
 80069b4:	e7f8      	b.n	80069a8 <memmove+0x18>
	...

080069b8 <_sbrk_r>:
 80069b8:	2300      	movs	r3, #0
 80069ba:	b570      	push	{r4, r5, r6, lr}
 80069bc:	4d06      	ldr	r5, [pc, #24]	; (80069d8 <_sbrk_r+0x20>)
 80069be:	0004      	movs	r4, r0
 80069c0:	0008      	movs	r0, r1
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	f7fa fbfa 	bl	80011bc <_sbrk>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d103      	bne.n	80069d4 <_sbrk_r+0x1c>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d000      	beq.n	80069d4 <_sbrk_r+0x1c>
 80069d2:	6023      	str	r3, [r4, #0]
 80069d4:	bd70      	pop	{r4, r5, r6, pc}
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	200003a0 	.word	0x200003a0

080069dc <memchr>:
 80069dc:	b2c9      	uxtb	r1, r1
 80069de:	1882      	adds	r2, r0, r2
 80069e0:	4290      	cmp	r0, r2
 80069e2:	d101      	bne.n	80069e8 <memchr+0xc>
 80069e4:	2000      	movs	r0, #0
 80069e6:	4770      	bx	lr
 80069e8:	7803      	ldrb	r3, [r0, #0]
 80069ea:	428b      	cmp	r3, r1
 80069ec:	d0fb      	beq.n	80069e6 <memchr+0xa>
 80069ee:	3001      	adds	r0, #1
 80069f0:	e7f6      	b.n	80069e0 <memchr+0x4>

080069f2 <memcpy>:
 80069f2:	2300      	movs	r3, #0
 80069f4:	b510      	push	{r4, lr}
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d100      	bne.n	80069fc <memcpy+0xa>
 80069fa:	bd10      	pop	{r4, pc}
 80069fc:	5ccc      	ldrb	r4, [r1, r3]
 80069fe:	54c4      	strb	r4, [r0, r3]
 8006a00:	3301      	adds	r3, #1
 8006a02:	e7f8      	b.n	80069f6 <memcpy+0x4>

08006a04 <_realloc_r>:
 8006a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a06:	0007      	movs	r7, r0
 8006a08:	000e      	movs	r6, r1
 8006a0a:	0014      	movs	r4, r2
 8006a0c:	2900      	cmp	r1, #0
 8006a0e:	d105      	bne.n	8006a1c <_realloc_r+0x18>
 8006a10:	0011      	movs	r1, r2
 8006a12:	f7ff fc49 	bl	80062a8 <_malloc_r>
 8006a16:	0005      	movs	r5, r0
 8006a18:	0028      	movs	r0, r5
 8006a1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	d103      	bne.n	8006a28 <_realloc_r+0x24>
 8006a20:	f7ff fbd6 	bl	80061d0 <_free_r>
 8006a24:	0025      	movs	r5, r4
 8006a26:	e7f7      	b.n	8006a18 <_realloc_r+0x14>
 8006a28:	f000 f81b 	bl	8006a62 <_malloc_usable_size_r>
 8006a2c:	9001      	str	r0, [sp, #4]
 8006a2e:	4284      	cmp	r4, r0
 8006a30:	d803      	bhi.n	8006a3a <_realloc_r+0x36>
 8006a32:	0035      	movs	r5, r6
 8006a34:	0843      	lsrs	r3, r0, #1
 8006a36:	42a3      	cmp	r3, r4
 8006a38:	d3ee      	bcc.n	8006a18 <_realloc_r+0x14>
 8006a3a:	0021      	movs	r1, r4
 8006a3c:	0038      	movs	r0, r7
 8006a3e:	f7ff fc33 	bl	80062a8 <_malloc_r>
 8006a42:	1e05      	subs	r5, r0, #0
 8006a44:	d0e8      	beq.n	8006a18 <_realloc_r+0x14>
 8006a46:	9b01      	ldr	r3, [sp, #4]
 8006a48:	0022      	movs	r2, r4
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d900      	bls.n	8006a50 <_realloc_r+0x4c>
 8006a4e:	001a      	movs	r2, r3
 8006a50:	0031      	movs	r1, r6
 8006a52:	0028      	movs	r0, r5
 8006a54:	f7ff ffcd 	bl	80069f2 <memcpy>
 8006a58:	0031      	movs	r1, r6
 8006a5a:	0038      	movs	r0, r7
 8006a5c:	f7ff fbb8 	bl	80061d0 <_free_r>
 8006a60:	e7da      	b.n	8006a18 <_realloc_r+0x14>

08006a62 <_malloc_usable_size_r>:
 8006a62:	1f0b      	subs	r3, r1, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	1f18      	subs	r0, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	da01      	bge.n	8006a70 <_malloc_usable_size_r+0xe>
 8006a6c:	580b      	ldr	r3, [r1, r0]
 8006a6e:	18c0      	adds	r0, r0, r3
 8006a70:	4770      	bx	lr
	...

08006a74 <_init>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr

08006a80 <_fini>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr
