
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f2c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092b8  080092b8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080092b8  080092b8  000192b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c0  080092c0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c0  080092c0  000192c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092c4  080092c4  000192c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080092c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000068  08009330  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08009330  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c48  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f84  00000000  00000000  00037d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0003aca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ad  00000000  00000000  0003c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b179  00000000  00000000  0003d285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a084  00000000  00000000  000583fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aef0a  00000000  00000000  00072482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052e0  00000000  00000000  0012138c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0012666c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008fd0 	.word	0x08008fd0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08008fd0 	.word	0x08008fd0

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_uldivmod>:
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 800042c:	2a00      	cmp	r2, #0
 800042e:	d10f      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 8000430:	2900      	cmp	r1, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_uldivmod+0xe>
 8000434:	2800      	cmp	r0, #0
 8000436:	d002      	beq.n	800043e <__aeabi_uldivmod+0x16>
 8000438:	2100      	movs	r1, #0
 800043a:	43c9      	mvns	r1, r1
 800043c:	0008      	movs	r0, r1
 800043e:	b407      	push	{r0, r1, r2}
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <__aeabi_uldivmod+0x24>)
 8000442:	a102      	add	r1, pc, #8	; (adr r1, 800044c <__aeabi_uldivmod+0x24>)
 8000444:	1840      	adds	r0, r0, r1
 8000446:	9002      	str	r0, [sp, #8]
 8000448:	bd03      	pop	{r0, r1, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	ffffffd9 	.word	0xffffffd9
 8000450:	b403      	push	{r0, r1}
 8000452:	4668      	mov	r0, sp
 8000454:	b501      	push	{r0, lr}
 8000456:	9802      	ldr	r0, [sp, #8]
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	469e      	mov	lr, r3
 8000460:	b002      	add	sp, #8
 8000462:	bc0c      	pop	{r2, r3}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__udivmoddi4>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	b5e0      	push	{r5, r6, r7, lr}
 8000474:	0004      	movs	r4, r0
 8000476:	000d      	movs	r5, r1
 8000478:	4692      	mov	sl, r2
 800047a:	4699      	mov	r9, r3
 800047c:	b083      	sub	sp, #12
 800047e:	428b      	cmp	r3, r1
 8000480:	d830      	bhi.n	80004e4 <__udivmoddi4+0x7c>
 8000482:	d02d      	beq.n	80004e0 <__udivmoddi4+0x78>
 8000484:	4649      	mov	r1, r9
 8000486:	4650      	mov	r0, sl
 8000488:	f000 f8ba 	bl	8000600 <__clzdi2>
 800048c:	0029      	movs	r1, r5
 800048e:	0006      	movs	r6, r0
 8000490:	0020      	movs	r0, r4
 8000492:	f000 f8b5 	bl	8000600 <__clzdi2>
 8000496:	1a33      	subs	r3, r6, r0
 8000498:	4698      	mov	r8, r3
 800049a:	3b20      	subs	r3, #32
 800049c:	d434      	bmi.n	8000508 <__udivmoddi4+0xa0>
 800049e:	469b      	mov	fp, r3
 80004a0:	4653      	mov	r3, sl
 80004a2:	465a      	mov	r2, fp
 80004a4:	4093      	lsls	r3, r2
 80004a6:	4642      	mov	r2, r8
 80004a8:	001f      	movs	r7, r3
 80004aa:	4653      	mov	r3, sl
 80004ac:	4093      	lsls	r3, r2
 80004ae:	001e      	movs	r6, r3
 80004b0:	42af      	cmp	r7, r5
 80004b2:	d83b      	bhi.n	800052c <__udivmoddi4+0xc4>
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d100      	bne.n	80004ba <__udivmoddi4+0x52>
 80004b8:	e079      	b.n	80005ae <__udivmoddi4+0x146>
 80004ba:	465b      	mov	r3, fp
 80004bc:	1ba4      	subs	r4, r4, r6
 80004be:	41bd      	sbcs	r5, r7
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	da00      	bge.n	80004c6 <__udivmoddi4+0x5e>
 80004c4:	e076      	b.n	80005b4 <__udivmoddi4+0x14c>
 80004c6:	2200      	movs	r2, #0
 80004c8:	2300      	movs	r3, #0
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	465a      	mov	r2, fp
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	4642      	mov	r2, r8
 80004da:	4093      	lsls	r3, r2
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	e029      	b.n	8000534 <__udivmoddi4+0xcc>
 80004e0:	4282      	cmp	r2, r0
 80004e2:	d9cf      	bls.n	8000484 <__udivmoddi4+0x1c>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2300      	movs	r3, #0
 80004e8:	9200      	str	r2, [sp, #0]
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <__udivmoddi4+0x8e>
 80004f2:	601c      	str	r4, [r3, #0]
 80004f4:	605d      	str	r5, [r3, #4]
 80004f6:	9800      	ldr	r0, [sp, #0]
 80004f8:	9901      	ldr	r1, [sp, #4]
 80004fa:	b003      	add	sp, #12
 80004fc:	bcf0      	pop	{r4, r5, r6, r7}
 80004fe:	46bb      	mov	fp, r7
 8000500:	46b2      	mov	sl, r6
 8000502:	46a9      	mov	r9, r5
 8000504:	46a0      	mov	r8, r4
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	4642      	mov	r2, r8
 800050a:	469b      	mov	fp, r3
 800050c:	2320      	movs	r3, #32
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	4652      	mov	r2, sl
 8000512:	40da      	lsrs	r2, r3
 8000514:	4641      	mov	r1, r8
 8000516:	0013      	movs	r3, r2
 8000518:	464a      	mov	r2, r9
 800051a:	408a      	lsls	r2, r1
 800051c:	0017      	movs	r7, r2
 800051e:	4642      	mov	r2, r8
 8000520:	431f      	orrs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d9c3      	bls.n	80004b4 <__udivmoddi4+0x4c>
 800052c:	2200      	movs	r2, #0
 800052e:	2300      	movs	r3, #0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	4643      	mov	r3, r8
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0d8      	beq.n	80004ec <__udivmoddi4+0x84>
 800053a:	07fb      	lsls	r3, r7, #31
 800053c:	0872      	lsrs	r2, r6, #1
 800053e:	431a      	orrs	r2, r3
 8000540:	4646      	mov	r6, r8
 8000542:	087b      	lsrs	r3, r7, #1
 8000544:	e00e      	b.n	8000564 <__udivmoddi4+0xfc>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d101      	bne.n	800054e <__udivmoddi4+0xe6>
 800054a:	42a2      	cmp	r2, r4
 800054c:	d80c      	bhi.n	8000568 <__udivmoddi4+0x100>
 800054e:	1aa4      	subs	r4, r4, r2
 8000550:	419d      	sbcs	r5, r3
 8000552:	2001      	movs	r0, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2100      	movs	r1, #0
 800055a:	3e01      	subs	r6, #1
 800055c:	1824      	adds	r4, r4, r0
 800055e:	414d      	adcs	r5, r1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d006      	beq.n	8000572 <__udivmoddi4+0x10a>
 8000564:	42ab      	cmp	r3, r5
 8000566:	d9ee      	bls.n	8000546 <__udivmoddi4+0xde>
 8000568:	3e01      	subs	r6, #1
 800056a:	1924      	adds	r4, r4, r4
 800056c:	416d      	adcs	r5, r5
 800056e:	2e00      	cmp	r6, #0
 8000570:	d1f8      	bne.n	8000564 <__udivmoddi4+0xfc>
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	465b      	mov	r3, fp
 8000578:	1900      	adds	r0, r0, r4
 800057a:	4169      	adcs	r1, r5
 800057c:	2b00      	cmp	r3, #0
 800057e:	db24      	blt.n	80005ca <__udivmoddi4+0x162>
 8000580:	002b      	movs	r3, r5
 8000582:	465a      	mov	r2, fp
 8000584:	4644      	mov	r4, r8
 8000586:	40d3      	lsrs	r3, r2
 8000588:	002a      	movs	r2, r5
 800058a:	40e2      	lsrs	r2, r4
 800058c:	001c      	movs	r4, r3
 800058e:	465b      	mov	r3, fp
 8000590:	0015      	movs	r5, r2
 8000592:	2b00      	cmp	r3, #0
 8000594:	db2a      	blt.n	80005ec <__udivmoddi4+0x184>
 8000596:	0026      	movs	r6, r4
 8000598:	409e      	lsls	r6, r3
 800059a:	0033      	movs	r3, r6
 800059c:	0026      	movs	r6, r4
 800059e:	4647      	mov	r7, r8
 80005a0:	40be      	lsls	r6, r7
 80005a2:	0032      	movs	r2, r6
 80005a4:	1a80      	subs	r0, r0, r2
 80005a6:	4199      	sbcs	r1, r3
 80005a8:	9000      	str	r0, [sp, #0]
 80005aa:	9101      	str	r1, [sp, #4]
 80005ac:	e79e      	b.n	80004ec <__udivmoddi4+0x84>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d8bc      	bhi.n	800052c <__udivmoddi4+0xc4>
 80005b2:	e782      	b.n	80004ba <__udivmoddi4+0x52>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	9100      	str	r1, [sp, #0]
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	e785      	b.n	80004d6 <__udivmoddi4+0x6e>
 80005ca:	4642      	mov	r2, r8
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	4646      	mov	r6, r8
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0023      	movs	r3, r4
 80005d8:	40f3      	lsrs	r3, r6
 80005da:	4644      	mov	r4, r8
 80005dc:	4313      	orrs	r3, r2
 80005de:	002a      	movs	r2, r5
 80005e0:	40e2      	lsrs	r2, r4
 80005e2:	001c      	movs	r4, r3
 80005e4:	465b      	mov	r3, fp
 80005e6:	0015      	movs	r5, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dad4      	bge.n	8000596 <__udivmoddi4+0x12e>
 80005ec:	4642      	mov	r2, r8
 80005ee:	002f      	movs	r7, r5
 80005f0:	2320      	movs	r3, #32
 80005f2:	0026      	movs	r6, r4
 80005f4:	4097      	lsls	r7, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	40de      	lsrs	r6, r3
 80005fa:	003b      	movs	r3, r7
 80005fc:	4333      	orrs	r3, r6
 80005fe:	e7cd      	b.n	800059c <__udivmoddi4+0x134>

08000600 <__clzdi2>:
 8000600:	b510      	push	{r4, lr}
 8000602:	2900      	cmp	r1, #0
 8000604:	d103      	bne.n	800060e <__clzdi2+0xe>
 8000606:	f000 f807 	bl	8000618 <__clzsi2>
 800060a:	3020      	adds	r0, #32
 800060c:	e002      	b.n	8000614 <__clzdi2+0x14>
 800060e:	0008      	movs	r0, r1
 8000610:	f000 f802 	bl	8000618 <__clzsi2>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <__clzsi2>:
 8000618:	211c      	movs	r1, #28
 800061a:	2301      	movs	r3, #1
 800061c:	041b      	lsls	r3, r3, #16
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0xe>
 8000622:	0c00      	lsrs	r0, r0, #16
 8000624:	3910      	subs	r1, #16
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	4298      	cmp	r0, r3
 800062a:	d301      	bcc.n	8000630 <__clzsi2+0x18>
 800062c:	0a00      	lsrs	r0, r0, #8
 800062e:	3908      	subs	r1, #8
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	4298      	cmp	r0, r3
 8000634:	d301      	bcc.n	800063a <__clzsi2+0x22>
 8000636:	0900      	lsrs	r0, r0, #4
 8000638:	3904      	subs	r1, #4
 800063a:	a202      	add	r2, pc, #8	; (adr r2, 8000644 <__clzsi2+0x2c>)
 800063c:	5c10      	ldrb	r0, [r2, r0]
 800063e:	1840      	adds	r0, r0, r1
 8000640:	4770      	bx	lr
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	02020304 	.word	0x02020304
 8000648:	01010101 	.word	0x01010101
	...

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f001 fb33 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f8dd 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fbb5 	bl	8000dd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 fb65 	bl	8000d34 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800066a:	f000 f91f 	bl	80008ac <MX_ADC1_Init>
  MX_I2C1_Init();
 800066e:	f000 f983 	bl	8000978 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000672:	f000 f9c1 	bl	80009f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000676:	f000 fa13 	bl	8000aa0 <MX_TIM3_Init>
  MX_TIM6_Init();
 800067a:	f000 fa93 	bl	8000ba4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800067e:	f000 facd 	bl	8000c1c <MX_TIM7_Init>
  MX_TIM14_Init();
 8000682:	f000 fb07 	bl	8000c94 <MX_TIM14_Init>
  MX_TIM17_Init();
 8000686:	f000 fb2d 	bl	8000ce4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 800068a:	4b56      	ldr	r3, [pc, #344]	; (80007e4 <main+0x190>)
 800068c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068e:	4b55      	ldr	r3, [pc, #340]	; (80007e4 <main+0x190>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	63da      	str	r2, [r3, #60]	; 0x3c
 8000696:	4b53      	ldr	r3, [pc, #332]	; (80007e4 <main+0x190>)
 8000698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006a2:	4b50      	ldr	r3, [pc, #320]	; (80007e4 <main+0x190>)
 80006a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a6:	4b4f      	ldr	r3, [pc, #316]	; (80007e4 <main+0x190>)
 80006a8:	2110      	movs	r1, #16
 80006aa:	430a      	orrs	r2, r1
 80006ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ae:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <main+0x190>)
 80006b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b2:	2210      	movs	r2, #16
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 80006ba:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <main+0x190>)
 80006bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006be:	4b49      	ldr	r3, [pc, #292]	; (80007e4 <main+0x190>)
 80006c0:	2120      	movs	r1, #32
 80006c2:	430a      	orrs	r2, r1
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c6:	4b47      	ldr	r3, [pc, #284]	; (80007e4 <main+0x190>)
 80006c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ca:	2220      	movs	r2, #32
 80006cc:	4013      	ands	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]

  // Enable the TIM14 peripheral
   __HAL_RCC_TIM14_CLK_ENABLE();
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <main+0x190>)
 80006d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d6:	4b43      	ldr	r3, [pc, #268]	; (80007e4 <main+0x190>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0209      	lsls	r1, r1, #8
 80006dc:	430a      	orrs	r2, r1
 80006de:	641a      	str	r2, [r3, #64]	; 0x40
 80006e0:	4b40      	ldr	r3, [pc, #256]	; (80007e4 <main+0x190>)
 80006e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]

  // Enable the TIM17 peripheral
  __HAL_RCC_TIM17_CLK_ENABLE();
 80006ee:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <main+0x190>)
 80006f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f2:	4b3c      	ldr	r3, [pc, #240]	; (80007e4 <main+0x190>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	02c9      	lsls	r1, r1, #11
 80006f8:	430a      	orrs	r2, r1
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
 80006fc:	4b39      	ldr	r3, [pc, #228]	; (80007e4 <main+0x190>)
 80006fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	02db      	lsls	r3, r3, #11
 8000704:	4013      	ands	r3, r2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	200f      	movs	r0, #15
 8000710:	f002 faba 	bl	8002c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000714:	200f      	movs	r0, #15
 8000716:	f002 facc 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2011      	movs	r0, #17
 8000720:	f002 fab2 	bl	8002c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000724:	2011      	movs	r0, #17
 8000726:	f002 fac4 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2012      	movs	r0, #18
 8000730:	f002 faaa 	bl	8002c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8000734:	2012      	movs	r0, #18
 8000736:	f002 fabc 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM14
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2013      	movs	r0, #19
 8000740:	f002 faa2 	bl	8002c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000744:	2013      	movs	r0, #19
 8000746:	f002 fab4 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM17
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2016      	movs	r0, #22
 8000750:	f002 fa9a 	bl	8002c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000754:	2016      	movs	r0, #22
 8000756:	f002 faac 	bl	8002cb2 <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <main+0x194>)
 800075c:	0018      	movs	r0, r3
 800075e:	f004 f9f1 	bl	8004b44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000762:	4b22      	ldr	r3, [pc, #136]	; (80007ec <main+0x198>)
 8000764:	0018      	movs	r0, r3
 8000766:	f004 f9ed 	bl	8004b44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <main+0x19c>)
 800076c:	0018      	movs	r0, r3
 800076e:	f004 f9e9 	bl	8004b44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <main+0x1a0>)
 8000774:	0018      	movs	r0, r3
 8000776:	f004 f9e5 	bl	8004b44 <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <main+0x1a4>)
 800077c:	2100      	movs	r1, #0
 800077e:	0018      	movs	r0, r3
 8000780:	f004 fa9c 	bl	8004cbc <HAL_TIM_PWM_Start>

  // I2C Display
  hardwareTestLCD();
 8000784:	f000 fc04 	bl	8000f90 <hardwareTestLCD>

  // Variables
  int servoAngle;
  int adcValue;
  stateTracker = 1;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <main+0x1a8>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check UART Transmissions
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 800078e:	491c      	ldr	r1, [pc, #112]	; (8000800 <main+0x1ac>)
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <main+0x1b0>)
 8000792:	2201      	movs	r2, #1
 8000794:	0018      	movs	r0, r3
 8000796:	f005 fc4b 	bl	8006030 <HAL_UART_Receive_IT>

	  // Get potentiometer value
	  HAL_ADC_Start_IT(&hadc1);
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <main+0x1b4>)
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fec3 	bl	8002528 <HAL_ADC_Start_IT>
	  getPotValue();
 80007a2:	f000 fbc7 	bl	8000f34 <getPotValue>

	  // State Machine
	  stateMachineDecider();
 80007a6:	f000 fc85 	bl	80010b4 <stateMachineDecider>
	  stateMachineController(stateTracker);
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <main+0x1a8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fc3a 	bl	8001028 <stateMachineController>

	  // Monitor LEDs
	  if (ledOneFlag == 0 ){
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <main+0x1b8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d106      	bne.n	80007ca <main+0x176>
		  HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,GPIO_PIN_RESET);
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <main+0x1bc>)
 80007be:	2200      	movs	r2, #0
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fdbf 	bl	8003346 <HAL_GPIO_WritePin>
 80007c8:	e7e1      	b.n	800078e <main+0x13a>
	  } else if (ledTwoFlag == 0){
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <main+0x1c0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1dd      	bne.n	800078e <main+0x13a>
		  HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,GPIO_PIN_RESET);
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	01db      	lsls	r3, r3, #7
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <main+0x1c4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	0019      	movs	r1, r3
 80007dc:	f002 fdb3 	bl	8003346 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 80007e0:	e7d5      	b.n	800078e <main+0x13a>
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	40021000 	.word	0x40021000
 80007e8:	2000013c 	.word	0x2000013c
 80007ec:	200001d4 	.word	0x200001d4
 80007f0:	20000220 	.word	0x20000220
 80007f4:	2000026c 	.word	0x2000026c
 80007f8:	20000188 	.word	0x20000188
 80007fc:	200003f4 	.word	0x200003f4
 8000800:	200003ec 	.word	0x200003ec
 8000804:	20000304 	.word	0x20000304
 8000808:	20000084 	.word	0x20000084
 800080c:	20000004 	.word	0x20000004
 8000810:	50000800 	.word	0x50000800
 8000814:	20000008 	.word	0x20000008
 8000818:	50000400 	.word	0x50000400

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b093      	sub	sp, #76	; 0x4c
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	2410      	movs	r4, #16
 8000824:	193b      	adds	r3, r7, r4
 8000826:	0018      	movs	r0, r3
 8000828:	2338      	movs	r3, #56	; 0x38
 800082a:	001a      	movs	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	f007 ff49 	bl	80086c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000832:	003b      	movs	r3, r7
 8000834:	0018      	movs	r0, r3
 8000836:	2310      	movs	r3, #16
 8000838:	001a      	movs	r2, r3
 800083a:	2100      	movs	r1, #0
 800083c:	f007 ff42 	bl	80086c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	0018      	movs	r0, r3
 8000846:	f003 fa5d 	bl	8003d04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084a:	193b      	adds	r3, r7, r4
 800084c:	2202      	movs	r2, #2
 800084e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	193b      	adds	r3, r7, r4
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	0052      	lsls	r2, r2, #1
 8000856:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085e:	193b      	adds	r3, r7, r4
 8000860:	2240      	movs	r2, #64	; 0x40
 8000862:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	193b      	adds	r3, r7, r4
 800086c:	0018      	movs	r0, r3
 800086e:	f003 fa95 	bl	8003d9c <HAL_RCC_OscConfig>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000876:	f000 ff19 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	003b      	movs	r3, r7
 800087c:	2207      	movs	r2, #7
 800087e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000880:	003b      	movs	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	003b      	movs	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088c:	003b      	movs	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000892:	003b      	movs	r3, r7
 8000894:	2100      	movs	r1, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f003 fd9a 	bl	80043d0 <HAL_RCC_ClockConfig>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008a0:	f000 ff04 	bl	80016ac <Error_Handler>
  }
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b013      	add	sp, #76	; 0x4c
 80008aa:	bd90      	pop	{r4, r7, pc}

080008ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	0018      	movs	r0, r3
 80008b6:	230c      	movs	r3, #12
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f007 ff02 	bl	80086c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008c2:	4a2c      	ldr	r2, [pc, #176]	; (8000974 <MX_ADC1_Init+0xc8>)
 80008c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	05d2      	lsls	r2, r2, #23
 80008cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_ADC1_Init+0xc4>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_ADC1_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_ADC1_Init+0xc4>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_ADC1_Init+0xc4>)
 800090c:	222c      	movs	r2, #44	; 0x2c
 800090e:	2100      	movs	r1, #0
 8000910:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_ADC1_Init+0xc4>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_ADC1_Init+0xc4>)
 800091a:	2200      	movs	r2, #0
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_ADC1_Init+0xc4>)
 8000920:	2200      	movs	r2, #0
 8000922:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_ADC1_Init+0xc4>)
 8000926:	223c      	movs	r2, #60	; 0x3c
 8000928:	2100      	movs	r1, #0
 800092a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_ADC1_Init+0xc4>)
 800092e:	2200      	movs	r2, #0
 8000930:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_ADC1_Init+0xc4>)
 8000934:	0018      	movs	r0, r3
 8000936:	f001 fbbb 	bl	80020b0 <HAL_ADC_Init>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800093e:	f000 feb5 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000954:	1d3a      	adds	r2, r7, #4
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_ADC1_Init+0xc4>)
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f001 fe68 	bl	8002630 <HAL_ADC_ConfigChannel>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000964:	f000 fea2 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b004      	add	sp, #16
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000084 	.word	0x20000084
 8000974:	40012400 	.word	0x40012400

08000978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_I2C1_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_I2C1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_I2C1_Init+0x74>)
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <MX_I2C1_Init+0x7c>)
 8000986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_I2C1_Init+0x74>)
 8000990:	2201      	movs	r2, #1
 8000992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_I2C1_Init+0x74>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f002 fcff 	bl	80033b8 <HAL_I2C_Init>
 80009ba:	1e03      	subs	r3, r0, #0
 80009bc:	d001      	beq.n	80009c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009be:	f000 fe75 	bl	80016ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_I2C1_Init+0x74>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f003 f904 	bl	8003bd4 <HAL_I2CEx_ConfigAnalogFilter>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 fe6c 	bl	80016ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <MX_I2C1_Init+0x74>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f003 f947 	bl	8003c6c <HAL_I2CEx_ConfigDigitalFilter>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fe63 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000e8 	.word	0x200000e8
 80009f0:	40005400 	.word	0x40005400
 80009f4:	00303d5b 	.word	0x00303d5b

080009f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	2310      	movs	r3, #16
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	2310      	movs	r3, #16
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f007 fe5b 	bl	80086c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	0018      	movs	r0, r3
 8000a12:	230c      	movs	r3, #12
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f007 fe54 	bl	80086c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_TIM2_Init+0xa0>)
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	05d2      	lsls	r2, r2, #23
 8000a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_TIM2_Init+0xa0>)
 8000a26:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_TIM2_Init+0xa0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_TIM2_Init+0xa0>)
 8000a32:	4a1a      	ldr	r2, [pc, #104]	; (8000a9c <MX_TIM2_Init+0xa4>)
 8000a34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_TIM2_Init+0xa0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_TIM2_Init+0xa0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_TIM2_Init+0xa0>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f004 f825 	bl	8004a94 <HAL_TIM_Base_Init>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a4e:	f000 fe2d 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	2110      	movs	r1, #16
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	0152      	lsls	r2, r2, #5
 8000a5a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a5c:	187a      	adds	r2, r7, r1
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_TIM2_Init+0xa0>)
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f004 fc1c 	bl	80052a0 <HAL_TIM_ConfigClockSource>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a6c:	f000 fe1e 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7c:	1d3a      	adds	r2, r7, #4
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_TIM2_Init+0xa0>)
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f005 f914 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a8c:	f000 fe0e 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b008      	add	sp, #32
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2000013c 	.word	0x2000013c
 8000a9c:	000003e7 	.word	0x000003e7

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	2328      	movs	r3, #40	; 0x28
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2310      	movs	r3, #16
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f007 fe07 	bl	80086c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab6:	231c      	movs	r3, #28
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	0018      	movs	r0, r3
 8000abc:	230c      	movs	r3, #12
 8000abe:	001a      	movs	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f007 fdff 	bl	80086c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	0018      	movs	r0, r3
 8000aca:	231c      	movs	r3, #28
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f007 fdf8 	bl	80086c4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000ad6:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <MX_TIM3_Init+0xfc>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000ada:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000adc:	2240      	movs	r2, #64	; 0x40
 8000ade:	32ff      	adds	r2, #255	; 0xff
 8000ae0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000ae8:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000aea:	4a2d      	ldr	r2, [pc, #180]	; (8000ba0 <MX_TIM3_Init+0x100>)
 8000aec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000afa:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f003 ffc9 	bl	8004a94 <HAL_TIM_Base_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000b06:	f000 fdd1 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0a:	2128      	movs	r1, #40	; 0x28
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	0152      	lsls	r2, r2, #5
 8000b12:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b14:	187a      	adds	r2, r7, r1
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000b18:	0011      	movs	r1, r2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f004 fbc0 	bl	80052a0 <HAL_TIM_ConfigClockSource>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000b24:	f000 fdc2 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f004 f866 	bl	8004bfc <HAL_TIM_PWM_Init>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b34:	f000 fdba 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b38:	211c      	movs	r1, #28
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b46:	187a      	adds	r2, r7, r1
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f005 f8af 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000b56:	f000 fda9 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2260      	movs	r2, #96	; 0x60
 8000b5e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b72:	0039      	movs	r1, r7
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f004 fa91 	bl	80050a0 <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000b82:	f000 fd93 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <MX_TIM3_Init+0xf8>)
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 ff0f 	bl	80019ac <HAL_TIM_MspPostInit>

}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b00e      	add	sp, #56	; 0x38
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000188 	.word	0x20000188
 8000b9c:	40000400 	.word	0x40000400
 8000ba0:	000003e7 	.word	0x000003e7

08000ba4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	0018      	movs	r0, r3
 8000bae:	230c      	movs	r3, #12
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f007 fd86 	bl	80086c4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_TIM6_Init+0x6c>)
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <MX_TIM6_Init+0x70>)
 8000bbc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_TIM6_Init+0x6c>)
 8000bc0:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_TIM6_Init+0x74>)
 8000bc2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_TIM6_Init+0x6c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_TIM6_Init+0x6c>)
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MX_TIM6_Init+0x74>)
 8000bce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_TIM6_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_TIM6_Init+0x6c>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f003 ff5b 	bl	8004a94 <HAL_TIM_Base_Init>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000be2:	f000 fd63 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bf2:	1d3a      	adds	r2, r7, #4
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_TIM6_Init+0x6c>)
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f005 f859 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000c02:	f000 fd53 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	200001d4 	.word	0x200001d4
 8000c14:	40001000 	.word	0x40001000
 8000c18:	000003e7 	.word	0x000003e7

08000c1c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	0018      	movs	r0, r3
 8000c26:	230c      	movs	r3, #12
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f007 fd4a 	bl	80086c4 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_TIM7_Init+0x6c>)
 8000c32:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <MX_TIM7_Init+0x70>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_TIM7_Init+0x6c>)
 8000c38:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_TIM7_Init+0x74>)
 8000c3a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_TIM7_Init+0x6c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_TIM7_Init+0x6c>)
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <MX_TIM7_Init+0x74>)
 8000c46:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_TIM7_Init+0x6c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_TIM7_Init+0x6c>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f003 ff1f 	bl	8004a94 <HAL_TIM_Base_Init>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000c5a:	f000 fd27 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c6a:	1d3a      	adds	r2, r7, #4
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_TIM7_Init+0x6c>)
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f005 f81d 	bl	8005cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000c7a:	f000 fd17 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000220 	.word	0x20000220
 8000c8c:	40001400 	.word	0x40001400
 8000c90:	000003e7 	.word	0x000003e7

08000c94 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_TIM14_Init+0x40>)
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <MX_TIM14_Init+0x44>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7999;
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <MX_TIM14_Init+0x40>)
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <MX_TIM14_Init+0x48>)
 8000ca2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_TIM14_Init+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <MX_TIM14_Init+0x40>)
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <MX_TIM14_Init+0x4c>)
 8000cae:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_TIM14_Init+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <MX_TIM14_Init+0x40>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <MX_TIM14_Init+0x40>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f003 fee8 	bl	8004a94 <HAL_TIM_Base_Init>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000cc8:	f000 fcf0 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	2000026c 	.word	0x2000026c
 8000cd8:	40002000 	.word	0x40002000
 8000cdc:	00001f3f 	.word	0x00001f3f
 8000ce0:	000003e7 	.word	0x000003e7

08000ce4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_TIM17_Init+0x44>)
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <MX_TIM17_Init+0x48>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_TIM17_Init+0x44>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_TIM17_Init+0x44>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <MX_TIM17_Init+0x44>)
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <MX_TIM17_Init+0x4c>)
 8000cfe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_TIM17_Init+0x44>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <MX_TIM17_Init+0x44>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_TIM17_Init+0x44>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <MX_TIM17_Init+0x44>)
 8000d14:	0018      	movs	r0, r3
 8000d16:	f003 febd 	bl	8004a94 <HAL_TIM_Base_Init>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000d1e:	f000 fcc5 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200002b8 	.word	0x200002b8
 8000d2c:	40014800 	.word	0x40014800
 8000d30:	000003e7 	.word	0x000003e7

08000d34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d38:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d3a:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <MX_USART2_UART_Init+0x98>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d40:	22e1      	movs	r2, #225	; 0xe1
 8000d42:	0252      	lsls	r2, r2, #9
 8000d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f005 f81c 	bl	8005dbc <HAL_UART_Init>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d88:	f000 fc90 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	0018      	movs	r0, r3
 8000d92:	f007 f8a9 	bl	8007ee8 <HAL_UARTEx_SetTxFifoThreshold>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d9a:	f000 fc87 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000da0:	2100      	movs	r1, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f007 f8e0 	bl	8007f68 <HAL_UARTEx_SetRxFifoThreshold>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000dac:	f000 fc7e 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <MX_USART2_UART_Init+0x94>)
 8000db2:	0018      	movs	r0, r3
 8000db4:	f007 f85e 	bl	8007e74 <HAL_UARTEx_DisableFifoMode>
 8000db8:	1e03      	subs	r3, r0, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000dbc:	f000 fc76 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000304 	.word	0x20000304
 8000dcc:	40004400 	.word	0x40004400

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b08b      	sub	sp, #44	; 0x2c
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	2414      	movs	r4, #20
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	0018      	movs	r0, r3
 8000ddc:	2314      	movs	r3, #20
 8000dde:	001a      	movs	r2, r3
 8000de0:	2100      	movs	r1, #0
 8000de2:	f007 fc6f 	bl	80086c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	4b4f      	ldr	r3, [pc, #316]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dea:	4b4e      	ldr	r3, [pc, #312]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000dec:	2104      	movs	r1, #4
 8000dee:	430a      	orrs	r2, r1
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
 8000df2:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df6:	2204      	movs	r2, #4
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dfe:	4b49      	ldr	r3, [pc, #292]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e02:	4b48      	ldr	r3, [pc, #288]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000e04:	2120      	movs	r1, #32
 8000e06:	430a      	orrs	r2, r1
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
 8000e0a:	4b46      	ldr	r3, [pc, #280]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0e:	2220      	movs	r2, #32
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1a:	4b42      	ldr	r3, [pc, #264]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	635a      	str	r2, [r3, #52]	; 0x34
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e32:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000e34:	2102      	movs	r1, #2
 8000e36:	430a      	orrs	r2, r1
 8000e38:	635a      	str	r2, [r3, #52]	; 0x34
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <MX_GPIO_Init+0x154>)
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4013      	ands	r3, r2
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e46:	23a0      	movs	r3, #160	; 0xa0
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f002 fa79 	bl	8003346 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000e54:	4934      	ldr	r1, [pc, #208]	; (8000f28 <MX_GPIO_Init+0x158>)
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <MX_GPIO_Init+0x15c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f002 fa73 	bl	8003346 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000e60:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <MX_GPIO_Init+0x160>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0018      	movs	r0, r3
 8000e68:	f002 fa6d 	bl	8003346 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INPUT_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_2_Pin;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	0192      	lsls	r2, r2, #6
 8000e72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_2_GPIO_Port, &GPIO_InitStruct);
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	4a2b      	ldr	r2, [pc, #172]	; (8000f30 <MX_GPIO_Init+0x160>)
 8000e84:	0019      	movs	r1, r3
 8000e86:	0010      	movs	r0, r2
 8000e88:	f002 f80c 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	2220      	movs	r2, #32
 8000e90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2201      	movs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	193a      	adds	r2, r7, r4
 8000ea6:	23a0      	movs	r3, #160	; 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f001 fff9 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <MX_GPIO_Init+0x158>)
 8000eb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	2201      	movs	r2, #1
 8000ebc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <MX_GPIO_Init+0x15c>)
 8000ece:	0019      	movs	r1, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	f001 ffe7 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2201      	movs	r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <MX_GPIO_Init+0x160>)
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	f001 ffd5 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000efa:	0021      	movs	r1, r4
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2208      	movs	r2, #8
 8000f00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <MX_GPIO_Init+0x15c>)
 8000f12:	0019      	movs	r1, r3
 8000f14:	0010      	movs	r0, r2
 8000f16:	f001 ffc5 	bl	8002ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b00b      	add	sp, #44	; 0x2c
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	40021000 	.word	0x40021000
 8000f28:	00004010 	.word	0x00004010
 8000f2c:	50000400 	.word	0x50000400
 8000f30:	50000800 	.word	0x50000800

08000f34 <getPotValue>:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
	}

	/* Get ADC value from potentiometer */
	void getPotValue(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <getPotValue+0x24>)
 8000f3a:	2105      	movs	r1, #5
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 fa5f 	bl	8002400 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <getPotValue+0x24>)
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 fb67 	bl	8002618 <HAL_ADC_GetValue>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <getPotValue+0x28>)
 8000f50:	801a      	strh	r2, [r3, #0]

		/* Debug */
		//sprintf(msg, "potValue: %hu\r\n", potValue);
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000084 	.word	0x20000084
 8000f5c:	200003f2 	.word	0x200003f2

08000f60 <getAdcFromPot>:

	/* getADC from Pot */
	int getAdcFromPot(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
		/* Get pot value */
		uint16_t potValue;
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <getAdcFromPot+0x2c>)
 8000f68:	2105      	movs	r1, #5
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 fa48 	bl	8002400 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <getAdcFromPot+0x2c>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fb50 	bl	8002618 <HAL_ADC_GetValue>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	1dbb      	adds	r3, r7, #6
 8000f7c:	801a      	strh	r2, [r3, #0]
		return potValue;
 8000f7e:	1dbb      	adds	r3, r7, #6
 8000f80:	881b      	ldrh	r3, [r3, #0]
	}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	20000084 	.word	0x20000084

08000f90 <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f007 f9a9 	bl	80082ec <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f007 fab4 	bl	800850c <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Hardware Test");
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <hardwareTestLCD+0x38>)
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f007 faff 	bl	80085ac <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f007 faaa 	bl	800850c <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Meow");
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <hardwareTestLCD+0x3c>)
 8000fba:	0019      	movs	r1, r3
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f007 faf5 	bl	80085ac <I2C_LCD_WriteString>
	}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08009010 	.word	0x08009010
 8000fcc:	08009020 	.word	0x08009020

08000fd0 <motorControl>:

	/* Motor control */
	void motorControl(int adcValue){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, adcValue); // Interpolate pot values to PWM range
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <motorControl+0x18>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b002      	add	sp, #8
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000188 	.word	0x20000188

08000fec <myMap>:

	/* Mapping function */
	 int myMap(int x, int in_min, int in_max, int out_min, int out_max){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
		 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	69b9      	ldr	r1, [r7, #24]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	1a8a      	subs	r2, r1, r2
 8001006:	435a      	muls	r2, r3
 8001008:	0010      	movs	r0, r2
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	0019      	movs	r1, r3
 8001012:	f7ff f91d 	bl	8000250 <__divsi3>
 8001016:	0003      	movs	r3, r0
 8001018:	001a      	movs	r2, r3
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	18d3      	adds	r3, r2, r3
	 }
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <stateMachineController>:

	 /* State Machine Controller */
	 // Description: Determines which state the program will execute.
	 //  Input:		 Integer corresponding to state (1 = A, 2 = B, 3 = C)
	 void stateMachineController(int state){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

		 switch(state){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d015      	beq.n	8001062 <stateMachineController+0x3a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b03      	cmp	r3, #3
 800103a:	dc2d      	bgt.n	8001098 <stateMachineController+0x70>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d003      	beq.n	800104a <stateMachineController+0x22>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d009      	beq.n	800105c <stateMachineController+0x34>
				 ledTwoFlag = 1;

				 stateHandlerC();
				 break;
		 }
	 }
 8001048:	e026      	b.n	8001098 <stateMachineController+0x70>
				 ledOneFlag = 1;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <stateMachineController+0x78>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <stateMachineController+0x7c>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
				 stateHandlerA();
 8001056:	f000 f8ad 	bl	80011b4 <stateHandlerA>
				 break;
 800105a:	e01d      	b.n	8001098 <stateMachineController+0x70>
				 stateHandlerB();
 800105c:	f000 f8ea 	bl	8001234 <stateHandlerB>
				 break;
 8001060:	e01a      	b.n	8001098 <stateMachineController+0x70>
				 sprintf(msg, "Executing C.\n\r");
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <stateMachineController+0x80>)
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <stateMachineController+0x84>)
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f007 fb0b 	bl	8008684 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <stateMachineController+0x84>)
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff f851 	bl	8000118 <strlen>
 8001076:	0003      	movs	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	2301      	movs	r3, #1
 800107c:	425b      	negs	r3, r3
 800107e:	490b      	ldr	r1, [pc, #44]	; (80010ac <stateMachineController+0x84>)
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <stateMachineController+0x88>)
 8001082:	f004 ff31 	bl	8005ee8 <HAL_UART_Transmit>
				 ledOneFlag = 1;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <stateMachineController+0x78>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <stateMachineController+0x7c>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
				 stateHandlerC();
 8001092:	f000 f975 	bl	8001380 <stateHandlerC>
				 break;
 8001096:	46c0      	nop			; (mov r8, r8)
	 }
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000004 	.word	0x20000004
 80010a4:	20000008 	.word	0x20000008
 80010a8:	08009028 	.word	0x08009028
 80010ac:	20000398 	.word	0x20000398
 80010b0:	20000304 	.word	0x20000304

080010b4 <stateMachineDecider>:

	 /* State Machine Controller */
	 // Description: Monitors button pushes to update current state value.
	 void stateMachineDecider(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
		 // Go to State B if it is State A
		 if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 1){
 80010b8:	4b36      	ldr	r3, [pc, #216]	; (8001194 <stateMachineDecider+0xe0>)
 80010ba:	2108      	movs	r1, #8
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 f925 	bl	800330c <HAL_GPIO_ReadPin>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d01c      	beq.n	8001100 <stateMachineDecider+0x4c>
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <stateMachineDecider+0xe4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d118      	bne.n	8001100 <stateMachineDecider+0x4c>

			 // Debug message
			 sprintf(msg, "Going to State B.\n\r");
 80010ce:	4a33      	ldr	r2, [pc, #204]	; (800119c <stateMachineDecider+0xe8>)
 80010d0:	4b33      	ldr	r3, [pc, #204]	; (80011a0 <stateMachineDecider+0xec>)
 80010d2:	0011      	movs	r1, r2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f007 fad5 	bl	8008684 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <stateMachineDecider+0xec>)
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff f81b 	bl	8000118 <strlen>
 80010e2:	0003      	movs	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	2301      	movs	r3, #1
 80010e8:	425b      	negs	r3, r3
 80010ea:	492d      	ldr	r1, [pc, #180]	; (80011a0 <stateMachineDecider+0xec>)
 80010ec:	482d      	ldr	r0, [pc, #180]	; (80011a4 <stateMachineDecider+0xf0>)
 80010ee:	f004 fefb 	bl	8005ee8 <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f007 f9c6 	bl	8008484 <I2C_LCD_Clear>

			 // Go to State B
			 stateTracker = 2;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <stateMachineDecider+0xe4>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e046      	b.n	800118e <stateMachineDecider+0xda>

		 // Go to State A if it is State B
		 } else if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 2){
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <stateMachineDecider+0xe0>)
 8001102:	2108      	movs	r1, #8
 8001104:	0018      	movs	r0, r3
 8001106:	f002 f901 	bl	800330c <HAL_GPIO_ReadPin>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d01c      	beq.n	8001148 <stateMachineDecider+0x94>
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <stateMachineDecider+0xe4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d118      	bne.n	8001148 <stateMachineDecider+0x94>

			 // Debug message
			 sprintf(msg, "Going to State A.\n\r");
 8001116:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <stateMachineDecider+0xf4>)
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <stateMachineDecider+0xec>)
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f007 fab1 	bl	8008684 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <stateMachineDecider+0xec>)
 8001124:	0018      	movs	r0, r3
 8001126:	f7fe fff7 	bl	8000118 <strlen>
 800112a:	0003      	movs	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	2301      	movs	r3, #1
 8001130:	425b      	negs	r3, r3
 8001132:	491b      	ldr	r1, [pc, #108]	; (80011a0 <stateMachineDecider+0xec>)
 8001134:	481b      	ldr	r0, [pc, #108]	; (80011a4 <stateMachineDecider+0xf0>)
 8001136:	f004 fed7 	bl	8005ee8 <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 800113a:	2000      	movs	r0, #0
 800113c:	f007 f9a2 	bl	8008484 <I2C_LCD_Clear>

			 // Stay in State A
			 stateTracker = 1;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <stateMachineDecider+0xe4>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e022      	b.n	800118e <stateMachineDecider+0xda>

		// Button 2 pressed (State C)
		 } else if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin) && stateTracker == 1){
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	019b      	lsls	r3, r3, #6
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <stateMachineDecider+0xf8>)
 800114e:	0019      	movs	r1, r3
 8001150:	0010      	movs	r0, r2
 8001152:	f002 f8db 	bl	800330c <HAL_GPIO_ReadPin>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d119      	bne.n	800118e <stateMachineDecider+0xda>
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <stateMachineDecider+0xe4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d115      	bne.n	800118e <stateMachineDecider+0xda>

			 // Debug message
			 sprintf(msg, "Going to State C.\n\r");
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <stateMachineDecider+0xfc>)
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <stateMachineDecider+0xec>)
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f007 fa8b 	bl	8008684 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <stateMachineDecider+0xec>)
 8001170:	0018      	movs	r0, r3
 8001172:	f7fe ffd1 	bl	8000118 <strlen>
 8001176:	0003      	movs	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	2301      	movs	r3, #1
 800117c:	425b      	negs	r3, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <stateMachineDecider+0xec>)
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <stateMachineDecider+0xf0>)
 8001182:	f004 feb1 	bl	8005ee8 <HAL_UART_Transmit>

			 // Go to State C
			 stateTracker = 3;
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <stateMachineDecider+0xe4>)
 8001188:	2203      	movs	r2, #3
 800118a:	601a      	str	r2, [r3, #0]
		 }
	 }
 800118c:	e7ff      	b.n	800118e <stateMachineDecider+0xda>
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	50000400 	.word	0x50000400
 8001198:	200003f4 	.word	0x200003f4
 800119c:	08009038 	.word	0x08009038
 80011a0:	20000398 	.word	0x20000398
 80011a4:	20000304 	.word	0x20000304
 80011a8:	0800904c 	.word	0x0800904c
 80011ac:	50000800 	.word	0x50000800
 80011b0:	08009060 	.word	0x08009060

080011b4 <stateHandlerA>:

	 /* State Handler A */
	 void stateHandlerA(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af02      	add	r7, sp, #8
		 // LCD Control
		 I2C_LCD_Display(MyI2C_LCD);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f007 fa12 	bl	80085e4 <I2C_LCD_Display>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f007 f9a1 	bl	800850c <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <stateHandlerA+0x6c>)
 80011cc:	0019      	movs	r1, r3
 80011ce:	2000      	movs	r0, #0
 80011d0:	f007 f9ec 	bl	80085ac <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2100      	movs	r1, #0
 80011d8:	2000      	movs	r0, #0
 80011da:	f007 f997 	bl	800850c <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <stateHandlerA+0x70>)
 80011e0:	0019      	movs	r1, r3
 80011e2:	2000      	movs	r0, #0
 80011e4:	f007 f9e2 	bl	80085ac <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <stateHandlerA+0x74>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f001 f99c 	bl	8002528 <HAL_ADC_Start_IT>
		 getPotValue();
 80011f0:	f7ff fea0 	bl	8000f34 <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 80011f4:	f7ff feb4 	bl	8000f60 <getAdcFromPot>
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <stateHandlerA+0x78>)
 80011fa:	23b4      	movs	r3, #180	; 0xb4
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2300      	movs	r3, #0
 8001200:	213c      	movs	r1, #60	; 0x3c
 8001202:	f7ff fef3 	bl	8000fec <myMap>
 8001206:	0003      	movs	r3, r0
 8001208:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff fedf 	bl	8000fd0 <motorControl>

		 // No button pushes - Stay in State A
		 stateTracker = 1;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <stateHandlerA+0x7c>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
	 }
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	08009074 	.word	0x08009074
 8001224:	08009084 	.word	0x08009084
 8001228:	20000084 	.word	0x20000084
 800122c:	00000fff 	.word	0x00000fff
 8001230:	200003f4 	.word	0x200003f4

08001234 <stateHandlerB>:

	 /* State Handler B */
	 void stateHandlerB(void){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af02      	add	r7, sp, #8

		 // When State B is initially called, let alone one of the LEDs (in question) on
		 if (ledOneFlag == 1 && ledTwoFlag == 1){
 800123a:	4b42      	ldr	r3, [pc, #264]	; (8001344 <stateHandlerB+0x110>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d109      	bne.n	8001256 <stateHandlerB+0x22>
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <stateHandlerB+0x114>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d105      	bne.n	8001256 <stateHandlerB+0x22>
			 ledOneFlag = 1;
 800124a:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <stateHandlerB+0x110>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
			 ledTwoFlag = 0;
 8001250:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <stateHandlerB+0x114>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
		 }

		 // LCD Control
		 I2C_LCD_Display(MyI2C_LCD);
 8001256:	2000      	movs	r0, #0
 8001258:	f007 f9c4 	bl	80085e4 <I2C_LCD_Display>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2000      	movs	r0, #0
 8001262:	f007 f953 	bl	800850c <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "ADC: ");
 8001266:	4b39      	ldr	r3, [pc, #228]	; (800134c <stateHandlerB+0x118>)
 8001268:	0019      	movs	r1, r3
 800126a:	2000      	movs	r0, #0
 800126c:	f007 f99e 	bl	80085ac <I2C_LCD_WriteString>
		 sprintf(msg2, "%hu", potValue);
 8001270:	4b37      	ldr	r3, [pc, #220]	; (8001350 <stateHandlerB+0x11c>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	001a      	movs	r2, r3
 8001276:	4937      	ldr	r1, [pc, #220]	; (8001354 <stateHandlerB+0x120>)
 8001278:	4b37      	ldr	r3, [pc, #220]	; (8001358 <stateHandlerB+0x124>)
 800127a:	0018      	movs	r0, r3
 800127c:	f007 fa02 	bl	8008684 <siprintf>
		 I2C_LCD_WriteString(MyI2C_LCD, msg2);
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <stateHandlerB+0x124>)
 8001282:	0019      	movs	r1, r3
 8001284:	2000      	movs	r0, #0
 8001286:	f007 f991 	bl	80085ac <I2C_LCD_WriteString>
		 I2C_LCD_WriteString(MyI2C_LCD, " State B");
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <stateHandlerB+0x128>)
 800128c:	0019      	movs	r1, r3
 800128e:	2000      	movs	r0, #0
 8001290:	f007 f98c 	bl	80085ac <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	2100      	movs	r1, #0
 8001298:	2000      	movs	r0, #0
 800129a:	f007 f937 	bl	800850c <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <stateHandlerB+0x12c>)
 80012a0:	0019      	movs	r1, r3
 80012a2:	2000      	movs	r0, #0
 80012a4:	f007 f982 	bl	80085ac <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <stateHandlerB+0x130>)
 80012aa:	0018      	movs	r0, r3
 80012ac:	f001 f93c 	bl	8002528 <HAL_ADC_Start_IT>
		 getPotValue();
 80012b0:	f7ff fe40 	bl	8000f34 <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 80012b4:	f7ff fe54 	bl	8000f60 <getAdcFromPot>
 80012b8:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <stateHandlerB+0x134>)
 80012ba:	23b4      	movs	r3, #180	; 0xb4
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2300      	movs	r3, #0
 80012c0:	213c      	movs	r1, #60	; 0x3c
 80012c2:	f7ff fe93 	bl	8000fec <myMap>
 80012c6:	0003      	movs	r3, r0
 80012c8:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff fe7f 	bl	8000fd0 <motorControl>
		 // adc towards 5v = 1hz

		 // LED1 and LED2 toggle
		 // B1 pressed = Turn off
		 // B1 not pressed = Turn on, blink at 1 Hz (Modify PSC)
		 if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin)){
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	019b      	lsls	r3, r3, #6
 80012d6:	4a25      	ldr	r2, [pc, #148]	; (800136c <stateHandlerB+0x138>)
 80012d8:	0019      	movs	r1, r3
 80012da:	0010      	movs	r0, r2
 80012dc:	f002 f816 	bl	800330c <HAL_GPIO_ReadPin>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d128      	bne.n	8001336 <stateHandlerB+0x102>

			 // Testing millis - time since program start
			 sprintf(msg2, "Time since program start (ms): %u\r\n", millisProgStart);
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <stateHandlerB+0x13c>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	001a      	movs	r2, r3
 80012ea:	4922      	ldr	r1, [pc, #136]	; (8001374 <stateHandlerB+0x140>)
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <stateHandlerB+0x124>)
 80012ee:	0018      	movs	r0, r3
 80012f0:	f007 f9c8 	bl	8008684 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <stateHandlerB+0x124>)
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7fe ff0e 	bl	8000118 <strlen>
 80012fc:	0003      	movs	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	2301      	movs	r3, #1
 8001302:	425b      	negs	r3, r3
 8001304:	4914      	ldr	r1, [pc, #80]	; (8001358 <stateHandlerB+0x124>)
 8001306:	481c      	ldr	r0, [pc, #112]	; (8001378 <stateHandlerB+0x144>)
 8001308:	f004 fdee 	bl	8005ee8 <HAL_UART_Transmit>

			 // If LED1 is on, swap with LED2
			 if (ledOneFlag == 1){
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <stateHandlerB+0x110>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d106      	bne.n	8001322 <stateHandlerB+0xee>
				 ledOneFlag = 0;
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <stateHandlerB+0x110>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <stateHandlerB+0x114>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e009      	b.n	8001336 <stateHandlerB+0x102>

			// If LED2 is on, swap with LED1
			 } else if (ledTwoFlag == 1){
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <stateHandlerB+0x114>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <stateHandlerB+0x102>
				 ledTwoFlag = 0;
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <stateHandlerB+0x114>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
				 ledOneFlag = 1;
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <stateHandlerB+0x110>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
			 }
		 }

		 // No button pushes - Stay in State B
		 stateTracker = 2;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <stateHandlerB+0x148>)
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
	 }
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000004 	.word	0x20000004
 8001348:	20000008 	.word	0x20000008
 800134c:	08009094 	.word	0x08009094
 8001350:	200003f2 	.word	0x200003f2
 8001354:	0800909c 	.word	0x0800909c
 8001358:	200003b0 	.word	0x200003b0
 800135c:	080090a0 	.word	0x080090a0
 8001360:	08009084 	.word	0x08009084
 8001364:	20000084 	.word	0x20000084
 8001368:	00000fff 	.word	0x00000fff
 800136c:	50000800 	.word	0x50000800
 8001370:	200003f8 	.word	0x200003f8
 8001374:	080090ac 	.word	0x080090ac
 8001378:	20000304 	.word	0x20000304
 800137c:	200003f4 	.word	0x200003f4

08001380 <stateHandlerC>:

	 /* State Handler C */
	 void stateHandlerC(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

		 // Turn off LCD
		 I2C_LCD_NoDisplay(MyI2C_LCD);
 8001386:	2000      	movs	r0, #0
 8001388:	f007 f954 	bl	8008634 <I2C_LCD_NoDisplay>

		 // Debug Message
		 sprintf(msg, "State C.\n\r");
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <stateHandlerC+0x84>)
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <stateHandlerC+0x88>)
 8001390:	0011      	movs	r1, r2
 8001392:	0018      	movs	r0, r3
 8001394:	f007 f976 	bl	8008684 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <stateHandlerC+0x88>)
 800139a:	0018      	movs	r0, r3
 800139c:	f7fe febc 	bl	8000118 <strlen>
 80013a0:	0003      	movs	r3, r0
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	2301      	movs	r3, #1
 80013a6:	425b      	negs	r3, r3
 80013a8:	4917      	ldr	r1, [pc, #92]	; (8001408 <stateHandlerC+0x88>)
 80013aa:	4818      	ldr	r0, [pc, #96]	; (800140c <stateHandlerC+0x8c>)
 80013ac:	f004 fd9c 	bl	8005ee8 <HAL_UART_Transmit>

		 // Turn off UART
		 HAL_UART_DeInit(&huart2);
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <stateHandlerC+0x8c>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f004 fd58 	bl	8005e68 <HAL_UART_DeInit>

		 // Configure GPIO pin : PA2 (UART TX) to GPIO
		 turnUartIntoGPIO();
 80013b8:	f000 f82c 	bl	8001414 <turnUartIntoGPIO>

		 // Start millis timer
		 //HAL_TIM_Base_Start_IT(&htim17);

		 // Set pin to toggle output based on TIM with frequency 1 Hz for 3 seconds
		 for (int i = 0; i < 6; i++){
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	e00d      	b.n	80013de <stateHandlerC+0x5e>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80013c2:	23a0      	movs	r3, #160	; 0xa0
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	2104      	movs	r1, #4
 80013c8:	0018      	movs	r0, r3
 80013ca:	f001 ffd9 	bl	8003380 <HAL_GPIO_TogglePin>
			 //millisTimer = millisProgStart;
			 HAL_Delay(500);	// 500 ms = 1 Hz
 80013ce:	23fa      	movs	r3, #250	; 0xfa
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 fcfc 	bl	8001dd0 <HAL_Delay>
		 for (int i = 0; i < 6; i++){
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3301      	adds	r3, #1
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	ddee      	ble.n	80013c2 <stateHandlerC+0x42>

		 // Turn off millis timer
		 //HAL_TIM_Base_Stop(&htim17);

		 // De-init GPIO PA2
		 HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80013e4:	23a0      	movs	r3, #160	; 0xa0
 80013e6:	05db      	lsls	r3, r3, #23
 80013e8:	2104      	movs	r1, #4
 80013ea:	0018      	movs	r0, r3
 80013ec:	f001 febe 	bl	800316c <HAL_GPIO_DeInit>

		 // Turn back into UART (Tx)
		 MX_USART2_UART_Init();
 80013f0:	f7ff fca0 	bl	8000d34 <MX_USART2_UART_Init>

		 // Return to State A
		 stateTracker = 1;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <stateHandlerC+0x90>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
	 }
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	080090d0 	.word	0x080090d0
 8001408:	20000398 	.word	0x20000398
 800140c:	20000304 	.word	0x20000304
 8001410:	200003f4 	.word	0x200003f4

08001414 <turnUartIntoGPIO>:

	 /* turn UART into GPIO */
	 void turnUartIntoGPIO(void){
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
		 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	0018      	movs	r0, r3
 800141e:	2314      	movs	r3, #20
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f007 f94e 	bl	80086c4 <memset>

		 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <turnUartIntoGPIO+0x68>)
 800142a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <turnUartIntoGPIO+0x68>)
 800142e:	2101      	movs	r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <turnUartIntoGPIO+0x68>)
 8001436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001438:	2201      	movs	r2, #1
 800143a:	4013      	ands	r3, r2
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Configure GPIO pin Output Level
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	2200      	movs	r2, #0
 8001446:	2104      	movs	r1, #4
 8001448:	0018      	movs	r0, r3
 800144a:	f001 ff7c 	bl	8003346 <HAL_GPIO_WritePin>

		 GPIO_InitStruct.Pin = GPIO_PIN_2;
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2204      	movs	r2, #4
 8001452:	601a      	str	r2, [r3, #0]
		 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2201      	movs	r2, #1
 8001458:	605a      	str	r2, [r3, #4]
		 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
		 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2202      	movs	r2, #2
 8001464:	60da      	str	r2, [r3, #12]
		 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	1d3a      	adds	r2, r7, #4
 8001468:	23a0      	movs	r3, #160	; 0xa0
 800146a:	05db      	lsls	r3, r3, #23
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f001 fd18 	bl	8002ea4 <HAL_GPIO_Init>
	 }
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b006      	add	sp, #24
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_TIM_PeriodElapsedCallback>:

	 /* Controller Function for LED1, LED2 and LED3*/
	 // Description: Frequency currently determined by each timer's PSC value.
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

		 // TIM2 controls LED1
		 if(htim->Instance == TIM2){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	05db      	lsls	r3, r3, #23
 8001490:	429a      	cmp	r2, r3
 8001492:	d109      	bne.n	80014a8 <HAL_TIM_PeriodElapsedCallback+0x28>
			 if (ledOneFlag == 1){
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d14e      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0xba>
				 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 ff6d 	bl	8003380 <HAL_GPIO_TogglePin>
		 }
		 // TIM17 counts up to 1 ms
		 else if(htim->Instance == TIM17){
			 millisProgStart+=1;
		 }
	 }
 80014a6:	e048      	b.n	800153a <HAL_TIM_PeriodElapsedCallback+0xba>
		 } else if(htim->Instance == TIM6){
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10b      	bne.n	80014ca <HAL_TIM_PeriodElapsedCallback+0x4a>
			 if (ledTwoFlag == 1) {
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d13f      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0xba>
				 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	01db      	lsls	r3, r3, #7
 80014be:	4a25      	ldr	r2, [pc, #148]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80014c0:	0019      	movs	r1, r3
 80014c2:	0010      	movs	r0, r2
 80014c4:	f001 ff5c 	bl	8003380 <HAL_GPIO_TogglePin>
	 }
 80014c8:	e037      	b.n	800153a <HAL_TIM_PeriodElapsedCallback+0xba>
		 } else if(htim->Instance == TIM7){
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a22      	ldr	r2, [pc, #136]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d105      	bne.n	80014e0 <HAL_TIM_PeriodElapsedCallback+0x60>
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80014d4:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80014d6:	2110      	movs	r1, #16
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 ff51 	bl	8003380 <HAL_GPIO_TogglePin>
	 }
 80014de:	e02c      	b.n	800153a <HAL_TIM_PeriodElapsedCallback+0xba>
		 } else if(htim->Instance == TIM14){
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d11c      	bne.n	8001524 <HAL_TIM_PeriodElapsedCallback+0xa4>
			 if (stateTracker == 1){
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d123      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0xba>
				 if (uartFlag == 1){
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d11f      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0xba>
					 sprintf(msg2, "Autumn2024 MX1 SID: 24429298, ADC Reading: %hu\r\n", potValue);
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	001a      	movs	r2, r3
 8001500:	491a      	ldr	r1, [pc, #104]	; (800156c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001504:	0018      	movs	r0, r3
 8001506:	f007 f8bd 	bl	8008684 <siprintf>
					 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800150c:	0018      	movs	r0, r3
 800150e:	f7fe fe03 	bl	8000118 <strlen>
 8001512:	0003      	movs	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	2301      	movs	r3, #1
 8001518:	425b      	negs	r3, r3
 800151a:	4915      	ldr	r1, [pc, #84]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800151c:	4815      	ldr	r0, [pc, #84]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800151e:	f004 fce3 	bl	8005ee8 <HAL_UART_Transmit>
	 }
 8001522:	e00a      	b.n	800153a <HAL_TIM_PeriodElapsedCallback+0xba>
		 else if(htim->Instance == TIM17){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a13      	ldr	r2, [pc, #76]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d105      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0xba>
			 millisProgStart+=1;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001538:	801a      	strh	r2, [r3, #0]
	 }
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	20000004 	.word	0x20000004
 8001548:	50000800 	.word	0x50000800
 800154c:	40001000 	.word	0x40001000
 8001550:	20000008 	.word	0x20000008
 8001554:	50000400 	.word	0x50000400
 8001558:	40001400 	.word	0x40001400
 800155c:	40002000 	.word	0x40002000
 8001560:	200003f4 	.word	0x200003f4
 8001564:	20000000 	.word	0x20000000
 8001568:	200003f2 	.word	0x200003f2
 800156c:	080090dc 	.word	0x080090dc
 8001570:	200003b0 	.word	0x200003b0
 8001574:	20000304 	.word	0x20000304
 8001578:	40014800 	.word	0x40014800
 800157c:	200003f8 	.word	0x200003f8

08001580 <HAL_UART_RxCpltCallback>:

	 /* UART Receive Interrupt Handler */
	 // Handles receiving of bytes
	 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

		 sprintf(msg, "Value Received: %s\r\n", msgRx);
 8001588:	4a3d      	ldr	r2, [pc, #244]	; (8001680 <HAL_UART_RxCpltCallback+0x100>)
 800158a:	493e      	ldr	r1, [pc, #248]	; (8001684 <HAL_UART_RxCpltCallback+0x104>)
 800158c:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 800158e:	0018      	movs	r0, r3
 8001590:	f007 f878 	bl	8008684 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001594:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 8001596:	0018      	movs	r0, r3
 8001598:	f7fe fdbe 	bl	8000118 <strlen>
 800159c:	0003      	movs	r3, r0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	2301      	movs	r3, #1
 80015a2:	425b      	negs	r3, r3
 80015a4:	4938      	ldr	r1, [pc, #224]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 80015a6:	4839      	ldr	r0, [pc, #228]	; (800168c <HAL_UART_RxCpltCallback+0x10c>)
 80015a8:	f004 fc9e 	bl	8005ee8 <HAL_UART_Transmit>

		 if (strcmp(msgRx,"j") == 0) {
 80015ac:	4a38      	ldr	r2, [pc, #224]	; (8001690 <HAL_UART_RxCpltCallback+0x110>)
 80015ae:	4b34      	ldr	r3, [pc, #208]	; (8001680 <HAL_UART_RxCpltCallback+0x100>)
 80015b0:	0011      	movs	r1, r2
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7fe fda6 	bl	8000104 <strcmp>
 80015b8:	1e03      	subs	r3, r0, #0
 80015ba:	d14a      	bne.n	8001652 <HAL_UART_RxCpltCallback+0xd2>
			 if (stateTracker == 1){
 80015bc:	4b35      	ldr	r3, [pc, #212]	; (8001694 <HAL_UART_RxCpltCallback+0x114>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d133      	bne.n	800162c <HAL_UART_RxCpltCallback+0xac>

				if (uartFlag == 0){
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_UART_RxCpltCallback+0x118>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d115      	bne.n	80015f8 <HAL_UART_RxCpltCallback+0x78>
					sprintf(msg, "Turning ON UART.\r\n");
 80015cc:	4a33      	ldr	r2, [pc, #204]	; (800169c <HAL_UART_RxCpltCallback+0x11c>)
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 80015d0:	0011      	movs	r1, r2
 80015d2:	0018      	movs	r0, r3
 80015d4:	f007 f856 	bl	8008684 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80015d8:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f7fe fd9c 	bl	8000118 <strlen>
 80015e0:	0003      	movs	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	2301      	movs	r3, #1
 80015e6:	425b      	negs	r3, r3
 80015e8:	4927      	ldr	r1, [pc, #156]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 80015ea:	4828      	ldr	r0, [pc, #160]	; (800168c <HAL_UART_RxCpltCallback+0x10c>)
 80015ec:	f004 fc7c 	bl	8005ee8 <HAL_UART_Transmit>
					uartFlag = 1;
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_UART_RxCpltCallback+0x118>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
			 }
		 } else {
			 sprintf(msg, "Incorrect key.\r\n");
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
		 }
	 }
 80015f6:	e03e      	b.n	8001676 <HAL_UART_RxCpltCallback+0xf6>
				} else if (uartFlag == 1) {
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_UART_RxCpltCallback+0x118>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d13a      	bne.n	8001676 <HAL_UART_RxCpltCallback+0xf6>
					sprintf(msg, "Turning OFF UART.\r\n");
 8001600:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_UART_RxCpltCallback+0x120>)
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f007 f83c 	bl	8008684 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 800160e:	0018      	movs	r0, r3
 8001610:	f7fe fd82 	bl	8000118 <strlen>
 8001614:	0003      	movs	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	2301      	movs	r3, #1
 800161a:	425b      	negs	r3, r3
 800161c:	491a      	ldr	r1, [pc, #104]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 800161e:	481b      	ldr	r0, [pc, #108]	; (800168c <HAL_UART_RxCpltCallback+0x10c>)
 8001620:	f004 fc62 	bl	8005ee8 <HAL_UART_Transmit>
					uartFlag = 0;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_UART_RxCpltCallback+0x118>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
	 }
 800162a:	e024      	b.n	8001676 <HAL_UART_RxCpltCallback+0xf6>
				 sprintf(msg, "Cannot disable, not in State A.\r\n");
 800162c:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <HAL_UART_RxCpltCallback+0x124>)
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 8001630:	0011      	movs	r1, r2
 8001632:	0018      	movs	r0, r3
 8001634:	f007 f826 	bl	8008684 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 800163a:	0018      	movs	r0, r3
 800163c:	f7fe fd6c 	bl	8000118 <strlen>
 8001640:	0003      	movs	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	2301      	movs	r3, #1
 8001646:	425b      	negs	r3, r3
 8001648:	490f      	ldr	r1, [pc, #60]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 800164a:	4810      	ldr	r0, [pc, #64]	; (800168c <HAL_UART_RxCpltCallback+0x10c>)
 800164c:	f004 fc4c 	bl	8005ee8 <HAL_UART_Transmit>
	 }
 8001650:	e011      	b.n	8001676 <HAL_UART_RxCpltCallback+0xf6>
			 sprintf(msg, "Incorrect key.\r\n");
 8001652:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <HAL_UART_RxCpltCallback+0x128>)
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 8001656:	0011      	movs	r1, r2
 8001658:	0018      	movs	r0, r3
 800165a:	f007 f813 	bl	8008684 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 8001660:	0018      	movs	r0, r3
 8001662:	f7fe fd59 	bl	8000118 <strlen>
 8001666:	0003      	movs	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	2301      	movs	r3, #1
 800166c:	425b      	negs	r3, r3
 800166e:	4906      	ldr	r1, [pc, #24]	; (8001688 <HAL_UART_RxCpltCallback+0x108>)
 8001670:	4806      	ldr	r0, [pc, #24]	; (800168c <HAL_UART_RxCpltCallback+0x10c>)
 8001672:	f004 fc39 	bl	8005ee8 <HAL_UART_Transmit>
	 }
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b002      	add	sp, #8
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	200003ec 	.word	0x200003ec
 8001684:	08009110 	.word	0x08009110
 8001688:	20000398 	.word	0x20000398
 800168c:	20000304 	.word	0x20000304
 8001690:	08009128 	.word	0x08009128
 8001694:	200003f4 	.word	0x200003f4
 8001698:	20000000 	.word	0x20000000
 800169c:	0800912c 	.word	0x0800912c
 80016a0:	08009140 	.word	0x08009140
 80016a4:	08009154 	.word	0x08009154
 80016a8:	08009178 	.word	0x08009178

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_MspInit+0x4c>)
 80016c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_MspInit+0x4c>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	430a      	orrs	r2, r1
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	2201      	movs	r2, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_MspInit+0x4c>)
 80016d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MspInit+0x4c>)
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0549      	lsls	r1, r1, #21
 80016e0:	430a      	orrs	r2, r1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <HAL_MspInit+0x4c>)
 80016e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	055b      	lsls	r3, r3, #21
 80016ec:	4013      	ands	r3, r2
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80016f2:	23c0      	movs	r3, #192	; 0xc0
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 fb8e 	bl	8001e18 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	2414      	movs	r4, #20
 8001712:	193b      	adds	r3, r7, r4
 8001714:	0018      	movs	r0, r3
 8001716:	2314      	movs	r3, #20
 8001718:	001a      	movs	r2, r3
 800171a:	2100      	movs	r1, #0
 800171c:	f006 ffd2 	bl	80086c4 <memset>
  if(hadc->Instance==ADC1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_ADC_MspInit+0x80>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d129      	bne.n	800177e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_ADC_MspInit+0x84>)
 800172c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_ADC_MspInit+0x84>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0349      	lsls	r1, r1, #13
 8001734:	430a      	orrs	r2, r1
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_ADC_MspInit+0x84>)
 800173a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	035b      	lsls	r3, r3, #13
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_ADC_MspInit+0x84>)
 8001748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_ADC_MspInit+0x84>)
 800174c:	2101      	movs	r1, #1
 800174e:	430a      	orrs	r2, r1
 8001750:	635a      	str	r2, [r3, #52]	; 0x34
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_ADC_MspInit+0x84>)
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	2201      	movs	r2, #1
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001764:	193b      	adds	r3, r7, r4
 8001766:	2203      	movs	r2, #3
 8001768:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001770:	193a      	adds	r2, r7, r4
 8001772:	23a0      	movs	r3, #160	; 0xa0
 8001774:	05db      	lsls	r3, r3, #23
 8001776:	0011      	movs	r1, r2
 8001778:	0018      	movs	r0, r3
 800177a:	f001 fb93 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b00b      	add	sp, #44	; 0x2c
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	40012400 	.word	0x40012400
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b097      	sub	sp, #92	; 0x5c
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	2344      	movs	r3, #68	; 0x44
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	0018      	movs	r0, r3
 800179e:	2314      	movs	r3, #20
 80017a0:	001a      	movs	r2, r3
 80017a2:	2100      	movs	r1, #0
 80017a4:	f006 ff8e 	bl	80086c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	2410      	movs	r4, #16
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	0018      	movs	r0, r3
 80017ae:	2334      	movs	r3, #52	; 0x34
 80017b0:	001a      	movs	r2, r3
 80017b2:	2100      	movs	r1, #0
 80017b4:	f006 ff86 	bl	80086c4 <memset>
  if(hi2c->Instance==I2C1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <HAL_I2C_MspInit+0xb8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d13e      	bne.n	8001840 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	2220      	movs	r2, #32
 80017c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	0018      	movs	r0, r3
 80017d2:	f002 ffa7 	bl	8004724 <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017da:	f7ff ff67 	bl	80016ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_I2C_MspInit+0xbc>)
 80017e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_I2C_MspInit+0xbc>)
 80017e4:	2102      	movs	r1, #2
 80017e6:	430a      	orrs	r2, r1
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_I2C_MspInit+0xbc>)
 80017ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017f6:	2144      	movs	r1, #68	; 0x44
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	22c0      	movs	r2, #192	; 0xc0
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2212      	movs	r2, #18
 8001804:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	187b      	adds	r3, r7, r1
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001812:	187b      	adds	r3, r7, r1
 8001814:	2206      	movs	r2, #6
 8001816:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	187b      	adds	r3, r7, r1
 800181a:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_I2C_MspInit+0xc0>)
 800181c:	0019      	movs	r1, r3
 800181e:	0010      	movs	r0, r2
 8001820:	f001 fb40 	bl	8002ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_I2C_MspInit+0xbc>)
 8001826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_I2C_MspInit+0xbc>)
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0389      	lsls	r1, r1, #14
 800182e:	430a      	orrs	r2, r1
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_I2C_MspInit+0xbc>)
 8001834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	039b      	lsls	r3, r3, #14
 800183a:	4013      	ands	r3, r2
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b017      	add	sp, #92	; 0x5c
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	40005400 	.word	0x40005400
 800184c:	40021000 	.word	0x40021000
 8001850:	50000400 	.word	0x50000400

08001854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	05db      	lsls	r3, r3, #23
 8001864:	429a      	cmp	r2, r3
 8001866:	d114      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001868:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 800186a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186c:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 800186e:	2101      	movs	r1, #1
 8001870:	430a      	orrs	r2, r1
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
 8001874:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 8001876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001878:	2201      	movs	r2, #1
 800187a:	4013      	ands	r3, r2
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	200f      	movs	r0, #15
 8001886:	f001 f9ff 	bl	8002c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800188a:	200f      	movs	r0, #15
 800188c:	f001 fa11 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001890:	e07c      	b.n	800198c <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM3)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a40      	ldr	r2, [pc, #256]	; (8001998 <HAL_TIM_Base_MspInit+0x144>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d10c      	bne.n	80018b6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 800189e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018a0:	4b3c      	ldr	r3, [pc, #240]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 80018a2:	2102      	movs	r1, #2
 80018a4:	430a      	orrs	r2, r1
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 80018aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ac:	2202      	movs	r2, #2
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	69bb      	ldr	r3, [r7, #24]
}
 80018b4:	e06a      	b.n	800198c <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM6)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_TIM_Base_MspInit+0x148>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d114      	bne.n	80018ea <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018c0:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 80018c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 80018c6:	2110      	movs	r1, #16
 80018c8:	430a      	orrs	r2, r1
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	2210      	movs	r2, #16
 80018d2:	4013      	ands	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2011      	movs	r0, #17
 80018de:	f001 f9d3 	bl	8002c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80018e2:	2011      	movs	r0, #17
 80018e4:	f001 f9e5 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
}
 80018e8:	e050      	b.n	800198c <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM7)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a2c      	ldr	r2, [pc, #176]	; (80019a0 <HAL_TIM_Base_MspInit+0x14c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d114      	bne.n	800191e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 80018f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 80018fa:	2120      	movs	r1, #32
 80018fc:	430a      	orrs	r2, r1
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	2220      	movs	r2, #32
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	2012      	movs	r0, #18
 8001912:	f001 f9b9 	bl	8002c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8001916:	2012      	movs	r0, #18
 8001918:	f001 f9cb 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
}
 800191c:	e036      	b.n	800198c <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM14)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <HAL_TIM_Base_MspInit+0x150>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d116      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 800192a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0209      	lsls	r1, r1, #8
 8001932:	430a      	orrs	r2, r1
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 8001938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	4013      	ands	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2013      	movs	r0, #19
 800194a:	f001 f99d 	bl	8002c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800194e:	2013      	movs	r0, #19
 8001950:	f001 f9af 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
}
 8001954:	e01a      	b.n	800198c <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM17)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <HAL_TIM_Base_MspInit+0x154>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d115      	bne.n	800198c <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 8001962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	02c9      	lsls	r1, r1, #11
 800196a:	430a      	orrs	r2, r1
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_TIM_Base_MspInit+0x140>)
 8001970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	02db      	lsls	r3, r3, #11
 8001976:	4013      	ands	r3, r2
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	2016      	movs	r0, #22
 8001982:	f001 f981 	bl	8002c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001986:	2016      	movs	r0, #22
 8001988:	f001 f993 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b008      	add	sp, #32
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	40000400 	.word	0x40000400
 800199c:	40001000 	.word	0x40001000
 80019a0:	40001400 	.word	0x40001400
 80019a4:	40002000 	.word	0x40002000
 80019a8:	40014800 	.word	0x40014800

080019ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	240c      	movs	r4, #12
 80019b6:	193b      	adds	r3, r7, r4
 80019b8:	0018      	movs	r0, r3
 80019ba:	2314      	movs	r3, #20
 80019bc:	001a      	movs	r2, r3
 80019be:	2100      	movs	r1, #0
 80019c0:	f006 fe80 	bl	80086c4 <memset>
  if(htim->Instance==TIM3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <HAL_TIM_MspPostInit+0x70>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <HAL_TIM_MspPostInit+0x74>)
 80019d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_TIM_MspPostInit+0x74>)
 80019d4:	2101      	movs	r1, #1
 80019d6:	430a      	orrs	r2, r1
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_TIM_MspPostInit+0x74>)
 80019dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019e6:	0021      	movs	r1, r4
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2202      	movs	r2, #2
 80019f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2201      	movs	r2, #1
 8001a04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	187a      	adds	r2, r7, r1
 8001a08:	23a0      	movs	r3, #160	; 0xa0
 8001a0a:	05db      	lsls	r3, r3, #23
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f001 fa48 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b009      	add	sp, #36	; 0x24
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40021000 	.word	0x40021000

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b097      	sub	sp, #92	; 0x5c
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	2344      	movs	r3, #68	; 0x44
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	0018      	movs	r0, r3
 8001a32:	2314      	movs	r3, #20
 8001a34:	001a      	movs	r2, r3
 8001a36:	2100      	movs	r1, #0
 8001a38:	f006 fe44 	bl	80086c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3c:	2410      	movs	r4, #16
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	0018      	movs	r0, r3
 8001a42:	2334      	movs	r3, #52	; 0x34
 8001a44:	001a      	movs	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	f006 fe3c 	bl	80086c4 <memset>
  if(huart->Instance==USART2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a26      	ldr	r2, [pc, #152]	; (8001aec <HAL_UART_MspInit+0xc8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d146      	bne.n	8001ae4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a56:	193b      	adds	r3, r7, r4
 8001a58:	2202      	movs	r2, #2
 8001a5a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a5c:	193b      	adds	r3, r7, r4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	0018      	movs	r0, r3
 8001a66:	f002 fe5d 	bl	8004724 <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a6e:	f7ff fe1d 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	0289      	lsls	r1, r1, #10
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	029b      	lsls	r3, r3, #10
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001aa6:	2144      	movs	r1, #68	; 0x44
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	220c      	movs	r2, #12
 8001aac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac6:	187a      	adds	r2, r7, r1
 8001ac8:	23a0      	movs	r3, #160	; 0xa0
 8001aca:	05db      	lsls	r3, r3, #23
 8001acc:	0011      	movs	r1, r2
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f001 f9e8 	bl	8002ea4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	201c      	movs	r0, #28
 8001ada:	f001 f8d5 	bl	8002c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ade:	201c      	movs	r0, #28
 8001ae0:	f001 f8e7 	bl	8002cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b017      	add	sp, #92	; 0x5c
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	40004400 	.word	0x40004400
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_UART_MspDeInit+0x38>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10e      	bne.n	8001b24 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_UART_MspDeInit+0x3c>)
 8001b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_UART_MspDeInit+0x3c>)
 8001b0c:	4909      	ldr	r1, [pc, #36]	; (8001b34 <HAL_UART_MspDeInit+0x40>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART2_TX_Pin|USART2_RX_Pin);
 8001b12:	23a0      	movs	r3, #160	; 0xa0
 8001b14:	05db      	lsls	r3, r3, #23
 8001b16:	210c      	movs	r1, #12
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f001 fb27 	bl	800316c <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001b1e:	201c      	movs	r0, #28
 8001b20:	f001 f8d7 	bl	8002cd2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b002      	add	sp, #8
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40004400 	.word	0x40004400
 8001b30:	40021000 	.word	0x40021000
 8001b34:	fffdffff 	.word	0xfffdffff

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	e7fe      	b.n	8001b3c <NMI_Handler+0x4>

08001b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <HardFault_Handler+0x4>

08001b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5c:	f000 f91c 	bl	8001d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <TIM2_IRQHandler+0x14>)
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f003 f98e 	bl	8004e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	2000013c 	.word	0x2000013c

08001b80 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001b86:	0018      	movs	r0, r3
 8001b88:	f003 f982 	bl	8004e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	200001d4 	.word	0x200001d4

08001b98 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <TIM7_LPTIM2_IRQHandler+0x14>)
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f003 f976 	bl	8004e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	20000220 	.word	0x20000220

08001bb0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <TIM14_IRQHandler+0x14>)
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f003 f96a 	bl	8004e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	2000026c 	.word	0x2000026c

08001bc8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <TIM17_IRQHandler+0x14>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f003 f95e 	bl	8004e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001bd4:	46c0      	nop			; (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	200002b8 	.word	0x200002b8

08001be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <USART2_IRQHandler+0x14>)
 8001be6:	0018      	movs	r0, r3
 8001be8:	f004 fa80 	bl	80060ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000304 	.word	0x20000304

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	18d3      	adds	r3, r2, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c28:	f006 fd54 	bl	80086d4 <__errno>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	425b      	negs	r3, r3
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	18d2      	adds	r2, r2, r3
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <_sbrk+0x64>)
 8001c48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b006      	add	sp, #24
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20009000 	.word	0x20009000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	200003fc 	.word	0x200003fc
 8001c60:	20000550 	.word	0x20000550

08001c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c70:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c74:	f7ff fff6 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c78:	480c      	ldr	r0, [pc, #48]	; (8001cac <LoopForever+0x6>)
  ldr r1, =_edata
 8001c7a:	490d      	ldr	r1, [pc, #52]	; (8001cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <LoopForever+0xe>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c90:	4c0a      	ldr	r4, [pc, #40]	; (8001cbc <LoopForever+0x16>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c9e:	f006 fd1f 	bl	80086e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001ca2:	f7fe fcd7 	bl	8000654 <main>

08001ca6 <LoopForever>:

LoopForever:
  b LoopForever
 8001ca6:	e7fe      	b.n	8001ca6 <LoopForever>
  ldr   r0, =_estack
 8001ca8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001cb4:	080092c8 	.word	0x080092c8
  ldr r2, =_sbss
 8001cb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001cbc:	20000550 	.word	0x20000550

08001cc0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC1_COMP_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cca:	1dfb      	adds	r3, r7, #7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_Init+0x3c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_Init+0x3c>)
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	0049      	lsls	r1, r1, #1
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f000 f810 	bl	8001d04 <HAL_InitTick>
 8001ce4:	1e03      	subs	r3, r0, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ce8:	1dfb      	adds	r3, r7, #7
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e001      	b.n	8001cf4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001cf0:	f7ff fce2 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	781b      	ldrb	r3, [r3, #0]
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40022000 	.word	0x40022000

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_InitTick+0x88>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d02b      	beq.n	8001d74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_InitTick+0x8c>)
 8001d1e:	681c      	ldr	r4, [r3, #0]
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <HAL_InitTick+0x88>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	0019      	movs	r1, r3
 8001d26:	23fa      	movs	r3, #250	; 0xfa
 8001d28:	0098      	lsls	r0, r3, #2
 8001d2a:	f7fe fa07 	bl	800013c <__udivsi3>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	0019      	movs	r1, r3
 8001d32:	0020      	movs	r0, r4
 8001d34:	f7fe fa02 	bl	800013c <__udivsi3>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 ffd9 	bl	8002cf2 <HAL_SYSTICK_Config>
 8001d40:	1e03      	subs	r3, r0, #0
 8001d42:	d112      	bne.n	8001d6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d80a      	bhi.n	8001d60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	425b      	negs	r3, r3
 8001d50:	2200      	movs	r2, #0
 8001d52:	0018      	movs	r0, r3
 8001d54:	f000 ff98 	bl	8002c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_InitTick+0x90>)
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e00d      	b.n	8001d7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d60:	230f      	movs	r3, #15
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	e008      	b.n	8001d7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e003      	b.n	8001d7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d74:	230f      	movs	r3, #15
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781b      	ldrb	r3, [r3, #0]
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b005      	add	sp, #20
 8001d88:	bd90      	pop	{r4, r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	20000014 	.word	0x20000014
 8001d90:	2000000c 	.word	0x2000000c
 8001d94:	20000010 	.word	0x20000010

08001d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_IncTick+0x1c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	001a      	movs	r2, r3
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_IncTick+0x20>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	18d2      	adds	r2, r2, r3
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_IncTick+0x20>)
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	20000014 	.word	0x20000014
 8001db8:	20000400 	.word	0x20000400

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <HAL_GetTick+0x10>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	20000400 	.word	0x20000400

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff fff0 	bl	8001dbc <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	001a      	movs	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	189b      	adds	r3, r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	f7ff ffe0 	bl	8001dbc <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b004      	add	sp, #16
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	20000014 	.word	0x20000014

08001e18 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b002      	add	sp, #8
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	fffff9ff 	.word	0xfffff9ff

08001e44 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001e54:	401a      	ands	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b002      	add	sp, #8
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	fe3fffff 	.word	0xfe3fffff

08001e6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	23e0      	movs	r3, #224	; 0xe0
 8001e7a:	045b      	lsls	r3, r3, #17
 8001e7c:	4013      	ands	r3, r2
}
 8001e7e:	0018      	movs	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	2104      	movs	r1, #4
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	2107      	movs	r1, #7
 8001e9e:	4091      	lsls	r1, r2
 8001ea0:	000a      	movs	r2, r1
 8001ea2:	43d2      	mvns	r2, r2
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	400b      	ands	r3, r1
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4099      	lsls	r1, r3
 8001eb0:	000b      	movs	r3, r1
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b004      	add	sp, #16
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	2107      	movs	r1, #7
 8001ed6:	4091      	lsls	r1, r2
 8001ed8:	000a      	movs	r2, r1
 8001eda:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2104      	movs	r1, #4
 8001ee0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001ee2:	40da      	lsrs	r2, r3
 8001ee4:	0013      	movs	r3, r2
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b002      	add	sp, #8
 8001eec:	bd80      	pop	{r7, pc}

08001eee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	23c0      	movs	r3, #192	; 0xc0
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	4013      	ands	r3, r2
 8001f00:	d101      	bne.n	8001f06 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	211f      	movs	r1, #31
 8001f24:	400a      	ands	r2, r1
 8001f26:	210f      	movs	r1, #15
 8001f28:	4091      	lsls	r1, r2
 8001f2a:	000a      	movs	r2, r1
 8001f2c:	43d2      	mvns	r2, r2
 8001f2e:	401a      	ands	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	0e9b      	lsrs	r3, r3, #26
 8001f34:	210f      	movs	r1, #15
 8001f36:	4019      	ands	r1, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	201f      	movs	r0, #31
 8001f3c:	4003      	ands	r3, r0
 8001f3e:	4099      	lsls	r1, r3
 8001f40:	000b      	movs	r3, r1
 8001f42:	431a      	orrs	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b004      	add	sp, #16
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	035b      	lsls	r3, r3, #13
 8001f62:	0b5b      	lsrs	r3, r3, #13
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	0352      	lsls	r2, r2, #13
 8001f84:	0b52      	lsrs	r2, r2, #13
 8001f86:	43d2      	mvns	r2, r2
 8001f88:	401a      	ands	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	0212      	lsls	r2, r2, #8
 8001fac:	43d2      	mvns	r2, r2
 8001fae:	401a      	ands	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	4904      	ldr	r1, [pc, #16]	; (8001fcc <LL_ADC_SetChannelSamplingTime+0x34>)
 8001fba:	400b      	ands	r3, r1
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b004      	add	sp, #16
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	07ffff00 	.word	0x07ffff00

08001fd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	0552      	lsls	r2, r2, #21
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	6fffffe8 	.word	0x6fffffe8

08001ff8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	055b      	lsls	r3, r3, #21
 8002008:	401a      	ands	r2, r3
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	055b      	lsls	r3, r3, #21
 800200e:	429a      	cmp	r2, r3
 8002010:	d101      	bne.n	8002016 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002016:	2300      	movs	r3, #0
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <LL_ADC_Enable+0x20>)
 800202e:	4013      	ands	r3, r2
 8002030:	2201      	movs	r2, #1
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}
 8002040:	7fffffe8 	.word	0x7fffffe8

08002044 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <LL_ADC_IsEnabled+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_ADC_IsEnabled+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b002      	add	sp, #8
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <LL_ADC_REG_StartConversion+0x20>)
 8002076:	4013      	ands	r3, r2
 8002078:	2204      	movs	r2, #4
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002080:	46c0      	nop			; (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	b002      	add	sp, #8
 8002086:	bd80      	pop	{r7, pc}
 8002088:	7fffffe8 	.word	0x7fffffe8

0800208c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2204      	movs	r2, #4
 800209a:	4013      	ands	r3, r2
 800209c:	2b04      	cmp	r3, #4
 800209e:	d101      	bne.n	80020a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b8:	231f      	movs	r3, #31
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e17f      	b.n	80023d6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff fb11 	bl	8001708 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2254      	movs	r2, #84	; 0x54
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff ff7d 	bl	8001ff8 <LL_ADC_IsInternalRegulatorEnabled>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d115      	bne.n	800212e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff ff62 	bl	8001fd0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4bb4      	ldr	r3, [pc, #720]	; (80023e0 <HAL_ADC_Init+0x330>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	49b4      	ldr	r1, [pc, #720]	; (80023e4 <HAL_ADC_Init+0x334>)
 8002112:	0018      	movs	r0, r3
 8002114:	f7fe f812 	bl	800013c <__udivsi3>
 8002118:	0003      	movs	r3, r0
 800211a:	3301      	adds	r3, #1
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002120:	e002      	b.n	8002128 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3b01      	subs	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	0018      	movs	r0, r3
 8002134:	f7ff ff60 	bl	8001ff8 <LL_ADC_IsInternalRegulatorEnabled>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d10f      	bne.n	800215c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	2210      	movs	r2, #16
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	2201      	movs	r2, #1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002154:	231f      	movs	r3, #31
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff ff93 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 8002166:	0003      	movs	r3, r0
 8002168:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	2210      	movs	r2, #16
 8002170:	4013      	ands	r3, r2
 8002172:	d000      	beq.n	8002176 <HAL_ADC_Init+0xc6>
 8002174:	e122      	b.n	80023bc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d000      	beq.n	800217e <HAL_ADC_Init+0xce>
 800217c:	e11e      	b.n	80023bc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a99      	ldr	r2, [pc, #612]	; (80023e8 <HAL_ADC_Init+0x338>)
 8002184:	4013      	ands	r3, r2
 8002186:	2202      	movs	r2, #2
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0018      	movs	r0, r3
 8002194:	f7ff ff56 	bl	8002044 <LL_ADC_IsEnabled>
 8002198:	1e03      	subs	r3, r0, #0
 800219a:	d000      	beq.n	800219e <HAL_ADC_Init+0xee>
 800219c:	e0ad      	b.n	80022fa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7e1b      	ldrb	r3, [r3, #24]
 80021a6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021a8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7e5b      	ldrb	r3, [r3, #25]
 80021ae:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021b0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7e9b      	ldrb	r3, [r3, #26]
 80021b6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_ADC_Init+0x118>
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	015b      	lsls	r3, r3, #5
 80021c6:	e000      	b.n	80021ca <HAL_ADC_Init+0x11a>
 80021c8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021ca:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021d0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da04      	bge.n	80021e4 <HAL_ADC_Init+0x134>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	085b      	lsrs	r3, r3, #1
 80021e2:	e001      	b.n	80021e8 <HAL_ADC_Init+0x138>
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80021e8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	5c5b      	ldrb	r3, [r3, r1]
 80021f0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021f2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	5c9b      	ldrb	r3, [r3, r2]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d115      	bne.n	8002230 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7e9b      	ldrb	r3, [r3, #26]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	0252      	lsls	r2, r2, #9
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e00b      	b.n	8002230 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	2220      	movs	r2, #32
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2201      	movs	r2, #1
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223c:	23e0      	movs	r3, #224	; 0xe0
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002246:	4313      	orrs	r3, r2
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_ADC_Init+0x33c>)
 8002256:	4013      	ands	r3, r2
 8002258:	0019      	movs	r1, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	0f9b      	lsrs	r3, r3, #30
 800226a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002270:	4313      	orrs	r3, r2
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	223c      	movs	r2, #60	; 0x3c
 800227c:	5c9b      	ldrb	r3, [r3, r2]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d111      	bne.n	80022a6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	0f9b      	lsrs	r3, r3, #30
 8002288:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800228e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002294:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800229a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	2201      	movs	r2, #1
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	4a50      	ldr	r2, [pc, #320]	; (80023f0 <HAL_ADC_Init+0x340>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	23c0      	movs	r3, #192	; 0xc0
 80022c2:	061b      	lsls	r3, r3, #24
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d018      	beq.n	80022fa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	05db      	lsls	r3, r3, #23
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d012      	beq.n	80022fa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	061b      	lsls	r3, r3, #24
 80022dc:	429a      	cmp	r2, r3
 80022de:	d00c      	beq.n	80022fa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80022e0:	4b44      	ldr	r3, [pc, #272]	; (80023f4 <HAL_ADC_Init+0x344>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a44      	ldr	r2, [pc, #272]	; (80023f8 <HAL_ADC_Init+0x348>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	23f0      	movs	r3, #240	; 0xf0
 80022f0:	039b      	lsls	r3, r3, #14
 80022f2:	401a      	ands	r2, r3
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_ADC_Init+0x344>)
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	001a      	movs	r2, r3
 8002304:	2100      	movs	r1, #0
 8002306:	f7ff fdbe 	bl	8001e86 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	493a      	ldr	r1, [pc, #232]	; (80023fc <HAL_ADC_Init+0x34c>)
 8002314:	001a      	movs	r2, r3
 8002316:	f7ff fdb6 	bl	8001e86 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2110      	movs	r1, #16
 800232e:	4249      	negs	r1, r1
 8002330:	430a      	orrs	r2, r1
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
 8002334:	e018      	b.n	8002368 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	039b      	lsls	r3, r3, #14
 800233e:	429a      	cmp	r2, r3
 8002340:	d112      	bne.n	8002368 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	3b01      	subs	r3, #1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	221c      	movs	r2, #28
 8002352:	4013      	ands	r3, r2
 8002354:	2210      	movs	r2, #16
 8002356:	4252      	negs	r2, r2
 8002358:	409a      	lsls	r2, r3
 800235a:	0011      	movs	r1, r2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2100      	movs	r1, #0
 800236e:	0018      	movs	r0, r3
 8002370:	f7ff fda6 	bl	8001ec0 <LL_ADC_GetSamplingTimeCommonChannels>
 8002374:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800237a:	429a      	cmp	r2, r3
 800237c:	d10b      	bne.n	8002396 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	2203      	movs	r2, #3
 800238a:	4393      	bics	r3, r2
 800238c:	2201      	movs	r2, #1
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002394:	e01c      	b.n	80023d0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	2212      	movs	r2, #18
 800239c:	4393      	bics	r3, r2
 800239e:	2210      	movs	r2, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	2201      	movs	r2, #1
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80023b2:	231f      	movs	r3, #31
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023ba:	e009      	b.n	80023d0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	2210      	movs	r2, #16
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023c8:	231f      	movs	r3, #31
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80023d0:	231f      	movs	r3, #31
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	781b      	ldrb	r3, [r3, #0]
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b008      	add	sp, #32
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	2000000c 	.word	0x2000000c
 80023e4:	00030d40 	.word	0x00030d40
 80023e8:	fffffefd 	.word	0xfffffefd
 80023ec:	ffde0201 	.word	0xffde0201
 80023f0:	1ffffc02 	.word	0x1ffffc02
 80023f4:	40012708 	.word	0x40012708
 80023f8:	ffc3ffff 	.word	0xffc3ffff
 80023fc:	07ffff04 	.word	0x07ffff04

08002400 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d102      	bne.n	8002418 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002412:	2308      	movs	r3, #8
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	e00f      	b.n	8002438 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	4013      	ands	r3, r2
 8002422:	d007      	beq.n	8002434 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002428:	2220      	movs	r2, #32
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e072      	b.n	800251a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002434:	2304      	movs	r3, #4
 8002436:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002438:	f7ff fcc0 	bl	8001dbc <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002440:	e01f      	b.n	8002482 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	d01c      	beq.n	8002482 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002448:	f7ff fcb8 	bl	8001dbc <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d302      	bcc.n	800245e <HAL_ADC_PollForConversion+0x5e>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d111      	bne.n	8002482 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	d10b      	bne.n	8002482 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	2204      	movs	r2, #4
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2254      	movs	r2, #84	; 0x54
 800247a:	2100      	movs	r1, #0
 800247c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e04b      	b.n	800251a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4013      	ands	r3, r2
 800248c:	d0d9      	beq.n	8002442 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7ff fd24 	bl	8001eee <LL_ADC_REG_IsTriggerSourceSWStart>
 80024a6:	1e03      	subs	r3, r0, #0
 80024a8:	d02e      	beq.n	8002508 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7e9b      	ldrb	r3, [r3, #26]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d12a      	bne.n	8002508 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2208      	movs	r2, #8
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d123      	bne.n	8002508 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff fde1 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d110      	bne.n	80024f0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	210c      	movs	r1, #12
 80024da:	438a      	bics	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_ADC_PollForConversion+0x124>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	2201      	movs	r2, #1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	659a      	str	r2, [r3, #88]	; 0x58
 80024ee:	e00b      	b.n	8002508 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	2220      	movs	r2, #32
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2201      	movs	r2, #1
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e1b      	ldrb	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d103      	bne.n	8002518 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	220c      	movs	r2, #12
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b004      	add	sp, #16
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	fffffefe 	.word	0xfffffefe

08002528 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff fda9 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d15f      	bne.n	80025fe <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2254      	movs	r2, #84	; 0x54
 8002542:	5c9b      	ldrb	r3, [r3, r2]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_ADC_Start_IT+0x24>
 8002548:	2302      	movs	r3, #2
 800254a:	e05f      	b.n	800260c <HAL_ADC_Start_IT+0xe4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2254      	movs	r2, #84	; 0x54
 8002550:	2101      	movs	r1, #1
 8002552:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002554:	250f      	movs	r5, #15
 8002556:	197c      	adds	r4, r7, r5
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0018      	movs	r0, r3
 800255c:	f000 fa40 	bl	80029e0 <ADC_Enable>
 8002560:	0003      	movs	r3, r0
 8002562:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002564:	197b      	adds	r3, r7, r5
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d143      	bne.n	80025f4 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_ADC_Start_IT+0xec>)
 8002572:	4013      	ands	r3, r2
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	0052      	lsls	r2, r2, #1
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	221c      	movs	r2, #28
 800258a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2254      	movs	r2, #84	; 0x54
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	211c      	movs	r1, #28
 80025a0:	438a      	bics	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d108      	bne.n	80025be <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2108      	movs	r1, #8
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]
          break;
 80025bc:	e008      	b.n	80025d0 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2104      	movs	r1, #4
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
          break;
 80025ce:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2110      	movs	r1, #16
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7ff fd3b 	bl	8002068 <LL_ADC_REG_StartConversion>
 80025f2:	e008      	b.n	8002606 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2254      	movs	r2, #84	; 0x54
 80025f8:	2100      	movs	r1, #0
 80025fa:	5499      	strb	r1, [r3, r2]
 80025fc:	e003      	b.n	8002606 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025fe:	230f      	movs	r3, #15
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	2202      	movs	r2, #2
 8002604:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002606:	230f      	movs	r3, #15
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	781b      	ldrb	r3, [r3, #0]
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b004      	add	sp, #16
 8002612:	bdb0      	pop	{r4, r5, r7, pc}
 8002614:	fffff0fe 	.word	0xfffff0fe

08002618 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263a:	2317      	movs	r3, #23
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2254      	movs	r2, #84	; 0x54
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x24>
 8002650:	2302      	movs	r3, #2
 8002652:	e1c0      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x3a6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2254      	movs	r2, #84	; 0x54
 8002658:	2101      	movs	r1, #1
 800265a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0018      	movs	r0, r3
 8002662:	f7ff fd13 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d000      	beq.n	800266c <HAL_ADC_ConfigChannel+0x3c>
 800266a:	e1a3      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d100      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x46>
 8002674:	e143      	b.n	80028fe <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	429a      	cmp	r2, r3
 8002680:	d004      	beq.n	800268c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002686:	4ac1      	ldr	r2, [pc, #772]	; (800298c <HAL_ADC_ConfigChannel+0x35c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d108      	bne.n	800269e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0019      	movs	r1, r3
 8002696:	0010      	movs	r0, r2
 8002698:	f7ff fc5a 	bl	8001f50 <LL_ADC_REG_SetSequencerChAdd>
 800269c:	e0c9      	b.n	8002832 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	211f      	movs	r1, #31
 80026a8:	400b      	ands	r3, r1
 80026aa:	210f      	movs	r1, #15
 80026ac:	4099      	lsls	r1, r3
 80026ae:	000b      	movs	r3, r1
 80026b0:	43db      	mvns	r3, r3
 80026b2:	4013      	ands	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	035b      	lsls	r3, r3, #13
 80026bc:	0b5b      	lsrs	r3, r3, #13
 80026be:	d105      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x9c>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	221f      	movs	r2, #31
 80026c8:	4013      	ands	r3, r2
 80026ca:	e098      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	d000      	beq.n	80026d8 <HAL_ADC_ConfigChannel+0xa8>
 80026d6:	e091      	b.n	80027fc <HAL_ADC_ConfigChannel+0x1cc>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	d000      	beq.n	80026e4 <HAL_ADC_ConfigChannel+0xb4>
 80026e2:	e089      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x1c8>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2204      	movs	r2, #4
 80026ea:	4013      	ands	r3, r2
 80026ec:	d000      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0xc0>
 80026ee:	e081      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x1c4>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2208      	movs	r2, #8
 80026f6:	4013      	ands	r3, r2
 80026f8:	d000      	beq.n	80026fc <HAL_ADC_ConfigChannel+0xcc>
 80026fa:	e079      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x1c0>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2210      	movs	r2, #16
 8002702:	4013      	ands	r3, r2
 8002704:	d000      	beq.n	8002708 <HAL_ADC_ConfigChannel+0xd8>
 8002706:	e071      	b.n	80027ec <HAL_ADC_ConfigChannel+0x1bc>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2220      	movs	r2, #32
 800270e:	4013      	ands	r3, r2
 8002710:	d000      	beq.n	8002714 <HAL_ADC_ConfigChannel+0xe4>
 8002712:	e069      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x1b8>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2240      	movs	r2, #64	; 0x40
 800271a:	4013      	ands	r3, r2
 800271c:	d000      	beq.n	8002720 <HAL_ADC_ConfigChannel+0xf0>
 800271e:	e061      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x1b4>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	4013      	ands	r3, r2
 8002728:	d000      	beq.n	800272c <HAL_ADC_ConfigChannel+0xfc>
 800272a:	e059      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x1b0>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4013      	ands	r3, r2
 8002736:	d151      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1ac>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4013      	ands	r3, r2
 8002742:	d149      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1a8>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4013      	ands	r3, r2
 800274e:	d141      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x1a4>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	4013      	ands	r3, r2
 800275a:	d139      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1a0>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	4013      	ands	r3, r2
 8002766:	d131      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x19c>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	019b      	lsls	r3, r3, #6
 8002770:	4013      	ands	r3, r2
 8002772:	d129      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x198>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	01db      	lsls	r3, r3, #7
 800277c:	4013      	ands	r3, r2
 800277e:	d121      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x194>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	4013      	ands	r3, r2
 800278a:	d119      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x190>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	4013      	ands	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x18c>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	4013      	ands	r3, r2
 80027a2:	d109      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x188>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	02db      	lsls	r3, r3, #11
 80027ac:	4013      	ands	r3, r2
 80027ae:	d001      	beq.n	80027b4 <HAL_ADC_ConfigChannel+0x184>
 80027b0:	2312      	movs	r3, #18
 80027b2:	e024      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027b4:	2300      	movs	r3, #0
 80027b6:	e022      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027b8:	2311      	movs	r3, #17
 80027ba:	e020      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027bc:	2310      	movs	r3, #16
 80027be:	e01e      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027c0:	230f      	movs	r3, #15
 80027c2:	e01c      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027c4:	230e      	movs	r3, #14
 80027c6:	e01a      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027c8:	230d      	movs	r3, #13
 80027ca:	e018      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027cc:	230c      	movs	r3, #12
 80027ce:	e016      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027d0:	230b      	movs	r3, #11
 80027d2:	e014      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027d4:	230a      	movs	r3, #10
 80027d6:	e012      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027d8:	2309      	movs	r3, #9
 80027da:	e010      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027dc:	2308      	movs	r3, #8
 80027de:	e00e      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027e0:	2307      	movs	r3, #7
 80027e2:	e00c      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027e4:	2306      	movs	r3, #6
 80027e6:	e00a      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027e8:	2305      	movs	r3, #5
 80027ea:	e008      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e006      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027f0:	2303      	movs	r3, #3
 80027f2:	e004      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e002      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_ADC_ConfigChannel+0x1ce>
 80027fc:	2300      	movs	r3, #0
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	6852      	ldr	r2, [r2, #4]
 8002802:	201f      	movs	r0, #31
 8002804:	4002      	ands	r2, r0
 8002806:	4093      	lsls	r3, r2
 8002808:	000a      	movs	r2, r1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	429a      	cmp	r2, r3
 800281e:	d808      	bhi.n	8002832 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	001a      	movs	r2, r3
 800282e:	f7ff fb6f 	bl	8001f10 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	001a      	movs	r2, r3
 8002840:	f7ff fbaa 	bl	8001f98 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db00      	blt.n	800284e <HAL_ADC_ConfigChannel+0x21e>
 800284c:	e0bc      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800284e:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_ADC_ConfigChannel+0x360>)
 8002850:	0018      	movs	r0, r3
 8002852:	f7ff fb0b 	bl	8001e6c <LL_ADC_GetCommonPathInternalCh>
 8002856:	0003      	movs	r3, r0
 8002858:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a4d      	ldr	r2, [pc, #308]	; (8002994 <HAL_ADC_ConfigChannel+0x364>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d122      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800286c:	d11d      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2280      	movs	r2, #128	; 0x80
 8002872:	0412      	lsls	r2, r2, #16
 8002874:	4313      	orrs	r3, r2
 8002876:	4a46      	ldr	r2, [pc, #280]	; (8002990 <HAL_ADC_ConfigChannel+0x360>)
 8002878:	0019      	movs	r1, r3
 800287a:	0010      	movs	r0, r2
 800287c:	f7ff fae2 	bl	8001e44 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002880:	4b45      	ldr	r3, [pc, #276]	; (8002998 <HAL_ADC_ConfigChannel+0x368>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4945      	ldr	r1, [pc, #276]	; (800299c <HAL_ADC_ConfigChannel+0x36c>)
 8002886:	0018      	movs	r0, r3
 8002888:	f7fd fc58 	bl	800013c <__udivsi3>
 800288c:	0003      	movs	r3, r0
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	0013      	movs	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	189b      	adds	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800289a:	e002      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3b01      	subs	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f9      	bne.n	800289c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028a8:	e08e      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3c      	ldr	r2, [pc, #240]	; (80029a0 <HAL_ADC_ConfigChannel+0x370>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d10e      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	045b      	lsls	r3, r3, #17
 80028ba:	4013      	ands	r3, r2
 80028bc:	d109      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	0452      	lsls	r2, r2, #17
 80028c4:	4313      	orrs	r3, r2
 80028c6:	4a32      	ldr	r2, [pc, #200]	; (8002990 <HAL_ADC_ConfigChannel+0x360>)
 80028c8:	0019      	movs	r1, r3
 80028ca:	0010      	movs	r0, r2
 80028cc:	f7ff faba 	bl	8001e44 <LL_ADC_SetCommonPathInternalCh>
 80028d0:	e07a      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a33      	ldr	r2, [pc, #204]	; (80029a4 <HAL_ADC_ConfigChannel+0x374>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d000      	beq.n	80028de <HAL_ADC_ConfigChannel+0x2ae>
 80028dc:	e074      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	03db      	lsls	r3, r3, #15
 80028e4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80028e6:	d000      	beq.n	80028ea <HAL_ADC_ConfigChannel+0x2ba>
 80028e8:	e06e      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	03d2      	lsls	r2, r2, #15
 80028f0:	4313      	orrs	r3, r2
 80028f2:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_ADC_ConfigChannel+0x360>)
 80028f4:	0019      	movs	r1, r3
 80028f6:	0010      	movs	r0, r2
 80028f8:	f7ff faa4 	bl	8001e44 <LL_ADC_SetCommonPathInternalCh>
 80028fc:	e064      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	429a      	cmp	r2, r3
 8002908:	d004      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_ADC_ConfigChannel+0x35c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d107      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0019      	movs	r1, r3
 800291e:	0010      	movs	r0, r2
 8002920:	f7ff fb27 	bl	8001f72 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	da4d      	bge.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_ADC_ConfigChannel+0x360>)
 800292e:	0018      	movs	r0, r3
 8002930:	f7ff fa9c 	bl	8001e6c <LL_ADC_GetCommonPathInternalCh>
 8002934:	0003      	movs	r3, r0
 8002936:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <HAL_ADC_ConfigChannel+0x364>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d108      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_ADC_ConfigChannel+0x378>)
 8002946:	4013      	ands	r3, r2
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <HAL_ADC_ConfigChannel+0x360>)
 800294a:	0019      	movs	r1, r3
 800294c:	0010      	movs	r0, r2
 800294e:	f7ff fa79 	bl	8001e44 <LL_ADC_SetCommonPathInternalCh>
 8002952:	e039      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a11      	ldr	r2, [pc, #68]	; (80029a0 <HAL_ADC_ConfigChannel+0x370>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_ADC_ConfigChannel+0x37c>)
 8002962:	4013      	ands	r3, r2
 8002964:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_ADC_ConfigChannel+0x360>)
 8002966:	0019      	movs	r1, r3
 8002968:	0010      	movs	r0, r2
 800296a:	f7ff fa6b 	bl	8001e44 <LL_ADC_SetCommonPathInternalCh>
 800296e:	e02b      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <HAL_ADC_ConfigChannel+0x374>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d126      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_ADC_ConfigChannel+0x380>)
 800297e:	4013      	ands	r3, r2
 8002980:	4a03      	ldr	r2, [pc, #12]	; (8002990 <HAL_ADC_ConfigChannel+0x360>)
 8002982:	0019      	movs	r1, r3
 8002984:	0010      	movs	r0, r2
 8002986:	f7ff fa5d 	bl	8001e44 <LL_ADC_SetCommonPathInternalCh>
 800298a:	e01d      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x398>
 800298c:	80000004 	.word	0x80000004
 8002990:	40012708 	.word	0x40012708
 8002994:	b0001000 	.word	0xb0001000
 8002998:	2000000c 	.word	0x2000000c
 800299c:	00030d40 	.word	0x00030d40
 80029a0:	b8004000 	.word	0xb8004000
 80029a4:	b4002000 	.word	0xb4002000
 80029a8:	ff7fffff 	.word	0xff7fffff
 80029ac:	feffffff 	.word	0xfeffffff
 80029b0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	2220      	movs	r2, #32
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029c0:	2317      	movs	r3, #23
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2254      	movs	r2, #84	; 0x54
 80029cc:	2100      	movs	r1, #0
 80029ce:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80029d0:	2317      	movs	r3, #23
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	781b      	ldrb	r3, [r3, #0]
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b006      	add	sp, #24
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)

080029e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff fb27 	bl	8002044 <LL_ADC_IsEnabled>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d000      	beq.n	80029fc <ADC_Enable+0x1c>
 80029fa:	e069      	b.n	8002ad0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4a36      	ldr	r2, [pc, #216]	; (8002adc <ADC_Enable+0xfc>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	d00d      	beq.n	8002a24 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2201      	movs	r2, #1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e056      	b.n	8002ad2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff faf9 	bl	8002020 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <ADC_Enable+0x100>)
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7ff fa1b 	bl	8001e6c <LL_ADC_GetCommonPathInternalCh>
 8002a36:	0002      	movs	r2, r0
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d00f      	beq.n	8002a60 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <ADC_Enable+0x104>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4928      	ldr	r1, [pc, #160]	; (8002ae8 <ADC_Enable+0x108>)
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7fd fb78 	bl	800013c <__udivsi3>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002a50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a52:	e002      	b.n	8002a5a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7e5b      	ldrb	r3, [r3, #25]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d033      	beq.n	8002ad0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002a68:	f7ff f9a8 	bl	8001dbc <HAL_GetTick>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a70:	e027      	b.n	8002ac2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7ff fae4 	bl	8002044 <LL_ADC_IsEnabled>
 8002a7c:	1e03      	subs	r3, r0, #0
 8002a7e:	d104      	bne.n	8002a8a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff facb 	bl	8002020 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a8a:	f7ff f997 	bl	8001dbc <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d914      	bls.n	8002ac2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d00d      	beq.n	8002ac2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	2210      	movs	r2, #16
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e007      	b.n	8002ad2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d1d0      	bne.n	8002a72 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b004      	add	sp, #16
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	80000017 	.word	0x80000017
 8002ae0:	40012708 	.word	0x40012708
 8002ae4:	2000000c 	.word	0x2000000c
 8002ae8:	00030d40 	.word	0x00030d40

08002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	0002      	movs	r2, r0
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b7f      	cmp	r3, #127	; 0x7f
 8002afe:	d809      	bhi.n	8002b14 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b00:	1dfb      	adds	r3, r7, #7
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	001a      	movs	r2, r3
 8002b06:	231f      	movs	r3, #31
 8002b08:	401a      	ands	r2, r3
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__NVIC_EnableIRQ+0x30>)
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4091      	lsls	r1, r2
 8002b10:	000a      	movs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	0002      	movs	r2, r0
 8002b28:	1dfb      	adds	r3, r7, #7
 8002b2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	1dfb      	adds	r3, r7, #7
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b7f      	cmp	r3, #127	; 0x7f
 8002b32:	d810      	bhi.n	8002b56 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	001a      	movs	r2, r3
 8002b3a:	231f      	movs	r3, #31
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_DisableIRQ+0x40>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	409a      	lsls	r2, r3
 8002b44:	0013      	movs	r3, r2
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b4a:	f3bf 8f4f 	dsb	sy
}
 8002b4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002b50:	f3bf 8f6f 	isb	sy
}
 8002b54:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	e000e100 	.word	0xe000e100

08002b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	1dfb      	adds	r3, r7, #7
 8002b70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	1dfb      	adds	r3, r7, #7
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b7f      	cmp	r3, #127	; 0x7f
 8002b78:	d828      	bhi.n	8002bcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b7a:	4a2f      	ldr	r2, [pc, #188]	; (8002c38 <__NVIC_SetPriority+0xd4>)
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	33c0      	adds	r3, #192	; 0xc0
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	589b      	ldr	r3, [r3, r2]
 8002b8a:	1dfa      	adds	r2, r7, #7
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	0011      	movs	r1, r2
 8002b90:	2203      	movs	r2, #3
 8002b92:	400a      	ands	r2, r1
 8002b94:	00d2      	lsls	r2, r2, #3
 8002b96:	21ff      	movs	r1, #255	; 0xff
 8002b98:	4091      	lsls	r1, r2
 8002b9a:	000a      	movs	r2, r1
 8002b9c:	43d2      	mvns	r2, r2
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	401a      	ands	r2, r3
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	0018      	movs	r0, r3
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	4003      	ands	r3, r0
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bb8:	481f      	ldr	r0, [pc, #124]	; (8002c38 <__NVIC_SetPriority+0xd4>)
 8002bba:	1dfb      	adds	r3, r7, #7
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b25b      	sxtb	r3, r3
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	33c0      	adds	r3, #192	; 0xc0
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002bca:	e031      	b.n	8002c30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bcc:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <__NVIC_SetPriority+0xd8>)
 8002bce:	1dfb      	adds	r3, r7, #7
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	230f      	movs	r3, #15
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	3b08      	subs	r3, #8
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3306      	adds	r3, #6
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	18d3      	adds	r3, r2, r3
 8002be2:	3304      	adds	r3, #4
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1dfa      	adds	r2, r7, #7
 8002be8:	7812      	ldrb	r2, [r2, #0]
 8002bea:	0011      	movs	r1, r2
 8002bec:	2203      	movs	r2, #3
 8002bee:	400a      	ands	r2, r1
 8002bf0:	00d2      	lsls	r2, r2, #3
 8002bf2:	21ff      	movs	r1, #255	; 0xff
 8002bf4:	4091      	lsls	r1, r2
 8002bf6:	000a      	movs	r2, r1
 8002bf8:	43d2      	mvns	r2, r2
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	22ff      	movs	r2, #255	; 0xff
 8002c04:	401a      	ands	r2, r3
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	4003      	ands	r3, r0
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c14:	4809      	ldr	r0, [pc, #36]	; (8002c3c <__NVIC_SetPriority+0xd8>)
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	001c      	movs	r4, r3
 8002c1c:	230f      	movs	r3, #15
 8002c1e:	4023      	ands	r3, r4
 8002c20:	3b08      	subs	r3, #8
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	430a      	orrs	r2, r1
 8002c26:	3306      	adds	r3, #6
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	18c3      	adds	r3, r0, r3
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b003      	add	sp, #12
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	e000e100 	.word	0xe000e100
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	1e5a      	subs	r2, r3, #1
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	045b      	lsls	r3, r3, #17
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d301      	bcc.n	8002c58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c54:	2301      	movs	r3, #1
 8002c56:	e010      	b.n	8002c7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <SysTick_Config+0x44>)
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	3a01      	subs	r2, #1
 8002c5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c60:	2301      	movs	r3, #1
 8002c62:	425b      	negs	r3, r3
 8002c64:	2103      	movs	r1, #3
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff ff7c 	bl	8002b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <SysTick_Config+0x44>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <SysTick_Config+0x44>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	210f      	movs	r1, #15
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	1c02      	adds	r2, r0, #0
 8002c98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff ff5d 	bl	8002b64 <__NVIC_SetPriority>
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	0002      	movs	r2, r0
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7ff ff11 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b002      	add	sp, #8
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	0002      	movs	r2, r0
 8002cda:	1dfb      	adds	r3, r7, #7
 8002cdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cde:	1dfb      	adds	r3, r7, #7
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff ff1b 	bl	8002b20 <__NVIC_DisableIRQ>
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7ff ff9f 	bl	8002c40 <SysTick_Config>
 8002d02:	0003      	movs	r3, r0
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e050      	b.n	8002dc0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2225      	movs	r2, #37	; 0x25
 8002d22:	5c9b      	ldrb	r3, [r3, r2]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d008      	beq.n	8002d3c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2224      	movs	r2, #36	; 0x24
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e041      	b.n	8002dc0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	210e      	movs	r1, #14
 8002d48:	438a      	bics	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	491c      	ldr	r1, [pc, #112]	; (8002dc8 <HAL_DMA_Abort+0xbc>)
 8002d58:	400a      	ands	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	438a      	bics	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_DMA_Abort+0xc0>)
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	221c      	movs	r2, #28
 8002d76:	4013      	ands	r3, r2
 8002d78:	2201      	movs	r2, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_DMA_Abort+0xc0>)
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d8a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <HAL_DMA_Abort+0xbc>)
 8002da0:	400a      	ands	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002dac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2225      	movs	r2, #37	; 0x25
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2224      	movs	r2, #36	; 0x24
 8002dba:	2100      	movs	r1, #0
 8002dbc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	fffffeff 	.word	0xfffffeff
 8002dcc:	40020000 	.word	0x40020000

08002dd0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	210f      	movs	r1, #15
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2225      	movs	r2, #37	; 0x25
 8002de4:	5c9b      	ldrb	r3, [r3, r2]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d006      	beq.n	8002dfa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2204      	movs	r2, #4
 8002df0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	e049      	b.n	8002e8e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	210e      	movs	r1, #14
 8002e06:	438a      	bics	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	438a      	bics	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	491d      	ldr	r1, [pc, #116]	; (8002e9c <HAL_DMA_Abort_IT+0xcc>)
 8002e26:	400a      	ands	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_DMA_Abort_IT+0xd0>)
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	221c      	movs	r2, #28
 8002e34:	4013      	ands	r3, r2
 8002e36:	2201      	movs	r2, #1
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_DMA_Abort_IT+0xd0>)
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00c      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5c:	490f      	ldr	r1, [pc, #60]	; (8002e9c <HAL_DMA_Abort_IT+0xcc>)
 8002e5e:	400a      	ands	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2225      	movs	r2, #37	; 0x25
 8002e70:	2101      	movs	r1, #1
 8002e72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	2100      	movs	r1, #0
 8002e7a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	0010      	movs	r0, r2
 8002e8c:	4798      	blx	r3
    }
  }
  return status;
 8002e8e:	230f      	movs	r3, #15
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	781b      	ldrb	r3, [r3, #0]
}
 8002e94:	0018      	movs	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b004      	add	sp, #16
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	fffffeff 	.word	0xfffffeff
 8002ea0:	40020000 	.word	0x40020000

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb2:	e147      	b.n	8003144 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4091      	lsls	r1, r2
 8002ebe:	000a      	movs	r2, r1
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d100      	bne.n	8002ecc <HAL_GPIO_Init+0x28>
 8002eca:	e138      	b.n	800313e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d005      	beq.n	8002ee4 <HAL_GPIO_Init+0x40>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2203      	movs	r2, #3
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d130      	bne.n	8002f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	0013      	movs	r3, r2
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	409a      	lsls	r2, r3
 8002f06:	0013      	movs	r3, r2
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0013      	movs	r3, r2
 8002f22:	43da      	mvns	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	2201      	movs	r2, #1
 8002f32:	401a      	ands	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	409a      	lsls	r2, r3
 8002f38:	0013      	movs	r3, r2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d017      	beq.n	8002f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	0013      	movs	r3, r2
 8002f62:	43da      	mvns	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	0013      	movs	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2203      	movs	r2, #3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d123      	bne.n	8002fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	08da      	lsrs	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3208      	adds	r2, #8
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	58d3      	ldr	r3, [r2, r3]
 8002f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	220f      	movs	r2, #15
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	0013      	movs	r3, r2
 8002faa:	43da      	mvns	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2107      	movs	r1, #7
 8002fba:	400b      	ands	r3, r1
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	0013      	movs	r3, r2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	08da      	lsrs	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3208      	adds	r2, #8
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	6939      	ldr	r1, [r7, #16]
 8002fd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	0013      	movs	r3, r2
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	0013      	movs	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	23c0      	movs	r3, #192	; 0xc0
 8003010:	029b      	lsls	r3, r3, #10
 8003012:	4013      	ands	r3, r2
 8003014:	d100      	bne.n	8003018 <HAL_GPIO_Init+0x174>
 8003016:	e092      	b.n	800313e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003018:	4a50      	ldr	r2, [pc, #320]	; (800315c <HAL_GPIO_Init+0x2b8>)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	089b      	lsrs	r3, r3, #2
 800301e:	3318      	adds	r3, #24
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	589b      	ldr	r3, [r3, r2]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2203      	movs	r2, #3
 800302a:	4013      	ands	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	220f      	movs	r2, #15
 8003030:	409a      	lsls	r2, r3
 8003032:	0013      	movs	r3, r2
 8003034:	43da      	mvns	r2, r3
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	23a0      	movs	r3, #160	; 0xa0
 8003040:	05db      	lsls	r3, r3, #23
 8003042:	429a      	cmp	r2, r3
 8003044:	d013      	beq.n	800306e <HAL_GPIO_Init+0x1ca>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a45      	ldr	r2, [pc, #276]	; (8003160 <HAL_GPIO_Init+0x2bc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00d      	beq.n	800306a <HAL_GPIO_Init+0x1c6>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a44      	ldr	r2, [pc, #272]	; (8003164 <HAL_GPIO_Init+0x2c0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <HAL_GPIO_Init+0x1c2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a43      	ldr	r2, [pc, #268]	; (8003168 <HAL_GPIO_Init+0x2c4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_GPIO_Init+0x1be>
 800305e:	2303      	movs	r3, #3
 8003060:	e006      	b.n	8003070 <HAL_GPIO_Init+0x1cc>
 8003062:	2305      	movs	r3, #5
 8003064:	e004      	b.n	8003070 <HAL_GPIO_Init+0x1cc>
 8003066:	2302      	movs	r3, #2
 8003068:	e002      	b.n	8003070 <HAL_GPIO_Init+0x1cc>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_GPIO_Init+0x1cc>
 800306e:	2300      	movs	r3, #0
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	2103      	movs	r1, #3
 8003074:	400a      	ands	r2, r1
 8003076:	00d2      	lsls	r2, r2, #3
 8003078:	4093      	lsls	r3, r2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003080:	4936      	ldr	r1, [pc, #216]	; (800315c <HAL_GPIO_Init+0x2b8>)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	089b      	lsrs	r3, r3, #2
 8003086:	3318      	adds	r3, #24
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800308e:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_GPIO_Init+0x2b8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	43da      	mvns	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	035b      	lsls	r3, r3, #13
 80030a6:	4013      	ands	r3, r2
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_GPIO_Init+0x2b8>)
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80030b8:	4b28      	ldr	r3, [pc, #160]	; (800315c <HAL_GPIO_Init+0x2b8>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	43da      	mvns	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	039b      	lsls	r3, r3, #14
 80030d0:	4013      	ands	r3, r2
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030dc:	4b1f      	ldr	r3, [pc, #124]	; (800315c <HAL_GPIO_Init+0x2b8>)
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030e2:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_GPIO_Init+0x2b8>)
 80030e4:	2384      	movs	r3, #132	; 0x84
 80030e6:	58d3      	ldr	r3, [r2, r3]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	43da      	mvns	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	029b      	lsls	r3, r3, #10
 80030fc:	4013      	ands	r3, r2
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003108:	4914      	ldr	r1, [pc, #80]	; (800315c <HAL_GPIO_Init+0x2b8>)
 800310a:	2284      	movs	r2, #132	; 0x84
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003110:	4a12      	ldr	r2, [pc, #72]	; (800315c <HAL_GPIO_Init+0x2b8>)
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	58d3      	ldr	r3, [r2, r3]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	43da      	mvns	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	025b      	lsls	r3, r3, #9
 800312a:	4013      	ands	r3, r2
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003136:	4909      	ldr	r1, [pc, #36]	; (800315c <HAL_GPIO_Init+0x2b8>)
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	40da      	lsrs	r2, r3
 800314c:	1e13      	subs	r3, r2, #0
 800314e:	d000      	beq.n	8003152 <HAL_GPIO_Init+0x2ae>
 8003150:	e6b0      	b.n	8002eb4 <HAL_GPIO_Init+0x10>
  }
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b006      	add	sp, #24
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021800 	.word	0x40021800
 8003160:	50000400 	.word	0x50000400
 8003164:	50000800 	.word	0x50000800
 8003168:	50000c00 	.word	0x50000c00

0800316c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800317a:	e0b4      	b.n	80032e6 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800317c:	2201      	movs	r2, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	409a      	lsls	r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d100      	bne.n	8003190 <HAL_GPIO_DeInit+0x24>
 800318e:	e0a7      	b.n	80032e0 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003190:	4a5a      	ldr	r2, [pc, #360]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	3318      	adds	r3, #24
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	589b      	ldr	r3, [r3, r2]
 800319c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2203      	movs	r2, #3
 80031a2:	4013      	ands	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	220f      	movs	r2, #15
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	23a0      	movs	r3, #160	; 0xa0
 80031b4:	05db      	lsls	r3, r3, #23
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_DeInit+0x76>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a50      	ldr	r2, [pc, #320]	; (8003300 <HAL_GPIO_DeInit+0x194>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00d      	beq.n	80031de <HAL_GPIO_DeInit+0x72>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4f      	ldr	r2, [pc, #316]	; (8003304 <HAL_GPIO_DeInit+0x198>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <HAL_GPIO_DeInit+0x6e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4e      	ldr	r2, [pc, #312]	; (8003308 <HAL_GPIO_DeInit+0x19c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d101      	bne.n	80031d6 <HAL_GPIO_DeInit+0x6a>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_DeInit+0x78>
 80031d6:	2305      	movs	r3, #5
 80031d8:	e004      	b.n	80031e4 <HAL_GPIO_DeInit+0x78>
 80031da:	2302      	movs	r3, #2
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_DeInit+0x78>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_GPIO_DeInit+0x78>
 80031e2:	2300      	movs	r3, #0
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	2103      	movs	r1, #3
 80031e8:	400a      	ands	r2, r1
 80031ea:	00d2      	lsls	r2, r2, #3
 80031ec:	4093      	lsls	r3, r2
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d136      	bne.n	8003262 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80031f4:	4a41      	ldr	r2, [pc, #260]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	58d3      	ldr	r3, [r2, r3]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	43d2      	mvns	r2, r2
 80031fe:	493f      	ldr	r1, [pc, #252]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 8003200:	4013      	ands	r3, r2
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 8003208:	2384      	movs	r3, #132	; 0x84
 800320a:	58d3      	ldr	r3, [r2, r3]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	43d2      	mvns	r2, r2
 8003210:	493a      	ldr	r1, [pc, #232]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 8003212:	4013      	ands	r3, r2
 8003214:	2284      	movs	r2, #132	; 0x84
 8003216:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003218:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43d9      	mvns	r1, r3
 8003220:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 8003222:	400a      	ands	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003226:	4b35      	ldr	r3, [pc, #212]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43d9      	mvns	r1, r3
 800322e:	4b33      	ldr	r3, [pc, #204]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 8003230:	400a      	ands	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2203      	movs	r2, #3
 8003238:	4013      	ands	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	220f      	movs	r2, #15
 800323e:	409a      	lsls	r2, r3
 8003240:	0013      	movs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003244:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3318      	adds	r3, #24
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	589a      	ldr	r2, [r3, r2]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43d9      	mvns	r1, r3
 8003254:	4829      	ldr	r0, [pc, #164]	; (80032fc <HAL_GPIO_DeInit+0x190>)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	400a      	ands	r2, r1
 800325c:	3318      	adds	r3, #24
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	2103      	movs	r1, #3
 800326c:	4099      	lsls	r1, r3
 800326e:	000b      	movs	r3, r1
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	08da      	lsrs	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3208      	adds	r2, #8
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	58d3      	ldr	r3, [r2, r3]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	2107      	movs	r1, #7
 8003286:	400a      	ands	r2, r1
 8003288:	0092      	lsls	r2, r2, #2
 800328a:	210f      	movs	r1, #15
 800328c:	4091      	lsls	r1, r2
 800328e:	000a      	movs	r2, r1
 8003290:	43d1      	mvns	r1, r2
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	08d2      	lsrs	r2, r2, #3
 8003296:	4019      	ands	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3208      	adds	r2, #8
 800329c:	0092      	lsls	r2, r2, #2
 800329e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	0052      	lsls	r2, r2, #1
 80032a8:	2103      	movs	r1, #3
 80032aa:	4091      	lsls	r1, r2
 80032ac:	000a      	movs	r2, r1
 80032ae:	43d2      	mvns	r2, r2
 80032b0:	401a      	ands	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2101      	movs	r1, #1
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4091      	lsls	r1, r2
 80032c0:	000a      	movs	r2, r1
 80032c2:	43d2      	mvns	r2, r2
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	0052      	lsls	r2, r2, #1
 80032d2:	2103      	movs	r1, #3
 80032d4:	4091      	lsls	r1, r2
 80032d6:	000a      	movs	r2, r1
 80032d8:	43d2      	mvns	r2, r2
 80032da:	401a      	ands	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
    }

    position++;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3301      	adds	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	40da      	lsrs	r2, r3
 80032ec:	1e13      	subs	r3, r2, #0
 80032ee:	d000      	beq.n	80032f2 <HAL_GPIO_DeInit+0x186>
 80032f0:	e744      	b.n	800317c <HAL_GPIO_DeInit+0x10>
  }
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b006      	add	sp, #24
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021800 	.word	0x40021800
 8003300:	50000400 	.word	0x50000400
 8003304:	50000800 	.word	0x50000800
 8003308:	50000c00 	.word	0x50000c00

0800330c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	000a      	movs	r2, r1
 8003316:	1cbb      	adds	r3, r7, #2
 8003318:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	1cba      	adds	r2, r7, #2
 8003320:	8812      	ldrh	r2, [r2, #0]
 8003322:	4013      	ands	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003326:	230f      	movs	r3, #15
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e003      	b.n	8003338 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003330:	230f      	movs	r3, #15
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003338:	230f      	movs	r3, #15
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	781b      	ldrb	r3, [r3, #0]
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b004      	add	sp, #16
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	0008      	movs	r0, r1
 8003350:	0011      	movs	r1, r2
 8003352:	1cbb      	adds	r3, r7, #2
 8003354:	1c02      	adds	r2, r0, #0
 8003356:	801a      	strh	r2, [r3, #0]
 8003358:	1c7b      	adds	r3, r7, #1
 800335a:	1c0a      	adds	r2, r1, #0
 800335c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800335e:	1c7b      	adds	r3, r7, #1
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d004      	beq.n	8003370 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003366:	1cbb      	adds	r3, r7, #2
 8003368:	881a      	ldrh	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800336e:	e003      	b.n	8003378 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003370:	1cbb      	adds	r3, r7, #2
 8003372:	881a      	ldrh	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b002      	add	sp, #8
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	000a      	movs	r2, r1
 800338a:	1cbb      	adds	r3, r7, #2
 800338c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003394:	1cbb      	adds	r3, r7, #2
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	041a      	lsls	r2, r3, #16
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	1cb9      	adds	r1, r7, #2
 80033a4:	8809      	ldrh	r1, [r1, #0]
 80033a6:	400b      	ands	r3, r1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	619a      	str	r2, [r3, #24]
}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e08f      	b.n	80034ea <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2241      	movs	r2, #65	; 0x41
 80033ce:	5c9b      	ldrb	r3, [r3, r2]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7fe f9d5 	bl	8001790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2241      	movs	r2, #65	; 0x41
 80033ea:	2124      	movs	r1, #36	; 0x24
 80033ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	438a      	bics	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	493b      	ldr	r1, [pc, #236]	; (80034f4 <HAL_I2C_Init+0x13c>)
 8003408:	400a      	ands	r2, r1
 800340a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4938      	ldr	r1, [pc, #224]	; (80034f8 <HAL_I2C_Init+0x140>)
 8003418:	400a      	ands	r2, r1
 800341a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d108      	bne.n	8003436 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	0209      	lsls	r1, r1, #8
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	e007      	b.n	8003446 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2184      	movs	r1, #132	; 0x84
 8003440:	0209      	lsls	r1, r1, #8
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d109      	bne.n	8003462 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	0109      	lsls	r1, r1, #4
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	e007      	b.n	8003472 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4923      	ldr	r1, [pc, #140]	; (80034fc <HAL_I2C_Init+0x144>)
 800346e:	400a      	ands	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4920      	ldr	r1, [pc, #128]	; (8003500 <HAL_I2C_Init+0x148>)
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	491a      	ldr	r1, [pc, #104]	; (80034f8 <HAL_I2C_Init+0x140>)
 800348e:	400a      	ands	r2, r1
 8003490:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	431a      	orrs	r2, r3
 800349c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69d9      	ldr	r1, [r3, #28]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2101      	movs	r1, #1
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2241      	movs	r2, #65	; 0x41
 80034d6:	2120      	movs	r1, #32
 80034d8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2242      	movs	r2, #66	; 0x42
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	f0ffffff 	.word	0xf0ffffff
 80034f8:	ffff7fff 	.word	0xffff7fff
 80034fc:	fffff7ff 	.word	0xfffff7ff
 8003500:	02008000 	.word	0x02008000

08003504 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	0008      	movs	r0, r1
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	0019      	movs	r1, r3
 8003512:	230a      	movs	r3, #10
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	1c02      	adds	r2, r0, #0
 8003518:	801a      	strh	r2, [r3, #0]
 800351a:	2308      	movs	r3, #8
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	1c0a      	adds	r2, r1, #0
 8003520:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2241      	movs	r2, #65	; 0x41
 8003526:	5c9b      	ldrb	r3, [r3, r2]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b20      	cmp	r3, #32
 800352c:	d000      	beq.n	8003530 <HAL_I2C_Master_Transmit+0x2c>
 800352e:	e10a      	b.n	8003746 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2240      	movs	r2, #64	; 0x40
 8003534:	5c9b      	ldrb	r3, [r3, r2]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_I2C_Master_Transmit+0x3a>
 800353a:	2302      	movs	r3, #2
 800353c:	e104      	b.n	8003748 <HAL_I2C_Master_Transmit+0x244>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003546:	f7fe fc39 	bl	8001dbc <HAL_GetTick>
 800354a:	0003      	movs	r3, r0
 800354c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	0219      	lsls	r1, r3, #8
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2319      	movs	r3, #25
 800355a:	2201      	movs	r2, #1
 800355c:	f000 f91e 	bl	800379c <I2C_WaitOnFlagUntilTimeout>
 8003560:	1e03      	subs	r3, r0, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0ef      	b.n	8003748 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2241      	movs	r2, #65	; 0x41
 800356c:	2121      	movs	r1, #33	; 0x21
 800356e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2242      	movs	r2, #66	; 0x42
 8003574:	2110      	movs	r1, #16
 8003576:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2208      	movs	r2, #8
 8003588:	18ba      	adds	r2, r7, r2
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2bff      	cmp	r3, #255	; 0xff
 800359c:	d906      	bls.n	80035ac <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	22ff      	movs	r2, #255	; 0xff
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	045b      	lsls	r3, r3, #17
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e007      	b.n	80035bc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	049b      	lsls	r3, r3, #18
 80035ba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d027      	beq.n	8003614 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	781a      	ldrb	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	697c      	ldr	r4, [r7, #20]
 8003600:	230a      	movs	r3, #10
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	8819      	ldrh	r1, [r3, #0]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	4b51      	ldr	r3, [pc, #324]	; (8003750 <HAL_I2C_Master_Transmit+0x24c>)
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	0023      	movs	r3, r4
 800360e:	f000 faa7 	bl	8003b60 <I2C_TransferConfig>
 8003612:	e06f      	b.n	80036f4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	b2da      	uxtb	r2, r3
 800361a:	697c      	ldr	r4, [r7, #20]
 800361c:	230a      	movs	r3, #10
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	8819      	ldrh	r1, [r3, #0]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	4b4a      	ldr	r3, [pc, #296]	; (8003750 <HAL_I2C_Master_Transmit+0x24c>)
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	0023      	movs	r3, r4
 800362a:	f000 fa99 	bl	8003b60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800362e:	e061      	b.n	80036f4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	0018      	movs	r0, r3
 8003638:	f000 f908 	bl	800384c <I2C_WaitOnTXISFlagUntilTimeout>
 800363c:	1e03      	subs	r3, r0, #0
 800363e:	d001      	beq.n	8003644 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e081      	b.n	8003748 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d03a      	beq.n	80036f4 <HAL_I2C_Master_Transmit+0x1f0>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	2b00      	cmp	r3, #0
 8003684:	d136      	bne.n	80036f4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	0013      	movs	r3, r2
 8003690:	2200      	movs	r2, #0
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	f000 f882 	bl	800379c <I2C_WaitOnFlagUntilTimeout>
 8003698:	1e03      	subs	r3, r0, #0
 800369a:	d001      	beq.n	80036a0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e053      	b.n	8003748 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2bff      	cmp	r3, #255	; 0xff
 80036a8:	d911      	bls.n	80036ce <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	22ff      	movs	r2, #255	; 0xff
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	045c      	lsls	r4, r3, #17
 80036ba:	230a      	movs	r3, #10
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	8819      	ldrh	r1, [r3, #0]
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	2300      	movs	r3, #0
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	0023      	movs	r3, r4
 80036c8:	f000 fa4a 	bl	8003b60 <I2C_TransferConfig>
 80036cc:	e012      	b.n	80036f4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	049c      	lsls	r4, r3, #18
 80036e2:	230a      	movs	r3, #10
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	8819      	ldrh	r1, [r3, #0]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	0023      	movs	r3, r4
 80036f0:	f000 fa36 	bl	8003b60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d198      	bne.n	8003630 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	0018      	movs	r0, r3
 8003706:	f000 f8e7 	bl	80038d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e01a      	b.n	8003748 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2220      	movs	r2, #32
 8003718:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	490b      	ldr	r1, [pc, #44]	; (8003754 <HAL_I2C_Master_Transmit+0x250>)
 8003726:	400a      	ands	r2, r1
 8003728:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2241      	movs	r2, #65	; 0x41
 800372e:	2120      	movs	r1, #32
 8003730:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2242      	movs	r2, #66	; 0x42
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	0018      	movs	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	b007      	add	sp, #28
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	80002000 	.word	0x80002000
 8003754:	fe00e800 	.word	0xfe00e800

08003758 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d103      	bne.n	8003776 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2200      	movs	r2, #0
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2201      	movs	r2, #1
 800377e:	4013      	ands	r3, r2
 8003780:	2b01      	cmp	r3, #1
 8003782:	d007      	beq.n	8003794 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2101      	movs	r1, #1
 8003790:	430a      	orrs	r2, r1
 8003792:	619a      	str	r2, [r3, #24]
  }
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}

0800379c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ac:	e03a      	b.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	0018      	movs	r0, r3
 80037b6:	f000 f8d3 	bl	8003960 <I2C_IsErrorOccurred>
 80037ba:	1e03      	subs	r3, r0, #0
 80037bc:	d001      	beq.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e040      	b.n	8003844 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	d02d      	beq.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c8:	f7fe faf8 	bl	8001dbc <HAL_GetTick>
 80037cc:	0002      	movs	r2, r0
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <I2C_WaitOnFlagUntilTimeout+0x42>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d122      	bne.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	425a      	negs	r2, r3
 80037ee:	4153      	adcs	r3, r2
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	001a      	movs	r2, r3
 80037f4:	1dfb      	adds	r3, r7, #7
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d113      	bne.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	2220      	movs	r2, #32
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2241      	movs	r2, #65	; 0x41
 800380c:	2120      	movs	r1, #32
 800380e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2242      	movs	r2, #66	; 0x42
 8003814:	2100      	movs	r1, #0
 8003816:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2240      	movs	r2, #64	; 0x40
 800381c:	2100      	movs	r1, #0
 800381e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e00f      	b.n	8003844 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	425a      	negs	r2, r3
 8003834:	4153      	adcs	r3, r2
 8003836:	b2db      	uxtb	r3, r3
 8003838:	001a      	movs	r2, r3
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d0b5      	beq.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	0018      	movs	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	b004      	add	sp, #16
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003858:	e032      	b.n	80038c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0018      	movs	r0, r3
 8003862:	f000 f87d 	bl	8003960 <I2C_IsErrorOccurred>
 8003866:	1e03      	subs	r3, r0, #0
 8003868:	d001      	beq.n	800386e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e030      	b.n	80038d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	3301      	adds	r3, #1
 8003872:	d025      	beq.n	80038c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003874:	f7fe faa2 	bl	8001dbc <HAL_GetTick>
 8003878:	0002      	movs	r2, r0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	429a      	cmp	r2, r3
 8003882:	d302      	bcc.n	800388a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11a      	bne.n	80038c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2202      	movs	r2, #2
 8003892:	4013      	ands	r3, r2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d013      	beq.n	80038c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	2220      	movs	r2, #32
 800389e:	431a      	orrs	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2241      	movs	r2, #65	; 0x41
 80038a8:	2120      	movs	r1, #32
 80038aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2242      	movs	r2, #66	; 0x42
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2240      	movs	r2, #64	; 0x40
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e007      	b.n	80038d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d1c5      	bne.n	800385a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b004      	add	sp, #16
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e4:	e02f      	b.n	8003946 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 f837 	bl	8003960 <I2C_IsErrorOccurred>
 80038f2:	1e03      	subs	r3, r0, #0
 80038f4:	d001      	beq.n	80038fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e02d      	b.n	8003956 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fa5f 	bl	8001dbc <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11a      	bne.n	8003946 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2220      	movs	r2, #32
 8003918:	4013      	ands	r3, r2
 800391a:	2b20      	cmp	r3, #32
 800391c:	d013      	beq.n	8003946 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	2220      	movs	r2, #32
 8003924:	431a      	orrs	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2241      	movs	r2, #65	; 0x41
 800392e:	2120      	movs	r1, #32
 8003930:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2242      	movs	r2, #66	; 0x42
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2240      	movs	r2, #64	; 0x40
 800393e:	2100      	movs	r1, #0
 8003940:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e007      	b.n	8003956 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2220      	movs	r2, #32
 800394e:	4013      	ands	r3, r2
 8003950:	2b20      	cmp	r3, #32
 8003952:	d1c8      	bne.n	80038e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b08b      	sub	sp, #44	; 0x2c
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2327      	movs	r3, #39	; 0x27
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2210      	movs	r2, #16
 8003988:	4013      	ands	r3, r2
 800398a:	d100      	bne.n	800398e <I2C_IsErrorOccurred+0x2e>
 800398c:	e082      	b.n	8003a94 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2210      	movs	r2, #16
 8003994:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003996:	e060      	b.n	8003a5a <I2C_IsErrorOccurred+0xfa>
 8003998:	2427      	movs	r4, #39	; 0x27
 800399a:	193b      	adds	r3, r7, r4
 800399c:	193a      	adds	r2, r7, r4
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3301      	adds	r3, #1
 80039a6:	d058      	beq.n	8003a5a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039a8:	f7fe fa08 	bl	8001dbc <HAL_GetTick>
 80039ac:	0002      	movs	r2, r0
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d306      	bcc.n	80039c6 <I2C_IsErrorOccurred+0x66>
 80039b8:	193b      	adds	r3, r7, r4
 80039ba:	193a      	adds	r2, r7, r4
 80039bc:	7812      	ldrb	r2, [r2, #0]
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d149      	bne.n	8003a5a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	01db      	lsls	r3, r3, #7
 80039d0:	4013      	ands	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039d4:	2013      	movs	r0, #19
 80039d6:	183b      	adds	r3, r7, r0
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	2142      	movs	r1, #66	; 0x42
 80039dc:	5c52      	ldrb	r2, [r2, r1]
 80039de:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	401a      	ands	r2, r3
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d126      	bne.n	8003a42 <I2C_IsErrorOccurred+0xe2>
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	01db      	lsls	r3, r3, #7
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d021      	beq.n	8003a42 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80039fe:	183b      	adds	r3, r7, r0
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d01d      	beq.n	8003a42 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2180      	movs	r1, #128	; 0x80
 8003a12:	01c9      	lsls	r1, r1, #7
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a18:	f7fe f9d0 	bl	8001dbc <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a20:	e00f      	b.n	8003a42 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a22:	f7fe f9cb 	bl	8001dbc <HAL_GetTick>
 8003a26:	0002      	movs	r2, r0
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b19      	cmp	r3, #25
 8003a2e:	d908      	bls.n	8003a42 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	2220      	movs	r2, #32
 8003a34:	4313      	orrs	r3, r2
 8003a36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a38:	2327      	movs	r3, #39	; 0x27
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]

              break;
 8003a40:	e00b      	b.n	8003a5a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2127      	movs	r1, #39	; 0x27
 8003a4e:	187a      	adds	r2, r7, r1
 8003a50:	1879      	adds	r1, r7, r1
 8003a52:	7809      	ldrb	r1, [r1, #0]
 8003a54:	7011      	strb	r1, [r2, #0]
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d1e3      	bne.n	8003a22 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2220      	movs	r2, #32
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d004      	beq.n	8003a72 <I2C_IsErrorOccurred+0x112>
 8003a68:	2327      	movs	r3, #39	; 0x27
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d092      	beq.n	8003998 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a72:	2327      	movs	r3, #39	; 0x27
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2220      	movs	r2, #32
 8003a82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2204      	movs	r2, #4
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a8c:	2327      	movs	r3, #39	; 0x27
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d00c      	beq.n	8003ac0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	0052      	lsls	r2, r2, #1
 8003ab6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab8:	2327      	movs	r3, #39	; 0x27
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d00c      	beq.n	8003ae4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2208      	movs	r2, #8
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	00d2      	lsls	r2, r2, #3
 8003ada:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003adc:	2327      	movs	r3, #39	; 0x27
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d00c      	beq.n	8003b08 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	2202      	movs	r2, #2
 8003af2:	4313      	orrs	r3, r2
 8003af4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	0092      	lsls	r2, r2, #2
 8003afe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b00:	2327      	movs	r3, #39	; 0x27
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003b08:	2327      	movs	r3, #39	; 0x27
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01d      	beq.n	8003b4e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7ff fe1f 	bl	8003758 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	490d      	ldr	r1, [pc, #52]	; (8003b5c <I2C_IsErrorOccurred+0x1fc>)
 8003b26:	400a      	ands	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2241      	movs	r2, #65	; 0x41
 8003b3a:	2120      	movs	r1, #32
 8003b3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2242      	movs	r2, #66	; 0x42
 8003b42:	2100      	movs	r1, #0
 8003b44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2240      	movs	r2, #64	; 0x40
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003b4e:	2327      	movs	r3, #39	; 0x27
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	781b      	ldrb	r3, [r3, #0]
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b00b      	add	sp, #44	; 0x2c
 8003b5a:	bd90      	pop	{r4, r7, pc}
 8003b5c:	fe00e800 	.word	0xfe00e800

08003b60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	0008      	movs	r0, r1
 8003b6a:	0011      	movs	r1, r2
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	240a      	movs	r4, #10
 8003b70:	193b      	adds	r3, r7, r4
 8003b72:	1c02      	adds	r2, r0, #0
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	2009      	movs	r0, #9
 8003b78:	183b      	adds	r3, r7, r0
 8003b7a:	1c0a      	adds	r2, r1, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b7e:	193b      	adds	r3, r7, r4
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	059b      	lsls	r3, r3, #22
 8003b84:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b86:	183b      	adds	r3, r7, r0
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	0419      	lsls	r1, r3, #16
 8003b8c:	23ff      	movs	r3, #255	; 0xff
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b92:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003baa:	0d51      	lsrs	r1, r2, #21
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	00d2      	lsls	r2, r2, #3
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	4907      	ldr	r1, [pc, #28]	; (8003bd0 <I2C_TransferConfig+0x70>)
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	43d2      	mvns	r2, r2
 8003bb8:	401a      	ands	r2, r3
 8003bba:	0011      	movs	r1, r2
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b007      	add	sp, #28
 8003bcc:	bd90      	pop	{r4, r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	03ff63ff 	.word	0x03ff63ff

08003bd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2241      	movs	r2, #65	; 0x41
 8003be2:	5c9b      	ldrb	r3, [r3, r2]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d138      	bne.n	8003c5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2240      	movs	r2, #64	; 0x40
 8003bee:	5c9b      	ldrb	r3, [r3, r2]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e032      	b.n	8003c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2241      	movs	r2, #65	; 0x41
 8003c04:	2124      	movs	r1, #36	; 0x24
 8003c06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2101      	movs	r1, #1
 8003c14:	438a      	bics	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4911      	ldr	r1, [pc, #68]	; (8003c68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6819      	ldr	r1, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2101      	movs	r1, #1
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2241      	movs	r2, #65	; 0x41
 8003c4c:	2120      	movs	r1, #32
 8003c4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2240      	movs	r2, #64	; 0x40
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b002      	add	sp, #8
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	ffffefff 	.word	0xffffefff

08003c6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2241      	movs	r2, #65	; 0x41
 8003c7a:	5c9b      	ldrb	r3, [r3, r2]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d139      	bne.n	8003cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2240      	movs	r2, #64	; 0x40
 8003c86:	5c9b      	ldrb	r3, [r3, r2]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e033      	b.n	8003cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2240      	movs	r2, #64	; 0x40
 8003c94:	2101      	movs	r1, #1
 8003c96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2241      	movs	r2, #65	; 0x41
 8003c9c:	2124      	movs	r1, #36	; 0x24
 8003c9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2101      	movs	r1, #1
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2241      	movs	r2, #65	; 0x41
 8003ce6:	2120      	movs	r1, #32
 8003ce8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2240      	movs	r2, #64	; 0x40
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e000      	b.n	8003cf8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
  }
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b004      	add	sp, #16
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	fffff0ff 	.word	0xfffff0ff

08003d04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003d0c:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d11f      	bne.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003d28:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	0013      	movs	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	189b      	adds	r3, r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4912      	ldr	r1, [pc, #72]	; (8003d80 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003d36:	0018      	movs	r0, r3
 8003d38:	f7fc fa00 	bl	800013c <__udivsi3>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d42:	e008      	b.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e001      	b.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e009      	b.n	8003d6a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	401a      	ands	r2, r3
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d0ed      	beq.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b004      	add	sp, #16
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	40007000 	.word	0x40007000
 8003d78:	fffff9ff 	.word	0xfffff9ff
 8003d7c:	2000000c 	.word	0x2000000c
 8003d80:	000f4240 	.word	0x000f4240

08003d84 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	23e0      	movs	r3, #224	; 0xe0
 8003d8e:	01db      	lsls	r3, r3, #7
 8003d90:	4013      	ands	r3, r2
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e2fe      	b.n	80043ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2201      	movs	r2, #1
 8003db4:	4013      	ands	r3, r2
 8003db6:	d100      	bne.n	8003dba <HAL_RCC_OscConfig+0x1e>
 8003db8:	e07c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dba:	4bc3      	ldr	r3, [pc, #780]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2238      	movs	r2, #56	; 0x38
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc4:	4bc0      	ldr	r3, [pc, #768]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2203      	movs	r2, #3
 8003dca:	4013      	ands	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d102      	bne.n	8003dda <HAL_RCC_OscConfig+0x3e>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d002      	beq.n	8003de0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4bb9      	ldr	r3, [pc, #740]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	029b      	lsls	r3, r3, #10
 8003de8:	4013      	ands	r3, r2
 8003dea:	d062      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x116>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d15e      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e2d9      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	025b      	lsls	r3, r3, #9
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d107      	bne.n	8003e14 <HAL_RCC_OscConfig+0x78>
 8003e04:	4bb0      	ldr	r3, [pc, #704]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4baf      	ldr	r3, [pc, #700]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	0249      	lsls	r1, r1, #9
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e020      	b.n	8003e56 <HAL_RCC_OscConfig+0xba>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	23a0      	movs	r3, #160	; 0xa0
 8003e1a:	02db      	lsls	r3, r3, #11
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d10e      	bne.n	8003e3e <HAL_RCC_OscConfig+0xa2>
 8003e20:	4ba9      	ldr	r3, [pc, #676]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4ba8      	ldr	r3, [pc, #672]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	02c9      	lsls	r1, r1, #11
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	4ba6      	ldr	r3, [pc, #664]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4ba5      	ldr	r3, [pc, #660]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e34:	2180      	movs	r1, #128	; 0x80
 8003e36:	0249      	lsls	r1, r1, #9
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e00b      	b.n	8003e56 <HAL_RCC_OscConfig+0xba>
 8003e3e:	4ba2      	ldr	r3, [pc, #648]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4ba1      	ldr	r3, [pc, #644]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e44:	49a1      	ldr	r1, [pc, #644]	; (80040cc <HAL_RCC_OscConfig+0x330>)
 8003e46:	400a      	ands	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	4b9f      	ldr	r3, [pc, #636]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b9e      	ldr	r3, [pc, #632]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e50:	499f      	ldr	r1, [pc, #636]	; (80040d0 <HAL_RCC_OscConfig+0x334>)
 8003e52:	400a      	ands	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d014      	beq.n	8003e88 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fd ffad 	bl	8001dbc <HAL_GetTick>
 8003e62:	0003      	movs	r3, r0
 8003e64:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e68:	f7fd ffa8 	bl	8001dbc <HAL_GetTick>
 8003e6c:	0002      	movs	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	; 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e298      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e7a:	4b93      	ldr	r3, [pc, #588]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	029b      	lsls	r3, r3, #10
 8003e82:	4013      	ands	r3, r2
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0xcc>
 8003e86:	e015      	b.n	8003eb4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd ff98 	bl	8001dbc <HAL_GetTick>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e92:	f7fd ff93 	bl	8001dbc <HAL_GetTick>
 8003e96:	0002      	movs	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b64      	cmp	r3, #100	; 0x64
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e283      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ea4:	4b88      	ldr	r3, [pc, #544]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	029b      	lsls	r3, r3, #10
 8003eac:	4013      	ands	r3, r2
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0xf6>
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d100      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x124>
 8003ebe:	e099      	b.n	8003ff4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec0:	4b81      	ldr	r3, [pc, #516]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2238      	movs	r2, #56	; 0x38
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eca:	4b7f      	ldr	r3, [pc, #508]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d102      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x144>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d002      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d135      	bne.n	8003f52 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee6:	4b78      	ldr	r3, [pc, #480]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2380      	movs	r3, #128	; 0x80
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d005      	beq.n	8003efe <HAL_RCC_OscConfig+0x162>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e256      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b72      	ldr	r3, [pc, #456]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4a74      	ldr	r2, [pc, #464]	; (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	021a      	lsls	r2, r3, #8
 8003f0e:	4b6e      	ldr	r3, [pc, #440]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d112      	bne.n	8003f40 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f1a:	4b6b      	ldr	r3, [pc, #428]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6e      	ldr	r2, [pc, #440]	; (80040d8 <HAL_RCC_OscConfig+0x33c>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	0019      	movs	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	4b67      	ldr	r3, [pc, #412]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003f2e:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	0adb      	lsrs	r3, r3, #11
 8003f34:	2207      	movs	r2, #7
 8003f36:	4013      	ands	r3, r2
 8003f38:	4a68      	ldr	r2, [pc, #416]	; (80040dc <HAL_RCC_OscConfig+0x340>)
 8003f3a:	40da      	lsrs	r2, r3
 8003f3c:	4b68      	ldr	r3, [pc, #416]	; (80040e0 <HAL_RCC_OscConfig+0x344>)
 8003f3e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f40:	4b68      	ldr	r3, [pc, #416]	; (80040e4 <HAL_RCC_OscConfig+0x348>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7fd fedd 	bl	8001d04 <HAL_InitTick>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d051      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e22c      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d030      	beq.n	8003fbc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003f5a:	4b5b      	ldr	r3, [pc, #364]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a5e      	ldr	r2, [pc, #376]	; (80040d8 <HAL_RCC_OscConfig+0x33c>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	4b57      	ldr	r3, [pc, #348]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003f6e:	4b56      	ldr	r3, [pc, #344]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b55      	ldr	r3, [pc, #340]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f74:	2180      	movs	r1, #128	; 0x80
 8003f76:	0049      	lsls	r1, r1, #1
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fd ff1e 	bl	8001dbc <HAL_GetTick>
 8003f80:	0003      	movs	r3, r0
 8003f82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f86:	f7fd ff19 	bl	8001dbc <HAL_GetTick>
 8003f8a:	0002      	movs	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e209      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f98:	4b4b      	ldr	r3, [pc, #300]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b48      	ldr	r3, [pc, #288]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	4a4a      	ldr	r2, [pc, #296]	; (80040d4 <HAL_RCC_OscConfig+0x338>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	021a      	lsls	r2, r3, #8
 8003fb4:	4b44      	ldr	r3, [pc, #272]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	e01b      	b.n	8003ff4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b41      	ldr	r3, [pc, #260]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003fc2:	4949      	ldr	r1, [pc, #292]	; (80040e8 <HAL_RCC_OscConfig+0x34c>)
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fef8 	bl	8001dbc <HAL_GetTick>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fef3 	bl	8001dbc <HAL_GetTick>
 8003fd6:	0002      	movs	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e1e3      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fe4:	4b38      	ldr	r3, [pc, #224]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4013      	ands	r3, r2
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x236>
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ff2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d047      	beq.n	800408e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ffe:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2238      	movs	r2, #56	; 0x38
 8004004:	4013      	ands	r3, r2
 8004006:	2b18      	cmp	r3, #24
 8004008:	d10a      	bne.n	8004020 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800400a:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 800400c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400e:	2202      	movs	r2, #2
 8004010:	4013      	ands	r3, r2
 8004012:	d03c      	beq.n	800408e <HAL_RCC_OscConfig+0x2f2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d138      	bne.n	800408e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e1c5      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d019      	beq.n	800405c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004028:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 800402a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800402c:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 800402e:	2101      	movs	r1, #1
 8004030:	430a      	orrs	r2, r1
 8004032:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd fec2 	bl	8001dbc <HAL_GetTick>
 8004038:	0003      	movs	r3, r0
 800403a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403e:	f7fd febd 	bl	8001dbc <HAL_GetTick>
 8004042:	0002      	movs	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e1ad      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8004052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004054:	2202      	movs	r2, #2
 8004056:	4013      	ands	r3, r2
 8004058:	d0f1      	beq.n	800403e <HAL_RCC_OscConfig+0x2a2>
 800405a:	e018      	b.n	800408e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 800405e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8004062:	2101      	movs	r1, #1
 8004064:	438a      	bics	r2, r1
 8004066:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fd fea8 	bl	8001dbc <HAL_GetTick>
 800406c:	0003      	movs	r3, r0
 800406e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004072:	f7fd fea3 	bl	8001dbc <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e193      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004084:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 8004086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004088:	2202      	movs	r2, #2
 800408a:	4013      	ands	r3, r2
 800408c:	d1f1      	bne.n	8004072 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2204      	movs	r2, #4
 8004094:	4013      	ands	r3, r2
 8004096:	d100      	bne.n	800409a <HAL_RCC_OscConfig+0x2fe>
 8004098:	e0c6      	b.n	8004228 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409a:	231f      	movs	r3, #31
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	2200      	movs	r2, #0
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040a2:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2238      	movs	r2, #56	; 0x38
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d11e      	bne.n	80040ec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_RCC_OscConfig+0x32c>)
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	2202      	movs	r2, #2
 80040b4:	4013      	ands	r3, r2
 80040b6:	d100      	bne.n	80040ba <HAL_RCC_OscConfig+0x31e>
 80040b8:	e0b6      	b.n	8004228 <HAL_RCC_OscConfig+0x48c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d000      	beq.n	80040c4 <HAL_RCC_OscConfig+0x328>
 80040c2:	e0b1      	b.n	8004228 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e171      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
 80040c8:	40021000 	.word	0x40021000
 80040cc:	fffeffff 	.word	0xfffeffff
 80040d0:	fffbffff 	.word	0xfffbffff
 80040d4:	ffff80ff 	.word	0xffff80ff
 80040d8:	ffffc7ff 	.word	0xffffc7ff
 80040dc:	00f42400 	.word	0x00f42400
 80040e0:	2000000c 	.word	0x2000000c
 80040e4:	20000010 	.word	0x20000010
 80040e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040ec:	4bb1      	ldr	r3, [pc, #708]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80040ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	055b      	lsls	r3, r3, #21
 80040f4:	4013      	ands	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_OscConfig+0x360>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_RCC_OscConfig+0x362>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d011      	beq.n	8004126 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4bac      	ldr	r3, [pc, #688]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004106:	4bab      	ldr	r3, [pc, #684]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004108:	2180      	movs	r1, #128	; 0x80
 800410a:	0549      	lsls	r1, r1, #21
 800410c:	430a      	orrs	r2, r1
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004110:	4ba8      	ldr	r3, [pc, #672]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	055b      	lsls	r3, r3, #21
 8004118:	4013      	ands	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800411e:	231f      	movs	r3, #31
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	2201      	movs	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004126:	4ba4      	ldr	r3, [pc, #656]	; (80043b8 <HAL_RCC_OscConfig+0x61c>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4013      	ands	r3, r2
 8004130:	d11a      	bne.n	8004168 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004132:	4ba1      	ldr	r3, [pc, #644]	; (80043b8 <HAL_RCC_OscConfig+0x61c>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4ba0      	ldr	r3, [pc, #640]	; (80043b8 <HAL_RCC_OscConfig+0x61c>)
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	0049      	lsls	r1, r1, #1
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004140:	f7fd fe3c 	bl	8001dbc <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414a:	f7fd fe37 	bl	8001dbc <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e127      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415c:	4b96      	ldr	r3, [pc, #600]	; (80043b8 <HAL_RCC_OscConfig+0x61c>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4013      	ands	r3, r2
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x3e2>
 8004170:	4b90      	ldr	r3, [pc, #576]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004172:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004174:	4b8f      	ldr	r3, [pc, #572]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004176:	2101      	movs	r1, #1
 8004178:	430a      	orrs	r2, r1
 800417a:	65da      	str	r2, [r3, #92]	; 0x5c
 800417c:	e01c      	b.n	80041b8 <HAL_RCC_OscConfig+0x41c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b05      	cmp	r3, #5
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x404>
 8004186:	4b8b      	ldr	r3, [pc, #556]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800418a:	4b8a      	ldr	r3, [pc, #552]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 800418c:	2104      	movs	r1, #4
 800418e:	430a      	orrs	r2, r1
 8004190:	65da      	str	r2, [r3, #92]	; 0x5c
 8004192:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004194:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004196:	4b87      	ldr	r3, [pc, #540]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004198:	2101      	movs	r1, #1
 800419a:	430a      	orrs	r2, r1
 800419c:	65da      	str	r2, [r3, #92]	; 0x5c
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_OscConfig+0x41c>
 80041a0:	4b84      	ldr	r3, [pc, #528]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80041a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041a4:	4b83      	ldr	r3, [pc, #524]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80041a6:	2101      	movs	r1, #1
 80041a8:	438a      	bics	r2, r1
 80041aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80041ac:	4b81      	ldr	r3, [pc, #516]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80041ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041b0:	4b80      	ldr	r3, [pc, #512]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80041b2:	2104      	movs	r1, #4
 80041b4:	438a      	bics	r2, r1
 80041b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d014      	beq.n	80041ea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fd fdfc 	bl	8001dbc <HAL_GetTick>
 80041c4:	0003      	movs	r3, r0
 80041c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c8:	e009      	b.n	80041de <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fd fdf7 	bl	8001dbc <HAL_GetTick>
 80041ce:	0002      	movs	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	4a79      	ldr	r2, [pc, #484]	; (80043bc <HAL_RCC_OscConfig+0x620>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e0e6      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041de:	4b75      	ldr	r3, [pc, #468]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	2202      	movs	r2, #2
 80041e4:	4013      	ands	r3, r2
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x42e>
 80041e8:	e013      	b.n	8004212 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fd fde7 	bl	8001dbc <HAL_GetTick>
 80041ee:	0003      	movs	r3, r0
 80041f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041f2:	e009      	b.n	8004208 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f4:	f7fd fde2 	bl	8001dbc <HAL_GetTick>
 80041f8:	0002      	movs	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	4a6f      	ldr	r2, [pc, #444]	; (80043bc <HAL_RCC_OscConfig+0x620>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e0d1      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004208:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	2202      	movs	r2, #2
 800420e:	4013      	ands	r3, r2
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004212:	231f      	movs	r3, #31
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d105      	bne.n	8004228 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800421c:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 800421e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004220:	4b64      	ldr	r3, [pc, #400]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004222:	4967      	ldr	r1, [pc, #412]	; (80043c0 <HAL_RCC_OscConfig+0x624>)
 8004224:	400a      	ands	r2, r1
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d100      	bne.n	8004232 <HAL_RCC_OscConfig+0x496>
 8004230:	e0bb      	b.n	80043aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004232:	4b60      	ldr	r3, [pc, #384]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2238      	movs	r2, #56	; 0x38
 8004238:	4013      	ands	r3, r2
 800423a:	2b10      	cmp	r3, #16
 800423c:	d100      	bne.n	8004240 <HAL_RCC_OscConfig+0x4a4>
 800423e:	e07b      	b.n	8004338 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d156      	bne.n	80042f6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004248:	4b5a      	ldr	r3, [pc, #360]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 800424e:	495d      	ldr	r1, [pc, #372]	; (80043c4 <HAL_RCC_OscConfig+0x628>)
 8004250:	400a      	ands	r2, r1
 8004252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd fdb2 	bl	8001dbc <HAL_GetTick>
 8004258:	0003      	movs	r3, r0
 800425a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425e:	f7fd fdad 	bl	8001dbc <HAL_GetTick>
 8004262:	0002      	movs	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e09d      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	049b      	lsls	r3, r3, #18
 8004278:	4013      	ands	r3, r2
 800427a:	d1f0      	bne.n	800425e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800427c:	4b4d      	ldr	r3, [pc, #308]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a51      	ldr	r2, [pc, #324]	; (80043c8 <HAL_RCC_OscConfig+0x62c>)
 8004282:	4013      	ands	r3, r2
 8004284:	0019      	movs	r1, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1a      	ldr	r2, [r3, #32]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a8:	431a      	orrs	r2, r3
 80042aa:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80042ac:	430a      	orrs	r2, r1
 80042ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b0:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	0449      	lsls	r1, r1, #17
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80042be:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80042c4:	2180      	movs	r1, #128	; 0x80
 80042c6:	0549      	lsls	r1, r1, #21
 80042c8:	430a      	orrs	r2, r1
 80042ca:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd fd76 	bl	8001dbc <HAL_GetTick>
 80042d0:	0003      	movs	r3, r0
 80042d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d6:	f7fd fd71 	bl	8001dbc <HAL_GetTick>
 80042da:	0002      	movs	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e061      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e8:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	049b      	lsls	r3, r3, #18
 80042f0:	4013      	ands	r3, r2
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x53a>
 80042f4:	e059      	b.n	80043aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f6:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b2e      	ldr	r3, [pc, #184]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 80042fc:	4931      	ldr	r1, [pc, #196]	; (80043c4 <HAL_RCC_OscConfig+0x628>)
 80042fe:	400a      	ands	r2, r1
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7fd fd5b 	bl	8001dbc <HAL_GetTick>
 8004306:	0003      	movs	r3, r0
 8004308:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fd fd56 	bl	8001dbc <HAL_GetTick>
 8004310:	0002      	movs	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e046      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431e:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	049b      	lsls	r3, r3, #18
 8004326:	4013      	ands	r3, r2
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004330:	4926      	ldr	r1, [pc, #152]	; (80043cc <HAL_RCC_OscConfig+0x630>)
 8004332:	400a      	ands	r2, r1
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	e038      	b.n	80043aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e033      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004344:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x618>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2203      	movs	r2, #3
 800434e:	401a      	ands	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	429a      	cmp	r2, r3
 8004356:	d126      	bne.n	80043a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2270      	movs	r2, #112	; 0x70
 800435c:	401a      	ands	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d11f      	bne.n	80043a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	23fe      	movs	r3, #254	; 0xfe
 800436a:	01db      	lsls	r3, r3, #7
 800436c:	401a      	ands	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d116      	bne.n	80043a6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	23f8      	movs	r3, #248	; 0xf8
 800437c:	039b      	lsls	r3, r3, #14
 800437e:	401a      	ands	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d10e      	bne.n	80043a6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	23e0      	movs	r3, #224	; 0xe0
 800438c:	051b      	lsls	r3, r3, #20
 800438e:	401a      	ands	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d106      	bne.n	80043a6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	0f5b      	lsrs	r3, r3, #29
 800439c:	075a      	lsls	r2, r3, #29
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d001      	beq.n	80043aa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	0018      	movs	r0, r3
 80043ae:	46bd      	mov	sp, r7
 80043b0:	b008      	add	sp, #32
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40007000 	.word	0x40007000
 80043bc:	00001388 	.word	0x00001388
 80043c0:	efffffff 	.word	0xefffffff
 80043c4:	feffffff 	.word	0xfeffffff
 80043c8:	11c1808c 	.word	0x11c1808c
 80043cc:	eefefffc 	.word	0xeefefffc

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0e9      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b76      	ldr	r3, [pc, #472]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2207      	movs	r2, #7
 80043ea:	4013      	ands	r3, r2
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d91e      	bls.n	8004430 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b73      	ldr	r3, [pc, #460]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2207      	movs	r2, #7
 80043f8:	4393      	bics	r3, r2
 80043fa:	0019      	movs	r1, r3
 80043fc:	4b70      	ldr	r3, [pc, #448]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004404:	f7fd fcda 	bl	8001dbc <HAL_GetTick>
 8004408:	0003      	movs	r3, r0
 800440a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800440c:	e009      	b.n	8004422 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800440e:	f7fd fcd5 	bl	8001dbc <HAL_GetTick>
 8004412:	0002      	movs	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	4a6a      	ldr	r2, [pc, #424]	; (80045c4 <HAL_RCC_ClockConfig+0x1f4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0ca      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004422:	4b67      	ldr	r3, [pc, #412]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2207      	movs	r2, #7
 8004428:	4013      	ands	r3, r2
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d1ee      	bne.n	800440e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2202      	movs	r2, #2
 8004436:	4013      	ands	r3, r2
 8004438:	d015      	beq.n	8004466 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2204      	movs	r2, #4
 8004440:	4013      	ands	r3, r2
 8004442:	d006      	beq.n	8004452 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004444:	4b60      	ldr	r3, [pc, #384]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	4b5f      	ldr	r3, [pc, #380]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 800444a:	21e0      	movs	r1, #224	; 0xe0
 800444c:	01c9      	lsls	r1, r1, #7
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004452:	4b5d      	ldr	r3, [pc, #372]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4a5d      	ldr	r2, [pc, #372]	; (80045cc <HAL_RCC_ClockConfig+0x1fc>)
 8004458:	4013      	ands	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	4b59      	ldr	r3, [pc, #356]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2201      	movs	r2, #1
 800446c:	4013      	ands	r3, r2
 800446e:	d057      	beq.n	8004520 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004478:	4b53      	ldr	r3, [pc, #332]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	029b      	lsls	r3, r3, #10
 8004480:	4013      	ands	r3, r2
 8004482:	d12b      	bne.n	80044dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e097      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004490:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	049b      	lsls	r3, r3, #18
 8004498:	4013      	ands	r3, r2
 800449a:	d11f      	bne.n	80044dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e08b      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d107      	bne.n	80044b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044a8:	4b47      	ldr	r3, [pc, #284]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4013      	ands	r3, r2
 80044b2:	d113      	bne.n	80044dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e07f      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d106      	bne.n	80044ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c0:	4b41      	ldr	r3, [pc, #260]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 80044c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d108      	bne.n	80044dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e074      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ce:	4b3e      	ldr	r3, [pc, #248]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 80044d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d2:	2202      	movs	r2, #2
 80044d4:	4013      	ands	r3, r2
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e06d      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044dc:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2207      	movs	r2, #7
 80044e2:	4393      	bics	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fd fc64 	bl	8001dbc <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f8:	e009      	b.n	800450e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044fa:	f7fd fc5f 	bl	8001dbc <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <HAL_RCC_ClockConfig+0x1f4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e054      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	4b2e      	ldr	r3, [pc, #184]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2238      	movs	r2, #56	; 0x38
 8004514:	401a      	ands	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	429a      	cmp	r2, r3
 800451e:	d1ec      	bne.n	80044fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004520:	4b27      	ldr	r3, [pc, #156]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2207      	movs	r2, #7
 8004526:	4013      	ands	r3, r2
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d21e      	bcs.n	800456c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2207      	movs	r2, #7
 8004534:	4393      	bics	r3, r2
 8004536:	0019      	movs	r1, r3
 8004538:	4b21      	ldr	r3, [pc, #132]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004540:	f7fd fc3c 	bl	8001dbc <HAL_GetTick>
 8004544:	0003      	movs	r3, r0
 8004546:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004548:	e009      	b.n	800455e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454a:	f7fd fc37 	bl	8001dbc <HAL_GetTick>
 800454e:	0002      	movs	r2, r0
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_RCC_ClockConfig+0x1f4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e02c      	b.n	80045b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2207      	movs	r2, #7
 8004564:	4013      	ands	r3, r2
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d1ee      	bne.n	800454a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2204      	movs	r2, #4
 8004572:	4013      	ands	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <HAL_RCC_ClockConfig+0x200>)
 800457c:	4013      	ands	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800458a:	f000 f829 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800458e:	0001      	movs	r1, r0
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <HAL_RCC_ClockConfig+0x1f8>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	220f      	movs	r2, #15
 8004598:	401a      	ands	r2, r3
 800459a:	4b0e      	ldr	r3, [pc, #56]	; (80045d4 <HAL_RCC_ClockConfig+0x204>)
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	58d3      	ldr	r3, [r2, r3]
 80045a0:	221f      	movs	r2, #31
 80045a2:	4013      	ands	r3, r2
 80045a4:	000a      	movs	r2, r1
 80045a6:	40da      	lsrs	r2, r3
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_ClockConfig+0x208>)
 80045aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_ClockConfig+0x20c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7fd fba7 	bl	8001d04 <HAL_InitTick>
 80045b6:	0003      	movs	r3, r0
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b004      	add	sp, #16
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40022000 	.word	0x40022000
 80045c4:	00001388 	.word	0x00001388
 80045c8:	40021000 	.word	0x40021000
 80045cc:	fffff0ff 	.word	0xfffff0ff
 80045d0:	ffff8fff 	.word	0xffff8fff
 80045d4:	0800919c 	.word	0x0800919c
 80045d8:	2000000c 	.word	0x2000000c
 80045dc:	20000010 	.word	0x20000010

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e6:	4b3c      	ldr	r3, [pc, #240]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2238      	movs	r2, #56	; 0x38
 80045ec:	4013      	ands	r3, r2
 80045ee:	d10f      	bne.n	8004610 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80045f0:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	0adb      	lsrs	r3, r3, #11
 80045f6:	2207      	movs	r2, #7
 80045f8:	4013      	ands	r3, r2
 80045fa:	2201      	movs	r2, #1
 80045fc:	409a      	lsls	r2, r3
 80045fe:	0013      	movs	r3, r2
 8004600:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	4835      	ldr	r0, [pc, #212]	; (80046dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004606:	f7fb fd99 	bl	800013c <__udivsi3>
 800460a:	0003      	movs	r3, r0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e05d      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004610:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2238      	movs	r2, #56	; 0x38
 8004616:	4013      	ands	r3, r2
 8004618:	2b08      	cmp	r3, #8
 800461a:	d102      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800461c:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	e054      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004622:	4b2d      	ldr	r3, [pc, #180]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2238      	movs	r2, #56	; 0x38
 8004628:	4013      	ands	r3, r2
 800462a:	2b10      	cmp	r3, #16
 800462c:	d138      	bne.n	80046a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800462e:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2203      	movs	r2, #3
 8004634:	4013      	ands	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004638:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	2207      	movs	r2, #7
 8004640:	4013      	ands	r3, r2
 8004642:	3301      	adds	r3, #1
 8004644:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d10d      	bne.n	8004668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	4824      	ldr	r0, [pc, #144]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004650:	f7fb fd74 	bl	800013c <__udivsi3>
 8004654:	0003      	movs	r3, r0
 8004656:	0019      	movs	r1, r3
 8004658:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	227f      	movs	r2, #127	; 0x7f
 8004660:	4013      	ands	r3, r2
 8004662:	434b      	muls	r3, r1
 8004664:	617b      	str	r3, [r7, #20]
        break;
 8004666:	e00d      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	481c      	ldr	r0, [pc, #112]	; (80046dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800466c:	f7fb fd66 	bl	800013c <__udivsi3>
 8004670:	0003      	movs	r3, r0
 8004672:	0019      	movs	r1, r3
 8004674:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	227f      	movs	r2, #127	; 0x7f
 800467c:	4013      	ands	r3, r2
 800467e:	434b      	muls	r3, r1
 8004680:	617b      	str	r3, [r7, #20]
        break;
 8004682:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004684:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	0f5b      	lsrs	r3, r3, #29
 800468a:	2207      	movs	r2, #7
 800468c:	4013      	ands	r3, r2
 800468e:	3301      	adds	r3, #1
 8004690:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	6978      	ldr	r0, [r7, #20]
 8004696:	f7fb fd51 	bl	800013c <__udivsi3>
 800469a:	0003      	movs	r3, r0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	e015      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80046a0:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2238      	movs	r2, #56	; 0x38
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d103      	bne.n	80046b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046b4:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2238      	movs	r2, #56	; 0x38
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b18      	cmp	r3, #24
 80046be:	d103      	bne.n	80046c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80046c0:	23fa      	movs	r3, #250	; 0xfa
 80046c2:	01db      	lsls	r3, r3, #7
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e001      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046cc:	693b      	ldr	r3, [r7, #16]
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b006      	add	sp, #24
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	40021000 	.word	0x40021000
 80046dc:	00f42400 	.word	0x00f42400
 80046e0:	007a1200 	.word	0x007a1200

080046e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f8:	b5b0      	push	{r4, r5, r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80046fc:	f7ff fff2 	bl	80046e4 <HAL_RCC_GetHCLKFreq>
 8004700:	0004      	movs	r4, r0
 8004702:	f7ff fb3f 	bl	8003d84 <LL_RCC_GetAPB1Prescaler>
 8004706:	0003      	movs	r3, r0
 8004708:	0b1a      	lsrs	r2, r3, #12
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_GetPCLK1Freq+0x28>)
 800470c:	0092      	lsls	r2, r2, #2
 800470e:	58d3      	ldr	r3, [r2, r3]
 8004710:	221f      	movs	r2, #31
 8004712:	4013      	ands	r3, r2
 8004714:	40dc      	lsrs	r4, r3
 8004716:	0023      	movs	r3, r4
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	bdb0      	pop	{r4, r5, r7, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	080091dc 	.word	0x080091dc

08004724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800472c:	2313      	movs	r3, #19
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004734:	2312      	movs	r3, #18
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	029b      	lsls	r3, r3, #10
 8004744:	4013      	ands	r3, r2
 8004746:	d100      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004748:	e0a3      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474a:	2011      	movs	r0, #17
 800474c:	183b      	adds	r3, r7, r0
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004752:	4bc3      	ldr	r3, [pc, #780]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	055b      	lsls	r3, r3, #21
 800475a:	4013      	ands	r3, r2
 800475c:	d110      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475e:	4bc0      	ldr	r3, [pc, #768]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004762:	4bbf      	ldr	r3, [pc, #764]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004764:	2180      	movs	r1, #128	; 0x80
 8004766:	0549      	lsls	r1, r1, #21
 8004768:	430a      	orrs	r2, r1
 800476a:	63da      	str	r2, [r3, #60]	; 0x3c
 800476c:	4bbc      	ldr	r3, [pc, #752]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800476e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	055b      	lsls	r3, r3, #21
 8004774:	4013      	ands	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477a:	183b      	adds	r3, r7, r0
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004780:	4bb8      	ldr	r3, [pc, #736]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4bb7      	ldr	r3, [pc, #732]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004786:	2180      	movs	r1, #128	; 0x80
 8004788:	0049      	lsls	r1, r1, #1
 800478a:	430a      	orrs	r2, r1
 800478c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800478e:	f7fd fb15 	bl	8001dbc <HAL_GetTick>
 8004792:	0003      	movs	r3, r0
 8004794:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004796:	e00b      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004798:	f7fd fb10 	bl	8001dbc <HAL_GetTick>
 800479c:	0002      	movs	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d904      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80047a6:	2313      	movs	r3, #19
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	2203      	movs	r2, #3
 80047ac:	701a      	strb	r2, [r3, #0]
        break;
 80047ae:	e005      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b0:	4bac      	ldr	r3, [pc, #688]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4013      	ands	r3, r2
 80047ba:	d0ed      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80047bc:	2313      	movs	r3, #19
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d154      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047c6:	4ba6      	ldr	r3, [pc, #664]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047ca:	23c0      	movs	r3, #192	; 0xc0
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4013      	ands	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d019      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d014      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047e2:	4b9f      	ldr	r3, [pc, #636]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	4aa0      	ldr	r2, [pc, #640]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047ec:	4b9c      	ldr	r3, [pc, #624]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047f0:	4b9b      	ldr	r3, [pc, #620]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047f2:	2180      	movs	r1, #128	; 0x80
 80047f4:	0249      	lsls	r1, r1, #9
 80047f6:	430a      	orrs	r2, r1
 80047f8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047fa:	4b99      	ldr	r3, [pc, #612]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80047fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047fe:	4b98      	ldr	r3, [pc, #608]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004800:	499a      	ldr	r1, [pc, #616]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004802:	400a      	ands	r2, r1
 8004804:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004806:	4b96      	ldr	r3, [pc, #600]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2201      	movs	r2, #1
 8004810:	4013      	ands	r3, r2
 8004812:	d016      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fd fad2 	bl	8001dbc <HAL_GetTick>
 8004818:	0003      	movs	r3, r0
 800481a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481c:	e00c      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481e:	f7fd facd 	bl	8001dbc <HAL_GetTick>
 8004822:	0002      	movs	r2, r0
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	4a91      	ldr	r2, [pc, #580]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d904      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800482e:	2313      	movs	r3, #19
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	2203      	movs	r2, #3
 8004834:	701a      	strb	r2, [r3, #0]
            break;
 8004836:	e004      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004838:	4b89      	ldr	r3, [pc, #548]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800483a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483c:	2202      	movs	r2, #2
 800483e:	4013      	ands	r3, r2
 8004840:	d0ed      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004842:	2313      	movs	r3, #19
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484c:	4b84      	ldr	r3, [pc, #528]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800484e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004850:	4a85      	ldr	r2, [pc, #532]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485a:	4b81      	ldr	r3, [pc, #516]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800485c:	430a      	orrs	r2, r1
 800485e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004860:	e00c      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004862:	2312      	movs	r3, #18
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2213      	movs	r2, #19
 8004868:	18ba      	adds	r2, r7, r2
 800486a:	7812      	ldrb	r2, [r2, #0]
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e005      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	2312      	movs	r3, #18
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	2213      	movs	r2, #19
 8004876:	18ba      	adds	r2, r7, r2
 8004878:	7812      	ldrb	r2, [r2, #0]
 800487a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800487c:	2311      	movs	r3, #17
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d105      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004886:	4b76      	ldr	r3, [pc, #472]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800488a:	4b75      	ldr	r3, [pc, #468]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800488c:	4979      	ldr	r1, [pc, #484]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800488e:	400a      	ands	r2, r1
 8004890:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2201      	movs	r2, #1
 8004898:	4013      	ands	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800489c:	4b70      	ldr	r3, [pc, #448]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	2203      	movs	r2, #3
 80048a2:	4393      	bics	r3, r2
 80048a4:	0019      	movs	r1, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	4b6d      	ldr	r3, [pc, #436]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048ac:	430a      	orrs	r2, r1
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2202      	movs	r2, #2
 80048b6:	4013      	ands	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048ba:	4b69      	ldr	r3, [pc, #420]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	220c      	movs	r2, #12
 80048c0:	4393      	bics	r3, r2
 80048c2:	0019      	movs	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	4b65      	ldr	r3, [pc, #404]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048ca:	430a      	orrs	r2, r1
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2210      	movs	r2, #16
 80048d4:	4013      	ands	r3, r2
 80048d6:	d009      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d8:	4b61      	ldr	r3, [pc, #388]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	4a66      	ldr	r2, [pc, #408]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80048de:	4013      	ands	r3, r2
 80048e0:	0019      	movs	r1, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	4b5e      	ldr	r3, [pc, #376]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048e8:	430a      	orrs	r2, r1
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4013      	ands	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048f8:	4b59      	ldr	r3, [pc, #356]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	4a5f      	ldr	r2, [pc, #380]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80048fe:	4013      	ands	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	4b56      	ldr	r3, [pc, #344]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004908:	430a      	orrs	r2, r1
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4013      	ands	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004918:	4b51      	ldr	r3, [pc, #324]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491e:	4013      	ands	r3, r2
 8004920:	0019      	movs	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004928:	430a      	orrs	r2, r1
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2220      	movs	r2, #32
 8004932:	4013      	ands	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004936:	4b4a      	ldr	r3, [pc, #296]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	4a52      	ldr	r2, [pc, #328]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800493c:	4013      	ands	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004946:	430a      	orrs	r2, r1
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	01db      	lsls	r3, r3, #7
 8004952:	4013      	ands	r3, r2
 8004954:	d015      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004956:	4b42      	ldr	r3, [pc, #264]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	0899      	lsrs	r1, r3, #2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1a      	ldr	r2, [r3, #32]
 8004962:	4b3f      	ldr	r3, [pc, #252]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004964:	430a      	orrs	r2, r1
 8004966:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	05db      	lsls	r3, r3, #23
 8004970:	429a      	cmp	r2, r3
 8004972:	d106      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004974:	4b3a      	ldr	r3, [pc, #232]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800497a:	2180      	movs	r1, #128	; 0x80
 800497c:	0249      	lsls	r1, r1, #9
 800497e:	430a      	orrs	r2, r1
 8004980:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	031b      	lsls	r3, r3, #12
 800498a:	4013      	ands	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800498e:	4b34      	ldr	r3, [pc, #208]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	2240      	movs	r2, #64	; 0x40
 8004994:	4393      	bics	r3, r2
 8004996:	0019      	movs	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800499c:	4b30      	ldr	r3, [pc, #192]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800499e:	430a      	orrs	r2, r1
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	039b      	lsls	r3, r3, #14
 80049aa:	4013      	ands	r3, r2
 80049ac:	d016      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049ae:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	4a35      	ldr	r2, [pc, #212]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	0019      	movs	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049bc:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049be:	430a      	orrs	r2, r1
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	03db      	lsls	r3, r3, #15
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d106      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	0449      	lsls	r1, r1, #17
 80049d8:	430a      	orrs	r2, r1
 80049da:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	03db      	lsls	r3, r3, #15
 80049e4:	4013      	ands	r3, r2
 80049e6:	d016      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80049e8:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	4a27      	ldr	r2, [pc, #156]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f6:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049f8:	430a      	orrs	r2, r1
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	045b      	lsls	r3, r3, #17
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d106      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a08:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a0e:	2180      	movs	r1, #128	; 0x80
 8004a10:	0449      	lsls	r1, r1, #17
 8004a12:	430a      	orrs	r2, r1
 8004a14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d016      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	0019      	movs	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	4b0b      	ldr	r3, [pc, #44]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a32:	430a      	orrs	r2, r1
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695a      	ldr	r2, [r3, #20]
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	01db      	lsls	r3, r3, #7
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d106      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a42:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a48:	2180      	movs	r1, #128	; 0x80
 8004a4a:	0249      	lsls	r1, r1, #9
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004a50:	2312      	movs	r3, #18
 8004a52:	18fb      	adds	r3, r7, r3
 8004a54:	781b      	ldrb	r3, [r3, #0]
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b006      	add	sp, #24
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			; (mov r8, r8)
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40007000 	.word	0x40007000
 8004a68:	fffffcff 	.word	0xfffffcff
 8004a6c:	fffeffff 	.word	0xfffeffff
 8004a70:	00001388 	.word	0x00001388
 8004a74:	efffffff 	.word	0xefffffff
 8004a78:	fffff3ff 	.word	0xfffff3ff
 8004a7c:	fff3ffff 	.word	0xfff3ffff
 8004a80:	ffcfffff 	.word	0xffcfffff
 8004a84:	ffffcfff 	.word	0xffffcfff
 8004a88:	ffbfffff 	.word	0xffbfffff
 8004a8c:	feffffff 	.word	0xfeffffff
 8004a90:	ffff3fff 	.word	0xffff3fff

08004a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e04a      	b.n	8004b3c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	223d      	movs	r2, #61	; 0x3d
 8004aaa:	5c9b      	ldrb	r3, [r3, r2]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	223c      	movs	r2, #60	; 0x3c
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7fc fec9 	bl	8001854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	223d      	movs	r2, #61	; 0x3d
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	0010      	movs	r0, r2
 8004ad6:	f000 fcd9 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2248      	movs	r2, #72	; 0x48
 8004ade:	2101      	movs	r1, #1
 8004ae0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	223e      	movs	r2, #62	; 0x3e
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	5499      	strb	r1, [r3, r2]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	223f      	movs	r2, #63	; 0x3f
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2240      	movs	r2, #64	; 0x40
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2241      	movs	r2, #65	; 0x41
 8004afe:	2101      	movs	r1, #1
 8004b00:	5499      	strb	r1, [r3, r2]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2242      	movs	r2, #66	; 0x42
 8004b06:	2101      	movs	r1, #1
 8004b08:	5499      	strb	r1, [r3, r2]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2243      	movs	r2, #67	; 0x43
 8004b0e:	2101      	movs	r1, #1
 8004b10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2244      	movs	r2, #68	; 0x44
 8004b16:	2101      	movs	r1, #1
 8004b18:	5499      	strb	r1, [r3, r2]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2245      	movs	r2, #69	; 0x45
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2246      	movs	r2, #70	; 0x46
 8004b26:	2101      	movs	r1, #1
 8004b28:	5499      	strb	r1, [r3, r2]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2247      	movs	r2, #71	; 0x47
 8004b2e:	2101      	movs	r1, #1
 8004b30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	223d      	movs	r2, #61	; 0x3d
 8004b36:	2101      	movs	r1, #1
 8004b38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b002      	add	sp, #8
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	223d      	movs	r2, #61	; 0x3d
 8004b50:	5c9b      	ldrb	r3, [r3, r2]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d001      	beq.n	8004b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e042      	b.n	8004be2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	223d      	movs	r2, #61	; 0x3d
 8004b60:	2102      	movs	r1, #2
 8004b62:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2101      	movs	r1, #1
 8004b70:	430a      	orrs	r2, r1
 8004b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <HAL_TIM_Base_Start_IT+0xa8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00f      	beq.n	8004b9e <HAL_TIM_Base_Start_IT+0x5a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	05db      	lsls	r3, r3, #23
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d009      	beq.n	8004b9e <HAL_TIM_Base_Start_IT+0x5a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xac>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <HAL_TIM_Base_Start_IT+0x5a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d116      	bne.n	8004bcc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b06      	cmp	r3, #6
 8004bae:	d016      	beq.n	8004bde <HAL_TIM_Base_Start_IT+0x9a>
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	025b      	lsls	r3, r3, #9
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d011      	beq.n	8004bde <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bca:	e008      	b.n	8004bde <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	e000      	b.n	8004be0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bde:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b004      	add	sp, #16
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	00010007 	.word	0x00010007

08004bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e04a      	b.n	8004ca4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	223d      	movs	r2, #61	; 0x3d
 8004c12:	5c9b      	ldrb	r3, [r3, r2]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d107      	bne.n	8004c2a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	223c      	movs	r2, #60	; 0x3c
 8004c1e:	2100      	movs	r1, #0
 8004c20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 f841 	bl	8004cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	223d      	movs	r2, #61	; 0x3d
 8004c2e:	2102      	movs	r1, #2
 8004c30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	0010      	movs	r0, r2
 8004c3e:	f000 fc25 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2248      	movs	r2, #72	; 0x48
 8004c46:	2101      	movs	r1, #1
 8004c48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	223e      	movs	r2, #62	; 0x3e
 8004c4e:	2101      	movs	r1, #1
 8004c50:	5499      	strb	r1, [r3, r2]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	223f      	movs	r2, #63	; 0x3f
 8004c56:	2101      	movs	r1, #1
 8004c58:	5499      	strb	r1, [r3, r2]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2240      	movs	r2, #64	; 0x40
 8004c5e:	2101      	movs	r1, #1
 8004c60:	5499      	strb	r1, [r3, r2]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2241      	movs	r2, #65	; 0x41
 8004c66:	2101      	movs	r1, #1
 8004c68:	5499      	strb	r1, [r3, r2]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2242      	movs	r2, #66	; 0x42
 8004c6e:	2101      	movs	r1, #1
 8004c70:	5499      	strb	r1, [r3, r2]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2243      	movs	r2, #67	; 0x43
 8004c76:	2101      	movs	r1, #1
 8004c78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2244      	movs	r2, #68	; 0x44
 8004c7e:	2101      	movs	r1, #1
 8004c80:	5499      	strb	r1, [r3, r2]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2245      	movs	r2, #69	; 0x45
 8004c86:	2101      	movs	r1, #1
 8004c88:	5499      	strb	r1, [r3, r2]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2246      	movs	r2, #70	; 0x46
 8004c8e:	2101      	movs	r1, #1
 8004c90:	5499      	strb	r1, [r3, r2]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2247      	movs	r2, #71	; 0x47
 8004c96:	2101      	movs	r1, #1
 8004c98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	223d      	movs	r2, #61	; 0x3d
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b002      	add	sp, #8
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cb4:	46c0      	nop			; (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b002      	add	sp, #8
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <HAL_TIM_PWM_Start+0x22>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	223e      	movs	r2, #62	; 0x3e
 8004cd0:	5c9b      	ldrb	r3, [r3, r2]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	1e5a      	subs	r2, r3, #1
 8004cd8:	4193      	sbcs	r3, r2
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	e037      	b.n	8004d4e <HAL_TIM_PWM_Start+0x92>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d108      	bne.n	8004cf6 <HAL_TIM_PWM_Start+0x3a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	223f      	movs	r2, #63	; 0x3f
 8004ce8:	5c9b      	ldrb	r3, [r3, r2]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	1e5a      	subs	r2, r3, #1
 8004cf0:	4193      	sbcs	r3, r2
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	e02b      	b.n	8004d4e <HAL_TIM_PWM_Start+0x92>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d108      	bne.n	8004d0e <HAL_TIM_PWM_Start+0x52>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	5c9b      	ldrb	r3, [r3, r2]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	1e5a      	subs	r2, r3, #1
 8004d08:	4193      	sbcs	r3, r2
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e01f      	b.n	8004d4e <HAL_TIM_PWM_Start+0x92>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b0c      	cmp	r3, #12
 8004d12:	d108      	bne.n	8004d26 <HAL_TIM_PWM_Start+0x6a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2241      	movs	r2, #65	; 0x41
 8004d18:	5c9b      	ldrb	r3, [r3, r2]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	1e5a      	subs	r2, r3, #1
 8004d20:	4193      	sbcs	r3, r2
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	e013      	b.n	8004d4e <HAL_TIM_PWM_Start+0x92>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d108      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x82>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2242      	movs	r2, #66	; 0x42
 8004d30:	5c9b      	ldrb	r3, [r3, r2]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	1e5a      	subs	r2, r3, #1
 8004d38:	4193      	sbcs	r3, r2
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e007      	b.n	8004d4e <HAL_TIM_PWM_Start+0x92>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2243      	movs	r2, #67	; 0x43
 8004d42:	5c9b      	ldrb	r3, [r3, r2]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	1e5a      	subs	r2, r3, #1
 8004d4a:	4193      	sbcs	r3, r2
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e08b      	b.n	8004e6e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <HAL_TIM_PWM_Start+0xaa>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	223e      	movs	r2, #62	; 0x3e
 8004d60:	2102      	movs	r1, #2
 8004d62:	5499      	strb	r1, [r3, r2]
 8004d64:	e023      	b.n	8004dae <HAL_TIM_PWM_Start+0xf2>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIM_PWM_Start+0xba>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	223f      	movs	r2, #63	; 0x3f
 8004d70:	2102      	movs	r1, #2
 8004d72:	5499      	strb	r1, [r3, r2]
 8004d74:	e01b      	b.n	8004dae <HAL_TIM_PWM_Start+0xf2>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_PWM_Start+0xca>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2240      	movs	r2, #64	; 0x40
 8004d80:	2102      	movs	r1, #2
 8004d82:	5499      	strb	r1, [r3, r2]
 8004d84:	e013      	b.n	8004dae <HAL_TIM_PWM_Start+0xf2>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_PWM_Start+0xda>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2241      	movs	r2, #65	; 0x41
 8004d90:	2102      	movs	r1, #2
 8004d92:	5499      	strb	r1, [r3, r2]
 8004d94:	e00b      	b.n	8004dae <HAL_TIM_PWM_Start+0xf2>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xea>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2242      	movs	r2, #66	; 0x42
 8004da0:	2102      	movs	r1, #2
 8004da2:	5499      	strb	r1, [r3, r2]
 8004da4:	e003      	b.n	8004dae <HAL_TIM_PWM_Start+0xf2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2243      	movs	r2, #67	; 0x43
 8004daa:	2102      	movs	r1, #2
 8004dac:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	2201      	movs	r2, #1
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 ff56 	bl	8005c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <HAL_TIM_PWM_Start+0x1bc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x128>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <HAL_TIM_PWM_Start+0x1c0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x128>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <HAL_TIM_PWM_Start+0x1c4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x128>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a29      	ldr	r2, [pc, #164]	; (8004e84 <HAL_TIM_PWM_Start+0x1c8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <HAL_TIM_PWM_Start+0x12c>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <HAL_TIM_PWM_Start+0x12e>
 8004de8:	2300      	movs	r3, #0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	0209      	lsls	r1, r1, #8
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <HAL_TIM_PWM_Start+0x1bc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00f      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x16e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	05db      	lsls	r3, r3, #23
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d009      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x16e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <HAL_TIM_PWM_Start+0x1cc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_TIM_PWM_Start+0x16e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <HAL_TIM_PWM_Start+0x1c0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d116      	bne.n	8004e58 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a16      	ldr	r2, [pc, #88]	; (8004e8c <HAL_TIM_PWM_Start+0x1d0>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b06      	cmp	r3, #6
 8004e3a:	d016      	beq.n	8004e6a <HAL_TIM_PWM_Start+0x1ae>
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	025b      	lsls	r3, r3, #9
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d011      	beq.n	8004e6a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2101      	movs	r1, #1
 8004e52:	430a      	orrs	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e56:	e008      	b.n	8004e6a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2101      	movs	r1, #1
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e000      	b.n	8004e6c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b004      	add	sp, #16
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40014400 	.word	0x40014400
 8004e84:	40014800 	.word	0x40014800
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	00010007 	.word	0x00010007

08004e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	4013      	ands	r3, r2
 8004eae:	d021      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d01d      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	4252      	negs	r2, r2
 8004ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f000 fac0 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 8004edc:	e007      	b.n	8004eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fab3 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f000 fabf 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2204      	movs	r2, #4
 8004f00:	4013      	ands	r3, r2
 8004f02:	d01e      	beq.n	8004f42 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2205      	movs	r2, #5
 8004f0a:	4252      	negs	r2, r2
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	23c0      	movs	r3, #192	; 0xc0
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f000 fa99 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 8004f2a:	e007      	b.n	8004f3c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f000 fa8c 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f000 fa98 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2208      	movs	r2, #8
 8004f46:	4013      	ands	r3, r2
 8004f48:	d021      	beq.n	8004f8e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d01d      	beq.n	8004f8e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2209      	movs	r2, #9
 8004f58:	4252      	negs	r2, r2
 8004f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2203      	movs	r2, #3
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 fa73 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 8004f76:	e007      	b.n	8004f88 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f000 fa66 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f000 fa72 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2210      	movs	r2, #16
 8004f92:	4013      	ands	r3, r2
 8004f94:	d022      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2210      	movs	r2, #16
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d01e      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2211      	movs	r2, #17
 8004fa4:	4252      	negs	r2, r2
 8004fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2208      	movs	r2, #8
 8004fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	23c0      	movs	r3, #192	; 0xc0
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 fa4c 	bl	800545c <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e007      	b.n	8004fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f000 fa3f 	bl	800544c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 fa4b 	bl	800546c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d00c      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d008      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	4252      	negs	r2, r2
 8004ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f7fc fa41 	bl	8001480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2280      	movs	r2, #128	; 0x80
 8005002:	4013      	ands	r3, r2
 8005004:	d104      	bne.n	8005010 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	019b      	lsls	r3, r3, #6
 800500c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800500e:	d00b      	beq.n	8005028 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2280      	movs	r2, #128	; 0x80
 8005014:	4013      	ands	r3, r2
 8005016:	d007      	beq.n	8005028 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <HAL_TIM_IRQHandler+0x208>)
 800501e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	0018      	movs	r0, r3
 8005024:	f000 feba 	bl	8005d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4013      	ands	r3, r2
 8005030:	d00b      	beq.n	800504a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2280      	movs	r2, #128	; 0x80
 8005036:	4013      	ands	r3, r2
 8005038:	d007      	beq.n	800504a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a17      	ldr	r2, [pc, #92]	; (800509c <HAL_TIM_IRQHandler+0x20c>)
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	0018      	movs	r0, r3
 8005046:	f000 feb1 	bl	8005dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2240      	movs	r2, #64	; 0x40
 800504e:	4013      	ands	r3, r2
 8005050:	d00c      	beq.n	800506c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2240      	movs	r2, #64	; 0x40
 8005056:	4013      	ands	r3, r2
 8005058:	d008      	beq.n	800506c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2241      	movs	r2, #65	; 0x41
 8005060:	4252      	negs	r2, r2
 8005062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	0018      	movs	r0, r3
 8005068:	f000 fa08 	bl	800547c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2220      	movs	r2, #32
 8005070:	4013      	ands	r3, r2
 8005072:	d00c      	beq.n	800508e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	4013      	ands	r3, r2
 800507a:	d008      	beq.n	800508e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2221      	movs	r2, #33	; 0x21
 8005082:	4252      	negs	r2, r2
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	0018      	movs	r0, r3
 800508a:	f000 fe7f 	bl	8005d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	b004      	add	sp, #16
 8005094:	bd80      	pop	{r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	ffffdf7f 	.word	0xffffdf7f
 800509c:	fffffeff 	.word	0xfffffeff

080050a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ac:	2317      	movs	r3, #23
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	223c      	movs	r2, #60	; 0x3c
 80050b8:	5c9b      	ldrb	r3, [r3, r2]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80050be:	2302      	movs	r3, #2
 80050c0:	e0e5      	b.n	800528e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	223c      	movs	r2, #60	; 0x3c
 80050c6:	2101      	movs	r1, #1
 80050c8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b14      	cmp	r3, #20
 80050ce:	d900      	bls.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80050d0:	e0d1      	b.n	8005276 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	009a      	lsls	r2, r3, #2
 80050d6:	4b70      	ldr	r3, [pc, #448]	; (8005298 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80050d8:	18d3      	adds	r3, r2, r3
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	0011      	movs	r1, r2
 80050e6:	0018      	movs	r0, r3
 80050e8:	f000 fa5e 	bl	80055a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2108      	movs	r1, #8
 80050f8:	430a      	orrs	r2, r1
 80050fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2104      	movs	r1, #4
 8005108:	438a      	bics	r2, r1
 800510a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6999      	ldr	r1, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	619a      	str	r2, [r3, #24]
      break;
 800511e:	e0af      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	0011      	movs	r1, r2
 8005128:	0018      	movs	r0, r3
 800512a:	f000 fac7 	bl	80056bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2180      	movs	r1, #128	; 0x80
 800513a:	0109      	lsls	r1, r1, #4
 800513c:	430a      	orrs	r2, r1
 800513e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699a      	ldr	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4954      	ldr	r1, [pc, #336]	; (800529c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800514c:	400a      	ands	r2, r1
 800514e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6999      	ldr	r1, [r3, #24]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	021a      	lsls	r2, r3, #8
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	619a      	str	r2, [r3, #24]
      break;
 8005164:	e08c      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	0011      	movs	r1, r2
 800516e:	0018      	movs	r0, r3
 8005170:	f000 fb28 	bl	80057c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2108      	movs	r1, #8
 8005180:	430a      	orrs	r2, r1
 8005182:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69da      	ldr	r2, [r3, #28]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2104      	movs	r1, #4
 8005190:	438a      	bics	r2, r1
 8005192:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69d9      	ldr	r1, [r3, #28]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	61da      	str	r2, [r3, #28]
      break;
 80051a6:	e06b      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	0011      	movs	r1, r2
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 fb8f 	bl	80058d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	0109      	lsls	r1, r1, #4
 80051c4:	430a      	orrs	r2, r1
 80051c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4932      	ldr	r1, [pc, #200]	; (800529c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80051d4:	400a      	ands	r2, r1
 80051d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69d9      	ldr	r1, [r3, #28]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	021a      	lsls	r2, r3, #8
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	61da      	str	r2, [r3, #28]
      break;
 80051ec:	e048      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	0011      	movs	r1, r2
 80051f6:	0018      	movs	r0, r3
 80051f8:	f000 fbd6 	bl	80059a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2108      	movs	r1, #8
 8005208:	430a      	orrs	r2, r1
 800520a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2104      	movs	r1, #4
 8005218:	438a      	bics	r2, r1
 800521a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800522e:	e027      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	0011      	movs	r1, r2
 8005238:	0018      	movs	r0, r3
 800523a:	f000 fc15 	bl	8005a68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2180      	movs	r1, #128	; 0x80
 800524a:	0109      	lsls	r1, r1, #4
 800524c:	430a      	orrs	r2, r1
 800524e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4910      	ldr	r1, [pc, #64]	; (800529c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800525c:	400a      	ands	r2, r1
 800525e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	021a      	lsls	r2, r3, #8
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005274:	e004      	b.n	8005280 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005276:	2317      	movs	r3, #23
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	2201      	movs	r2, #1
 800527c:	701a      	strb	r2, [r3, #0]
      break;
 800527e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	223c      	movs	r2, #60	; 0x3c
 8005284:	2100      	movs	r1, #0
 8005286:	5499      	strb	r1, [r3, r2]

  return status;
 8005288:	2317      	movs	r3, #23
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	781b      	ldrb	r3, [r3, #0]
}
 800528e:	0018      	movs	r0, r3
 8005290:	46bd      	mov	sp, r7
 8005292:	b006      	add	sp, #24
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	080091fc 	.word	0x080091fc
 800529c:	fffffbff 	.word	0xfffffbff

080052a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052aa:	230f      	movs	r3, #15
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	223c      	movs	r2, #60	; 0x3c
 80052b6:	5c9b      	ldrb	r3, [r3, r2]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIM_ConfigClockSource+0x20>
 80052bc:	2302      	movs	r3, #2
 80052be:	e0bc      	b.n	800543a <HAL_TIM_ConfigClockSource+0x19a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	223c      	movs	r2, #60	; 0x3c
 80052c4:	2101      	movs	r1, #1
 80052c6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	223d      	movs	r2, #61	; 0x3d
 80052cc:	2102      	movs	r1, #2
 80052ce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4a5a      	ldr	r2, [pc, #360]	; (8005444 <HAL_TIM_ConfigClockSource+0x1a4>)
 80052dc:	4013      	ands	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a59      	ldr	r2, [pc, #356]	; (8005448 <HAL_TIM_ConfigClockSource+0x1a8>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2280      	movs	r2, #128	; 0x80
 80052f6:	0192      	lsls	r2, r2, #6
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d040      	beq.n	800537e <HAL_TIM_ConfigClockSource+0xde>
 80052fc:	2280      	movs	r2, #128	; 0x80
 80052fe:	0192      	lsls	r2, r2, #6
 8005300:	4293      	cmp	r3, r2
 8005302:	d900      	bls.n	8005306 <HAL_TIM_ConfigClockSource+0x66>
 8005304:	e088      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x178>
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	0152      	lsls	r2, r2, #5
 800530a:	4293      	cmp	r3, r2
 800530c:	d100      	bne.n	8005310 <HAL_TIM_ConfigClockSource+0x70>
 800530e:	e088      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x182>
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	0152      	lsls	r2, r2, #5
 8005314:	4293      	cmp	r3, r2
 8005316:	d900      	bls.n	800531a <HAL_TIM_ConfigClockSource+0x7a>
 8005318:	e07e      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x178>
 800531a:	2b70      	cmp	r3, #112	; 0x70
 800531c:	d018      	beq.n	8005350 <HAL_TIM_ConfigClockSource+0xb0>
 800531e:	d900      	bls.n	8005322 <HAL_TIM_ConfigClockSource+0x82>
 8005320:	e07a      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x178>
 8005322:	2b60      	cmp	r3, #96	; 0x60
 8005324:	d04f      	beq.n	80053c6 <HAL_TIM_ConfigClockSource+0x126>
 8005326:	d900      	bls.n	800532a <HAL_TIM_ConfigClockSource+0x8a>
 8005328:	e076      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x178>
 800532a:	2b50      	cmp	r3, #80	; 0x50
 800532c:	d03b      	beq.n	80053a6 <HAL_TIM_ConfigClockSource+0x106>
 800532e:	d900      	bls.n	8005332 <HAL_TIM_ConfigClockSource+0x92>
 8005330:	e072      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x178>
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d057      	beq.n	80053e6 <HAL_TIM_ConfigClockSource+0x146>
 8005336:	d900      	bls.n	800533a <HAL_TIM_ConfigClockSource+0x9a>
 8005338:	e06e      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x178>
 800533a:	2b30      	cmp	r3, #48	; 0x30
 800533c:	d063      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x166>
 800533e:	d86b      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x178>
 8005340:	2b20      	cmp	r3, #32
 8005342:	d060      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x166>
 8005344:	d868      	bhi.n	8005418 <HAL_TIM_ConfigClockSource+0x178>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d05d      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x166>
 800534a:	2b10      	cmp	r3, #16
 800534c:	d05b      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0x166>
 800534e:	e063      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005360:	f000 fc62 	bl	8005c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2277      	movs	r2, #119	; 0x77
 8005370:	4313      	orrs	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	609a      	str	r2, [r3, #8]
      break;
 800537c:	e052      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800538e:	f000 fc4b 	bl	8005c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2180      	movs	r1, #128	; 0x80
 800539e:	01c9      	lsls	r1, r1, #7
 80053a0:	430a      	orrs	r2, r1
 80053a2:	609a      	str	r2, [r3, #8]
      break;
 80053a4:	e03e      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b2:	001a      	movs	r2, r3
 80053b4:	f000 fbbc 	bl	8005b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2150      	movs	r1, #80	; 0x50
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 fc16 	bl	8005bf0 <TIM_ITRx_SetConfig>
      break;
 80053c4:	e02e      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d2:	001a      	movs	r2, r3
 80053d4:	f000 fbda 	bl	8005b8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2160      	movs	r1, #96	; 0x60
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 fc06 	bl	8005bf0 <TIM_ITRx_SetConfig>
      break;
 80053e4:	e01e      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f2:	001a      	movs	r2, r3
 80053f4:	f000 fb9c 	bl	8005b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 fbf6 	bl	8005bf0 <TIM_ITRx_SetConfig>
      break;
 8005404:	e00e      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	0019      	movs	r1, r3
 8005410:	0010      	movs	r0, r2
 8005412:	f000 fbed 	bl	8005bf0 <TIM_ITRx_SetConfig>
      break;
 8005416:	e005      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005418:	230f      	movs	r3, #15
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
      break;
 8005420:	e000      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005422:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	223d      	movs	r2, #61	; 0x3d
 8005428:	2101      	movs	r1, #1
 800542a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	223c      	movs	r2, #60	; 0x3c
 8005430:	2100      	movs	r1, #0
 8005432:	5499      	strb	r1, [r3, r2]

  return status;
 8005434:	230f      	movs	r3, #15
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	781b      	ldrb	r3, [r3, #0]
}
 800543a:	0018      	movs	r0, r3
 800543c:	46bd      	mov	sp, r7
 800543e:	b004      	add	sp, #16
 8005440:	bd80      	pop	{r7, pc}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	ffceff88 	.word	0xffceff88
 8005448:	ffff00ff 	.word	0xffff00ff

0800544c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	b002      	add	sp, #8
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005474:	46c0      	nop			; (mov r8, r8)
 8005476:	46bd      	mov	sp, r7
 8005478:	b002      	add	sp, #8
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005484:	46c0      	nop			; (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}

0800548c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a3b      	ldr	r2, [pc, #236]	; (800558c <TIM_Base_SetConfig+0x100>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d008      	beq.n	80054b6 <TIM_Base_SetConfig+0x2a>
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	05db      	lsls	r3, r3, #23
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d003      	beq.n	80054b6 <TIM_Base_SetConfig+0x2a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a37      	ldr	r2, [pc, #220]	; (8005590 <TIM_Base_SetConfig+0x104>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d108      	bne.n	80054c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2270      	movs	r2, #112	; 0x70
 80054ba:	4393      	bics	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a30      	ldr	r2, [pc, #192]	; (800558c <TIM_Base_SetConfig+0x100>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d018      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	05db      	lsls	r3, r3, #23
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d013      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2c      	ldr	r2, [pc, #176]	; (8005590 <TIM_Base_SetConfig+0x104>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00f      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2b      	ldr	r2, [pc, #172]	; (8005594 <TIM_Base_SetConfig+0x108>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00b      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2a      	ldr	r2, [pc, #168]	; (8005598 <TIM_Base_SetConfig+0x10c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d007      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a29      	ldr	r2, [pc, #164]	; (800559c <TIM_Base_SetConfig+0x110>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_Base_SetConfig+0x76>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a28      	ldr	r2, [pc, #160]	; (80055a0 <TIM_Base_SetConfig+0x114>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a27      	ldr	r2, [pc, #156]	; (80055a4 <TIM_Base_SetConfig+0x118>)
 8005506:	4013      	ands	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2280      	movs	r2, #128	; 0x80
 8005518:	4393      	bics	r3, r2
 800551a:	001a      	movs	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a13      	ldr	r2, [pc, #76]	; (800558c <TIM_Base_SetConfig+0x100>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00b      	beq.n	800555a <TIM_Base_SetConfig+0xce>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a14      	ldr	r2, [pc, #80]	; (8005598 <TIM_Base_SetConfig+0x10c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <TIM_Base_SetConfig+0xce>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a13      	ldr	r2, [pc, #76]	; (800559c <TIM_Base_SetConfig+0x110>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_Base_SetConfig+0xce>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <TIM_Base_SetConfig+0x114>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d103      	bne.n	8005562 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2201      	movs	r2, #1
 800556e:	4013      	ands	r3, r2
 8005570:	2b01      	cmp	r3, #1
 8005572:	d106      	bne.n	8005582 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2201      	movs	r2, #1
 800557a:	4393      	bics	r3, r2
 800557c:	001a      	movs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	611a      	str	r2, [r3, #16]
  }
}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	46bd      	mov	sp, r7
 8005586:	b004      	add	sp, #16
 8005588:	bd80      	pop	{r7, pc}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	40012c00 	.word	0x40012c00
 8005590:	40000400 	.word	0x40000400
 8005594:	40002000 	.word	0x40002000
 8005598:	40014000 	.word	0x40014000
 800559c:	40014400 	.word	0x40014400
 80055a0:	40014800 	.word	0x40014800
 80055a4:	fffffcff 	.word	0xfffffcff

080055a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	2201      	movs	r2, #1
 80055be:	4393      	bics	r3, r2
 80055c0:	001a      	movs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a32      	ldr	r2, [pc, #200]	; (80056a0 <TIM_OC1_SetConfig+0xf8>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2203      	movs	r2, #3
 80055de:	4393      	bics	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2202      	movs	r2, #2
 80055f0:	4393      	bics	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a28      	ldr	r2, [pc, #160]	; (80056a4 <TIM_OC1_SetConfig+0xfc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_OC1_SetConfig+0x76>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <TIM_OC1_SetConfig+0x100>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <TIM_OC1_SetConfig+0x76>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a26      	ldr	r2, [pc, #152]	; (80056ac <TIM_OC1_SetConfig+0x104>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC1_SetConfig+0x76>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a25      	ldr	r2, [pc, #148]	; (80056b0 <TIM_OC1_SetConfig+0x108>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d10c      	bne.n	8005638 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2208      	movs	r2, #8
 8005622:	4393      	bics	r3, r2
 8005624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2204      	movs	r2, #4
 8005634:	4393      	bics	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1a      	ldr	r2, [pc, #104]	; (80056a4 <TIM_OC1_SetConfig+0xfc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_OC1_SetConfig+0xb0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <TIM_OC1_SetConfig+0x100>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_OC1_SetConfig+0xb0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <TIM_OC1_SetConfig+0x104>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_OC1_SetConfig+0xb0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <TIM_OC1_SetConfig+0x108>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d111      	bne.n	800567c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <TIM_OC1_SetConfig+0x10c>)
 800565c:	4013      	ands	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <TIM_OC1_SetConfig+0x110>)
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	b006      	add	sp, #24
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	fffeff8f 	.word	0xfffeff8f
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800
 80056b4:	fffffeff 	.word	0xfffffeff
 80056b8:	fffffdff 	.word	0xfffffdff

080056bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	2210      	movs	r2, #16
 80056d2:	4393      	bics	r3, r2
 80056d4:	001a      	movs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a2e      	ldr	r2, [pc, #184]	; (80057a4 <TIM_OC2_SetConfig+0xe8>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4a2d      	ldr	r2, [pc, #180]	; (80057a8 <TIM_OC2_SetConfig+0xec>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2220      	movs	r2, #32
 8005706:	4393      	bics	r3, r2
 8005708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a24      	ldr	r2, [pc, #144]	; (80057ac <TIM_OC2_SetConfig+0xf0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d10d      	bne.n	800573a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2280      	movs	r2, #128	; 0x80
 8005722:	4393      	bics	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2240      	movs	r2, #64	; 0x40
 8005736:	4393      	bics	r3, r2
 8005738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <TIM_OC2_SetConfig+0xf0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00b      	beq.n	800575a <TIM_OC2_SetConfig+0x9e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <TIM_OC2_SetConfig+0xf4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d007      	beq.n	800575a <TIM_OC2_SetConfig+0x9e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a19      	ldr	r2, [pc, #100]	; (80057b4 <TIM_OC2_SetConfig+0xf8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_OC2_SetConfig+0x9e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <TIM_OC2_SetConfig+0xfc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d113      	bne.n	8005782 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	4a17      	ldr	r2, [pc, #92]	; (80057bc <TIM_OC2_SetConfig+0x100>)
 800575e:	4013      	ands	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4a16      	ldr	r2, [pc, #88]	; (80057c0 <TIM_OC2_SetConfig+0x104>)
 8005766:	4013      	ands	r3, r2
 8005768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	621a      	str	r2, [r3, #32]
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	46bd      	mov	sp, r7
 80057a0:	b006      	add	sp, #24
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	feff8fff 	.word	0xfeff8fff
 80057a8:	fffffcff 	.word	0xfffffcff
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800
 80057bc:	fffffbff 	.word	0xfffffbff
 80057c0:	fffff7ff 	.word	0xfffff7ff

080057c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	4a33      	ldr	r2, [pc, #204]	; (80058a8 <TIM_OC3_SetConfig+0xe4>)
 80057da:	401a      	ands	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4a2f      	ldr	r2, [pc, #188]	; (80058ac <TIM_OC3_SetConfig+0xe8>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2203      	movs	r2, #3
 80057f8:	4393      	bics	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4a29      	ldr	r2, [pc, #164]	; (80058b0 <TIM_OC3_SetConfig+0xec>)
 800580a:	4013      	ands	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a25      	ldr	r2, [pc, #148]	; (80058b4 <TIM_OC3_SetConfig+0xf0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10d      	bne.n	800583e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	4a24      	ldr	r2, [pc, #144]	; (80058b8 <TIM_OC3_SetConfig+0xf4>)
 8005826:	4013      	ands	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	021b      	lsls	r3, r3, #8
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4a20      	ldr	r2, [pc, #128]	; (80058bc <TIM_OC3_SetConfig+0xf8>)
 800583a:	4013      	ands	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <TIM_OC3_SetConfig+0xf0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00b      	beq.n	800585e <TIM_OC3_SetConfig+0x9a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <TIM_OC3_SetConfig+0xfc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d007      	beq.n	800585e <TIM_OC3_SetConfig+0x9a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <TIM_OC3_SetConfig+0x100>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_OC3_SetConfig+0x9a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <TIM_OC3_SetConfig+0x104>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d113      	bne.n	8005886 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <TIM_OC3_SetConfig+0x108>)
 8005862:	4013      	ands	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <TIM_OC3_SetConfig+0x10c>)
 800586a:	4013      	ands	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	621a      	str	r2, [r3, #32]
}
 80058a0:	46c0      	nop			; (mov r8, r8)
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b006      	add	sp, #24
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	fffffeff 	.word	0xfffffeff
 80058ac:	fffeff8f 	.word	0xfffeff8f
 80058b0:	fffffdff 	.word	0xfffffdff
 80058b4:	40012c00 	.word	0x40012c00
 80058b8:	fffff7ff 	.word	0xfffff7ff
 80058bc:	fffffbff 	.word	0xfffffbff
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800
 80058cc:	ffffefff 	.word	0xffffefff
 80058d0:	ffffdfff 	.word	0xffffdfff

080058d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	4a26      	ldr	r2, [pc, #152]	; (8005984 <TIM_OC4_SetConfig+0xb0>)
 80058ea:	401a      	ands	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a22      	ldr	r2, [pc, #136]	; (8005988 <TIM_OC4_SetConfig+0xb4>)
 8005900:	4013      	ands	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4a21      	ldr	r2, [pc, #132]	; (800598c <TIM_OC4_SetConfig+0xb8>)
 8005908:	4013      	ands	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4a1d      	ldr	r2, [pc, #116]	; (8005990 <TIM_OC4_SetConfig+0xbc>)
 800591c:	4013      	ands	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	031b      	lsls	r3, r3, #12
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a19      	ldr	r2, [pc, #100]	; (8005994 <TIM_OC4_SetConfig+0xc0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00b      	beq.n	800594c <TIM_OC4_SetConfig+0x78>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a18      	ldr	r2, [pc, #96]	; (8005998 <TIM_OC4_SetConfig+0xc4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_OC4_SetConfig+0x78>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a17      	ldr	r2, [pc, #92]	; (800599c <TIM_OC4_SetConfig+0xc8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC4_SetConfig+0x78>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <TIM_OC4_SetConfig+0xcc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d109      	bne.n	8005960 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <TIM_OC4_SetConfig+0xd0>)
 8005950:	4013      	ands	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	019b      	lsls	r3, r3, #6
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	b006      	add	sp, #24
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	ffffefff 	.word	0xffffefff
 8005988:	feff8fff 	.word	0xfeff8fff
 800598c:	fffffcff 	.word	0xfffffcff
 8005990:	ffffdfff 	.word	0xffffdfff
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400
 80059a0:	40014800 	.word	0x40014800
 80059a4:	ffffbfff 	.word	0xffffbfff

080059a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <TIM_OC5_SetConfig+0xa4>)
 80059be:	401a      	ands	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <TIM_OC5_SetConfig+0xa8>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4a1b      	ldr	r2, [pc, #108]	; (8005a54 <TIM_OC5_SetConfig+0xac>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	041b      	lsls	r3, r3, #16
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a17      	ldr	r2, [pc, #92]	; (8005a58 <TIM_OC5_SetConfig+0xb0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00b      	beq.n	8005a16 <TIM_OC5_SetConfig+0x6e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <TIM_OC5_SetConfig+0xb4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d007      	beq.n	8005a16 <TIM_OC5_SetConfig+0x6e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <TIM_OC5_SetConfig+0xb8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d003      	beq.n	8005a16 <TIM_OC5_SetConfig+0x6e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a14      	ldr	r2, [pc, #80]	; (8005a64 <TIM_OC5_SetConfig+0xbc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d109      	bne.n	8005a2a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <TIM_OC5_SetConfig+0xa4>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	621a      	str	r2, [r3, #32]
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b006      	add	sp, #24
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	fffeffff 	.word	0xfffeffff
 8005a50:	fffeff8f 	.word	0xfffeff8f
 8005a54:	fffdffff 	.word	0xfffdffff
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400
 8005a64:	40014800 	.word	0x40014800

08005a68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <TIM_OC6_SetConfig+0xa8>)
 8005a7e:	401a      	ands	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <TIM_OC6_SetConfig+0xac>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <TIM_OC6_SetConfig+0xb0>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	051b      	lsls	r3, r3, #20
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <TIM_OC6_SetConfig+0xb4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00b      	beq.n	8005ad8 <TIM_OC6_SetConfig+0x70>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a17      	ldr	r2, [pc, #92]	; (8005b20 <TIM_OC6_SetConfig+0xb8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d007      	beq.n	8005ad8 <TIM_OC6_SetConfig+0x70>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_OC6_SetConfig+0xbc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC6_SetConfig+0x70>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a15      	ldr	r2, [pc, #84]	; (8005b28 <TIM_OC6_SetConfig+0xc0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d109      	bne.n	8005aec <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	4a14      	ldr	r2, [pc, #80]	; (8005b2c <TIM_OC6_SetConfig+0xc4>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	029b      	lsls	r3, r3, #10
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b006      	add	sp, #24
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	ffefffff 	.word	0xffefffff
 8005b14:	feff8fff 	.word	0xfeff8fff
 8005b18:	ffdfffff 	.word	0xffdfffff
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800
 8005b2c:	fffbffff 	.word	0xfffbffff

08005b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	2201      	movs	r2, #1
 8005b48:	4393      	bics	r3, r2
 8005b4a:	001a      	movs	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	22f0      	movs	r2, #240	; 0xf0
 8005b5a:	4393      	bics	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	220a      	movs	r2, #10
 8005b6c:	4393      	bics	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	46c0      	nop			; (mov r8, r8)
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b006      	add	sp, #24
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	4393      	bics	r3, r2
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <TIM_TI2_ConfigInputStage+0x60>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	22a0      	movs	r2, #160	; 0xa0
 8005bc8:	4393      	bics	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	46bd      	mov	sp, r7
 8005be6:	b006      	add	sp, #24
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	ffff0fff 	.word	0xffff0fff

08005bf0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a08      	ldr	r2, [pc, #32]	; (8005c24 <TIM_ITRx_SetConfig+0x34>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	2207      	movs	r2, #7
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	609a      	str	r2, [r3, #8]
}
 8005c1a:	46c0      	nop			; (mov r8, r8)
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b004      	add	sp, #16
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	ffcfff8f 	.word	0xffcfff8f

08005c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <TIM_ETR_SetConfig+0x3c>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	021a      	lsls	r2, r3, #8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	609a      	str	r2, [r3, #8]
}
 8005c5c:	46c0      	nop			; (mov r8, r8)
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b006      	add	sp, #24
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	ffff00ff 	.word	0xffff00ff

08005c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	221f      	movs	r2, #31
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	409a      	lsls	r2, r3
 8005c7e:	0013      	movs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	43d2      	mvns	r2, r2
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a1a      	ldr	r2, [r3, #32]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	211f      	movs	r1, #31
 8005c98:	400b      	ands	r3, r1
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	4099      	lsls	r1, r3
 8005c9e:	000b      	movs	r3, r1
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b006      	add	sp, #24
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	223c      	movs	r2, #60	; 0x3c
 8005cbe:	5c9b      	ldrb	r3, [r3, r2]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e055      	b.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	223c      	movs	r2, #60	; 0x3c
 8005ccc:	2101      	movs	r1, #1
 8005cce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	223d      	movs	r2, #61	; 0x3d
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a23      	ldr	r2, [pc, #140]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a22      	ldr	r2, [pc, #136]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2270      	movs	r2, #112	; 0x70
 8005d08:	4393      	bics	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00f      	beq.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	05db      	lsls	r3, r3, #23
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d009      	beq.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a11      	ldr	r2, [pc, #68]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d10c      	bne.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2280      	movs	r2, #128	; 0x80
 8005d4c:	4393      	bics	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	223d      	movs	r2, #61	; 0x3d
 8005d66:	2101      	movs	r1, #1
 8005d68:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	223c      	movs	r2, #60	; 0x3c
 8005d6e:	2100      	movs	r1, #0
 8005d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	0018      	movs	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b004      	add	sp, #16
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	ff0fffff 	.word	0xff0fffff
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40014000 	.word	0x40014000

08005d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b002      	add	sp, #8
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b002      	add	sp, #8
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005db4:	46c0      	nop			; (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b002      	add	sp, #8
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e046      	b.n	8005e5c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2288      	movs	r2, #136	; 0x88
 8005dd2:	589b      	ldr	r3, [r3, r2]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d107      	bne.n	8005de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2284      	movs	r2, #132	; 0x84
 8005ddc:	2100      	movs	r1, #0
 8005dde:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f7fb fe1e 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2288      	movs	r2, #136	; 0x88
 8005dec:	2124      	movs	r1, #36	; 0x24
 8005dee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	438a      	bics	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f000 ff6e 	bl	8006cec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 fcac 	bl	8006770 <UART_SetConfig>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e01c      	b.n	8005e5c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	490d      	ldr	r1, [pc, #52]	; (8005e64 <HAL_UART_Init+0xa8>)
 8005e2e:	400a      	ands	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	212a      	movs	r1, #42	; 0x2a
 8005e3e:	438a      	bics	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	0018      	movs	r0, r3
 8005e56:	f000 fffd 	bl	8006e54 <UART_CheckIdleState>
 8005e5a:	0003      	movs	r3, r0
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b002      	add	sp, #8
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	ffffb7ff 	.word	0xffffb7ff

08005e68 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e032      	b.n	8005ee0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2288      	movs	r2, #136	; 0x88
 8005e7e:	2124      	movs	r1, #36	; 0x24
 8005e80:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	438a      	bics	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7fb fe21 	bl	8001af4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2290      	movs	r2, #144	; 0x90
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2288      	movs	r2, #136	; 0x88
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	228c      	movs	r2, #140	; 0x8c
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2284      	movs	r2, #132	; 0x84
 8005eda:	2100      	movs	r1, #0
 8005edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b002      	add	sp, #8
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	1dbb      	adds	r3, r7, #6
 8005ef6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2288      	movs	r2, #136	; 0x88
 8005efc:	589b      	ldr	r3, [r3, r2]
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	d000      	beq.n	8005f04 <HAL_UART_Transmit+0x1c>
 8005f02:	e090      	b.n	8006026 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_UART_Transmit+0x2a>
 8005f0a:	1dbb      	adds	r3, r7, #6
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e088      	b.n	8006028 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	015b      	lsls	r3, r3, #5
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d109      	bne.n	8005f36 <HAL_UART_Transmit+0x4e>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d105      	bne.n	8005f36 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	4013      	ands	r3, r2
 8005f30:	d001      	beq.n	8005f36 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e078      	b.n	8006028 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2290      	movs	r2, #144	; 0x90
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2288      	movs	r2, #136	; 0x88
 8005f42:	2121      	movs	r1, #33	; 0x21
 8005f44:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f46:	f7fb ff39 	bl	8001dbc <HAL_GetTick>
 8005f4a:	0003      	movs	r3, r0
 8005f4c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1dba      	adds	r2, r7, #6
 8005f52:	2154      	movs	r1, #84	; 0x54
 8005f54:	8812      	ldrh	r2, [r2, #0]
 8005f56:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1dba      	adds	r2, r7, #6
 8005f5c:	2156      	movs	r1, #86	; 0x56
 8005f5e:	8812      	ldrh	r2, [r2, #0]
 8005f60:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	015b      	lsls	r3, r3, #5
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x98>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f88:	e030      	b.n	8005fec <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	0013      	movs	r3, r2
 8005f94:	2200      	movs	r2, #0
 8005f96:	2180      	movs	r1, #128	; 0x80
 8005f98:	f001 f806 	bl	8006fa8 <UART_WaitOnFlagUntilTimeout>
 8005f9c:	1e03      	subs	r3, r0, #0
 8005f9e:	d005      	beq.n	8005fac <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2288      	movs	r2, #136	; 0x88
 8005fa4:	2120      	movs	r1, #32
 8005fa6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e03d      	b.n	8006028 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	001a      	movs	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	05d2      	lsls	r2, r2, #23
 8005fbe:	0dd2      	lsrs	r2, r2, #23
 8005fc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e007      	b.n	8005fda <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2256      	movs	r2, #86	; 0x56
 8005fde:	5a9b      	ldrh	r3, [r3, r2]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b299      	uxth	r1, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2256      	movs	r2, #86	; 0x56
 8005fea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2256      	movs	r2, #86	; 0x56
 8005ff0:	5a9b      	ldrh	r3, [r3, r2]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1c8      	bne.n	8005f8a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	0013      	movs	r3, r2
 8006002:	2200      	movs	r2, #0
 8006004:	2140      	movs	r1, #64	; 0x40
 8006006:	f000 ffcf 	bl	8006fa8 <UART_WaitOnFlagUntilTimeout>
 800600a:	1e03      	subs	r3, r0, #0
 800600c:	d005      	beq.n	800601a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2288      	movs	r2, #136	; 0x88
 8006012:	2120      	movs	r1, #32
 8006014:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e006      	b.n	8006028 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2288      	movs	r2, #136	; 0x88
 800601e:	2120      	movs	r1, #32
 8006020:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e000      	b.n	8006028 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
  }
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	b008      	add	sp, #32
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	1dbb      	adds	r3, r7, #6
 800603c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	228c      	movs	r2, #140	; 0x8c
 8006042:	589b      	ldr	r3, [r3, r2]
 8006044:	2b20      	cmp	r3, #32
 8006046:	d14a      	bne.n	80060de <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_UART_Receive_IT+0x26>
 800604e:	1dbb      	adds	r3, r7, #6
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e042      	b.n	80060e0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	015b      	lsls	r3, r3, #5
 8006062:	429a      	cmp	r2, r3
 8006064:	d109      	bne.n	800607a <HAL_UART_Receive_IT+0x4a>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2201      	movs	r2, #1
 8006072:	4013      	ands	r3, r2
 8006074:	d001      	beq.n	800607a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e032      	b.n	80060e0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <HAL_UART_Receive_IT+0xb8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d020      	beq.n	80060cc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	041b      	lsls	r3, r3, #16
 8006094:	4013      	ands	r3, r2
 8006096:	d019      	beq.n	80060cc <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006098:	f3ef 8310 	mrs	r3, PRIMASK
 800609c:	613b      	str	r3, [r7, #16]
  return(result);
 800609e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	2301      	movs	r3, #1
 80060a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f383 8810 	msr	PRIMASK, r3
}
 80060ac:	46c0      	nop			; (mov r8, r8)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2180      	movs	r1, #128	; 0x80
 80060ba:	04c9      	lsls	r1, r1, #19
 80060bc:	430a      	orrs	r2, r1
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	f383 8810 	msr	PRIMASK, r3
}
 80060ca:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060cc:	1dbb      	adds	r3, r7, #6
 80060ce:	881a      	ldrh	r2, [r3, #0]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f000 ffd7 	bl	8007088 <UART_Start_Receive_IT>
 80060da:	0003      	movs	r3, r0
 80060dc:	e000      	b.n	80060e0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80060de:	2302      	movs	r3, #2
  }
}
 80060e0:	0018      	movs	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b008      	add	sp, #32
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40008000 	.word	0x40008000

080060ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060ec:	b5b0      	push	{r4, r5, r7, lr}
 80060ee:	b0aa      	sub	sp, #168	; 0xa8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	22a4      	movs	r2, #164	; 0xa4
 80060fc:	18b9      	adds	r1, r7, r2
 80060fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	20a0      	movs	r0, #160	; 0xa0
 8006108:	1839      	adds	r1, r7, r0
 800610a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	249c      	movs	r4, #156	; 0x9c
 8006114:	1939      	adds	r1, r7, r4
 8006116:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006118:	0011      	movs	r1, r2
 800611a:	18bb      	adds	r3, r7, r2
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4aa2      	ldr	r2, [pc, #648]	; (80063a8 <HAL_UART_IRQHandler+0x2bc>)
 8006120:	4013      	ands	r3, r2
 8006122:	2298      	movs	r2, #152	; 0x98
 8006124:	18bd      	adds	r5, r7, r2
 8006126:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006128:	18bb      	adds	r3, r7, r2
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11a      	bne.n	8006166 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006130:	187b      	adds	r3, r7, r1
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2220      	movs	r2, #32
 8006136:	4013      	ands	r3, r2
 8006138:	d015      	beq.n	8006166 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800613a:	183b      	adds	r3, r7, r0
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2220      	movs	r2, #32
 8006140:	4013      	ands	r3, r2
 8006142:	d105      	bne.n	8006150 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006144:	193b      	adds	r3, r7, r4
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	055b      	lsls	r3, r3, #21
 800614c:	4013      	ands	r3, r2
 800614e:	d00a      	beq.n	8006166 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006154:	2b00      	cmp	r3, #0
 8006156:	d100      	bne.n	800615a <HAL_UART_IRQHandler+0x6e>
 8006158:	e2dc      	b.n	8006714 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	0010      	movs	r0, r2
 8006162:	4798      	blx	r3
      }
      return;
 8006164:	e2d6      	b.n	8006714 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006166:	2398      	movs	r3, #152	; 0x98
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d100      	bne.n	8006172 <HAL_UART_IRQHandler+0x86>
 8006170:	e122      	b.n	80063b8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006172:	239c      	movs	r3, #156	; 0x9c
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a8c      	ldr	r2, [pc, #560]	; (80063ac <HAL_UART_IRQHandler+0x2c0>)
 800617a:	4013      	ands	r3, r2
 800617c:	d106      	bne.n	800618c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800617e:	23a0      	movs	r3, #160	; 0xa0
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a8a      	ldr	r2, [pc, #552]	; (80063b0 <HAL_UART_IRQHandler+0x2c4>)
 8006186:	4013      	ands	r3, r2
 8006188:	d100      	bne.n	800618c <HAL_UART_IRQHandler+0xa0>
 800618a:	e115      	b.n	80063b8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800618c:	23a4      	movs	r3, #164	; 0xa4
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2201      	movs	r2, #1
 8006194:	4013      	ands	r3, r2
 8006196:	d012      	beq.n	80061be <HAL_UART_IRQHandler+0xd2>
 8006198:	23a0      	movs	r3, #160	; 0xa0
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	4013      	ands	r3, r2
 80061a4:	d00b      	beq.n	80061be <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2201      	movs	r2, #1
 80061ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2290      	movs	r2, #144	; 0x90
 80061b2:	589b      	ldr	r3, [r3, r2]
 80061b4:	2201      	movs	r2, #1
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2190      	movs	r1, #144	; 0x90
 80061bc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061be:	23a4      	movs	r3, #164	; 0xa4
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2202      	movs	r2, #2
 80061c6:	4013      	ands	r3, r2
 80061c8:	d011      	beq.n	80061ee <HAL_UART_IRQHandler+0x102>
 80061ca:	239c      	movs	r3, #156	; 0x9c
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2201      	movs	r2, #1
 80061d2:	4013      	ands	r3, r2
 80061d4:	d00b      	beq.n	80061ee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2202      	movs	r2, #2
 80061dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2290      	movs	r2, #144	; 0x90
 80061e2:	589b      	ldr	r3, [r3, r2]
 80061e4:	2204      	movs	r2, #4
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2190      	movs	r1, #144	; 0x90
 80061ec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061ee:	23a4      	movs	r3, #164	; 0xa4
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2204      	movs	r2, #4
 80061f6:	4013      	ands	r3, r2
 80061f8:	d011      	beq.n	800621e <HAL_UART_IRQHandler+0x132>
 80061fa:	239c      	movs	r3, #156	; 0x9c
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2201      	movs	r2, #1
 8006202:	4013      	ands	r3, r2
 8006204:	d00b      	beq.n	800621e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2204      	movs	r2, #4
 800620c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2290      	movs	r2, #144	; 0x90
 8006212:	589b      	ldr	r3, [r3, r2]
 8006214:	2202      	movs	r2, #2
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2190      	movs	r1, #144	; 0x90
 800621c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800621e:	23a4      	movs	r3, #164	; 0xa4
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2208      	movs	r2, #8
 8006226:	4013      	ands	r3, r2
 8006228:	d017      	beq.n	800625a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800622a:	23a0      	movs	r3, #160	; 0xa0
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2220      	movs	r2, #32
 8006232:	4013      	ands	r3, r2
 8006234:	d105      	bne.n	8006242 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006236:	239c      	movs	r3, #156	; 0x9c
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a5b      	ldr	r2, [pc, #364]	; (80063ac <HAL_UART_IRQHandler+0x2c0>)
 800623e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006240:	d00b      	beq.n	800625a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2208      	movs	r2, #8
 8006248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2290      	movs	r2, #144	; 0x90
 800624e:	589b      	ldr	r3, [r3, r2]
 8006250:	2208      	movs	r2, #8
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2190      	movs	r1, #144	; 0x90
 8006258:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800625a:	23a4      	movs	r3, #164	; 0xa4
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	4013      	ands	r3, r2
 8006266:	d013      	beq.n	8006290 <HAL_UART_IRQHandler+0x1a4>
 8006268:	23a0      	movs	r3, #160	; 0xa0
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	2380      	movs	r3, #128	; 0x80
 8006270:	04db      	lsls	r3, r3, #19
 8006272:	4013      	ands	r3, r2
 8006274:	d00c      	beq.n	8006290 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2280      	movs	r2, #128	; 0x80
 800627c:	0112      	lsls	r2, r2, #4
 800627e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2290      	movs	r2, #144	; 0x90
 8006284:	589b      	ldr	r3, [r3, r2]
 8006286:	2220      	movs	r2, #32
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2190      	movs	r1, #144	; 0x90
 800628e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2290      	movs	r2, #144	; 0x90
 8006294:	589b      	ldr	r3, [r3, r2]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d100      	bne.n	800629c <HAL_UART_IRQHandler+0x1b0>
 800629a:	e23d      	b.n	8006718 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800629c:	23a4      	movs	r3, #164	; 0xa4
 800629e:	18fb      	adds	r3, r7, r3
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2220      	movs	r2, #32
 80062a4:	4013      	ands	r3, r2
 80062a6:	d015      	beq.n	80062d4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062a8:	23a0      	movs	r3, #160	; 0xa0
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2220      	movs	r2, #32
 80062b0:	4013      	ands	r3, r2
 80062b2:	d106      	bne.n	80062c2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062b4:	239c      	movs	r3, #156	; 0x9c
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	2380      	movs	r3, #128	; 0x80
 80062bc:	055b      	lsls	r3, r3, #21
 80062be:	4013      	ands	r3, r2
 80062c0:	d008      	beq.n	80062d4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	0010      	movs	r0, r2
 80062d2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2290      	movs	r2, #144	; 0x90
 80062d8:	589b      	ldr	r3, [r3, r2]
 80062da:	2194      	movs	r1, #148	; 0x94
 80062dc:	187a      	adds	r2, r7, r1
 80062de:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2240      	movs	r2, #64	; 0x40
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d004      	beq.n	80062f8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ee:	187b      	adds	r3, r7, r1
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2228      	movs	r2, #40	; 0x28
 80062f4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062f6:	d04c      	beq.n	8006392 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f000 ffe8 	bl	80072d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2240      	movs	r2, #64	; 0x40
 8006308:	4013      	ands	r3, r2
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d13c      	bne.n	8006388 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800630e:	f3ef 8310 	mrs	r3, PRIMASK
 8006312:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006316:	2090      	movs	r0, #144	; 0x90
 8006318:	183a      	adds	r2, r7, r0
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	2301      	movs	r3, #1
 800631e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006322:	f383 8810 	msr	PRIMASK, r3
}
 8006326:	46c0      	nop			; (mov r8, r8)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2140      	movs	r1, #64	; 0x40
 8006334:	438a      	bics	r2, r1
 8006336:	609a      	str	r2, [r3, #8]
 8006338:	183b      	adds	r3, r7, r0
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006340:	f383 8810 	msr	PRIMASK, r3
}
 8006344:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2280      	movs	r2, #128	; 0x80
 800634a:	589b      	ldr	r3, [r3, r2]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d016      	beq.n	800637e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2280      	movs	r2, #128	; 0x80
 8006354:	589b      	ldr	r3, [r3, r2]
 8006356:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <HAL_UART_IRQHandler+0x2c8>)
 8006358:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2280      	movs	r2, #128	; 0x80
 800635e:	589b      	ldr	r3, [r3, r2]
 8006360:	0018      	movs	r0, r3
 8006362:	f7fc fd35 	bl	8002dd0 <HAL_DMA_Abort_IT>
 8006366:	1e03      	subs	r3, r0, #0
 8006368:	d01c      	beq.n	80063a4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2280      	movs	r2, #128	; 0x80
 800636e:	589b      	ldr	r3, [r3, r2]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	2180      	movs	r1, #128	; 0x80
 8006376:	5852      	ldr	r2, [r2, r1]
 8006378:	0010      	movs	r0, r2
 800637a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	e012      	b.n	80063a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	0018      	movs	r0, r3
 8006382:	f000 f9e1 	bl	8006748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006386:	e00d      	b.n	80063a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	0018      	movs	r0, r3
 800638c:	f000 f9dc 	bl	8006748 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	e008      	b.n	80063a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	0018      	movs	r0, r3
 8006396:	f000 f9d7 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2290      	movs	r2, #144	; 0x90
 800639e:	2100      	movs	r1, #0
 80063a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80063a2:	e1b9      	b.n	8006718 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a4:	46c0      	nop			; (mov r8, r8)
    return;
 80063a6:	e1b7      	b.n	8006718 <HAL_UART_IRQHandler+0x62c>
 80063a8:	0000080f 	.word	0x0000080f
 80063ac:	10000001 	.word	0x10000001
 80063b0:	04000120 	.word	0x04000120
 80063b4:	0800739d 	.word	0x0800739d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d000      	beq.n	80063c2 <HAL_UART_IRQHandler+0x2d6>
 80063c0:	e13e      	b.n	8006640 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063c2:	23a4      	movs	r3, #164	; 0xa4
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2210      	movs	r2, #16
 80063ca:	4013      	ands	r3, r2
 80063cc:	d100      	bne.n	80063d0 <HAL_UART_IRQHandler+0x2e4>
 80063ce:	e137      	b.n	8006640 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063d0:	23a0      	movs	r3, #160	; 0xa0
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2210      	movs	r2, #16
 80063d8:	4013      	ands	r3, r2
 80063da:	d100      	bne.n	80063de <HAL_UART_IRQHandler+0x2f2>
 80063dc:	e130      	b.n	8006640 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2210      	movs	r2, #16
 80063e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2240      	movs	r2, #64	; 0x40
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d000      	beq.n	80063f6 <HAL_UART_IRQHandler+0x30a>
 80063f4:	e0a4      	b.n	8006540 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2280      	movs	r2, #128	; 0x80
 80063fa:	589b      	ldr	r3, [r3, r2]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	217e      	movs	r1, #126	; 0x7e
 8006402:	187b      	adds	r3, r7, r1
 8006404:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006406:	187b      	adds	r3, r7, r1
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d100      	bne.n	8006410 <HAL_UART_IRQHandler+0x324>
 800640e:	e185      	b.n	800671c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	225c      	movs	r2, #92	; 0x5c
 8006414:	5a9b      	ldrh	r3, [r3, r2]
 8006416:	187a      	adds	r2, r7, r1
 8006418:	8812      	ldrh	r2, [r2, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d300      	bcc.n	8006420 <HAL_UART_IRQHandler+0x334>
 800641e:	e17d      	b.n	800671c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	187a      	adds	r2, r7, r1
 8006424:	215e      	movs	r1, #94	; 0x5e
 8006426:	8812      	ldrh	r2, [r2, #0]
 8006428:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2280      	movs	r2, #128	; 0x80
 800642e:	589b      	ldr	r3, [r3, r2]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2220      	movs	r2, #32
 8006436:	4013      	ands	r3, r2
 8006438:	d170      	bne.n	800651c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643a:	f3ef 8310 	mrs	r3, PRIMASK
 800643e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006442:	67bb      	str	r3, [r7, #120]	; 0x78
 8006444:	2301      	movs	r3, #1
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	f383 8810 	msr	PRIMASK, r3
}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	49b4      	ldr	r1, [pc, #720]	; (800672c <HAL_UART_IRQHandler+0x640>)
 800645c:	400a      	ands	r2, r1
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006462:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	f383 8810 	msr	PRIMASK, r3
}
 800646a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646c:	f3ef 8310 	mrs	r3, PRIMASK
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006474:	677b      	str	r3, [r7, #116]	; 0x74
 8006476:	2301      	movs	r3, #1
 8006478:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800647c:	f383 8810 	msr	PRIMASK, r3
}
 8006480:	46c0      	nop			; (mov r8, r8)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2101      	movs	r1, #1
 800648e:	438a      	bics	r2, r1
 8006490:	609a      	str	r2, [r3, #8]
 8006492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006494:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006498:	f383 8810 	msr	PRIMASK, r3
}
 800649c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800649e:	f3ef 8310 	mrs	r3, PRIMASK
 80064a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80064a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a6:	673b      	str	r3, [r7, #112]	; 0x70
 80064a8:	2301      	movs	r3, #1
 80064aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ae:	f383 8810 	msr	PRIMASK, r3
}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2140      	movs	r1, #64	; 0x40
 80064c0:	438a      	bics	r2, r1
 80064c2:	609a      	str	r2, [r3, #8]
 80064c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ca:	f383 8810 	msr	PRIMASK, r3
}
 80064ce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	228c      	movs	r2, #140	; 0x8c
 80064d4:	2120      	movs	r1, #32
 80064d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064de:	f3ef 8310 	mrs	r3, PRIMASK
 80064e2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80064e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064e8:	2301      	movs	r3, #1
 80064ea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064ee:	f383 8810 	msr	PRIMASK, r3
}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2110      	movs	r1, #16
 8006500:	438a      	bics	r2, r1
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006506:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800650a:	f383 8810 	msr	PRIMASK, r3
}
 800650e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2280      	movs	r2, #128	; 0x80
 8006514:	589b      	ldr	r3, [r3, r2]
 8006516:	0018      	movs	r0, r3
 8006518:	f7fc fbf8 	bl	8002d0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	225c      	movs	r2, #92	; 0x5c
 8006526:	5a9a      	ldrh	r2, [r3, r2]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	215e      	movs	r1, #94	; 0x5e
 800652c:	5a5b      	ldrh	r3, [r3, r1]
 800652e:	b29b      	uxth	r3, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	b29a      	uxth	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	0011      	movs	r1, r2
 8006538:	0018      	movs	r0, r3
 800653a:	f000 f90d 	bl	8006758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800653e:	e0ed      	b.n	800671c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	225c      	movs	r2, #92	; 0x5c
 8006544:	5a99      	ldrh	r1, [r3, r2]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	225e      	movs	r2, #94	; 0x5e
 800654a:	5a9b      	ldrh	r3, [r3, r2]
 800654c:	b29a      	uxth	r2, r3
 800654e:	208e      	movs	r0, #142	; 0x8e
 8006550:	183b      	adds	r3, r7, r0
 8006552:	1a8a      	subs	r2, r1, r2
 8006554:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	225e      	movs	r2, #94	; 0x5e
 800655a:	5a9b      	ldrh	r3, [r3, r2]
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d100      	bne.n	8006564 <HAL_UART_IRQHandler+0x478>
 8006562:	e0dd      	b.n	8006720 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006564:	183b      	adds	r3, r7, r0
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d100      	bne.n	800656e <HAL_UART_IRQHandler+0x482>
 800656c:	e0d8      	b.n	8006720 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800656e:	f3ef 8310 	mrs	r3, PRIMASK
 8006572:	60fb      	str	r3, [r7, #12]
  return(result);
 8006574:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006576:	2488      	movs	r4, #136	; 0x88
 8006578:	193a      	adds	r2, r7, r4
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	2301      	movs	r3, #1
 800657e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f383 8810 	msr	PRIMASK, r3
}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4967      	ldr	r1, [pc, #412]	; (8006730 <HAL_UART_IRQHandler+0x644>)
 8006594:	400a      	ands	r2, r1
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	193b      	adds	r3, r7, r4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f383 8810 	msr	PRIMASK, r3
}
 80065a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a6:	f3ef 8310 	mrs	r3, PRIMASK
 80065aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80065ac:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065ae:	2484      	movs	r4, #132	; 0x84
 80065b0:	193a      	adds	r2, r7, r4
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	2301      	movs	r3, #1
 80065b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	f383 8810 	msr	PRIMASK, r3
}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	495a      	ldr	r1, [pc, #360]	; (8006734 <HAL_UART_IRQHandler+0x648>)
 80065cc:	400a      	ands	r2, r1
 80065ce:	609a      	str	r2, [r3, #8]
 80065d0:	193b      	adds	r3, r7, r4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	f383 8810 	msr	PRIMASK, r3
}
 80065dc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	228c      	movs	r2, #140	; 0x8c
 80065e2:	2120      	movs	r1, #32
 80065e4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065f2:	f3ef 8310 	mrs	r3, PRIMASK
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fa:	2480      	movs	r4, #128	; 0x80
 80065fc:	193a      	adds	r2, r7, r4
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	2301      	movs	r3, #1
 8006602:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	f383 8810 	msr	PRIMASK, r3
}
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2110      	movs	r1, #16
 8006618:	438a      	bics	r2, r1
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	193b      	adds	r3, r7, r4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	f383 8810 	msr	PRIMASK, r3
}
 8006628:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2202      	movs	r2, #2
 800662e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006630:	183b      	adds	r3, r7, r0
 8006632:	881a      	ldrh	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0011      	movs	r1, r2
 8006638:	0018      	movs	r0, r3
 800663a:	f000 f88d 	bl	8006758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800663e:	e06f      	b.n	8006720 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006640:	23a4      	movs	r3, #164	; 0xa4
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	035b      	lsls	r3, r3, #13
 800664a:	4013      	ands	r3, r2
 800664c:	d010      	beq.n	8006670 <HAL_UART_IRQHandler+0x584>
 800664e:	239c      	movs	r3, #156	; 0x9c
 8006650:	18fb      	adds	r3, r7, r3
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	2380      	movs	r3, #128	; 0x80
 8006656:	03db      	lsls	r3, r3, #15
 8006658:	4013      	ands	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2280      	movs	r2, #128	; 0x80
 8006662:	0352      	lsls	r2, r2, #13
 8006664:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	0018      	movs	r0, r3
 800666a:	f001 fbeb 	bl	8007e44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800666e:	e05a      	b.n	8006726 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006670:	23a4      	movs	r3, #164	; 0xa4
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2280      	movs	r2, #128	; 0x80
 8006678:	4013      	ands	r3, r2
 800667a:	d016      	beq.n	80066aa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800667c:	23a0      	movs	r3, #160	; 0xa0
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2280      	movs	r2, #128	; 0x80
 8006684:	4013      	ands	r3, r2
 8006686:	d106      	bne.n	8006696 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006688:	239c      	movs	r3, #156	; 0x9c
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	2380      	movs	r3, #128	; 0x80
 8006690:	041b      	lsls	r3, r3, #16
 8006692:	4013      	ands	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800669a:	2b00      	cmp	r3, #0
 800669c:	d042      	beq.n	8006724 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	0010      	movs	r0, r2
 80066a6:	4798      	blx	r3
    }
    return;
 80066a8:	e03c      	b.n	8006724 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066aa:	23a4      	movs	r3, #164	; 0xa4
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2240      	movs	r2, #64	; 0x40
 80066b2:	4013      	ands	r3, r2
 80066b4:	d00a      	beq.n	80066cc <HAL_UART_IRQHandler+0x5e0>
 80066b6:	23a0      	movs	r3, #160	; 0xa0
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2240      	movs	r2, #64	; 0x40
 80066be:	4013      	ands	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	0018      	movs	r0, r3
 80066c6:	f000 fe80 	bl	80073ca <UART_EndTransmit_IT>
    return;
 80066ca:	e02c      	b.n	8006726 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066cc:	23a4      	movs	r3, #164	; 0xa4
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	2380      	movs	r3, #128	; 0x80
 80066d4:	041b      	lsls	r3, r3, #16
 80066d6:	4013      	ands	r3, r2
 80066d8:	d00b      	beq.n	80066f2 <HAL_UART_IRQHandler+0x606>
 80066da:	23a0      	movs	r3, #160	; 0xa0
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	05db      	lsls	r3, r3, #23
 80066e4:	4013      	ands	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	0018      	movs	r0, r3
 80066ec:	f001 fbba 	bl	8007e64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066f0:	e019      	b.n	8006726 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80066f2:	23a4      	movs	r3, #164	; 0xa4
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	045b      	lsls	r3, r3, #17
 80066fc:	4013      	ands	r3, r2
 80066fe:	d012      	beq.n	8006726 <HAL_UART_IRQHandler+0x63a>
 8006700:	23a0      	movs	r3, #160	; 0xa0
 8006702:	18fb      	adds	r3, r7, r3
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	da0d      	bge.n	8006726 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0018      	movs	r0, r3
 800670e:	f001 fba1 	bl	8007e54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006712:	e008      	b.n	8006726 <HAL_UART_IRQHandler+0x63a>
      return;
 8006714:	46c0      	nop			; (mov r8, r8)
 8006716:	e006      	b.n	8006726 <HAL_UART_IRQHandler+0x63a>
    return;
 8006718:	46c0      	nop			; (mov r8, r8)
 800671a:	e004      	b.n	8006726 <HAL_UART_IRQHandler+0x63a>
      return;
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	e002      	b.n	8006726 <HAL_UART_IRQHandler+0x63a>
      return;
 8006720:	46c0      	nop			; (mov r8, r8)
 8006722:	e000      	b.n	8006726 <HAL_UART_IRQHandler+0x63a>
    return;
 8006724:	46c0      	nop			; (mov r8, r8)
  }
}
 8006726:	46bd      	mov	sp, r7
 8006728:	b02a      	add	sp, #168	; 0xa8
 800672a:	bdb0      	pop	{r4, r5, r7, pc}
 800672c:	fffffeff 	.word	0xfffffeff
 8006730:	fffffedf 	.word	0xfffffedf
 8006734:	effffffe 	.word	0xeffffffe

08006738 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006740:	46c0      	nop			; (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b002      	add	sp, #8
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006750:	46c0      	nop			; (mov r8, r8)
 8006752:	46bd      	mov	sp, r7
 8006754:	b002      	add	sp, #8
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	000a      	movs	r2, r1
 8006762:	1cbb      	adds	r3, r7, #2
 8006764:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	46bd      	mov	sp, r7
 800676a:	b002      	add	sp, #8
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006770:	b5b0      	push	{r4, r5, r7, lr}
 8006772:	b090      	sub	sp, #64	; 0x40
 8006774:	af00      	add	r7, sp, #0
 8006776:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006778:	231a      	movs	r3, #26
 800677a:	2220      	movs	r2, #32
 800677c:	189b      	adds	r3, r3, r2
 800677e:	19db      	adds	r3, r3, r7
 8006780:	2200      	movs	r2, #0
 8006782:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	431a      	orrs	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	431a      	orrs	r2, r3
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	4313      	orrs	r3, r2
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4aaf      	ldr	r2, [pc, #700]	; (8006a60 <UART_SetConfig+0x2f0>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	0019      	movs	r1, r3
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ae:	430b      	orrs	r3, r1
 80067b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4aaa      	ldr	r2, [pc, #680]	; (8006a64 <UART_SetConfig+0x2f4>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	0018      	movs	r0, r3
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	68d9      	ldr	r1, [r3, #12]
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	0003      	movs	r3, r0
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4aa4      	ldr	r2, [pc, #656]	; (8006a68 <UART_SetConfig+0x2f8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067e2:	4313      	orrs	r3, r2
 80067e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4a9f      	ldr	r2, [pc, #636]	; (8006a6c <UART_SetConfig+0x2fc>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	0019      	movs	r1, r3
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	220f      	movs	r2, #15
 8006804:	4393      	bics	r3, r2
 8006806:	0018      	movs	r0, r3
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	0003      	movs	r3, r0
 8006812:	430b      	orrs	r3, r1
 8006814:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a95      	ldr	r2, [pc, #596]	; (8006a70 <UART_SetConfig+0x300>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d131      	bne.n	8006884 <UART_SetConfig+0x114>
 8006820:	4b94      	ldr	r3, [pc, #592]	; (8006a74 <UART_SetConfig+0x304>)
 8006822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006824:	2203      	movs	r2, #3
 8006826:	4013      	ands	r3, r2
 8006828:	2b03      	cmp	r3, #3
 800682a:	d01d      	beq.n	8006868 <UART_SetConfig+0xf8>
 800682c:	d823      	bhi.n	8006876 <UART_SetConfig+0x106>
 800682e:	2b02      	cmp	r3, #2
 8006830:	d00c      	beq.n	800684c <UART_SetConfig+0xdc>
 8006832:	d820      	bhi.n	8006876 <UART_SetConfig+0x106>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <UART_SetConfig+0xce>
 8006838:	2b01      	cmp	r3, #1
 800683a:	d00e      	beq.n	800685a <UART_SetConfig+0xea>
 800683c:	e01b      	b.n	8006876 <UART_SetConfig+0x106>
 800683e:	231b      	movs	r3, #27
 8006840:	2220      	movs	r2, #32
 8006842:	189b      	adds	r3, r3, r2
 8006844:	19db      	adds	r3, r3, r7
 8006846:	2200      	movs	r2, #0
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	e0b4      	b.n	80069b6 <UART_SetConfig+0x246>
 800684c:	231b      	movs	r3, #27
 800684e:	2220      	movs	r2, #32
 8006850:	189b      	adds	r3, r3, r2
 8006852:	19db      	adds	r3, r3, r7
 8006854:	2202      	movs	r2, #2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e0ad      	b.n	80069b6 <UART_SetConfig+0x246>
 800685a:	231b      	movs	r3, #27
 800685c:	2220      	movs	r2, #32
 800685e:	189b      	adds	r3, r3, r2
 8006860:	19db      	adds	r3, r3, r7
 8006862:	2204      	movs	r2, #4
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e0a6      	b.n	80069b6 <UART_SetConfig+0x246>
 8006868:	231b      	movs	r3, #27
 800686a:	2220      	movs	r2, #32
 800686c:	189b      	adds	r3, r3, r2
 800686e:	19db      	adds	r3, r3, r7
 8006870:	2208      	movs	r2, #8
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e09f      	b.n	80069b6 <UART_SetConfig+0x246>
 8006876:	231b      	movs	r3, #27
 8006878:	2220      	movs	r2, #32
 800687a:	189b      	adds	r3, r3, r2
 800687c:	19db      	adds	r3, r3, r7
 800687e:	2210      	movs	r2, #16
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	e098      	b.n	80069b6 <UART_SetConfig+0x246>
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7b      	ldr	r2, [pc, #492]	; (8006a78 <UART_SetConfig+0x308>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d131      	bne.n	80068f2 <UART_SetConfig+0x182>
 800688e:	4b79      	ldr	r3, [pc, #484]	; (8006a74 <UART_SetConfig+0x304>)
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	220c      	movs	r2, #12
 8006894:	4013      	ands	r3, r2
 8006896:	2b0c      	cmp	r3, #12
 8006898:	d01d      	beq.n	80068d6 <UART_SetConfig+0x166>
 800689a:	d823      	bhi.n	80068e4 <UART_SetConfig+0x174>
 800689c:	2b08      	cmp	r3, #8
 800689e:	d00c      	beq.n	80068ba <UART_SetConfig+0x14a>
 80068a0:	d820      	bhi.n	80068e4 <UART_SetConfig+0x174>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <UART_SetConfig+0x13c>
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d00e      	beq.n	80068c8 <UART_SetConfig+0x158>
 80068aa:	e01b      	b.n	80068e4 <UART_SetConfig+0x174>
 80068ac:	231b      	movs	r3, #27
 80068ae:	2220      	movs	r2, #32
 80068b0:	189b      	adds	r3, r3, r2
 80068b2:	19db      	adds	r3, r3, r7
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	e07d      	b.n	80069b6 <UART_SetConfig+0x246>
 80068ba:	231b      	movs	r3, #27
 80068bc:	2220      	movs	r2, #32
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	19db      	adds	r3, r3, r7
 80068c2:	2202      	movs	r2, #2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e076      	b.n	80069b6 <UART_SetConfig+0x246>
 80068c8:	231b      	movs	r3, #27
 80068ca:	2220      	movs	r2, #32
 80068cc:	189b      	adds	r3, r3, r2
 80068ce:	19db      	adds	r3, r3, r7
 80068d0:	2204      	movs	r2, #4
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e06f      	b.n	80069b6 <UART_SetConfig+0x246>
 80068d6:	231b      	movs	r3, #27
 80068d8:	2220      	movs	r2, #32
 80068da:	189b      	adds	r3, r3, r2
 80068dc:	19db      	adds	r3, r3, r7
 80068de:	2208      	movs	r2, #8
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	e068      	b.n	80069b6 <UART_SetConfig+0x246>
 80068e4:	231b      	movs	r3, #27
 80068e6:	2220      	movs	r2, #32
 80068e8:	189b      	adds	r3, r3, r2
 80068ea:	19db      	adds	r3, r3, r7
 80068ec:	2210      	movs	r2, #16
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	e061      	b.n	80069b6 <UART_SetConfig+0x246>
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a61      	ldr	r2, [pc, #388]	; (8006a7c <UART_SetConfig+0x30c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d106      	bne.n	800690a <UART_SetConfig+0x19a>
 80068fc:	231b      	movs	r3, #27
 80068fe:	2220      	movs	r2, #32
 8006900:	189b      	adds	r3, r3, r2
 8006902:	19db      	adds	r3, r3, r7
 8006904:	2200      	movs	r2, #0
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	e055      	b.n	80069b6 <UART_SetConfig+0x246>
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a5c      	ldr	r2, [pc, #368]	; (8006a80 <UART_SetConfig+0x310>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d106      	bne.n	8006922 <UART_SetConfig+0x1b2>
 8006914:	231b      	movs	r3, #27
 8006916:	2220      	movs	r2, #32
 8006918:	189b      	adds	r3, r3, r2
 800691a:	19db      	adds	r3, r3, r7
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	e049      	b.n	80069b6 <UART_SetConfig+0x246>
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a50      	ldr	r2, [pc, #320]	; (8006a68 <UART_SetConfig+0x2f8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d13e      	bne.n	80069aa <UART_SetConfig+0x23a>
 800692c:	4b51      	ldr	r3, [pc, #324]	; (8006a74 <UART_SetConfig+0x304>)
 800692e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006930:	23c0      	movs	r3, #192	; 0xc0
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	4013      	ands	r3, r2
 8006936:	22c0      	movs	r2, #192	; 0xc0
 8006938:	0112      	lsls	r2, r2, #4
 800693a:	4293      	cmp	r3, r2
 800693c:	d027      	beq.n	800698e <UART_SetConfig+0x21e>
 800693e:	22c0      	movs	r2, #192	; 0xc0
 8006940:	0112      	lsls	r2, r2, #4
 8006942:	4293      	cmp	r3, r2
 8006944:	d82a      	bhi.n	800699c <UART_SetConfig+0x22c>
 8006946:	2280      	movs	r2, #128	; 0x80
 8006948:	0112      	lsls	r2, r2, #4
 800694a:	4293      	cmp	r3, r2
 800694c:	d011      	beq.n	8006972 <UART_SetConfig+0x202>
 800694e:	2280      	movs	r2, #128	; 0x80
 8006950:	0112      	lsls	r2, r2, #4
 8006952:	4293      	cmp	r3, r2
 8006954:	d822      	bhi.n	800699c <UART_SetConfig+0x22c>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <UART_SetConfig+0x1f4>
 800695a:	2280      	movs	r2, #128	; 0x80
 800695c:	00d2      	lsls	r2, r2, #3
 800695e:	4293      	cmp	r3, r2
 8006960:	d00e      	beq.n	8006980 <UART_SetConfig+0x210>
 8006962:	e01b      	b.n	800699c <UART_SetConfig+0x22c>
 8006964:	231b      	movs	r3, #27
 8006966:	2220      	movs	r2, #32
 8006968:	189b      	adds	r3, r3, r2
 800696a:	19db      	adds	r3, r3, r7
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	e021      	b.n	80069b6 <UART_SetConfig+0x246>
 8006972:	231b      	movs	r3, #27
 8006974:	2220      	movs	r2, #32
 8006976:	189b      	adds	r3, r3, r2
 8006978:	19db      	adds	r3, r3, r7
 800697a:	2202      	movs	r2, #2
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e01a      	b.n	80069b6 <UART_SetConfig+0x246>
 8006980:	231b      	movs	r3, #27
 8006982:	2220      	movs	r2, #32
 8006984:	189b      	adds	r3, r3, r2
 8006986:	19db      	adds	r3, r3, r7
 8006988:	2204      	movs	r2, #4
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e013      	b.n	80069b6 <UART_SetConfig+0x246>
 800698e:	231b      	movs	r3, #27
 8006990:	2220      	movs	r2, #32
 8006992:	189b      	adds	r3, r3, r2
 8006994:	19db      	adds	r3, r3, r7
 8006996:	2208      	movs	r2, #8
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	e00c      	b.n	80069b6 <UART_SetConfig+0x246>
 800699c:	231b      	movs	r3, #27
 800699e:	2220      	movs	r2, #32
 80069a0:	189b      	adds	r3, r3, r2
 80069a2:	19db      	adds	r3, r3, r7
 80069a4:	2210      	movs	r2, #16
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e005      	b.n	80069b6 <UART_SetConfig+0x246>
 80069aa:	231b      	movs	r3, #27
 80069ac:	2220      	movs	r2, #32
 80069ae:	189b      	adds	r3, r3, r2
 80069b0:	19db      	adds	r3, r3, r7
 80069b2:	2210      	movs	r2, #16
 80069b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a2b      	ldr	r2, [pc, #172]	; (8006a68 <UART_SetConfig+0x2f8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d000      	beq.n	80069c2 <UART_SetConfig+0x252>
 80069c0:	e0a9      	b.n	8006b16 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069c2:	231b      	movs	r3, #27
 80069c4:	2220      	movs	r2, #32
 80069c6:	189b      	adds	r3, r3, r2
 80069c8:	19db      	adds	r3, r3, r7
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d015      	beq.n	80069fc <UART_SetConfig+0x28c>
 80069d0:	dc18      	bgt.n	8006a04 <UART_SetConfig+0x294>
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d00d      	beq.n	80069f2 <UART_SetConfig+0x282>
 80069d6:	dc15      	bgt.n	8006a04 <UART_SetConfig+0x294>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <UART_SetConfig+0x272>
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d005      	beq.n	80069ec <UART_SetConfig+0x27c>
 80069e0:	e010      	b.n	8006a04 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e2:	f7fd fe89 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 80069e6:	0003      	movs	r3, r0
 80069e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ea:	e014      	b.n	8006a16 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069ec:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <UART_SetConfig+0x314>)
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069f0:	e011      	b.n	8006a16 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f2:	f7fd fdf5 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 80069f6:	0003      	movs	r3, r0
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069fa:	e00c      	b.n	8006a16 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fc:	2380      	movs	r3, #128	; 0x80
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a02:	e008      	b.n	8006a16 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006a08:	231a      	movs	r3, #26
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	189b      	adds	r3, r3, r2
 8006a0e:	19db      	adds	r3, r3, r7
 8006a10:	2201      	movs	r2, #1
 8006a12:	701a      	strb	r2, [r3, #0]
        break;
 8006a14:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d100      	bne.n	8006a1e <UART_SetConfig+0x2ae>
 8006a1c:	e14b      	b.n	8006cb6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a22:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <UART_SetConfig+0x318>)
 8006a24:	0052      	lsls	r2, r2, #1
 8006a26:	5ad3      	ldrh	r3, [r2, r3]
 8006a28:	0019      	movs	r1, r3
 8006a2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006a2c:	f7f9 fb86 	bl	800013c <__udivsi3>
 8006a30:	0003      	movs	r3, r0
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	0013      	movs	r3, r2
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	189b      	adds	r3, r3, r2
 8006a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d305      	bcc.n	8006a50 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d91d      	bls.n	8006a8c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006a50:	231a      	movs	r3, #26
 8006a52:	2220      	movs	r2, #32
 8006a54:	189b      	adds	r3, r3, r2
 8006a56:	19db      	adds	r3, r3, r7
 8006a58:	2201      	movs	r2, #1
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	e12b      	b.n	8006cb6 <UART_SetConfig+0x546>
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	cfff69f3 	.word	0xcfff69f3
 8006a64:	ffffcfff 	.word	0xffffcfff
 8006a68:	40008000 	.word	0x40008000
 8006a6c:	11fff4ff 	.word	0x11fff4ff
 8006a70:	40013800 	.word	0x40013800
 8006a74:	40021000 	.word	0x40021000
 8006a78:	40004400 	.word	0x40004400
 8006a7c:	40004800 	.word	0x40004800
 8006a80:	40004c00 	.word	0x40004c00
 8006a84:	00f42400 	.word	0x00f42400
 8006a88:	08009250 	.word	0x08009250
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a98:	4b92      	ldr	r3, [pc, #584]	; (8006ce4 <UART_SetConfig+0x574>)
 8006a9a:	0052      	lsls	r2, r2, #1
 8006a9c:	5ad3      	ldrh	r3, [r2, r3]
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	69b8      	ldr	r0, [r7, #24]
 8006aaa:	69f9      	ldr	r1, [r7, #28]
 8006aac:	f7f9 fcbc 	bl	8000428 <__aeabi_uldivmod>
 8006ab0:	0002      	movs	r2, r0
 8006ab2:	000b      	movs	r3, r1
 8006ab4:	0e11      	lsrs	r1, r2, #24
 8006ab6:	021d      	lsls	r5, r3, #8
 8006ab8:	430d      	orrs	r5, r1
 8006aba:	0214      	lsls	r4, r2, #8
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	60bb      	str	r3, [r7, #8]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	68b8      	ldr	r0, [r7, #8]
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	1900      	adds	r0, r0, r4
 8006ace:	4169      	adcs	r1, r5
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	607b      	str	r3, [r7, #4]
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f7f9 fca3 	bl	8000428 <__aeabi_uldivmod>
 8006ae2:	0002      	movs	r2, r0
 8006ae4:	000b      	movs	r3, r1
 8006ae6:	0013      	movs	r3, r2
 8006ae8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aec:	23c0      	movs	r3, #192	; 0xc0
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d309      	bcc.n	8006b08 <UART_SetConfig+0x398>
 8006af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af6:	2380      	movs	r3, #128	; 0x80
 8006af8:	035b      	lsls	r3, r3, #13
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d204      	bcs.n	8006b08 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b04:	60da      	str	r2, [r3, #12]
 8006b06:	e0d6      	b.n	8006cb6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006b08:	231a      	movs	r3, #26
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	189b      	adds	r3, r3, r2
 8006b0e:	19db      	adds	r3, r3, r7
 8006b10:	2201      	movs	r2, #1
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	e0cf      	b.n	8006cb6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	69da      	ldr	r2, [r3, #28]
 8006b1a:	2380      	movs	r3, #128	; 0x80
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d000      	beq.n	8006b24 <UART_SetConfig+0x3b4>
 8006b22:	e070      	b.n	8006c06 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006b24:	231b      	movs	r3, #27
 8006b26:	2220      	movs	r2, #32
 8006b28:	189b      	adds	r3, r3, r2
 8006b2a:	19db      	adds	r3, r3, r7
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d015      	beq.n	8006b5e <UART_SetConfig+0x3ee>
 8006b32:	dc18      	bgt.n	8006b66 <UART_SetConfig+0x3f6>
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d00d      	beq.n	8006b54 <UART_SetConfig+0x3e4>
 8006b38:	dc15      	bgt.n	8006b66 <UART_SetConfig+0x3f6>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <UART_SetConfig+0x3d4>
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d005      	beq.n	8006b4e <UART_SetConfig+0x3de>
 8006b42:	e010      	b.n	8006b66 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b44:	f7fd fdd8 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b4c:	e014      	b.n	8006b78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b4e:	4b66      	ldr	r3, [pc, #408]	; (8006ce8 <UART_SetConfig+0x578>)
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b52:	e011      	b.n	8006b78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b54:	f7fd fd44 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b5c:	e00c      	b.n	8006b78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b5e:	2380      	movs	r3, #128	; 0x80
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b64:	e008      	b.n	8006b78 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006b6a:	231a      	movs	r3, #26
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	189b      	adds	r3, r3, r2
 8006b70:	19db      	adds	r3, r3, r7
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
        break;
 8006b76:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d100      	bne.n	8006b80 <UART_SetConfig+0x410>
 8006b7e:	e09a      	b.n	8006cb6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b84:	4b57      	ldr	r3, [pc, #348]	; (8006ce4 <UART_SetConfig+0x574>)
 8006b86:	0052      	lsls	r2, r2, #1
 8006b88:	5ad3      	ldrh	r3, [r2, r3]
 8006b8a:	0019      	movs	r1, r3
 8006b8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b8e:	f7f9 fad5 	bl	800013c <__udivsi3>
 8006b92:	0003      	movs	r3, r0
 8006b94:	005a      	lsls	r2, r3, #1
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	085b      	lsrs	r3, r3, #1
 8006b9c:	18d2      	adds	r2, r2, r3
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	0019      	movs	r1, r3
 8006ba4:	0010      	movs	r0, r2
 8006ba6:	f7f9 fac9 	bl	800013c <__udivsi3>
 8006baa:	0003      	movs	r3, r0
 8006bac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	2b0f      	cmp	r3, #15
 8006bb2:	d921      	bls.n	8006bf8 <UART_SetConfig+0x488>
 8006bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	025b      	lsls	r3, r3, #9
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d21c      	bcs.n	8006bf8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	200e      	movs	r0, #14
 8006bc4:	2420      	movs	r4, #32
 8006bc6:	1903      	adds	r3, r0, r4
 8006bc8:	19db      	adds	r3, r3, r7
 8006bca:	210f      	movs	r1, #15
 8006bcc:	438a      	bics	r2, r1
 8006bce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2207      	movs	r2, #7
 8006bd8:	4013      	ands	r3, r2
 8006bda:	b299      	uxth	r1, r3
 8006bdc:	1903      	adds	r3, r0, r4
 8006bde:	19db      	adds	r3, r3, r7
 8006be0:	1902      	adds	r2, r0, r4
 8006be2:	19d2      	adds	r2, r2, r7
 8006be4:	8812      	ldrh	r2, [r2, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1902      	adds	r2, r0, r4
 8006bf0:	19d2      	adds	r2, r2, r7
 8006bf2:	8812      	ldrh	r2, [r2, #0]
 8006bf4:	60da      	str	r2, [r3, #12]
 8006bf6:	e05e      	b.n	8006cb6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf8:	231a      	movs	r3, #26
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	189b      	adds	r3, r3, r2
 8006bfe:	19db      	adds	r3, r3, r7
 8006c00:	2201      	movs	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	e057      	b.n	8006cb6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c06:	231b      	movs	r3, #27
 8006c08:	2220      	movs	r2, #32
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	19db      	adds	r3, r3, r7
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d015      	beq.n	8006c40 <UART_SetConfig+0x4d0>
 8006c14:	dc18      	bgt.n	8006c48 <UART_SetConfig+0x4d8>
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d00d      	beq.n	8006c36 <UART_SetConfig+0x4c6>
 8006c1a:	dc15      	bgt.n	8006c48 <UART_SetConfig+0x4d8>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <UART_SetConfig+0x4b6>
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d005      	beq.n	8006c30 <UART_SetConfig+0x4c0>
 8006c24:	e010      	b.n	8006c48 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c26:	f7fd fd67 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 8006c2a:	0003      	movs	r3, r0
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c2e:	e014      	b.n	8006c5a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c30:	4b2d      	ldr	r3, [pc, #180]	; (8006ce8 <UART_SetConfig+0x578>)
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c34:	e011      	b.n	8006c5a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c36:	f7fd fcd3 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 8006c3a:	0003      	movs	r3, r0
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c3e:	e00c      	b.n	8006c5a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c46:	e008      	b.n	8006c5a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006c4c:	231a      	movs	r3, #26
 8006c4e:	2220      	movs	r2, #32
 8006c50:	189b      	adds	r3, r3, r2
 8006c52:	19db      	adds	r3, r3, r7
 8006c54:	2201      	movs	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
        break;
 8006c58:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d02a      	beq.n	8006cb6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c64:	4b1f      	ldr	r3, [pc, #124]	; (8006ce4 <UART_SetConfig+0x574>)
 8006c66:	0052      	lsls	r2, r2, #1
 8006c68:	5ad3      	ldrh	r3, [r2, r3]
 8006c6a:	0019      	movs	r1, r3
 8006c6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006c6e:	f7f9 fa65 	bl	800013c <__udivsi3>
 8006c72:	0003      	movs	r3, r0
 8006c74:	001a      	movs	r2, r3
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	085b      	lsrs	r3, r3, #1
 8006c7c:	18d2      	adds	r2, r2, r3
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	0019      	movs	r1, r3
 8006c84:	0010      	movs	r0, r2
 8006c86:	f7f9 fa59 	bl	800013c <__udivsi3>
 8006c8a:	0003      	movs	r3, r0
 8006c8c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	2b0f      	cmp	r3, #15
 8006c92:	d90a      	bls.n	8006caa <UART_SetConfig+0x53a>
 8006c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c96:	2380      	movs	r3, #128	; 0x80
 8006c98:	025b      	lsls	r3, r3, #9
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d205      	bcs.n	8006caa <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60da      	str	r2, [r3, #12]
 8006ca8:	e005      	b.n	8006cb6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006caa:	231a      	movs	r3, #26
 8006cac:	2220      	movs	r2, #32
 8006cae:	189b      	adds	r3, r3, r2
 8006cb0:	19db      	adds	r3, r3, r7
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	226a      	movs	r2, #106	; 0x6a
 8006cba:	2101      	movs	r1, #1
 8006cbc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	2268      	movs	r2, #104	; 0x68
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	2200      	movs	r2, #0
 8006cca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	2200      	movs	r2, #0
 8006cd0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006cd2:	231a      	movs	r3, #26
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	189b      	adds	r3, r3, r2
 8006cd8:	19db      	adds	r3, r3, r7
 8006cda:	781b      	ldrb	r3, [r3, #0]
}
 8006cdc:	0018      	movs	r0, r3
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b010      	add	sp, #64	; 0x40
 8006ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce4:	08009250 	.word	0x08009250
 8006ce8:	00f42400 	.word	0x00f42400

08006cec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d00b      	beq.n	8006d16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	4a4a      	ldr	r2, [pc, #296]	; (8006e30 <UART_AdvFeatureConfig+0x144>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	0019      	movs	r1, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4a43      	ldr	r2, [pc, #268]	; (8006e34 <UART_AdvFeatureConfig+0x148>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	0019      	movs	r1, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d00b      	beq.n	8006d5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4a3b      	ldr	r2, [pc, #236]	; (8006e38 <UART_AdvFeatureConfig+0x14c>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	0019      	movs	r1, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	2204      	movs	r2, #4
 8006d60:	4013      	ands	r3, r2
 8006d62:	d00b      	beq.n	8006d7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4a34      	ldr	r2, [pc, #208]	; (8006e3c <UART_AdvFeatureConfig+0x150>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	0019      	movs	r1, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d80:	2210      	movs	r2, #16
 8006d82:	4013      	ands	r3, r2
 8006d84:	d00b      	beq.n	8006d9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	4a2c      	ldr	r2, [pc, #176]	; (8006e40 <UART_AdvFeatureConfig+0x154>)
 8006d8e:	4013      	ands	r3, r2
 8006d90:	0019      	movs	r1, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da2:	2220      	movs	r2, #32
 8006da4:	4013      	ands	r3, r2
 8006da6:	d00b      	beq.n	8006dc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	4a25      	ldr	r2, [pc, #148]	; (8006e44 <UART_AdvFeatureConfig+0x158>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	0019      	movs	r1, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc4:	2240      	movs	r2, #64	; 0x40
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d01d      	beq.n	8006e06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a1d      	ldr	r2, [pc, #116]	; (8006e48 <UART_AdvFeatureConfig+0x15c>)
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	0019      	movs	r1, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	035b      	lsls	r3, r3, #13
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d10b      	bne.n	8006e06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <UART_AdvFeatureConfig+0x160>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	0019      	movs	r1, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0a:	2280      	movs	r2, #128	; 0x80
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	d00b      	beq.n	8006e28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	4a0e      	ldr	r2, [pc, #56]	; (8006e50 <UART_AdvFeatureConfig+0x164>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	0019      	movs	r1, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	605a      	str	r2, [r3, #4]
  }
}
 8006e28:	46c0      	nop			; (mov r8, r8)
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	b002      	add	sp, #8
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	ffff7fff 	.word	0xffff7fff
 8006e34:	fffdffff 	.word	0xfffdffff
 8006e38:	fffeffff 	.word	0xfffeffff
 8006e3c:	fffbffff 	.word	0xfffbffff
 8006e40:	ffffefff 	.word	0xffffefff
 8006e44:	ffffdfff 	.word	0xffffdfff
 8006e48:	ffefffff 	.word	0xffefffff
 8006e4c:	ff9fffff 	.word	0xff9fffff
 8006e50:	fff7ffff 	.word	0xfff7ffff

08006e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b092      	sub	sp, #72	; 0x48
 8006e58:	af02      	add	r7, sp, #8
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2290      	movs	r2, #144	; 0x90
 8006e60:	2100      	movs	r1, #0
 8006e62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e64:	f7fa ffaa 	bl	8001dbc <HAL_GetTick>
 8006e68:	0003      	movs	r3, r0
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2208      	movs	r2, #8
 8006e74:	4013      	ands	r3, r2
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d12d      	bne.n	8006ed6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	2280      	movs	r2, #128	; 0x80
 8006e7e:	0391      	lsls	r1, r2, #14
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4a47      	ldr	r2, [pc, #284]	; (8006fa0 <UART_CheckIdleState+0x14c>)
 8006e84:	9200      	str	r2, [sp, #0]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f000 f88e 	bl	8006fa8 <UART_WaitOnFlagUntilTimeout>
 8006e8c:	1e03      	subs	r3, r0, #0
 8006e8e:	d022      	beq.n	8006ed6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e90:	f3ef 8310 	mrs	r3, PRIMASK
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	f383 8810 	msr	PRIMASK, r3
}
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2180      	movs	r1, #128	; 0x80
 8006eb2:	438a      	bics	r2, r1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	f383 8810 	msr	PRIMASK, r3
}
 8006ec0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2288      	movs	r2, #136	; 0x88
 8006ec6:	2120      	movs	r1, #32
 8006ec8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2284      	movs	r2, #132	; 0x84
 8006ece:	2100      	movs	r1, #0
 8006ed0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e060      	b.n	8006f98 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2204      	movs	r2, #4
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d146      	bne.n	8006f72 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee6:	2280      	movs	r2, #128	; 0x80
 8006ee8:	03d1      	lsls	r1, r2, #15
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4a2c      	ldr	r2, [pc, #176]	; (8006fa0 <UART_CheckIdleState+0x14c>)
 8006eee:	9200      	str	r2, [sp, #0]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f000 f859 	bl	8006fa8 <UART_WaitOnFlagUntilTimeout>
 8006ef6:	1e03      	subs	r3, r0, #0
 8006ef8:	d03b      	beq.n	8006f72 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006efa:	f3ef 8310 	mrs	r3, PRIMASK
 8006efe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f00:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
 8006f04:	2301      	movs	r3, #1
 8006f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f383 8810 	msr	PRIMASK, r3
}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4922      	ldr	r1, [pc, #136]	; (8006fa4 <UART_CheckIdleState+0x150>)
 8006f1c:	400a      	ands	r2, r1
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f383 8810 	msr	PRIMASK, r3
}
 8006f2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f30:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f32:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f34:	633b      	str	r3, [r7, #48]	; 0x30
 8006f36:	2301      	movs	r3, #1
 8006f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	f383 8810 	msr	PRIMASK, r3
}
 8006f40:	46c0      	nop			; (mov r8, r8)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	438a      	bics	r2, r1
 8006f50:	609a      	str	r2, [r3, #8]
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	f383 8810 	msr	PRIMASK, r3
}
 8006f5c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	228c      	movs	r2, #140	; 0x8c
 8006f62:	2120      	movs	r1, #32
 8006f64:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2284      	movs	r2, #132	; 0x84
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e012      	b.n	8006f98 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2288      	movs	r2, #136	; 0x88
 8006f76:	2120      	movs	r1, #32
 8006f78:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	228c      	movs	r2, #140	; 0x8c
 8006f7e:	2120      	movs	r1, #32
 8006f80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2284      	movs	r2, #132	; 0x84
 8006f92:	2100      	movs	r1, #0
 8006f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b010      	add	sp, #64	; 0x40
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	01ffffff 	.word	0x01ffffff
 8006fa4:	fffffedf 	.word	0xfffffedf

08006fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	1dfb      	adds	r3, r7, #7
 8006fb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fb8:	e051      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	d04e      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc0:	f7fa fefc 	bl	8001dbc <HAL_GetTick>
 8006fc4:	0002      	movs	r2, r0
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d302      	bcc.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e051      	b.n	800707e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d03b      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b80      	cmp	r3, #128	; 0x80
 8006fea:	d038      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d035      	beq.n	800705e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d111      	bne.n	8007024 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2208      	movs	r2, #8
 8007006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	0018      	movs	r0, r3
 800700c:	f000 f960 	bl	80072d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2290      	movs	r2, #144	; 0x90
 8007014:	2108      	movs	r1, #8
 8007016:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2284      	movs	r2, #132	; 0x84
 800701c:	2100      	movs	r1, #0
 800701e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e02c      	b.n	800707e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69da      	ldr	r2, [r3, #28]
 800702a:	2380      	movs	r3, #128	; 0x80
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	401a      	ands	r2, r3
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	429a      	cmp	r2, r3
 8007036:	d112      	bne.n	800705e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2280      	movs	r2, #128	; 0x80
 800703e:	0112      	lsls	r2, r2, #4
 8007040:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	0018      	movs	r0, r3
 8007046:	f000 f943 	bl	80072d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2290      	movs	r2, #144	; 0x90
 800704e:	2120      	movs	r1, #32
 8007050:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2284      	movs	r2, #132	; 0x84
 8007056:	2100      	movs	r1, #0
 8007058:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e00f      	b.n	800707e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	4013      	ands	r3, r2
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	425a      	negs	r2, r3
 800706e:	4153      	adcs	r3, r2
 8007070:	b2db      	uxtb	r3, r3
 8007072:	001a      	movs	r2, r3
 8007074:	1dfb      	adds	r3, r7, #7
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d09e      	beq.n	8006fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	0018      	movs	r0, r3
 8007080:	46bd      	mov	sp, r7
 8007082:	b004      	add	sp, #16
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b098      	sub	sp, #96	; 0x60
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	1dbb      	adds	r3, r7, #6
 8007094:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	1dba      	adds	r2, r7, #6
 80070a0:	215c      	movs	r1, #92	; 0x5c
 80070a2:	8812      	ldrh	r2, [r2, #0]
 80070a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1dba      	adds	r2, r7, #6
 80070aa:	215e      	movs	r1, #94	; 0x5e
 80070ac:	8812      	ldrh	r2, [r2, #0]
 80070ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	2380      	movs	r3, #128	; 0x80
 80070bc:	015b      	lsls	r3, r3, #5
 80070be:	429a      	cmp	r2, r3
 80070c0:	d10d      	bne.n	80070de <UART_Start_Receive_IT+0x56>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d104      	bne.n	80070d4 <UART_Start_Receive_IT+0x4c>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2260      	movs	r2, #96	; 0x60
 80070ce:	497b      	ldr	r1, [pc, #492]	; (80072bc <UART_Start_Receive_IT+0x234>)
 80070d0:	5299      	strh	r1, [r3, r2]
 80070d2:	e02e      	b.n	8007132 <UART_Start_Receive_IT+0xaa>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2260      	movs	r2, #96	; 0x60
 80070d8:	21ff      	movs	r1, #255	; 0xff
 80070da:	5299      	strh	r1, [r3, r2]
 80070dc:	e029      	b.n	8007132 <UART_Start_Receive_IT+0xaa>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10d      	bne.n	8007102 <UART_Start_Receive_IT+0x7a>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d104      	bne.n	80070f8 <UART_Start_Receive_IT+0x70>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2260      	movs	r2, #96	; 0x60
 80070f2:	21ff      	movs	r1, #255	; 0xff
 80070f4:	5299      	strh	r1, [r3, r2]
 80070f6:	e01c      	b.n	8007132 <UART_Start_Receive_IT+0xaa>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2260      	movs	r2, #96	; 0x60
 80070fc:	217f      	movs	r1, #127	; 0x7f
 80070fe:	5299      	strh	r1, [r3, r2]
 8007100:	e017      	b.n	8007132 <UART_Start_Receive_IT+0xaa>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	2380      	movs	r3, #128	; 0x80
 8007108:	055b      	lsls	r3, r3, #21
 800710a:	429a      	cmp	r2, r3
 800710c:	d10d      	bne.n	800712a <UART_Start_Receive_IT+0xa2>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <UART_Start_Receive_IT+0x98>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2260      	movs	r2, #96	; 0x60
 800711a:	217f      	movs	r1, #127	; 0x7f
 800711c:	5299      	strh	r1, [r3, r2]
 800711e:	e008      	b.n	8007132 <UART_Start_Receive_IT+0xaa>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2260      	movs	r2, #96	; 0x60
 8007124:	213f      	movs	r1, #63	; 0x3f
 8007126:	5299      	strh	r1, [r3, r2]
 8007128:	e003      	b.n	8007132 <UART_Start_Receive_IT+0xaa>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2260      	movs	r2, #96	; 0x60
 800712e:	2100      	movs	r1, #0
 8007130:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2290      	movs	r2, #144	; 0x90
 8007136:	2100      	movs	r1, #0
 8007138:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	228c      	movs	r2, #140	; 0x8c
 800713e:	2122      	movs	r1, #34	; 0x22
 8007140:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007142:	f3ef 8310 	mrs	r3, PRIMASK
 8007146:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007148:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800714c:	2301      	movs	r3, #1
 800714e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007152:	f383 8810 	msr	PRIMASK, r3
}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2101      	movs	r1, #1
 8007164:	430a      	orrs	r2, r1
 8007166:	609a      	str	r2, [r3, #8]
 8007168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800716a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800716e:	f383 8810 	msr	PRIMASK, r3
}
 8007172:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007178:	2380      	movs	r3, #128	; 0x80
 800717a:	059b      	lsls	r3, r3, #22
 800717c:	429a      	cmp	r2, r3
 800717e:	d150      	bne.n	8007222 <UART_Start_Receive_IT+0x19a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2268      	movs	r2, #104	; 0x68
 8007184:	5a9b      	ldrh	r3, [r3, r2]
 8007186:	1dba      	adds	r2, r7, #6
 8007188:	8812      	ldrh	r2, [r2, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d349      	bcc.n	8007222 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	2380      	movs	r3, #128	; 0x80
 8007194:	015b      	lsls	r3, r3, #5
 8007196:	429a      	cmp	r2, r3
 8007198:	d107      	bne.n	80071aa <UART_Start_Receive_IT+0x122>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d103      	bne.n	80071aa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4a46      	ldr	r2, [pc, #280]	; (80072c0 <UART_Start_Receive_IT+0x238>)
 80071a6:	675a      	str	r2, [r3, #116]	; 0x74
 80071a8:	e002      	b.n	80071b0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4a45      	ldr	r2, [pc, #276]	; (80072c4 <UART_Start_Receive_IT+0x23c>)
 80071ae:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d019      	beq.n	80071ec <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b8:	f3ef 8310 	mrs	r3, PRIMASK
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80071c2:	2301      	movs	r3, #1
 80071c4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	f383 8810 	msr	PRIMASK, r3
}
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	0049      	lsls	r1, r1, #1
 80071dc:	430a      	orrs	r2, r1
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e6:	f383 8810 	msr	PRIMASK, r3
}
 80071ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ec:	f3ef 8310 	mrs	r3, PRIMASK
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071f4:	657b      	str	r3, [r7, #84]	; 0x54
 80071f6:	2301      	movs	r3, #1
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	f383 8810 	msr	PRIMASK, r3
}
 8007200:	46c0      	nop			; (mov r8, r8)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2180      	movs	r1, #128	; 0x80
 800720e:	0549      	lsls	r1, r1, #21
 8007210:	430a      	orrs	r2, r1
 8007212:	609a      	str	r2, [r3, #8]
 8007214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007216:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	f383 8810 	msr	PRIMASK, r3
}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	e047      	b.n	80072b2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	2380      	movs	r3, #128	; 0x80
 8007228:	015b      	lsls	r3, r3, #5
 800722a:	429a      	cmp	r2, r3
 800722c:	d107      	bne.n	800723e <UART_Start_Receive_IT+0x1b6>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	4a23      	ldr	r2, [pc, #140]	; (80072c8 <UART_Start_Receive_IT+0x240>)
 800723a:	675a      	str	r2, [r3, #116]	; 0x74
 800723c:	e002      	b.n	8007244 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	4a22      	ldr	r2, [pc, #136]	; (80072cc <UART_Start_Receive_IT+0x244>)
 8007242:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d019      	beq.n	8007280 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800724c:	f3ef 8310 	mrs	r3, PRIMASK
 8007250:	61fb      	str	r3, [r7, #28]
  return(result);
 8007252:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007256:	2301      	movs	r3, #1
 8007258:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	f383 8810 	msr	PRIMASK, r3
}
 8007260:	46c0      	nop			; (mov r8, r8)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2190      	movs	r1, #144	; 0x90
 800726e:	0049      	lsls	r1, r1, #1
 8007270:	430a      	orrs	r2, r1
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	f383 8810 	msr	PRIMASK, r3
}
 800727e:	e018      	b.n	80072b2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007280:	f3ef 8310 	mrs	r3, PRIMASK
 8007284:	613b      	str	r3, [r7, #16]
  return(result);
 8007286:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007288:	653b      	str	r3, [r7, #80]	; 0x50
 800728a:	2301      	movs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f383 8810 	msr	PRIMASK, r3
}
 8007294:	46c0      	nop			; (mov r8, r8)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2120      	movs	r1, #32
 80072a2:	430a      	orrs	r2, r1
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	f383 8810 	msr	PRIMASK, r3
}
 80072b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	0018      	movs	r0, r3
 80072b6:	46bd      	mov	sp, r7
 80072b8:	b018      	add	sp, #96	; 0x60
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	000001ff 	.word	0x000001ff
 80072c0:	08007aed 	.word	0x08007aed
 80072c4:	080077ad 	.word	0x080077ad
 80072c8:	080075e9 	.word	0x080075e9
 80072cc:	08007425 	.word	0x08007425

080072d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08e      	sub	sp, #56	; 0x38
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d8:	f3ef 8310 	mrs	r3, PRIMASK
 80072dc:	617b      	str	r3, [r7, #20]
  return(result);
 80072de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
 80072e2:	2301      	movs	r3, #1
 80072e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	f383 8810 	msr	PRIMASK, r3
}
 80072ec:	46c0      	nop			; (mov r8, r8)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4926      	ldr	r1, [pc, #152]	; (8007394 <UART_EndRxTransfer+0xc4>)
 80072fa:	400a      	ands	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	f383 8810 	msr	PRIMASK, r3
}
 8007308:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800730a:	f3ef 8310 	mrs	r3, PRIMASK
 800730e:	623b      	str	r3, [r7, #32]
  return(result);
 8007310:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007312:	633b      	str	r3, [r7, #48]	; 0x30
 8007314:	2301      	movs	r3, #1
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	f383 8810 	msr	PRIMASK, r3
}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	491b      	ldr	r1, [pc, #108]	; (8007398 <UART_EndRxTransfer+0xc8>)
 800732c:	400a      	ands	r2, r1
 800732e:	609a      	str	r2, [r3, #8]
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	f383 8810 	msr	PRIMASK, r3
}
 800733a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007340:	2b01      	cmp	r3, #1
 8007342:	d118      	bne.n	8007376 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007344:	f3ef 8310 	mrs	r3, PRIMASK
 8007348:	60bb      	str	r3, [r7, #8]
  return(result);
 800734a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800734e:	2301      	movs	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f383 8810 	msr	PRIMASK, r3
}
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2110      	movs	r1, #16
 8007366:	438a      	bics	r2, r1
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f383 8810 	msr	PRIMASK, r3
}
 8007374:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	228c      	movs	r2, #140	; 0x8c
 800737a:	2120      	movs	r1, #32
 800737c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	675a      	str	r2, [r3, #116]	; 0x74
}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	46bd      	mov	sp, r7
 800738e:	b00e      	add	sp, #56	; 0x38
 8007390:	bd80      	pop	{r7, pc}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	fffffedf 	.word	0xfffffedf
 8007398:	effffffe 	.word	0xeffffffe

0800739c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	225e      	movs	r2, #94	; 0x5e
 80073ae:	2100      	movs	r1, #0
 80073b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2256      	movs	r2, #86	; 0x56
 80073b6:	2100      	movs	r1, #0
 80073b8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	0018      	movs	r0, r3
 80073be:	f7ff f9c3 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b004      	add	sp, #16
 80073c8:	bd80      	pop	{r7, pc}

080073ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d2:	f3ef 8310 	mrs	r3, PRIMASK
 80073d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80073d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	2301      	movs	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f383 8810 	msr	PRIMASK, r3
}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2140      	movs	r1, #64	; 0x40
 80073f4:	438a      	bics	r2, r1
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f383 8810 	msr	PRIMASK, r3
}
 8007402:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2288      	movs	r2, #136	; 0x88
 8007408:	2120      	movs	r1, #32
 800740a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	0018      	movs	r0, r3
 8007416:	f7ff f98f 	bl	8006738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	46bd      	mov	sp, r7
 800741e:	b006      	add	sp, #24
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b094      	sub	sp, #80	; 0x50
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800742c:	204e      	movs	r0, #78	; 0x4e
 800742e:	183b      	adds	r3, r7, r0
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	2160      	movs	r1, #96	; 0x60
 8007434:	5a52      	ldrh	r2, [r2, r1]
 8007436:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	228c      	movs	r2, #140	; 0x8c
 800743c:	589b      	ldr	r3, [r3, r2]
 800743e:	2b22      	cmp	r3, #34	; 0x22
 8007440:	d000      	beq.n	8007444 <UART_RxISR_8BIT+0x20>
 8007442:	e0bf      	b.n	80075c4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800744a:	214c      	movs	r1, #76	; 0x4c
 800744c:	187b      	adds	r3, r7, r1
 800744e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007450:	187b      	adds	r3, r7, r1
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b2da      	uxtb	r2, r3
 8007456:	183b      	adds	r3, r7, r0
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b2d9      	uxtb	r1, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007460:	400a      	ands	r2, r1
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	225e      	movs	r2, #94	; 0x5e
 8007474:	5a9b      	ldrh	r3, [r3, r2]
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b299      	uxth	r1, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	225e      	movs	r2, #94	; 0x5e
 8007480:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	225e      	movs	r2, #94	; 0x5e
 8007486:	5a9b      	ldrh	r3, [r3, r2]
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d000      	beq.n	8007490 <UART_RxISR_8BIT+0x6c>
 800748e:	e0a1      	b.n	80075d4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007490:	f3ef 8310 	mrs	r3, PRIMASK
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007498:	64bb      	str	r3, [r7, #72]	; 0x48
 800749a:	2301      	movs	r3, #1
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	f383 8810 	msr	PRIMASK, r3
}
 80074a4:	46c0      	nop			; (mov r8, r8)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	494a      	ldr	r1, [pc, #296]	; (80075dc <UART_RxISR_8BIT+0x1b8>)
 80074b2:	400a      	ands	r2, r1
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	f383 8810 	msr	PRIMASK, r3
}
 80074c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074c2:	f3ef 8310 	mrs	r3, PRIMASK
 80074c6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ca:	647b      	str	r3, [r7, #68]	; 0x44
 80074cc:	2301      	movs	r3, #1
 80074ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d2:	f383 8810 	msr	PRIMASK, r3
}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2101      	movs	r1, #1
 80074e4:	438a      	bics	r2, r1
 80074e6:	609a      	str	r2, [r3, #8]
 80074e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	f383 8810 	msr	PRIMASK, r3
}
 80074f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	228c      	movs	r2, #140	; 0x8c
 80074f8:	2120      	movs	r1, #32
 80074fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a34      	ldr	r2, [pc, #208]	; (80075e0 <UART_RxISR_8BIT+0x1bc>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d01f      	beq.n	8007552 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	2380      	movs	r3, #128	; 0x80
 800751a:	041b      	lsls	r3, r3, #16
 800751c:	4013      	ands	r3, r2
 800751e:	d018      	beq.n	8007552 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007520:	f3ef 8310 	mrs	r3, PRIMASK
 8007524:	61bb      	str	r3, [r7, #24]
  return(result);
 8007526:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007528:	643b      	str	r3, [r7, #64]	; 0x40
 800752a:	2301      	movs	r3, #1
 800752c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f383 8810 	msr	PRIMASK, r3
}
 8007534:	46c0      	nop			; (mov r8, r8)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4928      	ldr	r1, [pc, #160]	; (80075e4 <UART_RxISR_8BIT+0x1c0>)
 8007542:	400a      	ands	r2, r1
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007548:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	f383 8810 	msr	PRIMASK, r3
}
 8007550:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d12f      	bne.n	80075ba <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007560:	f3ef 8310 	mrs	r3, PRIMASK
 8007564:	60fb      	str	r3, [r7, #12]
  return(result);
 8007566:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800756a:	2301      	movs	r3, #1
 800756c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f383 8810 	msr	PRIMASK, r3
}
 8007574:	46c0      	nop			; (mov r8, r8)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2110      	movs	r1, #16
 8007582:	438a      	bics	r2, r1
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f383 8810 	msr	PRIMASK, r3
}
 8007590:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	2210      	movs	r2, #16
 800759a:	4013      	ands	r3, r2
 800759c:	2b10      	cmp	r3, #16
 800759e:	d103      	bne.n	80075a8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2210      	movs	r2, #16
 80075a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	225c      	movs	r2, #92	; 0x5c
 80075ac:	5a9a      	ldrh	r2, [r3, r2]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	0011      	movs	r1, r2
 80075b2:	0018      	movs	r0, r3
 80075b4:	f7ff f8d0 	bl	8006758 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075b8:	e00c      	b.n	80075d4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	0018      	movs	r0, r3
 80075be:	f7f9 ffdf 	bl	8001580 <HAL_UART_RxCpltCallback>
}
 80075c2:	e007      	b.n	80075d4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2108      	movs	r1, #8
 80075d0:	430a      	orrs	r2, r1
 80075d2:	619a      	str	r2, [r3, #24]
}
 80075d4:	46c0      	nop			; (mov r8, r8)
 80075d6:	46bd      	mov	sp, r7
 80075d8:	b014      	add	sp, #80	; 0x50
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	fffffedf 	.word	0xfffffedf
 80075e0:	40008000 	.word	0x40008000
 80075e4:	fbffffff 	.word	0xfbffffff

080075e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b094      	sub	sp, #80	; 0x50
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075f0:	204e      	movs	r0, #78	; 0x4e
 80075f2:	183b      	adds	r3, r7, r0
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	2160      	movs	r1, #96	; 0x60
 80075f8:	5a52      	ldrh	r2, [r2, r1]
 80075fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	228c      	movs	r2, #140	; 0x8c
 8007600:	589b      	ldr	r3, [r3, r2]
 8007602:	2b22      	cmp	r3, #34	; 0x22
 8007604:	d000      	beq.n	8007608 <UART_RxISR_16BIT+0x20>
 8007606:	e0bf      	b.n	8007788 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800760e:	214c      	movs	r1, #76	; 0x4c
 8007610:	187b      	adds	r3, r7, r1
 8007612:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007618:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800761a:	187b      	adds	r3, r7, r1
 800761c:	183a      	adds	r2, r7, r0
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	8812      	ldrh	r2, [r2, #0]
 8007622:	4013      	ands	r3, r2
 8007624:	b29a      	uxth	r2, r3
 8007626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007628:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762e:	1c9a      	adds	r2, r3, #2
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	225e      	movs	r2, #94	; 0x5e
 8007638:	5a9b      	ldrh	r3, [r3, r2]
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b299      	uxth	r1, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	225e      	movs	r2, #94	; 0x5e
 8007644:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	225e      	movs	r2, #94	; 0x5e
 800764a:	5a9b      	ldrh	r3, [r3, r2]
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d000      	beq.n	8007654 <UART_RxISR_16BIT+0x6c>
 8007652:	e0a1      	b.n	8007798 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007654:	f3ef 8310 	mrs	r3, PRIMASK
 8007658:	623b      	str	r3, [r7, #32]
  return(result);
 800765a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800765c:	647b      	str	r3, [r7, #68]	; 0x44
 800765e:	2301      	movs	r3, #1
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	f383 8810 	msr	PRIMASK, r3
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	494a      	ldr	r1, [pc, #296]	; (80077a0 <UART_RxISR_16BIT+0x1b8>)
 8007676:	400a      	ands	r2, r1
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800767c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	f383 8810 	msr	PRIMASK, r3
}
 8007684:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007686:	f3ef 8310 	mrs	r3, PRIMASK
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	643b      	str	r3, [r7, #64]	; 0x40
 8007690:	2301      	movs	r3, #1
 8007692:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	f383 8810 	msr	PRIMASK, r3
}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2101      	movs	r1, #1
 80076a8:	438a      	bics	r2, r1
 80076aa:	609a      	str	r2, [r3, #8]
 80076ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b2:	f383 8810 	msr	PRIMASK, r3
}
 80076b6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	228c      	movs	r2, #140	; 0x8c
 80076bc:	2120      	movs	r1, #32
 80076be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a34      	ldr	r2, [pc, #208]	; (80077a4 <UART_RxISR_16BIT+0x1bc>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d01f      	beq.n	8007716 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	2380      	movs	r3, #128	; 0x80
 80076de:	041b      	lsls	r3, r3, #16
 80076e0:	4013      	ands	r3, r2
 80076e2:	d018      	beq.n	8007716 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e4:	f3ef 8310 	mrs	r3, PRIMASK
 80076e8:	617b      	str	r3, [r7, #20]
  return(result);
 80076ea:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ee:	2301      	movs	r3, #1
 80076f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f383 8810 	msr	PRIMASK, r3
}
 80076f8:	46c0      	nop			; (mov r8, r8)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4928      	ldr	r1, [pc, #160]	; (80077a8 <UART_RxISR_16BIT+0x1c0>)
 8007706:	400a      	ands	r2, r1
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800770c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	f383 8810 	msr	PRIMASK, r3
}
 8007714:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800771a:	2b01      	cmp	r3, #1
 800771c:	d12f      	bne.n	800777e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007724:	f3ef 8310 	mrs	r3, PRIMASK
 8007728:	60bb      	str	r3, [r7, #8]
  return(result);
 800772a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772c:	63bb      	str	r3, [r7, #56]	; 0x38
 800772e:	2301      	movs	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f383 8810 	msr	PRIMASK, r3
}
 8007738:	46c0      	nop			; (mov r8, r8)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2110      	movs	r1, #16
 8007746:	438a      	bics	r2, r1
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f383 8810 	msr	PRIMASK, r3
}
 8007754:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	2210      	movs	r2, #16
 800775e:	4013      	ands	r3, r2
 8007760:	2b10      	cmp	r3, #16
 8007762:	d103      	bne.n	800776c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2210      	movs	r2, #16
 800776a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	225c      	movs	r2, #92	; 0x5c
 8007770:	5a9a      	ldrh	r2, [r3, r2]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	0011      	movs	r1, r2
 8007776:	0018      	movs	r0, r3
 8007778:	f7fe ffee 	bl	8006758 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800777c:	e00c      	b.n	8007798 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	0018      	movs	r0, r3
 8007782:	f7f9 fefd 	bl	8001580 <HAL_UART_RxCpltCallback>
}
 8007786:	e007      	b.n	8007798 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2108      	movs	r1, #8
 8007794:	430a      	orrs	r2, r1
 8007796:	619a      	str	r2, [r3, #24]
}
 8007798:	46c0      	nop			; (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	b014      	add	sp, #80	; 0x50
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	fffffedf 	.word	0xfffffedf
 80077a4:	40008000 	.word	0x40008000
 80077a8:	fbffffff 	.word	0xfbffffff

080077ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b0a0      	sub	sp, #128	; 0x80
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80077b4:	237a      	movs	r3, #122	; 0x7a
 80077b6:	18fb      	adds	r3, r7, r3
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	2160      	movs	r1, #96	; 0x60
 80077bc:	5a52      	ldrh	r2, [r2, r1]
 80077be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	228c      	movs	r2, #140	; 0x8c
 80077dc:	589b      	ldr	r3, [r3, r2]
 80077de:	2b22      	cmp	r3, #34	; 0x22
 80077e0:	d000      	beq.n	80077e4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80077e2:	e16a      	b.n	8007aba <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077e4:	236e      	movs	r3, #110	; 0x6e
 80077e6:	18fb      	adds	r3, r7, r3
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	2168      	movs	r1, #104	; 0x68
 80077ec:	5a52      	ldrh	r2, [r2, r1]
 80077ee:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077f0:	e111      	b.n	8007a16 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077f8:	216c      	movs	r1, #108	; 0x6c
 80077fa:	187b      	adds	r3, r7, r1
 80077fc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077fe:	187b      	adds	r3, r7, r1
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b2da      	uxtb	r2, r3
 8007804:	237a      	movs	r3, #122	; 0x7a
 8007806:	18fb      	adds	r3, r7, r3
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b2d9      	uxtb	r1, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007810:	400a      	ands	r2, r1
 8007812:	b2d2      	uxtb	r2, r2
 8007814:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	225e      	movs	r2, #94	; 0x5e
 8007824:	5a9b      	ldrh	r3, [r3, r2]
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b299      	uxth	r1, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	225e      	movs	r2, #94	; 0x5e
 8007830:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800783a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800783c:	2207      	movs	r2, #7
 800783e:	4013      	ands	r3, r2
 8007840:	d049      	beq.n	80078d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007842:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007844:	2201      	movs	r2, #1
 8007846:	4013      	ands	r3, r2
 8007848:	d010      	beq.n	800786c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800784a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800784c:	2380      	movs	r3, #128	; 0x80
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	4013      	ands	r3, r2
 8007852:	d00b      	beq.n	800786c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2201      	movs	r2, #1
 800785a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2290      	movs	r2, #144	; 0x90
 8007860:	589b      	ldr	r3, [r3, r2]
 8007862:	2201      	movs	r2, #1
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2190      	movs	r1, #144	; 0x90
 800786a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800786c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800786e:	2202      	movs	r2, #2
 8007870:	4013      	ands	r3, r2
 8007872:	d00f      	beq.n	8007894 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007876:	2201      	movs	r2, #1
 8007878:	4013      	ands	r3, r2
 800787a:	d00b      	beq.n	8007894 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2202      	movs	r2, #2
 8007882:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2290      	movs	r2, #144	; 0x90
 8007888:	589b      	ldr	r3, [r3, r2]
 800788a:	2204      	movs	r2, #4
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2190      	movs	r1, #144	; 0x90
 8007892:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007894:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007896:	2204      	movs	r2, #4
 8007898:	4013      	ands	r3, r2
 800789a:	d00f      	beq.n	80078bc <UART_RxISR_8BIT_FIFOEN+0x110>
 800789c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800789e:	2201      	movs	r2, #1
 80078a0:	4013      	ands	r3, r2
 80078a2:	d00b      	beq.n	80078bc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2204      	movs	r2, #4
 80078aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2290      	movs	r2, #144	; 0x90
 80078b0:	589b      	ldr	r3, [r3, r2]
 80078b2:	2202      	movs	r2, #2
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2190      	movs	r1, #144	; 0x90
 80078ba:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2290      	movs	r2, #144	; 0x90
 80078c0:	589b      	ldr	r3, [r3, r2]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	0018      	movs	r0, r3
 80078ca:	f7fe ff3d 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2290      	movs	r2, #144	; 0x90
 80078d2:	2100      	movs	r1, #0
 80078d4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	225e      	movs	r2, #94	; 0x5e
 80078da:	5a9b      	ldrh	r3, [r3, r2]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d000      	beq.n	80078e4 <UART_RxISR_8BIT_FIFOEN+0x138>
 80078e2:	e098      	b.n	8007a16 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e4:	f3ef 8310 	mrs	r3, PRIMASK
 80078e8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ee:	2301      	movs	r3, #1
 80078f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f4:	f383 8810 	msr	PRIMASK, r3
}
 80078f8:	46c0      	nop			; (mov r8, r8)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4973      	ldr	r1, [pc, #460]	; (8007ad4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8007906:	400a      	ands	r2, r1
 8007908:	601a      	str	r2, [r3, #0]
 800790a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800790c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007910:	f383 8810 	msr	PRIMASK, r3
}
 8007914:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007916:	f3ef 8310 	mrs	r3, PRIMASK
 800791a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800791c:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800791e:	667b      	str	r3, [r7, #100]	; 0x64
 8007920:	2301      	movs	r3, #1
 8007922:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007926:	f383 8810 	msr	PRIMASK, r3
}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4968      	ldr	r1, [pc, #416]	; (8007ad8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8007938:	400a      	ands	r2, r1
 800793a:	609a      	str	r2, [r3, #8]
 800793c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800793e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007942:	f383 8810 	msr	PRIMASK, r3
}
 8007946:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	228c      	movs	r2, #140	; 0x8c
 800794c:	2120      	movs	r1, #32
 800794e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a5e      	ldr	r2, [pc, #376]	; (8007adc <UART_RxISR_8BIT_FIFOEN+0x330>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d01f      	beq.n	80079a6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	2380      	movs	r3, #128	; 0x80
 800796e:	041b      	lsls	r3, r3, #16
 8007970:	4013      	ands	r3, r2
 8007972:	d018      	beq.n	80079a6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007974:	f3ef 8310 	mrs	r3, PRIMASK
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800797c:	663b      	str	r3, [r7, #96]	; 0x60
 800797e:	2301      	movs	r3, #1
 8007980:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	f383 8810 	msr	PRIMASK, r3
}
 8007988:	46c0      	nop			; (mov r8, r8)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4952      	ldr	r1, [pc, #328]	; (8007ae0 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8007996:	400a      	ands	r2, r1
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	f383 8810 	msr	PRIMASK, r3
}
 80079a4:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d12f      	bne.n	8007a0e <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b4:	f3ef 8310 	mrs	r3, PRIMASK
 80079b8:	623b      	str	r3, [r7, #32]
  return(result);
 80079ba:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079be:	2301      	movs	r3, #1
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	f383 8810 	msr	PRIMASK, r3
}
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2110      	movs	r1, #16
 80079d6:	438a      	bics	r2, r1
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	f383 8810 	msr	PRIMASK, r3
}
 80079e4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	2210      	movs	r2, #16
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b10      	cmp	r3, #16
 80079f2:	d103      	bne.n	80079fc <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2210      	movs	r2, #16
 80079fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	225c      	movs	r2, #92	; 0x5c
 8007a00:	5a9a      	ldrh	r2, [r3, r2]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	0011      	movs	r1, r2
 8007a06:	0018      	movs	r0, r3
 8007a08:	f7fe fea6 	bl	8006758 <HAL_UARTEx_RxEventCallback>
 8007a0c:	e003      	b.n	8007a16 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	0018      	movs	r0, r3
 8007a12:	f7f9 fdb5 	bl	8001580 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a16:	236e      	movs	r3, #110	; 0x6e
 8007a18:	18fb      	adds	r3, r7, r3
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a22:	2220      	movs	r2, #32
 8007a24:	4013      	ands	r3, r2
 8007a26:	d000      	beq.n	8007a2a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007a28:	e6e3      	b.n	80077f2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a2a:	205a      	movs	r0, #90	; 0x5a
 8007a2c:	183b      	adds	r3, r7, r0
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	215e      	movs	r1, #94	; 0x5e
 8007a32:	5a52      	ldrh	r2, [r2, r1]
 8007a34:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a36:	0001      	movs	r1, r0
 8007a38:	187b      	adds	r3, r7, r1
 8007a3a:	881b      	ldrh	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d044      	beq.n	8007aca <UART_RxISR_8BIT_FIFOEN+0x31e>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2268      	movs	r2, #104	; 0x68
 8007a44:	5a9b      	ldrh	r3, [r3, r2]
 8007a46:	187a      	adds	r2, r7, r1
 8007a48:	8812      	ldrh	r2, [r2, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d23d      	bcs.n	8007aca <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a52:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a54:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a56:	657b      	str	r3, [r7, #84]	; 0x54
 8007a58:	2301      	movs	r3, #1
 8007a5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f383 8810 	msr	PRIMASK, r3
}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	491d      	ldr	r1, [pc, #116]	; (8007ae4 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8007a70:	400a      	ands	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]
 8007a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f383 8810 	msr	PRIMASK, r3
}
 8007a7e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a19      	ldr	r2, [pc, #100]	; (8007ae8 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8007a84:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a86:	f3ef 8310 	mrs	r3, PRIMASK
 8007a8a:	617b      	str	r3, [r7, #20]
  return(result);
 8007a8c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a90:	2301      	movs	r3, #1
 8007a92:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f383 8810 	msr	PRIMASK, r3
}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2120      	movs	r1, #32
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f383 8810 	msr	PRIMASK, r3
}
 8007ab6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ab8:	e007      	b.n	8007aca <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699a      	ldr	r2, [r3, #24]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2108      	movs	r1, #8
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	619a      	str	r2, [r3, #24]
}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b020      	add	sp, #128	; 0x80
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	fffffeff 	.word	0xfffffeff
 8007ad8:	effffffe 	.word	0xeffffffe
 8007adc:	40008000 	.word	0x40008000
 8007ae0:	fbffffff 	.word	0xfbffffff
 8007ae4:	efffffff 	.word	0xefffffff
 8007ae8:	08007425 	.word	0x08007425

08007aec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b0a2      	sub	sp, #136	; 0x88
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007af4:	2382      	movs	r3, #130	; 0x82
 8007af6:	18fb      	adds	r3, r7, r3
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	2160      	movs	r1, #96	; 0x60
 8007afc:	5a52      	ldrh	r2, [r2, r1]
 8007afe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	2284      	movs	r2, #132	; 0x84
 8007b08:	18ba      	adds	r2, r7, r2
 8007b0a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	228c      	movs	r2, #140	; 0x8c
 8007b20:	589b      	ldr	r3, [r3, r2]
 8007b22:	2b22      	cmp	r3, #34	; 0x22
 8007b24:	d000      	beq.n	8007b28 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8007b26:	e174      	b.n	8007e12 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b28:	2376      	movs	r3, #118	; 0x76
 8007b2a:	18fb      	adds	r3, r7, r3
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	2168      	movs	r1, #104	; 0x68
 8007b30:	5a52      	ldrh	r2, [r2, r1]
 8007b32:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b34:	e119      	b.n	8007d6a <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b3c:	2174      	movs	r1, #116	; 0x74
 8007b3e:	187b      	adds	r3, r7, r1
 8007b40:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b48:	187b      	adds	r3, r7, r1
 8007b4a:	2282      	movs	r2, #130	; 0x82
 8007b4c:	18ba      	adds	r2, r7, r2
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	8812      	ldrh	r2, [r2, #0]
 8007b52:	4013      	ands	r3, r2
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5e:	1c9a      	adds	r2, r3, #2
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	225e      	movs	r2, #94	; 0x5e
 8007b68:	5a9b      	ldrh	r3, [r3, r2]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b299      	uxth	r1, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	225e      	movs	r2, #94	; 0x5e
 8007b74:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	2184      	movs	r1, #132	; 0x84
 8007b7e:	187a      	adds	r2, r7, r1
 8007b80:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b82:	187b      	adds	r3, r7, r1
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2207      	movs	r2, #7
 8007b88:	4013      	ands	r3, r2
 8007b8a:	d04e      	beq.n	8007c2a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b8c:	187b      	adds	r3, r7, r1
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2201      	movs	r2, #1
 8007b92:	4013      	ands	r3, r2
 8007b94:	d010      	beq.n	8007bb8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8007b96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	d00b      	beq.n	8007bb8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2290      	movs	r2, #144	; 0x90
 8007bac:	589b      	ldr	r3, [r3, r2]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2190      	movs	r1, #144	; 0x90
 8007bb6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bb8:	2384      	movs	r3, #132	; 0x84
 8007bba:	18fb      	adds	r3, r7, r3
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d00f      	beq.n	8007be4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8007bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	4013      	ands	r3, r2
 8007bca:	d00b      	beq.n	8007be4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2290      	movs	r2, #144	; 0x90
 8007bd8:	589b      	ldr	r3, [r3, r2]
 8007bda:	2204      	movs	r2, #4
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2190      	movs	r1, #144	; 0x90
 8007be2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007be4:	2384      	movs	r3, #132	; 0x84
 8007be6:	18fb      	adds	r3, r7, r3
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2204      	movs	r2, #4
 8007bec:	4013      	ands	r3, r2
 8007bee:	d00f      	beq.n	8007c10 <UART_RxISR_16BIT_FIFOEN+0x124>
 8007bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	d00b      	beq.n	8007c10 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2290      	movs	r2, #144	; 0x90
 8007c04:	589b      	ldr	r3, [r3, r2]
 8007c06:	2202      	movs	r2, #2
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2190      	movs	r1, #144	; 0x90
 8007c0e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2290      	movs	r2, #144	; 0x90
 8007c14:	589b      	ldr	r3, [r3, r2]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d007      	beq.n	8007c2a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	f7fe fd93 	bl	8006748 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2290      	movs	r2, #144	; 0x90
 8007c26:	2100      	movs	r1, #0
 8007c28:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	225e      	movs	r2, #94	; 0x5e
 8007c2e:	5a9b      	ldrh	r3, [r3, r2]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d000      	beq.n	8007c38 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8007c36:	e098      	b.n	8007d6a <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c38:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c42:	2301      	movs	r3, #1
 8007c44:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c48:	f383 8810 	msr	PRIMASK, r3
}
 8007c4c:	46c0      	nop			; (mov r8, r8)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4974      	ldr	r1, [pc, #464]	; (8007e2c <UART_RxISR_16BIT_FIFOEN+0x340>)
 8007c5a:	400a      	ands	r2, r1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c60:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c64:	f383 8810 	msr	PRIMASK, r3
}
 8007c68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c74:	2301      	movs	r3, #1
 8007c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7a:	f383 8810 	msr	PRIMASK, r3
}
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4969      	ldr	r1, [pc, #420]	; (8007e30 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8007c8c:	400a      	ands	r2, r1
 8007c8e:	609a      	str	r2, [r3, #8]
 8007c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c92:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c96:	f383 8810 	msr	PRIMASK, r3
}
 8007c9a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	228c      	movs	r2, #140	; 0x8c
 8007ca0:	2120      	movs	r1, #32
 8007ca2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a5f      	ldr	r2, [pc, #380]	; (8007e34 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d01f      	beq.n	8007cfa <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	2380      	movs	r3, #128	; 0x80
 8007cc2:	041b      	lsls	r3, r3, #16
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	d018      	beq.n	8007cfa <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ccc:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd8:	f383 8810 	msr	PRIMASK, r3
}
 8007cdc:	46c0      	nop			; (mov r8, r8)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4953      	ldr	r1, [pc, #332]	; (8007e38 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8007cea:	400a      	ands	r2, r1
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	f383 8810 	msr	PRIMASK, r3
}
 8007cf8:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d12f      	bne.n	8007d62 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d08:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	663b      	str	r3, [r7, #96]	; 0x60
 8007d12:	2301      	movs	r3, #1
 8007d14:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	f383 8810 	msr	PRIMASK, r3
}
 8007d1c:	46c0      	nop			; (mov r8, r8)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2110      	movs	r1, #16
 8007d2a:	438a      	bics	r2, r1
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	f383 8810 	msr	PRIMASK, r3
}
 8007d38:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	2210      	movs	r2, #16
 8007d42:	4013      	ands	r3, r2
 8007d44:	2b10      	cmp	r3, #16
 8007d46:	d103      	bne.n	8007d50 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2210      	movs	r2, #16
 8007d4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	225c      	movs	r2, #92	; 0x5c
 8007d54:	5a9a      	ldrh	r2, [r3, r2]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	0011      	movs	r1, r2
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f7fe fcfc 	bl	8006758 <HAL_UARTEx_RxEventCallback>
 8007d60:	e003      	b.n	8007d6a <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	0018      	movs	r0, r3
 8007d66:	f7f9 fc0b 	bl	8001580 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d6a:	2376      	movs	r3, #118	; 0x76
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d006      	beq.n	8007d82 <UART_RxISR_16BIT_FIFOEN+0x296>
 8007d74:	2384      	movs	r3, #132	; 0x84
 8007d76:	18fb      	adds	r3, r7, r3
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	d000      	beq.n	8007d82 <UART_RxISR_16BIT_FIFOEN+0x296>
 8007d80:	e6d9      	b.n	8007b36 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d82:	205e      	movs	r0, #94	; 0x5e
 8007d84:	183b      	adds	r3, r7, r0
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	215e      	movs	r1, #94	; 0x5e
 8007d8a:	5a52      	ldrh	r2, [r2, r1]
 8007d8c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d8e:	0001      	movs	r1, r0
 8007d90:	187b      	adds	r3, r7, r1
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d044      	beq.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x336>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2268      	movs	r2, #104	; 0x68
 8007d9c:	5a9b      	ldrh	r3, [r3, r2]
 8007d9e:	187a      	adds	r2, r7, r1
 8007da0:	8812      	ldrh	r2, [r2, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d23d      	bcs.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007da6:	f3ef 8310 	mrs	r3, PRIMASK
 8007daa:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8007db0:	2301      	movs	r3, #1
 8007db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f383 8810 	msr	PRIMASK, r3
}
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689a      	ldr	r2, [r3, #8]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	491d      	ldr	r1, [pc, #116]	; (8007e3c <UART_RxISR_16BIT_FIFOEN+0x350>)
 8007dc8:	400a      	ands	r2, r1
 8007dca:	609a      	str	r2, [r3, #8]
 8007dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007dce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f383 8810 	msr	PRIMASK, r3
}
 8007dd6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a19      	ldr	r2, [pc, #100]	; (8007e40 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8007ddc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dde:	f3ef 8310 	mrs	r3, PRIMASK
 8007de2:	61bb      	str	r3, [r7, #24]
  return(result);
 8007de4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007de6:	657b      	str	r3, [r7, #84]	; 0x54
 8007de8:	2301      	movs	r3, #1
 8007dea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f383 8810 	msr	PRIMASK, r3
}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2120      	movs	r1, #32
 8007e00:	430a      	orrs	r2, r1
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	f383 8810 	msr	PRIMASK, r3
}
 8007e0e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e10:	e007      	b.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2108      	movs	r1, #8
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	619a      	str	r2, [r3, #24]
}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	46bd      	mov	sp, r7
 8007e26:	b022      	add	sp, #136	; 0x88
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	fffffeff 	.word	0xfffffeff
 8007e30:	effffffe 	.word	0xeffffffe
 8007e34:	40008000 	.word	0x40008000
 8007e38:	fbffffff 	.word	0xfbffffff
 8007e3c:	efffffff 	.word	0xefffffff
 8007e40:	080075e9 	.word	0x080075e9

08007e44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e4c:	46c0      	nop			; (mov r8, r8)
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	b002      	add	sp, #8
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e5c:	46c0      	nop			; (mov r8, r8)
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	b002      	add	sp, #8
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e6c:	46c0      	nop			; (mov r8, r8)
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	b002      	add	sp, #8
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2284      	movs	r2, #132	; 0x84
 8007e80:	5c9b      	ldrb	r3, [r3, r2]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d101      	bne.n	8007e8a <HAL_UARTEx_DisableFifoMode+0x16>
 8007e86:	2302      	movs	r3, #2
 8007e88:	e027      	b.n	8007eda <HAL_UARTEx_DisableFifoMode+0x66>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2284      	movs	r2, #132	; 0x84
 8007e8e:	2101      	movs	r1, #1
 8007e90:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2288      	movs	r2, #136	; 0x88
 8007e96:	2124      	movs	r1, #36	; 0x24
 8007e98:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2101      	movs	r1, #1
 8007eae:	438a      	bics	r2, r1
 8007eb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4a0b      	ldr	r2, [pc, #44]	; (8007ee4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2288      	movs	r2, #136	; 0x88
 8007ecc:	2120      	movs	r1, #32
 8007ece:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2284      	movs	r2, #132	; 0x84
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	0018      	movs	r0, r3
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b004      	add	sp, #16
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	46c0      	nop			; (mov r8, r8)
 8007ee4:	dfffffff 	.word	0xdfffffff

08007ee8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2284      	movs	r2, #132	; 0x84
 8007ef6:	5c9b      	ldrb	r3, [r3, r2]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e02e      	b.n	8007f5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2284      	movs	r2, #132	; 0x84
 8007f04:	2101      	movs	r1, #1
 8007f06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2288      	movs	r2, #136	; 0x88
 8007f0c:	2124      	movs	r1, #36	; 0x24
 8007f0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2101      	movs	r1, #1
 8007f24:	438a      	bics	r2, r1
 8007f26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	08d9      	lsrs	r1, r3, #3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f000 f854 	bl	8007fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2288      	movs	r2, #136	; 0x88
 8007f50:	2120      	movs	r1, #32
 8007f52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2284      	movs	r2, #132	; 0x84
 8007f58:	2100      	movs	r1, #0
 8007f5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	0018      	movs	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	b004      	add	sp, #16
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2284      	movs	r2, #132	; 0x84
 8007f76:	5c9b      	ldrb	r3, [r3, r2]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d101      	bne.n	8007f80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e02f      	b.n	8007fe0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2284      	movs	r2, #132	; 0x84
 8007f84:	2101      	movs	r1, #1
 8007f86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2288      	movs	r2, #136	; 0x88
 8007f8c:	2124      	movs	r1, #36	; 0x24
 8007f8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	438a      	bics	r2, r1
 8007fa6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	4a0e      	ldr	r2, [pc, #56]	; (8007fe8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	0019      	movs	r1, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	0018      	movs	r0, r3
 8007fc2:	f000 f813 	bl	8007fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2288      	movs	r2, #136	; 0x88
 8007fd2:	2120      	movs	r1, #32
 8007fd4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2284      	movs	r2, #132	; 0x84
 8007fda:	2100      	movs	r1, #0
 8007fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	b004      	add	sp, #16
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	f1ffffff 	.word	0xf1ffffff

08007fec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d108      	bne.n	800800e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	226a      	movs	r2, #106	; 0x6a
 8008000:	2101      	movs	r1, #1
 8008002:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2268      	movs	r2, #104	; 0x68
 8008008:	2101      	movs	r1, #1
 800800a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800800c:	e043      	b.n	8008096 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800800e:	260f      	movs	r6, #15
 8008010:	19bb      	adds	r3, r7, r6
 8008012:	2208      	movs	r2, #8
 8008014:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008016:	200e      	movs	r0, #14
 8008018:	183b      	adds	r3, r7, r0
 800801a:	2208      	movs	r2, #8
 800801c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	0e5b      	lsrs	r3, r3, #25
 8008026:	b2da      	uxtb	r2, r3
 8008028:	240d      	movs	r4, #13
 800802a:	193b      	adds	r3, r7, r4
 800802c:	2107      	movs	r1, #7
 800802e:	400a      	ands	r2, r1
 8008030:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	0f5b      	lsrs	r3, r3, #29
 800803a:	b2da      	uxtb	r2, r3
 800803c:	250c      	movs	r5, #12
 800803e:	197b      	adds	r3, r7, r5
 8008040:	2107      	movs	r1, #7
 8008042:	400a      	ands	r2, r1
 8008044:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008046:	183b      	adds	r3, r7, r0
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	197a      	adds	r2, r7, r5
 800804c:	7812      	ldrb	r2, [r2, #0]
 800804e:	4914      	ldr	r1, [pc, #80]	; (80080a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8008050:	5c8a      	ldrb	r2, [r1, r2]
 8008052:	435a      	muls	r2, r3
 8008054:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008056:	197b      	adds	r3, r7, r5
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <UARTEx_SetNbDataToProcess+0xb8>)
 800805c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800805e:	0019      	movs	r1, r3
 8008060:	f7f8 f8f6 	bl	8000250 <__divsi3>
 8008064:	0003      	movs	r3, r0
 8008066:	b299      	uxth	r1, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	226a      	movs	r2, #106	; 0x6a
 800806c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800806e:	19bb      	adds	r3, r7, r6
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	193a      	adds	r2, r7, r4
 8008074:	7812      	ldrb	r2, [r2, #0]
 8008076:	490a      	ldr	r1, [pc, #40]	; (80080a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8008078:	5c8a      	ldrb	r2, [r1, r2]
 800807a:	435a      	muls	r2, r3
 800807c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800807e:	193b      	adds	r3, r7, r4
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	4a08      	ldr	r2, [pc, #32]	; (80080a4 <UARTEx_SetNbDataToProcess+0xb8>)
 8008084:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008086:	0019      	movs	r1, r3
 8008088:	f7f8 f8e2 	bl	8000250 <__divsi3>
 800808c:	0003      	movs	r3, r0
 800808e:	b299      	uxth	r1, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2268      	movs	r2, #104	; 0x68
 8008094:	5299      	strh	r1, [r3, r2]
}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	46bd      	mov	sp, r7
 800809a:	b005      	add	sp, #20
 800809c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800809e:	46c0      	nop			; (mov r8, r8)
 80080a0:	08009268 	.word	0x08009268
 80080a4:	08009270 	.word	0x08009270

080080a8 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80080a8:	b590      	push	{r4, r7, lr}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af02      	add	r7, sp, #8
 80080ae:	0002      	movs	r2, r0
 80080b0:	1dfb      	adds	r3, r7, #7
 80080b2:	701a      	strb	r2, [r3, #0]
 80080b4:	1dbb      	adds	r3, r7, #6
 80080b6:	1c0a      	adds	r2, r1, #0
 80080b8:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 80080ba:	1dfb      	adds	r3, r7, #7
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	4a16      	ldr	r2, [pc, #88]	; (8008118 <I2C_LCD_ExpanderWrite+0x70>)
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	18d3      	adds	r3, r2, r3
 80080c4:	3301      	adds	r3, #1
 80080c6:	781a      	ldrb	r2, [r3, #0]
 80080c8:	1dbb      	adds	r3, r7, #6
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	240f      	movs	r4, #15
 80080d2:	193b      	adds	r3, r7, r4
 80080d4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 80080d6:	1dfb      	adds	r3, r7, #7
 80080d8:	781a      	ldrb	r2, [r3, #0]
 80080da:	4910      	ldr	r1, [pc, #64]	; (800811c <I2C_LCD_ExpanderWrite+0x74>)
 80080dc:	0013      	movs	r3, r2
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	189b      	adds	r3, r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	18cb      	adds	r3, r1, r3
 80080e6:	3304      	adds	r3, #4
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	1dfb      	adds	r3, r7, #7
 80080ec:	781a      	ldrb	r2, [r3, #0]
 80080ee:	490b      	ldr	r1, [pc, #44]	; (800811c <I2C_LCD_ExpanderWrite+0x74>)
 80080f0:	0013      	movs	r3, r2
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	189b      	adds	r3, r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	18cb      	adds	r3, r1, r3
 80080fa:	3308      	adds	r3, #8
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	18db      	adds	r3, r3, r3
 8008102:	b299      	uxth	r1, r3
 8008104:	193a      	adds	r2, r7, r4
 8008106:	2364      	movs	r3, #100	; 0x64
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	2301      	movs	r3, #1
 800810c:	f7fb f9fa 	bl	8003504 <HAL_I2C_Master_Transmit>
}
 8008110:	46c0      	nop			; (mov r8, r8)
 8008112:	46bd      	mov	sp, r7
 8008114:	b005      	add	sp, #20
 8008116:	bd90      	pop	{r4, r7, pc}
 8008118:	20000404 	.word	0x20000404
 800811c:	08009278 	.word	0x08009278

08008120 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8008120:	b590      	push	{r4, r7, lr}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	0002      	movs	r2, r0
 8008128:	1dfb      	adds	r3, r7, #7
 800812a:	701a      	strb	r2, [r3, #0]
 800812c:	1dbb      	adds	r3, r7, #6
 800812e:	1c0a      	adds	r2, r1, #0
 8008130:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8008132:	1dbb      	adds	r3, r7, #6
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2204      	movs	r2, #4
 8008138:	4313      	orrs	r3, r2
 800813a:	b2da      	uxtb	r2, r3
 800813c:	1dfb      	adds	r3, r7, #7
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	0011      	movs	r1, r2
 8008142:	0018      	movs	r0, r3
 8008144:	f7ff ffb0 	bl	80080a8 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8008148:	4b25      	ldr	r3, [pc, #148]	; (80081e0 <I2C_LCD_EnPulse+0xc0>)
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	4b25      	ldr	r3, [pc, #148]	; (80081e4 <I2C_LCD_EnPulse+0xc4>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4925      	ldr	r1, [pc, #148]	; (80081e8 <I2C_LCD_EnPulse+0xc8>)
 8008154:	0018      	movs	r0, r3
 8008156:	f7f7 fff1 	bl	800013c <__udivsi3>
 800815a:	0003      	movs	r3, r0
 800815c:	005c      	lsls	r4, r3, #1
 800815e:	4b21      	ldr	r3, [pc, #132]	; (80081e4 <I2C_LCD_EnPulse+0xc4>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4921      	ldr	r1, [pc, #132]	; (80081e8 <I2C_LCD_EnPulse+0xc8>)
 8008164:	0018      	movs	r0, r3
 8008166:	f7f7 ffe9 	bl	800013c <__udivsi3>
 800816a:	0003      	movs	r3, r0
 800816c:	085b      	lsrs	r3, r3, #1
 800816e:	1ae3      	subs	r3, r4, r3
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <I2C_LCD_EnPulse+0xc0>)
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	429a      	cmp	r2, r3
 800817e:	d8f8      	bhi.n	8008172 <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8008180:	1dbb      	adds	r3, r7, #6
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2204      	movs	r2, #4
 8008186:	4393      	bics	r3, r2
 8008188:	b2da      	uxtb	r2, r3
 800818a:	1dfb      	adds	r3, r7, #7
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	0011      	movs	r1, r2
 8008190:	0018      	movs	r0, r3
 8008192:	f7ff ff89 	bl	80080a8 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8008196:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <I2C_LCD_EnPulse+0xc0>)
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <I2C_LCD_EnPulse+0xc4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4911      	ldr	r1, [pc, #68]	; (80081e8 <I2C_LCD_EnPulse+0xc8>)
 80081a2:	0018      	movs	r0, r3
 80081a4:	f7f7 ffca 	bl	800013c <__udivsi3>
 80081a8:	0003      	movs	r3, r0
 80081aa:	001a      	movs	r2, r3
 80081ac:	2332      	movs	r3, #50	; 0x32
 80081ae:	4353      	muls	r3, r2
 80081b0:	001c      	movs	r4, r3
 80081b2:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <I2C_LCD_EnPulse+0xc4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	490c      	ldr	r1, [pc, #48]	; (80081e8 <I2C_LCD_EnPulse+0xc8>)
 80081b8:	0018      	movs	r0, r3
 80081ba:	f7f7 ffbf 	bl	800013c <__udivsi3>
 80081be:	0003      	movs	r3, r0
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	1ae3      	subs	r3, r4, r3
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <I2C_LCD_EnPulse+0xc0>)
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d8f8      	bhi.n	80081c6 <I2C_LCD_EnPulse+0xa6>
}
 80081d4:	46c0      	nop			; (mov r8, r8)
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	46bd      	mov	sp, r7
 80081da:	b007      	add	sp, #28
 80081dc:	bd90      	pop	{r4, r7, pc}
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	e000e010 	.word	0xe000e010
 80081e4:	2000000c 	.word	0x2000000c
 80081e8:	000f4240 	.word	0x000f4240

080081ec <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	0002      	movs	r2, r0
 80081f4:	1dfb      	adds	r3, r7, #7
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	1dbb      	adds	r3, r7, #6
 80081fa:	1c0a      	adds	r2, r1, #0
 80081fc:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 80081fe:	1dbb      	adds	r3, r7, #6
 8008200:	781a      	ldrb	r2, [r3, #0]
 8008202:	1dfb      	adds	r3, r7, #7
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	0011      	movs	r1, r2
 8008208:	0018      	movs	r0, r3
 800820a:	f7ff ff4d 	bl	80080a8 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 800820e:	1dbb      	adds	r3, r7, #6
 8008210:	781a      	ldrb	r2, [r3, #0]
 8008212:	1dfb      	adds	r3, r7, #7
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	0011      	movs	r1, r2
 8008218:	0018      	movs	r0, r3
 800821a:	f7ff ff81 	bl	8008120 <I2C_LCD_EnPulse>
}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	46bd      	mov	sp, r7
 8008222:	b002      	add	sp, #8
 8008224:	bd80      	pop	{r7, pc}

08008226 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8008226:	b590      	push	{r4, r7, lr}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	0004      	movs	r4, r0
 800822e:	0008      	movs	r0, r1
 8008230:	0011      	movs	r1, r2
 8008232:	1dfb      	adds	r3, r7, #7
 8008234:	1c22      	adds	r2, r4, #0
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	1dbb      	adds	r3, r7, #6
 800823a:	1c02      	adds	r2, r0, #0
 800823c:	701a      	strb	r2, [r3, #0]
 800823e:	1d7b      	adds	r3, r7, #5
 8008240:	1c0a      	adds	r2, r1, #0
 8008242:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8008244:	200f      	movs	r0, #15
 8008246:	183b      	adds	r3, r7, r0
 8008248:	1dba      	adds	r2, r7, #6
 800824a:	7812      	ldrb	r2, [r2, #0]
 800824c:	210f      	movs	r1, #15
 800824e:	438a      	bics	r2, r1
 8008250:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8008252:	1dbb      	adds	r3, r7, #6
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	011a      	lsls	r2, r3, #4
 8008258:	240e      	movs	r4, #14
 800825a:	193b      	adds	r3, r7, r4
 800825c:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 800825e:	183a      	adds	r2, r7, r0
 8008260:	1d7b      	adds	r3, r7, #5
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	4313      	orrs	r3, r2
 8008268:	b2da      	uxtb	r2, r3
 800826a:	1dfb      	adds	r3, r7, #7
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	0011      	movs	r1, r2
 8008270:	0018      	movs	r0, r3
 8008272:	f7ff ffbb 	bl	80081ec <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8008276:	193a      	adds	r2, r7, r4
 8008278:	1d7b      	adds	r3, r7, #5
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	4313      	orrs	r3, r2
 8008280:	b2da      	uxtb	r2, r3
 8008282:	1dfb      	adds	r3, r7, #7
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	0011      	movs	r1, r2
 8008288:	0018      	movs	r0, r3
 800828a:	f7ff ffaf 	bl	80081ec <I2C_LCD_Write4Bits>
}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	46bd      	mov	sp, r7
 8008292:	b005      	add	sp, #20
 8008294:	bd90      	pop	{r4, r7, pc}

08008296 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	0002      	movs	r2, r0
 800829e:	1dfb      	adds	r3, r7, #7
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	1dbb      	adds	r3, r7, #6
 80082a4:	1c0a      	adds	r2, r1, #0
 80082a6:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80082a8:	1dbb      	adds	r3, r7, #6
 80082aa:	7819      	ldrb	r1, [r3, #0]
 80082ac:	1dfb      	adds	r3, r7, #7
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2200      	movs	r2, #0
 80082b2:	0018      	movs	r0, r3
 80082b4:	f7ff ffb7 	bl	8008226 <I2C_LCD_Send>
}
 80082b8:	46c0      	nop			; (mov r8, r8)
 80082ba:	46bd      	mov	sp, r7
 80082bc:	b002      	add	sp, #8
 80082be:	bd80      	pop	{r7, pc}

080082c0 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	0002      	movs	r2, r0
 80082c8:	1dfb      	adds	r3, r7, #7
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	1dbb      	adds	r3, r7, #6
 80082ce:	1c0a      	adds	r2, r1, #0
 80082d0:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80082d2:	1dbb      	adds	r3, r7, #6
 80082d4:	7819      	ldrb	r1, [r3, #0]
 80082d6:	1dfb      	adds	r3, r7, #7
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2201      	movs	r2, #1
 80082dc:	0018      	movs	r0, r3
 80082de:	f7ff ffa2 	bl	8008226 <I2C_LCD_Send>
}
 80082e2:	46c0      	nop			; (mov r8, r8)
 80082e4:	46bd      	mov	sp, r7
 80082e6:	b002      	add	sp, #8
 80082e8:	bd80      	pop	{r7, pc}
	...

080082ec <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80082ec:	b590      	push	{r4, r7, lr}
 80082ee:	b08b      	sub	sp, #44	; 0x2c
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	0002      	movs	r2, r0
 80082f4:	1dfb      	adds	r3, r7, #7
 80082f6:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80082f8:	46c0      	nop			; (mov r8, r8)
 80082fa:	f7f9 fd5f 	bl	8001dbc <HAL_GetTick>
 80082fe:	0003      	movs	r3, r0
 8008300:	2b31      	cmp	r3, #49	; 0x31
 8008302:	d9fa      	bls.n	80082fa <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8008304:	1dfb      	adds	r3, r7, #7
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2130      	movs	r1, #48	; 0x30
 800830a:	0018      	movs	r0, r3
 800830c:	f7ff ffc3 	bl	8008296 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8008310:	2300      	movs	r3, #0
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
 8008314:	e025      	b.n	8008362 <I2C_LCD_Init+0x76>
 8008316:	4b57      	ldr	r3, [pc, #348]	; (8008474 <I2C_LCD_Init+0x188>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	4b56      	ldr	r3, [pc, #344]	; (8008478 <I2C_LCD_Init+0x18c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4956      	ldr	r1, [pc, #344]	; (800847c <I2C_LCD_Init+0x190>)
 8008322:	0018      	movs	r0, r3
 8008324:	f7f7 ff0a 	bl	800013c <__udivsi3>
 8008328:	0003      	movs	r3, r0
 800832a:	001a      	movs	r2, r3
 800832c:	0013      	movs	r3, r2
 800832e:	015b      	lsls	r3, r3, #5
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	189b      	adds	r3, r3, r2
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	001c      	movs	r4, r3
 800833a:	4b4f      	ldr	r3, [pc, #316]	; (8008478 <I2C_LCD_Init+0x18c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	494f      	ldr	r1, [pc, #316]	; (800847c <I2C_LCD_Init+0x190>)
 8008340:	0018      	movs	r0, r3
 8008342:	f7f7 fefb 	bl	800013c <__udivsi3>
 8008346:	0003      	movs	r3, r0
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	1ae3      	subs	r3, r4, r3
 800834c:	60bb      	str	r3, [r7, #8]
 800834e:	4b49      	ldr	r3, [pc, #292]	; (8008474 <I2C_LCD_Init+0x188>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	429a      	cmp	r2, r3
 800835a:	d8f8      	bhi.n	800834e <I2C_LCD_Init+0x62>
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	3301      	adds	r3, #1
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	2b04      	cmp	r3, #4
 8008366:	d9d6      	bls.n	8008316 <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8008368:	1dfb      	adds	r3, r7, #7
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2130      	movs	r1, #48	; 0x30
 800836e:	0018      	movs	r0, r3
 8008370:	f7ff ff91 	bl	8008296 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8008374:	2300      	movs	r3, #0
 8008376:	623b      	str	r3, [r7, #32]
 8008378:	e025      	b.n	80083c6 <I2C_LCD_Init+0xda>
 800837a:	4b3e      	ldr	r3, [pc, #248]	; (8008474 <I2C_LCD_Init+0x188>)
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	4b3d      	ldr	r3, [pc, #244]	; (8008478 <I2C_LCD_Init+0x18c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	493d      	ldr	r1, [pc, #244]	; (800847c <I2C_LCD_Init+0x190>)
 8008386:	0018      	movs	r0, r3
 8008388:	f7f7 fed8 	bl	800013c <__udivsi3>
 800838c:	0003      	movs	r3, r0
 800838e:	001a      	movs	r2, r3
 8008390:	0013      	movs	r3, r2
 8008392:	015b      	lsls	r3, r3, #5
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	189b      	adds	r3, r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	001c      	movs	r4, r3
 800839e:	4b36      	ldr	r3, [pc, #216]	; (8008478 <I2C_LCD_Init+0x18c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4936      	ldr	r1, [pc, #216]	; (800847c <I2C_LCD_Init+0x190>)
 80083a4:	0018      	movs	r0, r3
 80083a6:	f7f7 fec9 	bl	800013c <__udivsi3>
 80083aa:	0003      	movs	r3, r0
 80083ac:	085b      	lsrs	r3, r3, #1
 80083ae:	1ae3      	subs	r3, r4, r3
 80083b0:	613b      	str	r3, [r7, #16]
 80083b2:	4b30      	ldr	r3, [pc, #192]	; (8008474 <I2C_LCD_Init+0x188>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d8f8      	bhi.n	80083b2 <I2C_LCD_Init+0xc6>
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	3301      	adds	r3, #1
 80083c4:	623b      	str	r3, [r7, #32]
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d9d6      	bls.n	800837a <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80083cc:	1dfb      	adds	r3, r7, #7
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2130      	movs	r1, #48	; 0x30
 80083d2:	0018      	movs	r0, r3
 80083d4:	f7ff ff5f 	bl	8008296 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80083d8:	4b26      	ldr	r3, [pc, #152]	; (8008474 <I2C_LCD_Init+0x188>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	61fb      	str	r3, [r7, #28]
 80083de:	4b26      	ldr	r3, [pc, #152]	; (8008478 <I2C_LCD_Init+0x18c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4926      	ldr	r1, [pc, #152]	; (800847c <I2C_LCD_Init+0x190>)
 80083e4:	0018      	movs	r0, r3
 80083e6:	f7f7 fea9 	bl	800013c <__udivsi3>
 80083ea:	0003      	movs	r3, r0
 80083ec:	001a      	movs	r2, r3
 80083ee:	2396      	movs	r3, #150	; 0x96
 80083f0:	4353      	muls	r3, r2
 80083f2:	001c      	movs	r4, r3
 80083f4:	4b20      	ldr	r3, [pc, #128]	; (8008478 <I2C_LCD_Init+0x18c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4920      	ldr	r1, [pc, #128]	; (800847c <I2C_LCD_Init+0x190>)
 80083fa:	0018      	movs	r0, r3
 80083fc:	f7f7 fe9e 	bl	800013c <__udivsi3>
 8008400:	0003      	movs	r3, r0
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	1ae3      	subs	r3, r4, r3
 8008406:	61bb      	str	r3, [r7, #24]
 8008408:	4b1a      	ldr	r3, [pc, #104]	; (8008474 <I2C_LCD_Init+0x188>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	69fa      	ldr	r2, [r7, #28]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	429a      	cmp	r2, r3
 8008414:	d8f8      	bhi.n	8008408 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8008416:	1dfb      	adds	r3, r7, #7
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2102      	movs	r1, #2
 800841c:	0018      	movs	r0, r3
 800841e:	f7ff ff3a 	bl	8008296 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8008422:	1dfb      	adds	r3, r7, #7
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2128      	movs	r1, #40	; 0x28
 8008428:	0018      	movs	r0, r3
 800842a:	f7ff ff34 	bl	8008296 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 800842e:	1dfb      	adds	r3, r7, #7
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	210c      	movs	r1, #12
 8008434:	0018      	movs	r0, r3
 8008436:	f7ff ff2e 	bl	8008296 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 800843a:	1dfb      	adds	r3, r7, #7
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2106      	movs	r1, #6
 8008440:	0018      	movs	r0, r3
 8008442:	f7ff ff28 	bl	8008296 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8008446:	1dfb      	adds	r3, r7, #7
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	4b0d      	ldr	r3, [pc, #52]	; (8008480 <I2C_LCD_Init+0x194>)
 800844c:	0052      	lsls	r2, r2, #1
 800844e:	2104      	movs	r1, #4
 8008450:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8008452:	1dfb      	adds	r3, r7, #7
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	4a0a      	ldr	r2, [pc, #40]	; (8008480 <I2C_LCD_Init+0x194>)
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	18d3      	adds	r3, r2, r3
 800845c:	3301      	adds	r3, #1
 800845e:	2208      	movs	r2, #8
 8008460:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8008462:	1dfb      	adds	r3, r7, #7
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	0018      	movs	r0, r3
 8008468:	f000 f80c 	bl	8008484 <I2C_LCD_Clear>
}
 800846c:	46c0      	nop			; (mov r8, r8)
 800846e:	46bd      	mov	sp, r7
 8008470:	b00b      	add	sp, #44	; 0x2c
 8008472:	bd90      	pop	{r4, r7, pc}
 8008474:	e000e010 	.word	0xe000e010
 8008478:	2000000c 	.word	0x2000000c
 800847c:	000f4240 	.word	0x000f4240
 8008480:	20000404 	.word	0x20000404

08008484 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8008484:	b590      	push	{r4, r7, lr}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	0002      	movs	r2, r0
 800848c:	1dfb      	adds	r3, r7, #7
 800848e:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8008490:	1dfb      	adds	r3, r7, #7
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2101      	movs	r1, #1
 8008496:	0018      	movs	r0, r3
 8008498:	f7ff fefd 	bl	8008296 <I2C_LCD_Cmd>
    DELAY_MS(2);
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	e025      	b.n	80084ee <I2C_LCD_Clear+0x6a>
 80084a2:	4b17      	ldr	r3, [pc, #92]	; (8008500 <I2C_LCD_Clear+0x7c>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	4b16      	ldr	r3, [pc, #88]	; (8008504 <I2C_LCD_Clear+0x80>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4916      	ldr	r1, [pc, #88]	; (8008508 <I2C_LCD_Clear+0x84>)
 80084ae:	0018      	movs	r0, r3
 80084b0:	f7f7 fe44 	bl	800013c <__udivsi3>
 80084b4:	0003      	movs	r3, r0
 80084b6:	001a      	movs	r2, r3
 80084b8:	0013      	movs	r3, r2
 80084ba:	015b      	lsls	r3, r3, #5
 80084bc:	1a9b      	subs	r3, r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	189b      	adds	r3, r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	001c      	movs	r4, r3
 80084c6:	4b0f      	ldr	r3, [pc, #60]	; (8008504 <I2C_LCD_Clear+0x80>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	490f      	ldr	r1, [pc, #60]	; (8008508 <I2C_LCD_Clear+0x84>)
 80084cc:	0018      	movs	r0, r3
 80084ce:	f7f7 fe35 	bl	800013c <__udivsi3>
 80084d2:	0003      	movs	r3, r0
 80084d4:	085b      	lsrs	r3, r3, #1
 80084d6:	1ae3      	subs	r3, r4, r3
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <I2C_LCD_Clear+0x7c>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d8f8      	bhi.n	80084da <I2C_LCD_Clear+0x56>
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	3301      	adds	r3, #1
 80084ec:	617b      	str	r3, [r7, #20]
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d9d6      	bls.n	80084a2 <I2C_LCD_Clear+0x1e>
}
 80084f4:	46c0      	nop			; (mov r8, r8)
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b007      	add	sp, #28
 80084fc:	bd90      	pop	{r4, r7, pc}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	e000e010 	.word	0xe000e010
 8008504:	2000000c 	.word	0x2000000c
 8008508:	000f4240 	.word	0x000f4240

0800850c <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 800850c:	b590      	push	{r4, r7, lr}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	0004      	movs	r4, r0
 8008514:	0008      	movs	r0, r1
 8008516:	0011      	movs	r1, r2
 8008518:	1dfb      	adds	r3, r7, #7
 800851a:	1c22      	adds	r2, r4, #0
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	1dbb      	adds	r3, r7, #6
 8008520:	1c02      	adds	r2, r0, #0
 8008522:	701a      	strb	r2, [r3, #0]
 8008524:	1d7b      	adds	r3, r7, #5
 8008526:	1c0a      	adds	r2, r1, #0
 8008528:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800852a:	2308      	movs	r3, #8
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	4a1d      	ldr	r2, [pc, #116]	; (80085a4 <I2C_LCD_SetCursor+0x98>)
 8008530:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008532:	c313      	stmia	r3!, {r0, r1, r4}
 8008534:	6812      	ldr	r2, [r2, #0]
 8008536:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8008538:	1dfb      	adds	r3, r7, #7
 800853a:	781a      	ldrb	r2, [r3, #0]
 800853c:	491a      	ldr	r1, [pc, #104]	; (80085a8 <I2C_LCD_SetCursor+0x9c>)
 800853e:	0013      	movs	r3, r2
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	189b      	adds	r3, r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	18cb      	adds	r3, r1, r3
 8008548:	330a      	adds	r3, #10
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	1d7a      	adds	r2, r7, #5
 800854e:	7812      	ldrb	r2, [r2, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d90c      	bls.n	800856e <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8008554:	1dfb      	adds	r3, r7, #7
 8008556:	781a      	ldrb	r2, [r3, #0]
 8008558:	4913      	ldr	r1, [pc, #76]	; (80085a8 <I2C_LCD_SetCursor+0x9c>)
 800855a:	0013      	movs	r3, r2
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	189b      	adds	r3, r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	18cb      	adds	r3, r1, r3
 8008564:	330a      	adds	r3, #10
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	1d7b      	adds	r3, r7, #5
 800856a:	3a01      	subs	r2, #1
 800856c:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 800856e:	1d7b      	adds	r3, r7, #5
 8008570:	781a      	ldrb	r2, [r3, #0]
 8008572:	2308      	movs	r3, #8
 8008574:	18fb      	adds	r3, r7, r3
 8008576:	0092      	lsls	r2, r2, #2
 8008578:	58d3      	ldr	r3, [r2, r3]
 800857a:	b2da      	uxtb	r2, r3
 800857c:	1dbb      	adds	r3, r7, #6
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	18d3      	adds	r3, r2, r3
 8008582:	b2db      	uxtb	r3, r3
 8008584:	b25b      	sxtb	r3, r3
 8008586:	2280      	movs	r2, #128	; 0x80
 8008588:	4252      	negs	r2, r2
 800858a:	4313      	orrs	r3, r2
 800858c:	b25b      	sxtb	r3, r3
 800858e:	b2da      	uxtb	r2, r3
 8008590:	1dfb      	adds	r3, r7, #7
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	0011      	movs	r1, r2
 8008596:	0018      	movs	r0, r3
 8008598:	f7ff fe7d 	bl	8008296 <I2C_LCD_Cmd>
}
 800859c:	46c0      	nop			; (mov r8, r8)
 800859e:	46bd      	mov	sp, r7
 80085a0:	b007      	add	sp, #28
 80085a2:	bd90      	pop	{r4, r7, pc}
 80085a4:	0800918c 	.word	0x0800918c
 80085a8:	08009278 	.word	0x08009278

080085ac <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	0002      	movs	r2, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	1dfb      	adds	r3, r7, #7
 80085b8:	701a      	strb	r2, [r3, #0]
    while (*Str)
 80085ba:	e009      	b.n	80085d0 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	603a      	str	r2, [r7, #0]
 80085c2:	781a      	ldrb	r2, [r3, #0]
 80085c4:	1dfb      	adds	r3, r7, #7
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	0011      	movs	r1, r2
 80085ca:	0018      	movs	r0, r3
 80085cc:	f7ff fe78 	bl	80082c0 <I2C_LCD_Data>
    while (*Str)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1f1      	bne.n	80085bc <I2C_LCD_WriteString+0x10>
    }
}
 80085d8:	46c0      	nop			; (mov r8, r8)
 80085da:	46c0      	nop			; (mov r8, r8)
 80085dc:	46bd      	mov	sp, r7
 80085de:	b002      	add	sp, #8
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <I2C_LCD_Display>:
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_NOBACKLIGHT;
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
}

void I2C_LCD_Display(uint8_t I2C_LCD_InstanceIndex)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	0002      	movs	r2, r0
 80085ec:	1dfb      	adds	r3, r7, #7
 80085ee:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_DISPLAYON;
 80085f0:	1dfb      	adds	r3, r7, #7
 80085f2:	781a      	ldrb	r2, [r3, #0]
 80085f4:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <I2C_LCD_Display+0x4c>)
 80085f6:	0052      	lsls	r2, r2, #1
 80085f8:	5cd3      	ldrb	r3, [r2, r3]
 80085fa:	1dfa      	adds	r2, r7, #7
 80085fc:	7812      	ldrb	r2, [r2, #0]
 80085fe:	2104      	movs	r1, #4
 8008600:	430b      	orrs	r3, r1
 8008602:	b2d9      	uxtb	r1, r3
 8008604:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <I2C_LCD_Display+0x4c>)
 8008606:	0052      	lsls	r2, r2, #1
 8008608:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 800860a:	1dfb      	adds	r3, r7, #7
 800860c:	781a      	ldrb	r2, [r3, #0]
 800860e:	4b08      	ldr	r3, [pc, #32]	; (8008630 <I2C_LCD_Display+0x4c>)
 8008610:	0052      	lsls	r2, r2, #1
 8008612:	5cd3      	ldrb	r3, [r2, r3]
 8008614:	2208      	movs	r2, #8
 8008616:	4313      	orrs	r3, r2
 8008618:	b2da      	uxtb	r2, r3
 800861a:	1dfb      	adds	r3, r7, #7
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	0011      	movs	r1, r2
 8008620:	0018      	movs	r0, r3
 8008622:	f7ff fe38 	bl	8008296 <I2C_LCD_Cmd>
}
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	46bd      	mov	sp, r7
 800862a:	b002      	add	sp, #8
 800862c:	bd80      	pop	{r7, pc}
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	20000404 	.word	0x20000404

08008634 <I2C_LCD_NoDisplay>:

void I2C_LCD_NoDisplay(uint8_t I2C_LCD_InstanceIndex)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	0002      	movs	r2, r0
 800863c:	1dfb      	adds	r3, r7, #7
 800863e:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl &= ~LCD_DISPLAYON;
 8008640:	1dfb      	adds	r3, r7, #7
 8008642:	781a      	ldrb	r2, [r3, #0]
 8008644:	4b0e      	ldr	r3, [pc, #56]	; (8008680 <I2C_LCD_NoDisplay+0x4c>)
 8008646:	0052      	lsls	r2, r2, #1
 8008648:	5cd3      	ldrb	r3, [r2, r3]
 800864a:	1dfa      	adds	r2, r7, #7
 800864c:	7812      	ldrb	r2, [r2, #0]
 800864e:	2104      	movs	r1, #4
 8008650:	438b      	bics	r3, r1
 8008652:	b2d9      	uxtb	r1, r3
 8008654:	4b0a      	ldr	r3, [pc, #40]	; (8008680 <I2C_LCD_NoDisplay+0x4c>)
 8008656:	0052      	lsls	r2, r2, #1
 8008658:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 800865a:	1dfb      	adds	r3, r7, #7
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	4b08      	ldr	r3, [pc, #32]	; (8008680 <I2C_LCD_NoDisplay+0x4c>)
 8008660:	0052      	lsls	r2, r2, #1
 8008662:	5cd3      	ldrb	r3, [r2, r3]
 8008664:	2208      	movs	r2, #8
 8008666:	4313      	orrs	r3, r2
 8008668:	b2da      	uxtb	r2, r3
 800866a:	1dfb      	adds	r3, r7, #7
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	0011      	movs	r1, r2
 8008670:	0018      	movs	r0, r3
 8008672:	f7ff fe10 	bl	8008296 <I2C_LCD_Cmd>
}
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	46bd      	mov	sp, r7
 800867a:	b002      	add	sp, #8
 800867c:	bd80      	pop	{r7, pc}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	20000404 	.word	0x20000404

08008684 <siprintf>:
 8008684:	b40e      	push	{r1, r2, r3}
 8008686:	b500      	push	{lr}
 8008688:	490b      	ldr	r1, [pc, #44]	; (80086b8 <siprintf+0x34>)
 800868a:	b09c      	sub	sp, #112	; 0x70
 800868c:	ab1d      	add	r3, sp, #116	; 0x74
 800868e:	9002      	str	r0, [sp, #8]
 8008690:	9006      	str	r0, [sp, #24]
 8008692:	9107      	str	r1, [sp, #28]
 8008694:	9104      	str	r1, [sp, #16]
 8008696:	4809      	ldr	r0, [pc, #36]	; (80086bc <siprintf+0x38>)
 8008698:	4909      	ldr	r1, [pc, #36]	; (80086c0 <siprintf+0x3c>)
 800869a:	cb04      	ldmia	r3!, {r2}
 800869c:	9105      	str	r1, [sp, #20]
 800869e:	6800      	ldr	r0, [r0, #0]
 80086a0:	a902      	add	r1, sp, #8
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	f000 f9a2 	bl	80089ec <_svfiprintf_r>
 80086a8:	2200      	movs	r2, #0
 80086aa:	9b02      	ldr	r3, [sp, #8]
 80086ac:	701a      	strb	r2, [r3, #0]
 80086ae:	b01c      	add	sp, #112	; 0x70
 80086b0:	bc08      	pop	{r3}
 80086b2:	b003      	add	sp, #12
 80086b4:	4718      	bx	r3
 80086b6:	46c0      	nop			; (mov r8, r8)
 80086b8:	7fffffff 	.word	0x7fffffff
 80086bc:	20000064 	.word	0x20000064
 80086c0:	ffff0208 	.word	0xffff0208

080086c4 <memset>:
 80086c4:	0003      	movs	r3, r0
 80086c6:	1882      	adds	r2, r0, r2
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d100      	bne.n	80086ce <memset+0xa>
 80086cc:	4770      	bx	lr
 80086ce:	7019      	strb	r1, [r3, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	e7f9      	b.n	80086c8 <memset+0x4>

080086d4 <__errno>:
 80086d4:	4b01      	ldr	r3, [pc, #4]	; (80086dc <__errno+0x8>)
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	4770      	bx	lr
 80086da:	46c0      	nop			; (mov r8, r8)
 80086dc:	20000064 	.word	0x20000064

080086e0 <__libc_init_array>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	2600      	movs	r6, #0
 80086e4:	4c0c      	ldr	r4, [pc, #48]	; (8008718 <__libc_init_array+0x38>)
 80086e6:	4d0d      	ldr	r5, [pc, #52]	; (800871c <__libc_init_array+0x3c>)
 80086e8:	1b64      	subs	r4, r4, r5
 80086ea:	10a4      	asrs	r4, r4, #2
 80086ec:	42a6      	cmp	r6, r4
 80086ee:	d109      	bne.n	8008704 <__libc_init_array+0x24>
 80086f0:	2600      	movs	r6, #0
 80086f2:	f000 fc6d 	bl	8008fd0 <_init>
 80086f6:	4c0a      	ldr	r4, [pc, #40]	; (8008720 <__libc_init_array+0x40>)
 80086f8:	4d0a      	ldr	r5, [pc, #40]	; (8008724 <__libc_init_array+0x44>)
 80086fa:	1b64      	subs	r4, r4, r5
 80086fc:	10a4      	asrs	r4, r4, #2
 80086fe:	42a6      	cmp	r6, r4
 8008700:	d105      	bne.n	800870e <__libc_init_array+0x2e>
 8008702:	bd70      	pop	{r4, r5, r6, pc}
 8008704:	00b3      	lsls	r3, r6, #2
 8008706:	58eb      	ldr	r3, [r5, r3]
 8008708:	4798      	blx	r3
 800870a:	3601      	adds	r6, #1
 800870c:	e7ee      	b.n	80086ec <__libc_init_array+0xc>
 800870e:	00b3      	lsls	r3, r6, #2
 8008710:	58eb      	ldr	r3, [r5, r3]
 8008712:	4798      	blx	r3
 8008714:	3601      	adds	r6, #1
 8008716:	e7f2      	b.n	80086fe <__libc_init_array+0x1e>
 8008718:	080092c0 	.word	0x080092c0
 800871c:	080092c0 	.word	0x080092c0
 8008720:	080092c4 	.word	0x080092c4
 8008724:	080092c0 	.word	0x080092c0

08008728 <__retarget_lock_acquire_recursive>:
 8008728:	4770      	bx	lr

0800872a <__retarget_lock_release_recursive>:
 800872a:	4770      	bx	lr

0800872c <_free_r>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	0005      	movs	r5, r0
 8008730:	2900      	cmp	r1, #0
 8008732:	d010      	beq.n	8008756 <_free_r+0x2a>
 8008734:	1f0c      	subs	r4, r1, #4
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	da00      	bge.n	800873e <_free_r+0x12>
 800873c:	18e4      	adds	r4, r4, r3
 800873e:	0028      	movs	r0, r5
 8008740:	f000 f8e2 	bl	8008908 <__malloc_lock>
 8008744:	4a1d      	ldr	r2, [pc, #116]	; (80087bc <_free_r+0x90>)
 8008746:	6813      	ldr	r3, [r2, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <_free_r+0x2c>
 800874c:	6063      	str	r3, [r4, #4]
 800874e:	6014      	str	r4, [r2, #0]
 8008750:	0028      	movs	r0, r5
 8008752:	f000 f8e1 	bl	8008918 <__malloc_unlock>
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	42a3      	cmp	r3, r4
 800875a:	d908      	bls.n	800876e <_free_r+0x42>
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	1821      	adds	r1, r4, r0
 8008760:	428b      	cmp	r3, r1
 8008762:	d1f3      	bne.n	800874c <_free_r+0x20>
 8008764:	6819      	ldr	r1, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	1809      	adds	r1, r1, r0
 800876a:	6021      	str	r1, [r4, #0]
 800876c:	e7ee      	b.n	800874c <_free_r+0x20>
 800876e:	001a      	movs	r2, r3
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <_free_r+0x4e>
 8008776:	42a3      	cmp	r3, r4
 8008778:	d9f9      	bls.n	800876e <_free_r+0x42>
 800877a:	6811      	ldr	r1, [r2, #0]
 800877c:	1850      	adds	r0, r2, r1
 800877e:	42a0      	cmp	r0, r4
 8008780:	d10b      	bne.n	800879a <_free_r+0x6e>
 8008782:	6820      	ldr	r0, [r4, #0]
 8008784:	1809      	adds	r1, r1, r0
 8008786:	1850      	adds	r0, r2, r1
 8008788:	6011      	str	r1, [r2, #0]
 800878a:	4283      	cmp	r3, r0
 800878c:	d1e0      	bne.n	8008750 <_free_r+0x24>
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	1841      	adds	r1, r0, r1
 8008794:	6011      	str	r1, [r2, #0]
 8008796:	6053      	str	r3, [r2, #4]
 8008798:	e7da      	b.n	8008750 <_free_r+0x24>
 800879a:	42a0      	cmp	r0, r4
 800879c:	d902      	bls.n	80087a4 <_free_r+0x78>
 800879e:	230c      	movs	r3, #12
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	e7d5      	b.n	8008750 <_free_r+0x24>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	1821      	adds	r1, r4, r0
 80087a8:	428b      	cmp	r3, r1
 80087aa:	d103      	bne.n	80087b4 <_free_r+0x88>
 80087ac:	6819      	ldr	r1, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	1809      	adds	r1, r1, r0
 80087b2:	6021      	str	r1, [r4, #0]
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	6054      	str	r4, [r2, #4]
 80087b8:	e7ca      	b.n	8008750 <_free_r+0x24>
 80087ba:	46c0      	nop			; (mov r8, r8)
 80087bc:	20000548 	.word	0x20000548

080087c0 <sbrk_aligned>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	4e0f      	ldr	r6, [pc, #60]	; (8008800 <sbrk_aligned+0x40>)
 80087c4:	000d      	movs	r5, r1
 80087c6:	6831      	ldr	r1, [r6, #0]
 80087c8:	0004      	movs	r4, r0
 80087ca:	2900      	cmp	r1, #0
 80087cc:	d102      	bne.n	80087d4 <sbrk_aligned+0x14>
 80087ce:	f000 fba1 	bl	8008f14 <_sbrk_r>
 80087d2:	6030      	str	r0, [r6, #0]
 80087d4:	0029      	movs	r1, r5
 80087d6:	0020      	movs	r0, r4
 80087d8:	f000 fb9c 	bl	8008f14 <_sbrk_r>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d00a      	beq.n	80087f6 <sbrk_aligned+0x36>
 80087e0:	2303      	movs	r3, #3
 80087e2:	1cc5      	adds	r5, r0, #3
 80087e4:	439d      	bics	r5, r3
 80087e6:	42a8      	cmp	r0, r5
 80087e8:	d007      	beq.n	80087fa <sbrk_aligned+0x3a>
 80087ea:	1a29      	subs	r1, r5, r0
 80087ec:	0020      	movs	r0, r4
 80087ee:	f000 fb91 	bl	8008f14 <_sbrk_r>
 80087f2:	3001      	adds	r0, #1
 80087f4:	d101      	bne.n	80087fa <sbrk_aligned+0x3a>
 80087f6:	2501      	movs	r5, #1
 80087f8:	426d      	negs	r5, r5
 80087fa:	0028      	movs	r0, r5
 80087fc:	bd70      	pop	{r4, r5, r6, pc}
 80087fe:	46c0      	nop			; (mov r8, r8)
 8008800:	2000054c 	.word	0x2000054c

08008804 <_malloc_r>:
 8008804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008806:	2203      	movs	r2, #3
 8008808:	1ccb      	adds	r3, r1, #3
 800880a:	4393      	bics	r3, r2
 800880c:	3308      	adds	r3, #8
 800880e:	0006      	movs	r6, r0
 8008810:	001f      	movs	r7, r3
 8008812:	2b0c      	cmp	r3, #12
 8008814:	d238      	bcs.n	8008888 <_malloc_r+0x84>
 8008816:	270c      	movs	r7, #12
 8008818:	42b9      	cmp	r1, r7
 800881a:	d837      	bhi.n	800888c <_malloc_r+0x88>
 800881c:	0030      	movs	r0, r6
 800881e:	f000 f873 	bl	8008908 <__malloc_lock>
 8008822:	4b38      	ldr	r3, [pc, #224]	; (8008904 <_malloc_r+0x100>)
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	001c      	movs	r4, r3
 800882a:	2c00      	cmp	r4, #0
 800882c:	d133      	bne.n	8008896 <_malloc_r+0x92>
 800882e:	0039      	movs	r1, r7
 8008830:	0030      	movs	r0, r6
 8008832:	f7ff ffc5 	bl	80087c0 <sbrk_aligned>
 8008836:	0004      	movs	r4, r0
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d15e      	bne.n	80088fa <_malloc_r+0xf6>
 800883c:	9b00      	ldr	r3, [sp, #0]
 800883e:	681c      	ldr	r4, [r3, #0]
 8008840:	0025      	movs	r5, r4
 8008842:	2d00      	cmp	r5, #0
 8008844:	d14e      	bne.n	80088e4 <_malloc_r+0xe0>
 8008846:	2c00      	cmp	r4, #0
 8008848:	d051      	beq.n	80088ee <_malloc_r+0xea>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	0029      	movs	r1, r5
 800884e:	18e3      	adds	r3, r4, r3
 8008850:	0030      	movs	r0, r6
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	f000 fb5e 	bl	8008f14 <_sbrk_r>
 8008858:	9b01      	ldr	r3, [sp, #4]
 800885a:	4283      	cmp	r3, r0
 800885c:	d147      	bne.n	80088ee <_malloc_r+0xea>
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	0030      	movs	r0, r6
 8008862:	1aff      	subs	r7, r7, r3
 8008864:	0039      	movs	r1, r7
 8008866:	f7ff ffab 	bl	80087c0 <sbrk_aligned>
 800886a:	3001      	adds	r0, #1
 800886c:	d03f      	beq.n	80088ee <_malloc_r+0xea>
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	19db      	adds	r3, r3, r7
 8008872:	6023      	str	r3, [r4, #0]
 8008874:	9b00      	ldr	r3, [sp, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d040      	beq.n	80088fe <_malloc_r+0xfa>
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	42a2      	cmp	r2, r4
 8008880:	d133      	bne.n	80088ea <_malloc_r+0xe6>
 8008882:	2200      	movs	r2, #0
 8008884:	605a      	str	r2, [r3, #4]
 8008886:	e014      	b.n	80088b2 <_malloc_r+0xae>
 8008888:	2b00      	cmp	r3, #0
 800888a:	dac5      	bge.n	8008818 <_malloc_r+0x14>
 800888c:	230c      	movs	r3, #12
 800888e:	2500      	movs	r5, #0
 8008890:	6033      	str	r3, [r6, #0]
 8008892:	0028      	movs	r0, r5
 8008894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008896:	6821      	ldr	r1, [r4, #0]
 8008898:	1bc9      	subs	r1, r1, r7
 800889a:	d420      	bmi.n	80088de <_malloc_r+0xda>
 800889c:	290b      	cmp	r1, #11
 800889e:	d918      	bls.n	80088d2 <_malloc_r+0xce>
 80088a0:	19e2      	adds	r2, r4, r7
 80088a2:	6027      	str	r7, [r4, #0]
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	d112      	bne.n	80088ce <_malloc_r+0xca>
 80088a8:	9b00      	ldr	r3, [sp, #0]
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	6011      	str	r1, [r2, #0]
 80088b0:	6053      	str	r3, [r2, #4]
 80088b2:	0030      	movs	r0, r6
 80088b4:	0025      	movs	r5, r4
 80088b6:	f000 f82f 	bl	8008918 <__malloc_unlock>
 80088ba:	2207      	movs	r2, #7
 80088bc:	350b      	adds	r5, #11
 80088be:	1d23      	adds	r3, r4, #4
 80088c0:	4395      	bics	r5, r2
 80088c2:	1aea      	subs	r2, r5, r3
 80088c4:	429d      	cmp	r5, r3
 80088c6:	d0e4      	beq.n	8008892 <_malloc_r+0x8e>
 80088c8:	1b5b      	subs	r3, r3, r5
 80088ca:	50a3      	str	r3, [r4, r2]
 80088cc:	e7e1      	b.n	8008892 <_malloc_r+0x8e>
 80088ce:	605a      	str	r2, [r3, #4]
 80088d0:	e7ec      	b.n	80088ac <_malloc_r+0xa8>
 80088d2:	6862      	ldr	r2, [r4, #4]
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	d1d5      	bne.n	8008884 <_malloc_r+0x80>
 80088d8:	9b00      	ldr	r3, [sp, #0]
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e7e9      	b.n	80088b2 <_malloc_r+0xae>
 80088de:	0023      	movs	r3, r4
 80088e0:	6864      	ldr	r4, [r4, #4]
 80088e2:	e7a2      	b.n	800882a <_malloc_r+0x26>
 80088e4:	002c      	movs	r4, r5
 80088e6:	686d      	ldr	r5, [r5, #4]
 80088e8:	e7ab      	b.n	8008842 <_malloc_r+0x3e>
 80088ea:	0013      	movs	r3, r2
 80088ec:	e7c4      	b.n	8008878 <_malloc_r+0x74>
 80088ee:	230c      	movs	r3, #12
 80088f0:	0030      	movs	r0, r6
 80088f2:	6033      	str	r3, [r6, #0]
 80088f4:	f000 f810 	bl	8008918 <__malloc_unlock>
 80088f8:	e7cb      	b.n	8008892 <_malloc_r+0x8e>
 80088fa:	6027      	str	r7, [r4, #0]
 80088fc:	e7d9      	b.n	80088b2 <_malloc_r+0xae>
 80088fe:	605b      	str	r3, [r3, #4]
 8008900:	deff      	udf	#255	; 0xff
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	20000548 	.word	0x20000548

08008908 <__malloc_lock>:
 8008908:	b510      	push	{r4, lr}
 800890a:	4802      	ldr	r0, [pc, #8]	; (8008914 <__malloc_lock+0xc>)
 800890c:	f7ff ff0c 	bl	8008728 <__retarget_lock_acquire_recursive>
 8008910:	bd10      	pop	{r4, pc}
 8008912:	46c0      	nop			; (mov r8, r8)
 8008914:	20000544 	.word	0x20000544

08008918 <__malloc_unlock>:
 8008918:	b510      	push	{r4, lr}
 800891a:	4802      	ldr	r0, [pc, #8]	; (8008924 <__malloc_unlock+0xc>)
 800891c:	f7ff ff05 	bl	800872a <__retarget_lock_release_recursive>
 8008920:	bd10      	pop	{r4, pc}
 8008922:	46c0      	nop			; (mov r8, r8)
 8008924:	20000544 	.word	0x20000544

08008928 <__ssputs_r>:
 8008928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800892a:	b085      	sub	sp, #20
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	9203      	str	r2, [sp, #12]
 8008930:	688e      	ldr	r6, [r1, #8]
 8008932:	9a01      	ldr	r2, [sp, #4]
 8008934:	0007      	movs	r7, r0
 8008936:	000c      	movs	r4, r1
 8008938:	680b      	ldr	r3, [r1, #0]
 800893a:	4296      	cmp	r6, r2
 800893c:	d831      	bhi.n	80089a2 <__ssputs_r+0x7a>
 800893e:	898a      	ldrh	r2, [r1, #12]
 8008940:	2190      	movs	r1, #144	; 0x90
 8008942:	00c9      	lsls	r1, r1, #3
 8008944:	420a      	tst	r2, r1
 8008946:	d029      	beq.n	800899c <__ssputs_r+0x74>
 8008948:	2003      	movs	r0, #3
 800894a:	6921      	ldr	r1, [r4, #16]
 800894c:	1a5b      	subs	r3, r3, r1
 800894e:	9302      	str	r3, [sp, #8]
 8008950:	6963      	ldr	r3, [r4, #20]
 8008952:	4343      	muls	r3, r0
 8008954:	0fdd      	lsrs	r5, r3, #31
 8008956:	18ed      	adds	r5, r5, r3
 8008958:	9b01      	ldr	r3, [sp, #4]
 800895a:	9802      	ldr	r0, [sp, #8]
 800895c:	3301      	adds	r3, #1
 800895e:	181b      	adds	r3, r3, r0
 8008960:	106d      	asrs	r5, r5, #1
 8008962:	42ab      	cmp	r3, r5
 8008964:	d900      	bls.n	8008968 <__ssputs_r+0x40>
 8008966:	001d      	movs	r5, r3
 8008968:	0552      	lsls	r2, r2, #21
 800896a:	d529      	bpl.n	80089c0 <__ssputs_r+0x98>
 800896c:	0029      	movs	r1, r5
 800896e:	0038      	movs	r0, r7
 8008970:	f7ff ff48 	bl	8008804 <_malloc_r>
 8008974:	1e06      	subs	r6, r0, #0
 8008976:	d02d      	beq.n	80089d4 <__ssputs_r+0xac>
 8008978:	9a02      	ldr	r2, [sp, #8]
 800897a:	6921      	ldr	r1, [r4, #16]
 800897c:	f000 fae7 	bl	8008f4e <memcpy>
 8008980:	89a2      	ldrh	r2, [r4, #12]
 8008982:	4b19      	ldr	r3, [pc, #100]	; (80089e8 <__ssputs_r+0xc0>)
 8008984:	401a      	ands	r2, r3
 8008986:	2380      	movs	r3, #128	; 0x80
 8008988:	4313      	orrs	r3, r2
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	6126      	str	r6, [r4, #16]
 8008990:	18f6      	adds	r6, r6, r3
 8008992:	6026      	str	r6, [r4, #0]
 8008994:	6165      	str	r5, [r4, #20]
 8008996:	9e01      	ldr	r6, [sp, #4]
 8008998:	1aed      	subs	r5, r5, r3
 800899a:	60a5      	str	r5, [r4, #8]
 800899c:	9b01      	ldr	r3, [sp, #4]
 800899e:	429e      	cmp	r6, r3
 80089a0:	d900      	bls.n	80089a4 <__ssputs_r+0x7c>
 80089a2:	9e01      	ldr	r6, [sp, #4]
 80089a4:	0032      	movs	r2, r6
 80089a6:	9903      	ldr	r1, [sp, #12]
 80089a8:	6820      	ldr	r0, [r4, #0]
 80089aa:	f000 fa9f 	bl	8008eec <memmove>
 80089ae:	2000      	movs	r0, #0
 80089b0:	68a3      	ldr	r3, [r4, #8]
 80089b2:	1b9b      	subs	r3, r3, r6
 80089b4:	60a3      	str	r3, [r4, #8]
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	199b      	adds	r3, r3, r6
 80089ba:	6023      	str	r3, [r4, #0]
 80089bc:	b005      	add	sp, #20
 80089be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c0:	002a      	movs	r2, r5
 80089c2:	0038      	movs	r0, r7
 80089c4:	f000 facc 	bl	8008f60 <_realloc_r>
 80089c8:	1e06      	subs	r6, r0, #0
 80089ca:	d1df      	bne.n	800898c <__ssputs_r+0x64>
 80089cc:	0038      	movs	r0, r7
 80089ce:	6921      	ldr	r1, [r4, #16]
 80089d0:	f7ff feac 	bl	800872c <_free_r>
 80089d4:	230c      	movs	r3, #12
 80089d6:	2001      	movs	r0, #1
 80089d8:	603b      	str	r3, [r7, #0]
 80089da:	89a2      	ldrh	r2, [r4, #12]
 80089dc:	3334      	adds	r3, #52	; 0x34
 80089de:	4313      	orrs	r3, r2
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	4240      	negs	r0, r0
 80089e4:	e7ea      	b.n	80089bc <__ssputs_r+0x94>
 80089e6:	46c0      	nop			; (mov r8, r8)
 80089e8:	fffffb7f 	.word	0xfffffb7f

080089ec <_svfiprintf_r>:
 80089ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ee:	b0a1      	sub	sp, #132	; 0x84
 80089f0:	9003      	str	r0, [sp, #12]
 80089f2:	001d      	movs	r5, r3
 80089f4:	898b      	ldrh	r3, [r1, #12]
 80089f6:	000f      	movs	r7, r1
 80089f8:	0016      	movs	r6, r2
 80089fa:	061b      	lsls	r3, r3, #24
 80089fc:	d511      	bpl.n	8008a22 <_svfiprintf_r+0x36>
 80089fe:	690b      	ldr	r3, [r1, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10e      	bne.n	8008a22 <_svfiprintf_r+0x36>
 8008a04:	2140      	movs	r1, #64	; 0x40
 8008a06:	f7ff fefd 	bl	8008804 <_malloc_r>
 8008a0a:	6038      	str	r0, [r7, #0]
 8008a0c:	6138      	str	r0, [r7, #16]
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d105      	bne.n	8008a1e <_svfiprintf_r+0x32>
 8008a12:	230c      	movs	r3, #12
 8008a14:	9a03      	ldr	r2, [sp, #12]
 8008a16:	3801      	subs	r0, #1
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	b021      	add	sp, #132	; 0x84
 8008a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a1e:	2340      	movs	r3, #64	; 0x40
 8008a20:	617b      	str	r3, [r7, #20]
 8008a22:	2300      	movs	r3, #0
 8008a24:	ac08      	add	r4, sp, #32
 8008a26:	6163      	str	r3, [r4, #20]
 8008a28:	3320      	adds	r3, #32
 8008a2a:	7663      	strb	r3, [r4, #25]
 8008a2c:	3310      	adds	r3, #16
 8008a2e:	76a3      	strb	r3, [r4, #26]
 8008a30:	9507      	str	r5, [sp, #28]
 8008a32:	0035      	movs	r5, r6
 8008a34:	782b      	ldrb	r3, [r5, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <_svfiprintf_r+0x52>
 8008a3a:	2b25      	cmp	r3, #37	; 0x25
 8008a3c:	d148      	bne.n	8008ad0 <_svfiprintf_r+0xe4>
 8008a3e:	1bab      	subs	r3, r5, r6
 8008a40:	9305      	str	r3, [sp, #20]
 8008a42:	42b5      	cmp	r5, r6
 8008a44:	d00b      	beq.n	8008a5e <_svfiprintf_r+0x72>
 8008a46:	0032      	movs	r2, r6
 8008a48:	0039      	movs	r1, r7
 8008a4a:	9803      	ldr	r0, [sp, #12]
 8008a4c:	f7ff ff6c 	bl	8008928 <__ssputs_r>
 8008a50:	3001      	adds	r0, #1
 8008a52:	d100      	bne.n	8008a56 <_svfiprintf_r+0x6a>
 8008a54:	e0af      	b.n	8008bb6 <_svfiprintf_r+0x1ca>
 8008a56:	6963      	ldr	r3, [r4, #20]
 8008a58:	9a05      	ldr	r2, [sp, #20]
 8008a5a:	189b      	adds	r3, r3, r2
 8008a5c:	6163      	str	r3, [r4, #20]
 8008a5e:	782b      	ldrb	r3, [r5, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d100      	bne.n	8008a66 <_svfiprintf_r+0x7a>
 8008a64:	e0a7      	b.n	8008bb6 <_svfiprintf_r+0x1ca>
 8008a66:	2201      	movs	r2, #1
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4252      	negs	r2, r2
 8008a6c:	6062      	str	r2, [r4, #4]
 8008a6e:	a904      	add	r1, sp, #16
 8008a70:	3254      	adds	r2, #84	; 0x54
 8008a72:	1852      	adds	r2, r2, r1
 8008a74:	1c6e      	adds	r6, r5, #1
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	60e3      	str	r3, [r4, #12]
 8008a7a:	60a3      	str	r3, [r4, #8]
 8008a7c:	7013      	strb	r3, [r2, #0]
 8008a7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a80:	4b55      	ldr	r3, [pc, #340]	; (8008bd8 <_svfiprintf_r+0x1ec>)
 8008a82:	2205      	movs	r2, #5
 8008a84:	0018      	movs	r0, r3
 8008a86:	7831      	ldrb	r1, [r6, #0]
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	f000 fa55 	bl	8008f38 <memchr>
 8008a8e:	1c75      	adds	r5, r6, #1
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d11f      	bne.n	8008ad4 <_svfiprintf_r+0xe8>
 8008a94:	6822      	ldr	r2, [r4, #0]
 8008a96:	06d3      	lsls	r3, r2, #27
 8008a98:	d504      	bpl.n	8008aa4 <_svfiprintf_r+0xb8>
 8008a9a:	2353      	movs	r3, #83	; 0x53
 8008a9c:	a904      	add	r1, sp, #16
 8008a9e:	185b      	adds	r3, r3, r1
 8008aa0:	2120      	movs	r1, #32
 8008aa2:	7019      	strb	r1, [r3, #0]
 8008aa4:	0713      	lsls	r3, r2, #28
 8008aa6:	d504      	bpl.n	8008ab2 <_svfiprintf_r+0xc6>
 8008aa8:	2353      	movs	r3, #83	; 0x53
 8008aaa:	a904      	add	r1, sp, #16
 8008aac:	185b      	adds	r3, r3, r1
 8008aae:	212b      	movs	r1, #43	; 0x2b
 8008ab0:	7019      	strb	r1, [r3, #0]
 8008ab2:	7833      	ldrb	r3, [r6, #0]
 8008ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab6:	d016      	beq.n	8008ae6 <_svfiprintf_r+0xfa>
 8008ab8:	0035      	movs	r5, r6
 8008aba:	2100      	movs	r1, #0
 8008abc:	200a      	movs	r0, #10
 8008abe:	68e3      	ldr	r3, [r4, #12]
 8008ac0:	782a      	ldrb	r2, [r5, #0]
 8008ac2:	1c6e      	adds	r6, r5, #1
 8008ac4:	3a30      	subs	r2, #48	; 0x30
 8008ac6:	2a09      	cmp	r2, #9
 8008ac8:	d94e      	bls.n	8008b68 <_svfiprintf_r+0x17c>
 8008aca:	2900      	cmp	r1, #0
 8008acc:	d111      	bne.n	8008af2 <_svfiprintf_r+0x106>
 8008ace:	e017      	b.n	8008b00 <_svfiprintf_r+0x114>
 8008ad0:	3501      	adds	r5, #1
 8008ad2:	e7af      	b.n	8008a34 <_svfiprintf_r+0x48>
 8008ad4:	9b05      	ldr	r3, [sp, #20]
 8008ad6:	6822      	ldr	r2, [r4, #0]
 8008ad8:	1ac0      	subs	r0, r0, r3
 8008ada:	2301      	movs	r3, #1
 8008adc:	4083      	lsls	r3, r0
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	002e      	movs	r6, r5
 8008ae2:	6023      	str	r3, [r4, #0]
 8008ae4:	e7cc      	b.n	8008a80 <_svfiprintf_r+0x94>
 8008ae6:	9b07      	ldr	r3, [sp, #28]
 8008ae8:	1d19      	adds	r1, r3, #4
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	9107      	str	r1, [sp, #28]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	db01      	blt.n	8008af6 <_svfiprintf_r+0x10a>
 8008af2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af4:	e004      	b.n	8008b00 <_svfiprintf_r+0x114>
 8008af6:	425b      	negs	r3, r3
 8008af8:	60e3      	str	r3, [r4, #12]
 8008afa:	2302      	movs	r3, #2
 8008afc:	4313      	orrs	r3, r2
 8008afe:	6023      	str	r3, [r4, #0]
 8008b00:	782b      	ldrb	r3, [r5, #0]
 8008b02:	2b2e      	cmp	r3, #46	; 0x2e
 8008b04:	d10a      	bne.n	8008b1c <_svfiprintf_r+0x130>
 8008b06:	786b      	ldrb	r3, [r5, #1]
 8008b08:	2b2a      	cmp	r3, #42	; 0x2a
 8008b0a:	d135      	bne.n	8008b78 <_svfiprintf_r+0x18c>
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	3502      	adds	r5, #2
 8008b10:	1d1a      	adds	r2, r3, #4
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	9207      	str	r2, [sp, #28]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	db2b      	blt.n	8008b72 <_svfiprintf_r+0x186>
 8008b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1c:	4e2f      	ldr	r6, [pc, #188]	; (8008bdc <_svfiprintf_r+0x1f0>)
 8008b1e:	2203      	movs	r2, #3
 8008b20:	0030      	movs	r0, r6
 8008b22:	7829      	ldrb	r1, [r5, #0]
 8008b24:	f000 fa08 	bl	8008f38 <memchr>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d006      	beq.n	8008b3a <_svfiprintf_r+0x14e>
 8008b2c:	2340      	movs	r3, #64	; 0x40
 8008b2e:	1b80      	subs	r0, r0, r6
 8008b30:	4083      	lsls	r3, r0
 8008b32:	6822      	ldr	r2, [r4, #0]
 8008b34:	3501      	adds	r5, #1
 8008b36:	4313      	orrs	r3, r2
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	7829      	ldrb	r1, [r5, #0]
 8008b3c:	2206      	movs	r2, #6
 8008b3e:	4828      	ldr	r0, [pc, #160]	; (8008be0 <_svfiprintf_r+0x1f4>)
 8008b40:	1c6e      	adds	r6, r5, #1
 8008b42:	7621      	strb	r1, [r4, #24]
 8008b44:	f000 f9f8 	bl	8008f38 <memchr>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d03c      	beq.n	8008bc6 <_svfiprintf_r+0x1da>
 8008b4c:	4b25      	ldr	r3, [pc, #148]	; (8008be4 <_svfiprintf_r+0x1f8>)
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d125      	bne.n	8008b9e <_svfiprintf_r+0x1b2>
 8008b52:	2207      	movs	r2, #7
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	3307      	adds	r3, #7
 8008b58:	4393      	bics	r3, r2
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	9307      	str	r3, [sp, #28]
 8008b5e:	6963      	ldr	r3, [r4, #20]
 8008b60:	9a04      	ldr	r2, [sp, #16]
 8008b62:	189b      	adds	r3, r3, r2
 8008b64:	6163      	str	r3, [r4, #20]
 8008b66:	e764      	b.n	8008a32 <_svfiprintf_r+0x46>
 8008b68:	4343      	muls	r3, r0
 8008b6a:	0035      	movs	r5, r6
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	189b      	adds	r3, r3, r2
 8008b70:	e7a6      	b.n	8008ac0 <_svfiprintf_r+0xd4>
 8008b72:	2301      	movs	r3, #1
 8008b74:	425b      	negs	r3, r3
 8008b76:	e7d0      	b.n	8008b1a <_svfiprintf_r+0x12e>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	200a      	movs	r0, #10
 8008b7c:	001a      	movs	r2, r3
 8008b7e:	3501      	adds	r5, #1
 8008b80:	6063      	str	r3, [r4, #4]
 8008b82:	7829      	ldrb	r1, [r5, #0]
 8008b84:	1c6e      	adds	r6, r5, #1
 8008b86:	3930      	subs	r1, #48	; 0x30
 8008b88:	2909      	cmp	r1, #9
 8008b8a:	d903      	bls.n	8008b94 <_svfiprintf_r+0x1a8>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0c5      	beq.n	8008b1c <_svfiprintf_r+0x130>
 8008b90:	9209      	str	r2, [sp, #36]	; 0x24
 8008b92:	e7c3      	b.n	8008b1c <_svfiprintf_r+0x130>
 8008b94:	4342      	muls	r2, r0
 8008b96:	0035      	movs	r5, r6
 8008b98:	2301      	movs	r3, #1
 8008b9a:	1852      	adds	r2, r2, r1
 8008b9c:	e7f1      	b.n	8008b82 <_svfiprintf_r+0x196>
 8008b9e:	aa07      	add	r2, sp, #28
 8008ba0:	9200      	str	r2, [sp, #0]
 8008ba2:	0021      	movs	r1, r4
 8008ba4:	003a      	movs	r2, r7
 8008ba6:	4b10      	ldr	r3, [pc, #64]	; (8008be8 <_svfiprintf_r+0x1fc>)
 8008ba8:	9803      	ldr	r0, [sp, #12]
 8008baa:	e000      	b.n	8008bae <_svfiprintf_r+0x1c2>
 8008bac:	bf00      	nop
 8008bae:	9004      	str	r0, [sp, #16]
 8008bb0:	9b04      	ldr	r3, [sp, #16]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	d1d3      	bne.n	8008b5e <_svfiprintf_r+0x172>
 8008bb6:	89bb      	ldrh	r3, [r7, #12]
 8008bb8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008bba:	065b      	lsls	r3, r3, #25
 8008bbc:	d400      	bmi.n	8008bc0 <_svfiprintf_r+0x1d4>
 8008bbe:	e72c      	b.n	8008a1a <_svfiprintf_r+0x2e>
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	4240      	negs	r0, r0
 8008bc4:	e729      	b.n	8008a1a <_svfiprintf_r+0x2e>
 8008bc6:	aa07      	add	r2, sp, #28
 8008bc8:	9200      	str	r2, [sp, #0]
 8008bca:	0021      	movs	r1, r4
 8008bcc:	003a      	movs	r2, r7
 8008bce:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <_svfiprintf_r+0x1fc>)
 8008bd0:	9803      	ldr	r0, [sp, #12]
 8008bd2:	f000 f87b 	bl	8008ccc <_printf_i>
 8008bd6:	e7ea      	b.n	8008bae <_svfiprintf_r+0x1c2>
 8008bd8:	08009284 	.word	0x08009284
 8008bdc:	0800928a 	.word	0x0800928a
 8008be0:	0800928e 	.word	0x0800928e
 8008be4:	00000000 	.word	0x00000000
 8008be8:	08008929 	.word	0x08008929

08008bec <_printf_common>:
 8008bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bee:	0016      	movs	r6, r2
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	688a      	ldr	r2, [r1, #8]
 8008bf4:	690b      	ldr	r3, [r1, #16]
 8008bf6:	000c      	movs	r4, r1
 8008bf8:	9000      	str	r0, [sp, #0]
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	da00      	bge.n	8008c00 <_printf_common+0x14>
 8008bfe:	0013      	movs	r3, r2
 8008c00:	0022      	movs	r2, r4
 8008c02:	6033      	str	r3, [r6, #0]
 8008c04:	3243      	adds	r2, #67	; 0x43
 8008c06:	7812      	ldrb	r2, [r2, #0]
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	d001      	beq.n	8008c10 <_printf_common+0x24>
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	6033      	str	r3, [r6, #0]
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	069b      	lsls	r3, r3, #26
 8008c14:	d502      	bpl.n	8008c1c <_printf_common+0x30>
 8008c16:	6833      	ldr	r3, [r6, #0]
 8008c18:	3302      	adds	r3, #2
 8008c1a:	6033      	str	r3, [r6, #0]
 8008c1c:	6822      	ldr	r2, [r4, #0]
 8008c1e:	2306      	movs	r3, #6
 8008c20:	0015      	movs	r5, r2
 8008c22:	401d      	ands	r5, r3
 8008c24:	421a      	tst	r2, r3
 8008c26:	d027      	beq.n	8008c78 <_printf_common+0x8c>
 8008c28:	0023      	movs	r3, r4
 8008c2a:	3343      	adds	r3, #67	; 0x43
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	1e5a      	subs	r2, r3, #1
 8008c30:	4193      	sbcs	r3, r2
 8008c32:	6822      	ldr	r2, [r4, #0]
 8008c34:	0692      	lsls	r2, r2, #26
 8008c36:	d430      	bmi.n	8008c9a <_printf_common+0xae>
 8008c38:	0022      	movs	r2, r4
 8008c3a:	9901      	ldr	r1, [sp, #4]
 8008c3c:	9800      	ldr	r0, [sp, #0]
 8008c3e:	9d08      	ldr	r5, [sp, #32]
 8008c40:	3243      	adds	r2, #67	; 0x43
 8008c42:	47a8      	blx	r5
 8008c44:	3001      	adds	r0, #1
 8008c46:	d025      	beq.n	8008c94 <_printf_common+0xa8>
 8008c48:	2206      	movs	r2, #6
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	2500      	movs	r5, #0
 8008c4e:	4013      	ands	r3, r2
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d105      	bne.n	8008c60 <_printf_common+0x74>
 8008c54:	6833      	ldr	r3, [r6, #0]
 8008c56:	68e5      	ldr	r5, [r4, #12]
 8008c58:	1aed      	subs	r5, r5, r3
 8008c5a:	43eb      	mvns	r3, r5
 8008c5c:	17db      	asrs	r3, r3, #31
 8008c5e:	401d      	ands	r5, r3
 8008c60:	68a3      	ldr	r3, [r4, #8]
 8008c62:	6922      	ldr	r2, [r4, #16]
 8008c64:	4293      	cmp	r3, r2
 8008c66:	dd01      	ble.n	8008c6c <_printf_common+0x80>
 8008c68:	1a9b      	subs	r3, r3, r2
 8008c6a:	18ed      	adds	r5, r5, r3
 8008c6c:	2600      	movs	r6, #0
 8008c6e:	42b5      	cmp	r5, r6
 8008c70:	d120      	bne.n	8008cb4 <_printf_common+0xc8>
 8008c72:	2000      	movs	r0, #0
 8008c74:	e010      	b.n	8008c98 <_printf_common+0xac>
 8008c76:	3501      	adds	r5, #1
 8008c78:	68e3      	ldr	r3, [r4, #12]
 8008c7a:	6832      	ldr	r2, [r6, #0]
 8008c7c:	1a9b      	subs	r3, r3, r2
 8008c7e:	42ab      	cmp	r3, r5
 8008c80:	ddd2      	ble.n	8008c28 <_printf_common+0x3c>
 8008c82:	0022      	movs	r2, r4
 8008c84:	2301      	movs	r3, #1
 8008c86:	9901      	ldr	r1, [sp, #4]
 8008c88:	9800      	ldr	r0, [sp, #0]
 8008c8a:	9f08      	ldr	r7, [sp, #32]
 8008c8c:	3219      	adds	r2, #25
 8008c8e:	47b8      	blx	r7
 8008c90:	3001      	adds	r0, #1
 8008c92:	d1f0      	bne.n	8008c76 <_printf_common+0x8a>
 8008c94:	2001      	movs	r0, #1
 8008c96:	4240      	negs	r0, r0
 8008c98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c9a:	2030      	movs	r0, #48	; 0x30
 8008c9c:	18e1      	adds	r1, r4, r3
 8008c9e:	3143      	adds	r1, #67	; 0x43
 8008ca0:	7008      	strb	r0, [r1, #0]
 8008ca2:	0021      	movs	r1, r4
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	3145      	adds	r1, #69	; 0x45
 8008ca8:	7809      	ldrb	r1, [r1, #0]
 8008caa:	18a2      	adds	r2, r4, r2
 8008cac:	3243      	adds	r2, #67	; 0x43
 8008cae:	3302      	adds	r3, #2
 8008cb0:	7011      	strb	r1, [r2, #0]
 8008cb2:	e7c1      	b.n	8008c38 <_printf_common+0x4c>
 8008cb4:	0022      	movs	r2, r4
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	9901      	ldr	r1, [sp, #4]
 8008cba:	9800      	ldr	r0, [sp, #0]
 8008cbc:	9f08      	ldr	r7, [sp, #32]
 8008cbe:	321a      	adds	r2, #26
 8008cc0:	47b8      	blx	r7
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d0e6      	beq.n	8008c94 <_printf_common+0xa8>
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7d1      	b.n	8008c6e <_printf_common+0x82>
	...

08008ccc <_printf_i>:
 8008ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cce:	b08b      	sub	sp, #44	; 0x2c
 8008cd0:	9206      	str	r2, [sp, #24]
 8008cd2:	000a      	movs	r2, r1
 8008cd4:	3243      	adds	r2, #67	; 0x43
 8008cd6:	9307      	str	r3, [sp, #28]
 8008cd8:	9005      	str	r0, [sp, #20]
 8008cda:	9204      	str	r2, [sp, #16]
 8008cdc:	7e0a      	ldrb	r2, [r1, #24]
 8008cde:	000c      	movs	r4, r1
 8008ce0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ce2:	2a78      	cmp	r2, #120	; 0x78
 8008ce4:	d809      	bhi.n	8008cfa <_printf_i+0x2e>
 8008ce6:	2a62      	cmp	r2, #98	; 0x62
 8008ce8:	d80b      	bhi.n	8008d02 <_printf_i+0x36>
 8008cea:	2a00      	cmp	r2, #0
 8008cec:	d100      	bne.n	8008cf0 <_printf_i+0x24>
 8008cee:	e0be      	b.n	8008e6e <_printf_i+0x1a2>
 8008cf0:	497c      	ldr	r1, [pc, #496]	; (8008ee4 <_printf_i+0x218>)
 8008cf2:	9103      	str	r1, [sp, #12]
 8008cf4:	2a58      	cmp	r2, #88	; 0x58
 8008cf6:	d100      	bne.n	8008cfa <_printf_i+0x2e>
 8008cf8:	e093      	b.n	8008e22 <_printf_i+0x156>
 8008cfa:	0026      	movs	r6, r4
 8008cfc:	3642      	adds	r6, #66	; 0x42
 8008cfe:	7032      	strb	r2, [r6, #0]
 8008d00:	e022      	b.n	8008d48 <_printf_i+0x7c>
 8008d02:	0010      	movs	r0, r2
 8008d04:	3863      	subs	r0, #99	; 0x63
 8008d06:	2815      	cmp	r0, #21
 8008d08:	d8f7      	bhi.n	8008cfa <_printf_i+0x2e>
 8008d0a:	f7f7 fa0d 	bl	8000128 <__gnu_thumb1_case_shi>
 8008d0e:	0016      	.short	0x0016
 8008d10:	fff6001f 	.word	0xfff6001f
 8008d14:	fff6fff6 	.word	0xfff6fff6
 8008d18:	001ffff6 	.word	0x001ffff6
 8008d1c:	fff6fff6 	.word	0xfff6fff6
 8008d20:	fff6fff6 	.word	0xfff6fff6
 8008d24:	003600a3 	.word	0x003600a3
 8008d28:	fff60083 	.word	0xfff60083
 8008d2c:	00b4fff6 	.word	0x00b4fff6
 8008d30:	0036fff6 	.word	0x0036fff6
 8008d34:	fff6fff6 	.word	0xfff6fff6
 8008d38:	0087      	.short	0x0087
 8008d3a:	0026      	movs	r6, r4
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	3642      	adds	r6, #66	; 0x42
 8008d40:	1d11      	adds	r1, r2, #4
 8008d42:	6019      	str	r1, [r3, #0]
 8008d44:	6813      	ldr	r3, [r2, #0]
 8008d46:	7033      	strb	r3, [r6, #0]
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0a2      	b.n	8008e92 <_printf_i+0x1c6>
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	6809      	ldr	r1, [r1, #0]
 8008d50:	1d02      	adds	r2, r0, #4
 8008d52:	060d      	lsls	r5, r1, #24
 8008d54:	d50b      	bpl.n	8008d6e <_printf_i+0xa2>
 8008d56:	6805      	ldr	r5, [r0, #0]
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	2d00      	cmp	r5, #0
 8008d5c:	da03      	bge.n	8008d66 <_printf_i+0x9a>
 8008d5e:	232d      	movs	r3, #45	; 0x2d
 8008d60:	9a04      	ldr	r2, [sp, #16]
 8008d62:	426d      	negs	r5, r5
 8008d64:	7013      	strb	r3, [r2, #0]
 8008d66:	4b5f      	ldr	r3, [pc, #380]	; (8008ee4 <_printf_i+0x218>)
 8008d68:	270a      	movs	r7, #10
 8008d6a:	9303      	str	r3, [sp, #12]
 8008d6c:	e01b      	b.n	8008da6 <_printf_i+0xda>
 8008d6e:	6805      	ldr	r5, [r0, #0]
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	0649      	lsls	r1, r1, #25
 8008d74:	d5f1      	bpl.n	8008d5a <_printf_i+0x8e>
 8008d76:	b22d      	sxth	r5, r5
 8008d78:	e7ef      	b.n	8008d5a <_printf_i+0x8e>
 8008d7a:	680d      	ldr	r5, [r1, #0]
 8008d7c:	6819      	ldr	r1, [r3, #0]
 8008d7e:	1d08      	adds	r0, r1, #4
 8008d80:	6018      	str	r0, [r3, #0]
 8008d82:	062e      	lsls	r6, r5, #24
 8008d84:	d501      	bpl.n	8008d8a <_printf_i+0xbe>
 8008d86:	680d      	ldr	r5, [r1, #0]
 8008d88:	e003      	b.n	8008d92 <_printf_i+0xc6>
 8008d8a:	066d      	lsls	r5, r5, #25
 8008d8c:	d5fb      	bpl.n	8008d86 <_printf_i+0xba>
 8008d8e:	680d      	ldr	r5, [r1, #0]
 8008d90:	b2ad      	uxth	r5, r5
 8008d92:	4b54      	ldr	r3, [pc, #336]	; (8008ee4 <_printf_i+0x218>)
 8008d94:	2708      	movs	r7, #8
 8008d96:	9303      	str	r3, [sp, #12]
 8008d98:	2a6f      	cmp	r2, #111	; 0x6f
 8008d9a:	d000      	beq.n	8008d9e <_printf_i+0xd2>
 8008d9c:	3702      	adds	r7, #2
 8008d9e:	0023      	movs	r3, r4
 8008da0:	2200      	movs	r2, #0
 8008da2:	3343      	adds	r3, #67	; 0x43
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	6863      	ldr	r3, [r4, #4]
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	db03      	blt.n	8008db6 <_printf_i+0xea>
 8008dae:	2104      	movs	r1, #4
 8008db0:	6822      	ldr	r2, [r4, #0]
 8008db2:	438a      	bics	r2, r1
 8008db4:	6022      	str	r2, [r4, #0]
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	d102      	bne.n	8008dc0 <_printf_i+0xf4>
 8008dba:	9e04      	ldr	r6, [sp, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00c      	beq.n	8008dda <_printf_i+0x10e>
 8008dc0:	9e04      	ldr	r6, [sp, #16]
 8008dc2:	0028      	movs	r0, r5
 8008dc4:	0039      	movs	r1, r7
 8008dc6:	f7f7 fa3f 	bl	8000248 <__aeabi_uidivmod>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	3e01      	subs	r6, #1
 8008dce:	5c5b      	ldrb	r3, [r3, r1]
 8008dd0:	7033      	strb	r3, [r6, #0]
 8008dd2:	002b      	movs	r3, r5
 8008dd4:	0005      	movs	r5, r0
 8008dd6:	429f      	cmp	r7, r3
 8008dd8:	d9f3      	bls.n	8008dc2 <_printf_i+0xf6>
 8008dda:	2f08      	cmp	r7, #8
 8008ddc:	d109      	bne.n	8008df2 <_printf_i+0x126>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	07db      	lsls	r3, r3, #31
 8008de2:	d506      	bpl.n	8008df2 <_printf_i+0x126>
 8008de4:	6862      	ldr	r2, [r4, #4]
 8008de6:	6923      	ldr	r3, [r4, #16]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	dc02      	bgt.n	8008df2 <_printf_i+0x126>
 8008dec:	2330      	movs	r3, #48	; 0x30
 8008dee:	3e01      	subs	r6, #1
 8008df0:	7033      	strb	r3, [r6, #0]
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	1b9b      	subs	r3, r3, r6
 8008df6:	6123      	str	r3, [r4, #16]
 8008df8:	9b07      	ldr	r3, [sp, #28]
 8008dfa:	0021      	movs	r1, r4
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	9805      	ldr	r0, [sp, #20]
 8008e00:	9b06      	ldr	r3, [sp, #24]
 8008e02:	aa09      	add	r2, sp, #36	; 0x24
 8008e04:	f7ff fef2 	bl	8008bec <_printf_common>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d147      	bne.n	8008e9c <_printf_i+0x1d0>
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	4240      	negs	r0, r0
 8008e10:	b00b      	add	sp, #44	; 0x2c
 8008e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e14:	2220      	movs	r2, #32
 8008e16:	6809      	ldr	r1, [r1, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	6022      	str	r2, [r4, #0]
 8008e1c:	2278      	movs	r2, #120	; 0x78
 8008e1e:	4932      	ldr	r1, [pc, #200]	; (8008ee8 <_printf_i+0x21c>)
 8008e20:	9103      	str	r1, [sp, #12]
 8008e22:	0021      	movs	r1, r4
 8008e24:	3145      	adds	r1, #69	; 0x45
 8008e26:	700a      	strb	r2, [r1, #0]
 8008e28:	6819      	ldr	r1, [r3, #0]
 8008e2a:	6822      	ldr	r2, [r4, #0]
 8008e2c:	c920      	ldmia	r1!, {r5}
 8008e2e:	0610      	lsls	r0, r2, #24
 8008e30:	d402      	bmi.n	8008e38 <_printf_i+0x16c>
 8008e32:	0650      	lsls	r0, r2, #25
 8008e34:	d500      	bpl.n	8008e38 <_printf_i+0x16c>
 8008e36:	b2ad      	uxth	r5, r5
 8008e38:	6019      	str	r1, [r3, #0]
 8008e3a:	07d3      	lsls	r3, r2, #31
 8008e3c:	d502      	bpl.n	8008e44 <_printf_i+0x178>
 8008e3e:	2320      	movs	r3, #32
 8008e40:	4313      	orrs	r3, r2
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	2710      	movs	r7, #16
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	d1a9      	bne.n	8008d9e <_printf_i+0xd2>
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	4393      	bics	r3, r2
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	e7a4      	b.n	8008d9e <_printf_i+0xd2>
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	680d      	ldr	r5, [r1, #0]
 8008e58:	1d10      	adds	r0, r2, #4
 8008e5a:	6949      	ldr	r1, [r1, #20]
 8008e5c:	6018      	str	r0, [r3, #0]
 8008e5e:	6813      	ldr	r3, [r2, #0]
 8008e60:	062e      	lsls	r6, r5, #24
 8008e62:	d501      	bpl.n	8008e68 <_printf_i+0x19c>
 8008e64:	6019      	str	r1, [r3, #0]
 8008e66:	e002      	b.n	8008e6e <_printf_i+0x1a2>
 8008e68:	066d      	lsls	r5, r5, #25
 8008e6a:	d5fb      	bpl.n	8008e64 <_printf_i+0x198>
 8008e6c:	8019      	strh	r1, [r3, #0]
 8008e6e:	2300      	movs	r3, #0
 8008e70:	9e04      	ldr	r6, [sp, #16]
 8008e72:	6123      	str	r3, [r4, #16]
 8008e74:	e7c0      	b.n	8008df8 <_printf_i+0x12c>
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	1d11      	adds	r1, r2, #4
 8008e7a:	6019      	str	r1, [r3, #0]
 8008e7c:	6816      	ldr	r6, [r2, #0]
 8008e7e:	2100      	movs	r1, #0
 8008e80:	0030      	movs	r0, r6
 8008e82:	6862      	ldr	r2, [r4, #4]
 8008e84:	f000 f858 	bl	8008f38 <memchr>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d001      	beq.n	8008e90 <_printf_i+0x1c4>
 8008e8c:	1b80      	subs	r0, r0, r6
 8008e8e:	6060      	str	r0, [r4, #4]
 8008e90:	6863      	ldr	r3, [r4, #4]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2300      	movs	r3, #0
 8008e96:	9a04      	ldr	r2, [sp, #16]
 8008e98:	7013      	strb	r3, [r2, #0]
 8008e9a:	e7ad      	b.n	8008df8 <_printf_i+0x12c>
 8008e9c:	0032      	movs	r2, r6
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	9906      	ldr	r1, [sp, #24]
 8008ea2:	9805      	ldr	r0, [sp, #20]
 8008ea4:	9d07      	ldr	r5, [sp, #28]
 8008ea6:	47a8      	blx	r5
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d0af      	beq.n	8008e0c <_printf_i+0x140>
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	079b      	lsls	r3, r3, #30
 8008eb0:	d415      	bmi.n	8008ede <_printf_i+0x212>
 8008eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb4:	68e0      	ldr	r0, [r4, #12]
 8008eb6:	4298      	cmp	r0, r3
 8008eb8:	daaa      	bge.n	8008e10 <_printf_i+0x144>
 8008eba:	0018      	movs	r0, r3
 8008ebc:	e7a8      	b.n	8008e10 <_printf_i+0x144>
 8008ebe:	0022      	movs	r2, r4
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	9906      	ldr	r1, [sp, #24]
 8008ec4:	9805      	ldr	r0, [sp, #20]
 8008ec6:	9e07      	ldr	r6, [sp, #28]
 8008ec8:	3219      	adds	r2, #25
 8008eca:	47b0      	blx	r6
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d09d      	beq.n	8008e0c <_printf_i+0x140>
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	42ab      	cmp	r3, r5
 8008eda:	dcf0      	bgt.n	8008ebe <_printf_i+0x1f2>
 8008edc:	e7e9      	b.n	8008eb2 <_printf_i+0x1e6>
 8008ede:	2500      	movs	r5, #0
 8008ee0:	e7f7      	b.n	8008ed2 <_printf_i+0x206>
 8008ee2:	46c0      	nop			; (mov r8, r8)
 8008ee4:	08009295 	.word	0x08009295
 8008ee8:	080092a6 	.word	0x080092a6

08008eec <memmove>:
 8008eec:	b510      	push	{r4, lr}
 8008eee:	4288      	cmp	r0, r1
 8008ef0:	d902      	bls.n	8008ef8 <memmove+0xc>
 8008ef2:	188b      	adds	r3, r1, r2
 8008ef4:	4298      	cmp	r0, r3
 8008ef6:	d303      	bcc.n	8008f00 <memmove+0x14>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	e007      	b.n	8008f0c <memmove+0x20>
 8008efc:	5c8b      	ldrb	r3, [r1, r2]
 8008efe:	5483      	strb	r3, [r0, r2]
 8008f00:	3a01      	subs	r2, #1
 8008f02:	d2fb      	bcs.n	8008efc <memmove+0x10>
 8008f04:	bd10      	pop	{r4, pc}
 8008f06:	5ccc      	ldrb	r4, [r1, r3]
 8008f08:	54c4      	strb	r4, [r0, r3]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d1fa      	bne.n	8008f06 <memmove+0x1a>
 8008f10:	e7f8      	b.n	8008f04 <memmove+0x18>
	...

08008f14 <_sbrk_r>:
 8008f14:	2300      	movs	r3, #0
 8008f16:	b570      	push	{r4, r5, r6, lr}
 8008f18:	4d06      	ldr	r5, [pc, #24]	; (8008f34 <_sbrk_r+0x20>)
 8008f1a:	0004      	movs	r4, r0
 8008f1c:	0008      	movs	r0, r1
 8008f1e:	602b      	str	r3, [r5, #0]
 8008f20:	f7f8 fe6a 	bl	8001bf8 <_sbrk>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d103      	bne.n	8008f30 <_sbrk_r+0x1c>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d000      	beq.n	8008f30 <_sbrk_r+0x1c>
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	bd70      	pop	{r4, r5, r6, pc}
 8008f32:	46c0      	nop			; (mov r8, r8)
 8008f34:	20000540 	.word	0x20000540

08008f38 <memchr>:
 8008f38:	b2c9      	uxtb	r1, r1
 8008f3a:	1882      	adds	r2, r0, r2
 8008f3c:	4290      	cmp	r0, r2
 8008f3e:	d101      	bne.n	8008f44 <memchr+0xc>
 8008f40:	2000      	movs	r0, #0
 8008f42:	4770      	bx	lr
 8008f44:	7803      	ldrb	r3, [r0, #0]
 8008f46:	428b      	cmp	r3, r1
 8008f48:	d0fb      	beq.n	8008f42 <memchr+0xa>
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	e7f6      	b.n	8008f3c <memchr+0x4>

08008f4e <memcpy>:
 8008f4e:	2300      	movs	r3, #0
 8008f50:	b510      	push	{r4, lr}
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d100      	bne.n	8008f58 <memcpy+0xa>
 8008f56:	bd10      	pop	{r4, pc}
 8008f58:	5ccc      	ldrb	r4, [r1, r3]
 8008f5a:	54c4      	strb	r4, [r0, r3]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	e7f8      	b.n	8008f52 <memcpy+0x4>

08008f60 <_realloc_r>:
 8008f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f62:	0007      	movs	r7, r0
 8008f64:	000e      	movs	r6, r1
 8008f66:	0014      	movs	r4, r2
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	d105      	bne.n	8008f78 <_realloc_r+0x18>
 8008f6c:	0011      	movs	r1, r2
 8008f6e:	f7ff fc49 	bl	8008804 <_malloc_r>
 8008f72:	0005      	movs	r5, r0
 8008f74:	0028      	movs	r0, r5
 8008f76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	d103      	bne.n	8008f84 <_realloc_r+0x24>
 8008f7c:	f7ff fbd6 	bl	800872c <_free_r>
 8008f80:	0025      	movs	r5, r4
 8008f82:	e7f7      	b.n	8008f74 <_realloc_r+0x14>
 8008f84:	f000 f81b 	bl	8008fbe <_malloc_usable_size_r>
 8008f88:	9001      	str	r0, [sp, #4]
 8008f8a:	4284      	cmp	r4, r0
 8008f8c:	d803      	bhi.n	8008f96 <_realloc_r+0x36>
 8008f8e:	0035      	movs	r5, r6
 8008f90:	0843      	lsrs	r3, r0, #1
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	d3ee      	bcc.n	8008f74 <_realloc_r+0x14>
 8008f96:	0021      	movs	r1, r4
 8008f98:	0038      	movs	r0, r7
 8008f9a:	f7ff fc33 	bl	8008804 <_malloc_r>
 8008f9e:	1e05      	subs	r5, r0, #0
 8008fa0:	d0e8      	beq.n	8008f74 <_realloc_r+0x14>
 8008fa2:	9b01      	ldr	r3, [sp, #4]
 8008fa4:	0022      	movs	r2, r4
 8008fa6:	429c      	cmp	r4, r3
 8008fa8:	d900      	bls.n	8008fac <_realloc_r+0x4c>
 8008faa:	001a      	movs	r2, r3
 8008fac:	0031      	movs	r1, r6
 8008fae:	0028      	movs	r0, r5
 8008fb0:	f7ff ffcd 	bl	8008f4e <memcpy>
 8008fb4:	0031      	movs	r1, r6
 8008fb6:	0038      	movs	r0, r7
 8008fb8:	f7ff fbb8 	bl	800872c <_free_r>
 8008fbc:	e7da      	b.n	8008f74 <_realloc_r+0x14>

08008fbe <_malloc_usable_size_r>:
 8008fbe:	1f0b      	subs	r3, r1, #4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	1f18      	subs	r0, r3, #4
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da01      	bge.n	8008fcc <_malloc_usable_size_r+0xe>
 8008fc8:	580b      	ldr	r3, [r1, r0]
 8008fca:	18c0      	adds	r0, r0, r3
 8008fcc:	4770      	bx	lr
	...

08008fd0 <_init>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	46c0      	nop			; (mov r8, r8)
 8008fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd6:	bc08      	pop	{r3}
 8008fd8:	469e      	mov	lr, r3
 8008fda:	4770      	bx	lr

08008fdc <_fini>:
 8008fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fde:	46c0      	nop			; (mov r8, r8)
 8008fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fe2:	bc08      	pop	{r3}
 8008fe4:	469e      	mov	lr, r3
 8008fe6:	4770      	bx	lr
