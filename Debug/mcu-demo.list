
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008860  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b8c  08008b8c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008b8c  08008b8c  00018b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b94  08008b94  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b94  08008b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000060  08008bfc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08008bfc  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017aca  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f82  00000000  00000000  00037b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  0003ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001098  00000000  00000000  0003c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b179  00000000  00000000  0003d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f3c  00000000  00000000  00058249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aee9d  00000000  00000000  00072185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005264  00000000  00000000  00121024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00126288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008904 	.word	0x08008904

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08008904 	.word	0x08008904

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f001 f969 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f8a5 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fb59 	bl	8000d04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 fb09 	bl	8000c68 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000656:	f000 f8e7 	bl	8000828 <MX_ADC1_Init>
  MX_I2C1_Init();
 800065a:	f000 f94b 	bl	80008f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800065e:	f000 f989 	bl	8000974 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000662:	f000 f9db 	bl	8000a1c <MX_TIM3_Init>
  MX_TIM6_Init();
 8000666:	f000 fa5b 	bl	8000b20 <MX_TIM6_Init>
  MX_TIM7_Init();
 800066a:	f000 fa97 	bl	8000b9c <MX_TIM7_Init>
  MX_TIM14_Init();
 800066e:	f000 fad3 	bl	8000c18 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000672:	4b40      	ldr	r3, [pc, #256]	; (8000774 <main+0x134>)
 8000674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000676:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <main+0x134>)
 8000678:	2101      	movs	r1, #1
 800067a:	430a      	orrs	r2, r1
 800067c:	63da      	str	r2, [r3, #60]	; 0x3c
 800067e:	4b3d      	ldr	r3, [pc, #244]	; (8000774 <main+0x134>)
 8000680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000682:	2201      	movs	r2, #1
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 800068a:	4b3a      	ldr	r3, [pc, #232]	; (8000774 <main+0x134>)
 800068c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068e:	4b39      	ldr	r3, [pc, #228]	; (8000774 <main+0x134>)
 8000690:	2110      	movs	r1, #16
 8000692:	430a      	orrs	r2, r1
 8000694:	63da      	str	r2, [r3, #60]	; 0x3c
 8000696:	4b37      	ldr	r3, [pc, #220]	; (8000774 <main+0x134>)
 8000698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069a:	2210      	movs	r2, #16
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 80006a2:	4b34      	ldr	r3, [pc, #208]	; (8000774 <main+0x134>)
 80006a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a6:	4b33      	ldr	r3, [pc, #204]	; (8000774 <main+0x134>)
 80006a8:	2120      	movs	r1, #32
 80006aa:	430a      	orrs	r2, r1
 80006ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ae:	4b31      	ldr	r3, [pc, #196]	; (8000774 <main+0x134>)
 80006b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b2:	2220      	movs	r2, #32
 80006b4:	4013      	ands	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  // Enable the TIM14 peripheral
   __HAL_RCC_TIM14_CLK_ENABLE();
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <main+0x134>)
 80006bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <main+0x134>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	0209      	lsls	r1, r1, #8
 80006c4:	430a      	orrs	r2, r1
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40
 80006c8:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <main+0x134>)
 80006ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	4013      	ands	r3, r2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	200f      	movs	r0, #15
 80006dc:	f002 f8de 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006e0:	200f      	movs	r0, #15
 80006e2:	f002 f8f0 	bl	80028c6 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2011      	movs	r0, #17
 80006ec:	f002 f8d6 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80006f0:	2011      	movs	r0, #17
 80006f2:	f002 f8e8 	bl	80028c6 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2012      	movs	r0, #18
 80006fc:	f002 f8ce 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8000700:	2012      	movs	r0, #18
 8000702:	f002 f8e0 	bl	80028c6 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM14
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2013      	movs	r0, #19
 800070c:	f002 f8c6 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000710:	2013      	movs	r0, #19
 8000712:	f002 f8d8 	bl	80028c6 <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <main+0x138>)
 8000718:	0018      	movs	r0, r3
 800071a:	f003 ff3d 	bl	8004598 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <main+0x13c>)
 8000720:	0018      	movs	r0, r3
 8000722:	f003 ff39 	bl	8004598 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <main+0x140>)
 8000728:	0018      	movs	r0, r3
 800072a:	f003 ff35 	bl	8004598 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <main+0x144>)
 8000730:	0018      	movs	r0, r3
 8000732:	f003 ff31 	bl	8004598 <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <main+0x148>)
 8000738:	2100      	movs	r1, #0
 800073a:	0018      	movs	r0, r3
 800073c:	f003 ffe8 	bl	8004710 <HAL_TIM_PWM_Start>

  // I2C Display
  hardwareTestLCD();
 8000740:	f000 fbc0 	bl	8000ec4 <hardwareTestLCD>

  // Variables
  int servoAngle;
  int adcValue;
  stateTracker = 1;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <main+0x14c>)
 8000746:	2201      	movs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check UART Rx
	  // If "j" sent via UART, turn off UART transmissions
	  HAL_UART_Receive_IT(&huart2, 1, 1);
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <main+0x150>)
 800074c:	2201      	movs	r2, #1
 800074e:	2101      	movs	r1, #1
 8000750:	0018      	movs	r0, r3
 8000752:	f005 f957 	bl	8005a04 <HAL_UART_Receive_IT>

	  // Get potentiometer value
	  HAL_ADC_Start_IT(&hadc1);
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <main+0x154>)
 8000758:	0018      	movs	r0, r3
 800075a:	f001 fd11 	bl	8002180 <HAL_ADC_Start_IT>
	  getPotValue();
 800075e:	f000 fb83 	bl	8000e68 <getPotValue>

	  // State Machine
	  stateMachineDecider();
 8000762:	f000 fc31 	bl	8000fc8 <stateMachineDecider>
	  stateMachineController(stateTracker);
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <main+0x14c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fbf6 	bl	8000f5c <stateMachineController>
	  HAL_UART_Receive_IT(&huart2, 1, 1);
 8000770:	e7eb      	b.n	800074a <main+0x10a>
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000
 8000778:	20000134 	.word	0x20000134
 800077c:	200001cc 	.word	0x200001cc
 8000780:	20000218 	.word	0x20000218
 8000784:	20000264 	.word	0x20000264
 8000788:	20000180 	.word	0x20000180
 800078c:	2000039c 	.word	0x2000039c
 8000790:	200002b0 	.word	0x200002b0
 8000794:	2000007c 	.word	0x2000007c

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b093      	sub	sp, #76	; 0x4c
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	2410      	movs	r4, #16
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	2338      	movs	r3, #56	; 0x38
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f007 fc25 	bl	8007ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ae:	003b      	movs	r3, r7
 80007b0:	0018      	movs	r0, r3
 80007b2:	2310      	movs	r3, #16
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f007 fc1e 	bl	8007ff8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 ffc9 	bl	8003758 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2202      	movs	r2, #2
 80007ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	0052      	lsls	r2, r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2240      	movs	r2, #64	; 0x40
 80007de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	0018      	movs	r0, r3
 80007ea:	f003 f801 	bl	80037f0 <HAL_RCC_OscConfig>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007f2:	f000 fdd3 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	003b      	movs	r3, r7
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	003b      	movs	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080e:	003b      	movs	r3, r7
 8000810:	2100      	movs	r1, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f003 fb06 	bl	8003e24 <HAL_RCC_ClockConfig>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800081c:	f000 fdbe 	bl	800139c <Error_Handler>
  }
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b013      	add	sp, #76	; 0x4c
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	0018      	movs	r0, r3
 8000832:	230c      	movs	r3, #12
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f007 fbde 	bl	8007ff8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <MX_ADC1_Init+0xc4>)
 800083e:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <MX_ADC1_Init+0xc8>)
 8000840:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	05d2      	lsls	r2, r2, #23
 8000848:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <MX_ADC1_Init+0xc4>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000856:	4b25      	ldr	r3, [pc, #148]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <MX_ADC1_Init+0xc4>)
 800085e:	2204      	movs	r2, #4
 8000860:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000864:	2200      	movs	r2, #0
 8000866:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <MX_ADC1_Init+0xc4>)
 800086a:	2200      	movs	r2, #0
 800086c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000870:	2201      	movs	r2, #1
 8000872:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000876:	2201      	movs	r2, #1
 8000878:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC1_Init+0xc4>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000888:	222c      	movs	r2, #44	; 0x2c
 800088a:	2100      	movs	r1, #0
 800088c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC1_Init+0xc4>)
 8000896:	2200      	movs	r2, #0
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC1_Init+0xc4>)
 800089c:	2200      	movs	r2, #0
 800089e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC1_Init+0xc4>)
 80008a2:	223c      	movs	r2, #60	; 0x3c
 80008a4:	2100      	movs	r1, #0
 80008a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_ADC1_Init+0xc4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC1_Init+0xc4>)
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fa29 	bl	8001d08 <HAL_ADC_Init>
 80008b6:	1e03      	subs	r3, r0, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80008ba:	f000 fd6f 	bl	800139c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2201      	movs	r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	1d3a      	adds	r2, r7, #4
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_ADC1_Init+0xc4>)
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fcd6 	bl	8002288 <HAL_ADC_ConfigChannel>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80008e0:	f000 fd5c 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b004      	add	sp, #16
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000007c 	.word	0x2000007c
 80008f0:	40012400 	.word	0x40012400

080008f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_I2C1_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_I2C1_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_I2C1_Init+0x74>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MX_I2C1_Init+0x7c>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_I2C1_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_I2C1_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_I2C1_Init+0x74>)
 8000930:	0018      	movs	r0, r3
 8000932:	f002 fa6b 	bl	8002e0c <HAL_I2C_Init>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800093a:	f000 fd2f 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_I2C1_Init+0x74>)
 8000940:	2100      	movs	r1, #0
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fe70 	bl	8003628 <HAL_I2CEx_ConfigAnalogFilter>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800094c:	f000 fd26 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <MX_I2C1_Init+0x74>)
 8000952:	2100      	movs	r1, #0
 8000954:	0018      	movs	r0, r3
 8000956:	f002 feb3 	bl	80036c0 <HAL_I2CEx_ConfigDigitalFilter>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fd1d 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000e0 	.word	0x200000e0
 800096c:	40005400 	.word	0x40005400
 8000970:	00303d5b 	.word	0x00303d5b

08000974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	2310      	movs	r3, #16
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	0018      	movs	r0, r3
 8000980:	2310      	movs	r3, #16
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f007 fb37 	bl	8007ff8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	0018      	movs	r0, r3
 800098e:	230c      	movs	r3, #12
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f007 fb30 	bl	8007ff8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_TIM2_Init+0xa0>)
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	05d2      	lsls	r2, r2, #23
 800099e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_TIM2_Init+0xa0>)
 80009a2:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <MX_TIM2_Init+0xa4>)
 80009a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_TIM2_Init+0xa0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_TIM2_Init+0xa0>)
 80009ae:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <MX_TIM2_Init+0xa4>)
 80009b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_TIM2_Init+0xa0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_TIM2_Init+0xa0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_TIM2_Init+0xa0>)
 80009c0:	0018      	movs	r0, r3
 80009c2:	f003 fd91 	bl	80044e8 <HAL_TIM_Base_Init>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009ca:	f000 fce7 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ce:	2110      	movs	r1, #16
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	0152      	lsls	r2, r2, #5
 80009d6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d8:	187a      	adds	r2, r7, r1
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_TIM2_Init+0xa0>)
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f004 f988 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009e8:	f000 fcd8 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009f8:	1d3a      	adds	r2, r7, #4
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_TIM2_Init+0xa0>)
 80009fc:	0011      	movs	r1, r2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f004 fe80 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a08:	f000 fcc8 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b008      	add	sp, #32
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000134 	.word	0x20000134
 8000a18:	000003e7 	.word	0x000003e7

08000a1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08e      	sub	sp, #56	; 0x38
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	2328      	movs	r3, #40	; 0x28
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	0018      	movs	r0, r3
 8000a28:	2310      	movs	r3, #16
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f007 fae3 	bl	8007ff8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a32:	231c      	movs	r3, #28
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	230c      	movs	r3, #12
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f007 fadb 	bl	8007ff8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a42:	003b      	movs	r3, r7
 8000a44:	0018      	movs	r0, r3
 8000a46:	231c      	movs	r3, #28
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f007 fad4 	bl	8007ff8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000a52:	4a31      	ldr	r2, [pc, #196]	; (8000b18 <MX_TIM3_Init+0xfc>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000a58:	2240      	movs	r2, #64	; 0x40
 8000a5a:	32ff      	adds	r2, #255	; 0xff
 8000a5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a64:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000a66:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <MX_TIM3_Init+0x100>)
 8000a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f003 fd35 	bl	80044e8 <HAL_TIM_Base_Init>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a82:	f000 fc8b 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a86:	2128      	movs	r1, #40	; 0x28
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	0152      	lsls	r2, r2, #5
 8000a8e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a90:	187a      	adds	r2, r7, r1
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f004 f92c 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000aa0:	f000 fc7c 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f003 fdd2 	bl	8004650 <HAL_TIM_PWM_Init>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000ab0:	f000 fc74 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab4:	211c      	movs	r1, #28
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac2:	187a      	adds	r2, r7, r1
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f004 fe1b 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000ad2:	f000 fc63 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	2260      	movs	r2, #96	; 0x60
 8000ada:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000adc:	003b      	movs	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae8:	003b      	movs	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aee:	0039      	movs	r1, r7
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	0018      	movs	r0, r3
 8000af6:	f003 fffd 	bl	8004af4 <HAL_TIM_PWM_ConfigChannel>
 8000afa:	1e03      	subs	r3, r0, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000afe:	f000 fc4d 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <MX_TIM3_Init+0xf8>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 fdab 	bl	8001660 <HAL_TIM_MspPostInit>

}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b00e      	add	sp, #56	; 0x38
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000180 	.word	0x20000180
 8000b18:	40000400 	.word	0x40000400
 8000b1c:	000003e7 	.word	0x000003e7

08000b20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	0018      	movs	r0, r3
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f007 fa62 	bl	8007ff8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_TIM6_Init+0x6c>)
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <MX_TIM6_Init+0x70>)
 8000b38:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_TIM6_Init+0x6c>)
 8000b3c:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <MX_TIM6_Init+0x74>)
 8000b3e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_TIM6_Init+0x6c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_TIM6_Init+0x6c>)
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <MX_TIM6_Init+0x78>)
 8000b4a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_TIM6_Init+0x6c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_TIM6_Init+0x6c>)
 8000b54:	0018      	movs	r0, r3
 8000b56:	f003 fcc7 	bl	80044e8 <HAL_TIM_Base_Init>
 8000b5a:	1e03      	subs	r3, r0, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b5e:	f000 fc1d 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b6e:	1d3a      	adds	r2, r7, #4
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_TIM6_Init+0x6c>)
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f004 fdc5 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	1e03      	subs	r3, r0, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b7e:	f000 fc0d 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b004      	add	sp, #16
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	200001cc 	.word	0x200001cc
 8000b90:	40001000 	.word	0x40001000
 8000b94:	000007cf 	.word	0x000007cf
 8000b98:	000003e7 	.word	0x000003e7

08000b9c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f007 fa24 	bl	8007ff8 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM7_Init+0x6c>)
 8000bb2:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <MX_TIM7_Init+0x70>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3332;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_TIM7_Init+0x6c>)
 8000bb8:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <MX_TIM7_Init+0x74>)
 8000bba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_TIM7_Init+0x6c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_TIM7_Init+0x6c>)
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <MX_TIM7_Init+0x78>)
 8000bc6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_TIM7_Init+0x6c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_TIM7_Init+0x6c>)
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f003 fc89 	bl	80044e8 <HAL_TIM_Base_Init>
 8000bd6:	1e03      	subs	r3, r0, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000bda:	f000 fbdf 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bea:	1d3a      	adds	r2, r7, #4
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_TIM7_Init+0x6c>)
 8000bee:	0011      	movs	r1, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f004 fd87 	bl	8005704 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000bfa:	f000 fbcf 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b004      	add	sp, #16
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	20000218 	.word	0x20000218
 8000c0c:	40001400 	.word	0x40001400
 8000c10:	00000d04 	.word	0x00000d04
 8000c14:	000003e7 	.word	0x000003e7

08000c18 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <MX_TIM14_Init+0x44>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7999;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <MX_TIM14_Init+0x48>)
 8000c26:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c30:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <MX_TIM14_Init+0x4c>)
 8000c32:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <MX_TIM14_Init+0x40>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f003 fc50 	bl	80044e8 <HAL_TIM_Base_Init>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000c4c:	f000 fba6 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	20000264 	.word	0x20000264
 8000c5c:	40002000 	.word	0x40002000
 8000c60:	00001f3f 	.word	0x00001f3f
 8000c64:	000003e7 	.word	0x000003e7

08000c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c6e:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <MX_USART2_UART_Init+0x98>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c74:	22e1      	movs	r2, #225	; 0xe1
 8000c76:	0252      	lsls	r2, r2, #9
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f004 fdac 	bl	8005810 <HAL_UART_Init>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cbc:	f000 fb6e 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f006 fdf9 	bl	80078bc <HAL_UARTEx_SetTxFifoThreshold>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cce:	f000 fb65 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f006 fe30 	bl	800793c <HAL_UARTEx_SetRxFifoThreshold>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce0:	f000 fb5c 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <MX_USART2_UART_Init+0x94>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f006 fdae 	bl	8007848 <HAL_UARTEx_DisableFifoMode>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf0:	f000 fb54 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	200002b0 	.word	0x200002b0
 8000d00:	40004400 	.word	0x40004400

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b08b      	sub	sp, #44	; 0x2c
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	2414      	movs	r4, #20
 8000d0c:	193b      	adds	r3, r7, r4
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2314      	movs	r3, #20
 8000d12:	001a      	movs	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	f007 f96f 	bl	8007ff8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b4f      	ldr	r3, [pc, #316]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d1e:	4b4e      	ldr	r3, [pc, #312]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d20:	2104      	movs	r1, #4
 8000d22:	430a      	orrs	r2, r1
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
 8000d26:	4b4c      	ldr	r3, [pc, #304]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d32:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d36:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d38:	2120      	movs	r1, #32
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d42:	2220      	movs	r2, #32
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d4e:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
 8000d56:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d66:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d68:	2102      	movs	r1, #2
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <MX_GPIO_Init+0x154>)
 8000d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d72:	2202      	movs	r2, #2
 8000d74:	4013      	ands	r3, r2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d7a:	23a0      	movs	r3, #160	; 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2120      	movs	r1, #32
 8000d82:	0018      	movs	r0, r3
 8000d84:	f002 f809 	bl	8002d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000d88:	4934      	ldr	r1, [pc, #208]	; (8000e5c <MX_GPIO_Init+0x158>)
 8000d8a:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <MX_GPIO_Init+0x15c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f002 f803 	bl	8002d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000d94:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <MX_GPIO_Init+0x160>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f001 fffd 	bl	8002d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INPUT_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_2_Pin;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2280      	movs	r2, #128	; 0x80
 8000da4:	0192      	lsls	r2, r2, #6
 8000da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2201      	movs	r2, #1
 8000db2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_2_GPIO_Port, &GPIO_InitStruct);
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	4a2b      	ldr	r2, [pc, #172]	; (8000e64 <MX_GPIO_Init+0x160>)
 8000db8:	0019      	movs	r1, r3
 8000dba:	0010      	movs	r0, r2
 8000dbc:	f001 fe6c 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2201      	movs	r2, #1
 8000dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	193a      	adds	r2, r7, r4
 8000dda:	23a0      	movs	r3, #160	; 0xa0
 8000ddc:	05db      	lsls	r3, r3, #23
 8000dde:	0011      	movs	r1, r2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f001 fe59 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <MX_GPIO_Init+0x158>)
 8000dea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2201      	movs	r2, #1
 8000df0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <MX_GPIO_Init+0x15c>)
 8000e02:	0019      	movs	r1, r3
 8000e04:	0010      	movs	r0, r2
 8000e06:	f001 fe47 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	2201      	movs	r2, #1
 8000e14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	4a0f      	ldr	r2, [pc, #60]	; (8000e64 <MX_GPIO_Init+0x160>)
 8000e26:	0019      	movs	r1, r3
 8000e28:	0010      	movs	r0, r2
 8000e2a:	f001 fe35 	bl	8002a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000e2e:	0021      	movs	r1, r4
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2208      	movs	r2, #8
 8000e34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <MX_GPIO_Init+0x15c>)
 8000e46:	0019      	movs	r1, r3
 8000e48:	0010      	movs	r0, r2
 8000e4a:	f001 fe25 	bl	8002a98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b00b      	add	sp, #44	; 0x2c
 8000e54:	bd90      	pop	{r4, r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	00004010 	.word	0x00004010
 8000e60:	50000400 	.word	0x50000400
 8000e64:	50000800 	.word	0x50000800

08000e68 <getPotValue>:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
	}

	/* Get ADC value from potentiometer */
	void getPotValue(void){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <getPotValue+0x24>)
 8000e6e:	2105      	movs	r1, #5
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 f8f1 	bl	8002058 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <getPotValue+0x24>)
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f001 f9f9 	bl	8002270 <HAL_ADC_GetValue>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <getPotValue+0x28>)
 8000e84:	801a      	strh	r2, [r3, #0]

		/* Debug */
		//sprintf(msg, "potValue: %hu\r\n", potValue);
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2000007c 	.word	0x2000007c
 8000e90:	20000398 	.word	0x20000398

08000e94 <getAdcFromPot>:

	/* getADC from Pot */
	int getAdcFromPot(){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
		/* Get pot value */
		uint16_t potValue;
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <getAdcFromPot+0x2c>)
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 f8da 	bl	8002058 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <getAdcFromPot+0x2c>)
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f001 f9e2 	bl	8002270 <HAL_ADC_GetValue>
 8000eac:	0002      	movs	r2, r0
 8000eae:	1dbb      	adds	r3, r7, #6
 8000eb0:	801a      	strh	r2, [r3, #0]
		return potValue;
 8000eb2:	1dbb      	adds	r3, r7, #6
 8000eb4:	881b      	ldrh	r3, [r3, #0]
	}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	2000007c 	.word	0x2000007c

08000ec4 <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f006 fef9 	bl	8007cc0 <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f007 f804 	bl	8007ee0 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Hardware Test");
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <hardwareTestLCD+0x38>)
 8000eda:	0019      	movs	r1, r3
 8000edc:	2000      	movs	r0, #0
 8000ede:	f007 f84f 	bl	8007f80 <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f006 fffa 	bl	8007ee0 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Meow");
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <hardwareTestLCD+0x3c>)
 8000eee:	0019      	movs	r1, r3
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f007 f845 	bl	8007f80 <I2C_LCD_WriteString>
	}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	08008944 	.word	0x08008944
 8000f00:	08008954 	.word	0x08008954

08000f04 <motorControl>:

	/* Motor control */
	void motorControl(int adcValue){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, adcValue); // Interpolate pot values to PWM range
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <motorControl+0x18>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b002      	add	sp, #8
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000180 	.word	0x20000180

08000f20 <myMap>:

	/* Mapping function */
	 int myMap(int x, int in_min, int in_max, int out_min, int out_max){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
		 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	69b9      	ldr	r1, [r7, #24]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	1a8a      	subs	r2, r1, r2
 8000f3a:	435a      	muls	r2, r3
 8000f3c:	0010      	movs	r0, r2
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	0019      	movs	r1, r3
 8000f46:	f7ff f979 	bl	800023c <__divsi3>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	18d3      	adds	r3, r2, r3
	 }
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <stateMachineController>:

	 /* State Machine Controller */
	 // Description: Determines which state the program will execute.
	 //  Input:		 Integer corresponding to state (1 = A, 2 = B, 3 = C)
	 void stateMachineController(int state){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

		 switch(state){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d00f      	beq.n	8000f8a <stateMachineController+0x2e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	dc21      	bgt.n	8000fb4 <stateMachineController+0x58>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d003      	beq.n	8000f7e <stateMachineController+0x22>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d003      	beq.n	8000f84 <stateMachineController+0x28>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

				 stateHandlerC();
				 break;
		 }
	 }
 8000f7c:	e01a      	b.n	8000fb4 <stateMachineController+0x58>
				 stateHandlerA();
 8000f7e:	f000 f8a3 	bl	80010c8 <stateHandlerA>
				 break;
 8000f82:	e017      	b.n	8000fb4 <stateMachineController+0x58>
				 stateHandlerB();
 8000f84:	f000 f8de 	bl	8001144 <stateHandlerB>
				 break;
 8000f88:	e014      	b.n	8000fb4 <stateMachineController+0x58>
				 sprintf(msg, "Executing C.\n\r");
 8000f8a:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <stateMachineController+0x60>)
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <stateMachineController+0x64>)
 8000f8e:	0011      	movs	r1, r2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f007 f811 	bl	8007fb8 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <stateMachineController+0x64>)
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff f8b3 	bl	8000104 <strlen>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	425b      	negs	r3, r3
 8000fa6:	4906      	ldr	r1, [pc, #24]	; (8000fc0 <stateMachineController+0x64>)
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <stateMachineController+0x68>)
 8000faa:	f004 fc87 	bl	80058bc <HAL_UART_Transmit>
				 stateHandlerC();
 8000fae:	f000 f921 	bl	80011f4 <stateHandlerC>
				 break;
 8000fb2:	46c0      	nop			; (mov r8, r8)
	 }
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0800895c 	.word	0x0800895c
 8000fc0:	20000344 	.word	0x20000344
 8000fc4:	200002b0 	.word	0x200002b0

08000fc8 <stateMachineDecider>:

	 /* State Machine Controller */
	 // Description: Monitors button pushes to update current state value.
	 void stateMachineDecider(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
		 // Go to State B if it is State A
		 if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 1){
 8000fcc:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <stateMachineDecider+0xe0>)
 8000fce:	2108      	movs	r1, #8
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f001 fec5 	bl	8002d60 <HAL_GPIO_ReadPin>
 8000fd6:	1e03      	subs	r3, r0, #0
 8000fd8:	d01c      	beq.n	8001014 <stateMachineDecider+0x4c>
 8000fda:	4b34      	ldr	r3, [pc, #208]	; (80010ac <stateMachineDecider+0xe4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d118      	bne.n	8001014 <stateMachineDecider+0x4c>

			 // Debug message
			 sprintf(msg, "Going to State B.\n\r");
 8000fe2:	4a33      	ldr	r2, [pc, #204]	; (80010b0 <stateMachineDecider+0xe8>)
 8000fe4:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <stateMachineDecider+0xec>)
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f006 ffe5 	bl	8007fb8 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000fee:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <stateMachineDecider+0xec>)
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff f887 	bl	8000104 <strlen>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	492d      	ldr	r1, [pc, #180]	; (80010b4 <stateMachineDecider+0xec>)
 8001000:	482d      	ldr	r0, [pc, #180]	; (80010b8 <stateMachineDecider+0xf0>)
 8001002:	f004 fc5b 	bl	80058bc <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 8001006:	2000      	movs	r0, #0
 8001008:	f006 ff26 	bl	8007e58 <I2C_LCD_Clear>

			 // Go to State B
			 stateTracker = 2;
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <stateMachineDecider+0xe4>)
 800100e:	2202      	movs	r2, #2
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e046      	b.n	80010a2 <stateMachineDecider+0xda>

		 // Go to State A if it is State B
		 } else if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 2){
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <stateMachineDecider+0xe0>)
 8001016:	2108      	movs	r1, #8
 8001018:	0018      	movs	r0, r3
 800101a:	f001 fea1 	bl	8002d60 <HAL_GPIO_ReadPin>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d01c      	beq.n	800105c <stateMachineDecider+0x94>
 8001022:	4b22      	ldr	r3, [pc, #136]	; (80010ac <stateMachineDecider+0xe4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d118      	bne.n	800105c <stateMachineDecider+0x94>

			 // Debug message
			 sprintf(msg, "Going to State A.\n\r");
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <stateMachineDecider+0xf4>)
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <stateMachineDecider+0xec>)
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f006 ffc1 	bl	8007fb8 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <stateMachineDecider+0xec>)
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff f863 	bl	8000104 <strlen>
 800103e:	0003      	movs	r3, r0
 8001040:	b29a      	uxth	r2, r3
 8001042:	2301      	movs	r3, #1
 8001044:	425b      	negs	r3, r3
 8001046:	491b      	ldr	r1, [pc, #108]	; (80010b4 <stateMachineDecider+0xec>)
 8001048:	481b      	ldr	r0, [pc, #108]	; (80010b8 <stateMachineDecider+0xf0>)
 800104a:	f004 fc37 	bl	80058bc <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 800104e:	2000      	movs	r0, #0
 8001050:	f006 ff02 	bl	8007e58 <I2C_LCD_Clear>

			 // Stay in State A
			 stateTracker = 1;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <stateMachineDecider+0xe4>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e022      	b.n	80010a2 <stateMachineDecider+0xda>

		// Button 2 pressed (State C)
		 } else if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin) && stateTracker == 1){
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	019b      	lsls	r3, r3, #6
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <stateMachineDecider+0xf8>)
 8001062:	0019      	movs	r1, r3
 8001064:	0010      	movs	r0, r2
 8001066:	f001 fe7b 	bl	8002d60 <HAL_GPIO_ReadPin>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d119      	bne.n	80010a2 <stateMachineDecider+0xda>
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <stateMachineDecider+0xe4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d115      	bne.n	80010a2 <stateMachineDecider+0xda>

			 // Debug message
			 sprintf(msg, "Going to State C.\n\r");
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <stateMachineDecider+0xfc>)
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <stateMachineDecider+0xec>)
 800107a:	0011      	movs	r1, r2
 800107c:	0018      	movs	r0, r3
 800107e:	f006 ff9b 	bl	8007fb8 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <stateMachineDecider+0xec>)
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff f83d 	bl	8000104 <strlen>
 800108a:	0003      	movs	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	2301      	movs	r3, #1
 8001090:	425b      	negs	r3, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <stateMachineDecider+0xec>)
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <stateMachineDecider+0xf0>)
 8001096:	f004 fc11 	bl	80058bc <HAL_UART_Transmit>

			 // Go to State C
			 stateTracker = 3;
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <stateMachineDecider+0xe4>)
 800109c:	2203      	movs	r2, #3
 800109e:	601a      	str	r2, [r3, #0]
		 }
	 }
 80010a0:	e7ff      	b.n	80010a2 <stateMachineDecider+0xda>
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	50000400 	.word	0x50000400
 80010ac:	2000039c 	.word	0x2000039c
 80010b0:	0800896c 	.word	0x0800896c
 80010b4:	20000344 	.word	0x20000344
 80010b8:	200002b0 	.word	0x200002b0
 80010bc:	08008980 	.word	0x08008980
 80010c0:	50000800 	.word	0x50000800
 80010c4:	08008994 	.word	0x08008994

080010c8 <stateHandlerA>:

	 /* State Handler A */
	 void stateHandlerA(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
		 // LCD Control
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	f006 ff04 	bl	8007ee0 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <stateHandlerA+0x68>)
 80010da:	0019      	movs	r1, r3
 80010dc:	2000      	movs	r0, #0
 80010de:	f006 ff4f 	bl	8007f80 <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2100      	movs	r1, #0
 80010e6:	2000      	movs	r0, #0
 80010e8:	f006 fefa 	bl	8007ee0 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <stateHandlerA+0x6c>)
 80010ee:	0019      	movs	r1, r3
 80010f0:	2000      	movs	r0, #0
 80010f2:	f006 ff45 	bl	8007f80 <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <stateHandlerA+0x70>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 f841 	bl	8002180 <HAL_ADC_Start_IT>
		 getPotValue();
 80010fe:	f7ff feb3 	bl	8000e68 <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 8001102:	f7ff fec7 	bl	8000e94 <getAdcFromPot>
 8001106:	4a0d      	ldr	r2, [pc, #52]	; (800113c <stateHandlerA+0x74>)
 8001108:	23b4      	movs	r3, #180	; 0xb4
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2300      	movs	r3, #0
 800110e:	213c      	movs	r1, #60	; 0x3c
 8001110:	f7ff ff06 	bl	8000f20 <myMap>
 8001114:	0003      	movs	r3, r0
 8001116:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff fef2 	bl	8000f04 <motorControl>

		 // No button pushes - Stay in State A
		 stateTracker = 1;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <stateHandlerA+0x78>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]
	 }
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	080089a8 	.word	0x080089a8
 8001134:	080089b8 	.word	0x080089b8
 8001138:	2000007c 	.word	0x2000007c
 800113c:	00000fff 	.word	0x00000fff
 8001140:	2000039c 	.word	0x2000039c

08001144 <stateHandlerB>:

	 /* State Handler B */
	 void stateHandlerB(void){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8

		 // LCD Control
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2000      	movs	r0, #0
 8001150:	f006 fec6 	bl	8007ee0 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "ADC: ");
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <stateHandlerB+0x8c>)
 8001156:	0019      	movs	r1, r3
 8001158:	2000      	movs	r0, #0
 800115a:	f006 ff11 	bl	8007f80 <I2C_LCD_WriteString>
		 sprintf(msg2, "%hu", potValue);
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <stateHandlerB+0x90>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	001a      	movs	r2, r3
 8001164:	491c      	ldr	r1, [pc, #112]	; (80011d8 <stateHandlerB+0x94>)
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <stateHandlerB+0x98>)
 8001168:	0018      	movs	r0, r3
 800116a:	f006 ff25 	bl	8007fb8 <siprintf>
		 I2C_LCD_WriteString(MyI2C_LCD, msg2);
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <stateHandlerB+0x98>)
 8001170:	0019      	movs	r1, r3
 8001172:	2000      	movs	r0, #0
 8001174:	f006 ff04 	bl	8007f80 <I2C_LCD_WriteString>
		 I2C_LCD_WriteString(MyI2C_LCD, " State B");
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <stateHandlerB+0x9c>)
 800117a:	0019      	movs	r1, r3
 800117c:	2000      	movs	r0, #0
 800117e:	f006 feff 	bl	8007f80 <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001182:	2201      	movs	r2, #1
 8001184:	2100      	movs	r1, #0
 8001186:	2000      	movs	r0, #0
 8001188:	f006 feaa 	bl	8007ee0 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <stateHandlerB+0xa0>)
 800118e:	0019      	movs	r1, r3
 8001190:	2000      	movs	r0, #0
 8001192:	f006 fef5 	bl	8007f80 <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <stateHandlerB+0xa4>)
 8001198:	0018      	movs	r0, r3
 800119a:	f000 fff1 	bl	8002180 <HAL_ADC_Start_IT>
		 getPotValue();
 800119e:	f7ff fe63 	bl	8000e68 <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 80011a2:	f7ff fe77 	bl	8000e94 <getAdcFromPot>
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <stateHandlerB+0xa8>)
 80011a8:	23b4      	movs	r3, #180	; 0xb4
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	213c      	movs	r1, #60	; 0x3c
 80011b0:	f7ff feb6 	bl	8000f20 <myMap>
 80011b4:	0003      	movs	r3, r0
 80011b6:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff fea2 	bl	8000f04 <motorControl>
		 // LED2 Toggle
		 // B1 pressed = Turn on, blink at 1 Hz (Modify PSC)
		 // B1 not pressed = Turn off

		 // No button pushes - Stay in State B
		 stateTracker = 2;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <stateHandlerB+0xac>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	601a      	str	r2, [r3, #0]
	 }
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	b002      	add	sp, #8
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	080089c8 	.word	0x080089c8
 80011d4:	20000398 	.word	0x20000398
 80011d8:	080089d0 	.word	0x080089d0
 80011dc:	2000035c 	.word	0x2000035c
 80011e0:	080089d4 	.word	0x080089d4
 80011e4:	080089b8 	.word	0x080089b8
 80011e8:	2000007c 	.word	0x2000007c
 80011ec:	00000fff 	.word	0x00000fff
 80011f0:	2000039c 	.word	0x2000039c

080011f4 <stateHandlerC>:

	 /* State Handler C */
	 void stateHandlerC(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

		 // Test function to show State C. State C functionality yet to be added.
		 HAL_Delay(2000);
 80011f8:	23fa      	movs	r3, #250	; 0xfa
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 fc13 	bl	8001a28 <HAL_Delay>
		 // Set pin to toggle output based on TIM with frequency 1 Hz
		 // Cycle for 3 seconds
		 // Turn back into UART (tx)

		 // Return to State A
		 stateTracker = 1;
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <stateHandlerC+0x1c>)
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]
	 }
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	2000039c 	.word	0x2000039c

08001214 <HAL_TIM_PeriodElapsedCallback>:

	 /* Controller Function for LED1, LED2 and LED3*/
	 // Description: Frequency currently determined by each timer's PSC value.
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

		 // TIM2 controls LED1
		 if(htim->Instance == TIM2){
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	05db      	lsls	r3, r3, #23
 8001224:	429a      	cmp	r2, r3
 8001226:	d105      	bne.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x20>
			 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	0018      	movs	r0, r3
 800122e:	f001 fdd1 	bl	8002dd4 <HAL_GPIO_TogglePin>
				 }
			 } else if (stateTracker == 2){
				 ; // UART do nothing
			 }
		 }
	 }
 8001232:	e038      	b.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x92>
		 } else if(htim->Instance == TIM6){
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d107      	bne.n	800124e <HAL_TIM_PeriodElapsedCallback+0x3a>
			 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	01db      	lsls	r3, r3, #7
 8001242:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f001 fdc4 	bl	8002dd4 <HAL_GPIO_TogglePin>
	 }
 800124c:	e02b      	b.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x92>
		 } else if(htim->Instance == TIM7){
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d105      	bne.n	8001264 <HAL_TIM_PeriodElapsedCallback+0x50>
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800125a:	2110      	movs	r1, #16
 800125c:	0018      	movs	r0, r3
 800125e:	f001 fdb9 	bl	8002dd4 <HAL_GPIO_TogglePin>
	 }
 8001262:	e020      	b.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x92>
		 } else if(htim->Instance == TIM14){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a15      	ldr	r2, [pc, #84]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d11b      	bne.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x92>
			 if (stateTracker == 1){
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d117      	bne.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x92>
				 if (uartFlag == 1){
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d113      	bne.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x92>
					 sprintf(msg2, "Autumn2024 MX1 SID: 24429298, ADC Reading: %hu\r\n", potValue);
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	001a      	movs	r2, r3
 8001284:	4912      	ldr	r1, [pc, #72]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001288:	0018      	movs	r0, r3
 800128a:	f006 fe95 	bl	8007fb8 <siprintf>
					 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001290:	0018      	movs	r0, r3
 8001292:	f7fe ff37 	bl	8000104 <strlen>
 8001296:	0003      	movs	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	2301      	movs	r3, #1
 800129c:	425b      	negs	r3, r3
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80012a2:	f004 fb0b 	bl	80058bc <HAL_UART_Transmit>
	 }
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	50000800 	.word	0x50000800
 80012b4:	40001000 	.word	0x40001000
 80012b8:	50000400 	.word	0x50000400
 80012bc:	40001400 	.word	0x40001400
 80012c0:	40002000 	.word	0x40002000
 80012c4:	2000039c 	.word	0x2000039c
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000398 	.word	0x20000398
 80012d0:	080089e0 	.word	0x080089e0
 80012d4:	2000035c 	.word	0x2000035c
 80012d8:	200002b0 	.word	0x200002b0

080012dc <HAL_UART_RxCpltCallback>:

	 /* UART Receive Interrupt Handler */
	 // Handles receiving of bytes
	 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

		 if (stateTracker == 1){
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_UART_RxCpltCallback+0xa4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d133      	bne.n	8001354 <HAL_UART_RxCpltCallback+0x78>

			if (uartFlag == 0){
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <HAL_UART_RxCpltCallback+0xa8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d115      	bne.n	8001320 <HAL_UART_RxCpltCallback+0x44>
				sprintf(msg, "Turning ON UART.\r\n");
 80012f4:	4a24      	ldr	r2, [pc, #144]	; (8001388 <HAL_UART_RxCpltCallback+0xac>)
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <HAL_UART_RxCpltCallback+0xb0>)
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f006 fe5c 	bl	8007fb8 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_UART_RxCpltCallback+0xb0>)
 8001302:	0018      	movs	r0, r3
 8001304:	f7fe fefe 	bl	8000104 <strlen>
 8001308:	0003      	movs	r3, r0
 800130a:	b29a      	uxth	r2, r3
 800130c:	2301      	movs	r3, #1
 800130e:	425b      	negs	r3, r3
 8001310:	491e      	ldr	r1, [pc, #120]	; (800138c <HAL_UART_RxCpltCallback+0xb0>)
 8001312:	481f      	ldr	r0, [pc, #124]	; (8001390 <HAL_UART_RxCpltCallback+0xb4>)
 8001314:	f004 fad2 	bl	80058bc <HAL_UART_Transmit>
				uartFlag = 1;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_UART_RxCpltCallback+0xa8>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]

		 } else {
			 sprintf(msg, "Cannot disable, not in State A.\r\n");
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
		 }
	 }
 800131e:	e02b      	b.n	8001378 <HAL_UART_RxCpltCallback+0x9c>
			} else if (uartFlag == 1) {
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_RxCpltCallback+0xa8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d127      	bne.n	8001378 <HAL_UART_RxCpltCallback+0x9c>
				sprintf(msg, "Turning OFF UART.\r\n");
 8001328:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <HAL_UART_RxCpltCallback+0xb8>)
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_UART_RxCpltCallback+0xb0>)
 800132c:	0011      	movs	r1, r2
 800132e:	0018      	movs	r0, r3
 8001330:	f006 fe42 	bl	8007fb8 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_UART_RxCpltCallback+0xb0>)
 8001336:	0018      	movs	r0, r3
 8001338:	f7fe fee4 	bl	8000104 <strlen>
 800133c:	0003      	movs	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	2301      	movs	r3, #1
 8001342:	425b      	negs	r3, r3
 8001344:	4911      	ldr	r1, [pc, #68]	; (800138c <HAL_UART_RxCpltCallback+0xb0>)
 8001346:	4812      	ldr	r0, [pc, #72]	; (8001390 <HAL_UART_RxCpltCallback+0xb4>)
 8001348:	f004 fab8 	bl	80058bc <HAL_UART_Transmit>
				uartFlag = 0;
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_UART_RxCpltCallback+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
	 }
 8001352:	e011      	b.n	8001378 <HAL_UART_RxCpltCallback+0x9c>
			 sprintf(msg, "Cannot disable, not in State A.\r\n");
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_UART_RxCpltCallback+0xbc>)
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_UART_RxCpltCallback+0xb0>)
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f006 fe2c 	bl	8007fb8 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_UART_RxCpltCallback+0xb0>)
 8001362:	0018      	movs	r0, r3
 8001364:	f7fe fece 	bl	8000104 <strlen>
 8001368:	0003      	movs	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	2301      	movs	r3, #1
 800136e:	425b      	negs	r3, r3
 8001370:	4906      	ldr	r1, [pc, #24]	; (800138c <HAL_UART_RxCpltCallback+0xb0>)
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <HAL_UART_RxCpltCallback+0xb4>)
 8001374:	f004 faa2 	bl	80058bc <HAL_UART_Transmit>
	 }
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000039c 	.word	0x2000039c
 8001384:	20000000 	.word	0x20000000
 8001388:	08008a14 	.word	0x08008a14
 800138c:	20000344 	.word	0x20000344
 8001390:	200002b0 	.word	0x200002b0
 8001394:	08008a28 	.word	0x08008a28
 8001398:	08008a3c 	.word	0x08008a3c

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	2201      	movs	r2, #1
 80013c0:	4013      	ands	r3, r2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_MspInit+0x4c>)
 80013c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_MspInit+0x4c>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0549      	lsls	r1, r1, #21
 80013d0:	430a      	orrs	r2, r1
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_MspInit+0x4c>)
 80013d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	055b      	lsls	r3, r3, #21
 80013dc:	4013      	ands	r3, r2
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80013e2:	23c0      	movs	r3, #192	; 0xc0
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 fb42 	bl	8001a70 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b08b      	sub	sp, #44	; 0x2c
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	2414      	movs	r4, #20
 8001402:	193b      	adds	r3, r7, r4
 8001404:	0018      	movs	r0, r3
 8001406:	2314      	movs	r3, #20
 8001408:	001a      	movs	r2, r3
 800140a:	2100      	movs	r1, #0
 800140c:	f006 fdf4 	bl	8007ff8 <memset>
  if(hadc->Instance==ADC1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_ADC_MspInit+0x80>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d129      	bne.n	800146e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_ADC_MspInit+0x84>)
 800141c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_ADC_MspInit+0x84>)
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	0349      	lsls	r1, r1, #13
 8001424:	430a      	orrs	r2, r1
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_ADC_MspInit+0x84>)
 800142a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	035b      	lsls	r3, r3, #13
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_ADC_MspInit+0x84>)
 8001438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_ADC_MspInit+0x84>)
 800143c:	2101      	movs	r1, #1
 800143e:	430a      	orrs	r2, r1
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_ADC_MspInit+0x84>)
 8001444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001446:	2201      	movs	r2, #1
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 800144e:	193b      	adds	r3, r7, r4
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001454:	193b      	adds	r3, r7, r4
 8001456:	2203      	movs	r2, #3
 8001458:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	193b      	adds	r3, r7, r4
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001460:	193a      	adds	r2, r7, r4
 8001462:	23a0      	movs	r3, #160	; 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	0011      	movs	r1, r2
 8001468:	0018      	movs	r0, r3
 800146a:	f001 fb15 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b00b      	add	sp, #44	; 0x2c
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40012400 	.word	0x40012400
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b097      	sub	sp, #92	; 0x5c
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	2344      	movs	r3, #68	; 0x44
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	0018      	movs	r0, r3
 800148e:	2314      	movs	r3, #20
 8001490:	001a      	movs	r2, r3
 8001492:	2100      	movs	r1, #0
 8001494:	f006 fdb0 	bl	8007ff8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001498:	2410      	movs	r4, #16
 800149a:	193b      	adds	r3, r7, r4
 800149c:	0018      	movs	r0, r3
 800149e:	2334      	movs	r3, #52	; 0x34
 80014a0:	001a      	movs	r2, r3
 80014a2:	2100      	movs	r1, #0
 80014a4:	f006 fda8 	bl	8007ff8 <memset>
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_I2C_MspInit+0xb8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d13e      	bne.n	8001530 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014b2:	193b      	adds	r3, r7, r4
 80014b4:	2220      	movs	r2, #32
 80014b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014b8:	193b      	adds	r3, r7, r4
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	0018      	movs	r0, r3
 80014c2:	f002 fe59 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	1e03      	subs	r3, r0, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014ca:	f7ff ff67 	bl	800139c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_I2C_MspInit+0xbc>)
 80014d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_I2C_MspInit+0xbc>)
 80014d4:	2102      	movs	r1, #2
 80014d6:	430a      	orrs	r2, r1
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_I2C_MspInit+0xbc>)
 80014dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014de:	2202      	movs	r2, #2
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014e6:	2144      	movs	r1, #68	; 0x44
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	22c0      	movs	r2, #192	; 0xc0
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2212      	movs	r2, #18
 80014f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2206      	movs	r2, #6
 8001506:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	187b      	adds	r3, r7, r1
 800150a:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_I2C_MspInit+0xc0>)
 800150c:	0019      	movs	r1, r3
 800150e:	0010      	movs	r0, r2
 8001510:	f001 fac2 	bl	8002a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_I2C_MspInit+0xbc>)
 8001516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_I2C_MspInit+0xbc>)
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	0389      	lsls	r1, r1, #14
 800151e:	430a      	orrs	r2, r1
 8001520:	63da      	str	r2, [r3, #60]	; 0x3c
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_I2C_MspInit+0xbc>)
 8001524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	039b      	lsls	r3, r3, #14
 800152a:	4013      	ands	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b017      	add	sp, #92	; 0x5c
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	40005400 	.word	0x40005400
 800153c:	40021000 	.word	0x40021000
 8001540:	50000400 	.word	0x50000400

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	05db      	lsls	r3, r3, #23
 8001554:	429a      	cmp	r2, r3
 8001556:	d114      	bne.n	8001582 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001558:	4b3c      	ldr	r3, [pc, #240]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 800155a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800155c:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 800155e:	2101      	movs	r1, #1
 8001560:	430a      	orrs	r2, r1
 8001562:	63da      	str	r2, [r3, #60]	; 0x3c
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 8001566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001568:	2201      	movs	r2, #1
 800156a:	4013      	ands	r3, r2
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	200f      	movs	r0, #15
 8001576:	f001 f991 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800157a:	200f      	movs	r0, #15
 800157c:	f001 f9a3 	bl	80028c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001580:	e060      	b.n	8001644 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a32      	ldr	r2, [pc, #200]	; (8001650 <HAL_TIM_Base_MspInit+0x10c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d10c      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 800158e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 8001592:	2102      	movs	r1, #2
 8001594:	430a      	orrs	r2, r1
 8001596:	63da      	str	r2, [r3, #60]	; 0x3c
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
}
 80015a4:	e04e      	b.n	8001644 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM6)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a2a      	ldr	r2, [pc, #168]	; (8001654 <HAL_TIM_Base_MspInit+0x110>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d114      	bne.n	80015da <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 80015b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 80015b6:	2110      	movs	r1, #16
 80015b8:	430a      	orrs	r2, r1
 80015ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 80015be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c0:	2210      	movs	r2, #16
 80015c2:	4013      	ands	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	2011      	movs	r0, #17
 80015ce:	f001 f965 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80015d2:	2011      	movs	r0, #17
 80015d4:	f001 f977 	bl	80028c6 <HAL_NVIC_EnableIRQ>
}
 80015d8:	e034      	b.n	8001644 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM7)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_TIM_Base_MspInit+0x114>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d114      	bne.n	800160e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 80015e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 80015ea:	2120      	movs	r1, #32
 80015ec:	430a      	orrs	r2, r1
 80015ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 80015f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f4:	2220      	movs	r2, #32
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2012      	movs	r0, #18
 8001602:	f001 f94b 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8001606:	2012      	movs	r0, #18
 8001608:	f001 f95d 	bl	80028c6 <HAL_NVIC_EnableIRQ>
}
 800160c:	e01a      	b.n	8001644 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM14)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_TIM_Base_MspInit+0x118>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d115      	bne.n	8001644 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 800161a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 800161e:	2180      	movs	r1, #128	; 0x80
 8001620:	0209      	lsls	r1, r1, #8
 8001622:	430a      	orrs	r2, r1
 8001624:	641a      	str	r2, [r3, #64]	; 0x40
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_TIM_Base_MspInit+0x108>)
 8001628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2013      	movs	r0, #19
 800163a:	f001 f92f 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800163e:	2013      	movs	r0, #19
 8001640:	f001 f941 	bl	80028c6 <HAL_NVIC_EnableIRQ>
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b008      	add	sp, #32
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40021000 	.word	0x40021000
 8001650:	40000400 	.word	0x40000400
 8001654:	40001000 	.word	0x40001000
 8001658:	40001400 	.word	0x40001400
 800165c:	40002000 	.word	0x40002000

08001660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	240c      	movs	r4, #12
 800166a:	193b      	adds	r3, r7, r4
 800166c:	0018      	movs	r0, r3
 800166e:	2314      	movs	r3, #20
 8001670:	001a      	movs	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f006 fcc0 	bl	8007ff8 <memset>
  if(htim->Instance==TIM3)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <HAL_TIM_MspPostInit+0x70>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d122      	bne.n	80016c8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_TIM_MspPostInit+0x74>)
 8001684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_TIM_MspPostInit+0x74>)
 8001688:	2101      	movs	r1, #1
 800168a:	430a      	orrs	r2, r1
 800168c:	635a      	str	r2, [r3, #52]	; 0x34
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_TIM_MspPostInit+0x74>)
 8001690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001692:	2201      	movs	r2, #1
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800169a:	0021      	movs	r1, r4
 800169c:	187b      	adds	r3, r7, r1
 800169e:	2240      	movs	r2, #64	; 0x40
 80016a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	2202      	movs	r2, #2
 80016a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	187b      	adds	r3, r7, r1
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	2201      	movs	r2, #1
 80016b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	187a      	adds	r2, r7, r1
 80016bc:	23a0      	movs	r3, #160	; 0xa0
 80016be:	05db      	lsls	r3, r3, #23
 80016c0:	0011      	movs	r1, r2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f001 f9e8 	bl	8002a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b009      	add	sp, #36	; 0x24
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	40000400 	.word	0x40000400
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b097      	sub	sp, #92	; 0x5c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	2344      	movs	r3, #68	; 0x44
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	0018      	movs	r0, r3
 80016e6:	2314      	movs	r3, #20
 80016e8:	001a      	movs	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	f006 fc84 	bl	8007ff8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	2410      	movs	r4, #16
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	0018      	movs	r0, r3
 80016f6:	2334      	movs	r3, #52	; 0x34
 80016f8:	001a      	movs	r2, r3
 80016fa:	2100      	movs	r1, #0
 80016fc:	f006 fc7c 	bl	8007ff8 <memset>
  if(huart->Instance==USART2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_UART_MspInit+0xc8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d146      	bne.n	8001798 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800170a:	193b      	adds	r3, r7, r4
 800170c:	2202      	movs	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001710:	193b      	adds	r3, r7, r4
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001716:	193b      	adds	r3, r7, r4
 8001718:	0018      	movs	r0, r3
 800171a:	f002 fd2d 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001722:	f7ff fe3b 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_UART_MspInit+0xcc>)
 8001728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_UART_MspInit+0xcc>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0289      	lsls	r1, r1, #10
 8001730:	430a      	orrs	r2, r1
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_UART_MspInit+0xcc>)
 8001736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_UART_MspInit+0xcc>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_UART_MspInit+0xcc>)
 8001748:	2101      	movs	r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_MspInit+0xcc>)
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	2201      	movs	r2, #1
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800175a:	2144      	movs	r1, #68	; 0x44
 800175c:	187b      	adds	r3, r7, r1
 800175e:	220c      	movs	r2, #12
 8001760:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2202      	movs	r2, #2
 8001766:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	187b      	adds	r3, r7, r1
 800176a:	2201      	movs	r2, #1
 800176c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	187b      	adds	r3, r7, r1
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001774:	187b      	adds	r3, r7, r1
 8001776:	2201      	movs	r2, #1
 8001778:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	187a      	adds	r2, r7, r1
 800177c:	23a0      	movs	r3, #160	; 0xa0
 800177e:	05db      	lsls	r3, r3, #23
 8001780:	0011      	movs	r1, r2
 8001782:	0018      	movs	r0, r3
 8001784:	f001 f988 	bl	8002a98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	201c      	movs	r0, #28
 800178e:	f001 f885 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001792:	201c      	movs	r0, #28
 8001794:	f001 f897 	bl	80028c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b017      	add	sp, #92	; 0x5c
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	40004400 	.word	0x40004400
 80017a4:	40021000 	.word	0x40021000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 f910 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <TIM2_IRQHandler+0x14>)
 80017de:	0018      	movs	r0, r3
 80017e0:	f003 f880 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	20000134 	.word	0x20000134

080017f0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f003 f874 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	200001cc 	.word	0x200001cc

08001808 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <TIM7_LPTIM2_IRQHandler+0x14>)
 800180e:	0018      	movs	r0, r3
 8001810:	f003 f868 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	20000218 	.word	0x20000218

08001820 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <TIM14_IRQHandler+0x14>)
 8001826:	0018      	movs	r0, r3
 8001828:	f003 f85c 	bl	80048e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	20000264 	.word	0x20000264

08001838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <USART2_IRQHandler+0x14>)
 800183e:	0018      	movs	r0, r3
 8001840:	f004 f93e 	bl	8005ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	200002b0 	.word	0x200002b0

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	18d3      	adds	r3, r2, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f006 fbc2 	bl	8008008 <__errno>
 8001884:	0003      	movs	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	2301      	movs	r3, #1
 800188c:	425b      	negs	r3, r3
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	18d2      	adds	r2, r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	0018      	movs	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b006      	add	sp, #24
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20009000 	.word	0x20009000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	200003a0 	.word	0x200003a0
 80018b8:	200004f8 	.word	0x200004f8

080018bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018cc:	f7ff fff6 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	; (8001908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	; (800190c <LoopForever+0xe>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	; (8001914 <LoopForever+0x16>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018f6:	f006 fb8d 	bl	8008014 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80018fa:	f7fe fea1 	bl	8000640 <main>

080018fe <LoopForever>:

LoopForever:
  b LoopForever
 80018fe:	e7fe      	b.n	80018fe <LoopForever>
  ldr   r0, =_estack
 8001900:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800190c:	08008b9c 	.word	0x08008b9c
  ldr r2, =_sbss
 8001910:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001914:	200004f4 	.word	0x200004f4

08001918 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_COMP_IRQHandler>
	...

0800191c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_Init+0x3c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_Init+0x3c>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0049      	lsls	r1, r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f810 	bl	800195c <HAL_InitTick>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d003      	beq.n	8001948 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001940:	1dfb      	adds	r3, r7, #7
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e001      	b.n	800194c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff fd2e 	bl	80013a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	781b      	ldrb	r3, [r3, #0]
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40022000 	.word	0x40022000

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001964:	230f      	movs	r3, #15
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_InitTick+0x88>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02b      	beq.n	80019cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_InitTick+0x8c>)
 8001976:	681c      	ldr	r4, [r3, #0]
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_InitTick+0x88>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	0019      	movs	r1, r3
 800197e:	23fa      	movs	r3, #250	; 0xfa
 8001980:	0098      	lsls	r0, r3, #2
 8001982:	f7fe fbd1 	bl	8000128 <__udivsi3>
 8001986:	0003      	movs	r3, r0
 8001988:	0019      	movs	r1, r3
 800198a:	0020      	movs	r0, r4
 800198c:	f7fe fbcc 	bl	8000128 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	0018      	movs	r0, r3
 8001994:	f000 ffa7 	bl	80028e6 <HAL_SYSTICK_Config>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d112      	bne.n	80019c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d80a      	bhi.n	80019b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	2301      	movs	r3, #1
 80019a6:	425b      	negs	r3, r3
 80019a8:	2200      	movs	r2, #0
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 ff76 	bl	800289c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_InitTick+0x90>)
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e00d      	b.n	80019d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80019b8:	230f      	movs	r3, #15
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	e008      	b.n	80019d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019c2:	230f      	movs	r3, #15
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e003      	b.n	80019d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019cc:	230f      	movs	r3, #15
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80019d4:	230f      	movs	r3, #15
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	781b      	ldrb	r3, [r3, #0]
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b005      	add	sp, #20
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	2000000c 	.word	0x2000000c
 80019e8:	20000004 	.word	0x20000004
 80019ec:	20000008 	.word	0x20000008

080019f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_IncTick+0x1c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	001a      	movs	r2, r3
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_IncTick+0x20>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	18d2      	adds	r2, r2, r3
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_IncTick+0x20>)
 8001a02:	601a      	str	r2, [r3, #0]
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	2000000c 	.word	0x2000000c
 8001a10:	200003a4 	.word	0x200003a4

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <HAL_GetTick+0x10>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	200003a4 	.word	0x200003a4

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff fff0 	bl	8001a14 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_Delay+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	001a      	movs	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	189b      	adds	r3, r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	f7ff ffe0 	bl	8001a14 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b004      	add	sp, #16
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	2000000c 	.word	0x2000000c

08001a70 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40010000 	.word	0x40010000
 8001a98:	fffff9ff 	.word	0xfffff9ff

08001a9c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001aac:	401a      	ands	r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	601a      	str	r2, [r3, #0]
}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b002      	add	sp, #8
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	fe3fffff 	.word	0xfe3fffff

08001ac4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	23e0      	movs	r3, #224	; 0xe0
 8001ad2:	045b      	lsls	r3, r3, #17
 8001ad4:	4013      	ands	r3, r2
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}

08001ade <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	2104      	movs	r1, #4
 8001af2:	400a      	ands	r2, r1
 8001af4:	2107      	movs	r1, #7
 8001af6:	4091      	lsls	r1, r2
 8001af8:	000a      	movs	r2, r1
 8001afa:	43d2      	mvns	r2, r2
 8001afc:	401a      	ands	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2104      	movs	r1, #4
 8001b02:	400b      	ands	r3, r1
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4099      	lsls	r1, r3
 8001b08:	000b      	movs	r3, r1
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b004      	add	sp, #16
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	2104      	movs	r1, #4
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	2107      	movs	r1, #7
 8001b2e:	4091      	lsls	r1, r2
 8001b30:	000a      	movs	r2, r1
 8001b32:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2104      	movs	r1, #4
 8001b38:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001b3a:	40da      	lsrs	r2, r3
 8001b3c:	0013      	movs	r3, r2
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b002      	add	sp, #8
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	23c0      	movs	r3, #192	; 0xc0
 8001b54:	011b      	lsls	r3, r3, #4
 8001b56:	4013      	ands	r3, r2
 8001b58:	d101      	bne.n	8001b5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	211f      	movs	r1, #31
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	210f      	movs	r1, #15
 8001b80:	4091      	lsls	r1, r2
 8001b82:	000a      	movs	r2, r1
 8001b84:	43d2      	mvns	r2, r2
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0e9b      	lsrs	r3, r3, #26
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	4019      	ands	r1, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	201f      	movs	r0, #31
 8001b94:	4003      	ands	r3, r0
 8001b96:	4099      	lsls	r1, r3
 8001b98:	000b      	movs	r3, r1
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b004      	add	sp, #16
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	035b      	lsls	r3, r3, #13
 8001bba:	0b5b      	lsrs	r3, r3, #13
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	0352      	lsls	r2, r2, #13
 8001bdc:	0b52      	lsrs	r2, r2, #13
 8001bde:	43d2      	mvns	r2, r2
 8001be0:	401a      	ands	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b002      	add	sp, #8
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	0212      	lsls	r2, r2, #8
 8001c04:	43d2      	mvns	r2, r2
 8001c06:	401a      	ands	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
 8001c10:	4904      	ldr	r1, [pc, #16]	; (8001c24 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001c12:	400b      	ands	r3, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b004      	add	sp, #16
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	07ffff00 	.word	0x07ffff00

08001c28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <LL_ADC_EnableInternalRegulator+0x24>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	0552      	lsls	r2, r2, #21
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	6fffffe8 	.word	0x6fffffe8

08001c50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	055b      	lsls	r3, r3, #21
 8001c60:	401a      	ands	r2, r3
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	055b      	lsls	r3, r3, #21
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d101      	bne.n	8001c6e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b002      	add	sp, #8
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <LL_ADC_Enable+0x20>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	2201      	movs	r2, #1
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	7fffffe8 	.word	0x7fffffe8

08001c9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <LL_ADC_IsEnabled+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_ADC_IsEnabled+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <LL_ADC_REG_StartConversion+0x20>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	7fffffe8 	.word	0x7fffffe8

08001ce4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d101      	bne.n	8001cfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	231f      	movs	r3, #31
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e17f      	b.n	800202e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7ff fb5d 	bl	80013f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2254      	movs	r2, #84	; 0x54
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff ff7d 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001d56:	1e03      	subs	r3, r0, #0
 8001d58:	d115      	bne.n	8001d86 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7ff ff62 	bl	8001c28 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d64:	4bb4      	ldr	r3, [pc, #720]	; (8002038 <HAL_ADC_Init+0x330>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	49b4      	ldr	r1, [pc, #720]	; (800203c <HAL_ADC_Init+0x334>)
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f7fe f9dc 	bl	8000128 <__udivsi3>
 8001d70:	0003      	movs	r3, r0
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7ff ff60 	bl	8001c50 <LL_ADC_IsInternalRegulatorEnabled>
 8001d90:	1e03      	subs	r3, r0, #0
 8001d92:	d10f      	bne.n	8001db4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	2210      	movs	r2, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da4:	2201      	movs	r2, #1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001dac:	231f      	movs	r3, #31
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff ff93 	bl	8001ce4 <LL_ADC_REG_IsConversionOngoing>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d000      	beq.n	8001dce <HAL_ADC_Init+0xc6>
 8001dcc:	e122      	b.n	8002014 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d000      	beq.n	8001dd6 <HAL_ADC_Init+0xce>
 8001dd4:	e11e      	b.n	8002014 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	4a99      	ldr	r2, [pc, #612]	; (8002040 <HAL_ADC_Init+0x338>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2202      	movs	r2, #2
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f7ff ff56 	bl	8001c9c <LL_ADC_IsEnabled>
 8001df0:	1e03      	subs	r3, r0, #0
 8001df2:	d000      	beq.n	8001df6 <HAL_ADC_Init+0xee>
 8001df4:	e0ad      	b.n	8001f52 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7e1b      	ldrb	r3, [r3, #24]
 8001dfe:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001e00:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7e5b      	ldrb	r3, [r3, #25]
 8001e06:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e08:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7e9b      	ldrb	r3, [r3, #26]
 8001e0e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e10:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <HAL_ADC_Init+0x118>
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	015b      	lsls	r3, r3, #5
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_Init+0x11a>
 8001e20:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e22:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e28:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da04      	bge.n	8001e3c <HAL_ADC_Init+0x134>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	e001      	b.n	8001e40 <HAL_ADC_Init+0x138>
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001e40:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	5c5b      	ldrb	r3, [r3, r1]
 8001e48:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e4a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	5c9b      	ldrb	r3, [r3, r2]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d115      	bne.n	8001e88 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7e9b      	ldrb	r3, [r3, #26]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	0252      	lsls	r2, r2, #9
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	e00b      	b.n	8001e88 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	2220      	movs	r2, #32
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	2201      	movs	r2, #1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e94:	23e0      	movs	r3, #224	; 0xe0
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a65      	ldr	r2, [pc, #404]	; (8002044 <HAL_ADC_Init+0x33c>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	0f9b      	lsrs	r3, r3, #30
 8001ec2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	223c      	movs	r2, #60	; 0x3c
 8001ed4:	5c9b      	ldrb	r3, [r3, r2]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d111      	bne.n	8001efe <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0f9b      	lsrs	r3, r3, #30
 8001ee0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ee6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001eec:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001ef2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	4a50      	ldr	r2, [pc, #320]	; (8002048 <HAL_ADC_Init+0x340>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	23c0      	movs	r3, #192	; 0xc0
 8001f1a:	061b      	lsls	r3, r3, #24
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d018      	beq.n	8001f52 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	05db      	lsls	r3, r3, #23
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d012      	beq.n	8001f52 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	061b      	lsls	r3, r3, #24
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d00c      	beq.n	8001f52 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001f38:	4b44      	ldr	r3, [pc, #272]	; (800204c <HAL_ADC_Init+0x344>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a44      	ldr	r2, [pc, #272]	; (8002050 <HAL_ADC_Init+0x348>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	23f0      	movs	r3, #240	; 0xf0
 8001f48:	039b      	lsls	r3, r3, #14
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_ADC_Init+0x344>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f7ff fdbe 	bl	8001ade <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	493a      	ldr	r1, [pc, #232]	; (8002054 <HAL_ADC_Init+0x34c>)
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	f7ff fdb6 	bl	8001ade <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2110      	movs	r1, #16
 8001f86:	4249      	negs	r1, r1
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f8c:	e018      	b.n	8001fc0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	039b      	lsls	r3, r3, #14
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d112      	bne.n	8001fc0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	221c      	movs	r2, #28
 8001faa:	4013      	ands	r3, r2
 8001fac:	2210      	movs	r2, #16
 8001fae:	4252      	negs	r2, r2
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7ff fda6 	bl	8001b18 <LL_ADC_GetSamplingTimeCommonChannels>
 8001fcc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d10b      	bne.n	8001fee <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001fec:	e01c      	b.n	8002028 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	2212      	movs	r2, #18
 8001ff4:	4393      	bics	r3, r2
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2201      	movs	r2, #1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800200a:	231f      	movs	r3, #31
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002012:	e009      	b.n	8002028 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	2210      	movs	r2, #16
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002020:	231f      	movs	r3, #31
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002028:	231f      	movs	r3, #31
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	781b      	ldrb	r3, [r3, #0]
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b008      	add	sp, #32
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	20000004 	.word	0x20000004
 800203c:	00030d40 	.word	0x00030d40
 8002040:	fffffefd 	.word	0xfffffefd
 8002044:	ffde0201 	.word	0xffde0201
 8002048:	1ffffc02 	.word	0x1ffffc02
 800204c:	40012708 	.word	0x40012708
 8002050:	ffc3ffff 	.word	0xffc3ffff
 8002054:	07ffff04 	.word	0x07ffff04

08002058 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b08      	cmp	r3, #8
 8002068:	d102      	bne.n	8002070 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800206a:	2308      	movs	r3, #8
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e00f      	b.n	8002090 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	4013      	ands	r3, r2
 800207a:	d007      	beq.n	800208c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	2220      	movs	r2, #32
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e072      	b.n	8002172 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800208c:	2304      	movs	r3, #4
 800208e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002090:	f7ff fcc0 	bl	8001a14 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002098:	e01f      	b.n	80020da <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	d01c      	beq.n	80020da <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80020a0:	f7ff fcb8 	bl	8001a14 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d302      	bcc.n	80020b6 <HAL_ADC_PollForConversion+0x5e>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d111      	bne.n	80020da <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	d10b      	bne.n	80020da <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	2204      	movs	r2, #4
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2254      	movs	r2, #84	; 0x54
 80020d2:	2100      	movs	r1, #0
 80020d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e04b      	b.n	8002172 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	d0d9      	beq.n	800209a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	0092      	lsls	r2, r2, #2
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff fd24 	bl	8001b46 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020fe:	1e03      	subs	r3, r0, #0
 8002100:	d02e      	beq.n	8002160 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7e9b      	ldrb	r3, [r3, #26]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d12a      	bne.n	8002160 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2208      	movs	r2, #8
 8002112:	4013      	ands	r3, r2
 8002114:	2b08      	cmp	r3, #8
 8002116:	d123      	bne.n	8002160 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff fde1 	bl	8001ce4 <LL_ADC_REG_IsConversionOngoing>
 8002122:	1e03      	subs	r3, r0, #0
 8002124:	d110      	bne.n	8002148 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	210c      	movs	r1, #12
 8002132:	438a      	bics	r2, r1
 8002134:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_ADC_PollForConversion+0x124>)
 800213c:	4013      	ands	r3, r2
 800213e:	2201      	movs	r2, #1
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	659a      	str	r2, [r3, #88]	; 0x58
 8002146:	e00b      	b.n	8002160 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	2220      	movs	r2, #32
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	2201      	movs	r2, #1
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7e1b      	ldrb	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d103      	bne.n	8002170 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	220c      	movs	r2, #12
 800216e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b004      	add	sp, #16
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	fffffefe 	.word	0xfffffefe

08002180 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff fda9 	bl	8001ce4 <LL_ADC_REG_IsConversionOngoing>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d15f      	bne.n	8002256 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2254      	movs	r2, #84	; 0x54
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_Start_IT+0x24>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e05f      	b.n	8002264 <HAL_ADC_Start_IT+0xe4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2254      	movs	r2, #84	; 0x54
 80021a8:	2101      	movs	r1, #1
 80021aa:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021ac:	250f      	movs	r5, #15
 80021ae:	197c      	adds	r4, r7, r5
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 fa40 	bl	8002638 <ADC_Enable>
 80021b8:	0003      	movs	r3, r0
 80021ba:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021bc:	197b      	adds	r3, r7, r5
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d143      	bne.n	800224c <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	4a28      	ldr	r2, [pc, #160]	; (800226c <HAL_ADC_Start_IT+0xec>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	0052      	lsls	r2, r2, #1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	221c      	movs	r2, #28
 80021e2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2254      	movs	r2, #84	; 0x54
 80021e8:	2100      	movs	r1, #0
 80021ea:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	211c      	movs	r1, #28
 80021f8:	438a      	bics	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d108      	bne.n	8002216 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2108      	movs	r1, #8
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
          break;
 8002214:	e008      	b.n	8002228 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2104      	movs	r1, #4
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
          break;
 8002226:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2110      	movs	r1, #16
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff fd3b 	bl	8001cc0 <LL_ADC_REG_StartConversion>
 800224a:	e008      	b.n	800225e <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2254      	movs	r2, #84	; 0x54
 8002250:	2100      	movs	r1, #0
 8002252:	5499      	strb	r1, [r3, r2]
 8002254:	e003      	b.n	800225e <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002256:	230f      	movs	r3, #15
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800225e:	230f      	movs	r3, #15
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	781b      	ldrb	r3, [r3, #0]
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b004      	add	sp, #16
 800226a:	bdb0      	pop	{r4, r5, r7, pc}
 800226c:	fffff0fe 	.word	0xfffff0fe

08002270 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b002      	add	sp, #8
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002292:	2317      	movs	r3, #23
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2254      	movs	r2, #84	; 0x54
 80022a2:	5c9b      	ldrb	r3, [r3, r2]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x24>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e1c0      	b.n	800262e <HAL_ADC_ConfigChannel+0x3a6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2254      	movs	r2, #84	; 0x54
 80022b0:	2101      	movs	r1, #1
 80022b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff fd13 	bl	8001ce4 <LL_ADC_REG_IsConversionOngoing>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d000      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0x3c>
 80022c2:	e1a3      	b.n	800260c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d100      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x46>
 80022cc:	e143      	b.n	8002556 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d004      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022de:	4ac1      	ldr	r2, [pc, #772]	; (80025e4 <HAL_ADC_ConfigChannel+0x35c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d108      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0019      	movs	r1, r3
 80022ee:	0010      	movs	r0, r2
 80022f0:	f7ff fc5a 	bl	8001ba8 <LL_ADC_REG_SetSequencerChAdd>
 80022f4:	e0c9      	b.n	800248a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	211f      	movs	r1, #31
 8002300:	400b      	ands	r3, r1
 8002302:	210f      	movs	r1, #15
 8002304:	4099      	lsls	r1, r3
 8002306:	000b      	movs	r3, r1
 8002308:	43db      	mvns	r3, r3
 800230a:	4013      	ands	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	035b      	lsls	r3, r3, #13
 8002314:	0b5b      	lsrs	r3, r3, #13
 8002316:	d105      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x9c>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	221f      	movs	r2, #31
 8002320:	4013      	ands	r3, r2
 8002322:	e098      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	4013      	ands	r3, r2
 800232c:	d000      	beq.n	8002330 <HAL_ADC_ConfigChannel+0xa8>
 800232e:	e091      	b.n	8002454 <HAL_ADC_ConfigChannel+0x1cc>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2202      	movs	r2, #2
 8002336:	4013      	ands	r3, r2
 8002338:	d000      	beq.n	800233c <HAL_ADC_ConfigChannel+0xb4>
 800233a:	e089      	b.n	8002450 <HAL_ADC_ConfigChannel+0x1c8>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2204      	movs	r2, #4
 8002342:	4013      	ands	r3, r2
 8002344:	d000      	beq.n	8002348 <HAL_ADC_ConfigChannel+0xc0>
 8002346:	e081      	b.n	800244c <HAL_ADC_ConfigChannel+0x1c4>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2208      	movs	r2, #8
 800234e:	4013      	ands	r3, r2
 8002350:	d000      	beq.n	8002354 <HAL_ADC_ConfigChannel+0xcc>
 8002352:	e079      	b.n	8002448 <HAL_ADC_ConfigChannel+0x1c0>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2210      	movs	r2, #16
 800235a:	4013      	ands	r3, r2
 800235c:	d000      	beq.n	8002360 <HAL_ADC_ConfigChannel+0xd8>
 800235e:	e071      	b.n	8002444 <HAL_ADC_ConfigChannel+0x1bc>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2220      	movs	r2, #32
 8002366:	4013      	ands	r3, r2
 8002368:	d000      	beq.n	800236c <HAL_ADC_ConfigChannel+0xe4>
 800236a:	e069      	b.n	8002440 <HAL_ADC_ConfigChannel+0x1b8>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	4013      	ands	r3, r2
 8002374:	d000      	beq.n	8002378 <HAL_ADC_ConfigChannel+0xf0>
 8002376:	e061      	b.n	800243c <HAL_ADC_ConfigChannel+0x1b4>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	4013      	ands	r3, r2
 8002380:	d000      	beq.n	8002384 <HAL_ADC_ConfigChannel+0xfc>
 8002382:	e059      	b.n	8002438 <HAL_ADC_ConfigChannel+0x1b0>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d151      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1ac>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4013      	ands	r3, r2
 800239a:	d149      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1a8>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4013      	ands	r3, r2
 80023a6:	d141      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1a4>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4013      	ands	r3, r2
 80023b2:	d139      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1a0>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	4013      	ands	r3, r2
 80023be:	d131      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x19c>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	019b      	lsls	r3, r3, #6
 80023c8:	4013      	ands	r3, r2
 80023ca:	d129      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x198>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	01db      	lsls	r3, r3, #7
 80023d4:	4013      	ands	r3, r2
 80023d6:	d121      	bne.n	800241c <HAL_ADC_ConfigChannel+0x194>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	4013      	ands	r3, r2
 80023e2:	d119      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x190>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	4013      	ands	r3, r2
 80023ee:	d111      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x18c>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	029b      	lsls	r3, r3, #10
 80023f8:	4013      	ands	r3, r2
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x188>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	02db      	lsls	r3, r3, #11
 8002404:	4013      	ands	r3, r2
 8002406:	d001      	beq.n	800240c <HAL_ADC_ConfigChannel+0x184>
 8002408:	2312      	movs	r3, #18
 800240a:	e024      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 800240c:	2300      	movs	r3, #0
 800240e:	e022      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002410:	2311      	movs	r3, #17
 8002412:	e020      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002414:	2310      	movs	r3, #16
 8002416:	e01e      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002418:	230f      	movs	r3, #15
 800241a:	e01c      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 800241c:	230e      	movs	r3, #14
 800241e:	e01a      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002420:	230d      	movs	r3, #13
 8002422:	e018      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002424:	230c      	movs	r3, #12
 8002426:	e016      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002428:	230b      	movs	r3, #11
 800242a:	e014      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 800242c:	230a      	movs	r3, #10
 800242e:	e012      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002430:	2309      	movs	r3, #9
 8002432:	e010      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002434:	2308      	movs	r3, #8
 8002436:	e00e      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002438:	2307      	movs	r3, #7
 800243a:	e00c      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 800243c:	2306      	movs	r3, #6
 800243e:	e00a      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002440:	2305      	movs	r3, #5
 8002442:	e008      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002444:	2304      	movs	r3, #4
 8002446:	e006      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002448:	2303      	movs	r3, #3
 800244a:	e004      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 800244c:	2302      	movs	r3, #2
 800244e:	e002      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1ce>
 8002454:	2300      	movs	r3, #0
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	6852      	ldr	r2, [r2, #4]
 800245a:	201f      	movs	r0, #31
 800245c:	4002      	ands	r2, r0
 800245e:	4093      	lsls	r3, r2
 8002460:	000a      	movs	r2, r1
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	429a      	cmp	r2, r3
 8002476:	d808      	bhi.n	800248a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	001a      	movs	r2, r3
 8002486:	f7ff fb6f 	bl	8001b68 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6819      	ldr	r1, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	001a      	movs	r2, r3
 8002498:	f7ff fbaa 	bl	8001bf0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db00      	blt.n	80024a6 <HAL_ADC_ConfigChannel+0x21e>
 80024a4:	e0bc      	b.n	8002620 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024a6:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_ADC_ConfigChannel+0x360>)
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7ff fb0b 	bl	8001ac4 <LL_ADC_GetCommonPathInternalCh>
 80024ae:	0003      	movs	r3, r0
 80024b0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4d      	ldr	r2, [pc, #308]	; (80025ec <HAL_ADC_ConfigChannel+0x364>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d122      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024c4:	d11d      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	0412      	lsls	r2, r2, #16
 80024cc:	4313      	orrs	r3, r2
 80024ce:	4a46      	ldr	r2, [pc, #280]	; (80025e8 <HAL_ADC_ConfigChannel+0x360>)
 80024d0:	0019      	movs	r1, r3
 80024d2:	0010      	movs	r0, r2
 80024d4:	f7ff fae2 	bl	8001a9c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024d8:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <HAL_ADC_ConfigChannel+0x368>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4945      	ldr	r1, [pc, #276]	; (80025f4 <HAL_ADC_ConfigChannel+0x36c>)
 80024de:	0018      	movs	r0, r3
 80024e0:	f7fd fe22 	bl	8000128 <__udivsi3>
 80024e4:	0003      	movs	r3, r0
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	0013      	movs	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	189b      	adds	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024f2:	e002      	b.n	80024fa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002500:	e08e      	b.n	8002620 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a3c      	ldr	r2, [pc, #240]	; (80025f8 <HAL_ADC_ConfigChannel+0x370>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d10e      	bne.n	800252a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	045b      	lsls	r3, r3, #17
 8002512:	4013      	ands	r3, r2
 8002514:	d109      	bne.n	800252a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	0452      	lsls	r2, r2, #17
 800251c:	4313      	orrs	r3, r2
 800251e:	4a32      	ldr	r2, [pc, #200]	; (80025e8 <HAL_ADC_ConfigChannel+0x360>)
 8002520:	0019      	movs	r1, r3
 8002522:	0010      	movs	r0, r2
 8002524:	f7ff faba 	bl	8001a9c <LL_ADC_SetCommonPathInternalCh>
 8002528:	e07a      	b.n	8002620 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a33      	ldr	r2, [pc, #204]	; (80025fc <HAL_ADC_ConfigChannel+0x374>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d000      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x2ae>
 8002534:	e074      	b.n	8002620 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	03db      	lsls	r3, r3, #15
 800253c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800253e:	d000      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x2ba>
 8002540:	e06e      	b.n	8002620 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	03d2      	lsls	r2, r2, #15
 8002548:	4313      	orrs	r3, r2
 800254a:	4a27      	ldr	r2, [pc, #156]	; (80025e8 <HAL_ADC_ConfigChannel+0x360>)
 800254c:	0019      	movs	r1, r3
 800254e:	0010      	movs	r0, r2
 8002550:	f7ff faa4 	bl	8001a9c <LL_ADC_SetCommonPathInternalCh>
 8002554:	e064      	b.n	8002620 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	061b      	lsls	r3, r3, #24
 800255e:	429a      	cmp	r2, r3
 8002560:	d004      	beq.n	800256c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002566:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <HAL_ADC_ConfigChannel+0x35c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d107      	bne.n	800257c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0019      	movs	r1, r3
 8002576:	0010      	movs	r0, r2
 8002578:	f7ff fb27 	bl	8001bca <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	da4d      	bge.n	8002620 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_ADC_ConfigChannel+0x360>)
 8002586:	0018      	movs	r0, r3
 8002588:	f7ff fa9c 	bl	8001ac4 <LL_ADC_GetCommonPathInternalCh>
 800258c:	0003      	movs	r3, r0
 800258e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <HAL_ADC_ConfigChannel+0x364>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d108      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4a18      	ldr	r2, [pc, #96]	; (8002600 <HAL_ADC_ConfigChannel+0x378>)
 800259e:	4013      	ands	r3, r2
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_ADC_ConfigChannel+0x360>)
 80025a2:	0019      	movs	r1, r3
 80025a4:	0010      	movs	r0, r2
 80025a6:	f7ff fa79 	bl	8001a9c <LL_ADC_SetCommonPathInternalCh>
 80025aa:	e039      	b.n	8002620 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_ADC_ConfigChannel+0x370>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d108      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4a12      	ldr	r2, [pc, #72]	; (8002604 <HAL_ADC_ConfigChannel+0x37c>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_ADC_ConfigChannel+0x360>)
 80025be:	0019      	movs	r1, r3
 80025c0:	0010      	movs	r0, r2
 80025c2:	f7ff fa6b 	bl	8001a9c <LL_ADC_SetCommonPathInternalCh>
 80025c6:	e02b      	b.n	8002620 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_ADC_ConfigChannel+0x374>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d126      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <HAL_ADC_ConfigChannel+0x380>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	4a03      	ldr	r2, [pc, #12]	; (80025e8 <HAL_ADC_ConfigChannel+0x360>)
 80025da:	0019      	movs	r1, r3
 80025dc:	0010      	movs	r0, r2
 80025de:	f7ff fa5d 	bl	8001a9c <LL_ADC_SetCommonPathInternalCh>
 80025e2:	e01d      	b.n	8002620 <HAL_ADC_ConfigChannel+0x398>
 80025e4:	80000004 	.word	0x80000004
 80025e8:	40012708 	.word	0x40012708
 80025ec:	b0001000 	.word	0xb0001000
 80025f0:	20000004 	.word	0x20000004
 80025f4:	00030d40 	.word	0x00030d40
 80025f8:	b8004000 	.word	0xb8004000
 80025fc:	b4002000 	.word	0xb4002000
 8002600:	ff7fffff 	.word	0xff7fffff
 8002604:	feffffff 	.word	0xfeffffff
 8002608:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	2220      	movs	r2, #32
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002618:	2317      	movs	r3, #23
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2254      	movs	r2, #84	; 0x54
 8002624:	2100      	movs	r1, #0
 8002626:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002628:	2317      	movs	r3, #23
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	781b      	ldrb	r3, [r3, #0]
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b006      	add	sp, #24
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)

08002638 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0018      	movs	r0, r3
 800264a:	f7ff fb27 	bl	8001c9c <LL_ADC_IsEnabled>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d000      	beq.n	8002654 <ADC_Enable+0x1c>
 8002652:	e069      	b.n	8002728 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4a36      	ldr	r2, [pc, #216]	; (8002734 <ADC_Enable+0xfc>)
 800265c:	4013      	ands	r3, r2
 800265e:	d00d      	beq.n	800267c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	2210      	movs	r2, #16
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002670:	2201      	movs	r2, #1
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e056      	b.n	800272a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff faf9 	bl	8001c78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002686:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <ADC_Enable+0x100>)
 8002688:	0018      	movs	r0, r3
 800268a:	f7ff fa1b 	bl	8001ac4 <LL_ADC_GetCommonPathInternalCh>
 800268e:	0002      	movs	r2, r0
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	4013      	ands	r3, r2
 8002696:	d00f      	beq.n	80026b8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <ADC_Enable+0x104>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4928      	ldr	r1, [pc, #160]	; (8002740 <ADC_Enable+0x108>)
 800269e:	0018      	movs	r0, r3
 80026a0:	f7fd fd42 	bl	8000128 <__udivsi3>
 80026a4:	0003      	movs	r3, r0
 80026a6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80026a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026aa:	e002      	b.n	80026b2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f9      	bne.n	80026ac <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e5b      	ldrb	r3, [r3, #25]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d033      	beq.n	8002728 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80026c0:	f7ff f9a8 	bl	8001a14 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026c8:	e027      	b.n	800271a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7ff fae4 	bl	8001c9c <LL_ADC_IsEnabled>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d104      	bne.n	80026e2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff facb 	bl	8001c78 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026e2:	f7ff f997 	bl	8001a14 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d914      	bls.n	800271a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d00d      	beq.n	800271a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	2210      	movs	r2, #16
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270e:	2201      	movs	r2, #1
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e007      	b.n	800272a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2201      	movs	r2, #1
 8002722:	4013      	ands	r3, r2
 8002724:	2b01      	cmp	r3, #1
 8002726:	d1d0      	bne.n	80026ca <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b004      	add	sp, #16
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	80000017 	.word	0x80000017
 8002738:	40012708 	.word	0x40012708
 800273c:	20000004 	.word	0x20000004
 8002740:	00030d40 	.word	0x00030d40

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	0002      	movs	r2, r0
 800274c:	1dfb      	adds	r3, r7, #7
 800274e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002750:	1dfb      	adds	r3, r7, #7
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b7f      	cmp	r3, #127	; 0x7f
 8002756:	d809      	bhi.n	800276c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	001a      	movs	r2, r3
 800275e:	231f      	movs	r3, #31
 8002760:	401a      	ands	r2, r3
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__NVIC_EnableIRQ+0x30>)
 8002764:	2101      	movs	r1, #1
 8002766:	4091      	lsls	r1, r2
 8002768:	000a      	movs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}
 8002774:	e000e100 	.word	0xe000e100

08002778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	0002      	movs	r2, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002786:	1dfb      	adds	r3, r7, #7
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b7f      	cmp	r3, #127	; 0x7f
 800278c:	d828      	bhi.n	80027e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800278e:	4a2f      	ldr	r2, [pc, #188]	; (800284c <__NVIC_SetPriority+0xd4>)
 8002790:	1dfb      	adds	r3, r7, #7
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b25b      	sxtb	r3, r3
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	33c0      	adds	r3, #192	; 0xc0
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	589b      	ldr	r3, [r3, r2]
 800279e:	1dfa      	adds	r2, r7, #7
 80027a0:	7812      	ldrb	r2, [r2, #0]
 80027a2:	0011      	movs	r1, r2
 80027a4:	2203      	movs	r2, #3
 80027a6:	400a      	ands	r2, r1
 80027a8:	00d2      	lsls	r2, r2, #3
 80027aa:	21ff      	movs	r1, #255	; 0xff
 80027ac:	4091      	lsls	r1, r2
 80027ae:	000a      	movs	r2, r1
 80027b0:	43d2      	mvns	r2, r2
 80027b2:	401a      	ands	r2, r3
 80027b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	019b      	lsls	r3, r3, #6
 80027ba:	22ff      	movs	r2, #255	; 0xff
 80027bc:	401a      	ands	r2, r3
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	0018      	movs	r0, r3
 80027c4:	2303      	movs	r3, #3
 80027c6:	4003      	ands	r3, r0
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027cc:	481f      	ldr	r0, [pc, #124]	; (800284c <__NVIC_SetPriority+0xd4>)
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	430a      	orrs	r2, r1
 80027d8:	33c0      	adds	r3, #192	; 0xc0
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027de:	e031      	b.n	8002844 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <__NVIC_SetPriority+0xd8>)
 80027e2:	1dfb      	adds	r3, r7, #7
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	0019      	movs	r1, r3
 80027e8:	230f      	movs	r3, #15
 80027ea:	400b      	ands	r3, r1
 80027ec:	3b08      	subs	r3, #8
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	3306      	adds	r3, #6
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	18d3      	adds	r3, r2, r3
 80027f6:	3304      	adds	r3, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1dfa      	adds	r2, r7, #7
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	0011      	movs	r1, r2
 8002800:	2203      	movs	r2, #3
 8002802:	400a      	ands	r2, r1
 8002804:	00d2      	lsls	r2, r2, #3
 8002806:	21ff      	movs	r1, #255	; 0xff
 8002808:	4091      	lsls	r1, r2
 800280a:	000a      	movs	r2, r1
 800280c:	43d2      	mvns	r2, r2
 800280e:	401a      	ands	r2, r3
 8002810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	401a      	ands	r2, r3
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	0018      	movs	r0, r3
 8002820:	2303      	movs	r3, #3
 8002822:	4003      	ands	r3, r0
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002828:	4809      	ldr	r0, [pc, #36]	; (8002850 <__NVIC_SetPriority+0xd8>)
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	001c      	movs	r4, r3
 8002830:	230f      	movs	r3, #15
 8002832:	4023      	ands	r3, r4
 8002834:	3b08      	subs	r3, #8
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	430a      	orrs	r2, r1
 800283a:	3306      	adds	r3, #6
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	18c3      	adds	r3, r0, r3
 8002840:	3304      	adds	r3, #4
 8002842:	601a      	str	r2, [r3, #0]
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b003      	add	sp, #12
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	045b      	lsls	r3, r3, #17
 8002864:	429a      	cmp	r2, r3
 8002866:	d301      	bcc.n	800286c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002868:	2301      	movs	r3, #1
 800286a:	e010      	b.n	800288e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <SysTick_Config+0x44>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	3a01      	subs	r2, #1
 8002872:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002874:	2301      	movs	r3, #1
 8002876:	425b      	negs	r3, r3
 8002878:	2103      	movs	r1, #3
 800287a:	0018      	movs	r0, r3
 800287c:	f7ff ff7c 	bl	8002778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SysTick_Config+0x44>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <SysTick_Config+0x44>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b002      	add	sp, #8
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	210f      	movs	r1, #15
 80028a8:	187b      	adds	r3, r7, r1
 80028aa:	1c02      	adds	r2, r0, #0
 80028ac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b25b      	sxtb	r3, r3
 80028b6:	0011      	movs	r1, r2
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7ff ff5d 	bl	8002778 <__NVIC_SetPriority>
}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	0002      	movs	r2, r0
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff ff33 	bl	8002744 <__NVIC_EnableIRQ>
}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7ff ffaf 	bl	8002854 <SysTick_Config>
 80028f6:	0003      	movs	r3, r0
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e050      	b.n	80029b4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2225      	movs	r2, #37	; 0x25
 8002916:	5c9b      	ldrb	r3, [r3, r2]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d008      	beq.n	8002930 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2204      	movs	r2, #4
 8002922:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	; 0x24
 8002928:	2100      	movs	r1, #0
 800292a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e041      	b.n	80029b4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	210e      	movs	r1, #14
 800293c:	438a      	bics	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	491c      	ldr	r1, [pc, #112]	; (80029bc <HAL_DMA_Abort+0xbc>)
 800294c:	400a      	ands	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	438a      	bics	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002960:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_DMA_Abort+0xc0>)
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	221c      	movs	r2, #28
 800296a:	4013      	ands	r3, r2
 800296c:	2201      	movs	r2, #1
 800296e:	409a      	lsls	r2, r3
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_DMA_Abort+0xc0>)
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800297e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00c      	beq.n	80029a2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002992:	490a      	ldr	r1, [pc, #40]	; (80029bc <HAL_DMA_Abort+0xbc>)
 8002994:	400a      	ands	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80029a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2225      	movs	r2, #37	; 0x25
 80029a6:	2101      	movs	r1, #1
 80029a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2224      	movs	r2, #36	; 0x24
 80029ae:	2100      	movs	r1, #0
 80029b0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	fffffeff 	.word	0xfffffeff
 80029c0:	40020000 	.word	0x40020000

080029c4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029cc:	210f      	movs	r1, #15
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2225      	movs	r2, #37	; 0x25
 80029d8:	5c9b      	ldrb	r3, [r3, r2]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d006      	beq.n	80029ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2204      	movs	r2, #4
 80029e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	e049      	b.n	8002a82 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	210e      	movs	r1, #14
 80029fa:	438a      	bics	r2, r1
 80029fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	438a      	bics	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	491d      	ldr	r1, [pc, #116]	; (8002a90 <HAL_DMA_Abort_IT+0xcc>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_DMA_Abort_IT+0xd0>)
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	221c      	movs	r2, #28
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_DMA_Abort_IT+0xd0>)
 8002a30:	430a      	orrs	r2, r1
 8002a32:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a50:	490f      	ldr	r1, [pc, #60]	; (8002a90 <HAL_DMA_Abort_IT+0xcc>)
 8002a52:	400a      	ands	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2225      	movs	r2, #37	; 0x25
 8002a64:	2101      	movs	r1, #1
 8002a66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d004      	beq.n	8002a82 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	0010      	movs	r0, r2
 8002a80:	4798      	blx	r3
    }
  }
  return status;
 8002a82:	230f      	movs	r3, #15
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	781b      	ldrb	r3, [r3, #0]
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b004      	add	sp, #16
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	fffffeff 	.word	0xfffffeff
 8002a94:	40020000 	.word	0x40020000

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	e147      	b.n	8002d38 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4091      	lsls	r1, r2
 8002ab2:	000a      	movs	r2, r1
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d100      	bne.n	8002ac0 <HAL_GPIO_Init+0x28>
 8002abe:	e138      	b.n	8002d32 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d005      	beq.n	8002ad8 <HAL_GPIO_Init+0x40>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d130      	bne.n	8002b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	43da      	mvns	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	409a      	lsls	r2, r3
 8002afa:	0013      	movs	r3, r2
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b0e:	2201      	movs	r2, #1
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
 8002b14:	0013      	movs	r3, r2
 8002b16:	43da      	mvns	r2, r3
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	2201      	movs	r2, #1
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	0013      	movs	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2203      	movs	r2, #3
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d017      	beq.n	8002b76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	409a      	lsls	r2, r3
 8002b54:	0013      	movs	r3, r2
 8002b56:	43da      	mvns	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	409a      	lsls	r2, r3
 8002b68:	0013      	movs	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d123      	bne.n	8002bca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	08da      	lsrs	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3208      	adds	r2, #8
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	58d3      	ldr	r3, [r2, r3]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2207      	movs	r2, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	220f      	movs	r2, #15
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	0013      	movs	r3, r2
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2107      	movs	r1, #7
 8002bae:	400b      	ands	r3, r1
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	0013      	movs	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	6939      	ldr	r1, [r7, #16]
 8002bc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	0013      	movs	r3, r2
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2203      	movs	r2, #3
 8002be8:	401a      	ands	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	23c0      	movs	r3, #192	; 0xc0
 8002c04:	029b      	lsls	r3, r3, #10
 8002c06:	4013      	ands	r3, r2
 8002c08:	d100      	bne.n	8002c0c <HAL_GPIO_Init+0x174>
 8002c0a:	e092      	b.n	8002d32 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002c0c:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3318      	adds	r3, #24
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	589b      	ldr	r3, [r3, r2]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	4013      	ands	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	220f      	movs	r2, #15
 8002c24:	409a      	lsls	r2, r3
 8002c26:	0013      	movs	r3, r2
 8002c28:	43da      	mvns	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	23a0      	movs	r3, #160	; 0xa0
 8002c34:	05db      	lsls	r3, r3, #23
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d013      	beq.n	8002c62 <HAL_GPIO_Init+0x1ca>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a45      	ldr	r2, [pc, #276]	; (8002d54 <HAL_GPIO_Init+0x2bc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00d      	beq.n	8002c5e <HAL_GPIO_Init+0x1c6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a44      	ldr	r2, [pc, #272]	; (8002d58 <HAL_GPIO_Init+0x2c0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <HAL_GPIO_Init+0x1c2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a43      	ldr	r2, [pc, #268]	; (8002d5c <HAL_GPIO_Init+0x2c4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_GPIO_Init+0x1be>
 8002c52:	2303      	movs	r3, #3
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x1cc>
 8002c56:	2305      	movs	r3, #5
 8002c58:	e004      	b.n	8002c64 <HAL_GPIO_Init+0x1cc>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e002      	b.n	8002c64 <HAL_GPIO_Init+0x1cc>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_GPIO_Init+0x1cc>
 8002c62:	2300      	movs	r3, #0
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	2103      	movs	r1, #3
 8002c68:	400a      	ands	r2, r1
 8002c6a:	00d2      	lsls	r2, r2, #3
 8002c6c:	4093      	lsls	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002c74:	4936      	ldr	r1, [pc, #216]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	3318      	adds	r3, #24
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c82:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	035b      	lsls	r3, r3, #13
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002cac:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	039b      	lsls	r3, r3, #14
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002cd8:	2384      	movs	r3, #132	; 0x84
 8002cda:	58d3      	ldr	r3, [r2, r3]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	43da      	mvns	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	029b      	lsls	r3, r3, #10
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cfc:	4914      	ldr	r1, [pc, #80]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002cfe:	2284      	movs	r2, #132	; 0x84
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002d04:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	58d3      	ldr	r3, [r2, r3]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	025b      	lsls	r3, r3, #9
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d2a:	4909      	ldr	r1, [pc, #36]	; (8002d50 <HAL_GPIO_Init+0x2b8>)
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	3301      	adds	r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	40da      	lsrs	r2, r3
 8002d40:	1e13      	subs	r3, r2, #0
 8002d42:	d000      	beq.n	8002d46 <HAL_GPIO_Init+0x2ae>
 8002d44:	e6b0      	b.n	8002aa8 <HAL_GPIO_Init+0x10>
  }
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b006      	add	sp, #24
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021800 	.word	0x40021800
 8002d54:	50000400 	.word	0x50000400
 8002d58:	50000800 	.word	0x50000800
 8002d5c:	50000c00 	.word	0x50000c00

08002d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	000a      	movs	r2, r1
 8002d6a:	1cbb      	adds	r3, r7, #2
 8002d6c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	1cba      	adds	r2, r7, #2
 8002d74:	8812      	ldrh	r2, [r2, #0]
 8002d76:	4013      	ands	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e003      	b.n	8002d8c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d84:	230f      	movs	r3, #15
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	781b      	ldrb	r3, [r3, #0]
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b004      	add	sp, #16
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	0008      	movs	r0, r1
 8002da4:	0011      	movs	r1, r2
 8002da6:	1cbb      	adds	r3, r7, #2
 8002da8:	1c02      	adds	r2, r0, #0
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	1c7b      	adds	r3, r7, #1
 8002dae:	1c0a      	adds	r2, r1, #0
 8002db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db2:	1c7b      	adds	r3, r7, #1
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d004      	beq.n	8002dc4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dba:	1cbb      	adds	r3, r7, #2
 8002dbc:	881a      	ldrh	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dc2:	e003      	b.n	8002dcc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dc4:	1cbb      	adds	r3, r7, #2
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	000a      	movs	r2, r1
 8002dde:	1cbb      	adds	r3, r7, #2
 8002de0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de8:	1cbb      	adds	r3, r7, #2
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	1cb9      	adds	r1, r7, #2
 8002df8:	8809      	ldrh	r1, [r1, #0]
 8002dfa:	400b      	ands	r3, r1
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	619a      	str	r2, [r3, #24]
}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	b004      	add	sp, #16
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e08f      	b.n	8002f3e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2241      	movs	r2, #65	; 0x41
 8002e22:	5c9b      	ldrb	r3, [r3, r2]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d107      	bne.n	8002e3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2240      	movs	r2, #64	; 0x40
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7fe fb23 	bl	8001480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2241      	movs	r2, #65	; 0x41
 8002e3e:	2124      	movs	r1, #36	; 0x24
 8002e40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	438a      	bics	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	493b      	ldr	r1, [pc, #236]	; (8002f48 <HAL_I2C_Init+0x13c>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4938      	ldr	r1, [pc, #224]	; (8002f4c <HAL_I2C_Init+0x140>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d108      	bne.n	8002e8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	0209      	lsls	r1, r1, #8
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	e007      	b.n	8002e9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2184      	movs	r1, #132	; 0x84
 8002e94:	0209      	lsls	r1, r1, #8
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d109      	bne.n	8002eb6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	0109      	lsls	r1, r1, #4
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	e007      	b.n	8002ec6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4923      	ldr	r1, [pc, #140]	; (8002f50 <HAL_I2C_Init+0x144>)
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4920      	ldr	r1, [pc, #128]	; (8002f54 <HAL_I2C_Init+0x148>)
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	491a      	ldr	r1, [pc, #104]	; (8002f4c <HAL_I2C_Init+0x140>)
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69d9      	ldr	r1, [r3, #28]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2241      	movs	r2, #65	; 0x41
 8002f2a:	2120      	movs	r1, #32
 8002f2c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2242      	movs	r2, #66	; 0x42
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b002      	add	sp, #8
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	f0ffffff 	.word	0xf0ffffff
 8002f4c:	ffff7fff 	.word	0xffff7fff
 8002f50:	fffff7ff 	.word	0xfffff7ff
 8002f54:	02008000 	.word	0x02008000

08002f58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	0008      	movs	r0, r1
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	0019      	movs	r1, r3
 8002f66:	230a      	movs	r3, #10
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	1c02      	adds	r2, r0, #0
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	2308      	movs	r3, #8
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	1c0a      	adds	r2, r1, #0
 8002f74:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2241      	movs	r2, #65	; 0x41
 8002f7a:	5c9b      	ldrb	r3, [r3, r2]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d000      	beq.n	8002f84 <HAL_I2C_Master_Transmit+0x2c>
 8002f82:	e10a      	b.n	800319a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2240      	movs	r2, #64	; 0x40
 8002f88:	5c9b      	ldrb	r3, [r3, r2]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_I2C_Master_Transmit+0x3a>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e104      	b.n	800319c <HAL_I2C_Master_Transmit+0x244>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2240      	movs	r2, #64	; 0x40
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f9a:	f7fe fd3b 	bl	8001a14 <HAL_GetTick>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	0219      	lsls	r1, r3, #8
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2319      	movs	r3, #25
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f000 f91e 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0ef      	b.n	800319c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2241      	movs	r2, #65	; 0x41
 8002fc0:	2121      	movs	r1, #33	; 0x21
 8002fc2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2242      	movs	r2, #66	; 0x42
 8002fc8:	2110      	movs	r1, #16
 8002fca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2208      	movs	r2, #8
 8002fdc:	18ba      	adds	r2, r7, r2
 8002fde:	8812      	ldrh	r2, [r2, #0]
 8002fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2bff      	cmp	r3, #255	; 0xff
 8002ff0:	d906      	bls.n	8003000 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	045b      	lsls	r3, r3, #17
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e007      	b.n	8003010 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	049b      	lsls	r3, r3, #18
 800300e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d027      	beq.n	8003068 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	b2da      	uxtb	r2, r3
 8003052:	697c      	ldr	r4, [r7, #20]
 8003054:	230a      	movs	r3, #10
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	8819      	ldrh	r1, [r3, #0]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <HAL_I2C_Master_Transmit+0x24c>)
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	0023      	movs	r3, r4
 8003062:	f000 faa7 	bl	80035b4 <I2C_TransferConfig>
 8003066:	e06f      	b.n	8003148 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	b2da      	uxtb	r2, r3
 800306e:	697c      	ldr	r4, [r7, #20]
 8003070:	230a      	movs	r3, #10
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	8819      	ldrh	r1, [r3, #0]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <HAL_I2C_Master_Transmit+0x24c>)
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	0023      	movs	r3, r4
 800307e:	f000 fa99 	bl	80035b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003082:	e061      	b.n	8003148 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f908 	bl	80032a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003090:	1e03      	subs	r3, r0, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e081      	b.n	800319c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d03a      	beq.n	8003148 <HAL_I2C_Master_Transmit+0x1f0>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d136      	bne.n	8003148 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	0013      	movs	r3, r2
 80030e4:	2200      	movs	r2, #0
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	f000 f882 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 80030ec:	1e03      	subs	r3, r0, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e053      	b.n	800319c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2bff      	cmp	r3, #255	; 0xff
 80030fc:	d911      	bls.n	8003122 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	22ff      	movs	r2, #255	; 0xff
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	b2da      	uxtb	r2, r3
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	045c      	lsls	r4, r3, #17
 800310e:	230a      	movs	r3, #10
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	8819      	ldrh	r1, [r3, #0]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	2300      	movs	r3, #0
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	0023      	movs	r3, r4
 800311c:	f000 fa4a 	bl	80035b4 <I2C_TransferConfig>
 8003120:	e012      	b.n	8003148 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	b2da      	uxtb	r2, r3
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	049c      	lsls	r4, r3, #18
 8003136:	230a      	movs	r3, #10
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	8819      	ldrh	r1, [r3, #0]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	2300      	movs	r3, #0
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	0023      	movs	r3, r4
 8003144:	f000 fa36 	bl	80035b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d198      	bne.n	8003084 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 f8e7 	bl	800332c <I2C_WaitOnSTOPFlagUntilTimeout>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e01a      	b.n	800319c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2220      	movs	r2, #32
 800316c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	490b      	ldr	r1, [pc, #44]	; (80031a8 <HAL_I2C_Master_Transmit+0x250>)
 800317a:	400a      	ands	r2, r1
 800317c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2241      	movs	r2, #65	; 0x41
 8003182:	2120      	movs	r1, #32
 8003184:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2242      	movs	r2, #66	; 0x42
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2240      	movs	r2, #64	; 0x40
 8003192:	2100      	movs	r1, #0
 8003194:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e000      	b.n	800319c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800319a:	2302      	movs	r3, #2
  }
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b007      	add	sp, #28
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	80002000 	.word	0x80002000
 80031a8:	fe00e800 	.word	0xfe00e800

080031ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2202      	movs	r2, #2
 80031bc:	4013      	ands	r3, r2
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d103      	bne.n	80031ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2201      	movs	r2, #1
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d007      	beq.n	80031e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699a      	ldr	r2, [r3, #24]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	430a      	orrs	r2, r1
 80031e6:	619a      	str	r2, [r3, #24]
  }
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	1dfb      	adds	r3, r7, #7
 80031fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003200:	e03a      	b.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	0018      	movs	r0, r3
 800320a:	f000 f8d3 	bl	80033b4 <I2C_IsErrorOccurred>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d001      	beq.n	8003216 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e040      	b.n	8003298 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	d02d      	beq.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321c:	f7fe fbfa 	bl	8001a14 <HAL_GetTick>
 8003220:	0002      	movs	r2, r0
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d302      	bcc.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x42>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d122      	bne.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	425a      	negs	r2, r3
 8003242:	4153      	adcs	r3, r2
 8003244:	b2db      	uxtb	r3, r3
 8003246:	001a      	movs	r2, r3
 8003248:	1dfb      	adds	r3, r7, #7
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d113      	bne.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	2220      	movs	r2, #32
 8003256:	431a      	orrs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2241      	movs	r2, #65	; 0x41
 8003260:	2120      	movs	r1, #32
 8003262:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2242      	movs	r2, #66	; 0x42
 8003268:	2100      	movs	r1, #0
 800326a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e00f      	b.n	8003298 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	4013      	ands	r3, r2
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	425a      	negs	r2, r3
 8003288:	4153      	adcs	r3, r2
 800328a:	b2db      	uxtb	r3, r3
 800328c:	001a      	movs	r2, r3
 800328e:	1dfb      	adds	r3, r7, #7
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d0b5      	beq.n	8003202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b004      	add	sp, #16
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032ac:	e032      	b.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 f87d 	bl	80033b4 <I2C_IsErrorOccurred>
 80032ba:	1e03      	subs	r3, r0, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e030      	b.n	8003324 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3301      	adds	r3, #1
 80032c6:	d025      	beq.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7fe fba4 	bl	8001a14 <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d11a      	bne.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2202      	movs	r2, #2
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d013      	beq.n	8003314 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	2220      	movs	r2, #32
 80032f2:	431a      	orrs	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2241      	movs	r2, #65	; 0x41
 80032fc:	2120      	movs	r1, #32
 80032fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2242      	movs	r2, #66	; 0x42
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2240      	movs	r2, #64	; 0x40
 800330c:	2100      	movs	r1, #0
 800330e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e007      	b.n	8003324 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2202      	movs	r2, #2
 800331c:	4013      	ands	r3, r2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d1c5      	bne.n	80032ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b004      	add	sp, #16
 800332a:	bd80      	pop	{r7, pc}

0800332c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003338:	e02f      	b.n	800339a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	0018      	movs	r0, r3
 8003342:	f000 f837 	bl	80033b4 <I2C_IsErrorOccurred>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d001      	beq.n	800334e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e02d      	b.n	80033aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe fb61 	bl	8001a14 <HAL_GetTick>
 8003352:	0002      	movs	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11a      	bne.n	800339a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2220      	movs	r2, #32
 800336c:	4013      	ands	r3, r2
 800336e:	2b20      	cmp	r3, #32
 8003370:	d013      	beq.n	800339a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	2220      	movs	r2, #32
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2241      	movs	r2, #65	; 0x41
 8003382:	2120      	movs	r1, #32
 8003384:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2242      	movs	r2, #66	; 0x42
 800338a:	2100      	movs	r1, #0
 800338c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2240      	movs	r2, #64	; 0x40
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e007      	b.n	80033aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2220      	movs	r2, #32
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d1c8      	bne.n	800333a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b08b      	sub	sp, #44	; 0x2c
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c0:	2327      	movs	r3, #39	; 0x27
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2210      	movs	r2, #16
 80033dc:	4013      	ands	r3, r2
 80033de:	d100      	bne.n	80033e2 <I2C_IsErrorOccurred+0x2e>
 80033e0:	e082      	b.n	80034e8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2210      	movs	r2, #16
 80033e8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033ea:	e060      	b.n	80034ae <I2C_IsErrorOccurred+0xfa>
 80033ec:	2427      	movs	r4, #39	; 0x27
 80033ee:	193b      	adds	r3, r7, r4
 80033f0:	193a      	adds	r2, r7, r4
 80033f2:	7812      	ldrb	r2, [r2, #0]
 80033f4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3301      	adds	r3, #1
 80033fa:	d058      	beq.n	80034ae <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033fc:	f7fe fb0a 	bl	8001a14 <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d306      	bcc.n	800341a <I2C_IsErrorOccurred+0x66>
 800340c:	193b      	adds	r3, r7, r4
 800340e:	193a      	adds	r2, r7, r4
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d149      	bne.n	80034ae <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	01db      	lsls	r3, r3, #7
 8003424:	4013      	ands	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003428:	2013      	movs	r0, #19
 800342a:	183b      	adds	r3, r7, r0
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	2142      	movs	r1, #66	; 0x42
 8003430:	5c52      	ldrb	r2, [r2, r1]
 8003432:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	401a      	ands	r2, r3
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	429a      	cmp	r2, r3
 8003446:	d126      	bne.n	8003496 <I2C_IsErrorOccurred+0xe2>
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	01db      	lsls	r3, r3, #7
 800344e:	429a      	cmp	r2, r3
 8003450:	d021      	beq.n	8003496 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003452:	183b      	adds	r3, r7, r0
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b20      	cmp	r3, #32
 8003458:	d01d      	beq.n	8003496 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	01c9      	lsls	r1, r1, #7
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800346c:	f7fe fad2 	bl	8001a14 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003474:	e00f      	b.n	8003496 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003476:	f7fe facd 	bl	8001a14 <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b19      	cmp	r3, #25
 8003482:	d908      	bls.n	8003496 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2220      	movs	r2, #32
 8003488:	4313      	orrs	r3, r2
 800348a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800348c:	2327      	movs	r3, #39	; 0x27
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]

              break;
 8003494:	e00b      	b.n	80034ae <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2220      	movs	r2, #32
 800349e:	4013      	ands	r3, r2
 80034a0:	2127      	movs	r1, #39	; 0x27
 80034a2:	187a      	adds	r2, r7, r1
 80034a4:	1879      	adds	r1, r7, r1
 80034a6:	7809      	ldrb	r1, [r1, #0]
 80034a8:	7011      	strb	r1, [r2, #0]
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d1e3      	bne.n	8003476 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2220      	movs	r2, #32
 80034b6:	4013      	ands	r3, r2
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d004      	beq.n	80034c6 <I2C_IsErrorOccurred+0x112>
 80034bc:	2327      	movs	r3, #39	; 0x27
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d092      	beq.n	80033ec <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034c6:	2327      	movs	r3, #39	; 0x27
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2220      	movs	r2, #32
 80034d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2204      	movs	r2, #4
 80034dc:	4313      	orrs	r3, r2
 80034de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034e0:	2327      	movs	r3, #39	; 0x27
 80034e2:	18fb      	adds	r3, r7, r3
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	d00c      	beq.n	8003514 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2201      	movs	r2, #1
 80034fe:	4313      	orrs	r3, r2
 8003500:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	0052      	lsls	r2, r2, #1
 800350a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800350c:	2327      	movs	r3, #39	; 0x27
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4013      	ands	r3, r2
 800351c:	d00c      	beq.n	8003538 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	2208      	movs	r2, #8
 8003522:	4313      	orrs	r3, r2
 8003524:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	00d2      	lsls	r2, r2, #3
 800352e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003530:	2327      	movs	r3, #39	; 0x27
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4013      	ands	r3, r2
 8003540:	d00c      	beq.n	800355c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	2202      	movs	r2, #2
 8003546:	4313      	orrs	r3, r2
 8003548:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	0092      	lsls	r2, r2, #2
 8003552:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003554:	2327      	movs	r3, #39	; 0x27
 8003556:	18fb      	adds	r3, r7, r3
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800355c:	2327      	movs	r3, #39	; 0x27
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01d      	beq.n	80035a2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff fe1f 	bl	80031ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	490d      	ldr	r1, [pc, #52]	; (80035b0 <I2C_IsErrorOccurred+0x1fc>)
 800357a:	400a      	ands	r2, r1
 800357c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2241      	movs	r2, #65	; 0x41
 800358e:	2120      	movs	r1, #32
 8003590:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2242      	movs	r2, #66	; 0x42
 8003596:	2100      	movs	r1, #0
 8003598:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2240      	movs	r2, #64	; 0x40
 800359e:	2100      	movs	r1, #0
 80035a0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80035a2:	2327      	movs	r3, #39	; 0x27
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	781b      	ldrb	r3, [r3, #0]
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b00b      	add	sp, #44	; 0x2c
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	fe00e800 	.word	0xfe00e800

080035b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	0008      	movs	r0, r1
 80035be:	0011      	movs	r1, r2
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	240a      	movs	r4, #10
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	1c02      	adds	r2, r0, #0
 80035c8:	801a      	strh	r2, [r3, #0]
 80035ca:	2009      	movs	r0, #9
 80035cc:	183b      	adds	r3, r7, r0
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035d2:	193b      	adds	r3, r7, r4
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	059b      	lsls	r3, r3, #22
 80035d8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035da:	183b      	adds	r3, r7, r0
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	0419      	lsls	r1, r3, #16
 80035e0:	23ff      	movs	r3, #255	; 0xff
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035e6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	4313      	orrs	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fe:	0d51      	lsrs	r1, r2, #21
 8003600:	2280      	movs	r2, #128	; 0x80
 8003602:	00d2      	lsls	r2, r2, #3
 8003604:	400a      	ands	r2, r1
 8003606:	4907      	ldr	r1, [pc, #28]	; (8003624 <I2C_TransferConfig+0x70>)
 8003608:	430a      	orrs	r2, r1
 800360a:	43d2      	mvns	r2, r2
 800360c:	401a      	ands	r2, r3
 800360e:	0011      	movs	r1, r2
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	430a      	orrs	r2, r1
 8003618:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b007      	add	sp, #28
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	03ff63ff 	.word	0x03ff63ff

08003628 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2241      	movs	r2, #65	; 0x41
 8003636:	5c9b      	ldrb	r3, [r3, r2]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b20      	cmp	r3, #32
 800363c:	d138      	bne.n	80036b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2240      	movs	r2, #64	; 0x40
 8003642:	5c9b      	ldrb	r3, [r3, r2]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003648:	2302      	movs	r3, #2
 800364a:	e032      	b.n	80036b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	2101      	movs	r1, #1
 8003652:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2241      	movs	r2, #65	; 0x41
 8003658:	2124      	movs	r1, #36	; 0x24
 800365a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2101      	movs	r1, #1
 8003668:	438a      	bics	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4911      	ldr	r1, [pc, #68]	; (80036bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003678:	400a      	ands	r2, r1
 800367a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2241      	movs	r2, #65	; 0x41
 80036a0:	2120      	movs	r1, #32
 80036a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b002      	add	sp, #8
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	ffffefff 	.word	0xffffefff

080036c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2241      	movs	r2, #65	; 0x41
 80036ce:	5c9b      	ldrb	r3, [r3, r2]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d139      	bne.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2240      	movs	r2, #64	; 0x40
 80036da:	5c9b      	ldrb	r3, [r3, r2]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e033      	b.n	800374c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2240      	movs	r2, #64	; 0x40
 80036e8:	2101      	movs	r1, #1
 80036ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2241      	movs	r2, #65	; 0x41
 80036f0:	2124      	movs	r1, #36	; 0x24
 80036f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	438a      	bics	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a11      	ldr	r2, [pc, #68]	; (8003754 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003710:	4013      	ands	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2241      	movs	r2, #65	; 0x41
 800373a:	2120      	movs	r1, #32
 800373c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2240      	movs	r2, #64	; 0x40
 8003742:	2100      	movs	r1, #0
 8003744:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bd80      	pop	{r7, pc}
 8003754:	fffff0ff 	.word	0xfffff0ff

08003758 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a19      	ldr	r2, [pc, #100]	; (80037cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003766:	4013      	ands	r3, r2
 8003768:	0019      	movs	r1, r3
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	430a      	orrs	r2, r1
 8003770:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	429a      	cmp	r2, r3
 800377a:	d11f      	bne.n	80037bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	0013      	movs	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	189b      	adds	r3, r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4912      	ldr	r1, [pc, #72]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800378a:	0018      	movs	r0, r3
 800378c:	f7fc fccc 	bl	8000128 <__udivsi3>
 8003790:	0003      	movs	r3, r0
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003796:	e008      	b.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e001      	b.n	80037aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e009      	b.n	80037be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	401a      	ands	r2, r3
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d0ed      	beq.n	8003798 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	40007000 	.word	0x40007000
 80037cc:	fffff9ff 	.word	0xfffff9ff
 80037d0:	20000004 	.word	0x20000004
 80037d4:	000f4240 	.word	0x000f4240

080037d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	23e0      	movs	r3, #224	; 0xe0
 80037e2:	01db      	lsls	r3, r3, #7
 80037e4:	4013      	ands	r3, r2
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000

080037f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e2fe      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2201      	movs	r2, #1
 8003808:	4013      	ands	r3, r2
 800380a:	d100      	bne.n	800380e <HAL_RCC_OscConfig+0x1e>
 800380c:	e07c      	b.n	8003908 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380e:	4bc3      	ldr	r3, [pc, #780]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2238      	movs	r2, #56	; 0x38
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003818:	4bc0      	ldr	r3, [pc, #768]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2203      	movs	r2, #3
 800381e:	4013      	ands	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b10      	cmp	r3, #16
 8003826:	d102      	bne.n	800382e <HAL_RCC_OscConfig+0x3e>
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d002      	beq.n	8003834 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d10b      	bne.n	800384c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	4bb9      	ldr	r3, [pc, #740]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	029b      	lsls	r3, r3, #10
 800383c:	4013      	ands	r3, r2
 800383e:	d062      	beq.n	8003906 <HAL_RCC_OscConfig+0x116>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d15e      	bne.n	8003906 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e2d9      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	025b      	lsls	r3, r3, #9
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x78>
 8003858:	4bb0      	ldr	r3, [pc, #704]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4baf      	ldr	r3, [pc, #700]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	0249      	lsls	r1, r1, #9
 8003862:	430a      	orrs	r2, r1
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e020      	b.n	80038aa <HAL_RCC_OscConfig+0xba>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	23a0      	movs	r3, #160	; 0xa0
 800386e:	02db      	lsls	r3, r3, #11
 8003870:	429a      	cmp	r2, r3
 8003872:	d10e      	bne.n	8003892 <HAL_RCC_OscConfig+0xa2>
 8003874:	4ba9      	ldr	r3, [pc, #676]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4ba8      	ldr	r3, [pc, #672]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	02c9      	lsls	r1, r1, #11
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	4ba6      	ldr	r3, [pc, #664]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4ba5      	ldr	r3, [pc, #660]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003888:	2180      	movs	r1, #128	; 0x80
 800388a:	0249      	lsls	r1, r1, #9
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e00b      	b.n	80038aa <HAL_RCC_OscConfig+0xba>
 8003892:	4ba2      	ldr	r3, [pc, #648]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4ba1      	ldr	r3, [pc, #644]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003898:	49a1      	ldr	r1, [pc, #644]	; (8003b20 <HAL_RCC_OscConfig+0x330>)
 800389a:	400a      	ands	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	4b9f      	ldr	r3, [pc, #636]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b9e      	ldr	r3, [pc, #632]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038a4:	499f      	ldr	r1, [pc, #636]	; (8003b24 <HAL_RCC_OscConfig+0x334>)
 80038a6:	400a      	ands	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d014      	beq.n	80038dc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fe f8af 	bl	8001a14 <HAL_GetTick>
 80038b6:	0003      	movs	r3, r0
 80038b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fe f8aa 	bl	8001a14 <HAL_GetTick>
 80038c0:	0002      	movs	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e298      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ce:	4b93      	ldr	r3, [pc, #588]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	029b      	lsls	r3, r3, #10
 80038d6:	4013      	ands	r3, r2
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0xcc>
 80038da:	e015      	b.n	8003908 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fe f89a 	bl	8001a14 <HAL_GetTick>
 80038e0:	0003      	movs	r3, r0
 80038e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e6:	f7fe f895 	bl	8001a14 <HAL_GetTick>
 80038ea:	0002      	movs	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b64      	cmp	r3, #100	; 0x64
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e283      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038f8:	4b88      	ldr	r3, [pc, #544]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	029b      	lsls	r3, r3, #10
 8003900:	4013      	ands	r3, r2
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0xf6>
 8003904:	e000      	b.n	8003908 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003906:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2202      	movs	r2, #2
 800390e:	4013      	ands	r3, r2
 8003910:	d100      	bne.n	8003914 <HAL_RCC_OscConfig+0x124>
 8003912:	e099      	b.n	8003a48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003914:	4b81      	ldr	r3, [pc, #516]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2238      	movs	r2, #56	; 0x38
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800391e:	4b7f      	ldr	r3, [pc, #508]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2203      	movs	r2, #3
 8003924:	4013      	ands	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b10      	cmp	r3, #16
 800392c:	d102      	bne.n	8003934 <HAL_RCC_OscConfig+0x144>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d002      	beq.n	800393a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d135      	bne.n	80039a6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800393a:	4b78      	ldr	r3, [pc, #480]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4013      	ands	r3, r2
 8003944:	d005      	beq.n	8003952 <HAL_RCC_OscConfig+0x162>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e256      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003952:	4b72      	ldr	r3, [pc, #456]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a74      	ldr	r2, [pc, #464]	; (8003b28 <HAL_RCC_OscConfig+0x338>)
 8003958:	4013      	ands	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	021a      	lsls	r2, r3, #8
 8003962:	4b6e      	ldr	r3, [pc, #440]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d112      	bne.n	8003994 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800396e:	4b6b      	ldr	r3, [pc, #428]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6e      	ldr	r2, [pc, #440]	; (8003b2c <HAL_RCC_OscConfig+0x33c>)
 8003974:	4013      	ands	r3, r2
 8003976:	0019      	movs	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	4b67      	ldr	r3, [pc, #412]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003982:	4b66      	ldr	r3, [pc, #408]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0adb      	lsrs	r3, r3, #11
 8003988:	2207      	movs	r2, #7
 800398a:	4013      	ands	r3, r2
 800398c:	4a68      	ldr	r2, [pc, #416]	; (8003b30 <HAL_RCC_OscConfig+0x340>)
 800398e:	40da      	lsrs	r2, r3
 8003990:	4b68      	ldr	r3, [pc, #416]	; (8003b34 <HAL_RCC_OscConfig+0x344>)
 8003992:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003994:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <HAL_RCC_OscConfig+0x348>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	0018      	movs	r0, r3
 800399a:	f7fd ffdf 	bl	800195c <HAL_InitTick>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d051      	beq.n	8003a46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e22c      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d030      	beq.n	8003a10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80039ae:	4b5b      	ldr	r3, [pc, #364]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5e      	ldr	r2, [pc, #376]	; (8003b2c <HAL_RCC_OscConfig+0x33c>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	0019      	movs	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	4b57      	ldr	r3, [pc, #348]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80039c2:	4b56      	ldr	r3, [pc, #344]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4b55      	ldr	r3, [pc, #340]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	0049      	lsls	r1, r1, #1
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe f820 	bl	8001a14 <HAL_GetTick>
 80039d4:	0003      	movs	r3, r0
 80039d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039da:	f7fe f81b 	bl	8001a14 <HAL_GetTick>
 80039de:	0002      	movs	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e209      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ec:	4b4b      	ldr	r3, [pc, #300]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4013      	ands	r3, r2
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f8:	4b48      	ldr	r3, [pc, #288]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <HAL_RCC_OscConfig+0x338>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	021a      	lsls	r2, r3, #8
 8003a08:	4b44      	ldr	r3, [pc, #272]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	e01b      	b.n	8003a48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003a10:	4b42      	ldr	r3, [pc, #264]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a16:	4949      	ldr	r1, [pc, #292]	; (8003b3c <HAL_RCC_OscConfig+0x34c>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fffa 	bl	8001a14 <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a26:	f7fd fff5 	bl	8001a14 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1e3      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4013      	ands	r3, r2
 8003a42:	d1f0      	bne.n	8003a26 <HAL_RCC_OscConfig+0x236>
 8003a44:	e000      	b.n	8003a48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d047      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a52:	4b32      	ldr	r3, [pc, #200]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2238      	movs	r2, #56	; 0x38
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b18      	cmp	r3, #24
 8003a5c:	d10a      	bne.n	8003a74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003a5e:	4b2f      	ldr	r3, [pc, #188]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	2202      	movs	r2, #2
 8003a64:	4013      	ands	r3, r2
 8003a66:	d03c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d138      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e1c5      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d019      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003a7c:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a80:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	430a      	orrs	r2, r1
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7fd ffc4 	bl	8001a14 <HAL_GetTick>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a92:	f7fd ffbf 	bl	8001a14 <HAL_GetTick>
 8003a96:	0002      	movs	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e1ad      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d0f1      	beq.n	8003a92 <HAL_RCC_OscConfig+0x2a2>
 8003aae:	e018      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ab0:	4b1a      	ldr	r3, [pc, #104]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	438a      	bics	r2, r1
 8003aba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd ffaa 	bl	8001a14 <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac6:	f7fd ffa5 	bl	8001a14 <HAL_GetTick>
 8003aca:	0002      	movs	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e193      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003adc:	2202      	movs	r2, #2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d1f1      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d100      	bne.n	8003aee <HAL_RCC_OscConfig+0x2fe>
 8003aec:	e0c6      	b.n	8003c7c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	231f      	movs	r3, #31
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2238      	movs	r2, #56	; 0x38
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d11e      	bne.n	8003b40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_RCC_OscConfig+0x32c>)
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	2202      	movs	r2, #2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d100      	bne.n	8003b0e <HAL_RCC_OscConfig+0x31e>
 8003b0c:	e0b6      	b.n	8003c7c <HAL_RCC_OscConfig+0x48c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d000      	beq.n	8003b18 <HAL_RCC_OscConfig+0x328>
 8003b16:	e0b1      	b.n	8003c7c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e171      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	fffeffff 	.word	0xfffeffff
 8003b24:	fffbffff 	.word	0xfffbffff
 8003b28:	ffff80ff 	.word	0xffff80ff
 8003b2c:	ffffc7ff 	.word	0xffffc7ff
 8003b30:	00f42400 	.word	0x00f42400
 8003b34:	20000004 	.word	0x20000004
 8003b38:	20000008 	.word	0x20000008
 8003b3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b40:	4bb1      	ldr	r3, [pc, #708]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	055b      	lsls	r3, r3, #21
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_OscConfig+0x360>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x362>
 8003b50:	2300      	movs	r3, #0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d011      	beq.n	8003b7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	4bac      	ldr	r3, [pc, #688]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5a:	4bab      	ldr	r3, [pc, #684]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003b5c:	2180      	movs	r1, #128	; 0x80
 8003b5e:	0549      	lsls	r1, r1, #21
 8003b60:	430a      	orrs	r2, r1
 8003b62:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b64:	4ba8      	ldr	r3, [pc, #672]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	055b      	lsls	r3, r3, #21
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003b72:	231f      	movs	r3, #31
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7a:	4ba4      	ldr	r3, [pc, #656]	; (8003e0c <HAL_RCC_OscConfig+0x61c>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4013      	ands	r3, r2
 8003b84:	d11a      	bne.n	8003bbc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b86:	4ba1      	ldr	r3, [pc, #644]	; (8003e0c <HAL_RCC_OscConfig+0x61c>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4ba0      	ldr	r3, [pc, #640]	; (8003e0c <HAL_RCC_OscConfig+0x61c>)
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	0049      	lsls	r1, r1, #1
 8003b90:	430a      	orrs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b94:	f7fd ff3e 	bl	8001a14 <HAL_GetTick>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9e:	f7fd ff39 	bl	8001a14 <HAL_GetTick>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e127      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb0:	4b96      	ldr	r3, [pc, #600]	; (8003e0c <HAL_RCC_OscConfig+0x61c>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x3e2>
 8003bc4:	4b90      	ldr	r3, [pc, #576]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003bc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bc8:	4b8f      	ldr	r3, [pc, #572]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003bca:	2101      	movs	r1, #1
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bd0:	e01c      	b.n	8003c0c <HAL_RCC_OscConfig+0x41c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x404>
 8003bda:	4b8b      	ldr	r3, [pc, #556]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003bdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bde:	4b8a      	ldr	r3, [pc, #552]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003be0:	2104      	movs	r1, #4
 8003be2:	430a      	orrs	r2, r1
 8003be4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003be6:	4b88      	ldr	r3, [pc, #544]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bea:	4b87      	ldr	r3, [pc, #540]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003bec:	2101      	movs	r1, #1
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0x41c>
 8003bf4:	4b84      	ldr	r3, [pc, #528]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003bf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bf8:	4b83      	ldr	r3, [pc, #524]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c00:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003c02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c04:	4b80      	ldr	r3, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003c06:	2104      	movs	r1, #4
 8003c08:	438a      	bics	r2, r1
 8003c0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d014      	beq.n	8003c3e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fd fefe 	bl	8001a14 <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c1c:	e009      	b.n	8003c32 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fd fef9 	bl	8001a14 <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	4a79      	ldr	r2, [pc, #484]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0e6      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c32:	4b75      	ldr	r3, [pc, #468]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	2202      	movs	r2, #2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x42e>
 8003c3c:	e013      	b.n	8003c66 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fd fee9 	bl	8001a14 <HAL_GetTick>
 8003c42:	0003      	movs	r3, r0
 8003c44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c46:	e009      	b.n	8003c5c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fd fee4 	bl	8001a14 <HAL_GetTick>
 8003c4c:	0002      	movs	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	4a6f      	ldr	r2, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x620>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e0d1      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c5c:	4b6a      	ldr	r3, [pc, #424]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	2202      	movs	r2, #2
 8003c62:	4013      	ands	r3, r2
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c66:	231f      	movs	r3, #31
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c70:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c74:	4b64      	ldr	r3, [pc, #400]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003c76:	4967      	ldr	r1, [pc, #412]	; (8003e14 <HAL_RCC_OscConfig+0x624>)
 8003c78:	400a      	ands	r2, r1
 8003c7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d100      	bne.n	8003c86 <HAL_RCC_OscConfig+0x496>
 8003c84:	e0bb      	b.n	8003dfe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c86:	4b60      	ldr	r3, [pc, #384]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2238      	movs	r2, #56	; 0x38
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b10      	cmp	r3, #16
 8003c90:	d100      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4a4>
 8003c92:	e07b      	b.n	8003d8c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d156      	bne.n	8003d4a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b5a      	ldr	r3, [pc, #360]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003ca2:	495d      	ldr	r1, [pc, #372]	; (8003e18 <HAL_RCC_OscConfig+0x628>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd feb4 	bl	8001a14 <HAL_GetTick>
 8003cac:	0003      	movs	r3, r0
 8003cae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7fd feaf 	bl	8001a14 <HAL_GetTick>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e09d      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	049b      	lsls	r3, r3, #18
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a51      	ldr	r2, [pc, #324]	; (8003e1c <HAL_RCC_OscConfig+0x62c>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1a      	ldr	r2, [r3, #32]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d00:	430a      	orrs	r2, r1
 8003d02:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d04:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b3f      	ldr	r3, [pc, #252]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d0a:	2180      	movs	r1, #128	; 0x80
 8003d0c:	0449      	lsls	r1, r1, #17
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	4b3c      	ldr	r3, [pc, #240]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	0549      	lsls	r1, r1, #21
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fd fe78 	bl	8001a14 <HAL_GetTick>
 8003d24:	0003      	movs	r3, r0
 8003d26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fd fe73 	bl	8001a14 <HAL_GetTick>
 8003d2e:	0002      	movs	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e061      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3c:	4b32      	ldr	r3, [pc, #200]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	049b      	lsls	r3, r3, #18
 8003d44:	4013      	ands	r3, r2
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x53a>
 8003d48:	e059      	b.n	8003dfe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4a:	4b2f      	ldr	r3, [pc, #188]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d50:	4931      	ldr	r1, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x628>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fd fe5d 	bl	8001a14 <HAL_GetTick>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd fe58 	bl	8001a14 <HAL_GetTick>
 8003d64:	0002      	movs	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e046      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d72:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	049b      	lsls	r3, r3, #18
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003d7e:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d84:	4926      	ldr	r1, [pc, #152]	; (8003e20 <HAL_RCC_OscConfig+0x630>)
 8003d86:	400a      	ands	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	e038      	b.n	8003dfe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e033      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003d98:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x618>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2203      	movs	r2, #3
 8003da2:	401a      	ands	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d126      	bne.n	8003dfa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2270      	movs	r2, #112	; 0x70
 8003db0:	401a      	ands	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d11f      	bne.n	8003dfa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	23fe      	movs	r3, #254	; 0xfe
 8003dbe:	01db      	lsls	r3, r3, #7
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d116      	bne.n	8003dfa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	23f8      	movs	r3, #248	; 0xf8
 8003dd0:	039b      	lsls	r3, r3, #14
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d10e      	bne.n	8003dfa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	23e0      	movs	r3, #224	; 0xe0
 8003de0:	051b      	lsls	r3, r3, #20
 8003de2:	401a      	ands	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	0f5b      	lsrs	r3, r3, #29
 8003df0:	075a      	lsls	r2, r3, #29
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d001      	beq.n	8003dfe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b008      	add	sp, #32
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40007000 	.word	0x40007000
 8003e10:	00001388 	.word	0x00001388
 8003e14:	efffffff 	.word	0xefffffff
 8003e18:	feffffff 	.word	0xfeffffff
 8003e1c:	11c1808c 	.word	0x11c1808c
 8003e20:	eefefffc 	.word	0xeefefffc

08003e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0e9      	b.n	800400c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e38:	4b76      	ldr	r3, [pc, #472]	; (8004014 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2207      	movs	r2, #7
 8003e3e:	4013      	ands	r3, r2
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d91e      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b73      	ldr	r3, [pc, #460]	; (8004014 <HAL_RCC_ClockConfig+0x1f0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2207      	movs	r2, #7
 8003e4c:	4393      	bics	r3, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	4b70      	ldr	r3, [pc, #448]	; (8004014 <HAL_RCC_ClockConfig+0x1f0>)
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e58:	f7fd fddc 	bl	8001a14 <HAL_GetTick>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e60:	e009      	b.n	8003e76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e62:	f7fd fdd7 	bl	8001a14 <HAL_GetTick>
 8003e66:	0002      	movs	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	4a6a      	ldr	r2, [pc, #424]	; (8004018 <HAL_RCC_ClockConfig+0x1f4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0ca      	b.n	800400c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e76:	4b67      	ldr	r3, [pc, #412]	; (8004014 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2207      	movs	r2, #7
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d1ee      	bne.n	8003e62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d015      	beq.n	8003eba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2204      	movs	r2, #4
 8003e94:	4013      	ands	r3, r2
 8003e96:	d006      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e98:	4b60      	ldr	r3, [pc, #384]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	4b5f      	ldr	r3, [pc, #380]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003e9e:	21e0      	movs	r1, #224	; 0xe0
 8003ea0:	01c9      	lsls	r1, r1, #7
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea6:	4b5d      	ldr	r3, [pc, #372]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4a5d      	ldr	r2, [pc, #372]	; (8004020 <HAL_RCC_ClockConfig+0x1fc>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	4b59      	ldr	r3, [pc, #356]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d057      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d107      	bne.n	8003edc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ecc:	4b53      	ldr	r3, [pc, #332]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	029b      	lsls	r3, r3, #10
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d12b      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e097      	b.n	800400c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee4:	4b4d      	ldr	r3, [pc, #308]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	049b      	lsls	r3, r3, #18
 8003eec:	4013      	ands	r3, r2
 8003eee:	d11f      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e08b      	b.n	800400c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d107      	bne.n	8003f0c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efc:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4013      	ands	r3, r2
 8003f06:	d113      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e07f      	b.n	800400c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d106      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f14:	4b41      	ldr	r3, [pc, #260]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f18:	2202      	movs	r2, #2
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e074      	b.n	800400c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f22:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f26:	2202      	movs	r2, #2
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e06d      	b.n	800400c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f30:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2207      	movs	r2, #7
 8003f36:	4393      	bics	r3, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f44:	f7fd fd66 	bl	8001a14 <HAL_GetTick>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4c:	e009      	b.n	8003f62 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4e:	f7fd fd61 	bl	8001a14 <HAL_GetTick>
 8003f52:	0002      	movs	r2, r0
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	4a2f      	ldr	r2, [pc, #188]	; (8004018 <HAL_RCC_ClockConfig+0x1f4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e054      	b.n	800400c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	4b2e      	ldr	r3, [pc, #184]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2238      	movs	r2, #56	; 0x38
 8003f68:	401a      	ands	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d1ec      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f74:	4b27      	ldr	r3, [pc, #156]	; (8004014 <HAL_RCC_ClockConfig+0x1f0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2207      	movs	r2, #7
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d21e      	bcs.n	8003fc0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2207      	movs	r2, #7
 8003f88:	4393      	bics	r3, r2
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	4b21      	ldr	r3, [pc, #132]	; (8004014 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f94:	f7fd fd3e 	bl	8001a14 <HAL_GetTick>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f9c:	e009      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9e:	f7fd fd39 	bl	8001a14 <HAL_GetTick>
 8003fa2:	0002      	movs	r2, r0
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_RCC_ClockConfig+0x1f4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e02c      	b.n	800400c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fb2:	4b18      	ldr	r3, [pc, #96]	; (8004014 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	4013      	ands	r3, r2
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d1ee      	bne.n	8003f9e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4a15      	ldr	r2, [pc, #84]	; (8004024 <HAL_RCC_ClockConfig+0x200>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003fde:	f000 f829 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8003fe2:	0001      	movs	r1, r0
 8003fe4:	4b0d      	ldr	r3, [pc, #52]	; (800401c <HAL_RCC_ClockConfig+0x1f8>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	220f      	movs	r2, #15
 8003fec:	401a      	ands	r2, r3
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_RCC_ClockConfig+0x204>)
 8003ff0:	0092      	lsls	r2, r2, #2
 8003ff2:	58d3      	ldr	r3, [r2, r3]
 8003ff4:	221f      	movs	r2, #31
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	000a      	movs	r2, r1
 8003ffa:	40da      	lsrs	r2, r3
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_ClockConfig+0x208>)
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <HAL_RCC_ClockConfig+0x20c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	0018      	movs	r0, r3
 8004006:	f7fd fca9 	bl	800195c <HAL_InitTick>
 800400a:	0003      	movs	r3, r0
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b004      	add	sp, #16
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40022000 	.word	0x40022000
 8004018:	00001388 	.word	0x00001388
 800401c:	40021000 	.word	0x40021000
 8004020:	fffff0ff 	.word	0xfffff0ff
 8004024:	ffff8fff 	.word	0xffff8fff
 8004028:	08008a70 	.word	0x08008a70
 800402c:	20000004 	.word	0x20000004
 8004030:	20000008 	.word	0x20000008

08004034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800403a:	4b3c      	ldr	r3, [pc, #240]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2238      	movs	r2, #56	; 0x38
 8004040:	4013      	ands	r3, r2
 8004042:	d10f      	bne.n	8004064 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0adb      	lsrs	r3, r3, #11
 800404a:	2207      	movs	r2, #7
 800404c:	4013      	ands	r3, r2
 800404e:	2201      	movs	r2, #1
 8004050:	409a      	lsls	r2, r3
 8004052:	0013      	movs	r3, r2
 8004054:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004056:	6839      	ldr	r1, [r7, #0]
 8004058:	4835      	ldr	r0, [pc, #212]	; (8004130 <HAL_RCC_GetSysClockFreq+0xfc>)
 800405a:	f7fc f865 	bl	8000128 <__udivsi3>
 800405e:	0003      	movs	r3, r0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e05d      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004064:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2238      	movs	r2, #56	; 0x38
 800406a:	4013      	ands	r3, r2
 800406c:	2b08      	cmp	r3, #8
 800406e:	d102      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004070:	4b30      	ldr	r3, [pc, #192]	; (8004134 <HAL_RCC_GetSysClockFreq+0x100>)
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	e054      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2238      	movs	r2, #56	; 0x38
 800407c:	4013      	ands	r3, r2
 800407e:	2b10      	cmp	r3, #16
 8004080:	d138      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	2203      	movs	r2, #3
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	2207      	movs	r2, #7
 8004094:	4013      	ands	r3, r2
 8004096:	3301      	adds	r3, #1
 8004098:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d10d      	bne.n	80040bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	4824      	ldr	r0, [pc, #144]	; (8004134 <HAL_RCC_GetSysClockFreq+0x100>)
 80040a4:	f7fc f840 	bl	8000128 <__udivsi3>
 80040a8:	0003      	movs	r3, r0
 80040aa:	0019      	movs	r1, r3
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	227f      	movs	r2, #127	; 0x7f
 80040b4:	4013      	ands	r3, r2
 80040b6:	434b      	muls	r3, r1
 80040b8:	617b      	str	r3, [r7, #20]
        break;
 80040ba:	e00d      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	481c      	ldr	r0, [pc, #112]	; (8004130 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040c0:	f7fc f832 	bl	8000128 <__udivsi3>
 80040c4:	0003      	movs	r3, r0
 80040c6:	0019      	movs	r1, r3
 80040c8:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	227f      	movs	r2, #127	; 0x7f
 80040d0:	4013      	ands	r3, r2
 80040d2:	434b      	muls	r3, r1
 80040d4:	617b      	str	r3, [r7, #20]
        break;
 80040d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80040d8:	4b14      	ldr	r3, [pc, #80]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0f5b      	lsrs	r3, r3, #29
 80040de:	2207      	movs	r2, #7
 80040e0:	4013      	ands	r3, r2
 80040e2:	3301      	adds	r3, #1
 80040e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	6978      	ldr	r0, [r7, #20]
 80040ea:	f7fc f81d 	bl	8000128 <__udivsi3>
 80040ee:	0003      	movs	r3, r0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e015      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2238      	movs	r2, #56	; 0x38
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d103      	bne.n	8004108 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	e00b      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004108:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_RCC_GetSysClockFreq+0xf8>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2238      	movs	r2, #56	; 0x38
 800410e:	4013      	ands	r3, r2
 8004110:	2b18      	cmp	r3, #24
 8004112:	d103      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004114:	23fa      	movs	r3, #250	; 0xfa
 8004116:	01db      	lsls	r3, r3, #7
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	e001      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004120:	693b      	ldr	r3, [r7, #16]
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b006      	add	sp, #24
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	40021000 	.word	0x40021000
 8004130:	00f42400 	.word	0x00f42400
 8004134:	007a1200 	.word	0x007a1200

08004138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800413c:	4b02      	ldr	r3, [pc, #8]	; (8004148 <HAL_RCC_GetHCLKFreq+0x10>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	20000004 	.word	0x20000004

0800414c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800414c:	b5b0      	push	{r4, r5, r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004150:	f7ff fff2 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004154:	0004      	movs	r4, r0
 8004156:	f7ff fb3f 	bl	80037d8 <LL_RCC_GetAPB1Prescaler>
 800415a:	0003      	movs	r3, r0
 800415c:	0b1a      	lsrs	r2, r3, #12
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004160:	0092      	lsls	r2, r2, #2
 8004162:	58d3      	ldr	r3, [r2, r3]
 8004164:	221f      	movs	r2, #31
 8004166:	4013      	ands	r3, r2
 8004168:	40dc      	lsrs	r4, r3
 800416a:	0023      	movs	r3, r4
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	bdb0      	pop	{r4, r5, r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	08008ab0 	.word	0x08008ab0

08004178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004180:	2313      	movs	r3, #19
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004188:	2312      	movs	r3, #18
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	029b      	lsls	r3, r3, #10
 8004198:	4013      	ands	r3, r2
 800419a:	d100      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800419c:	e0a3      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419e:	2011      	movs	r0, #17
 80041a0:	183b      	adds	r3, r7, r0
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a6:	4bc3      	ldr	r3, [pc, #780]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	055b      	lsls	r3, r3, #21
 80041ae:	4013      	ands	r3, r2
 80041b0:	d110      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b2:	4bc0      	ldr	r3, [pc, #768]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b6:	4bbf      	ldr	r3, [pc, #764]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041b8:	2180      	movs	r1, #128	; 0x80
 80041ba:	0549      	lsls	r1, r1, #21
 80041bc:	430a      	orrs	r2, r1
 80041be:	63da      	str	r2, [r3, #60]	; 0x3c
 80041c0:	4bbc      	ldr	r3, [pc, #752]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80041c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	055b      	lsls	r3, r3, #21
 80041c8:	4013      	ands	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ce:	183b      	adds	r3, r7, r0
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d4:	4bb8      	ldr	r3, [pc, #736]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4bb7      	ldr	r3, [pc, #732]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	0049      	lsls	r1, r1, #1
 80041de:	430a      	orrs	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e2:	f7fd fc17 	bl	8001a14 <HAL_GetTick>
 80041e6:	0003      	movs	r3, r0
 80041e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ea:	e00b      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ec:	f7fd fc12 	bl	8001a14 <HAL_GetTick>
 80041f0:	0002      	movs	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d904      	bls.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80041fa:	2313      	movs	r3, #19
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	2203      	movs	r2, #3
 8004200:	701a      	strb	r2, [r3, #0]
        break;
 8004202:	e005      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004204:	4bac      	ldr	r3, [pc, #688]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	4013      	ands	r3, r2
 800420e:	d0ed      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004210:	2313      	movs	r3, #19
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d154      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800421a:	4ba6      	ldr	r3, [pc, #664]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800421c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800421e:	23c0      	movs	r3, #192	; 0xc0
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4013      	ands	r3, r2
 8004224:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d019      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	429a      	cmp	r2, r3
 8004234:	d014      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004236:	4b9f      	ldr	r3, [pc, #636]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	4aa0      	ldr	r2, [pc, #640]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800423c:	4013      	ands	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004240:	4b9c      	ldr	r3, [pc, #624]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004244:	4b9b      	ldr	r3, [pc, #620]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	0249      	lsls	r1, r1, #9
 800424a:	430a      	orrs	r2, r1
 800424c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800424e:	4b99      	ldr	r3, [pc, #612]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004250:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004252:	4b98      	ldr	r3, [pc, #608]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004254:	499a      	ldr	r1, [pc, #616]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004256:	400a      	ands	r2, r1
 8004258:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800425a:	4b96      	ldr	r3, [pc, #600]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2201      	movs	r2, #1
 8004264:	4013      	ands	r3, r2
 8004266:	d016      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fbd4 	bl	8001a14 <HAL_GetTick>
 800426c:	0003      	movs	r3, r0
 800426e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004270:	e00c      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fd fbcf 	bl	8001a14 <HAL_GetTick>
 8004276:	0002      	movs	r2, r0
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	4a91      	ldr	r2, [pc, #580]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d904      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004282:	2313      	movs	r3, #19
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	2203      	movs	r2, #3
 8004288:	701a      	strb	r2, [r3, #0]
            break;
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428c:	4b89      	ldr	r3, [pc, #548]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	2202      	movs	r2, #2
 8004292:	4013      	ands	r3, r2
 8004294:	d0ed      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004296:	2313      	movs	r3, #19
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042a0:	4b84      	ldr	r3, [pc, #528]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a4:	4a85      	ldr	r2, [pc, #532]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	0019      	movs	r1, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ae:	4b81      	ldr	r3, [pc, #516]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042b0:	430a      	orrs	r2, r1
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80042b4:	e00c      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042b6:	2312      	movs	r3, #18
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2213      	movs	r2, #19
 80042bc:	18ba      	adds	r2, r7, r2
 80042be:	7812      	ldrb	r2, [r2, #0]
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	e005      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	2312      	movs	r3, #18
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	2213      	movs	r2, #19
 80042ca:	18ba      	adds	r2, r7, r2
 80042cc:	7812      	ldrb	r2, [r2, #0]
 80042ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042d0:	2311      	movs	r3, #17
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042da:	4b76      	ldr	r3, [pc, #472]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042de:	4b75      	ldr	r3, [pc, #468]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042e0:	4979      	ldr	r1, [pc, #484]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80042e2:	400a      	ands	r2, r1
 80042e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2201      	movs	r2, #1
 80042ec:	4013      	ands	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f0:	4b70      	ldr	r3, [pc, #448]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	2203      	movs	r2, #3
 80042f6:	4393      	bics	r3, r2
 80042f8:	0019      	movs	r1, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	4b6d      	ldr	r3, [pc, #436]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004300:	430a      	orrs	r2, r1
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2202      	movs	r2, #2
 800430a:	4013      	ands	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800430e:	4b69      	ldr	r3, [pc, #420]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	220c      	movs	r2, #12
 8004314:	4393      	bics	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	4b65      	ldr	r3, [pc, #404]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800431e:	430a      	orrs	r2, r1
 8004320:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2210      	movs	r2, #16
 8004328:	4013      	ands	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800432c:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	4a66      	ldr	r2, [pc, #408]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004332:	4013      	ands	r3, r2
 8004334:	0019      	movs	r1, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	4b5e      	ldr	r3, [pc, #376]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800433c:	430a      	orrs	r2, r1
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4013      	ands	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800434c:	4b59      	ldr	r3, [pc, #356]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	4a5f      	ldr	r2, [pc, #380]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004352:	4013      	ands	r3, r2
 8004354:	0019      	movs	r1, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	4b56      	ldr	r3, [pc, #344]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800435c:	430a      	orrs	r2, r1
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4013      	ands	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800436c:	4b51      	ldr	r3, [pc, #324]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	4a58      	ldr	r2, [pc, #352]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004372:	4013      	ands	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	4b4e      	ldr	r3, [pc, #312]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800437c:	430a      	orrs	r2, r1
 800437e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2220      	movs	r2, #32
 8004386:	4013      	ands	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800438a:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	4a52      	ldr	r2, [pc, #328]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004390:	4013      	ands	r3, r2
 8004392:	0019      	movs	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	4b46      	ldr	r3, [pc, #280]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800439a:	430a      	orrs	r2, r1
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	2380      	movs	r3, #128	; 0x80
 80043a4:	01db      	lsls	r3, r3, #7
 80043a6:	4013      	ands	r3, r2
 80043a8:	d015      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043aa:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	0899      	lsrs	r1, r3, #2
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1a      	ldr	r2, [r3, #32]
 80043b6:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043b8:	430a      	orrs	r2, r1
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	05db      	lsls	r3, r3, #23
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d106      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043c8:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	4b39      	ldr	r3, [pc, #228]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	0249      	lsls	r1, r1, #9
 80043d2:	430a      	orrs	r2, r1
 80043d4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	4013      	ands	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043e2:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e6:	2240      	movs	r2, #64	; 0x40
 80043e8:	4393      	bics	r3, r2
 80043ea:	0019      	movs	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f0:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043f2:	430a      	orrs	r2, r1
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	039b      	lsls	r3, r3, #14
 80043fe:	4013      	ands	r3, r2
 8004400:	d016      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	4a35      	ldr	r2, [pc, #212]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004408:	4013      	ands	r3, r2
 800440a:	0019      	movs	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004410:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004412:	430a      	orrs	r2, r1
 8004414:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800441a:	2380      	movs	r3, #128	; 0x80
 800441c:	03db      	lsls	r3, r3, #15
 800441e:	429a      	cmp	r2, r3
 8004420:	d106      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004428:	2180      	movs	r1, #128	; 0x80
 800442a:	0449      	lsls	r1, r1, #17
 800442c:	430a      	orrs	r2, r1
 800442e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	03db      	lsls	r3, r3, #15
 8004438:	4013      	ands	r3, r2
 800443a:	d016      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004442:	4013      	ands	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444a:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800444c:	430a      	orrs	r2, r1
 800444e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	045b      	lsls	r3, r3, #17
 8004458:	429a      	cmp	r2, r3
 800445a:	d106      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800445c:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004462:	2180      	movs	r1, #128	; 0x80
 8004464:	0449      	lsls	r1, r1, #17
 8004466:	430a      	orrs	r2, r1
 8004468:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	2380      	movs	r3, #128	; 0x80
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	4013      	ands	r3, r2
 8004474:	d016      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004476:	4b0f      	ldr	r3, [pc, #60]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	4a1a      	ldr	r2, [pc, #104]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800447c:	4013      	ands	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004486:	430a      	orrs	r2, r1
 8004488:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	01db      	lsls	r3, r3, #7
 8004492:	429a      	cmp	r2, r3
 8004494:	d106      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004496:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800449c:	2180      	movs	r1, #128	; 0x80
 800449e:	0249      	lsls	r1, r1, #9
 80044a0:	430a      	orrs	r2, r1
 80044a2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80044a4:	2312      	movs	r3, #18
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	781b      	ldrb	r3, [r3, #0]
}
 80044aa:	0018      	movs	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b006      	add	sp, #24
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40007000 	.word	0x40007000
 80044bc:	fffffcff 	.word	0xfffffcff
 80044c0:	fffeffff 	.word	0xfffeffff
 80044c4:	00001388 	.word	0x00001388
 80044c8:	efffffff 	.word	0xefffffff
 80044cc:	fffff3ff 	.word	0xfffff3ff
 80044d0:	fff3ffff 	.word	0xfff3ffff
 80044d4:	ffcfffff 	.word	0xffcfffff
 80044d8:	ffffcfff 	.word	0xffffcfff
 80044dc:	ffbfffff 	.word	0xffbfffff
 80044e0:	feffffff 	.word	0xfeffffff
 80044e4:	ffff3fff 	.word	0xffff3fff

080044e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e04a      	b.n	8004590 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	223d      	movs	r2, #61	; 0x3d
 80044fe:	5c9b      	ldrb	r3, [r3, r2]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d107      	bne.n	8004516 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	223c      	movs	r2, #60	; 0x3c
 800450a:	2100      	movs	r1, #0
 800450c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f7fd f817 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	223d      	movs	r2, #61	; 0x3d
 800451a:	2102      	movs	r1, #2
 800451c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3304      	adds	r3, #4
 8004526:	0019      	movs	r1, r3
 8004528:	0010      	movs	r0, r2
 800452a:	f000 fcd9 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2248      	movs	r2, #72	; 0x48
 8004532:	2101      	movs	r1, #1
 8004534:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	223e      	movs	r2, #62	; 0x3e
 800453a:	2101      	movs	r1, #1
 800453c:	5499      	strb	r1, [r3, r2]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	223f      	movs	r2, #63	; 0x3f
 8004542:	2101      	movs	r1, #1
 8004544:	5499      	strb	r1, [r3, r2]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2240      	movs	r2, #64	; 0x40
 800454a:	2101      	movs	r1, #1
 800454c:	5499      	strb	r1, [r3, r2]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2241      	movs	r2, #65	; 0x41
 8004552:	2101      	movs	r1, #1
 8004554:	5499      	strb	r1, [r3, r2]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2242      	movs	r2, #66	; 0x42
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2243      	movs	r2, #67	; 0x43
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2244      	movs	r2, #68	; 0x44
 800456a:	2101      	movs	r1, #1
 800456c:	5499      	strb	r1, [r3, r2]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2245      	movs	r2, #69	; 0x45
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2246      	movs	r2, #70	; 0x46
 800457a:	2101      	movs	r1, #1
 800457c:	5499      	strb	r1, [r3, r2]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2247      	movs	r2, #71	; 0x47
 8004582:	2101      	movs	r1, #1
 8004584:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	223d      	movs	r2, #61	; 0x3d
 800458a:	2101      	movs	r1, #1
 800458c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	223d      	movs	r2, #61	; 0x3d
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d001      	beq.n	80045b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e042      	b.n	8004636 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	223d      	movs	r2, #61	; 0x3d
 80045b4:	2102      	movs	r1, #2
 80045b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2101      	movs	r1, #1
 80045c4:	430a      	orrs	r2, r1
 80045c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1c      	ldr	r2, [pc, #112]	; (8004640 <HAL_TIM_Base_Start_IT+0xa8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00f      	beq.n	80045f2 <HAL_TIM_Base_Start_IT+0x5a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	05db      	lsls	r3, r3, #23
 80045da:	429a      	cmp	r2, r3
 80045dc:	d009      	beq.n	80045f2 <HAL_TIM_Base_Start_IT+0x5a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <HAL_TIM_Base_Start_IT+0xac>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_TIM_Base_Start_IT+0x5a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a16      	ldr	r2, [pc, #88]	; (8004648 <HAL_TIM_Base_Start_IT+0xb0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d116      	bne.n	8004620 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4a14      	ldr	r2, [pc, #80]	; (800464c <HAL_TIM_Base_Start_IT+0xb4>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b06      	cmp	r3, #6
 8004602:	d016      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x9a>
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	025b      	lsls	r3, r3, #9
 800460a:	429a      	cmp	r2, r3
 800460c:	d011      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2101      	movs	r1, #1
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461e:	e008      	b.n	8004632 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2101      	movs	r1, #1
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e000      	b.n	8004634 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	0018      	movs	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	b004      	add	sp, #16
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40000400 	.word	0x40000400
 8004648:	40014000 	.word	0x40014000
 800464c:	00010007 	.word	0x00010007

08004650 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e04a      	b.n	80046f8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	223d      	movs	r2, #61	; 0x3d
 8004666:	5c9b      	ldrb	r3, [r3, r2]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	223c      	movs	r2, #60	; 0x3c
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	0018      	movs	r0, r3
 800467a:	f000 f841 	bl	8004700 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	223d      	movs	r2, #61	; 0x3d
 8004682:	2102      	movs	r1, #2
 8004684:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	0019      	movs	r1, r3
 8004690:	0010      	movs	r0, r2
 8004692:	f000 fc25 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2248      	movs	r2, #72	; 0x48
 800469a:	2101      	movs	r1, #1
 800469c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	223e      	movs	r2, #62	; 0x3e
 80046a2:	2101      	movs	r1, #1
 80046a4:	5499      	strb	r1, [r3, r2]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	223f      	movs	r2, #63	; 0x3f
 80046aa:	2101      	movs	r1, #1
 80046ac:	5499      	strb	r1, [r3, r2]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2240      	movs	r2, #64	; 0x40
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2241      	movs	r2, #65	; 0x41
 80046ba:	2101      	movs	r1, #1
 80046bc:	5499      	strb	r1, [r3, r2]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2242      	movs	r2, #66	; 0x42
 80046c2:	2101      	movs	r1, #1
 80046c4:	5499      	strb	r1, [r3, r2]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2243      	movs	r2, #67	; 0x43
 80046ca:	2101      	movs	r1, #1
 80046cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2244      	movs	r2, #68	; 0x44
 80046d2:	2101      	movs	r1, #1
 80046d4:	5499      	strb	r1, [r3, r2]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2245      	movs	r2, #69	; 0x45
 80046da:	2101      	movs	r1, #1
 80046dc:	5499      	strb	r1, [r3, r2]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2246      	movs	r2, #70	; 0x46
 80046e2:	2101      	movs	r1, #1
 80046e4:	5499      	strb	r1, [r3, r2]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2247      	movs	r2, #71	; 0x47
 80046ea:	2101      	movs	r1, #1
 80046ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	223d      	movs	r2, #61	; 0x3d
 80046f2:	2101      	movs	r1, #1
 80046f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <HAL_TIM_PWM_Start+0x22>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	223e      	movs	r2, #62	; 0x3e
 8004724:	5c9b      	ldrb	r3, [r3, r2]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	1e5a      	subs	r2, r3, #1
 800472c:	4193      	sbcs	r3, r2
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e037      	b.n	80047a2 <HAL_TIM_PWM_Start+0x92>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d108      	bne.n	800474a <HAL_TIM_PWM_Start+0x3a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	223f      	movs	r2, #63	; 0x3f
 800473c:	5c9b      	ldrb	r3, [r3, r2]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	1e5a      	subs	r2, r3, #1
 8004744:	4193      	sbcs	r3, r2
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e02b      	b.n	80047a2 <HAL_TIM_PWM_Start+0x92>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d108      	bne.n	8004762 <HAL_TIM_PWM_Start+0x52>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2240      	movs	r2, #64	; 0x40
 8004754:	5c9b      	ldrb	r3, [r3, r2]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	1e5a      	subs	r2, r3, #1
 800475c:	4193      	sbcs	r3, r2
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e01f      	b.n	80047a2 <HAL_TIM_PWM_Start+0x92>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b0c      	cmp	r3, #12
 8004766:	d108      	bne.n	800477a <HAL_TIM_PWM_Start+0x6a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2241      	movs	r2, #65	; 0x41
 800476c:	5c9b      	ldrb	r3, [r3, r2]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	1e5a      	subs	r2, r3, #1
 8004774:	4193      	sbcs	r3, r2
 8004776:	b2db      	uxtb	r3, r3
 8004778:	e013      	b.n	80047a2 <HAL_TIM_PWM_Start+0x92>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b10      	cmp	r3, #16
 800477e:	d108      	bne.n	8004792 <HAL_TIM_PWM_Start+0x82>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2242      	movs	r2, #66	; 0x42
 8004784:	5c9b      	ldrb	r3, [r3, r2]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	1e5a      	subs	r2, r3, #1
 800478c:	4193      	sbcs	r3, r2
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e007      	b.n	80047a2 <HAL_TIM_PWM_Start+0x92>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2243      	movs	r2, #67	; 0x43
 8004796:	5c9b      	ldrb	r3, [r3, r2]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	1e5a      	subs	r2, r3, #1
 800479e:	4193      	sbcs	r3, r2
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e08b      	b.n	80048c2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	223e      	movs	r2, #62	; 0x3e
 80047b4:	2102      	movs	r1, #2
 80047b6:	5499      	strb	r1, [r3, r2]
 80047b8:	e023      	b.n	8004802 <HAL_TIM_PWM_Start+0xf2>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d104      	bne.n	80047ca <HAL_TIM_PWM_Start+0xba>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	223f      	movs	r2, #63	; 0x3f
 80047c4:	2102      	movs	r1, #2
 80047c6:	5499      	strb	r1, [r3, r2]
 80047c8:	e01b      	b.n	8004802 <HAL_TIM_PWM_Start+0xf2>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d104      	bne.n	80047da <HAL_TIM_PWM_Start+0xca>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2240      	movs	r2, #64	; 0x40
 80047d4:	2102      	movs	r1, #2
 80047d6:	5499      	strb	r1, [r3, r2]
 80047d8:	e013      	b.n	8004802 <HAL_TIM_PWM_Start+0xf2>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b0c      	cmp	r3, #12
 80047de:	d104      	bne.n	80047ea <HAL_TIM_PWM_Start+0xda>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2241      	movs	r2, #65	; 0x41
 80047e4:	2102      	movs	r1, #2
 80047e6:	5499      	strb	r1, [r3, r2]
 80047e8:	e00b      	b.n	8004802 <HAL_TIM_PWM_Start+0xf2>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_PWM_Start+0xea>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2242      	movs	r2, #66	; 0x42
 80047f4:	2102      	movs	r1, #2
 80047f6:	5499      	strb	r1, [r3, r2]
 80047f8:	e003      	b.n	8004802 <HAL_TIM_PWM_Start+0xf2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2243      	movs	r2, #67	; 0x43
 80047fe:	2102      	movs	r1, #2
 8004800:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6839      	ldr	r1, [r7, #0]
 8004808:	2201      	movs	r2, #1
 800480a:	0018      	movs	r0, r3
 800480c:	f000 ff56 	bl	80056bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a2d      	ldr	r2, [pc, #180]	; (80048cc <HAL_TIM_PWM_Start+0x1bc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_TIM_PWM_Start+0x128>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2c      	ldr	r2, [pc, #176]	; (80048d0 <HAL_TIM_PWM_Start+0x1c0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIM_PWM_Start+0x128>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <HAL_TIM_PWM_Start+0x1c4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIM_PWM_Start+0x128>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a29      	ldr	r2, [pc, #164]	; (80048d8 <HAL_TIM_PWM_Start+0x1c8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d101      	bne.n	800483c <HAL_TIM_PWM_Start+0x12c>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_TIM_PWM_Start+0x12e>
 800483c:	2300      	movs	r3, #0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	0209      	lsls	r1, r1, #8
 8004850:	430a      	orrs	r2, r1
 8004852:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <HAL_TIM_PWM_Start+0x1bc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00f      	beq.n	800487e <HAL_TIM_PWM_Start+0x16e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	05db      	lsls	r3, r3, #23
 8004866:	429a      	cmp	r2, r3
 8004868:	d009      	beq.n	800487e <HAL_TIM_PWM_Start+0x16e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1b      	ldr	r2, [pc, #108]	; (80048dc <HAL_TIM_PWM_Start+0x1cc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_TIM_PWM_Start+0x16e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <HAL_TIM_PWM_Start+0x1c0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d116      	bne.n	80048ac <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <HAL_TIM_PWM_Start+0x1d0>)
 8004886:	4013      	ands	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b06      	cmp	r3, #6
 800488e:	d016      	beq.n	80048be <HAL_TIM_PWM_Start+0x1ae>
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	025b      	lsls	r3, r3, #9
 8004896:	429a      	cmp	r2, r3
 8004898:	d011      	beq.n	80048be <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2101      	movs	r1, #1
 80048a6:	430a      	orrs	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048aa:	e008      	b.n	80048be <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2101      	movs	r1, #1
 80048b8:	430a      	orrs	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e000      	b.n	80048c0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	0018      	movs	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b004      	add	sp, #16
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40014400 	.word	0x40014400
 80048d8:	40014800 	.word	0x40014800
 80048dc:	40000400 	.word	0x40000400
 80048e0:	00010007 	.word	0x00010007

080048e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2202      	movs	r2, #2
 8004900:	4013      	ands	r3, r2
 8004902:	d021      	beq.n	8004948 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2202      	movs	r2, #2
 8004908:	4013      	ands	r3, r2
 800490a:	d01d      	beq.n	8004948 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2203      	movs	r2, #3
 8004912:	4252      	negs	r2, r2
 8004914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2203      	movs	r2, #3
 8004924:	4013      	ands	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	0018      	movs	r0, r3
 800492c:	f000 fac0 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004930:	e007      	b.n	8004942 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f000 fab3 	bl	8004ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f000 fabf 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2204      	movs	r2, #4
 800494c:	4013      	ands	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2204      	movs	r2, #4
 8004954:	4013      	ands	r3, r2
 8004956:	d01e      	beq.n	8004996 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2205      	movs	r2, #5
 800495e:	4252      	negs	r2, r2
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	23c0      	movs	r3, #192	; 0xc0
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4013      	ands	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 fa99 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 800497e:	e007      	b.n	8004990 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	0018      	movs	r0, r3
 8004984:	f000 fa8c 	bl	8004ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	0018      	movs	r0, r3
 800498c:	f000 fa98 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2208      	movs	r2, #8
 800499a:	4013      	ands	r3, r2
 800499c:	d021      	beq.n	80049e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2208      	movs	r2, #8
 80049a2:	4013      	ands	r3, r2
 80049a4:	d01d      	beq.n	80049e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2209      	movs	r2, #9
 80049ac:	4252      	negs	r2, r2
 80049ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2204      	movs	r2, #4
 80049b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	2203      	movs	r2, #3
 80049be:	4013      	ands	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 fa73 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 80049ca:	e007      	b.n	80049dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fa66 	bl	8004ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 fa72 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2210      	movs	r2, #16
 80049e6:	4013      	ands	r3, r2
 80049e8:	d022      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2210      	movs	r2, #16
 80049ee:	4013      	ands	r3, r2
 80049f0:	d01e      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2211      	movs	r2, #17
 80049f8:	4252      	negs	r2, r2
 80049fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2208      	movs	r2, #8
 8004a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	23c0      	movs	r3, #192	; 0xc0
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f000 fa4c 	bl	8004eb0 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e007      	b.n	8004a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f000 fa3f 	bl	8004ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 fa4b 	bl	8004ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2201      	movs	r2, #1
 8004a34:	4013      	ands	r3, r2
 8004a36:	d00c      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d008      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2202      	movs	r2, #2
 8004a46:	4252      	negs	r2, r2
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7fc fbe1 	bl	8001214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2280      	movs	r2, #128	; 0x80
 8004a56:	4013      	ands	r3, r2
 8004a58:	d104      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	019b      	lsls	r3, r3, #6
 8004a60:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a62:	d00b      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2280      	movs	r2, #128	; 0x80
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d007      	beq.n	8004a7c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1e      	ldr	r2, [pc, #120]	; (8004aec <HAL_TIM_IRQHandler+0x208>)
 8004a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 feba 	bl	80057f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4013      	ands	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2280      	movs	r2, #128	; 0x80
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <HAL_TIM_IRQHandler+0x20c>)
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f000 feb1 	bl	8005800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2240      	movs	r2, #64	; 0x40
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2240      	movs	r2, #64	; 0x40
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d008      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2241      	movs	r2, #65	; 0x41
 8004ab4:	4252      	negs	r2, r2
 8004ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	0018      	movs	r0, r3
 8004abc:	f000 fa08 	bl	8004ed0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	4013      	ands	r3, r2
 8004ace:	d008      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2221      	movs	r2, #33	; 0x21
 8004ad6:	4252      	negs	r2, r2
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f000 fe7f 	bl	80057e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b004      	add	sp, #16
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	ffffdf7f 	.word	0xffffdf7f
 8004af0:	fffffeff 	.word	0xfffffeff

08004af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b00:	2317      	movs	r3, #23
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	223c      	movs	r2, #60	; 0x3c
 8004b0c:	5c9b      	ldrb	r3, [r3, r2]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e0e5      	b.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	223c      	movs	r2, #60	; 0x3c
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b14      	cmp	r3, #20
 8004b22:	d900      	bls.n	8004b26 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004b24:	e0d1      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	009a      	lsls	r2, r3, #2
 8004b2a:	4b70      	ldr	r3, [pc, #448]	; (8004cec <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004b2c:	18d3      	adds	r3, r2, r3
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	0011      	movs	r1, r2
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 fa5e 	bl	8004ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2108      	movs	r1, #8
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2104      	movs	r1, #4
 8004b5c:	438a      	bics	r2, r1
 8004b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6999      	ldr	r1, [r3, #24]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	619a      	str	r2, [r3, #24]
      break;
 8004b72:	e0af      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	0011      	movs	r1, r2
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 fac7 	bl	8005110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2180      	movs	r1, #128	; 0x80
 8004b8e:	0109      	lsls	r1, r1, #4
 8004b90:	430a      	orrs	r2, r1
 8004b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4954      	ldr	r1, [pc, #336]	; (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6999      	ldr	r1, [r3, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	619a      	str	r2, [r3, #24]
      break;
 8004bb8:	e08c      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	0011      	movs	r1, r2
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f000 fb28 	bl	8005218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2108      	movs	r1, #8
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69da      	ldr	r2, [r3, #28]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2104      	movs	r1, #4
 8004be4:	438a      	bics	r2, r1
 8004be6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	69d9      	ldr	r1, [r3, #28]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	61da      	str	r2, [r3, #28]
      break;
 8004bfa:	e06b      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	0011      	movs	r1, r2
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 fb8f 	bl	8005328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2180      	movs	r1, #128	; 0x80
 8004c16:	0109      	lsls	r1, r1, #4
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4932      	ldr	r1, [pc, #200]	; (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004c28:	400a      	ands	r2, r1
 8004c2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69d9      	ldr	r1, [r3, #28]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	021a      	lsls	r2, r3, #8
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	61da      	str	r2, [r3, #28]
      break;
 8004c40:	e048      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0011      	movs	r1, r2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 fbd6 	bl	80053fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2108      	movs	r1, #8
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2104      	movs	r1, #4
 8004c6c:	438a      	bics	r2, r1
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c82:	e027      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	0011      	movs	r1, r2
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 fc15 	bl	80054bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2180      	movs	r1, #128	; 0x80
 8004c9e:	0109      	lsls	r1, r1, #4
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4910      	ldr	r1, [pc, #64]	; (8004cf0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	021a      	lsls	r2, r3, #8
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cc8:	e004      	b.n	8004cd4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004cca:	2317      	movs	r3, #23
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
      break;
 8004cd2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	223c      	movs	r2, #60	; 0x3c
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5499      	strb	r1, [r3, r2]

  return status;
 8004cdc:	2317      	movs	r3, #23
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	781b      	ldrb	r3, [r3, #0]
}
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b006      	add	sp, #24
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	08008ad0 	.word	0x08008ad0
 8004cf0:	fffffbff 	.word	0xfffffbff

08004cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	230f      	movs	r3, #15
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223c      	movs	r2, #60	; 0x3c
 8004d0a:	5c9b      	ldrb	r3, [r3, r2]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x20>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e0bc      	b.n	8004e8e <HAL_TIM_ConfigClockSource+0x19a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	223c      	movs	r2, #60	; 0x3c
 8004d18:	2101      	movs	r1, #1
 8004d1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	223d      	movs	r2, #61	; 0x3d
 8004d20:	2102      	movs	r1, #2
 8004d22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4a5a      	ldr	r2, [pc, #360]	; (8004e98 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4a59      	ldr	r2, [pc, #356]	; (8004e9c <HAL_TIM_ConfigClockSource+0x1a8>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2280      	movs	r2, #128	; 0x80
 8004d4a:	0192      	lsls	r2, r2, #6
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d040      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0xde>
 8004d50:	2280      	movs	r2, #128	; 0x80
 8004d52:	0192      	lsls	r2, r2, #6
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d900      	bls.n	8004d5a <HAL_TIM_ConfigClockSource+0x66>
 8004d58:	e088      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d5a:	2280      	movs	r2, #128	; 0x80
 8004d5c:	0152      	lsls	r2, r2, #5
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d100      	bne.n	8004d64 <HAL_TIM_ConfigClockSource+0x70>
 8004d62:	e088      	b.n	8004e76 <HAL_TIM_ConfigClockSource+0x182>
 8004d64:	2280      	movs	r2, #128	; 0x80
 8004d66:	0152      	lsls	r2, r2, #5
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d900      	bls.n	8004d6e <HAL_TIM_ConfigClockSource+0x7a>
 8004d6c:	e07e      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d6e:	2b70      	cmp	r3, #112	; 0x70
 8004d70:	d018      	beq.n	8004da4 <HAL_TIM_ConfigClockSource+0xb0>
 8004d72:	d900      	bls.n	8004d76 <HAL_TIM_ConfigClockSource+0x82>
 8004d74:	e07a      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d76:	2b60      	cmp	r3, #96	; 0x60
 8004d78:	d04f      	beq.n	8004e1a <HAL_TIM_ConfigClockSource+0x126>
 8004d7a:	d900      	bls.n	8004d7e <HAL_TIM_ConfigClockSource+0x8a>
 8004d7c:	e076      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d7e:	2b50      	cmp	r3, #80	; 0x50
 8004d80:	d03b      	beq.n	8004dfa <HAL_TIM_ConfigClockSource+0x106>
 8004d82:	d900      	bls.n	8004d86 <HAL_TIM_ConfigClockSource+0x92>
 8004d84:	e072      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d057      	beq.n	8004e3a <HAL_TIM_ConfigClockSource+0x146>
 8004d8a:	d900      	bls.n	8004d8e <HAL_TIM_ConfigClockSource+0x9a>
 8004d8c:	e06e      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d8e:	2b30      	cmp	r3, #48	; 0x30
 8004d90:	d063      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004d92:	d86b      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d060      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004d98:	d868      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d05d      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004d9e:	2b10      	cmp	r3, #16
 8004da0:	d05b      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0x166>
 8004da2:	e063      	b.n	8004e6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db4:	f000 fc62 	bl	800567c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2277      	movs	r2, #119	; 0x77
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]
      break;
 8004dd0:	e052      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004de2:	f000 fc4b 	bl	800567c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2180      	movs	r1, #128	; 0x80
 8004df2:	01c9      	lsls	r1, r1, #7
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
      break;
 8004df8:	e03e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	001a      	movs	r2, r3
 8004e08:	f000 fbbc 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2150      	movs	r1, #80	; 0x50
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 fc16 	bl	8005644 <TIM_ITRx_SetConfig>
      break;
 8004e18:	e02e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e26:	001a      	movs	r2, r3
 8004e28:	f000 fbda 	bl	80055e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2160      	movs	r1, #96	; 0x60
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 fc06 	bl	8005644 <TIM_ITRx_SetConfig>
      break;
 8004e38:	e01e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e46:	001a      	movs	r2, r3
 8004e48:	f000 fb9c 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2140      	movs	r1, #64	; 0x40
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 fbf6 	bl	8005644 <TIM_ITRx_SetConfig>
      break;
 8004e58:	e00e      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	0019      	movs	r1, r3
 8004e64:	0010      	movs	r0, r2
 8004e66:	f000 fbed 	bl	8005644 <TIM_ITRx_SetConfig>
      break;
 8004e6a:	e005      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004e6c:	230f      	movs	r3, #15
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
      break;
 8004e74:	e000      	b.n	8004e78 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004e76:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	223d      	movs	r2, #61	; 0x3d
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	223c      	movs	r2, #60	; 0x3c
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

  return status;
 8004e88:	230f      	movs	r3, #15
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	781b      	ldrb	r3, [r3, #0]
}
 8004e8e:	0018      	movs	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b004      	add	sp, #16
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			; (mov r8, r8)
 8004e98:	ffceff88 	.word	0xffceff88
 8004e9c:	ffff00ff 	.word	0xffff00ff

08004ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b002      	add	sp, #8
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b002      	add	sp, #8
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a3b      	ldr	r2, [pc, #236]	; (8004fe0 <TIM_Base_SetConfig+0x100>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d008      	beq.n	8004f0a <TIM_Base_SetConfig+0x2a>
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	05db      	lsls	r3, r3, #23
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d003      	beq.n	8004f0a <TIM_Base_SetConfig+0x2a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a37      	ldr	r2, [pc, #220]	; (8004fe4 <TIM_Base_SetConfig+0x104>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d108      	bne.n	8004f1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2270      	movs	r2, #112	; 0x70
 8004f0e:	4393      	bics	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a30      	ldr	r2, [pc, #192]	; (8004fe0 <TIM_Base_SetConfig+0x100>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <TIM_Base_SetConfig+0x76>
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	05db      	lsls	r3, r3, #23
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d013      	beq.n	8004f56 <TIM_Base_SetConfig+0x76>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <TIM_Base_SetConfig+0x104>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00f      	beq.n	8004f56 <TIM_Base_SetConfig+0x76>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a2b      	ldr	r2, [pc, #172]	; (8004fe8 <TIM_Base_SetConfig+0x108>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00b      	beq.n	8004f56 <TIM_Base_SetConfig+0x76>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <TIM_Base_SetConfig+0x10c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <TIM_Base_SetConfig+0x76>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a29      	ldr	r2, [pc, #164]	; (8004ff0 <TIM_Base_SetConfig+0x110>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d003      	beq.n	8004f56 <TIM_Base_SetConfig+0x76>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a28      	ldr	r2, [pc, #160]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d108      	bne.n	8004f68 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a27      	ldr	r2, [pc, #156]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2280      	movs	r2, #128	; 0x80
 8004f6c:	4393      	bics	r3, r2
 8004f6e:	001a      	movs	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <TIM_Base_SetConfig+0x100>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_Base_SetConfig+0xce>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a14      	ldr	r2, [pc, #80]	; (8004fec <TIM_Base_SetConfig+0x10c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_Base_SetConfig+0xce>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <TIM_Base_SetConfig+0x110>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_Base_SetConfig+0xce>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d103      	bne.n	8004fb6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d106      	bne.n	8004fd6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4393      	bics	r3, r2
 8004fd0:	001a      	movs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	611a      	str	r2, [r3, #16]
  }
}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b004      	add	sp, #16
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40002000 	.word	0x40002000
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400
 8004ff4:	40014800 	.word	0x40014800
 8004ff8:	fffffcff 	.word	0xfffffcff

08004ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	2201      	movs	r2, #1
 8005012:	4393      	bics	r3, r2
 8005014:	001a      	movs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a32      	ldr	r2, [pc, #200]	; (80050f4 <TIM_OC1_SetConfig+0xf8>)
 800502a:	4013      	ands	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2203      	movs	r2, #3
 8005032:	4393      	bics	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2202      	movs	r2, #2
 8005044:	4393      	bics	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a28      	ldr	r2, [pc, #160]	; (80050f8 <TIM_OC1_SetConfig+0xfc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00b      	beq.n	8005072 <TIM_OC1_SetConfig+0x76>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a27      	ldr	r2, [pc, #156]	; (80050fc <TIM_OC1_SetConfig+0x100>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <TIM_OC1_SetConfig+0x76>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a26      	ldr	r2, [pc, #152]	; (8005100 <TIM_OC1_SetConfig+0x104>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <TIM_OC1_SetConfig+0x76>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a25      	ldr	r2, [pc, #148]	; (8005104 <TIM_OC1_SetConfig+0x108>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10c      	bne.n	800508c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2208      	movs	r2, #8
 8005076:	4393      	bics	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2204      	movs	r2, #4
 8005088:	4393      	bics	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <TIM_OC1_SetConfig+0xfc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_OC1_SetConfig+0xb0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a19      	ldr	r2, [pc, #100]	; (80050fc <TIM_OC1_SetConfig+0x100>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_OC1_SetConfig+0xb0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a18      	ldr	r2, [pc, #96]	; (8005100 <TIM_OC1_SetConfig+0x104>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC1_SetConfig+0xb0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a17      	ldr	r2, [pc, #92]	; (8005104 <TIM_OC1_SetConfig+0x108>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d111      	bne.n	80050d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4a16      	ldr	r2, [pc, #88]	; (8005108 <TIM_OC1_SetConfig+0x10c>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <TIM_OC1_SetConfig+0x110>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b006      	add	sp, #24
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	fffeff8f 	.word	0xfffeff8f
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40014000 	.word	0x40014000
 8005100:	40014400 	.word	0x40014400
 8005104:	40014800 	.word	0x40014800
 8005108:	fffffeff 	.word	0xfffffeff
 800510c:	fffffdff 	.word	0xfffffdff

08005110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	2210      	movs	r2, #16
 8005126:	4393      	bics	r3, r2
 8005128:	001a      	movs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4a2e      	ldr	r2, [pc, #184]	; (80051f8 <TIM_OC2_SetConfig+0xe8>)
 800513e:	4013      	ands	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <TIM_OC2_SetConfig+0xec>)
 8005146:	4013      	ands	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2220      	movs	r2, #32
 800515a:	4393      	bics	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a24      	ldr	r2, [pc, #144]	; (8005200 <TIM_OC2_SetConfig+0xf0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10d      	bne.n	800518e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	4393      	bics	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2240      	movs	r2, #64	; 0x40
 800518a:	4393      	bics	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <TIM_OC2_SetConfig+0xf0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_OC2_SetConfig+0x9e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <TIM_OC2_SetConfig+0xf4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d007      	beq.n	80051ae <TIM_OC2_SetConfig+0x9e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_OC2_SetConfig+0xf8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC2_SetConfig+0x9e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <TIM_OC2_SetConfig+0xfc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d113      	bne.n	80051d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4a17      	ldr	r2, [pc, #92]	; (8005210 <TIM_OC2_SetConfig+0x100>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	4a16      	ldr	r2, [pc, #88]	; (8005214 <TIM_OC2_SetConfig+0x104>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	46c0      	nop			; (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b006      	add	sp, #24
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	feff8fff 	.word	0xfeff8fff
 80051fc:	fffffcff 	.word	0xfffffcff
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40014000 	.word	0x40014000
 8005208:	40014400 	.word	0x40014400
 800520c:	40014800 	.word	0x40014800
 8005210:	fffffbff 	.word	0xfffffbff
 8005214:	fffff7ff 	.word	0xfffff7ff

08005218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	4a33      	ldr	r2, [pc, #204]	; (80052fc <TIM_OC3_SetConfig+0xe4>)
 800522e:	401a      	ands	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a2f      	ldr	r2, [pc, #188]	; (8005300 <TIM_OC3_SetConfig+0xe8>)
 8005244:	4013      	ands	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2203      	movs	r2, #3
 800524c:	4393      	bics	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <TIM_OC3_SetConfig+0xec>)
 800525e:	4013      	ands	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a25      	ldr	r2, [pc, #148]	; (8005308 <TIM_OC3_SetConfig+0xf0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10d      	bne.n	8005292 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	4a24      	ldr	r2, [pc, #144]	; (800530c <TIM_OC3_SetConfig+0xf4>)
 800527a:	4013      	ands	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	4a20      	ldr	r2, [pc, #128]	; (8005310 <TIM_OC3_SetConfig+0xf8>)
 800528e:	4013      	ands	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <TIM_OC3_SetConfig+0xf0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00b      	beq.n	80052b2 <TIM_OC3_SetConfig+0x9a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <TIM_OC3_SetConfig+0xfc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d007      	beq.n	80052b2 <TIM_OC3_SetConfig+0x9a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <TIM_OC3_SetConfig+0x100>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_OC3_SetConfig+0x9a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1b      	ldr	r2, [pc, #108]	; (800531c <TIM_OC3_SetConfig+0x104>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d113      	bne.n	80052da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <TIM_OC3_SetConfig+0x108>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4a19      	ldr	r2, [pc, #100]	; (8005324 <TIM_OC3_SetConfig+0x10c>)
 80052be:	4013      	ands	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	621a      	str	r2, [r3, #32]
}
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b006      	add	sp, #24
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	fffffeff 	.word	0xfffffeff
 8005300:	fffeff8f 	.word	0xfffeff8f
 8005304:	fffffdff 	.word	0xfffffdff
 8005308:	40012c00 	.word	0x40012c00
 800530c:	fffff7ff 	.word	0xfffff7ff
 8005310:	fffffbff 	.word	0xfffffbff
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800
 8005320:	ffffefff 	.word	0xffffefff
 8005324:	ffffdfff 	.word	0xffffdfff

08005328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4a26      	ldr	r2, [pc, #152]	; (80053d8 <TIM_OC4_SetConfig+0xb0>)
 800533e:	401a      	ands	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a22      	ldr	r2, [pc, #136]	; (80053dc <TIM_OC4_SetConfig+0xb4>)
 8005354:	4013      	ands	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <TIM_OC4_SetConfig+0xb8>)
 800535c:	4013      	ands	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <TIM_OC4_SetConfig+0xbc>)
 8005370:	4013      	ands	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	031b      	lsls	r3, r3, #12
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a19      	ldr	r2, [pc, #100]	; (80053e8 <TIM_OC4_SetConfig+0xc0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00b      	beq.n	80053a0 <TIM_OC4_SetConfig+0x78>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a18      	ldr	r2, [pc, #96]	; (80053ec <TIM_OC4_SetConfig+0xc4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_OC4_SetConfig+0x78>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <TIM_OC4_SetConfig+0xc8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC4_SetConfig+0x78>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <TIM_OC4_SetConfig+0xcc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d109      	bne.n	80053b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <TIM_OC4_SetConfig+0xd0>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b006      	add	sp, #24
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	ffffefff 	.word	0xffffefff
 80053dc:	feff8fff 	.word	0xfeff8fff
 80053e0:	fffffcff 	.word	0xfffffcff
 80053e4:	ffffdfff 	.word	0xffffdfff
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800
 80053f8:	ffffbfff 	.word	0xffffbfff

080053fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	4a23      	ldr	r2, [pc, #140]	; (80054a0 <TIM_OC5_SetConfig+0xa4>)
 8005412:	401a      	ands	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <TIM_OC5_SetConfig+0xa8>)
 8005428:	4013      	ands	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4a1b      	ldr	r2, [pc, #108]	; (80054a8 <TIM_OC5_SetConfig+0xac>)
 800543a:	4013      	ands	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	041b      	lsls	r3, r3, #16
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a17      	ldr	r2, [pc, #92]	; (80054ac <TIM_OC5_SetConfig+0xb0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00b      	beq.n	800546a <TIM_OC5_SetConfig+0x6e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a16      	ldr	r2, [pc, #88]	; (80054b0 <TIM_OC5_SetConfig+0xb4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d007      	beq.n	800546a <TIM_OC5_SetConfig+0x6e>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <TIM_OC5_SetConfig+0xb8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_OC5_SetConfig+0x6e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <TIM_OC5_SetConfig+0xbc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d109      	bne.n	800547e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	4a0c      	ldr	r2, [pc, #48]	; (80054a0 <TIM_OC5_SetConfig+0xa4>)
 800546e:	4013      	ands	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b006      	add	sp, #24
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	fffeffff 	.word	0xfffeffff
 80054a4:	fffeff8f 	.word	0xfffeff8f
 80054a8:	fffdffff 	.word	0xfffdffff
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800

080054bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	4a24      	ldr	r2, [pc, #144]	; (8005564 <TIM_OC6_SetConfig+0xa8>)
 80054d2:	401a      	ands	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a20      	ldr	r2, [pc, #128]	; (8005568 <TIM_OC6_SetConfig+0xac>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4a1c      	ldr	r2, [pc, #112]	; (800556c <TIM_OC6_SetConfig+0xb0>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	051b      	lsls	r3, r3, #20
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a18      	ldr	r2, [pc, #96]	; (8005570 <TIM_OC6_SetConfig+0xb4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00b      	beq.n	800552c <TIM_OC6_SetConfig+0x70>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a17      	ldr	r2, [pc, #92]	; (8005574 <TIM_OC6_SetConfig+0xb8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_OC6_SetConfig+0x70>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a16      	ldr	r2, [pc, #88]	; (8005578 <TIM_OC6_SetConfig+0xbc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_OC6_SetConfig+0x70>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a15      	ldr	r2, [pc, #84]	; (800557c <TIM_OC6_SetConfig+0xc0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d109      	bne.n	8005540 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	4a14      	ldr	r2, [pc, #80]	; (8005580 <TIM_OC6_SetConfig+0xc4>)
 8005530:	4013      	ands	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	029b      	lsls	r3, r3, #10
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b006      	add	sp, #24
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	ffefffff 	.word	0xffefffff
 8005568:	feff8fff 	.word	0xfeff8fff
 800556c:	ffdfffff 	.word	0xffdfffff
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	fffbffff 	.word	0xfffbffff

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	2201      	movs	r2, #1
 800559c:	4393      	bics	r3, r2
 800559e:	001a      	movs	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	22f0      	movs	r2, #240	; 0xf0
 80055ae:	4393      	bics	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	220a      	movs	r2, #10
 80055c0:	4393      	bics	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	621a      	str	r2, [r3, #32]
}
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b006      	add	sp, #24
 80055de:	bd80      	pop	{r7, pc}

080055e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	2210      	movs	r2, #16
 80055f8:	4393      	bics	r3, r2
 80055fa:	001a      	movs	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4a0d      	ldr	r2, [pc, #52]	; (8005640 <TIM_TI2_ConfigInputStage+0x60>)
 800560a:	4013      	ands	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	031b      	lsls	r3, r3, #12
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	22a0      	movs	r2, #160	; 0xa0
 800561c:	4393      	bics	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	46bd      	mov	sp, r7
 800563a:	b006      	add	sp, #24
 800563c:	bd80      	pop	{r7, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	ffff0fff 	.word	0xffff0fff

08005644 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a08      	ldr	r2, [pc, #32]	; (8005678 <TIM_ITRx_SetConfig+0x34>)
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	2207      	movs	r2, #7
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	609a      	str	r2, [r3, #8]
}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	46bd      	mov	sp, r7
 8005672:	b004      	add	sp, #16
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	ffcfff8f 	.word	0xffcfff8f

0800567c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <TIM_ETR_SetConfig+0x3c>)
 8005694:	4013      	ands	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	021a      	lsls	r2, r3, #8
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	431a      	orrs	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	46c0      	nop			; (mov r8, r8)
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b006      	add	sp, #24
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	ffff00ff 	.word	0xffff00ff

080056bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	221f      	movs	r2, #31
 80056cc:	4013      	ands	r3, r2
 80056ce:	2201      	movs	r2, #1
 80056d0:	409a      	lsls	r2, r3
 80056d2:	0013      	movs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	43d2      	mvns	r2, r2
 80056de:	401a      	ands	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a1a      	ldr	r2, [r3, #32]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	211f      	movs	r1, #31
 80056ec:	400b      	ands	r3, r1
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4099      	lsls	r1, r3
 80056f2:	000b      	movs	r3, r1
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	621a      	str	r2, [r3, #32]
}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b006      	add	sp, #24
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	223c      	movs	r2, #60	; 0x3c
 8005712:	5c9b      	ldrb	r3, [r3, r2]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005718:	2302      	movs	r3, #2
 800571a:	e055      	b.n	80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	223c      	movs	r2, #60	; 0x3c
 8005720:	2101      	movs	r1, #1
 8005722:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	223d      	movs	r2, #61	; 0x3d
 8005728:	2102      	movs	r1, #2
 800572a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a23      	ldr	r2, [pc, #140]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d108      	bne.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a22      	ldr	r2, [pc, #136]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800574a:	4013      	ands	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2270      	movs	r2, #112	; 0x70
 800575c:	4393      	bics	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a16      	ldr	r2, [pc, #88]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00f      	beq.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	2380      	movs	r3, #128	; 0x80
 8005782:	05db      	lsls	r3, r3, #23
 8005784:	429a      	cmp	r2, r3
 8005786:	d009      	beq.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a11      	ldr	r2, [pc, #68]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d10c      	bne.n	80057b6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	4393      	bics	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	223d      	movs	r2, #61	; 0x3d
 80057ba:	2101      	movs	r1, #1
 80057bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	223c      	movs	r2, #60	; 0x3c
 80057c2:	2100      	movs	r1, #0
 80057c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	0018      	movs	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b004      	add	sp, #16
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40012c00 	.word	0x40012c00
 80057d4:	ff0fffff 	.word	0xff0fffff
 80057d8:	40000400 	.word	0x40000400
 80057dc:	40014000 	.word	0x40014000

080057e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057e8:	46c0      	nop			; (mov r8, r8)
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b002      	add	sp, #8
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f8:	46c0      	nop			; (mov r8, r8)
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b002      	add	sp, #8
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b002      	add	sp, #8
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e046      	b.n	80058b0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2288      	movs	r2, #136	; 0x88
 8005826:	589b      	ldr	r3, [r3, r2]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2284      	movs	r2, #132	; 0x84
 8005830:	2100      	movs	r1, #0
 8005832:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	0018      	movs	r0, r3
 8005838:	f7fb ff4e 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2288      	movs	r2, #136	; 0x88
 8005840:	2124      	movs	r1, #36	; 0x24
 8005842:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2101      	movs	r1, #1
 8005850:	438a      	bics	r2, r1
 8005852:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	0018      	movs	r0, r3
 8005860:	f000 ff2e 	bl	80066c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	0018      	movs	r0, r3
 8005868:	f000 fc6c 	bl	8006144 <UART_SetConfig>
 800586c:	0003      	movs	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e01c      	b.n	80058b0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	490d      	ldr	r1, [pc, #52]	; (80058b8 <HAL_UART_Init+0xa8>)
 8005882:	400a      	ands	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	212a      	movs	r1, #42	; 0x2a
 8005892:	438a      	bics	r2, r1
 8005894:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2101      	movs	r1, #1
 80058a2:	430a      	orrs	r2, r1
 80058a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 ffbd 	bl	8006828 <UART_CheckIdleState>
 80058ae:	0003      	movs	r3, r0
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b002      	add	sp, #8
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	ffffb7ff 	.word	0xffffb7ff

080058bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	; 0x28
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	1dbb      	adds	r3, r7, #6
 80058ca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2288      	movs	r2, #136	; 0x88
 80058d0:	589b      	ldr	r3, [r3, r2]
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d000      	beq.n	80058d8 <HAL_UART_Transmit+0x1c>
 80058d6:	e090      	b.n	80059fa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_UART_Transmit+0x2a>
 80058de:	1dbb      	adds	r3, r7, #6
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e088      	b.n	80059fc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	2380      	movs	r3, #128	; 0x80
 80058f0:	015b      	lsls	r3, r3, #5
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d109      	bne.n	800590a <HAL_UART_Transmit+0x4e>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d105      	bne.n	800590a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2201      	movs	r2, #1
 8005902:	4013      	ands	r3, r2
 8005904:	d001      	beq.n	800590a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e078      	b.n	80059fc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2290      	movs	r2, #144	; 0x90
 800590e:	2100      	movs	r1, #0
 8005910:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2288      	movs	r2, #136	; 0x88
 8005916:	2121      	movs	r1, #33	; 0x21
 8005918:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800591a:	f7fc f87b 	bl	8001a14 <HAL_GetTick>
 800591e:	0003      	movs	r3, r0
 8005920:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1dba      	adds	r2, r7, #6
 8005926:	2154      	movs	r1, #84	; 0x54
 8005928:	8812      	ldrh	r2, [r2, #0]
 800592a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	1dba      	adds	r2, r7, #6
 8005930:	2156      	movs	r1, #86	; 0x56
 8005932:	8812      	ldrh	r2, [r2, #0]
 8005934:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	015b      	lsls	r3, r3, #5
 800593e:	429a      	cmp	r2, r3
 8005940:	d108      	bne.n	8005954 <HAL_UART_Transmit+0x98>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	e003      	b.n	800595c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800595c:	e030      	b.n	80059c0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	0013      	movs	r3, r2
 8005968:	2200      	movs	r2, #0
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	f001 f806 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 8005970:	1e03      	subs	r3, r0, #0
 8005972:	d005      	beq.n	8005980 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2288      	movs	r2, #136	; 0x88
 8005978:	2120      	movs	r1, #32
 800597a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e03d      	b.n	80059fc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	001a      	movs	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	05d2      	lsls	r2, r2, #23
 8005992:	0dd2      	lsrs	r2, r2, #23
 8005994:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	3302      	adds	r3, #2
 800599a:	61bb      	str	r3, [r7, #24]
 800599c:	e007      	b.n	80059ae <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	3301      	adds	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2256      	movs	r2, #86	; 0x56
 80059b2:	5a9b      	ldrh	r3, [r3, r2]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b299      	uxth	r1, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2256      	movs	r2, #86	; 0x56
 80059be:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2256      	movs	r2, #86	; 0x56
 80059c4:	5a9b      	ldrh	r3, [r3, r2]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1c8      	bne.n	800595e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	0013      	movs	r3, r2
 80059d6:	2200      	movs	r2, #0
 80059d8:	2140      	movs	r1, #64	; 0x40
 80059da:	f000 ffcf 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 80059de:	1e03      	subs	r3, r0, #0
 80059e0:	d005      	beq.n	80059ee <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2288      	movs	r2, #136	; 0x88
 80059e6:	2120      	movs	r1, #32
 80059e8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e006      	b.n	80059fc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2288      	movs	r2, #136	; 0x88
 80059f2:	2120      	movs	r1, #32
 80059f4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	0018      	movs	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b008      	add	sp, #32
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	1dbb      	adds	r3, r7, #6
 8005a10:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	228c      	movs	r2, #140	; 0x8c
 8005a16:	589b      	ldr	r3, [r3, r2]
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d14a      	bne.n	8005ab2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_UART_Receive_IT+0x26>
 8005a22:	1dbb      	adds	r3, r7, #6
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e042      	b.n	8005ab4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	015b      	lsls	r3, r3, #5
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d109      	bne.n	8005a4e <HAL_UART_Receive_IT+0x4a>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d105      	bne.n	8005a4e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2201      	movs	r2, #1
 8005a46:	4013      	ands	r3, r2
 8005a48:	d001      	beq.n	8005a4e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e032      	b.n	8005ab4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a18      	ldr	r2, [pc, #96]	; (8005abc <HAL_UART_Receive_IT+0xb8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d020      	beq.n	8005aa0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	2380      	movs	r3, #128	; 0x80
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d019      	beq.n	8005aa0 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a70:	613b      	str	r3, [r7, #16]
  return(result);
 8005a72:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	2301      	movs	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f383 8810 	msr	PRIMASK, r3
}
 8005a80:	46c0      	nop			; (mov r8, r8)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2180      	movs	r1, #128	; 0x80
 8005a8e:	04c9      	lsls	r1, r1, #19
 8005a90:	430a      	orrs	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f383 8810 	msr	PRIMASK, r3
}
 8005a9e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005aa0:	1dbb      	adds	r3, r7, #6
 8005aa2:	881a      	ldrh	r2, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f000 ffd7 	bl	8006a5c <UART_Start_Receive_IT>
 8005aae:	0003      	movs	r3, r0
 8005ab0:	e000      	b.n	8005ab4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
  }
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b008      	add	sp, #32
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40008000 	.word	0x40008000

08005ac0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ac0:	b5b0      	push	{r4, r5, r7, lr}
 8005ac2:	b0aa      	sub	sp, #168	; 0xa8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	22a4      	movs	r2, #164	; 0xa4
 8005ad0:	18b9      	adds	r1, r7, r2
 8005ad2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	20a0      	movs	r0, #160	; 0xa0
 8005adc:	1839      	adds	r1, r7, r0
 8005ade:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	249c      	movs	r4, #156	; 0x9c
 8005ae8:	1939      	adds	r1, r7, r4
 8005aea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aec:	0011      	movs	r1, r2
 8005aee:	18bb      	adds	r3, r7, r2
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4aa2      	ldr	r2, [pc, #648]	; (8005d7c <HAL_UART_IRQHandler+0x2bc>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	2298      	movs	r2, #152	; 0x98
 8005af8:	18bd      	adds	r5, r7, r2
 8005afa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005afc:	18bb      	adds	r3, r7, r2
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d11a      	bne.n	8005b3a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b04:	187b      	adds	r3, r7, r1
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d015      	beq.n	8005b3a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b0e:	183b      	adds	r3, r7, r0
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2220      	movs	r2, #32
 8005b14:	4013      	ands	r3, r2
 8005b16:	d105      	bne.n	8005b24 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	055b      	lsls	r3, r3, #21
 8005b20:	4013      	ands	r3, r2
 8005b22:	d00a      	beq.n	8005b3a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d100      	bne.n	8005b2e <HAL_UART_IRQHandler+0x6e>
 8005b2c:	e2dc      	b.n	80060e8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	0010      	movs	r0, r2
 8005b36:	4798      	blx	r3
      }
      return;
 8005b38:	e2d6      	b.n	80060e8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b3a:	2398      	movs	r3, #152	; 0x98
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d100      	bne.n	8005b46 <HAL_UART_IRQHandler+0x86>
 8005b44:	e122      	b.n	8005d8c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b46:	239c      	movs	r3, #156	; 0x9c
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a8c      	ldr	r2, [pc, #560]	; (8005d80 <HAL_UART_IRQHandler+0x2c0>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d106      	bne.n	8005b60 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b52:	23a0      	movs	r3, #160	; 0xa0
 8005b54:	18fb      	adds	r3, r7, r3
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a8a      	ldr	r2, [pc, #552]	; (8005d84 <HAL_UART_IRQHandler+0x2c4>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d100      	bne.n	8005b60 <HAL_UART_IRQHandler+0xa0>
 8005b5e:	e115      	b.n	8005d8c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b60:	23a4      	movs	r3, #164	; 0xa4
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2201      	movs	r2, #1
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d012      	beq.n	8005b92 <HAL_UART_IRQHandler+0xd2>
 8005b6c:	23a0      	movs	r3, #160	; 0xa0
 8005b6e:	18fb      	adds	r3, r7, r3
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	4013      	ands	r3, r2
 8005b78:	d00b      	beq.n	8005b92 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2290      	movs	r2, #144	; 0x90
 8005b86:	589b      	ldr	r3, [r3, r2]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2190      	movs	r1, #144	; 0x90
 8005b90:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b92:	23a4      	movs	r3, #164	; 0xa4
 8005b94:	18fb      	adds	r3, r7, r3
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	d011      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x102>
 8005b9e:	239c      	movs	r3, #156	; 0x9c
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d00b      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2290      	movs	r2, #144	; 0x90
 8005bb6:	589b      	ldr	r3, [r3, r2]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2190      	movs	r1, #144	; 0x90
 8005bc0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bc2:	23a4      	movs	r3, #164	; 0xa4
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d011      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x132>
 8005bce:	239c      	movs	r3, #156	; 0x9c
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d00b      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2204      	movs	r2, #4
 8005be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2290      	movs	r2, #144	; 0x90
 8005be6:	589b      	ldr	r3, [r3, r2]
 8005be8:	2202      	movs	r2, #2
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2190      	movs	r1, #144	; 0x90
 8005bf0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bf2:	23a4      	movs	r3, #164	; 0xa4
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d017      	beq.n	8005c2e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bfe:	23a0      	movs	r3, #160	; 0xa0
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2220      	movs	r2, #32
 8005c06:	4013      	ands	r3, r2
 8005c08:	d105      	bne.n	8005c16 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c0a:	239c      	movs	r3, #156	; 0x9c
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a5b      	ldr	r2, [pc, #364]	; (8005d80 <HAL_UART_IRQHandler+0x2c0>)
 8005c12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c14:	d00b      	beq.n	8005c2e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2290      	movs	r2, #144	; 0x90
 8005c22:	589b      	ldr	r3, [r3, r2]
 8005c24:	2208      	movs	r2, #8
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2190      	movs	r1, #144	; 0x90
 8005c2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c2e:	23a4      	movs	r3, #164	; 0xa4
 8005c30:	18fb      	adds	r3, r7, r3
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	4013      	ands	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <HAL_UART_IRQHandler+0x1a4>
 8005c3c:	23a0      	movs	r3, #160	; 0xa0
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	04db      	lsls	r3, r3, #19
 8005c46:	4013      	ands	r3, r2
 8005c48:	d00c      	beq.n	8005c64 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2280      	movs	r2, #128	; 0x80
 8005c50:	0112      	lsls	r2, r2, #4
 8005c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2290      	movs	r2, #144	; 0x90
 8005c58:	589b      	ldr	r3, [r3, r2]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2190      	movs	r1, #144	; 0x90
 8005c62:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2290      	movs	r2, #144	; 0x90
 8005c68:	589b      	ldr	r3, [r3, r2]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d100      	bne.n	8005c70 <HAL_UART_IRQHandler+0x1b0>
 8005c6e:	e23d      	b.n	80060ec <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c70:	23a4      	movs	r3, #164	; 0xa4
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2220      	movs	r2, #32
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d015      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c7c:	23a0      	movs	r3, #160	; 0xa0
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2220      	movs	r2, #32
 8005c84:	4013      	ands	r3, r2
 8005c86:	d106      	bne.n	8005c96 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c88:	239c      	movs	r3, #156	; 0x9c
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	055b      	lsls	r3, r3, #21
 8005c92:	4013      	ands	r3, r2
 8005c94:	d008      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d004      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	0010      	movs	r0, r2
 8005ca6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2290      	movs	r2, #144	; 0x90
 8005cac:	589b      	ldr	r3, [r3, r2]
 8005cae:	2194      	movs	r1, #148	; 0x94
 8005cb0:	187a      	adds	r2, r7, r1
 8005cb2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2240      	movs	r2, #64	; 0x40
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	d004      	beq.n	8005ccc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cc2:	187b      	adds	r3, r7, r1
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2228      	movs	r2, #40	; 0x28
 8005cc8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cca:	d04c      	beq.n	8005d66 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 ffe8 	bl	8006ca4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2240      	movs	r2, #64	; 0x40
 8005cdc:	4013      	ands	r3, r2
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d13c      	bne.n	8005d5c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cea:	2090      	movs	r0, #144	; 0x90
 8005cec:	183a      	adds	r2, r7, r0
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf6:	f383 8810 	msr	PRIMASK, r3
}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2140      	movs	r1, #64	; 0x40
 8005d08:	438a      	bics	r2, r1
 8005d0a:	609a      	str	r2, [r3, #8]
 8005d0c:	183b      	adds	r3, r7, r0
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d14:	f383 8810 	msr	PRIMASK, r3
}
 8005d18:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2280      	movs	r2, #128	; 0x80
 8005d1e:	589b      	ldr	r3, [r3, r2]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d016      	beq.n	8005d52 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	589b      	ldr	r3, [r3, r2]
 8005d2a:	4a17      	ldr	r2, [pc, #92]	; (8005d88 <HAL_UART_IRQHandler+0x2c8>)
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2280      	movs	r2, #128	; 0x80
 8005d32:	589b      	ldr	r3, [r3, r2]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f7fc fe45 	bl	80029c4 <HAL_DMA_Abort_IT>
 8005d3a:	1e03      	subs	r3, r0, #0
 8005d3c:	d01c      	beq.n	8005d78 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2280      	movs	r2, #128	; 0x80
 8005d42:	589b      	ldr	r3, [r3, r2]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	2180      	movs	r1, #128	; 0x80
 8005d4a:	5852      	ldr	r2, [r2, r1]
 8005d4c:	0010      	movs	r0, r2
 8005d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	e012      	b.n	8005d78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f000 f9e1 	bl	800611c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5a:	e00d      	b.n	8005d78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 f9dc 	bl	800611c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d64:	e008      	b.n	8005d78 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f000 f9d7 	bl	800611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2290      	movs	r2, #144	; 0x90
 8005d72:	2100      	movs	r1, #0
 8005d74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005d76:	e1b9      	b.n	80060ec <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d78:	46c0      	nop			; (mov r8, r8)
    return;
 8005d7a:	e1b7      	b.n	80060ec <HAL_UART_IRQHandler+0x62c>
 8005d7c:	0000080f 	.word	0x0000080f
 8005d80:	10000001 	.word	0x10000001
 8005d84:	04000120 	.word	0x04000120
 8005d88:	08006d71 	.word	0x08006d71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d000      	beq.n	8005d96 <HAL_UART_IRQHandler+0x2d6>
 8005d94:	e13e      	b.n	8006014 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d96:	23a4      	movs	r3, #164	; 0xa4
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2210      	movs	r2, #16
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d100      	bne.n	8005da4 <HAL_UART_IRQHandler+0x2e4>
 8005da2:	e137      	b.n	8006014 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005da4:	23a0      	movs	r3, #160	; 0xa0
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2210      	movs	r2, #16
 8005dac:	4013      	ands	r3, r2
 8005dae:	d100      	bne.n	8005db2 <HAL_UART_IRQHandler+0x2f2>
 8005db0:	e130      	b.n	8006014 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2210      	movs	r2, #16
 8005db8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2240      	movs	r2, #64	; 0x40
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b40      	cmp	r3, #64	; 0x40
 8005dc6:	d000      	beq.n	8005dca <HAL_UART_IRQHandler+0x30a>
 8005dc8:	e0a4      	b.n	8005f14 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2280      	movs	r2, #128	; 0x80
 8005dce:	589b      	ldr	r3, [r3, r2]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	217e      	movs	r1, #126	; 0x7e
 8005dd6:	187b      	adds	r3, r7, r1
 8005dd8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005dda:	187b      	adds	r3, r7, r1
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d100      	bne.n	8005de4 <HAL_UART_IRQHandler+0x324>
 8005de2:	e185      	b.n	80060f0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	225c      	movs	r2, #92	; 0x5c
 8005de8:	5a9b      	ldrh	r3, [r3, r2]
 8005dea:	187a      	adds	r2, r7, r1
 8005dec:	8812      	ldrh	r2, [r2, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d300      	bcc.n	8005df4 <HAL_UART_IRQHandler+0x334>
 8005df2:	e17d      	b.n	80060f0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	187a      	adds	r2, r7, r1
 8005df8:	215e      	movs	r1, #94	; 0x5e
 8005dfa:	8812      	ldrh	r2, [r2, #0]
 8005dfc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2280      	movs	r2, #128	; 0x80
 8005e02:	589b      	ldr	r3, [r3, r2]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d170      	bne.n	8005ef0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e16:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e18:	2301      	movs	r3, #1
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1e:	f383 8810 	msr	PRIMASK, r3
}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	49b4      	ldr	r1, [pc, #720]	; (8006100 <HAL_UART_IRQHandler+0x640>)
 8005e30:	400a      	ands	r2, r1
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3a:	f383 8810 	msr	PRIMASK, r3
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e40:	f3ef 8310 	mrs	r3, PRIMASK
 8005e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e48:	677b      	str	r3, [r7, #116]	; 0x74
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e50:	f383 8810 	msr	PRIMASK, r3
}
 8005e54:	46c0      	nop			; (mov r8, r8)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2101      	movs	r1, #1
 8005e62:	438a      	bics	r2, r1
 8005e64:	609a      	str	r2, [r3, #8]
 8005e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e68:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6c:	f383 8810 	msr	PRIMASK, r3
}
 8005e70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e72:	f3ef 8310 	mrs	r3, PRIMASK
 8005e76:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e82:	f383 8810 	msr	PRIMASK, r3
}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2140      	movs	r1, #64	; 0x40
 8005e94:	438a      	bics	r2, r1
 8005e96:	609a      	str	r2, [r3, #8]
 8005e98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e9a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e9e:	f383 8810 	msr	PRIMASK, r3
}
 8005ea2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	228c      	movs	r2, #140	; 0x8c
 8005ea8:	2120      	movs	r1, #32
 8005eaa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ec2:	f383 8810 	msr	PRIMASK, r3
}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2110      	movs	r1, #16
 8005ed4:	438a      	bics	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ede:	f383 8810 	msr	PRIMASK, r3
}
 8005ee2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2280      	movs	r2, #128	; 0x80
 8005ee8:	589b      	ldr	r3, [r3, r2]
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7fc fd08 	bl	8002900 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	225c      	movs	r2, #92	; 0x5c
 8005efa:	5a9a      	ldrh	r2, [r3, r2]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	215e      	movs	r1, #94	; 0x5e
 8005f00:	5a5b      	ldrh	r3, [r3, r1]
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0011      	movs	r1, r2
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 f90d 	bl	800612c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f12:	e0ed      	b.n	80060f0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	225c      	movs	r2, #92	; 0x5c
 8005f18:	5a99      	ldrh	r1, [r3, r2]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	225e      	movs	r2, #94	; 0x5e
 8005f1e:	5a9b      	ldrh	r3, [r3, r2]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	208e      	movs	r0, #142	; 0x8e
 8005f24:	183b      	adds	r3, r7, r0
 8005f26:	1a8a      	subs	r2, r1, r2
 8005f28:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	225e      	movs	r2, #94	; 0x5e
 8005f2e:	5a9b      	ldrh	r3, [r3, r2]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d100      	bne.n	8005f38 <HAL_UART_IRQHandler+0x478>
 8005f36:	e0dd      	b.n	80060f4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005f38:	183b      	adds	r3, r7, r0
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d100      	bne.n	8005f42 <HAL_UART_IRQHandler+0x482>
 8005f40:	e0d8      	b.n	80060f4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f42:	f3ef 8310 	mrs	r3, PRIMASK
 8005f46:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f48:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f4a:	2488      	movs	r4, #136	; 0x88
 8005f4c:	193a      	adds	r2, r7, r4
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	2301      	movs	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f383 8810 	msr	PRIMASK, r3
}
 8005f5a:	46c0      	nop			; (mov r8, r8)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4967      	ldr	r1, [pc, #412]	; (8006104 <HAL_UART_IRQHandler+0x644>)
 8005f68:	400a      	ands	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	193b      	adds	r3, r7, r4
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f383 8810 	msr	PRIMASK, r3
}
 8005f78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f80:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f82:	2484      	movs	r4, #132	; 0x84
 8005f84:	193a      	adds	r2, r7, r4
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	2301      	movs	r3, #1
 8005f8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f383 8810 	msr	PRIMASK, r3
}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	495a      	ldr	r1, [pc, #360]	; (8006108 <HAL_UART_IRQHandler+0x648>)
 8005fa0:	400a      	ands	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	193b      	adds	r3, r7, r4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	f383 8810 	msr	PRIMASK, r3
}
 8005fb0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	228c      	movs	r2, #140	; 0x8c
 8005fb6:	2120      	movs	r1, #32
 8005fb8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fce:	2480      	movs	r4, #128	; 0x80
 8005fd0:	193a      	adds	r2, r7, r4
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	f383 8810 	msr	PRIMASK, r3
}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2110      	movs	r1, #16
 8005fec:	438a      	bics	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	193b      	adds	r3, r7, r4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	f383 8810 	msr	PRIMASK, r3
}
 8005ffc:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006004:	183b      	adds	r3, r7, r0
 8006006:	881a      	ldrh	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0011      	movs	r1, r2
 800600c:	0018      	movs	r0, r3
 800600e:	f000 f88d 	bl	800612c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006012:	e06f      	b.n	80060f4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006014:	23a4      	movs	r3, #164	; 0xa4
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	035b      	lsls	r3, r3, #13
 800601e:	4013      	ands	r3, r2
 8006020:	d010      	beq.n	8006044 <HAL_UART_IRQHandler+0x584>
 8006022:	239c      	movs	r3, #156	; 0x9c
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	03db      	lsls	r3, r3, #15
 800602c:	4013      	ands	r3, r2
 800602e:	d009      	beq.n	8006044 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2280      	movs	r2, #128	; 0x80
 8006036:	0352      	lsls	r2, r2, #13
 8006038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0018      	movs	r0, r3
 800603e:	f001 fbeb 	bl	8007818 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006042:	e05a      	b.n	80060fa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006044:	23a4      	movs	r3, #164	; 0xa4
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	4013      	ands	r3, r2
 800604e:	d016      	beq.n	800607e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006050:	23a0      	movs	r3, #160	; 0xa0
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2280      	movs	r2, #128	; 0x80
 8006058:	4013      	ands	r3, r2
 800605a:	d106      	bne.n	800606a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800605c:	239c      	movs	r3, #156	; 0x9c
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	2380      	movs	r3, #128	; 0x80
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	4013      	ands	r3, r2
 8006068:	d009      	beq.n	800607e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800606e:	2b00      	cmp	r3, #0
 8006070:	d042      	beq.n	80060f8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	0010      	movs	r0, r2
 800607a:	4798      	blx	r3
    }
    return;
 800607c:	e03c      	b.n	80060f8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800607e:	23a4      	movs	r3, #164	; 0xa4
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2240      	movs	r2, #64	; 0x40
 8006086:	4013      	ands	r3, r2
 8006088:	d00a      	beq.n	80060a0 <HAL_UART_IRQHandler+0x5e0>
 800608a:	23a0      	movs	r3, #160	; 0xa0
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2240      	movs	r2, #64	; 0x40
 8006092:	4013      	ands	r3, r2
 8006094:	d004      	beq.n	80060a0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	0018      	movs	r0, r3
 800609a:	f000 fe80 	bl	8006d9e <UART_EndTransmit_IT>
    return;
 800609e:	e02c      	b.n	80060fa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060a0:	23a4      	movs	r3, #164	; 0xa4
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	4013      	ands	r3, r2
 80060ac:	d00b      	beq.n	80060c6 <HAL_UART_IRQHandler+0x606>
 80060ae:	23a0      	movs	r3, #160	; 0xa0
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	05db      	lsls	r3, r3, #23
 80060b8:	4013      	ands	r3, r2
 80060ba:	d004      	beq.n	80060c6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	0018      	movs	r0, r3
 80060c0:	f001 fbba 	bl	8007838 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c4:	e019      	b.n	80060fa <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060c6:	23a4      	movs	r3, #164	; 0xa4
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	045b      	lsls	r3, r3, #17
 80060d0:	4013      	ands	r3, r2
 80060d2:	d012      	beq.n	80060fa <HAL_UART_IRQHandler+0x63a>
 80060d4:	23a0      	movs	r3, #160	; 0xa0
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	da0d      	bge.n	80060fa <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	0018      	movs	r0, r3
 80060e2:	f001 fba1 	bl	8007828 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060e6:	e008      	b.n	80060fa <HAL_UART_IRQHandler+0x63a>
      return;
 80060e8:	46c0      	nop			; (mov r8, r8)
 80060ea:	e006      	b.n	80060fa <HAL_UART_IRQHandler+0x63a>
    return;
 80060ec:	46c0      	nop			; (mov r8, r8)
 80060ee:	e004      	b.n	80060fa <HAL_UART_IRQHandler+0x63a>
      return;
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	e002      	b.n	80060fa <HAL_UART_IRQHandler+0x63a>
      return;
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	e000      	b.n	80060fa <HAL_UART_IRQHandler+0x63a>
    return;
 80060f8:	46c0      	nop			; (mov r8, r8)
  }
}
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b02a      	add	sp, #168	; 0xa8
 80060fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006100:	fffffeff 	.word	0xfffffeff
 8006104:	fffffedf 	.word	0xfffffedf
 8006108:	effffffe 	.word	0xeffffffe

0800610c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006114:	46c0      	nop			; (mov r8, r8)
 8006116:	46bd      	mov	sp, r7
 8006118:	b002      	add	sp, #8
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006124:	46c0      	nop			; (mov r8, r8)
 8006126:	46bd      	mov	sp, r7
 8006128:	b002      	add	sp, #8
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	000a      	movs	r2, r1
 8006136:	1cbb      	adds	r3, r7, #2
 8006138:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b002      	add	sp, #8
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006144:	b5b0      	push	{r4, r5, r7, lr}
 8006146:	b090      	sub	sp, #64	; 0x40
 8006148:	af00      	add	r7, sp, #0
 800614a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800614c:	231a      	movs	r3, #26
 800614e:	2220      	movs	r2, #32
 8006150:	189b      	adds	r3, r3, r2
 8006152:	19db      	adds	r3, r3, r7
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	431a      	orrs	r2, r3
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	431a      	orrs	r2, r3
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	4313      	orrs	r3, r2
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4aaf      	ldr	r2, [pc, #700]	; (8006434 <UART_SetConfig+0x2f0>)
 8006178:	4013      	ands	r3, r2
 800617a:	0019      	movs	r1, r3
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006182:	430b      	orrs	r3, r1
 8006184:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4aaa      	ldr	r2, [pc, #680]	; (8006438 <UART_SetConfig+0x2f4>)
 800618e:	4013      	ands	r3, r2
 8006190:	0018      	movs	r0, r3
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	68d9      	ldr	r1, [r3, #12]
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	0003      	movs	r3, r0
 800619c:	430b      	orrs	r3, r1
 800619e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4aa4      	ldr	r2, [pc, #656]	; (800643c <UART_SetConfig+0x2f8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d004      	beq.n	80061ba <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061b6:	4313      	orrs	r3, r2
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4a9f      	ldr	r2, [pc, #636]	; (8006440 <UART_SetConfig+0x2fc>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	0019      	movs	r1, r3
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061cc:	430b      	orrs	r3, r1
 80061ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	220f      	movs	r2, #15
 80061d8:	4393      	bics	r3, r2
 80061da:	0018      	movs	r0, r3
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	0003      	movs	r3, r0
 80061e6:	430b      	orrs	r3, r1
 80061e8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a95      	ldr	r2, [pc, #596]	; (8006444 <UART_SetConfig+0x300>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d131      	bne.n	8006258 <UART_SetConfig+0x114>
 80061f4:	4b94      	ldr	r3, [pc, #592]	; (8006448 <UART_SetConfig+0x304>)
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	2203      	movs	r2, #3
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d01d      	beq.n	800623c <UART_SetConfig+0xf8>
 8006200:	d823      	bhi.n	800624a <UART_SetConfig+0x106>
 8006202:	2b02      	cmp	r3, #2
 8006204:	d00c      	beq.n	8006220 <UART_SetConfig+0xdc>
 8006206:	d820      	bhi.n	800624a <UART_SetConfig+0x106>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <UART_SetConfig+0xce>
 800620c:	2b01      	cmp	r3, #1
 800620e:	d00e      	beq.n	800622e <UART_SetConfig+0xea>
 8006210:	e01b      	b.n	800624a <UART_SetConfig+0x106>
 8006212:	231b      	movs	r3, #27
 8006214:	2220      	movs	r2, #32
 8006216:	189b      	adds	r3, r3, r2
 8006218:	19db      	adds	r3, r3, r7
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e0b4      	b.n	800638a <UART_SetConfig+0x246>
 8006220:	231b      	movs	r3, #27
 8006222:	2220      	movs	r2, #32
 8006224:	189b      	adds	r3, r3, r2
 8006226:	19db      	adds	r3, r3, r7
 8006228:	2202      	movs	r2, #2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e0ad      	b.n	800638a <UART_SetConfig+0x246>
 800622e:	231b      	movs	r3, #27
 8006230:	2220      	movs	r2, #32
 8006232:	189b      	adds	r3, r3, r2
 8006234:	19db      	adds	r3, r3, r7
 8006236:	2204      	movs	r2, #4
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e0a6      	b.n	800638a <UART_SetConfig+0x246>
 800623c:	231b      	movs	r3, #27
 800623e:	2220      	movs	r2, #32
 8006240:	189b      	adds	r3, r3, r2
 8006242:	19db      	adds	r3, r3, r7
 8006244:	2208      	movs	r2, #8
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	e09f      	b.n	800638a <UART_SetConfig+0x246>
 800624a:	231b      	movs	r3, #27
 800624c:	2220      	movs	r2, #32
 800624e:	189b      	adds	r3, r3, r2
 8006250:	19db      	adds	r3, r3, r7
 8006252:	2210      	movs	r2, #16
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e098      	b.n	800638a <UART_SetConfig+0x246>
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a7b      	ldr	r2, [pc, #492]	; (800644c <UART_SetConfig+0x308>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d131      	bne.n	80062c6 <UART_SetConfig+0x182>
 8006262:	4b79      	ldr	r3, [pc, #484]	; (8006448 <UART_SetConfig+0x304>)
 8006264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006266:	220c      	movs	r2, #12
 8006268:	4013      	ands	r3, r2
 800626a:	2b0c      	cmp	r3, #12
 800626c:	d01d      	beq.n	80062aa <UART_SetConfig+0x166>
 800626e:	d823      	bhi.n	80062b8 <UART_SetConfig+0x174>
 8006270:	2b08      	cmp	r3, #8
 8006272:	d00c      	beq.n	800628e <UART_SetConfig+0x14a>
 8006274:	d820      	bhi.n	80062b8 <UART_SetConfig+0x174>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <UART_SetConfig+0x13c>
 800627a:	2b04      	cmp	r3, #4
 800627c:	d00e      	beq.n	800629c <UART_SetConfig+0x158>
 800627e:	e01b      	b.n	80062b8 <UART_SetConfig+0x174>
 8006280:	231b      	movs	r3, #27
 8006282:	2220      	movs	r2, #32
 8006284:	189b      	adds	r3, r3, r2
 8006286:	19db      	adds	r3, r3, r7
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	e07d      	b.n	800638a <UART_SetConfig+0x246>
 800628e:	231b      	movs	r3, #27
 8006290:	2220      	movs	r2, #32
 8006292:	189b      	adds	r3, r3, r2
 8006294:	19db      	adds	r3, r3, r7
 8006296:	2202      	movs	r2, #2
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e076      	b.n	800638a <UART_SetConfig+0x246>
 800629c:	231b      	movs	r3, #27
 800629e:	2220      	movs	r2, #32
 80062a0:	189b      	adds	r3, r3, r2
 80062a2:	19db      	adds	r3, r3, r7
 80062a4:	2204      	movs	r2, #4
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	e06f      	b.n	800638a <UART_SetConfig+0x246>
 80062aa:	231b      	movs	r3, #27
 80062ac:	2220      	movs	r2, #32
 80062ae:	189b      	adds	r3, r3, r2
 80062b0:	19db      	adds	r3, r3, r7
 80062b2:	2208      	movs	r2, #8
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e068      	b.n	800638a <UART_SetConfig+0x246>
 80062b8:	231b      	movs	r3, #27
 80062ba:	2220      	movs	r2, #32
 80062bc:	189b      	adds	r3, r3, r2
 80062be:	19db      	adds	r3, r3, r7
 80062c0:	2210      	movs	r2, #16
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	e061      	b.n	800638a <UART_SetConfig+0x246>
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a61      	ldr	r2, [pc, #388]	; (8006450 <UART_SetConfig+0x30c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d106      	bne.n	80062de <UART_SetConfig+0x19a>
 80062d0:	231b      	movs	r3, #27
 80062d2:	2220      	movs	r2, #32
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	19db      	adds	r3, r3, r7
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e055      	b.n	800638a <UART_SetConfig+0x246>
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a5c      	ldr	r2, [pc, #368]	; (8006454 <UART_SetConfig+0x310>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d106      	bne.n	80062f6 <UART_SetConfig+0x1b2>
 80062e8:	231b      	movs	r3, #27
 80062ea:	2220      	movs	r2, #32
 80062ec:	189b      	adds	r3, r3, r2
 80062ee:	19db      	adds	r3, r3, r7
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e049      	b.n	800638a <UART_SetConfig+0x246>
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a50      	ldr	r2, [pc, #320]	; (800643c <UART_SetConfig+0x2f8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d13e      	bne.n	800637e <UART_SetConfig+0x23a>
 8006300:	4b51      	ldr	r3, [pc, #324]	; (8006448 <UART_SetConfig+0x304>)
 8006302:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006304:	23c0      	movs	r3, #192	; 0xc0
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	4013      	ands	r3, r2
 800630a:	22c0      	movs	r2, #192	; 0xc0
 800630c:	0112      	lsls	r2, r2, #4
 800630e:	4293      	cmp	r3, r2
 8006310:	d027      	beq.n	8006362 <UART_SetConfig+0x21e>
 8006312:	22c0      	movs	r2, #192	; 0xc0
 8006314:	0112      	lsls	r2, r2, #4
 8006316:	4293      	cmp	r3, r2
 8006318:	d82a      	bhi.n	8006370 <UART_SetConfig+0x22c>
 800631a:	2280      	movs	r2, #128	; 0x80
 800631c:	0112      	lsls	r2, r2, #4
 800631e:	4293      	cmp	r3, r2
 8006320:	d011      	beq.n	8006346 <UART_SetConfig+0x202>
 8006322:	2280      	movs	r2, #128	; 0x80
 8006324:	0112      	lsls	r2, r2, #4
 8006326:	4293      	cmp	r3, r2
 8006328:	d822      	bhi.n	8006370 <UART_SetConfig+0x22c>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <UART_SetConfig+0x1f4>
 800632e:	2280      	movs	r2, #128	; 0x80
 8006330:	00d2      	lsls	r2, r2, #3
 8006332:	4293      	cmp	r3, r2
 8006334:	d00e      	beq.n	8006354 <UART_SetConfig+0x210>
 8006336:	e01b      	b.n	8006370 <UART_SetConfig+0x22c>
 8006338:	231b      	movs	r3, #27
 800633a:	2220      	movs	r2, #32
 800633c:	189b      	adds	r3, r3, r2
 800633e:	19db      	adds	r3, r3, r7
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e021      	b.n	800638a <UART_SetConfig+0x246>
 8006346:	231b      	movs	r3, #27
 8006348:	2220      	movs	r2, #32
 800634a:	189b      	adds	r3, r3, r2
 800634c:	19db      	adds	r3, r3, r7
 800634e:	2202      	movs	r2, #2
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	e01a      	b.n	800638a <UART_SetConfig+0x246>
 8006354:	231b      	movs	r3, #27
 8006356:	2220      	movs	r2, #32
 8006358:	189b      	adds	r3, r3, r2
 800635a:	19db      	adds	r3, r3, r7
 800635c:	2204      	movs	r2, #4
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e013      	b.n	800638a <UART_SetConfig+0x246>
 8006362:	231b      	movs	r3, #27
 8006364:	2220      	movs	r2, #32
 8006366:	189b      	adds	r3, r3, r2
 8006368:	19db      	adds	r3, r3, r7
 800636a:	2208      	movs	r2, #8
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e00c      	b.n	800638a <UART_SetConfig+0x246>
 8006370:	231b      	movs	r3, #27
 8006372:	2220      	movs	r2, #32
 8006374:	189b      	adds	r3, r3, r2
 8006376:	19db      	adds	r3, r3, r7
 8006378:	2210      	movs	r2, #16
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	e005      	b.n	800638a <UART_SetConfig+0x246>
 800637e:	231b      	movs	r3, #27
 8006380:	2220      	movs	r2, #32
 8006382:	189b      	adds	r3, r3, r2
 8006384:	19db      	adds	r3, r3, r7
 8006386:	2210      	movs	r2, #16
 8006388:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2b      	ldr	r2, [pc, #172]	; (800643c <UART_SetConfig+0x2f8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d000      	beq.n	8006396 <UART_SetConfig+0x252>
 8006394:	e0a9      	b.n	80064ea <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006396:	231b      	movs	r3, #27
 8006398:	2220      	movs	r2, #32
 800639a:	189b      	adds	r3, r3, r2
 800639c:	19db      	adds	r3, r3, r7
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d015      	beq.n	80063d0 <UART_SetConfig+0x28c>
 80063a4:	dc18      	bgt.n	80063d8 <UART_SetConfig+0x294>
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d00d      	beq.n	80063c6 <UART_SetConfig+0x282>
 80063aa:	dc15      	bgt.n	80063d8 <UART_SetConfig+0x294>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <UART_SetConfig+0x272>
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d005      	beq.n	80063c0 <UART_SetConfig+0x27c>
 80063b4:	e010      	b.n	80063d8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b6:	f7fd fec9 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 80063ba:	0003      	movs	r3, r0
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063be:	e014      	b.n	80063ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c0:	4b25      	ldr	r3, [pc, #148]	; (8006458 <UART_SetConfig+0x314>)
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063c4:	e011      	b.n	80063ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063c6:	f7fd fe35 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 80063ca:	0003      	movs	r3, r0
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ce:	e00c      	b.n	80063ea <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063d6:	e008      	b.n	80063ea <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80063dc:	231a      	movs	r3, #26
 80063de:	2220      	movs	r2, #32
 80063e0:	189b      	adds	r3, r3, r2
 80063e2:	19db      	adds	r3, r3, r7
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
        break;
 80063e8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d100      	bne.n	80063f2 <UART_SetConfig+0x2ae>
 80063f0:	e14b      	b.n	800668a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063f6:	4b19      	ldr	r3, [pc, #100]	; (800645c <UART_SetConfig+0x318>)
 80063f8:	0052      	lsls	r2, r2, #1
 80063fa:	5ad3      	ldrh	r3, [r2, r3]
 80063fc:	0019      	movs	r1, r3
 80063fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006400:	f7f9 fe92 	bl	8000128 <__udivsi3>
 8006404:	0003      	movs	r3, r0
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	0013      	movs	r3, r2
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	189b      	adds	r3, r3, r2
 8006412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006414:	429a      	cmp	r2, r3
 8006416:	d305      	bcc.n	8006424 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800641e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006420:	429a      	cmp	r2, r3
 8006422:	d91d      	bls.n	8006460 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006424:	231a      	movs	r3, #26
 8006426:	2220      	movs	r2, #32
 8006428:	189b      	adds	r3, r3, r2
 800642a:	19db      	adds	r3, r3, r7
 800642c:	2201      	movs	r2, #1
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	e12b      	b.n	800668a <UART_SetConfig+0x546>
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	cfff69f3 	.word	0xcfff69f3
 8006438:	ffffcfff 	.word	0xffffcfff
 800643c:	40008000 	.word	0x40008000
 8006440:	11fff4ff 	.word	0x11fff4ff
 8006444:	40013800 	.word	0x40013800
 8006448:	40021000 	.word	0x40021000
 800644c:	40004400 	.word	0x40004400
 8006450:	40004800 	.word	0x40004800
 8006454:	40004c00 	.word	0x40004c00
 8006458:	00f42400 	.word	0x00f42400
 800645c:	08008b24 	.word	0x08008b24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	61bb      	str	r3, [r7, #24]
 8006464:	2300      	movs	r3, #0
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800646c:	4b92      	ldr	r3, [pc, #584]	; (80066b8 <UART_SetConfig+0x574>)
 800646e:	0052      	lsls	r2, r2, #1
 8006470:	5ad3      	ldrh	r3, [r2, r3]
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	69b8      	ldr	r0, [r7, #24]
 800647e:	69f9      	ldr	r1, [r7, #28]
 8006480:	f7f9 ffc8 	bl	8000414 <__aeabi_uldivmod>
 8006484:	0002      	movs	r2, r0
 8006486:	000b      	movs	r3, r1
 8006488:	0e11      	lsrs	r1, r2, #24
 800648a:	021d      	lsls	r5, r3, #8
 800648c:	430d      	orrs	r5, r1
 800648e:	0214      	lsls	r4, r2, #8
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	68b8      	ldr	r0, [r7, #8]
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	1900      	adds	r0, r0, r4
 80064a2:	4169      	adcs	r1, r5
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	2300      	movs	r3, #0
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f7f9 ffaf 	bl	8000414 <__aeabi_uldivmod>
 80064b6:	0002      	movs	r2, r0
 80064b8:	000b      	movs	r3, r1
 80064ba:	0013      	movs	r3, r2
 80064bc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c0:	23c0      	movs	r3, #192	; 0xc0
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d309      	bcc.n	80064dc <UART_SetConfig+0x398>
 80064c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ca:	2380      	movs	r3, #128	; 0x80
 80064cc:	035b      	lsls	r3, r3, #13
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d204      	bcs.n	80064dc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d8:	60da      	str	r2, [r3, #12]
 80064da:	e0d6      	b.n	800668a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80064dc:	231a      	movs	r3, #26
 80064de:	2220      	movs	r2, #32
 80064e0:	189b      	adds	r3, r3, r2
 80064e2:	19db      	adds	r3, r3, r7
 80064e4:	2201      	movs	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e0cf      	b.n	800668a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	69da      	ldr	r2, [r3, #28]
 80064ee:	2380      	movs	r3, #128	; 0x80
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d000      	beq.n	80064f8 <UART_SetConfig+0x3b4>
 80064f6:	e070      	b.n	80065da <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80064f8:	231b      	movs	r3, #27
 80064fa:	2220      	movs	r2, #32
 80064fc:	189b      	adds	r3, r3, r2
 80064fe:	19db      	adds	r3, r3, r7
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2b08      	cmp	r3, #8
 8006504:	d015      	beq.n	8006532 <UART_SetConfig+0x3ee>
 8006506:	dc18      	bgt.n	800653a <UART_SetConfig+0x3f6>
 8006508:	2b04      	cmp	r3, #4
 800650a:	d00d      	beq.n	8006528 <UART_SetConfig+0x3e4>
 800650c:	dc15      	bgt.n	800653a <UART_SetConfig+0x3f6>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <UART_SetConfig+0x3d4>
 8006512:	2b02      	cmp	r3, #2
 8006514:	d005      	beq.n	8006522 <UART_SetConfig+0x3de>
 8006516:	e010      	b.n	800653a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006518:	f7fd fe18 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 800651c:	0003      	movs	r3, r0
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006520:	e014      	b.n	800654c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006522:	4b66      	ldr	r3, [pc, #408]	; (80066bc <UART_SetConfig+0x578>)
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006526:	e011      	b.n	800654c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006528:	f7fd fd84 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 800652c:	0003      	movs	r3, r0
 800652e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006530:	e00c      	b.n	800654c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006538:	e008      	b.n	800654c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800653e:	231a      	movs	r3, #26
 8006540:	2220      	movs	r2, #32
 8006542:	189b      	adds	r3, r3, r2
 8006544:	19db      	adds	r3, r3, r7
 8006546:	2201      	movs	r2, #1
 8006548:	701a      	strb	r2, [r3, #0]
        break;
 800654a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654e:	2b00      	cmp	r3, #0
 8006550:	d100      	bne.n	8006554 <UART_SetConfig+0x410>
 8006552:	e09a      	b.n	800668a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006558:	4b57      	ldr	r3, [pc, #348]	; (80066b8 <UART_SetConfig+0x574>)
 800655a:	0052      	lsls	r2, r2, #1
 800655c:	5ad3      	ldrh	r3, [r2, r3]
 800655e:	0019      	movs	r1, r3
 8006560:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006562:	f7f9 fde1 	bl	8000128 <__udivsi3>
 8006566:	0003      	movs	r3, r0
 8006568:	005a      	lsls	r2, r3, #1
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	085b      	lsrs	r3, r3, #1
 8006570:	18d2      	adds	r2, r2, r3
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	0019      	movs	r1, r3
 8006578:	0010      	movs	r0, r2
 800657a:	f7f9 fdd5 	bl	8000128 <__udivsi3>
 800657e:	0003      	movs	r3, r0
 8006580:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	2b0f      	cmp	r3, #15
 8006586:	d921      	bls.n	80065cc <UART_SetConfig+0x488>
 8006588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658a:	2380      	movs	r3, #128	; 0x80
 800658c:	025b      	lsls	r3, r3, #9
 800658e:	429a      	cmp	r2, r3
 8006590:	d21c      	bcs.n	80065cc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	b29a      	uxth	r2, r3
 8006596:	200e      	movs	r0, #14
 8006598:	2420      	movs	r4, #32
 800659a:	1903      	adds	r3, r0, r4
 800659c:	19db      	adds	r3, r3, r7
 800659e:	210f      	movs	r1, #15
 80065a0:	438a      	bics	r2, r1
 80065a2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2207      	movs	r2, #7
 80065ac:	4013      	ands	r3, r2
 80065ae:	b299      	uxth	r1, r3
 80065b0:	1903      	adds	r3, r0, r4
 80065b2:	19db      	adds	r3, r3, r7
 80065b4:	1902      	adds	r2, r0, r4
 80065b6:	19d2      	adds	r2, r2, r7
 80065b8:	8812      	ldrh	r2, [r2, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	1902      	adds	r2, r0, r4
 80065c4:	19d2      	adds	r2, r2, r7
 80065c6:	8812      	ldrh	r2, [r2, #0]
 80065c8:	60da      	str	r2, [r3, #12]
 80065ca:	e05e      	b.n	800668a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80065cc:	231a      	movs	r3, #26
 80065ce:	2220      	movs	r2, #32
 80065d0:	189b      	adds	r3, r3, r2
 80065d2:	19db      	adds	r3, r3, r7
 80065d4:	2201      	movs	r2, #1
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	e057      	b.n	800668a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065da:	231b      	movs	r3, #27
 80065dc:	2220      	movs	r2, #32
 80065de:	189b      	adds	r3, r3, r2
 80065e0:	19db      	adds	r3, r3, r7
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d015      	beq.n	8006614 <UART_SetConfig+0x4d0>
 80065e8:	dc18      	bgt.n	800661c <UART_SetConfig+0x4d8>
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d00d      	beq.n	800660a <UART_SetConfig+0x4c6>
 80065ee:	dc15      	bgt.n	800661c <UART_SetConfig+0x4d8>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <UART_SetConfig+0x4b6>
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d005      	beq.n	8006604 <UART_SetConfig+0x4c0>
 80065f8:	e010      	b.n	800661c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065fa:	f7fd fda7 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 80065fe:	0003      	movs	r3, r0
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006602:	e014      	b.n	800662e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006604:	4b2d      	ldr	r3, [pc, #180]	; (80066bc <UART_SetConfig+0x578>)
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006608:	e011      	b.n	800662e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800660a:	f7fd fd13 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 800660e:	0003      	movs	r3, r0
 8006610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006612:	e00c      	b.n	800662e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800661a:	e008      	b.n	800662e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800661c:	2300      	movs	r3, #0
 800661e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006620:	231a      	movs	r3, #26
 8006622:	2220      	movs	r2, #32
 8006624:	189b      	adds	r3, r3, r2
 8006626:	19db      	adds	r3, r3, r7
 8006628:	2201      	movs	r2, #1
 800662a:	701a      	strb	r2, [r3, #0]
        break;
 800662c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	2b00      	cmp	r3, #0
 8006632:	d02a      	beq.n	800668a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006638:	4b1f      	ldr	r3, [pc, #124]	; (80066b8 <UART_SetConfig+0x574>)
 800663a:	0052      	lsls	r2, r2, #1
 800663c:	5ad3      	ldrh	r3, [r2, r3]
 800663e:	0019      	movs	r1, r3
 8006640:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006642:	f7f9 fd71 	bl	8000128 <__udivsi3>
 8006646:	0003      	movs	r3, r0
 8006648:	001a      	movs	r2, r3
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	18d2      	adds	r2, r2, r3
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	0019      	movs	r1, r3
 8006658:	0010      	movs	r0, r2
 800665a:	f7f9 fd65 	bl	8000128 <__udivsi3>
 800665e:	0003      	movs	r3, r0
 8006660:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	2b0f      	cmp	r3, #15
 8006666:	d90a      	bls.n	800667e <UART_SetConfig+0x53a>
 8006668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666a:	2380      	movs	r3, #128	; 0x80
 800666c:	025b      	lsls	r3, r3, #9
 800666e:	429a      	cmp	r2, r3
 8006670:	d205      	bcs.n	800667e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	b29a      	uxth	r2, r3
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60da      	str	r2, [r3, #12]
 800667c:	e005      	b.n	800668a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800667e:	231a      	movs	r3, #26
 8006680:	2220      	movs	r2, #32
 8006682:	189b      	adds	r3, r3, r2
 8006684:	19db      	adds	r3, r3, r7
 8006686:	2201      	movs	r2, #1
 8006688:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	226a      	movs	r2, #106	; 0x6a
 800668e:	2101      	movs	r1, #1
 8006690:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	2268      	movs	r2, #104	; 0x68
 8006696:	2101      	movs	r1, #1
 8006698:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	2200      	movs	r2, #0
 800669e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	2200      	movs	r2, #0
 80066a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80066a6:	231a      	movs	r3, #26
 80066a8:	2220      	movs	r2, #32
 80066aa:	189b      	adds	r3, r3, r2
 80066ac:	19db      	adds	r3, r3, r7
 80066ae:	781b      	ldrb	r3, [r3, #0]
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b010      	add	sp, #64	; 0x40
 80066b6:	bdb0      	pop	{r4, r5, r7, pc}
 80066b8:	08008b24 	.word	0x08008b24
 80066bc:	00f42400 	.word	0x00f42400

080066c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	2208      	movs	r2, #8
 80066ce:	4013      	ands	r3, r2
 80066d0:	d00b      	beq.n	80066ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4a4a      	ldr	r2, [pc, #296]	; (8006804 <UART_AdvFeatureConfig+0x144>)
 80066da:	4013      	ands	r3, r2
 80066dc:	0019      	movs	r1, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	2201      	movs	r2, #1
 80066f0:	4013      	ands	r3, r2
 80066f2:	d00b      	beq.n	800670c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	4a43      	ldr	r2, [pc, #268]	; (8006808 <UART_AdvFeatureConfig+0x148>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	0019      	movs	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	2202      	movs	r2, #2
 8006712:	4013      	ands	r3, r2
 8006714:	d00b      	beq.n	800672e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	4a3b      	ldr	r2, [pc, #236]	; (800680c <UART_AdvFeatureConfig+0x14c>)
 800671e:	4013      	ands	r3, r2
 8006720:	0019      	movs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	2204      	movs	r2, #4
 8006734:	4013      	ands	r3, r2
 8006736:	d00b      	beq.n	8006750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	4a34      	ldr	r2, [pc, #208]	; (8006810 <UART_AdvFeatureConfig+0x150>)
 8006740:	4013      	ands	r3, r2
 8006742:	0019      	movs	r1, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	2210      	movs	r2, #16
 8006756:	4013      	ands	r3, r2
 8006758:	d00b      	beq.n	8006772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a2c      	ldr	r2, [pc, #176]	; (8006814 <UART_AdvFeatureConfig+0x154>)
 8006762:	4013      	ands	r3, r2
 8006764:	0019      	movs	r1, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	2220      	movs	r2, #32
 8006778:	4013      	ands	r3, r2
 800677a:	d00b      	beq.n	8006794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	4a25      	ldr	r2, [pc, #148]	; (8006818 <UART_AdvFeatureConfig+0x158>)
 8006784:	4013      	ands	r3, r2
 8006786:	0019      	movs	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	2240      	movs	r2, #64	; 0x40
 800679a:	4013      	ands	r3, r2
 800679c:	d01d      	beq.n	80067da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4a1d      	ldr	r2, [pc, #116]	; (800681c <UART_AdvFeatureConfig+0x15c>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	0019      	movs	r1, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	035b      	lsls	r3, r3, #13
 80067be:	429a      	cmp	r2, r3
 80067c0:	d10b      	bne.n	80067da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	4a15      	ldr	r2, [pc, #84]	; (8006820 <UART_AdvFeatureConfig+0x160>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	0019      	movs	r1, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	2280      	movs	r2, #128	; 0x80
 80067e0:	4013      	ands	r3, r2
 80067e2:	d00b      	beq.n	80067fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	4a0e      	ldr	r2, [pc, #56]	; (8006824 <UART_AdvFeatureConfig+0x164>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	0019      	movs	r1, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
  }
}
 80067fc:	46c0      	nop			; (mov r8, r8)
 80067fe:	46bd      	mov	sp, r7
 8006800:	b002      	add	sp, #8
 8006802:	bd80      	pop	{r7, pc}
 8006804:	ffff7fff 	.word	0xffff7fff
 8006808:	fffdffff 	.word	0xfffdffff
 800680c:	fffeffff 	.word	0xfffeffff
 8006810:	fffbffff 	.word	0xfffbffff
 8006814:	ffffefff 	.word	0xffffefff
 8006818:	ffffdfff 	.word	0xffffdfff
 800681c:	ffefffff 	.word	0xffefffff
 8006820:	ff9fffff 	.word	0xff9fffff
 8006824:	fff7ffff 	.word	0xfff7ffff

08006828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b092      	sub	sp, #72	; 0x48
 800682c:	af02      	add	r7, sp, #8
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2290      	movs	r2, #144	; 0x90
 8006834:	2100      	movs	r1, #0
 8006836:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006838:	f7fb f8ec 	bl	8001a14 <HAL_GetTick>
 800683c:	0003      	movs	r3, r0
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2208      	movs	r2, #8
 8006848:	4013      	ands	r3, r2
 800684a:	2b08      	cmp	r3, #8
 800684c:	d12d      	bne.n	80068aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800684e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006850:	2280      	movs	r2, #128	; 0x80
 8006852:	0391      	lsls	r1, r2, #14
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4a47      	ldr	r2, [pc, #284]	; (8006974 <UART_CheckIdleState+0x14c>)
 8006858:	9200      	str	r2, [sp, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	f000 f88e 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 8006860:	1e03      	subs	r3, r0, #0
 8006862:	d022      	beq.n	80068aa <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006864:	f3ef 8310 	mrs	r3, PRIMASK
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800686c:	63bb      	str	r3, [r7, #56]	; 0x38
 800686e:	2301      	movs	r3, #1
 8006870:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	f383 8810 	msr	PRIMASK, r3
}
 8006878:	46c0      	nop			; (mov r8, r8)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2180      	movs	r1, #128	; 0x80
 8006886:	438a      	bics	r2, r1
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006890:	f383 8810 	msr	PRIMASK, r3
}
 8006894:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2288      	movs	r2, #136	; 0x88
 800689a:	2120      	movs	r1, #32
 800689c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2284      	movs	r2, #132	; 0x84
 80068a2:	2100      	movs	r1, #0
 80068a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e060      	b.n	800696c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2204      	movs	r2, #4
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d146      	bne.n	8006946 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ba:	2280      	movs	r2, #128	; 0x80
 80068bc:	03d1      	lsls	r1, r2, #15
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4a2c      	ldr	r2, [pc, #176]	; (8006974 <UART_CheckIdleState+0x14c>)
 80068c2:	9200      	str	r2, [sp, #0]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f000 f859 	bl	800697c <UART_WaitOnFlagUntilTimeout>
 80068ca:	1e03      	subs	r3, r0, #0
 80068cc:	d03b      	beq.n	8006946 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ce:	f3ef 8310 	mrs	r3, PRIMASK
 80068d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80068d4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
 80068d8:	2301      	movs	r3, #1
 80068da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f383 8810 	msr	PRIMASK, r3
}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4922      	ldr	r1, [pc, #136]	; (8006978 <UART_CheckIdleState+0x150>)
 80068f0:	400a      	ands	r2, r1
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f383 8810 	msr	PRIMASK, r3
}
 80068fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006900:	f3ef 8310 	mrs	r3, PRIMASK
 8006904:	61bb      	str	r3, [r7, #24]
  return(result);
 8006906:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006908:	633b      	str	r3, [r7, #48]	; 0x30
 800690a:	2301      	movs	r3, #1
 800690c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f383 8810 	msr	PRIMASK, r3
}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2101      	movs	r1, #1
 8006922:	438a      	bics	r2, r1
 8006924:	609a      	str	r2, [r3, #8]
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	f383 8810 	msr	PRIMASK, r3
}
 8006930:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	228c      	movs	r2, #140	; 0x8c
 8006936:	2120      	movs	r1, #32
 8006938:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2284      	movs	r2, #132	; 0x84
 800693e:	2100      	movs	r1, #0
 8006940:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e012      	b.n	800696c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2288      	movs	r2, #136	; 0x88
 800694a:	2120      	movs	r1, #32
 800694c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	228c      	movs	r2, #140	; 0x8c
 8006952:	2120      	movs	r1, #32
 8006954:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2284      	movs	r2, #132	; 0x84
 8006966:	2100      	movs	r1, #0
 8006968:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b010      	add	sp, #64	; 0x40
 8006972:	bd80      	pop	{r7, pc}
 8006974:	01ffffff 	.word	0x01ffffff
 8006978:	fffffedf 	.word	0xfffffedf

0800697c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	1dfb      	adds	r3, r7, #7
 800698a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698c:	e051      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	3301      	adds	r3, #1
 8006992:	d04e      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006994:	f7fb f83e 	bl	8001a14 <HAL_GetTick>
 8006998:	0002      	movs	r2, r0
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d302      	bcc.n	80069aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e051      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2204      	movs	r2, #4
 80069b6:	4013      	ands	r3, r2
 80069b8:	d03b      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb6>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b80      	cmp	r3, #128	; 0x80
 80069be:	d038      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb6>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d035      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	2208      	movs	r2, #8
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d111      	bne.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2208      	movs	r2, #8
 80069da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	0018      	movs	r0, r3
 80069e0:	f000 f960 	bl	8006ca4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2290      	movs	r2, #144	; 0x90
 80069e8:	2108      	movs	r1, #8
 80069ea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2284      	movs	r2, #132	; 0x84
 80069f0:	2100      	movs	r1, #0
 80069f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e02c      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69da      	ldr	r2, [r3, #28]
 80069fe:	2380      	movs	r3, #128	; 0x80
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	401a      	ands	r2, r3
 8006a04:	2380      	movs	r3, #128	; 0x80
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d112      	bne.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2280      	movs	r2, #128	; 0x80
 8006a12:	0112      	lsls	r2, r2, #4
 8006a14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 f943 	bl	8006ca4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2290      	movs	r2, #144	; 0x90
 8006a22:	2120      	movs	r1, #32
 8006a24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2284      	movs	r2, #132	; 0x84
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e00f      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	425a      	negs	r2, r3
 8006a42:	4153      	adcs	r3, r2
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	001a      	movs	r2, r3
 8006a48:	1dfb      	adds	r3, r7, #7
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d09e      	beq.n	800698e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	0018      	movs	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	b004      	add	sp, #16
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b098      	sub	sp, #96	; 0x60
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	1dbb      	adds	r3, r7, #6
 8006a68:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	1dba      	adds	r2, r7, #6
 8006a74:	215c      	movs	r1, #92	; 0x5c
 8006a76:	8812      	ldrh	r2, [r2, #0]
 8006a78:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	1dba      	adds	r2, r7, #6
 8006a7e:	215e      	movs	r1, #94	; 0x5e
 8006a80:	8812      	ldrh	r2, [r2, #0]
 8006a82:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	2380      	movs	r3, #128	; 0x80
 8006a90:	015b      	lsls	r3, r3, #5
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d10d      	bne.n	8006ab2 <UART_Start_Receive_IT+0x56>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d104      	bne.n	8006aa8 <UART_Start_Receive_IT+0x4c>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2260      	movs	r2, #96	; 0x60
 8006aa2:	497b      	ldr	r1, [pc, #492]	; (8006c90 <UART_Start_Receive_IT+0x234>)
 8006aa4:	5299      	strh	r1, [r3, r2]
 8006aa6:	e02e      	b.n	8006b06 <UART_Start_Receive_IT+0xaa>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2260      	movs	r2, #96	; 0x60
 8006aac:	21ff      	movs	r1, #255	; 0xff
 8006aae:	5299      	strh	r1, [r3, r2]
 8006ab0:	e029      	b.n	8006b06 <UART_Start_Receive_IT+0xaa>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10d      	bne.n	8006ad6 <UART_Start_Receive_IT+0x7a>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d104      	bne.n	8006acc <UART_Start_Receive_IT+0x70>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2260      	movs	r2, #96	; 0x60
 8006ac6:	21ff      	movs	r1, #255	; 0xff
 8006ac8:	5299      	strh	r1, [r3, r2]
 8006aca:	e01c      	b.n	8006b06 <UART_Start_Receive_IT+0xaa>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2260      	movs	r2, #96	; 0x60
 8006ad0:	217f      	movs	r1, #127	; 0x7f
 8006ad2:	5299      	strh	r1, [r3, r2]
 8006ad4:	e017      	b.n	8006b06 <UART_Start_Receive_IT+0xaa>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	2380      	movs	r3, #128	; 0x80
 8006adc:	055b      	lsls	r3, r3, #21
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d10d      	bne.n	8006afe <UART_Start_Receive_IT+0xa2>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d104      	bne.n	8006af4 <UART_Start_Receive_IT+0x98>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2260      	movs	r2, #96	; 0x60
 8006aee:	217f      	movs	r1, #127	; 0x7f
 8006af0:	5299      	strh	r1, [r3, r2]
 8006af2:	e008      	b.n	8006b06 <UART_Start_Receive_IT+0xaa>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2260      	movs	r2, #96	; 0x60
 8006af8:	213f      	movs	r1, #63	; 0x3f
 8006afa:	5299      	strh	r1, [r3, r2]
 8006afc:	e003      	b.n	8006b06 <UART_Start_Receive_IT+0xaa>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2260      	movs	r2, #96	; 0x60
 8006b02:	2100      	movs	r1, #0
 8006b04:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2290      	movs	r2, #144	; 0x90
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	228c      	movs	r2, #140	; 0x8c
 8006b12:	2122      	movs	r1, #34	; 0x22
 8006b14:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b16:	f3ef 8310 	mrs	r3, PRIMASK
 8006b1a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b20:	2301      	movs	r3, #1
 8006b22:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b26:	f383 8810 	msr	PRIMASK, r3
}
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2101      	movs	r1, #1
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	609a      	str	r2, [r3, #8]
 8006b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b42:	f383 8810 	msr	PRIMASK, r3
}
 8006b46:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	059b      	lsls	r3, r3, #22
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d150      	bne.n	8006bf6 <UART_Start_Receive_IT+0x19a>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2268      	movs	r2, #104	; 0x68
 8006b58:	5a9b      	ldrh	r3, [r3, r2]
 8006b5a:	1dba      	adds	r2, r7, #6
 8006b5c:	8812      	ldrh	r2, [r2, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d349      	bcc.n	8006bf6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	2380      	movs	r3, #128	; 0x80
 8006b68:	015b      	lsls	r3, r3, #5
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d107      	bne.n	8006b7e <UART_Start_Receive_IT+0x122>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a46      	ldr	r2, [pc, #280]	; (8006c94 <UART_Start_Receive_IT+0x238>)
 8006b7a:	675a      	str	r2, [r3, #116]	; 0x74
 8006b7c:	e002      	b.n	8006b84 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a45      	ldr	r2, [pc, #276]	; (8006c98 <UART_Start_Receive_IT+0x23c>)
 8006b82:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d019      	beq.n	8006bc0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b96:	2301      	movs	r3, #1
 8006b98:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ba0:	46c0      	nop			; (mov r8, r8)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2180      	movs	r1, #128	; 0x80
 8006bae:	0049      	lsls	r1, r1, #1
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bba:	f383 8810 	msr	PRIMASK, r3
}
 8006bbe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8006bca:	2301      	movs	r3, #1
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	f383 8810 	msr	PRIMASK, r3
}
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2180      	movs	r1, #128	; 0x80
 8006be2:	0549      	lsls	r1, r1, #21
 8006be4:	430a      	orrs	r2, r1
 8006be6:	609a      	str	r2, [r3, #8]
 8006be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bea:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	f383 8810 	msr	PRIMASK, r3
}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	e047      	b.n	8006c86 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	015b      	lsls	r3, r3, #5
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d107      	bne.n	8006c12 <UART_Start_Receive_IT+0x1b6>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d103      	bne.n	8006c12 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4a23      	ldr	r2, [pc, #140]	; (8006c9c <UART_Start_Receive_IT+0x240>)
 8006c0e:	675a      	str	r2, [r3, #116]	; 0x74
 8006c10:	e002      	b.n	8006c18 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4a22      	ldr	r2, [pc, #136]	; (8006ca0 <UART_Start_Receive_IT+0x244>)
 8006c16:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d019      	beq.n	8006c54 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c20:	f3ef 8310 	mrs	r3, PRIMASK
 8006c24:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c26:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	f383 8810 	msr	PRIMASK, r3
}
 8006c34:	46c0      	nop			; (mov r8, r8)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2190      	movs	r1, #144	; 0x90
 8006c42:	0049      	lsls	r1, r1, #1
 8006c44:	430a      	orrs	r2, r1
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	f383 8810 	msr	PRIMASK, r3
}
 8006c52:	e018      	b.n	8006c86 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c54:	f3ef 8310 	mrs	r3, PRIMASK
 8006c58:	613b      	str	r3, [r7, #16]
  return(result);
 8006c5a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c5e:	2301      	movs	r3, #1
 8006c60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f383 8810 	msr	PRIMASK, r3
}
 8006c68:	46c0      	nop			; (mov r8, r8)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2120      	movs	r1, #32
 8006c76:	430a      	orrs	r2, r1
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	f383 8810 	msr	PRIMASK, r3
}
 8006c84:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	0018      	movs	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	b018      	add	sp, #96	; 0x60
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	000001ff 	.word	0x000001ff
 8006c94:	080074c1 	.word	0x080074c1
 8006c98:	08007181 	.word	0x08007181
 8006c9c:	08006fbd 	.word	0x08006fbd
 8006ca0:	08006df9 	.word	0x08006df9

08006ca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08e      	sub	sp, #56	; 0x38
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cac:	f3ef 8310 	mrs	r3, PRIMASK
 8006cb0:	617b      	str	r3, [r7, #20]
  return(result);
 8006cb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f383 8810 	msr	PRIMASK, r3
}
 8006cc0:	46c0      	nop			; (mov r8, r8)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4926      	ldr	r1, [pc, #152]	; (8006d68 <UART_EndRxTransfer+0xc4>)
 8006cce:	400a      	ands	r2, r1
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	f383 8810 	msr	PRIMASK, r3
}
 8006cdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cde:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce2:	623b      	str	r3, [r7, #32]
  return(result);
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ce8:	2301      	movs	r3, #1
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	f383 8810 	msr	PRIMASK, r3
}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	491b      	ldr	r1, [pc, #108]	; (8006d6c <UART_EndRxTransfer+0xc8>)
 8006d00:	400a      	ands	r2, r1
 8006d02:	609a      	str	r2, [r3, #8]
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	f383 8810 	msr	PRIMASK, r3
}
 8006d0e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d118      	bne.n	8006d4a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d18:	f3ef 8310 	mrs	r3, PRIMASK
 8006d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d22:	2301      	movs	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f383 8810 	msr	PRIMASK, r3
}
 8006d2c:	46c0      	nop			; (mov r8, r8)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2110      	movs	r1, #16
 8006d3a:	438a      	bics	r2, r1
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f383 8810 	msr	PRIMASK, r3
}
 8006d48:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	228c      	movs	r2, #140	; 0x8c
 8006d4e:	2120      	movs	r1, #32
 8006d50:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b00e      	add	sp, #56	; 0x38
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	fffffedf 	.word	0xfffffedf
 8006d6c:	effffffe 	.word	0xeffffffe

08006d70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	225e      	movs	r2, #94	; 0x5e
 8006d82:	2100      	movs	r1, #0
 8006d84:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2256      	movs	r2, #86	; 0x56
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	0018      	movs	r0, r3
 8006d92:	f7ff f9c3 	bl	800611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b004      	add	sp, #16
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b086      	sub	sp, #24
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006da6:	f3ef 8310 	mrs	r3, PRIMASK
 8006daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	2301      	movs	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f383 8810 	msr	PRIMASK, r3
}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2140      	movs	r1, #64	; 0x40
 8006dc8:	438a      	bics	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f383 8810 	msr	PRIMASK, r3
}
 8006dd6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2288      	movs	r2, #136	; 0x88
 8006ddc:	2120      	movs	r1, #32
 8006dde:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7ff f98f 	bl	800610c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b006      	add	sp, #24
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b094      	sub	sp, #80	; 0x50
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e00:	204e      	movs	r0, #78	; 0x4e
 8006e02:	183b      	adds	r3, r7, r0
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	2160      	movs	r1, #96	; 0x60
 8006e08:	5a52      	ldrh	r2, [r2, r1]
 8006e0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	228c      	movs	r2, #140	; 0x8c
 8006e10:	589b      	ldr	r3, [r3, r2]
 8006e12:	2b22      	cmp	r3, #34	; 0x22
 8006e14:	d000      	beq.n	8006e18 <UART_RxISR_8BIT+0x20>
 8006e16:	e0bf      	b.n	8006f98 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e1e:	214c      	movs	r1, #76	; 0x4c
 8006e20:	187b      	adds	r3, r7, r1
 8006e22:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e24:	187b      	adds	r3, r7, r1
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	183b      	adds	r3, r7, r0
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b2d9      	uxtb	r1, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e34:	400a      	ands	r2, r1
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	225e      	movs	r2, #94	; 0x5e
 8006e48:	5a9b      	ldrh	r3, [r3, r2]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b299      	uxth	r1, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	225e      	movs	r2, #94	; 0x5e
 8006e54:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	225e      	movs	r2, #94	; 0x5e
 8006e5a:	5a9b      	ldrh	r3, [r3, r2]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d000      	beq.n	8006e64 <UART_RxISR_8BIT+0x6c>
 8006e62:	e0a1      	b.n	8006fa8 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e64:	f3ef 8310 	mrs	r3, PRIMASK
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e6e:	2301      	movs	r3, #1
 8006e70:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	f383 8810 	msr	PRIMASK, r3
}
 8006e78:	46c0      	nop			; (mov r8, r8)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	494a      	ldr	r1, [pc, #296]	; (8006fb0 <UART_RxISR_8BIT+0x1b8>)
 8006e86:	400a      	ands	r2, r1
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	f383 8810 	msr	PRIMASK, r3
}
 8006e94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e96:	f3ef 8310 	mrs	r3, PRIMASK
 8006e9a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea6:	f383 8810 	msr	PRIMASK, r3
}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	438a      	bics	r2, r1
 8006eba:	609a      	str	r2, [r3, #8]
 8006ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	f383 8810 	msr	PRIMASK, r3
}
 8006ec6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	228c      	movs	r2, #140	; 0x8c
 8006ecc:	2120      	movs	r1, #32
 8006ece:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a34      	ldr	r2, [pc, #208]	; (8006fb4 <UART_RxISR_8BIT+0x1bc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d01f      	beq.n	8006f26 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	2380      	movs	r3, #128	; 0x80
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	d018      	beq.n	8006f26 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ef8:	61bb      	str	r3, [r7, #24]
  return(result);
 8006efa:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006efc:	643b      	str	r3, [r7, #64]	; 0x40
 8006efe:	2301      	movs	r3, #1
 8006f00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f383 8810 	msr	PRIMASK, r3
}
 8006f08:	46c0      	nop			; (mov r8, r8)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4928      	ldr	r1, [pc, #160]	; (8006fb8 <UART_RxISR_8BIT+0x1c0>)
 8006f16:	400a      	ands	r2, r1
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	f383 8810 	msr	PRIMASK, r3
}
 8006f24:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d12f      	bne.n	8006f8e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f34:	f3ef 8310 	mrs	r3, PRIMASK
 8006f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f3a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3e:	2301      	movs	r3, #1
 8006f40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f383 8810 	msr	PRIMASK, r3
}
 8006f48:	46c0      	nop			; (mov r8, r8)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2110      	movs	r1, #16
 8006f56:	438a      	bics	r2, r1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f383 8810 	msr	PRIMASK, r3
}
 8006f64:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	2210      	movs	r2, #16
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	d103      	bne.n	8006f7c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2210      	movs	r2, #16
 8006f7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	225c      	movs	r2, #92	; 0x5c
 8006f80:	5a9a      	ldrh	r2, [r3, r2]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0011      	movs	r1, r2
 8006f86:	0018      	movs	r0, r3
 8006f88:	f7ff f8d0 	bl	800612c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f8c:	e00c      	b.n	8006fa8 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7fa f9a3 	bl	80012dc <HAL_UART_RxCpltCallback>
}
 8006f96:	e007      	b.n	8006fa8 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2108      	movs	r1, #8
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	619a      	str	r2, [r3, #24]
}
 8006fa8:	46c0      	nop			; (mov r8, r8)
 8006faa:	46bd      	mov	sp, r7
 8006fac:	b014      	add	sp, #80	; 0x50
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	fffffedf 	.word	0xfffffedf
 8006fb4:	40008000 	.word	0x40008000
 8006fb8:	fbffffff 	.word	0xfbffffff

08006fbc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b094      	sub	sp, #80	; 0x50
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fc4:	204e      	movs	r0, #78	; 0x4e
 8006fc6:	183b      	adds	r3, r7, r0
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	2160      	movs	r1, #96	; 0x60
 8006fcc:	5a52      	ldrh	r2, [r2, r1]
 8006fce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	228c      	movs	r2, #140	; 0x8c
 8006fd4:	589b      	ldr	r3, [r3, r2]
 8006fd6:	2b22      	cmp	r3, #34	; 0x22
 8006fd8:	d000      	beq.n	8006fdc <UART_RxISR_16BIT+0x20>
 8006fda:	e0bf      	b.n	800715c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fe2:	214c      	movs	r1, #76	; 0x4c
 8006fe4:	187b      	adds	r3, r7, r1
 8006fe6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fec:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8006fee:	187b      	adds	r3, r7, r1
 8006ff0:	183a      	adds	r2, r7, r0
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	8812      	ldrh	r2, [r2, #0]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ffc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007002:	1c9a      	adds	r2, r3, #2
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	225e      	movs	r2, #94	; 0x5e
 800700c:	5a9b      	ldrh	r3, [r3, r2]
 800700e:	b29b      	uxth	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	b299      	uxth	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	225e      	movs	r2, #94	; 0x5e
 8007018:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	225e      	movs	r2, #94	; 0x5e
 800701e:	5a9b      	ldrh	r3, [r3, r2]
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d000      	beq.n	8007028 <UART_RxISR_16BIT+0x6c>
 8007026:	e0a1      	b.n	800716c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007028:	f3ef 8310 	mrs	r3, PRIMASK
 800702c:	623b      	str	r3, [r7, #32]
  return(result);
 800702e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007030:	647b      	str	r3, [r7, #68]	; 0x44
 8007032:	2301      	movs	r3, #1
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	f383 8810 	msr	PRIMASK, r3
}
 800703c:	46c0      	nop			; (mov r8, r8)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	494a      	ldr	r1, [pc, #296]	; (8007174 <UART_RxISR_16BIT+0x1b8>)
 800704a:	400a      	ands	r2, r1
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007050:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	f383 8810 	msr	PRIMASK, r3
}
 8007058:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800705a:	f3ef 8310 	mrs	r3, PRIMASK
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007060:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007062:	643b      	str	r3, [r7, #64]	; 0x40
 8007064:	2301      	movs	r3, #1
 8007066:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	f383 8810 	msr	PRIMASK, r3
}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2101      	movs	r1, #1
 800707c:	438a      	bics	r2, r1
 800707e:	609a      	str	r2, [r3, #8]
 8007080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007082:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	f383 8810 	msr	PRIMASK, r3
}
 800708a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	228c      	movs	r2, #140	; 0x8c
 8007090:	2120      	movs	r1, #32
 8007092:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a34      	ldr	r2, [pc, #208]	; (8007178 <UART_RxISR_16BIT+0x1bc>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01f      	beq.n	80070ea <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	2380      	movs	r3, #128	; 0x80
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	4013      	ands	r3, r2
 80070b6:	d018      	beq.n	80070ea <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b8:	f3ef 8310 	mrs	r3, PRIMASK
 80070bc:	617b      	str	r3, [r7, #20]
  return(result);
 80070be:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070c2:	2301      	movs	r3, #1
 80070c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	f383 8810 	msr	PRIMASK, r3
}
 80070cc:	46c0      	nop			; (mov r8, r8)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4928      	ldr	r1, [pc, #160]	; (800717c <UART_RxISR_16BIT+0x1c0>)
 80070da:	400a      	ands	r2, r1
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f383 8810 	msr	PRIMASK, r3
}
 80070e8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d12f      	bne.n	8007152 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f8:	f3ef 8310 	mrs	r3, PRIMASK
 80070fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80070fe:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007100:	63bb      	str	r3, [r7, #56]	; 0x38
 8007102:	2301      	movs	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f383 8810 	msr	PRIMASK, r3
}
 800710c:	46c0      	nop			; (mov r8, r8)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2110      	movs	r1, #16
 800711a:	438a      	bics	r2, r1
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f383 8810 	msr	PRIMASK, r3
}
 8007128:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	2210      	movs	r2, #16
 8007132:	4013      	ands	r3, r2
 8007134:	2b10      	cmp	r3, #16
 8007136:	d103      	bne.n	8007140 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2210      	movs	r2, #16
 800713e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	225c      	movs	r2, #92	; 0x5c
 8007144:	5a9a      	ldrh	r2, [r3, r2]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	0011      	movs	r1, r2
 800714a:	0018      	movs	r0, r3
 800714c:	f7fe ffee 	bl	800612c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007150:	e00c      	b.n	800716c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	0018      	movs	r0, r3
 8007156:	f7fa f8c1 	bl	80012dc <HAL_UART_RxCpltCallback>
}
 800715a:	e007      	b.n	800716c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699a      	ldr	r2, [r3, #24]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2108      	movs	r1, #8
 8007168:	430a      	orrs	r2, r1
 800716a:	619a      	str	r2, [r3, #24]
}
 800716c:	46c0      	nop			; (mov r8, r8)
 800716e:	46bd      	mov	sp, r7
 8007170:	b014      	add	sp, #80	; 0x50
 8007172:	bd80      	pop	{r7, pc}
 8007174:	fffffedf 	.word	0xfffffedf
 8007178:	40008000 	.word	0x40008000
 800717c:	fbffffff 	.word	0xfbffffff

08007180 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b0a0      	sub	sp, #128	; 0x80
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007188:	237a      	movs	r3, #122	; 0x7a
 800718a:	18fb      	adds	r3, r7, r3
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	2160      	movs	r1, #96	; 0x60
 8007190:	5a52      	ldrh	r2, [r2, r1]
 8007192:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	228c      	movs	r2, #140	; 0x8c
 80071b0:	589b      	ldr	r3, [r3, r2]
 80071b2:	2b22      	cmp	r3, #34	; 0x22
 80071b4:	d000      	beq.n	80071b8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80071b6:	e16a      	b.n	800748e <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071b8:	236e      	movs	r3, #110	; 0x6e
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	2168      	movs	r1, #104	; 0x68
 80071c0:	5a52      	ldrh	r2, [r2, r1]
 80071c2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071c4:	e111      	b.n	80073ea <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071cc:	216c      	movs	r1, #108	; 0x6c
 80071ce:	187b      	adds	r3, r7, r1
 80071d0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	237a      	movs	r3, #122	; 0x7a
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b2d9      	uxtb	r1, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e4:	400a      	ands	r2, r1
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	225e      	movs	r2, #94	; 0x5e
 80071f8:	5a9b      	ldrh	r3, [r3, r2]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b299      	uxth	r1, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	225e      	movs	r2, #94	; 0x5e
 8007204:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800720e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007210:	2207      	movs	r2, #7
 8007212:	4013      	ands	r3, r2
 8007214:	d049      	beq.n	80072aa <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007218:	2201      	movs	r2, #1
 800721a:	4013      	ands	r3, r2
 800721c:	d010      	beq.n	8007240 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800721e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007220:	2380      	movs	r3, #128	; 0x80
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	4013      	ands	r3, r2
 8007226:	d00b      	beq.n	8007240 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2201      	movs	r2, #1
 800722e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2290      	movs	r2, #144	; 0x90
 8007234:	589b      	ldr	r3, [r3, r2]
 8007236:	2201      	movs	r2, #1
 8007238:	431a      	orrs	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2190      	movs	r1, #144	; 0x90
 800723e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007240:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007242:	2202      	movs	r2, #2
 8007244:	4013      	ands	r3, r2
 8007246:	d00f      	beq.n	8007268 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800724a:	2201      	movs	r2, #1
 800724c:	4013      	ands	r3, r2
 800724e:	d00b      	beq.n	8007268 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2202      	movs	r2, #2
 8007256:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2290      	movs	r2, #144	; 0x90
 800725c:	589b      	ldr	r3, [r3, r2]
 800725e:	2204      	movs	r2, #4
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2190      	movs	r1, #144	; 0x90
 8007266:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800726a:	2204      	movs	r2, #4
 800726c:	4013      	ands	r3, r2
 800726e:	d00f      	beq.n	8007290 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007272:	2201      	movs	r2, #1
 8007274:	4013      	ands	r3, r2
 8007276:	d00b      	beq.n	8007290 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2204      	movs	r2, #4
 800727e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2290      	movs	r2, #144	; 0x90
 8007284:	589b      	ldr	r3, [r3, r2]
 8007286:	2202      	movs	r2, #2
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2190      	movs	r1, #144	; 0x90
 800728e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2290      	movs	r2, #144	; 0x90
 8007294:	589b      	ldr	r3, [r3, r2]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0018      	movs	r0, r3
 800729e:	f7fe ff3d 	bl	800611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2290      	movs	r2, #144	; 0x90
 80072a6:	2100      	movs	r1, #0
 80072a8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	225e      	movs	r2, #94	; 0x5e
 80072ae:	5a9b      	ldrh	r3, [r3, r2]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d000      	beq.n	80072b8 <UART_RxISR_8BIT_FIFOEN+0x138>
 80072b6:	e098      	b.n	80073ea <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b8:	f3ef 8310 	mrs	r3, PRIMASK
 80072bc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80072c2:	2301      	movs	r3, #1
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c8:	f383 8810 	msr	PRIMASK, r3
}
 80072cc:	46c0      	nop			; (mov r8, r8)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4973      	ldr	r1, [pc, #460]	; (80074a8 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80072da:	400a      	ands	r2, r1
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072e0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e4:	f383 8810 	msr	PRIMASK, r3
}
 80072e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ea:	f3ef 8310 	mrs	r3, PRIMASK
 80072ee:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80072f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072f2:	667b      	str	r3, [r7, #100]	; 0x64
 80072f4:	2301      	movs	r3, #1
 80072f6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072fa:	f383 8810 	msr	PRIMASK, r3
}
 80072fe:	46c0      	nop			; (mov r8, r8)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4968      	ldr	r1, [pc, #416]	; (80074ac <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800730c:	400a      	ands	r2, r1
 800730e:	609a      	str	r2, [r3, #8]
 8007310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007312:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007316:	f383 8810 	msr	PRIMASK, r3
}
 800731a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	228c      	movs	r2, #140	; 0x8c
 8007320:	2120      	movs	r1, #32
 8007322:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a5e      	ldr	r2, [pc, #376]	; (80074b0 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01f      	beq.n	800737a <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	2380      	movs	r3, #128	; 0x80
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	4013      	ands	r3, r2
 8007346:	d018      	beq.n	800737a <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007348:	f3ef 8310 	mrs	r3, PRIMASK
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007350:	663b      	str	r3, [r7, #96]	; 0x60
 8007352:	2301      	movs	r3, #1
 8007354:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	f383 8810 	msr	PRIMASK, r3
}
 800735c:	46c0      	nop			; (mov r8, r8)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4952      	ldr	r1, [pc, #328]	; (80074b4 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800736a:	400a      	ands	r2, r1
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	f383 8810 	msr	PRIMASK, r3
}
 8007378:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800737e:	2b01      	cmp	r3, #1
 8007380:	d12f      	bne.n	80073e2 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007388:	f3ef 8310 	mrs	r3, PRIMASK
 800738c:	623b      	str	r3, [r7, #32]
  return(result);
 800738e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007392:	2301      	movs	r3, #1
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	f383 8810 	msr	PRIMASK, r3
}
 800739c:	46c0      	nop			; (mov r8, r8)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2110      	movs	r1, #16
 80073aa:	438a      	bics	r2, r1
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	f383 8810 	msr	PRIMASK, r3
}
 80073b8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	2210      	movs	r2, #16
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d103      	bne.n	80073d0 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2210      	movs	r2, #16
 80073ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	225c      	movs	r2, #92	; 0x5c
 80073d4:	5a9a      	ldrh	r2, [r3, r2]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	0011      	movs	r1, r2
 80073da:	0018      	movs	r0, r3
 80073dc:	f7fe fea6 	bl	800612c <HAL_UARTEx_RxEventCallback>
 80073e0:	e003      	b.n	80073ea <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	0018      	movs	r0, r3
 80073e6:	f7f9 ff79 	bl	80012dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073ea:	236e      	movs	r3, #110	; 0x6e
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <UART_RxISR_8BIT_FIFOEN+0x27e>
 80073f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073f6:	2220      	movs	r2, #32
 80073f8:	4013      	ands	r3, r2
 80073fa:	d000      	beq.n	80073fe <UART_RxISR_8BIT_FIFOEN+0x27e>
 80073fc:	e6e3      	b.n	80071c6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80073fe:	205a      	movs	r0, #90	; 0x5a
 8007400:	183b      	adds	r3, r7, r0
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	215e      	movs	r1, #94	; 0x5e
 8007406:	5a52      	ldrh	r2, [r2, r1]
 8007408:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800740a:	0001      	movs	r1, r0
 800740c:	187b      	adds	r3, r7, r1
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d044      	beq.n	800749e <UART_RxISR_8BIT_FIFOEN+0x31e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2268      	movs	r2, #104	; 0x68
 8007418:	5a9b      	ldrh	r3, [r3, r2]
 800741a:	187a      	adds	r2, r7, r1
 800741c:	8812      	ldrh	r2, [r2, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d23d      	bcs.n	800749e <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007422:	f3ef 8310 	mrs	r3, PRIMASK
 8007426:	60bb      	str	r3, [r7, #8]
  return(result);
 8007428:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800742a:	657b      	str	r3, [r7, #84]	; 0x54
 800742c:	2301      	movs	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f383 8810 	msr	PRIMASK, r3
}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	491d      	ldr	r1, [pc, #116]	; (80074b8 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8007444:	400a      	ands	r2, r1
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800744a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f383 8810 	msr	PRIMASK, r3
}
 8007452:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a19      	ldr	r2, [pc, #100]	; (80074bc <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8007458:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745a:	f3ef 8310 	mrs	r3, PRIMASK
 800745e:	617b      	str	r3, [r7, #20]
  return(result);
 8007460:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007462:	653b      	str	r3, [r7, #80]	; 0x50
 8007464:	2301      	movs	r3, #1
 8007466:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	f383 8810 	msr	PRIMASK, r3
}
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2120      	movs	r1, #32
 800747c:	430a      	orrs	r2, r1
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007482:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f383 8810 	msr	PRIMASK, r3
}
 800748a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800748c:	e007      	b.n	800749e <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	699a      	ldr	r2, [r3, #24]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2108      	movs	r1, #8
 800749a:	430a      	orrs	r2, r1
 800749c:	619a      	str	r2, [r3, #24]
}
 800749e:	46c0      	nop			; (mov r8, r8)
 80074a0:	46bd      	mov	sp, r7
 80074a2:	b020      	add	sp, #128	; 0x80
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	fffffeff 	.word	0xfffffeff
 80074ac:	effffffe 	.word	0xeffffffe
 80074b0:	40008000 	.word	0x40008000
 80074b4:	fbffffff 	.word	0xfbffffff
 80074b8:	efffffff 	.word	0xefffffff
 80074bc:	08006df9 	.word	0x08006df9

080074c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b0a2      	sub	sp, #136	; 0x88
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80074c8:	2382      	movs	r3, #130	; 0x82
 80074ca:	18fb      	adds	r3, r7, r3
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	2160      	movs	r1, #96	; 0x60
 80074d0:	5a52      	ldrh	r2, [r2, r1]
 80074d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	2284      	movs	r2, #132	; 0x84
 80074dc:	18ba      	adds	r2, r7, r2
 80074de:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	228c      	movs	r2, #140	; 0x8c
 80074f4:	589b      	ldr	r3, [r3, r2]
 80074f6:	2b22      	cmp	r3, #34	; 0x22
 80074f8:	d000      	beq.n	80074fc <UART_RxISR_16BIT_FIFOEN+0x3c>
 80074fa:	e174      	b.n	80077e6 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074fc:	2376      	movs	r3, #118	; 0x76
 80074fe:	18fb      	adds	r3, r7, r3
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	2168      	movs	r1, #104	; 0x68
 8007504:	5a52      	ldrh	r2, [r2, r1]
 8007506:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007508:	e119      	b.n	800773e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007510:	2174      	movs	r1, #116	; 0x74
 8007512:	187b      	adds	r3, r7, r1
 8007514:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751a:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800751c:	187b      	adds	r3, r7, r1
 800751e:	2282      	movs	r2, #130	; 0x82
 8007520:	18ba      	adds	r2, r7, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	8812      	ldrh	r2, [r2, #0]
 8007526:	4013      	ands	r3, r2
 8007528:	b29a      	uxth	r2, r3
 800752a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800752c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007532:	1c9a      	adds	r2, r3, #2
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	225e      	movs	r2, #94	; 0x5e
 800753c:	5a9b      	ldrh	r3, [r3, r2]
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b299      	uxth	r1, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	225e      	movs	r2, #94	; 0x5e
 8007548:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	2184      	movs	r1, #132	; 0x84
 8007552:	187a      	adds	r2, r7, r1
 8007554:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007556:	187b      	adds	r3, r7, r1
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2207      	movs	r2, #7
 800755c:	4013      	ands	r3, r2
 800755e:	d04e      	beq.n	80075fe <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007560:	187b      	adds	r3, r7, r1
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2201      	movs	r2, #1
 8007566:	4013      	ands	r3, r2
 8007568:	d010      	beq.n	800758c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800756a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	4013      	ands	r3, r2
 8007572:	d00b      	beq.n	800758c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2201      	movs	r2, #1
 800757a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2290      	movs	r2, #144	; 0x90
 8007580:	589b      	ldr	r3, [r3, r2]
 8007582:	2201      	movs	r2, #1
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2190      	movs	r1, #144	; 0x90
 800758a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800758c:	2384      	movs	r3, #132	; 0x84
 800758e:	18fb      	adds	r3, r7, r3
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2202      	movs	r2, #2
 8007594:	4013      	ands	r3, r2
 8007596:	d00f      	beq.n	80075b8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8007598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800759a:	2201      	movs	r2, #1
 800759c:	4013      	ands	r3, r2
 800759e:	d00b      	beq.n	80075b8 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2202      	movs	r2, #2
 80075a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2290      	movs	r2, #144	; 0x90
 80075ac:	589b      	ldr	r3, [r3, r2]
 80075ae:	2204      	movs	r2, #4
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2190      	movs	r1, #144	; 0x90
 80075b6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075b8:	2384      	movs	r3, #132	; 0x84
 80075ba:	18fb      	adds	r3, r7, r3
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2204      	movs	r2, #4
 80075c0:	4013      	ands	r3, r2
 80075c2:	d00f      	beq.n	80075e4 <UART_RxISR_16BIT_FIFOEN+0x124>
 80075c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c6:	2201      	movs	r2, #1
 80075c8:	4013      	ands	r3, r2
 80075ca:	d00b      	beq.n	80075e4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2204      	movs	r2, #4
 80075d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2290      	movs	r2, #144	; 0x90
 80075d8:	589b      	ldr	r3, [r3, r2]
 80075da:	2202      	movs	r2, #2
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2190      	movs	r1, #144	; 0x90
 80075e2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2290      	movs	r2, #144	; 0x90
 80075e8:	589b      	ldr	r3, [r3, r2]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d007      	beq.n	80075fe <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	0018      	movs	r0, r3
 80075f2:	f7fe fd93 	bl	800611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2290      	movs	r2, #144	; 0x90
 80075fa:	2100      	movs	r1, #0
 80075fc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	225e      	movs	r2, #94	; 0x5e
 8007602:	5a9b      	ldrh	r3, [r3, r2]
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d000      	beq.n	800760c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800760a:	e098      	b.n	800773e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800760c:	f3ef 8310 	mrs	r3, PRIMASK
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007614:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007616:	2301      	movs	r3, #1
 8007618:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800761a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800761c:	f383 8810 	msr	PRIMASK, r3
}
 8007620:	46c0      	nop			; (mov r8, r8)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4974      	ldr	r1, [pc, #464]	; (8007800 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800762e:	400a      	ands	r2, r1
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007634:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007638:	f383 8810 	msr	PRIMASK, r3
}
 800763c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800763e:	f3ef 8310 	mrs	r3, PRIMASK
 8007642:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007644:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007646:	66bb      	str	r3, [r7, #104]	; 0x68
 8007648:	2301      	movs	r3, #1
 800764a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764e:	f383 8810 	msr	PRIMASK, r3
}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4969      	ldr	r1, [pc, #420]	; (8007804 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8007660:	400a      	ands	r2, r1
 8007662:	609a      	str	r2, [r3, #8]
 8007664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007666:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800766a:	f383 8810 	msr	PRIMASK, r3
}
 800766e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	228c      	movs	r2, #140	; 0x8c
 8007674:	2120      	movs	r1, #32
 8007676:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a5f      	ldr	r2, [pc, #380]	; (8007808 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d01f      	beq.n	80076ce <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	2380      	movs	r3, #128	; 0x80
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	4013      	ands	r3, r2
 800769a:	d018      	beq.n	80076ce <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800769c:	f3ef 8310 	mrs	r3, PRIMASK
 80076a0:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076a4:	667b      	str	r3, [r7, #100]	; 0x64
 80076a6:	2301      	movs	r3, #1
 80076a8:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ac:	f383 8810 	msr	PRIMASK, r3
}
 80076b0:	46c0      	nop			; (mov r8, r8)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4953      	ldr	r1, [pc, #332]	; (800780c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80076be:	400a      	ands	r2, r1
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c8:	f383 8810 	msr	PRIMASK, r3
}
 80076cc:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d12f      	bne.n	8007736 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076dc:	f3ef 8310 	mrs	r3, PRIMASK
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e4:	663b      	str	r3, [r7, #96]	; 0x60
 80076e6:	2301      	movs	r3, #1
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ec:	f383 8810 	msr	PRIMASK, r3
}
 80076f0:	46c0      	nop			; (mov r8, r8)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2110      	movs	r1, #16
 80076fe:	438a      	bics	r2, r1
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007704:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	f383 8810 	msr	PRIMASK, r3
}
 800770c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	2210      	movs	r2, #16
 8007716:	4013      	ands	r3, r2
 8007718:	2b10      	cmp	r3, #16
 800771a:	d103      	bne.n	8007724 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2210      	movs	r2, #16
 8007722:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	225c      	movs	r2, #92	; 0x5c
 8007728:	5a9a      	ldrh	r2, [r3, r2]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0011      	movs	r1, r2
 800772e:	0018      	movs	r0, r3
 8007730:	f7fe fcfc 	bl	800612c <HAL_UARTEx_RxEventCallback>
 8007734:	e003      	b.n	800773e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	0018      	movs	r0, r3
 800773a:	f7f9 fdcf 	bl	80012dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800773e:	2376      	movs	r3, #118	; 0x76
 8007740:	18fb      	adds	r3, r7, r3
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d006      	beq.n	8007756 <UART_RxISR_16BIT_FIFOEN+0x296>
 8007748:	2384      	movs	r3, #132	; 0x84
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2220      	movs	r2, #32
 8007750:	4013      	ands	r3, r2
 8007752:	d000      	beq.n	8007756 <UART_RxISR_16BIT_FIFOEN+0x296>
 8007754:	e6d9      	b.n	800750a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007756:	205e      	movs	r0, #94	; 0x5e
 8007758:	183b      	adds	r3, r7, r0
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	215e      	movs	r1, #94	; 0x5e
 800775e:	5a52      	ldrh	r2, [r2, r1]
 8007760:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007762:	0001      	movs	r1, r0
 8007764:	187b      	adds	r3, r7, r1
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d044      	beq.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x336>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2268      	movs	r2, #104	; 0x68
 8007770:	5a9b      	ldrh	r3, [r3, r2]
 8007772:	187a      	adds	r2, r7, r1
 8007774:	8812      	ldrh	r2, [r2, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d23d      	bcs.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800777a:	f3ef 8310 	mrs	r3, PRIMASK
 800777e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007780:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007782:	65bb      	str	r3, [r7, #88]	; 0x58
 8007784:	2301      	movs	r3, #1
 8007786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f383 8810 	msr	PRIMASK, r3
}
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	491d      	ldr	r1, [pc, #116]	; (8007810 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800779c:	400a      	ands	r2, r1
 800779e:	609a      	str	r2, [r3, #8]
 80077a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f383 8810 	msr	PRIMASK, r3
}
 80077aa:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a19      	ldr	r2, [pc, #100]	; (8007814 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80077b0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b2:	f3ef 8310 	mrs	r3, PRIMASK
 80077b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80077b8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077ba:	657b      	str	r3, [r7, #84]	; 0x54
 80077bc:	2301      	movs	r3, #1
 80077be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f383 8810 	msr	PRIMASK, r3
}
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2120      	movs	r1, #32
 80077d4:	430a      	orrs	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	f383 8810 	msr	PRIMASK, r3
}
 80077e2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077e4:	e007      	b.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	699a      	ldr	r2, [r3, #24]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2108      	movs	r1, #8
 80077f2:	430a      	orrs	r2, r1
 80077f4:	619a      	str	r2, [r3, #24]
}
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	46bd      	mov	sp, r7
 80077fa:	b022      	add	sp, #136	; 0x88
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	fffffeff 	.word	0xfffffeff
 8007804:	effffffe 	.word	0xeffffffe
 8007808:	40008000 	.word	0x40008000
 800780c:	fbffffff 	.word	0xfbffffff
 8007810:	efffffff 	.word	0xefffffff
 8007814:	08006fbd 	.word	0x08006fbd

08007818 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007820:	46c0      	nop			; (mov r8, r8)
 8007822:	46bd      	mov	sp, r7
 8007824:	b002      	add	sp, #8
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007830:	46c0      	nop			; (mov r8, r8)
 8007832:	46bd      	mov	sp, r7
 8007834:	b002      	add	sp, #8
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007840:	46c0      	nop			; (mov r8, r8)
 8007842:	46bd      	mov	sp, r7
 8007844:	b002      	add	sp, #8
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2284      	movs	r2, #132	; 0x84
 8007854:	5c9b      	ldrb	r3, [r3, r2]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d101      	bne.n	800785e <HAL_UARTEx_DisableFifoMode+0x16>
 800785a:	2302      	movs	r3, #2
 800785c:	e027      	b.n	80078ae <HAL_UARTEx_DisableFifoMode+0x66>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2284      	movs	r2, #132	; 0x84
 8007862:	2101      	movs	r1, #1
 8007864:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2288      	movs	r2, #136	; 0x88
 800786a:	2124      	movs	r1, #36	; 0x24
 800786c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2101      	movs	r1, #1
 8007882:	438a      	bics	r2, r1
 8007884:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4a0b      	ldr	r2, [pc, #44]	; (80078b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800788a:	4013      	ands	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2288      	movs	r2, #136	; 0x88
 80078a0:	2120      	movs	r1, #32
 80078a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2284      	movs	r2, #132	; 0x84
 80078a8:	2100      	movs	r1, #0
 80078aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	0018      	movs	r0, r3
 80078b0:	46bd      	mov	sp, r7
 80078b2:	b004      	add	sp, #16
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	dfffffff 	.word	0xdfffffff

080078bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2284      	movs	r2, #132	; 0x84
 80078ca:	5c9b      	ldrb	r3, [r3, r2]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e02e      	b.n	8007932 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2284      	movs	r2, #132	; 0x84
 80078d8:	2101      	movs	r1, #1
 80078da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2288      	movs	r2, #136	; 0x88
 80078e0:	2124      	movs	r1, #36	; 0x24
 80078e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2101      	movs	r1, #1
 80078f8:	438a      	bics	r2, r1
 80078fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	00db      	lsls	r3, r3, #3
 8007904:	08d9      	lsrs	r1, r3, #3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	0018      	movs	r0, r3
 8007914:	f000 f854 	bl	80079c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2288      	movs	r2, #136	; 0x88
 8007924:	2120      	movs	r1, #32
 8007926:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2284      	movs	r2, #132	; 0x84
 800792c:	2100      	movs	r1, #0
 800792e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	0018      	movs	r0, r3
 8007934:	46bd      	mov	sp, r7
 8007936:	b004      	add	sp, #16
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2284      	movs	r2, #132	; 0x84
 800794a:	5c9b      	ldrb	r3, [r3, r2]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007950:	2302      	movs	r3, #2
 8007952:	e02f      	b.n	80079b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2284      	movs	r2, #132	; 0x84
 8007958:	2101      	movs	r1, #1
 800795a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2288      	movs	r2, #136	; 0x88
 8007960:	2124      	movs	r1, #36	; 0x24
 8007962:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2101      	movs	r1, #1
 8007978:	438a      	bics	r2, r1
 800797a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	4a0e      	ldr	r2, [pc, #56]	; (80079bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007984:	4013      	ands	r3, r2
 8007986:	0019      	movs	r1, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	0018      	movs	r0, r3
 8007996:	f000 f813 	bl	80079c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2288      	movs	r2, #136	; 0x88
 80079a6:	2120      	movs	r1, #32
 80079a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2284      	movs	r2, #132	; 0x84
 80079ae:	2100      	movs	r1, #0
 80079b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	0018      	movs	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	b004      	add	sp, #16
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	f1ffffff 	.word	0xf1ffffff

080079c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d108      	bne.n	80079e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	226a      	movs	r2, #106	; 0x6a
 80079d4:	2101      	movs	r1, #1
 80079d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2268      	movs	r2, #104	; 0x68
 80079dc:	2101      	movs	r1, #1
 80079de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079e0:	e043      	b.n	8007a6a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079e2:	260f      	movs	r6, #15
 80079e4:	19bb      	adds	r3, r7, r6
 80079e6:	2208      	movs	r2, #8
 80079e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079ea:	200e      	movs	r0, #14
 80079ec:	183b      	adds	r3, r7, r0
 80079ee:	2208      	movs	r2, #8
 80079f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	0e5b      	lsrs	r3, r3, #25
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	240d      	movs	r4, #13
 80079fe:	193b      	adds	r3, r7, r4
 8007a00:	2107      	movs	r1, #7
 8007a02:	400a      	ands	r2, r1
 8007a04:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	0f5b      	lsrs	r3, r3, #29
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	250c      	movs	r5, #12
 8007a12:	197b      	adds	r3, r7, r5
 8007a14:	2107      	movs	r1, #7
 8007a16:	400a      	ands	r2, r1
 8007a18:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a1a:	183b      	adds	r3, r7, r0
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	197a      	adds	r2, r7, r5
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	4914      	ldr	r1, [pc, #80]	; (8007a74 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a24:	5c8a      	ldrb	r2, [r1, r2]
 8007a26:	435a      	muls	r2, r3
 8007a28:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a2a:	197b      	adds	r3, r7, r5
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	4a12      	ldr	r2, [pc, #72]	; (8007a78 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a32:	0019      	movs	r1, r3
 8007a34:	f7f8 fc02 	bl	800023c <__divsi3>
 8007a38:	0003      	movs	r3, r0
 8007a3a:	b299      	uxth	r1, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	226a      	movs	r2, #106	; 0x6a
 8007a40:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a42:	19bb      	adds	r3, r7, r6
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	193a      	adds	r2, r7, r4
 8007a48:	7812      	ldrb	r2, [r2, #0]
 8007a4a:	490a      	ldr	r1, [pc, #40]	; (8007a74 <UARTEx_SetNbDataToProcess+0xb4>)
 8007a4c:	5c8a      	ldrb	r2, [r1, r2]
 8007a4e:	435a      	muls	r2, r3
 8007a50:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a52:	193b      	adds	r3, r7, r4
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	4a08      	ldr	r2, [pc, #32]	; (8007a78 <UARTEx_SetNbDataToProcess+0xb8>)
 8007a58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a5a:	0019      	movs	r1, r3
 8007a5c:	f7f8 fbee 	bl	800023c <__divsi3>
 8007a60:	0003      	movs	r3, r0
 8007a62:	b299      	uxth	r1, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2268      	movs	r2, #104	; 0x68
 8007a68:	5299      	strh	r1, [r3, r2]
}
 8007a6a:	46c0      	nop			; (mov r8, r8)
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	b005      	add	sp, #20
 8007a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a72:	46c0      	nop			; (mov r8, r8)
 8007a74:	08008b3c 	.word	0x08008b3c
 8007a78:	08008b44 	.word	0x08008b44

08007a7c <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007a7c:	b590      	push	{r4, r7, lr}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	0002      	movs	r2, r0
 8007a84:	1dfb      	adds	r3, r7, #7
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	1dbb      	adds	r3, r7, #6
 8007a8a:	1c0a      	adds	r2, r1, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8007a8e:	1dfb      	adds	r3, r7, #7
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	4a16      	ldr	r2, [pc, #88]	; (8007aec <I2C_LCD_ExpanderWrite+0x70>)
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	18d3      	adds	r3, r2, r3
 8007a98:	3301      	adds	r3, #1
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	1dbb      	adds	r3, r7, #6
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	240f      	movs	r4, #15
 8007aa6:	193b      	adds	r3, r7, r4
 8007aa8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8007aaa:	1dfb      	adds	r3, r7, #7
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	4910      	ldr	r1, [pc, #64]	; (8007af0 <I2C_LCD_ExpanderWrite+0x74>)
 8007ab0:	0013      	movs	r3, r2
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	189b      	adds	r3, r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	18cb      	adds	r3, r1, r3
 8007aba:	3304      	adds	r3, #4
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	1dfb      	adds	r3, r7, #7
 8007ac0:	781a      	ldrb	r2, [r3, #0]
 8007ac2:	490b      	ldr	r1, [pc, #44]	; (8007af0 <I2C_LCD_ExpanderWrite+0x74>)
 8007ac4:	0013      	movs	r3, r2
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	189b      	adds	r3, r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	18cb      	adds	r3, r1, r3
 8007ace:	3308      	adds	r3, #8
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	18db      	adds	r3, r3, r3
 8007ad6:	b299      	uxth	r1, r3
 8007ad8:	193a      	adds	r2, r7, r4
 8007ada:	2364      	movs	r3, #100	; 0x64
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	2301      	movs	r3, #1
 8007ae0:	f7fb fa3a 	bl	8002f58 <HAL_I2C_Master_Transmit>
}
 8007ae4:	46c0      	nop			; (mov r8, r8)
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b005      	add	sp, #20
 8007aea:	bd90      	pop	{r4, r7, pc}
 8007aec:	200003a8 	.word	0x200003a8
 8007af0:	08008b4c 	.word	0x08008b4c

08007af4 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	0002      	movs	r2, r0
 8007afc:	1dfb      	adds	r3, r7, #7
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	1dbb      	adds	r3, r7, #6
 8007b02:	1c0a      	adds	r2, r1, #0
 8007b04:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8007b06:	1dbb      	adds	r3, r7, #6
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	1dfb      	adds	r3, r7, #7
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	0011      	movs	r1, r2
 8007b16:	0018      	movs	r0, r3
 8007b18:	f7ff ffb0 	bl	8007a7c <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8007b1c:	4b25      	ldr	r3, [pc, #148]	; (8007bb4 <I2C_LCD_EnPulse+0xc0>)
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	4b25      	ldr	r3, [pc, #148]	; (8007bb8 <I2C_LCD_EnPulse+0xc4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4925      	ldr	r1, [pc, #148]	; (8007bbc <I2C_LCD_EnPulse+0xc8>)
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f7f8 fafd 	bl	8000128 <__udivsi3>
 8007b2e:	0003      	movs	r3, r0
 8007b30:	005c      	lsls	r4, r3, #1
 8007b32:	4b21      	ldr	r3, [pc, #132]	; (8007bb8 <I2C_LCD_EnPulse+0xc4>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4921      	ldr	r1, [pc, #132]	; (8007bbc <I2C_LCD_EnPulse+0xc8>)
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f7f8 faf5 	bl	8000128 <__udivsi3>
 8007b3e:	0003      	movs	r3, r0
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	1ae3      	subs	r3, r4, r3
 8007b44:	613b      	str	r3, [r7, #16]
 8007b46:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <I2C_LCD_EnPulse+0xc0>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d8f8      	bhi.n	8007b46 <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8007b54:	1dbb      	adds	r3, r7, #6
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2204      	movs	r2, #4
 8007b5a:	4393      	bics	r3, r2
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	1dfb      	adds	r3, r7, #7
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	0011      	movs	r1, r2
 8007b64:	0018      	movs	r0, r3
 8007b66:	f7ff ff89 	bl	8007a7c <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8007b6a:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <I2C_LCD_EnPulse+0xc0>)
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <I2C_LCD_EnPulse+0xc4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4911      	ldr	r1, [pc, #68]	; (8007bbc <I2C_LCD_EnPulse+0xc8>)
 8007b76:	0018      	movs	r0, r3
 8007b78:	f7f8 fad6 	bl	8000128 <__udivsi3>
 8007b7c:	0003      	movs	r3, r0
 8007b7e:	001a      	movs	r2, r3
 8007b80:	2332      	movs	r3, #50	; 0x32
 8007b82:	4353      	muls	r3, r2
 8007b84:	001c      	movs	r4, r3
 8007b86:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <I2C_LCD_EnPulse+0xc4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	490c      	ldr	r1, [pc, #48]	; (8007bbc <I2C_LCD_EnPulse+0xc8>)
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f7f8 facb 	bl	8000128 <__udivsi3>
 8007b92:	0003      	movs	r3, r0
 8007b94:	085b      	lsrs	r3, r3, #1
 8007b96:	1ae3      	subs	r3, r4, r3
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <I2C_LCD_EnPulse+0xc0>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d8f8      	bhi.n	8007b9a <I2C_LCD_EnPulse+0xa6>
}
 8007ba8:	46c0      	nop			; (mov r8, r8)
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b007      	add	sp, #28
 8007bb0:	bd90      	pop	{r4, r7, pc}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	e000e010 	.word	0xe000e010
 8007bb8:	20000004 	.word	0x20000004
 8007bbc:	000f4240 	.word	0x000f4240

08007bc0 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	0002      	movs	r2, r0
 8007bc8:	1dfb      	adds	r3, r7, #7
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	1dbb      	adds	r3, r7, #6
 8007bce:	1c0a      	adds	r2, r1, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8007bd2:	1dbb      	adds	r3, r7, #6
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	1dfb      	adds	r3, r7, #7
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	0011      	movs	r1, r2
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f7ff ff4d 	bl	8007a7c <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8007be2:	1dbb      	adds	r3, r7, #6
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	1dfb      	adds	r3, r7, #7
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	0011      	movs	r1, r2
 8007bec:	0018      	movs	r0, r3
 8007bee:	f7ff ff81 	bl	8007af4 <I2C_LCD_EnPulse>
}
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	b002      	add	sp, #8
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8007bfa:	b590      	push	{r4, r7, lr}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	0004      	movs	r4, r0
 8007c02:	0008      	movs	r0, r1
 8007c04:	0011      	movs	r1, r2
 8007c06:	1dfb      	adds	r3, r7, #7
 8007c08:	1c22      	adds	r2, r4, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
 8007c0c:	1dbb      	adds	r3, r7, #6
 8007c0e:	1c02      	adds	r2, r0, #0
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	1d7b      	adds	r3, r7, #5
 8007c14:	1c0a      	adds	r2, r1, #0
 8007c16:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8007c18:	200f      	movs	r0, #15
 8007c1a:	183b      	adds	r3, r7, r0
 8007c1c:	1dba      	adds	r2, r7, #6
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	210f      	movs	r1, #15
 8007c22:	438a      	bics	r2, r1
 8007c24:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8007c26:	1dbb      	adds	r3, r7, #6
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	011a      	lsls	r2, r3, #4
 8007c2c:	240e      	movs	r4, #14
 8007c2e:	193b      	adds	r3, r7, r4
 8007c30:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8007c32:	183a      	adds	r2, r7, r0
 8007c34:	1d7b      	adds	r3, r7, #5
 8007c36:	7812      	ldrb	r2, [r2, #0]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	1dfb      	adds	r3, r7, #7
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	0011      	movs	r1, r2
 8007c44:	0018      	movs	r0, r3
 8007c46:	f7ff ffbb 	bl	8007bc0 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8007c4a:	193a      	adds	r2, r7, r4
 8007c4c:	1d7b      	adds	r3, r7, #5
 8007c4e:	7812      	ldrb	r2, [r2, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	1dfb      	adds	r3, r7, #7
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	0011      	movs	r1, r2
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f7ff ffaf 	bl	8007bc0 <I2C_LCD_Write4Bits>
}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b005      	add	sp, #20
 8007c68:	bd90      	pop	{r4, r7, pc}

08007c6a <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	0002      	movs	r2, r0
 8007c72:	1dfb      	adds	r3, r7, #7
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	1dbb      	adds	r3, r7, #6
 8007c78:	1c0a      	adds	r2, r1, #0
 8007c7a:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8007c7c:	1dbb      	adds	r3, r7, #6
 8007c7e:	7819      	ldrb	r1, [r3, #0]
 8007c80:	1dfb      	adds	r3, r7, #7
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2200      	movs	r2, #0
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7ff ffb7 	bl	8007bfa <I2C_LCD_Send>
}
 8007c8c:	46c0      	nop			; (mov r8, r8)
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	b002      	add	sp, #8
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	0002      	movs	r2, r0
 8007c9c:	1dfb      	adds	r3, r7, #7
 8007c9e:	701a      	strb	r2, [r3, #0]
 8007ca0:	1dbb      	adds	r3, r7, #6
 8007ca2:	1c0a      	adds	r2, r1, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8007ca6:	1dbb      	adds	r3, r7, #6
 8007ca8:	7819      	ldrb	r1, [r3, #0]
 8007caa:	1dfb      	adds	r3, r7, #7
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f7ff ffa2 	bl	8007bfa <I2C_LCD_Send>
}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	b002      	add	sp, #8
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b08b      	sub	sp, #44	; 0x2c
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	0002      	movs	r2, r0
 8007cc8:	1dfb      	adds	r3, r7, #7
 8007cca:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8007ccc:	46c0      	nop			; (mov r8, r8)
 8007cce:	f7f9 fea1 	bl	8001a14 <HAL_GetTick>
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	2b31      	cmp	r3, #49	; 0x31
 8007cd6:	d9fa      	bls.n	8007cce <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007cd8:	1dfb      	adds	r3, r7, #7
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2130      	movs	r1, #48	; 0x30
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f7ff ffc3 	bl	8007c6a <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce8:	e025      	b.n	8007d36 <I2C_LCD_Init+0x76>
 8007cea:	4b57      	ldr	r3, [pc, #348]	; (8007e48 <I2C_LCD_Init+0x188>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	4b56      	ldr	r3, [pc, #344]	; (8007e4c <I2C_LCD_Init+0x18c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4956      	ldr	r1, [pc, #344]	; (8007e50 <I2C_LCD_Init+0x190>)
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	f7f8 fa16 	bl	8000128 <__udivsi3>
 8007cfc:	0003      	movs	r3, r0
 8007cfe:	001a      	movs	r2, r3
 8007d00:	0013      	movs	r3, r2
 8007d02:	015b      	lsls	r3, r3, #5
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	189b      	adds	r3, r3, r2
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	001c      	movs	r4, r3
 8007d0e:	4b4f      	ldr	r3, [pc, #316]	; (8007e4c <I2C_LCD_Init+0x18c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	494f      	ldr	r1, [pc, #316]	; (8007e50 <I2C_LCD_Init+0x190>)
 8007d14:	0018      	movs	r0, r3
 8007d16:	f7f8 fa07 	bl	8000128 <__udivsi3>
 8007d1a:	0003      	movs	r3, r0
 8007d1c:	085b      	lsrs	r3, r3, #1
 8007d1e:	1ae3      	subs	r3, r4, r3
 8007d20:	60bb      	str	r3, [r7, #8]
 8007d22:	4b49      	ldr	r3, [pc, #292]	; (8007e48 <I2C_LCD_Init+0x188>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d8f8      	bhi.n	8007d22 <I2C_LCD_Init+0x62>
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	3301      	adds	r3, #1
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d9d6      	bls.n	8007cea <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007d3c:	1dfb      	adds	r3, r7, #7
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2130      	movs	r1, #48	; 0x30
 8007d42:	0018      	movs	r0, r3
 8007d44:	f7ff ff91 	bl	8007c6a <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8007d48:	2300      	movs	r3, #0
 8007d4a:	623b      	str	r3, [r7, #32]
 8007d4c:	e025      	b.n	8007d9a <I2C_LCD_Init+0xda>
 8007d4e:	4b3e      	ldr	r3, [pc, #248]	; (8007e48 <I2C_LCD_Init+0x188>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	4b3d      	ldr	r3, [pc, #244]	; (8007e4c <I2C_LCD_Init+0x18c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	493d      	ldr	r1, [pc, #244]	; (8007e50 <I2C_LCD_Init+0x190>)
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f7f8 f9e4 	bl	8000128 <__udivsi3>
 8007d60:	0003      	movs	r3, r0
 8007d62:	001a      	movs	r2, r3
 8007d64:	0013      	movs	r3, r2
 8007d66:	015b      	lsls	r3, r3, #5
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	189b      	adds	r3, r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	001c      	movs	r4, r3
 8007d72:	4b36      	ldr	r3, [pc, #216]	; (8007e4c <I2C_LCD_Init+0x18c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4936      	ldr	r1, [pc, #216]	; (8007e50 <I2C_LCD_Init+0x190>)
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7f8 f9d5 	bl	8000128 <__udivsi3>
 8007d7e:	0003      	movs	r3, r0
 8007d80:	085b      	lsrs	r3, r3, #1
 8007d82:	1ae3      	subs	r3, r4, r3
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	4b30      	ldr	r3, [pc, #192]	; (8007e48 <I2C_LCD_Init+0x188>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d8f8      	bhi.n	8007d86 <I2C_LCD_Init+0xc6>
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	3301      	adds	r3, #1
 8007d98:	623b      	str	r3, [r7, #32]
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d9d6      	bls.n	8007d4e <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007da0:	1dfb      	adds	r3, r7, #7
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2130      	movs	r1, #48	; 0x30
 8007da6:	0018      	movs	r0, r3
 8007da8:	f7ff ff5f 	bl	8007c6a <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8007dac:	4b26      	ldr	r3, [pc, #152]	; (8007e48 <I2C_LCD_Init+0x188>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	61fb      	str	r3, [r7, #28]
 8007db2:	4b26      	ldr	r3, [pc, #152]	; (8007e4c <I2C_LCD_Init+0x18c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4926      	ldr	r1, [pc, #152]	; (8007e50 <I2C_LCD_Init+0x190>)
 8007db8:	0018      	movs	r0, r3
 8007dba:	f7f8 f9b5 	bl	8000128 <__udivsi3>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	001a      	movs	r2, r3
 8007dc2:	2396      	movs	r3, #150	; 0x96
 8007dc4:	4353      	muls	r3, r2
 8007dc6:	001c      	movs	r4, r3
 8007dc8:	4b20      	ldr	r3, [pc, #128]	; (8007e4c <I2C_LCD_Init+0x18c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4920      	ldr	r1, [pc, #128]	; (8007e50 <I2C_LCD_Init+0x190>)
 8007dce:	0018      	movs	r0, r3
 8007dd0:	f7f8 f9aa 	bl	8000128 <__udivsi3>
 8007dd4:	0003      	movs	r3, r0
 8007dd6:	085b      	lsrs	r3, r3, #1
 8007dd8:	1ae3      	subs	r3, r4, r3
 8007dda:	61bb      	str	r3, [r7, #24]
 8007ddc:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <I2C_LCD_Init+0x188>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d8f8      	bhi.n	8007ddc <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8007dea:	1dfb      	adds	r3, r7, #7
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2102      	movs	r1, #2
 8007df0:	0018      	movs	r0, r3
 8007df2:	f7ff ff3a 	bl	8007c6a <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8007df6:	1dfb      	adds	r3, r7, #7
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2128      	movs	r1, #40	; 0x28
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f7ff ff34 	bl	8007c6a <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8007e02:	1dfb      	adds	r3, r7, #7
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	210c      	movs	r1, #12
 8007e08:	0018      	movs	r0, r3
 8007e0a:	f7ff ff2e 	bl	8007c6a <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8007e0e:	1dfb      	adds	r3, r7, #7
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2106      	movs	r1, #6
 8007e14:	0018      	movs	r0, r3
 8007e16:	f7ff ff28 	bl	8007c6a <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8007e1a:	1dfb      	adds	r3, r7, #7
 8007e1c:	781a      	ldrb	r2, [r3, #0]
 8007e1e:	4b0d      	ldr	r3, [pc, #52]	; (8007e54 <I2C_LCD_Init+0x194>)
 8007e20:	0052      	lsls	r2, r2, #1
 8007e22:	2104      	movs	r1, #4
 8007e24:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8007e26:	1dfb      	adds	r3, r7, #7
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	4a0a      	ldr	r2, [pc, #40]	; (8007e54 <I2C_LCD_Init+0x194>)
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	18d3      	adds	r3, r2, r3
 8007e30:	3301      	adds	r3, #1
 8007e32:	2208      	movs	r2, #8
 8007e34:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8007e36:	1dfb      	adds	r3, r7, #7
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f000 f80c 	bl	8007e58 <I2C_LCD_Clear>
}
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b00b      	add	sp, #44	; 0x2c
 8007e46:	bd90      	pop	{r4, r7, pc}
 8007e48:	e000e010 	.word	0xe000e010
 8007e4c:	20000004 	.word	0x20000004
 8007e50:	000f4240 	.word	0x000f4240
 8007e54:	200003a8 	.word	0x200003a8

08007e58 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	0002      	movs	r2, r0
 8007e60:	1dfb      	adds	r3, r7, #7
 8007e62:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8007e64:	1dfb      	adds	r3, r7, #7
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2101      	movs	r1, #1
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f7ff fefd 	bl	8007c6a <I2C_LCD_Cmd>
    DELAY_MS(2);
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e025      	b.n	8007ec2 <I2C_LCD_Clear+0x6a>
 8007e76:	4b17      	ldr	r3, [pc, #92]	; (8007ed4 <I2C_LCD_Clear+0x7c>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	613b      	str	r3, [r7, #16]
 8007e7c:	4b16      	ldr	r3, [pc, #88]	; (8007ed8 <I2C_LCD_Clear+0x80>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4916      	ldr	r1, [pc, #88]	; (8007edc <I2C_LCD_Clear+0x84>)
 8007e82:	0018      	movs	r0, r3
 8007e84:	f7f8 f950 	bl	8000128 <__udivsi3>
 8007e88:	0003      	movs	r3, r0
 8007e8a:	001a      	movs	r2, r3
 8007e8c:	0013      	movs	r3, r2
 8007e8e:	015b      	lsls	r3, r3, #5
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	189b      	adds	r3, r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	001c      	movs	r4, r3
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <I2C_LCD_Clear+0x80>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	490f      	ldr	r1, [pc, #60]	; (8007edc <I2C_LCD_Clear+0x84>)
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	f7f8 f941 	bl	8000128 <__udivsi3>
 8007ea6:	0003      	movs	r3, r0
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	1ae3      	subs	r3, r4, r3
 8007eac:	60fb      	str	r3, [r7, #12]
 8007eae:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <I2C_LCD_Clear+0x7c>)
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d8f8      	bhi.n	8007eae <I2C_LCD_Clear+0x56>
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d9d6      	bls.n	8007e76 <I2C_LCD_Clear+0x1e>
}
 8007ec8:	46c0      	nop			; (mov r8, r8)
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b007      	add	sp, #28
 8007ed0:	bd90      	pop	{r4, r7, pc}
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	e000e010 	.word	0xe000e010
 8007ed8:	20000004 	.word	0x20000004
 8007edc:	000f4240 	.word	0x000f4240

08007ee0 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8007ee0:	b590      	push	{r4, r7, lr}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	0004      	movs	r4, r0
 8007ee8:	0008      	movs	r0, r1
 8007eea:	0011      	movs	r1, r2
 8007eec:	1dfb      	adds	r3, r7, #7
 8007eee:	1c22      	adds	r2, r4, #0
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	1dbb      	adds	r3, r7, #6
 8007ef4:	1c02      	adds	r2, r0, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
 8007ef8:	1d7b      	adds	r3, r7, #5
 8007efa:	1c0a      	adds	r2, r1, #0
 8007efc:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8007efe:	2308      	movs	r3, #8
 8007f00:	18fb      	adds	r3, r7, r3
 8007f02:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <I2C_LCD_SetCursor+0x98>)
 8007f04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007f06:	c313      	stmia	r3!, {r0, r1, r4}
 8007f08:	6812      	ldr	r2, [r2, #0]
 8007f0a:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8007f0c:	1dfb      	adds	r3, r7, #7
 8007f0e:	781a      	ldrb	r2, [r3, #0]
 8007f10:	491a      	ldr	r1, [pc, #104]	; (8007f7c <I2C_LCD_SetCursor+0x9c>)
 8007f12:	0013      	movs	r3, r2
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	189b      	adds	r3, r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	18cb      	adds	r3, r1, r3
 8007f1c:	330a      	adds	r3, #10
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	1d7a      	adds	r2, r7, #5
 8007f22:	7812      	ldrb	r2, [r2, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d90c      	bls.n	8007f42 <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8007f28:	1dfb      	adds	r3, r7, #7
 8007f2a:	781a      	ldrb	r2, [r3, #0]
 8007f2c:	4913      	ldr	r1, [pc, #76]	; (8007f7c <I2C_LCD_SetCursor+0x9c>)
 8007f2e:	0013      	movs	r3, r2
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	189b      	adds	r3, r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	18cb      	adds	r3, r1, r3
 8007f38:	330a      	adds	r3, #10
 8007f3a:	781a      	ldrb	r2, [r3, #0]
 8007f3c:	1d7b      	adds	r3, r7, #5
 8007f3e:	3a01      	subs	r2, #1
 8007f40:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8007f42:	1d7b      	adds	r3, r7, #5
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	2308      	movs	r3, #8
 8007f48:	18fb      	adds	r3, r7, r3
 8007f4a:	0092      	lsls	r2, r2, #2
 8007f4c:	58d3      	ldr	r3, [r2, r3]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	1dbb      	adds	r3, r7, #6
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	18d3      	adds	r3, r2, r3
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	b25b      	sxtb	r3, r3
 8007f5a:	2280      	movs	r2, #128	; 0x80
 8007f5c:	4252      	negs	r2, r2
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	b25b      	sxtb	r3, r3
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	1dfb      	adds	r3, r7, #7
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	0011      	movs	r1, r2
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f7ff fe7d 	bl	8007c6a <I2C_LCD_Cmd>
}
 8007f70:	46c0      	nop			; (mov r8, r8)
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b007      	add	sp, #28
 8007f76:	bd90      	pop	{r4, r7, pc}
 8007f78:	08008a60 	.word	0x08008a60
 8007f7c:	08008b4c 	.word	0x08008b4c

08007f80 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	0002      	movs	r2, r0
 8007f88:	6039      	str	r1, [r7, #0]
 8007f8a:	1dfb      	adds	r3, r7, #7
 8007f8c:	701a      	strb	r2, [r3, #0]
    while (*Str)
 8007f8e:	e009      	b.n	8007fa4 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	1c5a      	adds	r2, r3, #1
 8007f94:	603a      	str	r2, [r7, #0]
 8007f96:	781a      	ldrb	r2, [r3, #0]
 8007f98:	1dfb      	adds	r3, r7, #7
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	0011      	movs	r1, r2
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f7ff fe78 	bl	8007c94 <I2C_LCD_Data>
    while (*Str)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1f1      	bne.n	8007f90 <I2C_LCD_WriteString+0x10>
    }
}
 8007fac:	46c0      	nop			; (mov r8, r8)
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	b002      	add	sp, #8
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <siprintf>:
 8007fb8:	b40e      	push	{r1, r2, r3}
 8007fba:	b500      	push	{lr}
 8007fbc:	490b      	ldr	r1, [pc, #44]	; (8007fec <siprintf+0x34>)
 8007fbe:	b09c      	sub	sp, #112	; 0x70
 8007fc0:	ab1d      	add	r3, sp, #116	; 0x74
 8007fc2:	9002      	str	r0, [sp, #8]
 8007fc4:	9006      	str	r0, [sp, #24]
 8007fc6:	9107      	str	r1, [sp, #28]
 8007fc8:	9104      	str	r1, [sp, #16]
 8007fca:	4809      	ldr	r0, [pc, #36]	; (8007ff0 <siprintf+0x38>)
 8007fcc:	4909      	ldr	r1, [pc, #36]	; (8007ff4 <siprintf+0x3c>)
 8007fce:	cb04      	ldmia	r3!, {r2}
 8007fd0:	9105      	str	r1, [sp, #20]
 8007fd2:	6800      	ldr	r0, [r0, #0]
 8007fd4:	a902      	add	r1, sp, #8
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	f000 f9a2 	bl	8008320 <_svfiprintf_r>
 8007fdc:	2200      	movs	r2, #0
 8007fde:	9b02      	ldr	r3, [sp, #8]
 8007fe0:	701a      	strb	r2, [r3, #0]
 8007fe2:	b01c      	add	sp, #112	; 0x70
 8007fe4:	bc08      	pop	{r3}
 8007fe6:	b003      	add	sp, #12
 8007fe8:	4718      	bx	r3
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	7fffffff 	.word	0x7fffffff
 8007ff0:	2000005c 	.word	0x2000005c
 8007ff4:	ffff0208 	.word	0xffff0208

08007ff8 <memset>:
 8007ff8:	0003      	movs	r3, r0
 8007ffa:	1882      	adds	r2, r0, r2
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d100      	bne.n	8008002 <memset+0xa>
 8008000:	4770      	bx	lr
 8008002:	7019      	strb	r1, [r3, #0]
 8008004:	3301      	adds	r3, #1
 8008006:	e7f9      	b.n	8007ffc <memset+0x4>

08008008 <__errno>:
 8008008:	4b01      	ldr	r3, [pc, #4]	; (8008010 <__errno+0x8>)
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	4770      	bx	lr
 800800e:	46c0      	nop			; (mov r8, r8)
 8008010:	2000005c 	.word	0x2000005c

08008014 <__libc_init_array>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	2600      	movs	r6, #0
 8008018:	4c0c      	ldr	r4, [pc, #48]	; (800804c <__libc_init_array+0x38>)
 800801a:	4d0d      	ldr	r5, [pc, #52]	; (8008050 <__libc_init_array+0x3c>)
 800801c:	1b64      	subs	r4, r4, r5
 800801e:	10a4      	asrs	r4, r4, #2
 8008020:	42a6      	cmp	r6, r4
 8008022:	d109      	bne.n	8008038 <__libc_init_array+0x24>
 8008024:	2600      	movs	r6, #0
 8008026:	f000 fc6d 	bl	8008904 <_init>
 800802a:	4c0a      	ldr	r4, [pc, #40]	; (8008054 <__libc_init_array+0x40>)
 800802c:	4d0a      	ldr	r5, [pc, #40]	; (8008058 <__libc_init_array+0x44>)
 800802e:	1b64      	subs	r4, r4, r5
 8008030:	10a4      	asrs	r4, r4, #2
 8008032:	42a6      	cmp	r6, r4
 8008034:	d105      	bne.n	8008042 <__libc_init_array+0x2e>
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	00b3      	lsls	r3, r6, #2
 800803a:	58eb      	ldr	r3, [r5, r3]
 800803c:	4798      	blx	r3
 800803e:	3601      	adds	r6, #1
 8008040:	e7ee      	b.n	8008020 <__libc_init_array+0xc>
 8008042:	00b3      	lsls	r3, r6, #2
 8008044:	58eb      	ldr	r3, [r5, r3]
 8008046:	4798      	blx	r3
 8008048:	3601      	adds	r6, #1
 800804a:	e7f2      	b.n	8008032 <__libc_init_array+0x1e>
 800804c:	08008b94 	.word	0x08008b94
 8008050:	08008b94 	.word	0x08008b94
 8008054:	08008b98 	.word	0x08008b98
 8008058:	08008b94 	.word	0x08008b94

0800805c <__retarget_lock_acquire_recursive>:
 800805c:	4770      	bx	lr

0800805e <__retarget_lock_release_recursive>:
 800805e:	4770      	bx	lr

08008060 <_free_r>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	0005      	movs	r5, r0
 8008064:	2900      	cmp	r1, #0
 8008066:	d010      	beq.n	800808a <_free_r+0x2a>
 8008068:	1f0c      	subs	r4, r1, #4
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	da00      	bge.n	8008072 <_free_r+0x12>
 8008070:	18e4      	adds	r4, r4, r3
 8008072:	0028      	movs	r0, r5
 8008074:	f000 f8e2 	bl	800823c <__malloc_lock>
 8008078:	4a1d      	ldr	r2, [pc, #116]	; (80080f0 <_free_r+0x90>)
 800807a:	6813      	ldr	r3, [r2, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d105      	bne.n	800808c <_free_r+0x2c>
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	6014      	str	r4, [r2, #0]
 8008084:	0028      	movs	r0, r5
 8008086:	f000 f8e1 	bl	800824c <__malloc_unlock>
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	42a3      	cmp	r3, r4
 800808e:	d908      	bls.n	80080a2 <_free_r+0x42>
 8008090:	6820      	ldr	r0, [r4, #0]
 8008092:	1821      	adds	r1, r4, r0
 8008094:	428b      	cmp	r3, r1
 8008096:	d1f3      	bne.n	8008080 <_free_r+0x20>
 8008098:	6819      	ldr	r1, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	1809      	adds	r1, r1, r0
 800809e:	6021      	str	r1, [r4, #0]
 80080a0:	e7ee      	b.n	8008080 <_free_r+0x20>
 80080a2:	001a      	movs	r2, r3
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <_free_r+0x4e>
 80080aa:	42a3      	cmp	r3, r4
 80080ac:	d9f9      	bls.n	80080a2 <_free_r+0x42>
 80080ae:	6811      	ldr	r1, [r2, #0]
 80080b0:	1850      	adds	r0, r2, r1
 80080b2:	42a0      	cmp	r0, r4
 80080b4:	d10b      	bne.n	80080ce <_free_r+0x6e>
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	1809      	adds	r1, r1, r0
 80080ba:	1850      	adds	r0, r2, r1
 80080bc:	6011      	str	r1, [r2, #0]
 80080be:	4283      	cmp	r3, r0
 80080c0:	d1e0      	bne.n	8008084 <_free_r+0x24>
 80080c2:	6818      	ldr	r0, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	1841      	adds	r1, r0, r1
 80080c8:	6011      	str	r1, [r2, #0]
 80080ca:	6053      	str	r3, [r2, #4]
 80080cc:	e7da      	b.n	8008084 <_free_r+0x24>
 80080ce:	42a0      	cmp	r0, r4
 80080d0:	d902      	bls.n	80080d8 <_free_r+0x78>
 80080d2:	230c      	movs	r3, #12
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	e7d5      	b.n	8008084 <_free_r+0x24>
 80080d8:	6820      	ldr	r0, [r4, #0]
 80080da:	1821      	adds	r1, r4, r0
 80080dc:	428b      	cmp	r3, r1
 80080de:	d103      	bne.n	80080e8 <_free_r+0x88>
 80080e0:	6819      	ldr	r1, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	1809      	adds	r1, r1, r0
 80080e6:	6021      	str	r1, [r4, #0]
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	6054      	str	r4, [r2, #4]
 80080ec:	e7ca      	b.n	8008084 <_free_r+0x24>
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	200004ec 	.word	0x200004ec

080080f4 <sbrk_aligned>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	4e0f      	ldr	r6, [pc, #60]	; (8008134 <sbrk_aligned+0x40>)
 80080f8:	000d      	movs	r5, r1
 80080fa:	6831      	ldr	r1, [r6, #0]
 80080fc:	0004      	movs	r4, r0
 80080fe:	2900      	cmp	r1, #0
 8008100:	d102      	bne.n	8008108 <sbrk_aligned+0x14>
 8008102:	f000 fba1 	bl	8008848 <_sbrk_r>
 8008106:	6030      	str	r0, [r6, #0]
 8008108:	0029      	movs	r1, r5
 800810a:	0020      	movs	r0, r4
 800810c:	f000 fb9c 	bl	8008848 <_sbrk_r>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d00a      	beq.n	800812a <sbrk_aligned+0x36>
 8008114:	2303      	movs	r3, #3
 8008116:	1cc5      	adds	r5, r0, #3
 8008118:	439d      	bics	r5, r3
 800811a:	42a8      	cmp	r0, r5
 800811c:	d007      	beq.n	800812e <sbrk_aligned+0x3a>
 800811e:	1a29      	subs	r1, r5, r0
 8008120:	0020      	movs	r0, r4
 8008122:	f000 fb91 	bl	8008848 <_sbrk_r>
 8008126:	3001      	adds	r0, #1
 8008128:	d101      	bne.n	800812e <sbrk_aligned+0x3a>
 800812a:	2501      	movs	r5, #1
 800812c:	426d      	negs	r5, r5
 800812e:	0028      	movs	r0, r5
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	46c0      	nop			; (mov r8, r8)
 8008134:	200004f0 	.word	0x200004f0

08008138 <_malloc_r>:
 8008138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800813a:	2203      	movs	r2, #3
 800813c:	1ccb      	adds	r3, r1, #3
 800813e:	4393      	bics	r3, r2
 8008140:	3308      	adds	r3, #8
 8008142:	0006      	movs	r6, r0
 8008144:	001f      	movs	r7, r3
 8008146:	2b0c      	cmp	r3, #12
 8008148:	d238      	bcs.n	80081bc <_malloc_r+0x84>
 800814a:	270c      	movs	r7, #12
 800814c:	42b9      	cmp	r1, r7
 800814e:	d837      	bhi.n	80081c0 <_malloc_r+0x88>
 8008150:	0030      	movs	r0, r6
 8008152:	f000 f873 	bl	800823c <__malloc_lock>
 8008156:	4b38      	ldr	r3, [pc, #224]	; (8008238 <_malloc_r+0x100>)
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	001c      	movs	r4, r3
 800815e:	2c00      	cmp	r4, #0
 8008160:	d133      	bne.n	80081ca <_malloc_r+0x92>
 8008162:	0039      	movs	r1, r7
 8008164:	0030      	movs	r0, r6
 8008166:	f7ff ffc5 	bl	80080f4 <sbrk_aligned>
 800816a:	0004      	movs	r4, r0
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	d15e      	bne.n	800822e <_malloc_r+0xf6>
 8008170:	9b00      	ldr	r3, [sp, #0]
 8008172:	681c      	ldr	r4, [r3, #0]
 8008174:	0025      	movs	r5, r4
 8008176:	2d00      	cmp	r5, #0
 8008178:	d14e      	bne.n	8008218 <_malloc_r+0xe0>
 800817a:	2c00      	cmp	r4, #0
 800817c:	d051      	beq.n	8008222 <_malloc_r+0xea>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	0029      	movs	r1, r5
 8008182:	18e3      	adds	r3, r4, r3
 8008184:	0030      	movs	r0, r6
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	f000 fb5e 	bl	8008848 <_sbrk_r>
 800818c:	9b01      	ldr	r3, [sp, #4]
 800818e:	4283      	cmp	r3, r0
 8008190:	d147      	bne.n	8008222 <_malloc_r+0xea>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	0030      	movs	r0, r6
 8008196:	1aff      	subs	r7, r7, r3
 8008198:	0039      	movs	r1, r7
 800819a:	f7ff ffab 	bl	80080f4 <sbrk_aligned>
 800819e:	3001      	adds	r0, #1
 80081a0:	d03f      	beq.n	8008222 <_malloc_r+0xea>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	19db      	adds	r3, r3, r7
 80081a6:	6023      	str	r3, [r4, #0]
 80081a8:	9b00      	ldr	r3, [sp, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d040      	beq.n	8008232 <_malloc_r+0xfa>
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	42a2      	cmp	r2, r4
 80081b4:	d133      	bne.n	800821e <_malloc_r+0xe6>
 80081b6:	2200      	movs	r2, #0
 80081b8:	605a      	str	r2, [r3, #4]
 80081ba:	e014      	b.n	80081e6 <_malloc_r+0xae>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dac5      	bge.n	800814c <_malloc_r+0x14>
 80081c0:	230c      	movs	r3, #12
 80081c2:	2500      	movs	r5, #0
 80081c4:	6033      	str	r3, [r6, #0]
 80081c6:	0028      	movs	r0, r5
 80081c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081ca:	6821      	ldr	r1, [r4, #0]
 80081cc:	1bc9      	subs	r1, r1, r7
 80081ce:	d420      	bmi.n	8008212 <_malloc_r+0xda>
 80081d0:	290b      	cmp	r1, #11
 80081d2:	d918      	bls.n	8008206 <_malloc_r+0xce>
 80081d4:	19e2      	adds	r2, r4, r7
 80081d6:	6027      	str	r7, [r4, #0]
 80081d8:	42a3      	cmp	r3, r4
 80081da:	d112      	bne.n	8008202 <_malloc_r+0xca>
 80081dc:	9b00      	ldr	r3, [sp, #0]
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	6863      	ldr	r3, [r4, #4]
 80081e2:	6011      	str	r1, [r2, #0]
 80081e4:	6053      	str	r3, [r2, #4]
 80081e6:	0030      	movs	r0, r6
 80081e8:	0025      	movs	r5, r4
 80081ea:	f000 f82f 	bl	800824c <__malloc_unlock>
 80081ee:	2207      	movs	r2, #7
 80081f0:	350b      	adds	r5, #11
 80081f2:	1d23      	adds	r3, r4, #4
 80081f4:	4395      	bics	r5, r2
 80081f6:	1aea      	subs	r2, r5, r3
 80081f8:	429d      	cmp	r5, r3
 80081fa:	d0e4      	beq.n	80081c6 <_malloc_r+0x8e>
 80081fc:	1b5b      	subs	r3, r3, r5
 80081fe:	50a3      	str	r3, [r4, r2]
 8008200:	e7e1      	b.n	80081c6 <_malloc_r+0x8e>
 8008202:	605a      	str	r2, [r3, #4]
 8008204:	e7ec      	b.n	80081e0 <_malloc_r+0xa8>
 8008206:	6862      	ldr	r2, [r4, #4]
 8008208:	42a3      	cmp	r3, r4
 800820a:	d1d5      	bne.n	80081b8 <_malloc_r+0x80>
 800820c:	9b00      	ldr	r3, [sp, #0]
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	e7e9      	b.n	80081e6 <_malloc_r+0xae>
 8008212:	0023      	movs	r3, r4
 8008214:	6864      	ldr	r4, [r4, #4]
 8008216:	e7a2      	b.n	800815e <_malloc_r+0x26>
 8008218:	002c      	movs	r4, r5
 800821a:	686d      	ldr	r5, [r5, #4]
 800821c:	e7ab      	b.n	8008176 <_malloc_r+0x3e>
 800821e:	0013      	movs	r3, r2
 8008220:	e7c4      	b.n	80081ac <_malloc_r+0x74>
 8008222:	230c      	movs	r3, #12
 8008224:	0030      	movs	r0, r6
 8008226:	6033      	str	r3, [r6, #0]
 8008228:	f000 f810 	bl	800824c <__malloc_unlock>
 800822c:	e7cb      	b.n	80081c6 <_malloc_r+0x8e>
 800822e:	6027      	str	r7, [r4, #0]
 8008230:	e7d9      	b.n	80081e6 <_malloc_r+0xae>
 8008232:	605b      	str	r3, [r3, #4]
 8008234:	deff      	udf	#255	; 0xff
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	200004ec 	.word	0x200004ec

0800823c <__malloc_lock>:
 800823c:	b510      	push	{r4, lr}
 800823e:	4802      	ldr	r0, [pc, #8]	; (8008248 <__malloc_lock+0xc>)
 8008240:	f7ff ff0c 	bl	800805c <__retarget_lock_acquire_recursive>
 8008244:	bd10      	pop	{r4, pc}
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	200004e8 	.word	0x200004e8

0800824c <__malloc_unlock>:
 800824c:	b510      	push	{r4, lr}
 800824e:	4802      	ldr	r0, [pc, #8]	; (8008258 <__malloc_unlock+0xc>)
 8008250:	f7ff ff05 	bl	800805e <__retarget_lock_release_recursive>
 8008254:	bd10      	pop	{r4, pc}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	200004e8 	.word	0x200004e8

0800825c <__ssputs_r>:
 800825c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800825e:	b085      	sub	sp, #20
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	9203      	str	r2, [sp, #12]
 8008264:	688e      	ldr	r6, [r1, #8]
 8008266:	9a01      	ldr	r2, [sp, #4]
 8008268:	0007      	movs	r7, r0
 800826a:	000c      	movs	r4, r1
 800826c:	680b      	ldr	r3, [r1, #0]
 800826e:	4296      	cmp	r6, r2
 8008270:	d831      	bhi.n	80082d6 <__ssputs_r+0x7a>
 8008272:	898a      	ldrh	r2, [r1, #12]
 8008274:	2190      	movs	r1, #144	; 0x90
 8008276:	00c9      	lsls	r1, r1, #3
 8008278:	420a      	tst	r2, r1
 800827a:	d029      	beq.n	80082d0 <__ssputs_r+0x74>
 800827c:	2003      	movs	r0, #3
 800827e:	6921      	ldr	r1, [r4, #16]
 8008280:	1a5b      	subs	r3, r3, r1
 8008282:	9302      	str	r3, [sp, #8]
 8008284:	6963      	ldr	r3, [r4, #20]
 8008286:	4343      	muls	r3, r0
 8008288:	0fdd      	lsrs	r5, r3, #31
 800828a:	18ed      	adds	r5, r5, r3
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	9802      	ldr	r0, [sp, #8]
 8008290:	3301      	adds	r3, #1
 8008292:	181b      	adds	r3, r3, r0
 8008294:	106d      	asrs	r5, r5, #1
 8008296:	42ab      	cmp	r3, r5
 8008298:	d900      	bls.n	800829c <__ssputs_r+0x40>
 800829a:	001d      	movs	r5, r3
 800829c:	0552      	lsls	r2, r2, #21
 800829e:	d529      	bpl.n	80082f4 <__ssputs_r+0x98>
 80082a0:	0029      	movs	r1, r5
 80082a2:	0038      	movs	r0, r7
 80082a4:	f7ff ff48 	bl	8008138 <_malloc_r>
 80082a8:	1e06      	subs	r6, r0, #0
 80082aa:	d02d      	beq.n	8008308 <__ssputs_r+0xac>
 80082ac:	9a02      	ldr	r2, [sp, #8]
 80082ae:	6921      	ldr	r1, [r4, #16]
 80082b0:	f000 fae7 	bl	8008882 <memcpy>
 80082b4:	89a2      	ldrh	r2, [r4, #12]
 80082b6:	4b19      	ldr	r3, [pc, #100]	; (800831c <__ssputs_r+0xc0>)
 80082b8:	401a      	ands	r2, r3
 80082ba:	2380      	movs	r3, #128	; 0x80
 80082bc:	4313      	orrs	r3, r2
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	9b02      	ldr	r3, [sp, #8]
 80082c2:	6126      	str	r6, [r4, #16]
 80082c4:	18f6      	adds	r6, r6, r3
 80082c6:	6026      	str	r6, [r4, #0]
 80082c8:	6165      	str	r5, [r4, #20]
 80082ca:	9e01      	ldr	r6, [sp, #4]
 80082cc:	1aed      	subs	r5, r5, r3
 80082ce:	60a5      	str	r5, [r4, #8]
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	429e      	cmp	r6, r3
 80082d4:	d900      	bls.n	80082d8 <__ssputs_r+0x7c>
 80082d6:	9e01      	ldr	r6, [sp, #4]
 80082d8:	0032      	movs	r2, r6
 80082da:	9903      	ldr	r1, [sp, #12]
 80082dc:	6820      	ldr	r0, [r4, #0]
 80082de:	f000 fa9f 	bl	8008820 <memmove>
 80082e2:	2000      	movs	r0, #0
 80082e4:	68a3      	ldr	r3, [r4, #8]
 80082e6:	1b9b      	subs	r3, r3, r6
 80082e8:	60a3      	str	r3, [r4, #8]
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	199b      	adds	r3, r3, r6
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	b005      	add	sp, #20
 80082f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f4:	002a      	movs	r2, r5
 80082f6:	0038      	movs	r0, r7
 80082f8:	f000 facc 	bl	8008894 <_realloc_r>
 80082fc:	1e06      	subs	r6, r0, #0
 80082fe:	d1df      	bne.n	80082c0 <__ssputs_r+0x64>
 8008300:	0038      	movs	r0, r7
 8008302:	6921      	ldr	r1, [r4, #16]
 8008304:	f7ff feac 	bl	8008060 <_free_r>
 8008308:	230c      	movs	r3, #12
 800830a:	2001      	movs	r0, #1
 800830c:	603b      	str	r3, [r7, #0]
 800830e:	89a2      	ldrh	r2, [r4, #12]
 8008310:	3334      	adds	r3, #52	; 0x34
 8008312:	4313      	orrs	r3, r2
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	4240      	negs	r0, r0
 8008318:	e7ea      	b.n	80082f0 <__ssputs_r+0x94>
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	fffffb7f 	.word	0xfffffb7f

08008320 <_svfiprintf_r>:
 8008320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008322:	b0a1      	sub	sp, #132	; 0x84
 8008324:	9003      	str	r0, [sp, #12]
 8008326:	001d      	movs	r5, r3
 8008328:	898b      	ldrh	r3, [r1, #12]
 800832a:	000f      	movs	r7, r1
 800832c:	0016      	movs	r6, r2
 800832e:	061b      	lsls	r3, r3, #24
 8008330:	d511      	bpl.n	8008356 <_svfiprintf_r+0x36>
 8008332:	690b      	ldr	r3, [r1, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10e      	bne.n	8008356 <_svfiprintf_r+0x36>
 8008338:	2140      	movs	r1, #64	; 0x40
 800833a:	f7ff fefd 	bl	8008138 <_malloc_r>
 800833e:	6038      	str	r0, [r7, #0]
 8008340:	6138      	str	r0, [r7, #16]
 8008342:	2800      	cmp	r0, #0
 8008344:	d105      	bne.n	8008352 <_svfiprintf_r+0x32>
 8008346:	230c      	movs	r3, #12
 8008348:	9a03      	ldr	r2, [sp, #12]
 800834a:	3801      	subs	r0, #1
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	b021      	add	sp, #132	; 0x84
 8008350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008352:	2340      	movs	r3, #64	; 0x40
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	2300      	movs	r3, #0
 8008358:	ac08      	add	r4, sp, #32
 800835a:	6163      	str	r3, [r4, #20]
 800835c:	3320      	adds	r3, #32
 800835e:	7663      	strb	r3, [r4, #25]
 8008360:	3310      	adds	r3, #16
 8008362:	76a3      	strb	r3, [r4, #26]
 8008364:	9507      	str	r5, [sp, #28]
 8008366:	0035      	movs	r5, r6
 8008368:	782b      	ldrb	r3, [r5, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <_svfiprintf_r+0x52>
 800836e:	2b25      	cmp	r3, #37	; 0x25
 8008370:	d148      	bne.n	8008404 <_svfiprintf_r+0xe4>
 8008372:	1bab      	subs	r3, r5, r6
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	42b5      	cmp	r5, r6
 8008378:	d00b      	beq.n	8008392 <_svfiprintf_r+0x72>
 800837a:	0032      	movs	r2, r6
 800837c:	0039      	movs	r1, r7
 800837e:	9803      	ldr	r0, [sp, #12]
 8008380:	f7ff ff6c 	bl	800825c <__ssputs_r>
 8008384:	3001      	adds	r0, #1
 8008386:	d100      	bne.n	800838a <_svfiprintf_r+0x6a>
 8008388:	e0af      	b.n	80084ea <_svfiprintf_r+0x1ca>
 800838a:	6963      	ldr	r3, [r4, #20]
 800838c:	9a05      	ldr	r2, [sp, #20]
 800838e:	189b      	adds	r3, r3, r2
 8008390:	6163      	str	r3, [r4, #20]
 8008392:	782b      	ldrb	r3, [r5, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d100      	bne.n	800839a <_svfiprintf_r+0x7a>
 8008398:	e0a7      	b.n	80084ea <_svfiprintf_r+0x1ca>
 800839a:	2201      	movs	r2, #1
 800839c:	2300      	movs	r3, #0
 800839e:	4252      	negs	r2, r2
 80083a0:	6062      	str	r2, [r4, #4]
 80083a2:	a904      	add	r1, sp, #16
 80083a4:	3254      	adds	r2, #84	; 0x54
 80083a6:	1852      	adds	r2, r2, r1
 80083a8:	1c6e      	adds	r6, r5, #1
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	60e3      	str	r3, [r4, #12]
 80083ae:	60a3      	str	r3, [r4, #8]
 80083b0:	7013      	strb	r3, [r2, #0]
 80083b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80083b4:	4b55      	ldr	r3, [pc, #340]	; (800850c <_svfiprintf_r+0x1ec>)
 80083b6:	2205      	movs	r2, #5
 80083b8:	0018      	movs	r0, r3
 80083ba:	7831      	ldrb	r1, [r6, #0]
 80083bc:	9305      	str	r3, [sp, #20]
 80083be:	f000 fa55 	bl	800886c <memchr>
 80083c2:	1c75      	adds	r5, r6, #1
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d11f      	bne.n	8008408 <_svfiprintf_r+0xe8>
 80083c8:	6822      	ldr	r2, [r4, #0]
 80083ca:	06d3      	lsls	r3, r2, #27
 80083cc:	d504      	bpl.n	80083d8 <_svfiprintf_r+0xb8>
 80083ce:	2353      	movs	r3, #83	; 0x53
 80083d0:	a904      	add	r1, sp, #16
 80083d2:	185b      	adds	r3, r3, r1
 80083d4:	2120      	movs	r1, #32
 80083d6:	7019      	strb	r1, [r3, #0]
 80083d8:	0713      	lsls	r3, r2, #28
 80083da:	d504      	bpl.n	80083e6 <_svfiprintf_r+0xc6>
 80083dc:	2353      	movs	r3, #83	; 0x53
 80083de:	a904      	add	r1, sp, #16
 80083e0:	185b      	adds	r3, r3, r1
 80083e2:	212b      	movs	r1, #43	; 0x2b
 80083e4:	7019      	strb	r1, [r3, #0]
 80083e6:	7833      	ldrb	r3, [r6, #0]
 80083e8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ea:	d016      	beq.n	800841a <_svfiprintf_r+0xfa>
 80083ec:	0035      	movs	r5, r6
 80083ee:	2100      	movs	r1, #0
 80083f0:	200a      	movs	r0, #10
 80083f2:	68e3      	ldr	r3, [r4, #12]
 80083f4:	782a      	ldrb	r2, [r5, #0]
 80083f6:	1c6e      	adds	r6, r5, #1
 80083f8:	3a30      	subs	r2, #48	; 0x30
 80083fa:	2a09      	cmp	r2, #9
 80083fc:	d94e      	bls.n	800849c <_svfiprintf_r+0x17c>
 80083fe:	2900      	cmp	r1, #0
 8008400:	d111      	bne.n	8008426 <_svfiprintf_r+0x106>
 8008402:	e017      	b.n	8008434 <_svfiprintf_r+0x114>
 8008404:	3501      	adds	r5, #1
 8008406:	e7af      	b.n	8008368 <_svfiprintf_r+0x48>
 8008408:	9b05      	ldr	r3, [sp, #20]
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	1ac0      	subs	r0, r0, r3
 800840e:	2301      	movs	r3, #1
 8008410:	4083      	lsls	r3, r0
 8008412:	4313      	orrs	r3, r2
 8008414:	002e      	movs	r6, r5
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	e7cc      	b.n	80083b4 <_svfiprintf_r+0x94>
 800841a:	9b07      	ldr	r3, [sp, #28]
 800841c:	1d19      	adds	r1, r3, #4
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	9107      	str	r1, [sp, #28]
 8008422:	2b00      	cmp	r3, #0
 8008424:	db01      	blt.n	800842a <_svfiprintf_r+0x10a>
 8008426:	930b      	str	r3, [sp, #44]	; 0x2c
 8008428:	e004      	b.n	8008434 <_svfiprintf_r+0x114>
 800842a:	425b      	negs	r3, r3
 800842c:	60e3      	str	r3, [r4, #12]
 800842e:	2302      	movs	r3, #2
 8008430:	4313      	orrs	r3, r2
 8008432:	6023      	str	r3, [r4, #0]
 8008434:	782b      	ldrb	r3, [r5, #0]
 8008436:	2b2e      	cmp	r3, #46	; 0x2e
 8008438:	d10a      	bne.n	8008450 <_svfiprintf_r+0x130>
 800843a:	786b      	ldrb	r3, [r5, #1]
 800843c:	2b2a      	cmp	r3, #42	; 0x2a
 800843e:	d135      	bne.n	80084ac <_svfiprintf_r+0x18c>
 8008440:	9b07      	ldr	r3, [sp, #28]
 8008442:	3502      	adds	r5, #2
 8008444:	1d1a      	adds	r2, r3, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	9207      	str	r2, [sp, #28]
 800844a:	2b00      	cmp	r3, #0
 800844c:	db2b      	blt.n	80084a6 <_svfiprintf_r+0x186>
 800844e:	9309      	str	r3, [sp, #36]	; 0x24
 8008450:	4e2f      	ldr	r6, [pc, #188]	; (8008510 <_svfiprintf_r+0x1f0>)
 8008452:	2203      	movs	r2, #3
 8008454:	0030      	movs	r0, r6
 8008456:	7829      	ldrb	r1, [r5, #0]
 8008458:	f000 fa08 	bl	800886c <memchr>
 800845c:	2800      	cmp	r0, #0
 800845e:	d006      	beq.n	800846e <_svfiprintf_r+0x14e>
 8008460:	2340      	movs	r3, #64	; 0x40
 8008462:	1b80      	subs	r0, r0, r6
 8008464:	4083      	lsls	r3, r0
 8008466:	6822      	ldr	r2, [r4, #0]
 8008468:	3501      	adds	r5, #1
 800846a:	4313      	orrs	r3, r2
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	7829      	ldrb	r1, [r5, #0]
 8008470:	2206      	movs	r2, #6
 8008472:	4828      	ldr	r0, [pc, #160]	; (8008514 <_svfiprintf_r+0x1f4>)
 8008474:	1c6e      	adds	r6, r5, #1
 8008476:	7621      	strb	r1, [r4, #24]
 8008478:	f000 f9f8 	bl	800886c <memchr>
 800847c:	2800      	cmp	r0, #0
 800847e:	d03c      	beq.n	80084fa <_svfiprintf_r+0x1da>
 8008480:	4b25      	ldr	r3, [pc, #148]	; (8008518 <_svfiprintf_r+0x1f8>)
 8008482:	2b00      	cmp	r3, #0
 8008484:	d125      	bne.n	80084d2 <_svfiprintf_r+0x1b2>
 8008486:	2207      	movs	r2, #7
 8008488:	9b07      	ldr	r3, [sp, #28]
 800848a:	3307      	adds	r3, #7
 800848c:	4393      	bics	r3, r2
 800848e:	3308      	adds	r3, #8
 8008490:	9307      	str	r3, [sp, #28]
 8008492:	6963      	ldr	r3, [r4, #20]
 8008494:	9a04      	ldr	r2, [sp, #16]
 8008496:	189b      	adds	r3, r3, r2
 8008498:	6163      	str	r3, [r4, #20]
 800849a:	e764      	b.n	8008366 <_svfiprintf_r+0x46>
 800849c:	4343      	muls	r3, r0
 800849e:	0035      	movs	r5, r6
 80084a0:	2101      	movs	r1, #1
 80084a2:	189b      	adds	r3, r3, r2
 80084a4:	e7a6      	b.n	80083f4 <_svfiprintf_r+0xd4>
 80084a6:	2301      	movs	r3, #1
 80084a8:	425b      	negs	r3, r3
 80084aa:	e7d0      	b.n	800844e <_svfiprintf_r+0x12e>
 80084ac:	2300      	movs	r3, #0
 80084ae:	200a      	movs	r0, #10
 80084b0:	001a      	movs	r2, r3
 80084b2:	3501      	adds	r5, #1
 80084b4:	6063      	str	r3, [r4, #4]
 80084b6:	7829      	ldrb	r1, [r5, #0]
 80084b8:	1c6e      	adds	r6, r5, #1
 80084ba:	3930      	subs	r1, #48	; 0x30
 80084bc:	2909      	cmp	r1, #9
 80084be:	d903      	bls.n	80084c8 <_svfiprintf_r+0x1a8>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0c5      	beq.n	8008450 <_svfiprintf_r+0x130>
 80084c4:	9209      	str	r2, [sp, #36]	; 0x24
 80084c6:	e7c3      	b.n	8008450 <_svfiprintf_r+0x130>
 80084c8:	4342      	muls	r2, r0
 80084ca:	0035      	movs	r5, r6
 80084cc:	2301      	movs	r3, #1
 80084ce:	1852      	adds	r2, r2, r1
 80084d0:	e7f1      	b.n	80084b6 <_svfiprintf_r+0x196>
 80084d2:	aa07      	add	r2, sp, #28
 80084d4:	9200      	str	r2, [sp, #0]
 80084d6:	0021      	movs	r1, r4
 80084d8:	003a      	movs	r2, r7
 80084da:	4b10      	ldr	r3, [pc, #64]	; (800851c <_svfiprintf_r+0x1fc>)
 80084dc:	9803      	ldr	r0, [sp, #12]
 80084de:	e000      	b.n	80084e2 <_svfiprintf_r+0x1c2>
 80084e0:	bf00      	nop
 80084e2:	9004      	str	r0, [sp, #16]
 80084e4:	9b04      	ldr	r3, [sp, #16]
 80084e6:	3301      	adds	r3, #1
 80084e8:	d1d3      	bne.n	8008492 <_svfiprintf_r+0x172>
 80084ea:	89bb      	ldrh	r3, [r7, #12]
 80084ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80084ee:	065b      	lsls	r3, r3, #25
 80084f0:	d400      	bmi.n	80084f4 <_svfiprintf_r+0x1d4>
 80084f2:	e72c      	b.n	800834e <_svfiprintf_r+0x2e>
 80084f4:	2001      	movs	r0, #1
 80084f6:	4240      	negs	r0, r0
 80084f8:	e729      	b.n	800834e <_svfiprintf_r+0x2e>
 80084fa:	aa07      	add	r2, sp, #28
 80084fc:	9200      	str	r2, [sp, #0]
 80084fe:	0021      	movs	r1, r4
 8008500:	003a      	movs	r2, r7
 8008502:	4b06      	ldr	r3, [pc, #24]	; (800851c <_svfiprintf_r+0x1fc>)
 8008504:	9803      	ldr	r0, [sp, #12]
 8008506:	f000 f87b 	bl	8008600 <_printf_i>
 800850a:	e7ea      	b.n	80084e2 <_svfiprintf_r+0x1c2>
 800850c:	08008b58 	.word	0x08008b58
 8008510:	08008b5e 	.word	0x08008b5e
 8008514:	08008b62 	.word	0x08008b62
 8008518:	00000000 	.word	0x00000000
 800851c:	0800825d 	.word	0x0800825d

08008520 <_printf_common>:
 8008520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008522:	0016      	movs	r6, r2
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	688a      	ldr	r2, [r1, #8]
 8008528:	690b      	ldr	r3, [r1, #16]
 800852a:	000c      	movs	r4, r1
 800852c:	9000      	str	r0, [sp, #0]
 800852e:	4293      	cmp	r3, r2
 8008530:	da00      	bge.n	8008534 <_printf_common+0x14>
 8008532:	0013      	movs	r3, r2
 8008534:	0022      	movs	r2, r4
 8008536:	6033      	str	r3, [r6, #0]
 8008538:	3243      	adds	r2, #67	; 0x43
 800853a:	7812      	ldrb	r2, [r2, #0]
 800853c:	2a00      	cmp	r2, #0
 800853e:	d001      	beq.n	8008544 <_printf_common+0x24>
 8008540:	3301      	adds	r3, #1
 8008542:	6033      	str	r3, [r6, #0]
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	069b      	lsls	r3, r3, #26
 8008548:	d502      	bpl.n	8008550 <_printf_common+0x30>
 800854a:	6833      	ldr	r3, [r6, #0]
 800854c:	3302      	adds	r3, #2
 800854e:	6033      	str	r3, [r6, #0]
 8008550:	6822      	ldr	r2, [r4, #0]
 8008552:	2306      	movs	r3, #6
 8008554:	0015      	movs	r5, r2
 8008556:	401d      	ands	r5, r3
 8008558:	421a      	tst	r2, r3
 800855a:	d027      	beq.n	80085ac <_printf_common+0x8c>
 800855c:	0023      	movs	r3, r4
 800855e:	3343      	adds	r3, #67	; 0x43
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	1e5a      	subs	r2, r3, #1
 8008564:	4193      	sbcs	r3, r2
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	0692      	lsls	r2, r2, #26
 800856a:	d430      	bmi.n	80085ce <_printf_common+0xae>
 800856c:	0022      	movs	r2, r4
 800856e:	9901      	ldr	r1, [sp, #4]
 8008570:	9800      	ldr	r0, [sp, #0]
 8008572:	9d08      	ldr	r5, [sp, #32]
 8008574:	3243      	adds	r2, #67	; 0x43
 8008576:	47a8      	blx	r5
 8008578:	3001      	adds	r0, #1
 800857a:	d025      	beq.n	80085c8 <_printf_common+0xa8>
 800857c:	2206      	movs	r2, #6
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	2500      	movs	r5, #0
 8008582:	4013      	ands	r3, r2
 8008584:	2b04      	cmp	r3, #4
 8008586:	d105      	bne.n	8008594 <_printf_common+0x74>
 8008588:	6833      	ldr	r3, [r6, #0]
 800858a:	68e5      	ldr	r5, [r4, #12]
 800858c:	1aed      	subs	r5, r5, r3
 800858e:	43eb      	mvns	r3, r5
 8008590:	17db      	asrs	r3, r3, #31
 8008592:	401d      	ands	r5, r3
 8008594:	68a3      	ldr	r3, [r4, #8]
 8008596:	6922      	ldr	r2, [r4, #16]
 8008598:	4293      	cmp	r3, r2
 800859a:	dd01      	ble.n	80085a0 <_printf_common+0x80>
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	18ed      	adds	r5, r5, r3
 80085a0:	2600      	movs	r6, #0
 80085a2:	42b5      	cmp	r5, r6
 80085a4:	d120      	bne.n	80085e8 <_printf_common+0xc8>
 80085a6:	2000      	movs	r0, #0
 80085a8:	e010      	b.n	80085cc <_printf_common+0xac>
 80085aa:	3501      	adds	r5, #1
 80085ac:	68e3      	ldr	r3, [r4, #12]
 80085ae:	6832      	ldr	r2, [r6, #0]
 80085b0:	1a9b      	subs	r3, r3, r2
 80085b2:	42ab      	cmp	r3, r5
 80085b4:	ddd2      	ble.n	800855c <_printf_common+0x3c>
 80085b6:	0022      	movs	r2, r4
 80085b8:	2301      	movs	r3, #1
 80085ba:	9901      	ldr	r1, [sp, #4]
 80085bc:	9800      	ldr	r0, [sp, #0]
 80085be:	9f08      	ldr	r7, [sp, #32]
 80085c0:	3219      	adds	r2, #25
 80085c2:	47b8      	blx	r7
 80085c4:	3001      	adds	r0, #1
 80085c6:	d1f0      	bne.n	80085aa <_printf_common+0x8a>
 80085c8:	2001      	movs	r0, #1
 80085ca:	4240      	negs	r0, r0
 80085cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085ce:	2030      	movs	r0, #48	; 0x30
 80085d0:	18e1      	adds	r1, r4, r3
 80085d2:	3143      	adds	r1, #67	; 0x43
 80085d4:	7008      	strb	r0, [r1, #0]
 80085d6:	0021      	movs	r1, r4
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	3145      	adds	r1, #69	; 0x45
 80085dc:	7809      	ldrb	r1, [r1, #0]
 80085de:	18a2      	adds	r2, r4, r2
 80085e0:	3243      	adds	r2, #67	; 0x43
 80085e2:	3302      	adds	r3, #2
 80085e4:	7011      	strb	r1, [r2, #0]
 80085e6:	e7c1      	b.n	800856c <_printf_common+0x4c>
 80085e8:	0022      	movs	r2, r4
 80085ea:	2301      	movs	r3, #1
 80085ec:	9901      	ldr	r1, [sp, #4]
 80085ee:	9800      	ldr	r0, [sp, #0]
 80085f0:	9f08      	ldr	r7, [sp, #32]
 80085f2:	321a      	adds	r2, #26
 80085f4:	47b8      	blx	r7
 80085f6:	3001      	adds	r0, #1
 80085f8:	d0e6      	beq.n	80085c8 <_printf_common+0xa8>
 80085fa:	3601      	adds	r6, #1
 80085fc:	e7d1      	b.n	80085a2 <_printf_common+0x82>
	...

08008600 <_printf_i>:
 8008600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008602:	b08b      	sub	sp, #44	; 0x2c
 8008604:	9206      	str	r2, [sp, #24]
 8008606:	000a      	movs	r2, r1
 8008608:	3243      	adds	r2, #67	; 0x43
 800860a:	9307      	str	r3, [sp, #28]
 800860c:	9005      	str	r0, [sp, #20]
 800860e:	9204      	str	r2, [sp, #16]
 8008610:	7e0a      	ldrb	r2, [r1, #24]
 8008612:	000c      	movs	r4, r1
 8008614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008616:	2a78      	cmp	r2, #120	; 0x78
 8008618:	d809      	bhi.n	800862e <_printf_i+0x2e>
 800861a:	2a62      	cmp	r2, #98	; 0x62
 800861c:	d80b      	bhi.n	8008636 <_printf_i+0x36>
 800861e:	2a00      	cmp	r2, #0
 8008620:	d100      	bne.n	8008624 <_printf_i+0x24>
 8008622:	e0be      	b.n	80087a2 <_printf_i+0x1a2>
 8008624:	497c      	ldr	r1, [pc, #496]	; (8008818 <_printf_i+0x218>)
 8008626:	9103      	str	r1, [sp, #12]
 8008628:	2a58      	cmp	r2, #88	; 0x58
 800862a:	d100      	bne.n	800862e <_printf_i+0x2e>
 800862c:	e093      	b.n	8008756 <_printf_i+0x156>
 800862e:	0026      	movs	r6, r4
 8008630:	3642      	adds	r6, #66	; 0x42
 8008632:	7032      	strb	r2, [r6, #0]
 8008634:	e022      	b.n	800867c <_printf_i+0x7c>
 8008636:	0010      	movs	r0, r2
 8008638:	3863      	subs	r0, #99	; 0x63
 800863a:	2815      	cmp	r0, #21
 800863c:	d8f7      	bhi.n	800862e <_printf_i+0x2e>
 800863e:	f7f7 fd69 	bl	8000114 <__gnu_thumb1_case_shi>
 8008642:	0016      	.short	0x0016
 8008644:	fff6001f 	.word	0xfff6001f
 8008648:	fff6fff6 	.word	0xfff6fff6
 800864c:	001ffff6 	.word	0x001ffff6
 8008650:	fff6fff6 	.word	0xfff6fff6
 8008654:	fff6fff6 	.word	0xfff6fff6
 8008658:	003600a3 	.word	0x003600a3
 800865c:	fff60083 	.word	0xfff60083
 8008660:	00b4fff6 	.word	0x00b4fff6
 8008664:	0036fff6 	.word	0x0036fff6
 8008668:	fff6fff6 	.word	0xfff6fff6
 800866c:	0087      	.short	0x0087
 800866e:	0026      	movs	r6, r4
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	3642      	adds	r6, #66	; 0x42
 8008674:	1d11      	adds	r1, r2, #4
 8008676:	6019      	str	r1, [r3, #0]
 8008678:	6813      	ldr	r3, [r2, #0]
 800867a:	7033      	strb	r3, [r6, #0]
 800867c:	2301      	movs	r3, #1
 800867e:	e0a2      	b.n	80087c6 <_printf_i+0x1c6>
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	6809      	ldr	r1, [r1, #0]
 8008684:	1d02      	adds	r2, r0, #4
 8008686:	060d      	lsls	r5, r1, #24
 8008688:	d50b      	bpl.n	80086a2 <_printf_i+0xa2>
 800868a:	6805      	ldr	r5, [r0, #0]
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	2d00      	cmp	r5, #0
 8008690:	da03      	bge.n	800869a <_printf_i+0x9a>
 8008692:	232d      	movs	r3, #45	; 0x2d
 8008694:	9a04      	ldr	r2, [sp, #16]
 8008696:	426d      	negs	r5, r5
 8008698:	7013      	strb	r3, [r2, #0]
 800869a:	4b5f      	ldr	r3, [pc, #380]	; (8008818 <_printf_i+0x218>)
 800869c:	270a      	movs	r7, #10
 800869e:	9303      	str	r3, [sp, #12]
 80086a0:	e01b      	b.n	80086da <_printf_i+0xda>
 80086a2:	6805      	ldr	r5, [r0, #0]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	0649      	lsls	r1, r1, #25
 80086a8:	d5f1      	bpl.n	800868e <_printf_i+0x8e>
 80086aa:	b22d      	sxth	r5, r5
 80086ac:	e7ef      	b.n	800868e <_printf_i+0x8e>
 80086ae:	680d      	ldr	r5, [r1, #0]
 80086b0:	6819      	ldr	r1, [r3, #0]
 80086b2:	1d08      	adds	r0, r1, #4
 80086b4:	6018      	str	r0, [r3, #0]
 80086b6:	062e      	lsls	r6, r5, #24
 80086b8:	d501      	bpl.n	80086be <_printf_i+0xbe>
 80086ba:	680d      	ldr	r5, [r1, #0]
 80086bc:	e003      	b.n	80086c6 <_printf_i+0xc6>
 80086be:	066d      	lsls	r5, r5, #25
 80086c0:	d5fb      	bpl.n	80086ba <_printf_i+0xba>
 80086c2:	680d      	ldr	r5, [r1, #0]
 80086c4:	b2ad      	uxth	r5, r5
 80086c6:	4b54      	ldr	r3, [pc, #336]	; (8008818 <_printf_i+0x218>)
 80086c8:	2708      	movs	r7, #8
 80086ca:	9303      	str	r3, [sp, #12]
 80086cc:	2a6f      	cmp	r2, #111	; 0x6f
 80086ce:	d000      	beq.n	80086d2 <_printf_i+0xd2>
 80086d0:	3702      	adds	r7, #2
 80086d2:	0023      	movs	r3, r4
 80086d4:	2200      	movs	r2, #0
 80086d6:	3343      	adds	r3, #67	; 0x43
 80086d8:	701a      	strb	r2, [r3, #0]
 80086da:	6863      	ldr	r3, [r4, #4]
 80086dc:	60a3      	str	r3, [r4, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	db03      	blt.n	80086ea <_printf_i+0xea>
 80086e2:	2104      	movs	r1, #4
 80086e4:	6822      	ldr	r2, [r4, #0]
 80086e6:	438a      	bics	r2, r1
 80086e8:	6022      	str	r2, [r4, #0]
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	d102      	bne.n	80086f4 <_printf_i+0xf4>
 80086ee:	9e04      	ldr	r6, [sp, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00c      	beq.n	800870e <_printf_i+0x10e>
 80086f4:	9e04      	ldr	r6, [sp, #16]
 80086f6:	0028      	movs	r0, r5
 80086f8:	0039      	movs	r1, r7
 80086fa:	f7f7 fd9b 	bl	8000234 <__aeabi_uidivmod>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	3e01      	subs	r6, #1
 8008702:	5c5b      	ldrb	r3, [r3, r1]
 8008704:	7033      	strb	r3, [r6, #0]
 8008706:	002b      	movs	r3, r5
 8008708:	0005      	movs	r5, r0
 800870a:	429f      	cmp	r7, r3
 800870c:	d9f3      	bls.n	80086f6 <_printf_i+0xf6>
 800870e:	2f08      	cmp	r7, #8
 8008710:	d109      	bne.n	8008726 <_printf_i+0x126>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	07db      	lsls	r3, r3, #31
 8008716:	d506      	bpl.n	8008726 <_printf_i+0x126>
 8008718:	6862      	ldr	r2, [r4, #4]
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	429a      	cmp	r2, r3
 800871e:	dc02      	bgt.n	8008726 <_printf_i+0x126>
 8008720:	2330      	movs	r3, #48	; 0x30
 8008722:	3e01      	subs	r6, #1
 8008724:	7033      	strb	r3, [r6, #0]
 8008726:	9b04      	ldr	r3, [sp, #16]
 8008728:	1b9b      	subs	r3, r3, r6
 800872a:	6123      	str	r3, [r4, #16]
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	0021      	movs	r1, r4
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	9805      	ldr	r0, [sp, #20]
 8008734:	9b06      	ldr	r3, [sp, #24]
 8008736:	aa09      	add	r2, sp, #36	; 0x24
 8008738:	f7ff fef2 	bl	8008520 <_printf_common>
 800873c:	3001      	adds	r0, #1
 800873e:	d147      	bne.n	80087d0 <_printf_i+0x1d0>
 8008740:	2001      	movs	r0, #1
 8008742:	4240      	negs	r0, r0
 8008744:	b00b      	add	sp, #44	; 0x2c
 8008746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008748:	2220      	movs	r2, #32
 800874a:	6809      	ldr	r1, [r1, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	6022      	str	r2, [r4, #0]
 8008750:	2278      	movs	r2, #120	; 0x78
 8008752:	4932      	ldr	r1, [pc, #200]	; (800881c <_printf_i+0x21c>)
 8008754:	9103      	str	r1, [sp, #12]
 8008756:	0021      	movs	r1, r4
 8008758:	3145      	adds	r1, #69	; 0x45
 800875a:	700a      	strb	r2, [r1, #0]
 800875c:	6819      	ldr	r1, [r3, #0]
 800875e:	6822      	ldr	r2, [r4, #0]
 8008760:	c920      	ldmia	r1!, {r5}
 8008762:	0610      	lsls	r0, r2, #24
 8008764:	d402      	bmi.n	800876c <_printf_i+0x16c>
 8008766:	0650      	lsls	r0, r2, #25
 8008768:	d500      	bpl.n	800876c <_printf_i+0x16c>
 800876a:	b2ad      	uxth	r5, r5
 800876c:	6019      	str	r1, [r3, #0]
 800876e:	07d3      	lsls	r3, r2, #31
 8008770:	d502      	bpl.n	8008778 <_printf_i+0x178>
 8008772:	2320      	movs	r3, #32
 8008774:	4313      	orrs	r3, r2
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	2710      	movs	r7, #16
 800877a:	2d00      	cmp	r5, #0
 800877c:	d1a9      	bne.n	80086d2 <_printf_i+0xd2>
 800877e:	2220      	movs	r2, #32
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	4393      	bics	r3, r2
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	e7a4      	b.n	80086d2 <_printf_i+0xd2>
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	680d      	ldr	r5, [r1, #0]
 800878c:	1d10      	adds	r0, r2, #4
 800878e:	6949      	ldr	r1, [r1, #20]
 8008790:	6018      	str	r0, [r3, #0]
 8008792:	6813      	ldr	r3, [r2, #0]
 8008794:	062e      	lsls	r6, r5, #24
 8008796:	d501      	bpl.n	800879c <_printf_i+0x19c>
 8008798:	6019      	str	r1, [r3, #0]
 800879a:	e002      	b.n	80087a2 <_printf_i+0x1a2>
 800879c:	066d      	lsls	r5, r5, #25
 800879e:	d5fb      	bpl.n	8008798 <_printf_i+0x198>
 80087a0:	8019      	strh	r1, [r3, #0]
 80087a2:	2300      	movs	r3, #0
 80087a4:	9e04      	ldr	r6, [sp, #16]
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	e7c0      	b.n	800872c <_printf_i+0x12c>
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	1d11      	adds	r1, r2, #4
 80087ae:	6019      	str	r1, [r3, #0]
 80087b0:	6816      	ldr	r6, [r2, #0]
 80087b2:	2100      	movs	r1, #0
 80087b4:	0030      	movs	r0, r6
 80087b6:	6862      	ldr	r2, [r4, #4]
 80087b8:	f000 f858 	bl	800886c <memchr>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d001      	beq.n	80087c4 <_printf_i+0x1c4>
 80087c0:	1b80      	subs	r0, r0, r6
 80087c2:	6060      	str	r0, [r4, #4]
 80087c4:	6863      	ldr	r3, [r4, #4]
 80087c6:	6123      	str	r3, [r4, #16]
 80087c8:	2300      	movs	r3, #0
 80087ca:	9a04      	ldr	r2, [sp, #16]
 80087cc:	7013      	strb	r3, [r2, #0]
 80087ce:	e7ad      	b.n	800872c <_printf_i+0x12c>
 80087d0:	0032      	movs	r2, r6
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	9906      	ldr	r1, [sp, #24]
 80087d6:	9805      	ldr	r0, [sp, #20]
 80087d8:	9d07      	ldr	r5, [sp, #28]
 80087da:	47a8      	blx	r5
 80087dc:	3001      	adds	r0, #1
 80087de:	d0af      	beq.n	8008740 <_printf_i+0x140>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	079b      	lsls	r3, r3, #30
 80087e4:	d415      	bmi.n	8008812 <_printf_i+0x212>
 80087e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e8:	68e0      	ldr	r0, [r4, #12]
 80087ea:	4298      	cmp	r0, r3
 80087ec:	daaa      	bge.n	8008744 <_printf_i+0x144>
 80087ee:	0018      	movs	r0, r3
 80087f0:	e7a8      	b.n	8008744 <_printf_i+0x144>
 80087f2:	0022      	movs	r2, r4
 80087f4:	2301      	movs	r3, #1
 80087f6:	9906      	ldr	r1, [sp, #24]
 80087f8:	9805      	ldr	r0, [sp, #20]
 80087fa:	9e07      	ldr	r6, [sp, #28]
 80087fc:	3219      	adds	r2, #25
 80087fe:	47b0      	blx	r6
 8008800:	3001      	adds	r0, #1
 8008802:	d09d      	beq.n	8008740 <_printf_i+0x140>
 8008804:	3501      	adds	r5, #1
 8008806:	68e3      	ldr	r3, [r4, #12]
 8008808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	42ab      	cmp	r3, r5
 800880e:	dcf0      	bgt.n	80087f2 <_printf_i+0x1f2>
 8008810:	e7e9      	b.n	80087e6 <_printf_i+0x1e6>
 8008812:	2500      	movs	r5, #0
 8008814:	e7f7      	b.n	8008806 <_printf_i+0x206>
 8008816:	46c0      	nop			; (mov r8, r8)
 8008818:	08008b69 	.word	0x08008b69
 800881c:	08008b7a 	.word	0x08008b7a

08008820 <memmove>:
 8008820:	b510      	push	{r4, lr}
 8008822:	4288      	cmp	r0, r1
 8008824:	d902      	bls.n	800882c <memmove+0xc>
 8008826:	188b      	adds	r3, r1, r2
 8008828:	4298      	cmp	r0, r3
 800882a:	d303      	bcc.n	8008834 <memmove+0x14>
 800882c:	2300      	movs	r3, #0
 800882e:	e007      	b.n	8008840 <memmove+0x20>
 8008830:	5c8b      	ldrb	r3, [r1, r2]
 8008832:	5483      	strb	r3, [r0, r2]
 8008834:	3a01      	subs	r2, #1
 8008836:	d2fb      	bcs.n	8008830 <memmove+0x10>
 8008838:	bd10      	pop	{r4, pc}
 800883a:	5ccc      	ldrb	r4, [r1, r3]
 800883c:	54c4      	strb	r4, [r0, r3]
 800883e:	3301      	adds	r3, #1
 8008840:	429a      	cmp	r2, r3
 8008842:	d1fa      	bne.n	800883a <memmove+0x1a>
 8008844:	e7f8      	b.n	8008838 <memmove+0x18>
	...

08008848 <_sbrk_r>:
 8008848:	2300      	movs	r3, #0
 800884a:	b570      	push	{r4, r5, r6, lr}
 800884c:	4d06      	ldr	r5, [pc, #24]	; (8008868 <_sbrk_r+0x20>)
 800884e:	0004      	movs	r4, r0
 8008850:	0008      	movs	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f8 fffc 	bl	8001850 <_sbrk>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d103      	bne.n	8008864 <_sbrk_r+0x1c>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d000      	beq.n	8008864 <_sbrk_r+0x1c>
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	bd70      	pop	{r4, r5, r6, pc}
 8008866:	46c0      	nop			; (mov r8, r8)
 8008868:	200004e4 	.word	0x200004e4

0800886c <memchr>:
 800886c:	b2c9      	uxtb	r1, r1
 800886e:	1882      	adds	r2, r0, r2
 8008870:	4290      	cmp	r0, r2
 8008872:	d101      	bne.n	8008878 <memchr+0xc>
 8008874:	2000      	movs	r0, #0
 8008876:	4770      	bx	lr
 8008878:	7803      	ldrb	r3, [r0, #0]
 800887a:	428b      	cmp	r3, r1
 800887c:	d0fb      	beq.n	8008876 <memchr+0xa>
 800887e:	3001      	adds	r0, #1
 8008880:	e7f6      	b.n	8008870 <memchr+0x4>

08008882 <memcpy>:
 8008882:	2300      	movs	r3, #0
 8008884:	b510      	push	{r4, lr}
 8008886:	429a      	cmp	r2, r3
 8008888:	d100      	bne.n	800888c <memcpy+0xa>
 800888a:	bd10      	pop	{r4, pc}
 800888c:	5ccc      	ldrb	r4, [r1, r3]
 800888e:	54c4      	strb	r4, [r0, r3]
 8008890:	3301      	adds	r3, #1
 8008892:	e7f8      	b.n	8008886 <memcpy+0x4>

08008894 <_realloc_r>:
 8008894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008896:	0007      	movs	r7, r0
 8008898:	000e      	movs	r6, r1
 800889a:	0014      	movs	r4, r2
 800889c:	2900      	cmp	r1, #0
 800889e:	d105      	bne.n	80088ac <_realloc_r+0x18>
 80088a0:	0011      	movs	r1, r2
 80088a2:	f7ff fc49 	bl	8008138 <_malloc_r>
 80088a6:	0005      	movs	r5, r0
 80088a8:	0028      	movs	r0, r5
 80088aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088ac:	2a00      	cmp	r2, #0
 80088ae:	d103      	bne.n	80088b8 <_realloc_r+0x24>
 80088b0:	f7ff fbd6 	bl	8008060 <_free_r>
 80088b4:	0025      	movs	r5, r4
 80088b6:	e7f7      	b.n	80088a8 <_realloc_r+0x14>
 80088b8:	f000 f81b 	bl	80088f2 <_malloc_usable_size_r>
 80088bc:	9001      	str	r0, [sp, #4]
 80088be:	4284      	cmp	r4, r0
 80088c0:	d803      	bhi.n	80088ca <_realloc_r+0x36>
 80088c2:	0035      	movs	r5, r6
 80088c4:	0843      	lsrs	r3, r0, #1
 80088c6:	42a3      	cmp	r3, r4
 80088c8:	d3ee      	bcc.n	80088a8 <_realloc_r+0x14>
 80088ca:	0021      	movs	r1, r4
 80088cc:	0038      	movs	r0, r7
 80088ce:	f7ff fc33 	bl	8008138 <_malloc_r>
 80088d2:	1e05      	subs	r5, r0, #0
 80088d4:	d0e8      	beq.n	80088a8 <_realloc_r+0x14>
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	0022      	movs	r2, r4
 80088da:	429c      	cmp	r4, r3
 80088dc:	d900      	bls.n	80088e0 <_realloc_r+0x4c>
 80088de:	001a      	movs	r2, r3
 80088e0:	0031      	movs	r1, r6
 80088e2:	0028      	movs	r0, r5
 80088e4:	f7ff ffcd 	bl	8008882 <memcpy>
 80088e8:	0031      	movs	r1, r6
 80088ea:	0038      	movs	r0, r7
 80088ec:	f7ff fbb8 	bl	8008060 <_free_r>
 80088f0:	e7da      	b.n	80088a8 <_realloc_r+0x14>

080088f2 <_malloc_usable_size_r>:
 80088f2:	1f0b      	subs	r3, r1, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	1f18      	subs	r0, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da01      	bge.n	8008900 <_malloc_usable_size_r+0xe>
 80088fc:	580b      	ldr	r3, [r1, r0]
 80088fe:	18c0      	adds	r0, r0, r3
 8008900:	4770      	bx	lr
	...

08008904 <_init>:
 8008904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890a:	bc08      	pop	{r3}
 800890c:	469e      	mov	lr, r3
 800890e:	4770      	bx	lr

08008910 <_fini>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	46c0      	nop			; (mov r8, r8)
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr
