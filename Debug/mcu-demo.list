
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009124  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b0  080094b0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b8  080094b8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080094c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  2000006c  0800952c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800952c  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ccb  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f84  00000000  00000000  00037da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b3  00000000  00000000  0003c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b179  00000000  00000000  0003d31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0cf  00000000  00000000  00058494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aef35  00000000  00000000  00072563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005300  00000000  00000000  00121498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00126798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080091c8 	.word	0x080091c8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	080091c8 	.word	0x080091c8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_uldivmod>:
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 800042c:	2a00      	cmp	r2, #0
 800042e:	d10f      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 8000430:	2900      	cmp	r1, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_uldivmod+0xe>
 8000434:	2800      	cmp	r0, #0
 8000436:	d002      	beq.n	800043e <__aeabi_uldivmod+0x16>
 8000438:	2100      	movs	r1, #0
 800043a:	43c9      	mvns	r1, r1
 800043c:	0008      	movs	r0, r1
 800043e:	b407      	push	{r0, r1, r2}
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <__aeabi_uldivmod+0x24>)
 8000442:	a102      	add	r1, pc, #8	; (adr r1, 800044c <__aeabi_uldivmod+0x24>)
 8000444:	1840      	adds	r0, r0, r1
 8000446:	9002      	str	r0, [sp, #8]
 8000448:	bd03      	pop	{r0, r1, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	ffffffd9 	.word	0xffffffd9
 8000450:	b403      	push	{r0, r1}
 8000452:	4668      	mov	r0, sp
 8000454:	b501      	push	{r0, lr}
 8000456:	9802      	ldr	r0, [sp, #8]
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	469e      	mov	lr, r3
 8000460:	b002      	add	sp, #8
 8000462:	bc0c      	pop	{r2, r3}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__udivmoddi4>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	b5e0      	push	{r5, r6, r7, lr}
 8000474:	0004      	movs	r4, r0
 8000476:	000d      	movs	r5, r1
 8000478:	4692      	mov	sl, r2
 800047a:	4699      	mov	r9, r3
 800047c:	b083      	sub	sp, #12
 800047e:	428b      	cmp	r3, r1
 8000480:	d830      	bhi.n	80004e4 <__udivmoddi4+0x7c>
 8000482:	d02d      	beq.n	80004e0 <__udivmoddi4+0x78>
 8000484:	4649      	mov	r1, r9
 8000486:	4650      	mov	r0, sl
 8000488:	f000 f8ba 	bl	8000600 <__clzdi2>
 800048c:	0029      	movs	r1, r5
 800048e:	0006      	movs	r6, r0
 8000490:	0020      	movs	r0, r4
 8000492:	f000 f8b5 	bl	8000600 <__clzdi2>
 8000496:	1a33      	subs	r3, r6, r0
 8000498:	4698      	mov	r8, r3
 800049a:	3b20      	subs	r3, #32
 800049c:	d434      	bmi.n	8000508 <__udivmoddi4+0xa0>
 800049e:	469b      	mov	fp, r3
 80004a0:	4653      	mov	r3, sl
 80004a2:	465a      	mov	r2, fp
 80004a4:	4093      	lsls	r3, r2
 80004a6:	4642      	mov	r2, r8
 80004a8:	001f      	movs	r7, r3
 80004aa:	4653      	mov	r3, sl
 80004ac:	4093      	lsls	r3, r2
 80004ae:	001e      	movs	r6, r3
 80004b0:	42af      	cmp	r7, r5
 80004b2:	d83b      	bhi.n	800052c <__udivmoddi4+0xc4>
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d100      	bne.n	80004ba <__udivmoddi4+0x52>
 80004b8:	e079      	b.n	80005ae <__udivmoddi4+0x146>
 80004ba:	465b      	mov	r3, fp
 80004bc:	1ba4      	subs	r4, r4, r6
 80004be:	41bd      	sbcs	r5, r7
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	da00      	bge.n	80004c6 <__udivmoddi4+0x5e>
 80004c4:	e076      	b.n	80005b4 <__udivmoddi4+0x14c>
 80004c6:	2200      	movs	r2, #0
 80004c8:	2300      	movs	r3, #0
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	465a      	mov	r2, fp
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	4642      	mov	r2, r8
 80004da:	4093      	lsls	r3, r2
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	e029      	b.n	8000534 <__udivmoddi4+0xcc>
 80004e0:	4282      	cmp	r2, r0
 80004e2:	d9cf      	bls.n	8000484 <__udivmoddi4+0x1c>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2300      	movs	r3, #0
 80004e8:	9200      	str	r2, [sp, #0]
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <__udivmoddi4+0x8e>
 80004f2:	601c      	str	r4, [r3, #0]
 80004f4:	605d      	str	r5, [r3, #4]
 80004f6:	9800      	ldr	r0, [sp, #0]
 80004f8:	9901      	ldr	r1, [sp, #4]
 80004fa:	b003      	add	sp, #12
 80004fc:	bcf0      	pop	{r4, r5, r6, r7}
 80004fe:	46bb      	mov	fp, r7
 8000500:	46b2      	mov	sl, r6
 8000502:	46a9      	mov	r9, r5
 8000504:	46a0      	mov	r8, r4
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	4642      	mov	r2, r8
 800050a:	469b      	mov	fp, r3
 800050c:	2320      	movs	r3, #32
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	4652      	mov	r2, sl
 8000512:	40da      	lsrs	r2, r3
 8000514:	4641      	mov	r1, r8
 8000516:	0013      	movs	r3, r2
 8000518:	464a      	mov	r2, r9
 800051a:	408a      	lsls	r2, r1
 800051c:	0017      	movs	r7, r2
 800051e:	4642      	mov	r2, r8
 8000520:	431f      	orrs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d9c3      	bls.n	80004b4 <__udivmoddi4+0x4c>
 800052c:	2200      	movs	r2, #0
 800052e:	2300      	movs	r3, #0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	4643      	mov	r3, r8
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0d8      	beq.n	80004ec <__udivmoddi4+0x84>
 800053a:	07fb      	lsls	r3, r7, #31
 800053c:	0872      	lsrs	r2, r6, #1
 800053e:	431a      	orrs	r2, r3
 8000540:	4646      	mov	r6, r8
 8000542:	087b      	lsrs	r3, r7, #1
 8000544:	e00e      	b.n	8000564 <__udivmoddi4+0xfc>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d101      	bne.n	800054e <__udivmoddi4+0xe6>
 800054a:	42a2      	cmp	r2, r4
 800054c:	d80c      	bhi.n	8000568 <__udivmoddi4+0x100>
 800054e:	1aa4      	subs	r4, r4, r2
 8000550:	419d      	sbcs	r5, r3
 8000552:	2001      	movs	r0, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2100      	movs	r1, #0
 800055a:	3e01      	subs	r6, #1
 800055c:	1824      	adds	r4, r4, r0
 800055e:	414d      	adcs	r5, r1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d006      	beq.n	8000572 <__udivmoddi4+0x10a>
 8000564:	42ab      	cmp	r3, r5
 8000566:	d9ee      	bls.n	8000546 <__udivmoddi4+0xde>
 8000568:	3e01      	subs	r6, #1
 800056a:	1924      	adds	r4, r4, r4
 800056c:	416d      	adcs	r5, r5
 800056e:	2e00      	cmp	r6, #0
 8000570:	d1f8      	bne.n	8000564 <__udivmoddi4+0xfc>
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	465b      	mov	r3, fp
 8000578:	1900      	adds	r0, r0, r4
 800057a:	4169      	adcs	r1, r5
 800057c:	2b00      	cmp	r3, #0
 800057e:	db24      	blt.n	80005ca <__udivmoddi4+0x162>
 8000580:	002b      	movs	r3, r5
 8000582:	465a      	mov	r2, fp
 8000584:	4644      	mov	r4, r8
 8000586:	40d3      	lsrs	r3, r2
 8000588:	002a      	movs	r2, r5
 800058a:	40e2      	lsrs	r2, r4
 800058c:	001c      	movs	r4, r3
 800058e:	465b      	mov	r3, fp
 8000590:	0015      	movs	r5, r2
 8000592:	2b00      	cmp	r3, #0
 8000594:	db2a      	blt.n	80005ec <__udivmoddi4+0x184>
 8000596:	0026      	movs	r6, r4
 8000598:	409e      	lsls	r6, r3
 800059a:	0033      	movs	r3, r6
 800059c:	0026      	movs	r6, r4
 800059e:	4647      	mov	r7, r8
 80005a0:	40be      	lsls	r6, r7
 80005a2:	0032      	movs	r2, r6
 80005a4:	1a80      	subs	r0, r0, r2
 80005a6:	4199      	sbcs	r1, r3
 80005a8:	9000      	str	r0, [sp, #0]
 80005aa:	9101      	str	r1, [sp, #4]
 80005ac:	e79e      	b.n	80004ec <__udivmoddi4+0x84>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d8bc      	bhi.n	800052c <__udivmoddi4+0xc4>
 80005b2:	e782      	b.n	80004ba <__udivmoddi4+0x52>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	9100      	str	r1, [sp, #0]
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	e785      	b.n	80004d6 <__udivmoddi4+0x6e>
 80005ca:	4642      	mov	r2, r8
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	4646      	mov	r6, r8
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0023      	movs	r3, r4
 80005d8:	40f3      	lsrs	r3, r6
 80005da:	4644      	mov	r4, r8
 80005dc:	4313      	orrs	r3, r2
 80005de:	002a      	movs	r2, r5
 80005e0:	40e2      	lsrs	r2, r4
 80005e2:	001c      	movs	r4, r3
 80005e4:	465b      	mov	r3, fp
 80005e6:	0015      	movs	r5, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dad4      	bge.n	8000596 <__udivmoddi4+0x12e>
 80005ec:	4642      	mov	r2, r8
 80005ee:	002f      	movs	r7, r5
 80005f0:	2320      	movs	r3, #32
 80005f2:	0026      	movs	r6, r4
 80005f4:	4097      	lsls	r7, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	40de      	lsrs	r6, r3
 80005fa:	003b      	movs	r3, r7
 80005fc:	4333      	orrs	r3, r6
 80005fe:	e7cd      	b.n	800059c <__udivmoddi4+0x134>

08000600 <__clzdi2>:
 8000600:	b510      	push	{r4, lr}
 8000602:	2900      	cmp	r1, #0
 8000604:	d103      	bne.n	800060e <__clzdi2+0xe>
 8000606:	f000 f807 	bl	8000618 <__clzsi2>
 800060a:	3020      	adds	r0, #32
 800060c:	e002      	b.n	8000614 <__clzdi2+0x14>
 800060e:	0008      	movs	r0, r1
 8000610:	f000 f802 	bl	8000618 <__clzsi2>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <__clzsi2>:
 8000618:	211c      	movs	r1, #28
 800061a:	2301      	movs	r3, #1
 800061c:	041b      	lsls	r3, r3, #16
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0xe>
 8000622:	0c00      	lsrs	r0, r0, #16
 8000624:	3910      	subs	r1, #16
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	4298      	cmp	r0, r3
 800062a:	d301      	bcc.n	8000630 <__clzsi2+0x18>
 800062c:	0a00      	lsrs	r0, r0, #8
 800062e:	3908      	subs	r1, #8
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	4298      	cmp	r0, r3
 8000634:	d301      	bcc.n	800063a <__clzsi2+0x22>
 8000636:	0900      	lsrs	r0, r0, #4
 8000638:	3904      	subs	r1, #4
 800063a:	a202      	add	r2, pc, #8	; (adr r2, 8000644 <__clzsi2+0x2c>)
 800063c:	5c10      	ldrb	r0, [r2, r0]
 800063e:	1840      	adds	r0, r0, r1
 8000640:	4770      	bx	lr
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	02020304 	.word	0x02020304
 8000648:	01010101 	.word	0x01010101
	...

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f001 fbb5 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f8e9 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fbc7 	bl	8000df4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 fb77 	bl	8000d58 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800066a:	f000 f92b 	bl	80008c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800066e:	f000 f98f 	bl	8000990 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000672:	f000 f9cd 	bl	8000a10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000676:	f000 fa21 	bl	8000abc <MX_TIM3_Init>
  MX_TIM6_Init();
 800067a:	f000 faa1 	bl	8000bc0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800067e:	f000 fadd 	bl	8000c3c <MX_TIM7_Init>
  MX_TIM14_Init();
 8000682:	f000 fb19 	bl	8000cb8 <MX_TIM14_Init>
  MX_TIM17_Init();
 8000686:	f000 fb3f 	bl	8000d08 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 800068a:	4b5b      	ldr	r3, [pc, #364]	; (80007f8 <main+0x1a4>)
 800068c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068e:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <main+0x1a4>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	63da      	str	r2, [r3, #60]	; 0x3c
 8000696:	4b58      	ldr	r3, [pc, #352]	; (80007f8 <main+0x1a4>)
 8000698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006a2:	4b55      	ldr	r3, [pc, #340]	; (80007f8 <main+0x1a4>)
 80006a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a6:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <main+0x1a4>)
 80006a8:	2110      	movs	r1, #16
 80006aa:	430a      	orrs	r2, r1
 80006ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ae:	4b52      	ldr	r3, [pc, #328]	; (80007f8 <main+0x1a4>)
 80006b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b2:	2210      	movs	r2, #16
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 80006ba:	4b4f      	ldr	r3, [pc, #316]	; (80007f8 <main+0x1a4>)
 80006bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006be:	4b4e      	ldr	r3, [pc, #312]	; (80007f8 <main+0x1a4>)
 80006c0:	2120      	movs	r1, #32
 80006c2:	430a      	orrs	r2, r1
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c6:	4b4c      	ldr	r3, [pc, #304]	; (80007f8 <main+0x1a4>)
 80006c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ca:	2220      	movs	r2, #32
 80006cc:	4013      	ands	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]

  // Enable the TIM14 peripheral
   __HAL_RCC_TIM14_CLK_ENABLE();
 80006d2:	4b49      	ldr	r3, [pc, #292]	; (80007f8 <main+0x1a4>)
 80006d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d6:	4b48      	ldr	r3, [pc, #288]	; (80007f8 <main+0x1a4>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0209      	lsls	r1, r1, #8
 80006dc:	430a      	orrs	r2, r1
 80006de:	641a      	str	r2, [r3, #64]	; 0x40
 80006e0:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <main+0x1a4>)
 80006e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]

  // Enable the TIM17 peripheral
  __HAL_RCC_TIM17_CLK_ENABLE();
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <main+0x1a4>)
 80006f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f2:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <main+0x1a4>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	02c9      	lsls	r1, r1, #11
 80006f8:	430a      	orrs	r2, r1
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
 80006fc:	4b3e      	ldr	r3, [pc, #248]	; (80007f8 <main+0x1a4>)
 80006fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	02db      	lsls	r3, r3, #11
 8000704:	4013      	ands	r3, r2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	200f      	movs	r0, #15
 8000710:	f002 fb3c 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000714:	200f      	movs	r0, #15
 8000716:	f002 fb4e 	bl	8002db6 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2011      	movs	r0, #17
 8000720:	f002 fb34 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000724:	2011      	movs	r0, #17
 8000726:	f002 fb46 	bl	8002db6 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2012      	movs	r0, #18
 8000730:	f002 fb2c 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8000734:	2012      	movs	r0, #18
 8000736:	f002 fb3e 	bl	8002db6 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM14
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2013      	movs	r0, #19
 8000740:	f002 fb24 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000744:	2013      	movs	r0, #19
 8000746:	f002 fb36 	bl	8002db6 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM17
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2016      	movs	r0, #22
 8000750:	f002 fb1c 	bl	8002d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000754:	2016      	movs	r0, #22
 8000756:	f002 fb2e 	bl	8002db6 <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 800075a:	4b28      	ldr	r3, [pc, #160]	; (80007fc <main+0x1a8>)
 800075c:	0018      	movs	r0, r3
 800075e:	f004 faed 	bl	8004d3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <main+0x1ac>)
 8000764:	0018      	movs	r0, r3
 8000766:	f004 fae9 	bl	8004d3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <main+0x1b0>)
 800076c:	0018      	movs	r0, r3
 800076e:	f004 fae5 	bl	8004d3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <main+0x1b4>)
 8000774:	0018      	movs	r0, r3
 8000776:	f004 fae1 	bl	8004d3c <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <main+0x1b8>)
 800077c:	2100      	movs	r1, #0
 800077e:	0018      	movs	r0, r3
 8000780:	f004 fb98 	bl	8004eb4 <HAL_TIM_PWM_Start>

  // I2C Display
  hardwareTestLCD();
 8000784:	f000 fc16 	bl	8000fb4 <hardwareTestLCD>

  // Variables
  int servoAngle;
  int adcValue;
  stateTracker = 1;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <main+0x1bc>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check UART Transmissions
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 800078e:	4921      	ldr	r1, [pc, #132]	; (8000814 <main+0x1c0>)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <main+0x1c4>)
 8000792:	2201      	movs	r2, #1
 8000794:	0018      	movs	r0, r3
 8000796:	f005 fd47 	bl	8006228 <HAL_UART_Receive_IT>

	  // Get potentiometer value
	  HAL_ADC_Start_IT(&hadc1);
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <main+0x1c8>)
 800079c:	0018      	movs	r0, r3
 800079e:	f001 ff45 	bl	800262c <HAL_ADC_Start_IT>
	  getPotValue();
 80007a2:	f000 fbd9 	bl	8000f58 <getPotValue>

	  // State Machine
	  stateMachineDecider();
 80007a6:	f000 fcbf 	bl	8001128 <stateMachineDecider>
	  stateMachineController(stateTracker);
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <main+0x1bc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fc68 	bl	8001084 <stateMachineController>

	  // Monitor LEDs
	  if (ledOneFlag == 0 ){
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <main+0x1cc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d106      	bne.n	80007ca <main+0x176>
		  HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,GPIO_PIN_RESET);
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <main+0x1d0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fe41 	bl	800344a <HAL_GPIO_WritePin>
 80007c8:	e7e1      	b.n	800078e <main+0x13a>
	  } else if (ledTwoFlag == 0){
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <main+0x1d4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d107      	bne.n	80007e2 <main+0x18e>
		  HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,GPIO_PIN_RESET);
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	01db      	lsls	r3, r3, #7
 80007d6:	4815      	ldr	r0, [pc, #84]	; (800082c <main+0x1d8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	0019      	movs	r1, r3
 80007dc:	f002 fe35 	bl	800344a <HAL_GPIO_WritePin>
 80007e0:	e7d5      	b.n	800078e <main+0x13a>
	  } else if (ledThreeFlag == 0){
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <main+0x1dc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1d1      	bne.n	800078e <main+0x13a>
		  HAL_GPIO_WritePin(LED_3_GPIO_Port,LED_3_Pin,GPIO_PIN_RESET);
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <main+0x1d8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	2110      	movs	r1, #16
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fe2a 	bl	800344a <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 80007f6:	e7ca      	b.n	800078e <main+0x13a>
 80007f8:	40021000 	.word	0x40021000
 80007fc:	20000140 	.word	0x20000140
 8000800:	200001d8 	.word	0x200001d8
 8000804:	20000224 	.word	0x20000224
 8000808:	20000270 	.word	0x20000270
 800080c:	2000018c 	.word	0x2000018c
 8000810:	200003f8 	.word	0x200003f8
 8000814:	200003f0 	.word	0x200003f0
 8000818:	20000308 	.word	0x20000308
 800081c:	20000088 	.word	0x20000088
 8000820:	20000004 	.word	0x20000004
 8000824:	50000800 	.word	0x50000800
 8000828:	20000008 	.word	0x20000008
 800082c:	50000400 	.word	0x50000400
 8000830:	2000000c 	.word	0x2000000c

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b093      	sub	sp, #76	; 0x4c
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	2410      	movs	r4, #16
 800083c:	193b      	adds	r3, r7, r4
 800083e:	0018      	movs	r0, r3
 8000840:	2338      	movs	r3, #56	; 0x38
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f008 f839 	bl	80088bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084a:	003b      	movs	r3, r7
 800084c:	0018      	movs	r0, r3
 800084e:	2310      	movs	r3, #16
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f008 f832 	bl	80088bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	0018      	movs	r0, r3
 800085e:	f003 fad3 	bl	8003e08 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2202      	movs	r2, #2
 8000866:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	193b      	adds	r3, r7, r4
 8000884:	0018      	movs	r0, r3
 8000886:	f003 fb0b 	bl	8003ea0 <HAL_RCC_OscConfig>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800088e:	f000 ff8f 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	003b      	movs	r3, r7
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000898:	003b      	movs	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	003b      	movs	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008aa:	003b      	movs	r3, r7
 80008ac:	2100      	movs	r1, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f003 fe10 	bl	80044d4 <HAL_RCC_ClockConfig>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008b8:	f000 ff7a 	bl	80017b0 <Error_Handler>
  }
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b013      	add	sp, #76	; 0x4c
 80008c2:	bd90      	pop	{r4, r7, pc}

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	0018      	movs	r0, r3
 80008ce:	230c      	movs	r3, #12
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f007 fff2 	bl	80088bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008da:	4a2c      	ldr	r2, [pc, #176]	; (800098c <MX_ADC1_Init+0xc8>)
 80008dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	05d2      	lsls	r2, r2, #23
 80008e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e6:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008fe:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000906:	2200      	movs	r2, #0
 8000908:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_ADC1_Init+0xc4>)
 800090c:	2201      	movs	r2, #1
 800090e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000912:	2201      	movs	r2, #1
 8000914:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_ADC1_Init+0xc4>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000924:	222c      	movs	r2, #44	; 0x2c
 8000926:	2100      	movs	r1, #0
 8000928:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_ADC1_Init+0xc4>)
 800092c:	2200      	movs	r2, #0
 800092e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000932:	2200      	movs	r2, #0
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000938:	2200      	movs	r2, #0
 800093a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_ADC1_Init+0xc4>)
 800093e:	223c      	movs	r2, #60	; 0x3c
 8000940:	2100      	movs	r1, #0
 8000942:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000946:	2200      	movs	r2, #0
 8000948:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_ADC1_Init+0xc4>)
 800094c:	0018      	movs	r0, r3
 800094e:	f001 fc31 	bl	80021b4 <HAL_ADC_Init>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000956:	f000 ff2b 	bl	80017b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	1d3a      	adds	r2, r7, #4
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fede 	bl	8002734 <HAL_ADC_ConfigChannel>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 800097c:	f000 ff18 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b004      	add	sp, #16
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000088 	.word	0x20000088
 800098c:	40012400 	.word	0x40012400

08000990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_I2C1_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <MX_I2C1_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_I2C1_Init+0x74>)
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <MX_I2C1_Init+0x7c>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f002 fd75 	bl	80034bc <HAL_I2C_Init>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009d6:	f000 feeb 	bl	80017b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009dc:	2100      	movs	r1, #0
 80009de:	0018      	movs	r0, r3
 80009e0:	f003 f97a 	bl	8003cd8 <HAL_I2CEx_ConfigAnalogFilter>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009e8:	f000 fee2 	bl	80017b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f003 f9bd 	bl	8003d70 <HAL_I2CEx_ConfigDigitalFilter>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 fed9 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000ec 	.word	0x200000ec
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	00303d5b 	.word	0x00303d5b

08000a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	2310      	movs	r3, #16
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f007 ff4b 	bl	80088bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f007 ff44 	bl	80088bc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	05d2      	lsls	r2, r2, #23
 8000a3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <MX_TIM2_Init+0xa4>)
 8000a40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a4a:	4a1b      	ldr	r2, [pc, #108]	; (8000ab8 <MX_TIM2_Init+0xa8>)
 8000a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f004 f89b 	bl	8004b98 <HAL_TIM_Base_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a66:	f000 fea3 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	0152      	lsls	r2, r2, #5
 8000a72:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a74:	187a      	adds	r2, r7, r1
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f004 fd0c 	bl	8005498 <HAL_TIM_ConfigClockSource>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a84:	f000 fe94 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a94:	1d3a      	adds	r2, r7, #4
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f005 fa04 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000aa4:	f000 fe84 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b008      	add	sp, #32
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000140 	.word	0x20000140
 8000ab4:	00003e7f 	.word	0x00003e7f
 8000ab8:	000003e7 	.word	0x000003e7

08000abc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	; 0x38
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	2328      	movs	r3, #40	; 0x28
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2310      	movs	r3, #16
 8000aca:	001a      	movs	r2, r3
 8000acc:	2100      	movs	r1, #0
 8000ace:	f007 fef5 	bl	80088bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad2:	231c      	movs	r3, #28
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	230c      	movs	r3, #12
 8000ada:	001a      	movs	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	f007 feed 	bl	80088bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	231c      	movs	r3, #28
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f007 fee6 	bl	80088bc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af0:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000af2:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <MX_TIM3_Init+0xfc>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000af8:	2240      	movs	r2, #64	; 0x40
 8000afa:	32ff      	adds	r2, #255	; 0xff
 8000afc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b04:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000b06:	4a2d      	ldr	r2, [pc, #180]	; (8000bbc <MX_TIM3_Init+0x100>)
 8000b08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f004 f83d 	bl	8004b98 <HAL_TIM_Base_Init>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000b22:	f000 fe45 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	2128      	movs	r1, #40	; 0x28
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	0152      	lsls	r2, r2, #5
 8000b2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b30:	187a      	adds	r2, r7, r1
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f004 fcae 	bl	8005498 <HAL_TIM_ConfigClockSource>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000b40:	f000 fe36 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f004 f954 	bl	8004df4 <HAL_TIM_PWM_Init>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b50:	f000 fe2e 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	211c      	movs	r1, #28
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b62:	187a      	adds	r2, r7, r1
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f005 f99d 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000b72:	f000 fe1d 	bl	80017b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b76:	003b      	movs	r3, r7
 8000b78:	2260      	movs	r2, #96	; 0x60
 8000b7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b7c:	003b      	movs	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b82:	003b      	movs	r3, r7
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b88:	003b      	movs	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8e:	0039      	movs	r1, r7
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	0018      	movs	r0, r3
 8000b96:	f004 fb7f 	bl	8005298 <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000b9e:	f000 fe07 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <MX_TIM3_Init+0xf8>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 ff83 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b00e      	add	sp, #56	; 0x38
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	2000018c 	.word	0x2000018c
 8000bb8:	40000400 	.word	0x40000400
 8000bbc:	000003e7 	.word	0x000003e7

08000bc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	0018      	movs	r0, r3
 8000bca:	230c      	movs	r3, #12
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f007 fe74 	bl	80088bc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_TIM6_Init+0x6c>)
 8000bd6:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <MX_TIM6_Init+0x70>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_TIM6_Init+0x6c>)
 8000bdc:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <MX_TIM6_Init+0x74>)
 8000bde:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_TIM6_Init+0x6c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_TIM6_Init+0x6c>)
 8000be8:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <MX_TIM6_Init+0x78>)
 8000bea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_TIM6_Init+0x6c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_TIM6_Init+0x6c>)
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f003 ffcf 	bl	8004b98 <HAL_TIM_Base_Init>
 8000bfa:	1e03      	subs	r3, r0, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000bfe:	f000 fdd7 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c0e:	1d3a      	adds	r2, r7, #4
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_TIM6_Init+0x6c>)
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f005 f947 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000c1e:	f000 fdc7 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b004      	add	sp, #16
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	200001d8 	.word	0x200001d8
 8000c30:	40001000 	.word	0x40001000
 8000c34:	00003e7f 	.word	0x00003e7f
 8000c38:	000003e7 	.word	0x000003e7

08000c3c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	0018      	movs	r0, r3
 8000c46:	230c      	movs	r3, #12
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f007 fe36 	bl	80088bc <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_TIM7_Init+0x6c>)
 8000c52:	4a16      	ldr	r2, [pc, #88]	; (8000cac <MX_TIM7_Init+0x70>)
 8000c54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15999;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_TIM7_Init+0x6c>)
 8000c58:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <MX_TIM7_Init+0x74>)
 8000c5a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_TIM7_Init+0x6c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_TIM7_Init+0x6c>)
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <MX_TIM7_Init+0x78>)
 8000c66:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_TIM7_Init+0x6c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_TIM7_Init+0x6c>)
 8000c70:	0018      	movs	r0, r3
 8000c72:	f003 ff91 	bl	8004b98 <HAL_TIM_Base_Init>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000c7a:	f000 fd99 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c8a:	1d3a      	adds	r2, r7, #4
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_TIM7_Init+0x6c>)
 8000c8e:	0011      	movs	r1, r2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f005 f909 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	1e03      	subs	r3, r0, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000c9a:	f000 fd89 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000224 	.word	0x20000224
 8000cac:	40001400 	.word	0x40001400
 8000cb0:	00003e7f 	.word	0x00003e7f
 8000cb4:	000003e7 	.word	0x000003e7

08000cb8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_TIM14_Init+0x40>)
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <MX_TIM14_Init+0x44>)
 8000cc0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7999;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <MX_TIM14_Init+0x40>)
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <MX_TIM14_Init+0x48>)
 8000cc6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_TIM14_Init+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_TIM14_Init+0x40>)
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <MX_TIM14_Init+0x4c>)
 8000cd2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_TIM14_Init+0x40>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_TIM14_Init+0x40>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <MX_TIM14_Init+0x40>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f003 ff58 	bl	8004b98 <HAL_TIM_Base_Init>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000cec:	f000 fd60 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000270 	.word	0x20000270
 8000cfc:	40002000 	.word	0x40002000
 8000d00:	00001f3f 	.word	0x00001f3f
 8000d04:	000003e7 	.word	0x000003e7

08000d08 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_TIM17_Init+0x44>)
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <MX_TIM17_Init+0x48>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_TIM17_Init+0x44>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_TIM17_Init+0x44>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_TIM17_Init+0x44>)
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <MX_TIM17_Init+0x4c>)
 8000d22:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_TIM17_Init+0x44>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_TIM17_Init+0x44>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_TIM17_Init+0x44>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <MX_TIM17_Init+0x44>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f003 ff2d 	bl	8004b98 <HAL_TIM_Base_Init>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000d42:	f000 fd35 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200002bc 	.word	0x200002bc
 8000d50:	40014800 	.word	0x40014800
 8000d54:	000003e7 	.word	0x000003e7

08000d58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d5e:	4a24      	ldr	r2, [pc, #144]	; (8000df0 <MX_USART2_UART_Init+0x98>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d64:	22e1      	movs	r2, #225	; 0xe1
 8000d66:	0252      	lsls	r2, r2, #9
 8000d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f005 f906 	bl	8005fb4 <HAL_UART_Init>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000dac:	f000 fd00 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	0018      	movs	r0, r3
 8000db6:	f007 f993 	bl	80080e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000dbe:	f000 fcf7 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f007 f9ca 	bl	8008160 <HAL_UARTEx_SetRxFifoThreshold>
 8000dcc:	1e03      	subs	r3, r0, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd0:	f000 fcee 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <MX_USART2_UART_Init+0x94>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f007 f948 	bl	800806c <HAL_UARTEx_DisableFifoMode>
 8000ddc:	1e03      	subs	r3, r0, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000de0:	f000 fce6 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	20000308 	.word	0x20000308
 8000df0:	40004400 	.word	0x40004400

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b08b      	sub	sp, #44	; 0x2c
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	2414      	movs	r4, #20
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2314      	movs	r3, #20
 8000e02:	001a      	movs	r2, r3
 8000e04:	2100      	movs	r1, #0
 8000e06:	f007 fd59 	bl	80088bc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b4f      	ldr	r3, [pc, #316]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0e:	4b4e      	ldr	r3, [pc, #312]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e10:	2104      	movs	r1, #4
 8000e12:	430a      	orrs	r2, r1
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
 8000e16:	4b4c      	ldr	r3, [pc, #304]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e22:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e26:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e28:	2120      	movs	r1, #32
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2e:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e32:	2220      	movs	r2, #32
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e3e:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	430a      	orrs	r2, r1
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
 8000e46:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e56:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e58:	2102      	movs	r1, #2
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <MX_GPIO_Init+0x154>)
 8000e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e62:	2202      	movs	r2, #2
 8000e64:	4013      	ands	r3, r2
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e6a:	23a0      	movs	r3, #160	; 0xa0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2120      	movs	r1, #32
 8000e72:	0018      	movs	r0, r3
 8000e74:	f002 fae9 	bl	800344a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000e78:	4934      	ldr	r1, [pc, #208]	; (8000f4c <MX_GPIO_Init+0x158>)
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <MX_GPIO_Init+0x15c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f002 fae3 	bl	800344a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000e84:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <MX_GPIO_Init+0x160>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f002 fadd 	bl	800344a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INPUT_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_2_Pin;
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	0192      	lsls	r2, r2, #6
 8000e96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_2_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	4a2b      	ldr	r2, [pc, #172]	; (8000f54 <MX_GPIO_Init+0x160>)
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0010      	movs	r0, r2
 8000eac:	f002 f87c 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2201      	movs	r2, #1
 8000eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	193a      	adds	r2, r7, r4
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f002 f869 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <MX_GPIO_Init+0x158>)
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2201      	movs	r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <MX_GPIO_Init+0x15c>)
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	0010      	movs	r0, r2
 8000ef6:	f002 f857 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	2201      	movs	r2, #1
 8000f04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <MX_GPIO_Init+0x160>)
 8000f16:	0019      	movs	r1, r3
 8000f18:	0010      	movs	r0, r2
 8000f1a:	f002 f845 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000f1e:	0021      	movs	r1, r4
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2208      	movs	r2, #8
 8000f24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <MX_GPIO_Init+0x15c>)
 8000f36:	0019      	movs	r1, r3
 8000f38:	0010      	movs	r0, r2
 8000f3a:	f002 f835 	bl	8002fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b00b      	add	sp, #44	; 0x2c
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	00004010 	.word	0x00004010
 8000f50:	50000400 	.word	0x50000400
 8000f54:	50000800 	.word	0x50000800

08000f58 <getPotValue>:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
	}

	/* Get ADC value from potentiometer */
	void getPotValue(void){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <getPotValue+0x24>)
 8000f5e:	2105      	movs	r1, #5
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 facf 	bl	8002504 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <getPotValue+0x24>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f001 fbd7 	bl	800271c <HAL_ADC_GetValue>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <getPotValue+0x28>)
 8000f74:	801a      	strh	r2, [r3, #0]

		/* Debug */
		//sprintf(msg, "potValue: %hu\r\n", potValue);
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000088 	.word	0x20000088
 8000f80:	200003f6 	.word	0x200003f6

08000f84 <getAdcFromPot>:

	/* getADC from Pot */
	int getAdcFromPot(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
		/* Get pot value */
		uint16_t potValue;
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <getAdcFromPot+0x2c>)
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f001 fab8 	bl	8002504 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <getAdcFromPot+0x2c>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f001 fbc0 	bl	800271c <HAL_ADC_GetValue>
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	801a      	strh	r2, [r3, #0]
		return potValue;
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	881b      	ldrh	r3, [r3, #0]
	}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	20000088 	.word	0x20000088

08000fb4 <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f007 fa93 	bl	80084e4 <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f007 fb9e 	bl	8008704 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Hardware Test");
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <hardwareTestLCD+0x38>)
 8000fca:	0019      	movs	r1, r3
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f007 fbe9 	bl	80087a4 <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f007 fb94 	bl	8008704 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Meow");
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <hardwareTestLCD+0x3c>)
 8000fde:	0019      	movs	r1, r3
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f007 fbdf 	bl	80087a4 <I2C_LCD_WriteString>
	}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08009208 	.word	0x08009208
 8000ff0:	08009218 	.word	0x08009218

08000ff4 <motorControl>:

	/* Motor control */
	void motorControl(int adcValue){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, adcValue); // Interpolate pot values to PWM range
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <motorControl+0x18>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000018c 	.word	0x2000018c

08001010 <ledFreqControl>:

	/* LED Frequency control */
	void ledFreqControl(int adcValue){
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

		// Calculate timer parameters
		uint16_t prescaler = adcValue;
 8001018:	240e      	movs	r4, #14
 800101a:	193b      	adds	r3, r7, r4
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	801a      	strh	r2, [r3, #0]

		// Stop the Timer

		HAL_TIM_Base_Stop(&htim7);
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <ledFreqControl+0x34>)
 8001022:	0018      	movs	r0, r3
 8001024:	f003 fe64 	bl	8004cf0 <HAL_TIM_Base_Stop>

		// Update Prescaler

		htim7.Instance->PSC = prescaler;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <ledFreqControl+0x34>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	193a      	adds	r2, r7, r4
 800102e:	8812      	ldrh	r2, [r2, #0]
 8001030:	629a      	str	r2, [r3, #40]	; 0x28

		// Restart Timer

		HAL_TIM_Base_Start(&htim7);
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <ledFreqControl+0x34>)
 8001034:	0018      	movs	r0, r3
 8001036:	f003 fe07 	bl	8004c48 <HAL_TIM_Base_Start>
	}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b005      	add	sp, #20
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	20000224 	.word	0x20000224

08001048 <myMap>:


	/* Mapping function */
	 int myMap(int x, int in_min, int in_max, int out_min, int out_max){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
		 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	69b9      	ldr	r1, [r7, #24]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	1a8a      	subs	r2, r1, r2
 8001062:	435a      	muls	r2, r3
 8001064:	0010      	movs	r0, r2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	0019      	movs	r1, r3
 800106e:	f7ff f8ef 	bl	8000250 <__divsi3>
 8001072:	0003      	movs	r3, r0
 8001074:	001a      	movs	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	18d3      	adds	r3, r2, r3
	 }
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <stateMachineController>:

	 /* State Machine Controller */
	 // Description: Determines which state the program will execute.
	 //  Input:		 Integer corresponding to state (1 = A, 2 = B, 3 = C)
	 void stateMachineController(int state){
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

		 switch(state){
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d01b      	beq.n	80010ca <stateMachineController+0x46>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b03      	cmp	r3, #3
 8001096:	dc36      	bgt.n	8001106 <stateMachineController+0x82>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d003      	beq.n	80010a6 <stateMachineController+0x22>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d00c      	beq.n	80010be <stateMachineController+0x3a>
				 ledThreeFlag = 1;

				 stateHandlerC();
				 break;
		 }
	 }
 80010a4:	e02f      	b.n	8001106 <stateMachineController+0x82>
				 ledOneFlag = 1;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <stateMachineController+0x8c>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 80010ac:	4b19      	ldr	r3, [pc, #100]	; (8001114 <stateMachineController+0x90>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
				 ledThreeFlag = 1;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <stateMachineController+0x94>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
				 stateHandlerA();
 80010b8:	f000 f8be 	bl	8001238 <stateHandlerA>
				 break;
 80010bc:	e023      	b.n	8001106 <stateMachineController+0x82>
				 ledThreeFlag = 1;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <stateMachineController+0x94>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
				 stateHandlerB();
 80010c4:	f000 f8f8 	bl	80012b8 <stateHandlerB>
				 break;
 80010c8:	e01d      	b.n	8001106 <stateMachineController+0x82>
				 sprintf(msg, "Executing C.\n\r");
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <stateMachineController+0x98>)
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <stateMachineController+0x9c>)
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f007 fbd3 	bl	800887c <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <stateMachineController+0x9c>)
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff f81d 	bl	8000118 <strlen>
 80010de:	0003      	movs	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	2301      	movs	r3, #1
 80010e4:	425b      	negs	r3, r3
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <stateMachineController+0x9c>)
 80010e8:	480e      	ldr	r0, [pc, #56]	; (8001124 <stateMachineController+0xa0>)
 80010ea:	f004 fff9 	bl	80060e0 <HAL_UART_Transmit>
				 ledOneFlag = 1;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <stateMachineController+0x8c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <stateMachineController+0x90>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
				 ledThreeFlag = 1;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <stateMachineController+0x94>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
				 stateHandlerC();
 8001100:	f000 f994 	bl	800142c <stateHandlerC>
				 break;
 8001104:	46c0      	nop			; (mov r8, r8)
	 }
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	20000004 	.word	0x20000004
 8001114:	20000008 	.word	0x20000008
 8001118:	2000000c 	.word	0x2000000c
 800111c:	08009220 	.word	0x08009220
 8001120:	2000039c 	.word	0x2000039c
 8001124:	20000308 	.word	0x20000308

08001128 <stateMachineDecider>:

	 /* State Machine Controller */
	 // Description: Monitors button pushes to update current state value.
	 void stateMachineDecider(){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
		 // Go to State B if it is State A
		 if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 1){
 800112c:	4b39      	ldr	r3, [pc, #228]	; (8001214 <stateMachineDecider+0xec>)
 800112e:	2108      	movs	r1, #8
 8001130:	0018      	movs	r0, r3
 8001132:	f002 f96d 	bl	8003410 <HAL_GPIO_ReadPin>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d022      	beq.n	8001180 <stateMachineDecider+0x58>
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <stateMachineDecider+0xf0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d11e      	bne.n	8001180 <stateMachineDecider+0x58>

			 // Debug message
			 sprintf(msg, "Going to State B.\n\r");
 8001142:	4a36      	ldr	r2, [pc, #216]	; (800121c <stateMachineDecider+0xf4>)
 8001144:	4b36      	ldr	r3, [pc, #216]	; (8001220 <stateMachineDecider+0xf8>)
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f007 fb97 	bl	800887c <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800114e:	4b34      	ldr	r3, [pc, #208]	; (8001220 <stateMachineDecider+0xf8>)
 8001150:	0018      	movs	r0, r3
 8001152:	f7fe ffe1 	bl	8000118 <strlen>
 8001156:	0003      	movs	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	2301      	movs	r3, #1
 800115c:	425b      	negs	r3, r3
 800115e:	4930      	ldr	r1, [pc, #192]	; (8001220 <stateMachineDecider+0xf8>)
 8001160:	4830      	ldr	r0, [pc, #192]	; (8001224 <stateMachineDecider+0xfc>)
 8001162:	f004 ffbd 	bl	80060e0 <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 8001166:	2000      	movs	r0, #0
 8001168:	f007 fa88 	bl	800867c <I2C_LCD_Clear>

			 // Timers go back to normal
			 HAL_TIM_Base_Stop(&htim7);
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <stateMachineDecider+0x100>)
 800116e:	0018      	movs	r0, r3
 8001170:	f003 fdbe 	bl	8004cf0 <HAL_TIM_Base_Stop>
			 MX_TIM7_Init();
 8001174:	f7ff fd62 	bl	8000c3c <MX_TIM7_Init>

			 // Go to State B
			 stateTracker = 2;
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <stateMachineDecider+0xf0>)
 800117a:	2202      	movs	r2, #2
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e046      	b.n	800120e <stateMachineDecider+0xe6>

		 // Go to State A if it is State B
		 } else if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 2){
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <stateMachineDecider+0xec>)
 8001182:	2108      	movs	r1, #8
 8001184:	0018      	movs	r0, r3
 8001186:	f002 f943 	bl	8003410 <HAL_GPIO_ReadPin>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d01c      	beq.n	80011c8 <stateMachineDecider+0xa0>
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <stateMachineDecider+0xf0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d118      	bne.n	80011c8 <stateMachineDecider+0xa0>

			 // Debug message
			 sprintf(msg, "Going to State A.\n\r");
 8001196:	4a25      	ldr	r2, [pc, #148]	; (800122c <stateMachineDecider+0x104>)
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <stateMachineDecider+0xf8>)
 800119a:	0011      	movs	r1, r2
 800119c:	0018      	movs	r0, r3
 800119e:	f007 fb6d 	bl	800887c <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <stateMachineDecider+0xf8>)
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7fe ffb7 	bl	8000118 <strlen>
 80011aa:	0003      	movs	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	2301      	movs	r3, #1
 80011b0:	425b      	negs	r3, r3
 80011b2:	491b      	ldr	r1, [pc, #108]	; (8001220 <stateMachineDecider+0xf8>)
 80011b4:	481b      	ldr	r0, [pc, #108]	; (8001224 <stateMachineDecider+0xfc>)
 80011b6:	f004 ff93 	bl	80060e0 <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f007 fa5e 	bl	800867c <I2C_LCD_Clear>

			 // Stay in State A
			 stateTracker = 1;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <stateMachineDecider+0xf0>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e022      	b.n	800120e <stateMachineDecider+0xe6>

		// Button 2 pressed (State C)
		 } else if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin) && stateTracker == 1){
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	019b      	lsls	r3, r3, #6
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <stateMachineDecider+0x108>)
 80011ce:	0019      	movs	r1, r3
 80011d0:	0010      	movs	r0, r2
 80011d2:	f002 f91d 	bl	8003410 <HAL_GPIO_ReadPin>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d119      	bne.n	800120e <stateMachineDecider+0xe6>
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <stateMachineDecider+0xf0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d115      	bne.n	800120e <stateMachineDecider+0xe6>

			 // Debug message
			 sprintf(msg, "Going to State C.\n\r");
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <stateMachineDecider+0x10c>)
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <stateMachineDecider+0xf8>)
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f007 fb47 	bl	800887c <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <stateMachineDecider+0xf8>)
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7fe ff91 	bl	8000118 <strlen>
 80011f6:	0003      	movs	r3, r0
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	2301      	movs	r3, #1
 80011fc:	425b      	negs	r3, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <stateMachineDecider+0xf8>)
 8001200:	4808      	ldr	r0, [pc, #32]	; (8001224 <stateMachineDecider+0xfc>)
 8001202:	f004 ff6d 	bl	80060e0 <HAL_UART_Transmit>


			 // Go to State C
			 stateTracker = 3;
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <stateMachineDecider+0xf0>)
 8001208:	2203      	movs	r2, #3
 800120a:	601a      	str	r2, [r3, #0]
		 }
	 }
 800120c:	e7ff      	b.n	800120e <stateMachineDecider+0xe6>
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	50000400 	.word	0x50000400
 8001218:	200003f8 	.word	0x200003f8
 800121c:	08009230 	.word	0x08009230
 8001220:	2000039c 	.word	0x2000039c
 8001224:	20000308 	.word	0x20000308
 8001228:	20000224 	.word	0x20000224
 800122c:	08009244 	.word	0x08009244
 8001230:	50000800 	.word	0x50000800
 8001234:	08009258 	.word	0x08009258

08001238 <stateHandlerA>:

	 /* State Handler A */
	 void stateHandlerA(void){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8
		 // LCD Control
		 I2C_LCD_Display(MyI2C_LCD);
 800123e:	2000      	movs	r0, #0
 8001240:	f007 facc 	bl	80087dc <I2C_LCD_Display>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2000      	movs	r0, #0
 800124a:	f007 fa5b 	bl	8008704 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <stateHandlerA+0x6c>)
 8001250:	0019      	movs	r1, r3
 8001252:	2000      	movs	r0, #0
 8001254:	f007 faa6 	bl	80087a4 <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001258:	2201      	movs	r2, #1
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f007 fa51 	bl	8008704 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <stateHandlerA+0x70>)
 8001264:	0019      	movs	r1, r3
 8001266:	2000      	movs	r0, #0
 8001268:	f007 fa9c 	bl	80087a4 <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <stateHandlerA+0x74>)
 800126e:	0018      	movs	r0, r3
 8001270:	f001 f9dc 	bl	800262c <HAL_ADC_Start_IT>
		 getPotValue();
 8001274:	f7ff fe70 	bl	8000f58 <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 8001278:	f7ff fe84 	bl	8000f84 <getAdcFromPot>
 800127c:	4a0c      	ldr	r2, [pc, #48]	; (80012b0 <stateHandlerA+0x78>)
 800127e:	23b4      	movs	r3, #180	; 0xb4
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	213c      	movs	r1, #60	; 0x3c
 8001286:	f7ff fedf 	bl	8001048 <myMap>
 800128a:	0003      	movs	r3, r0
 800128c:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff feaf 	bl	8000ff4 <motorControl>

		 // No button pushes - Stay in State A
		 stateTracker = 1;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <stateHandlerA+0x7c>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]
	 }
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b002      	add	sp, #8
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	0800926c 	.word	0x0800926c
 80012a8:	0800927c 	.word	0x0800927c
 80012ac:	20000088 	.word	0x20000088
 80012b0:	00000fff 	.word	0x00000fff
 80012b4:	200003f8 	.word	0x200003f8

080012b8 <stateHandlerB>:

	 /* State Handler B */
	 void stateHandlerB(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af02      	add	r7, sp, #8

		 // When State B is initially called, let alone one of the LEDs (in question) on
		 if (ledOneFlag == 1 && ledTwoFlag == 1){
 80012be:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <stateHandlerB+0x138>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d109      	bne.n	80012da <stateHandlerB+0x22>
 80012c6:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <stateHandlerB+0x13c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <stateHandlerB+0x22>
			 ledOneFlag = 1;
 80012ce:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <stateHandlerB+0x138>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
			 ledTwoFlag = 0;
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <stateHandlerB+0x13c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
		 }

		 // LCD Control
		 I2C_LCD_Display(MyI2C_LCD);
 80012da:	2000      	movs	r0, #0
 80012dc:	f007 fa7e 	bl	80087dc <I2C_LCD_Display>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	2000      	movs	r0, #0
 80012e6:	f007 fa0d 	bl	8008704 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "ADC: ");
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <stateHandlerB+0x140>)
 80012ec:	0019      	movs	r1, r3
 80012ee:	2000      	movs	r0, #0
 80012f0:	f007 fa58 	bl	80087a4 <I2C_LCD_WriteString>
		 sprintf(msg2, "%hu", potValue);
 80012f4:	4b41      	ldr	r3, [pc, #260]	; (80013fc <stateHandlerB+0x144>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	001a      	movs	r2, r3
 80012fa:	4941      	ldr	r1, [pc, #260]	; (8001400 <stateHandlerB+0x148>)
 80012fc:	4b41      	ldr	r3, [pc, #260]	; (8001404 <stateHandlerB+0x14c>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f007 fabc 	bl	800887c <siprintf>
		 I2C_LCD_WriteString(MyI2C_LCD, msg2);
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <stateHandlerB+0x14c>)
 8001306:	0019      	movs	r1, r3
 8001308:	2000      	movs	r0, #0
 800130a:	f007 fa4b 	bl	80087a4 <I2C_LCD_WriteString>
		 I2C_LCD_WriteString(MyI2C_LCD, " State B");
 800130e:	4b3e      	ldr	r3, [pc, #248]	; (8001408 <stateHandlerB+0x150>)
 8001310:	0019      	movs	r1, r3
 8001312:	2000      	movs	r0, #0
 8001314:	f007 fa46 	bl	80087a4 <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001318:	2201      	movs	r2, #1
 800131a:	2100      	movs	r1, #0
 800131c:	2000      	movs	r0, #0
 800131e:	f007 f9f1 	bl	8008704 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8001322:	4b3a      	ldr	r3, [pc, #232]	; (800140c <stateHandlerB+0x154>)
 8001324:	0019      	movs	r1, r3
 8001326:	2000      	movs	r0, #0
 8001328:	f007 fa3c 	bl	80087a4 <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 800132c:	4b38      	ldr	r3, [pc, #224]	; (8001410 <stateHandlerB+0x158>)
 800132e:	0018      	movs	r0, r3
 8001330:	f001 f97c 	bl	800262c <HAL_ADC_Start_IT>
		 getPotValue();
 8001334:	f7ff fe10 	bl	8000f58 <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 8001338:	f7ff fe24 	bl	8000f84 <getAdcFromPot>
 800133c:	4a35      	ldr	r2, [pc, #212]	; (8001414 <stateHandlerB+0x15c>)
 800133e:	23b4      	movs	r3, #180	; 0xb4
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	213c      	movs	r1, #60	; 0x3c
 8001346:	f7ff fe7f 	bl	8001048 <myMap>
 800134a:	0003      	movs	r3, r0
 800134c:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff fe4f 	bl	8000ff4 <motorControl>

		 // LED frequency control
		 int blinkSpeed = myMap(getAdcFromPot(), 60, 4095, 16000, 3200);
 8001356:	f7ff fe15 	bl	8000f84 <getAdcFromPot>
 800135a:	23fa      	movs	r3, #250	; 0xfa
 800135c:	019a      	lsls	r2, r3, #6
 800135e:	492d      	ldr	r1, [pc, #180]	; (8001414 <stateHandlerB+0x15c>)
 8001360:	23c8      	movs	r3, #200	; 0xc8
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	0013      	movs	r3, r2
 8001368:	000a      	movs	r2, r1
 800136a:	213c      	movs	r1, #60	; 0x3c
 800136c:	f7ff fe6c 	bl	8001048 <myMap>
 8001370:	0003      	movs	r3, r0
 8001372:	603b      	str	r3, [r7, #0]
		 ledFreqControl(blinkSpeed);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff fe4a 	bl	8001010 <ledFreqControl>

		 // LED1 and LED2 toggle
		 // B1 pressed = Turn off
		 // B1 not pressed = Turn on, blink at 1 Hz (Modify PSC)
		 if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin)){
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	019b      	lsls	r3, r3, #6
 8001380:	4a25      	ldr	r2, [pc, #148]	; (8001418 <stateHandlerB+0x160>)
 8001382:	0019      	movs	r1, r3
 8001384:	0010      	movs	r0, r2
 8001386:	f002 f843 	bl	8003410 <HAL_GPIO_ReadPin>
 800138a:	1e03      	subs	r3, r0, #0
 800138c:	d128      	bne.n	80013e0 <stateHandlerB+0x128>

			 // Testing millis - time since program start
			 sprintf(msg2, "Time since program start (ms): %u\r\n", millisProgStart);
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <stateHandlerB+0x164>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	001a      	movs	r2, r3
 8001394:	4922      	ldr	r1, [pc, #136]	; (8001420 <stateHandlerB+0x168>)
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <stateHandlerB+0x14c>)
 8001398:	0018      	movs	r0, r3
 800139a:	f007 fa6f 	bl	800887c <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <stateHandlerB+0x14c>)
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7fe feb9 	bl	8000118 <strlen>
 80013a6:	0003      	movs	r3, r0
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	2301      	movs	r3, #1
 80013ac:	425b      	negs	r3, r3
 80013ae:	4915      	ldr	r1, [pc, #84]	; (8001404 <stateHandlerB+0x14c>)
 80013b0:	481c      	ldr	r0, [pc, #112]	; (8001424 <stateHandlerB+0x16c>)
 80013b2:	f004 fe95 	bl	80060e0 <HAL_UART_Transmit>

			 // If LED1 is on, swap with LED2
			 if (ledOneFlag == 1){
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <stateHandlerB+0x138>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d106      	bne.n	80013cc <stateHandlerB+0x114>
				 ledOneFlag = 0;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <stateHandlerB+0x138>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <stateHandlerB+0x13c>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e009      	b.n	80013e0 <stateHandlerB+0x128>

			// If LED2 is on, swap with LED1
			 } else if (ledTwoFlag == 1){
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <stateHandlerB+0x13c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <stateHandlerB+0x128>
				 ledTwoFlag = 0;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <stateHandlerB+0x13c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
				 ledOneFlag = 1;
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <stateHandlerB+0x138>)
 80013dc:	2201      	movs	r2, #1
 80013de:	601a      	str	r2, [r3, #0]
			 }
		 }

		 // No button pushes - Stay in State B
		 stateTracker = 2;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <stateHandlerB+0x170>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	601a      	str	r2, [r3, #0]
	 }
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20000004 	.word	0x20000004
 80013f4:	20000008 	.word	0x20000008
 80013f8:	0800928c 	.word	0x0800928c
 80013fc:	200003f6 	.word	0x200003f6
 8001400:	08009294 	.word	0x08009294
 8001404:	200003b4 	.word	0x200003b4
 8001408:	08009298 	.word	0x08009298
 800140c:	0800927c 	.word	0x0800927c
 8001410:	20000088 	.word	0x20000088
 8001414:	00000fff 	.word	0x00000fff
 8001418:	50000800 	.word	0x50000800
 800141c:	200003fc 	.word	0x200003fc
 8001420:	080092a4 	.word	0x080092a4
 8001424:	20000308 	.word	0x20000308
 8001428:	200003f8 	.word	0x200003f8

0800142c <stateHandlerC>:

	 /* State Handler C */
	 void stateHandlerC(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

		 // Turn off LCD
		 I2C_LCD_NoDisplay(MyI2C_LCD);
 8001432:	2000      	movs	r0, #0
 8001434:	f007 f9fa 	bl	800882c <I2C_LCD_NoDisplay>

		 // Turn off LED1, LED2, LED3
		 ledOneFlag = 0;
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <stateHandlerC+0xbc>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
		 ledTwoFlag = 0;
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <stateHandlerC+0xc0>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
		 ledThreeFlag = 0;
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <stateHandlerC+0xc4>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <stateHandlerC+0xc8>)
 800144c:	2200      	movs	r2, #0
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	0018      	movs	r0, r3
 8001452:	f001 fffa 	bl	800344a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	01db      	lsls	r3, r3, #7
 800145a:	4827      	ldr	r0, [pc, #156]	; (80014f8 <stateHandlerC+0xcc>)
 800145c:	2200      	movs	r2, #0
 800145e:	0019      	movs	r1, r3
 8001460:	f001 fff3 	bl	800344a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <stateHandlerC+0xcc>)
 8001466:	2200      	movs	r2, #0
 8001468:	2110      	movs	r1, #16
 800146a:	0018      	movs	r0, r3
 800146c:	f001 ffed 	bl	800344a <HAL_GPIO_WritePin>

		 // Debug Message
		 sprintf(msg, "State C.\n\r");
 8001470:	4a22      	ldr	r2, [pc, #136]	; (80014fc <stateHandlerC+0xd0>)
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <stateHandlerC+0xd4>)
 8001474:	0011      	movs	r1, r2
 8001476:	0018      	movs	r0, r3
 8001478:	f007 fa00 	bl	800887c <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <stateHandlerC+0xd4>)
 800147e:	0018      	movs	r0, r3
 8001480:	f7fe fe4a 	bl	8000118 <strlen>
 8001484:	0003      	movs	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	2301      	movs	r3, #1
 800148a:	425b      	negs	r3, r3
 800148c:	491c      	ldr	r1, [pc, #112]	; (8001500 <stateHandlerC+0xd4>)
 800148e:	481d      	ldr	r0, [pc, #116]	; (8001504 <stateHandlerC+0xd8>)
 8001490:	f004 fe26 	bl	80060e0 <HAL_UART_Transmit>

		 // Turn off UART transmissions
		 HAL_UART_DeInit(&huart2);
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <stateHandlerC+0xd8>)
 8001496:	0018      	movs	r0, r3
 8001498:	f004 fde2 	bl	8006060 <HAL_UART_DeInit>

		 // Configure GPIO pin : PA2 (UART TX) to GPIO
		 turnUartIntoGPIO();
 800149c:	f000 f836 	bl	800150c <turnUartIntoGPIO>

		 // Set pin to toggle output based on TIM with frequency 1 Hz for 3 seconds
		 for (int i = 0; i < 6; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	e00d      	b.n	80014c2 <stateHandlerC+0x96>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80014a6:	23a0      	movs	r3, #160	; 0xa0
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	2104      	movs	r1, #4
 80014ac:	0018      	movs	r0, r3
 80014ae:	f001 ffe9 	bl	8003484 <HAL_GPIO_TogglePin>
			 HAL_Delay(500);	// 500 ms = 1 Hz
 80014b2:	23fa      	movs	r3, #250	; 0xfa
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 fd0c 	bl	8001ed4 <HAL_Delay>
		 for (int i = 0; i < 6; i++){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	ddee      	ble.n	80014a6 <stateHandlerC+0x7a>
		 }

		 // De-init GPIO PA2
		 HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	2104      	movs	r1, #4
 80014ce:	0018      	movs	r0, r3
 80014d0:	f001 fece 	bl	8003270 <HAL_GPIO_DeInit>

		 // Turn back into UART (Tx)
		 MX_USART2_UART_Init();
 80014d4:	f7ff fc40 	bl	8000d58 <MX_USART2_UART_Init>

		 // Return to State A
		 stateTracker = 1;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <stateHandlerC+0xdc>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
	 }
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b002      	add	sp, #8
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	20000004 	.word	0x20000004
 80014ec:	20000008 	.word	0x20000008
 80014f0:	2000000c 	.word	0x2000000c
 80014f4:	50000800 	.word	0x50000800
 80014f8:	50000400 	.word	0x50000400
 80014fc:	080092c8 	.word	0x080092c8
 8001500:	2000039c 	.word	0x2000039c
 8001504:	20000308 	.word	0x20000308
 8001508:	200003f8 	.word	0x200003f8

0800150c <turnUartIntoGPIO>:

	 /* turn UART into GPIO */
	 void turnUartIntoGPIO(void){
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
		 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	0018      	movs	r0, r3
 8001516:	2314      	movs	r3, #20
 8001518:	001a      	movs	r2, r3
 800151a:	2100      	movs	r1, #0
 800151c:	f007 f9ce 	bl	80088bc <memset>

		 __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <turnUartIntoGPIO+0x68>)
 8001522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <turnUartIntoGPIO+0x68>)
 8001526:	2101      	movs	r1, #1
 8001528:	430a      	orrs	r2, r1
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <turnUartIntoGPIO+0x68>)
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	2201      	movs	r2, #1
 8001532:	4013      	ands	r3, r2
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	683b      	ldr	r3, [r7, #0]

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Configure GPIO pin Output Level
 8001538:	23a0      	movs	r3, #160	; 0xa0
 800153a:	05db      	lsls	r3, r3, #23
 800153c:	2200      	movs	r2, #0
 800153e:	2104      	movs	r1, #4
 8001540:	0018      	movs	r0, r3
 8001542:	f001 ff82 	bl	800344a <HAL_GPIO_WritePin>

		 GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2204      	movs	r2, #4
 800154a:	601a      	str	r2, [r3, #0]
		 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2201      	movs	r2, #1
 8001550:	605a      	str	r2, [r3, #4]
		 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
		 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2202      	movs	r2, #2
 800155c:	60da      	str	r2, [r3, #12]
		 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	1d3a      	adds	r2, r7, #4
 8001560:	23a0      	movs	r3, #160	; 0xa0
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	0011      	movs	r1, r2
 8001566:	0018      	movs	r0, r3
 8001568:	f001 fd1e 	bl	8002fa8 <HAL_GPIO_Init>
	 }
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b006      	add	sp, #24
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_TIM_PeriodElapsedCallback>:

	 /* Controller Function for LED1, LED2 and LED3*/
	 // Description: Frequency currently determined by each timer's PSC value.
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

		 // TIM2 controls LED1
		 if(htim->Instance == TIM2){
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	05db      	lsls	r3, r3, #23
 8001588:	429a      	cmp	r2, r3
 800158a:	d109      	bne.n	80015a0 <HAL_TIM_PeriodElapsedCallback+0x28>
			 if (ledOneFlag == 1){
 800158c:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d152      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
				 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	0018      	movs	r0, r3
 800159a:	f001 ff73 	bl	8003484 <HAL_GPIO_TogglePin>
		 }
		 // TIM17 counts up to 1 ms
		 else if(htim->Instance == TIM17){
			 millisProgStart+=1;
		 }
	 }
 800159e:	e04c      	b.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
		 } else if(htim->Instance == TIM6){
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10b      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0x4a>
			 if (ledTwoFlag == 1) {
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d143      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
				 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	01db      	lsls	r3, r3, #7
 80015b6:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015b8:	0019      	movs	r1, r3
 80015ba:	0010      	movs	r0, r2
 80015bc:	f001 ff62 	bl	8003484 <HAL_GPIO_TogglePin>
	 }
 80015c0:	e03b      	b.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
		 } else if(htim->Instance == TIM7){
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d109      	bne.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x68>
			 if (ledThreeFlag == 1){
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d132      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
				 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015d6:	2110      	movs	r1, #16
 80015d8:	0018      	movs	r0, r3
 80015da:	f001 ff53 	bl	8003484 <HAL_GPIO_TogglePin>
	 }
 80015de:	e02c      	b.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
		 } else if(htim->Instance == TIM14){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11c      	bne.n	8001624 <HAL_TIM_PeriodElapsedCallback+0xac>
			 if (stateTracker == 1){
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d123      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
				 if (uartFlag == 1){
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d11f      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
					 sprintf(msg2, "Autumn2024 MX1 SID: 24429298, ADC Reading: %hu\r\n", potValue);
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	001a      	movs	r2, r3
 8001600:	491b      	ldr	r1, [pc, #108]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001604:	0018      	movs	r0, r3
 8001606:	f007 f939 	bl	800887c <siprintf>
					 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800160c:	0018      	movs	r0, r3
 800160e:	f7fe fd83 	bl	8000118 <strlen>
 8001612:	0003      	movs	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	2301      	movs	r3, #1
 8001618:	425b      	negs	r3, r3
 800161a:	4916      	ldr	r1, [pc, #88]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800161c:	4816      	ldr	r0, [pc, #88]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800161e:	f004 fd5f 	bl	80060e0 <HAL_UART_Transmit>
	 }
 8001622:	e00a      	b.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
		 else if(htim->Instance == TIM17){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d105      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0xc2>
			 millisProgStart+=1;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001638:	801a      	strh	r2, [r3, #0]
	 }
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	20000004 	.word	0x20000004
 8001648:	50000800 	.word	0x50000800
 800164c:	40001000 	.word	0x40001000
 8001650:	20000008 	.word	0x20000008
 8001654:	50000400 	.word	0x50000400
 8001658:	40001400 	.word	0x40001400
 800165c:	2000000c 	.word	0x2000000c
 8001660:	40002000 	.word	0x40002000
 8001664:	200003f8 	.word	0x200003f8
 8001668:	20000000 	.word	0x20000000
 800166c:	200003f6 	.word	0x200003f6
 8001670:	080092d4 	.word	0x080092d4
 8001674:	200003b4 	.word	0x200003b4
 8001678:	20000308 	.word	0x20000308
 800167c:	40014800 	.word	0x40014800
 8001680:	200003fc 	.word	0x200003fc

08001684 <HAL_UART_RxCpltCallback>:

	 /* UART Receive Interrupt Handler */
	 // Handles receiving of bytes
	 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

		 sprintf(msg, "Value Received: %s\r\n", msgRx);
 800168c:	4a3d      	ldr	r2, [pc, #244]	; (8001784 <HAL_UART_RxCpltCallback+0x100>)
 800168e:	493e      	ldr	r1, [pc, #248]	; (8001788 <HAL_UART_RxCpltCallback+0x104>)
 8001690:	4b3e      	ldr	r3, [pc, #248]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 8001692:	0018      	movs	r0, r3
 8001694:	f007 f8f2 	bl	800887c <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001698:	4b3c      	ldr	r3, [pc, #240]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 800169a:	0018      	movs	r0, r3
 800169c:	f7fe fd3c 	bl	8000118 <strlen>
 80016a0:	0003      	movs	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	2301      	movs	r3, #1
 80016a6:	425b      	negs	r3, r3
 80016a8:	4938      	ldr	r1, [pc, #224]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 80016aa:	4839      	ldr	r0, [pc, #228]	; (8001790 <HAL_UART_RxCpltCallback+0x10c>)
 80016ac:	f004 fd18 	bl	80060e0 <HAL_UART_Transmit>

		 if (strcmp(msgRx,"j") == 0) {
 80016b0:	4a38      	ldr	r2, [pc, #224]	; (8001794 <HAL_UART_RxCpltCallback+0x110>)
 80016b2:	4b34      	ldr	r3, [pc, #208]	; (8001784 <HAL_UART_RxCpltCallback+0x100>)
 80016b4:	0011      	movs	r1, r2
 80016b6:	0018      	movs	r0, r3
 80016b8:	f7fe fd24 	bl	8000104 <strcmp>
 80016bc:	1e03      	subs	r3, r0, #0
 80016be:	d14a      	bne.n	8001756 <HAL_UART_RxCpltCallback+0xd2>
			 if (stateTracker == 1){
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_UART_RxCpltCallback+0x114>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d133      	bne.n	8001730 <HAL_UART_RxCpltCallback+0xac>

				if (uartFlag == 0){
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_UART_RxCpltCallback+0x118>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d115      	bne.n	80016fc <HAL_UART_RxCpltCallback+0x78>
					sprintf(msg, "Turning ON UART.\r\n");
 80016d0:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <HAL_UART_RxCpltCallback+0x11c>)
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 80016d4:	0011      	movs	r1, r2
 80016d6:	0018      	movs	r0, r3
 80016d8:	f007 f8d0 	bl	800887c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 80016de:	0018      	movs	r0, r3
 80016e0:	f7fe fd1a 	bl	8000118 <strlen>
 80016e4:	0003      	movs	r3, r0
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	2301      	movs	r3, #1
 80016ea:	425b      	negs	r3, r3
 80016ec:	4927      	ldr	r1, [pc, #156]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 80016ee:	4828      	ldr	r0, [pc, #160]	; (8001790 <HAL_UART_RxCpltCallback+0x10c>)
 80016f0:	f004 fcf6 	bl	80060e0 <HAL_UART_Transmit>
					uartFlag = 1;
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_UART_RxCpltCallback+0x118>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
			 }
		 } else {
			 sprintf(msg, "Incorrect key.\r\n");
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
		 }
	 }
 80016fa:	e03e      	b.n	800177a <HAL_UART_RxCpltCallback+0xf6>
				} else if (uartFlag == 1) {
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_UART_RxCpltCallback+0x118>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d13a      	bne.n	800177a <HAL_UART_RxCpltCallback+0xf6>
					sprintf(msg, "Turning OFF UART.\r\n");
 8001704:	4a27      	ldr	r2, [pc, #156]	; (80017a4 <HAL_UART_RxCpltCallback+0x120>)
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 8001708:	0011      	movs	r1, r2
 800170a:	0018      	movs	r0, r3
 800170c:	f007 f8b6 	bl	800887c <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 8001712:	0018      	movs	r0, r3
 8001714:	f7fe fd00 	bl	8000118 <strlen>
 8001718:	0003      	movs	r3, r0
 800171a:	b29a      	uxth	r2, r3
 800171c:	2301      	movs	r3, #1
 800171e:	425b      	negs	r3, r3
 8001720:	491a      	ldr	r1, [pc, #104]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 8001722:	481b      	ldr	r0, [pc, #108]	; (8001790 <HAL_UART_RxCpltCallback+0x10c>)
 8001724:	f004 fcdc 	bl	80060e0 <HAL_UART_Transmit>
					uartFlag = 0;
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_UART_RxCpltCallback+0x118>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
	 }
 800172e:	e024      	b.n	800177a <HAL_UART_RxCpltCallback+0xf6>
				 sprintf(msg, "Cannot disable, not in State A.\r\n");
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_UART_RxCpltCallback+0x124>)
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 8001734:	0011      	movs	r1, r2
 8001736:	0018      	movs	r0, r3
 8001738:	f007 f8a0 	bl	800887c <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 800173e:	0018      	movs	r0, r3
 8001740:	f7fe fcea 	bl	8000118 <strlen>
 8001744:	0003      	movs	r3, r0
 8001746:	b29a      	uxth	r2, r3
 8001748:	2301      	movs	r3, #1
 800174a:	425b      	negs	r3, r3
 800174c:	490f      	ldr	r1, [pc, #60]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 800174e:	4810      	ldr	r0, [pc, #64]	; (8001790 <HAL_UART_RxCpltCallback+0x10c>)
 8001750:	f004 fcc6 	bl	80060e0 <HAL_UART_Transmit>
	 }
 8001754:	e011      	b.n	800177a <HAL_UART_RxCpltCallback+0xf6>
			 sprintf(msg, "Incorrect key.\r\n");
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <HAL_UART_RxCpltCallback+0x128>)
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f007 f88d 	bl	800887c <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 8001764:	0018      	movs	r0, r3
 8001766:	f7fe fcd7 	bl	8000118 <strlen>
 800176a:	0003      	movs	r3, r0
 800176c:	b29a      	uxth	r2, r3
 800176e:	2301      	movs	r3, #1
 8001770:	425b      	negs	r3, r3
 8001772:	4906      	ldr	r1, [pc, #24]	; (800178c <HAL_UART_RxCpltCallback+0x108>)
 8001774:	4806      	ldr	r0, [pc, #24]	; (8001790 <HAL_UART_RxCpltCallback+0x10c>)
 8001776:	f004 fcb3 	bl	80060e0 <HAL_UART_Transmit>
	 }
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	b002      	add	sp, #8
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	200003f0 	.word	0x200003f0
 8001788:	08009308 	.word	0x08009308
 800178c:	2000039c 	.word	0x2000039c
 8001790:	20000308 	.word	0x20000308
 8001794:	08009320 	.word	0x08009320
 8001798:	200003f8 	.word	0x200003f8
 800179c:	20000000 	.word	0x20000000
 80017a0:	08009324 	.word	0x08009324
 80017a4:	08009338 	.word	0x08009338
 80017a8:	0800934c 	.word	0x0800934c
 80017ac:	08009370 	.word	0x08009370

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <Error_Handler+0x8>
	...

080017bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_MspInit+0x4c>)
 80017c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_MspInit+0x4c>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_MspInit+0x4c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_MspInit+0x4c>)
 80017dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_MspInit+0x4c>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	0549      	lsls	r1, r1, #21
 80017e4:	430a      	orrs	r2, r1
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_MspInit+0x4c>)
 80017ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	055b      	lsls	r3, r3, #21
 80017f0:	4013      	ands	r3, r2
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80017f6:	23c0      	movs	r3, #192	; 0xc0
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 fb8e 	bl	8001f1c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b002      	add	sp, #8
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b08b      	sub	sp, #44	; 0x2c
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	2414      	movs	r4, #20
 8001816:	193b      	adds	r3, r7, r4
 8001818:	0018      	movs	r0, r3
 800181a:	2314      	movs	r3, #20
 800181c:	001a      	movs	r2, r3
 800181e:	2100      	movs	r1, #0
 8001820:	f007 f84c 	bl	80088bc <memset>
  if(hadc->Instance==ADC1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <HAL_ADC_MspInit+0x80>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d129      	bne.n	8001882 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_ADC_MspInit+0x84>)
 8001830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_ADC_MspInit+0x84>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0349      	lsls	r1, r1, #13
 8001838:	430a      	orrs	r2, r1
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_ADC_MspInit+0x84>)
 800183e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	035b      	lsls	r3, r3, #13
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_ADC_MspInit+0x84>)
 800184c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_ADC_MspInit+0x84>)
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_ADC_MspInit+0x84>)
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185a:	2201      	movs	r2, #1
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 8001862:	193b      	adds	r3, r7, r4
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001868:	193b      	adds	r3, r7, r4
 800186a:	2203      	movs	r2, #3
 800186c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	193b      	adds	r3, r7, r4
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001874:	193a      	adds	r2, r7, r4
 8001876:	23a0      	movs	r3, #160	; 0xa0
 8001878:	05db      	lsls	r3, r3, #23
 800187a:	0011      	movs	r1, r2
 800187c:	0018      	movs	r0, r3
 800187e:	f001 fb93 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	46bd      	mov	sp, r7
 8001886:	b00b      	add	sp, #44	; 0x2c
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40012400 	.word	0x40012400
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b097      	sub	sp, #92	; 0x5c
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	2344      	movs	r3, #68	; 0x44
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	0018      	movs	r0, r3
 80018a2:	2314      	movs	r3, #20
 80018a4:	001a      	movs	r2, r3
 80018a6:	2100      	movs	r1, #0
 80018a8:	f007 f808 	bl	80088bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ac:	2410      	movs	r4, #16
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	0018      	movs	r0, r3
 80018b2:	2334      	movs	r3, #52	; 0x34
 80018b4:	001a      	movs	r2, r3
 80018b6:	2100      	movs	r1, #0
 80018b8:	f007 f800 	bl	80088bc <memset>
  if(hi2c->Instance==I2C1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a22      	ldr	r2, [pc, #136]	; (800194c <HAL_I2C_MspInit+0xb8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d13e      	bne.n	8001944 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	2220      	movs	r2, #32
 80018ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018cc:	193b      	adds	r3, r7, r4
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	0018      	movs	r0, r3
 80018d6:	f002 ffa7 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 80018da:	1e03      	subs	r3, r0, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018de:	f7ff ff67 	bl	80017b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_I2C_MspInit+0xbc>)
 80018e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_I2C_MspInit+0xbc>)
 80018e8:	2102      	movs	r1, #2
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	; 0x34
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_I2C_MspInit+0xbc>)
 80018f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f2:	2202      	movs	r2, #2
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018fa:	2144      	movs	r1, #68	; 0x44
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	22c0      	movs	r2, #192	; 0xc0
 8001900:	0092      	lsls	r2, r2, #2
 8001902:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2212      	movs	r2, #18
 8001908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2206      	movs	r2, #6
 800191a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	187b      	adds	r3, r7, r1
 800191e:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_I2C_MspInit+0xc0>)
 8001920:	0019      	movs	r1, r3
 8001922:	0010      	movs	r0, r2
 8001924:	f001 fb40 	bl	8002fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_I2C_MspInit+0xbc>)
 800192a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_I2C_MspInit+0xbc>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0389      	lsls	r1, r1, #14
 8001932:	430a      	orrs	r2, r1
 8001934:	63da      	str	r2, [r3, #60]	; 0x3c
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_I2C_MspInit+0xbc>)
 8001938:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	039b      	lsls	r3, r3, #14
 800193e:	4013      	ands	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001944:	46c0      	nop			; (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b017      	add	sp, #92	; 0x5c
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	40005400 	.word	0x40005400
 8001950:	40021000 	.word	0x40021000
 8001954:	50000400 	.word	0x50000400

08001958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	05db      	lsls	r3, r3, #23
 8001968:	429a      	cmp	r2, r3
 800196a:	d114      	bne.n	8001996 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196c:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 800196e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	63da      	str	r2, [r3, #60]	; 0x3c
 8001978:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 800197a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197c:	2201      	movs	r2, #1
 800197e:	4013      	ands	r3, r2
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	200f      	movs	r0, #15
 800198a:	f001 f9ff 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800198e:	200f      	movs	r0, #15
 8001990:	f001 fa11 	bl	8002db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001994:	e07c      	b.n	8001a90 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM3)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a40      	ldr	r2, [pc, #256]	; (8001a9c <HAL_TIM_Base_MspInit+0x144>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d10c      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 80019a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a4:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 80019a6:	2102      	movs	r1, #2
 80019a8:	430a      	orrs	r2, r1
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80019ac:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	2202      	movs	r2, #2
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	69bb      	ldr	r3, [r7, #24]
}
 80019b8:	e06a      	b.n	8001a90 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM6)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a38      	ldr	r2, [pc, #224]	; (8001aa0 <HAL_TIM_Base_MspInit+0x148>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d114      	bne.n	80019ee <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019c4:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 80019c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019c8:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 80019ca:	2110      	movs	r1, #16
 80019cc:	430a      	orrs	r2, r1
 80019ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80019d0:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	2210      	movs	r2, #16
 80019d6:	4013      	ands	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	2011      	movs	r0, #17
 80019e2:	f001 f9d3 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80019e6:	2011      	movs	r0, #17
 80019e8:	f001 f9e5 	bl	8002db6 <HAL_NVIC_EnableIRQ>
}
 80019ec:	e050      	b.n	8001a90 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM7)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2c      	ldr	r2, [pc, #176]	; (8001aa4 <HAL_TIM_Base_MspInit+0x14c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d114      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 80019fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 80019fe:	2120      	movs	r1, #32
 8001a00:	430a      	orrs	r2, r1
 8001a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 8001a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a08:	2220      	movs	r2, #32
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	2012      	movs	r0, #18
 8001a16:	f001 f9b9 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8001a1a:	2012      	movs	r0, #18
 8001a1c:	f001 f9cb 	bl	8002db6 <HAL_NVIC_EnableIRQ>
}
 8001a20:	e036      	b.n	8001a90 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM14)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <HAL_TIM_Base_MspInit+0x150>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d116      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 8001a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0209      	lsls	r1, r1, #8
 8001a36:	430a      	orrs	r2, r1
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 8001a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	4013      	ands	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	2013      	movs	r0, #19
 8001a4e:	f001 f99d 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001a52:	2013      	movs	r0, #19
 8001a54:	f001 f9af 	bl	8002db6 <HAL_NVIC_EnableIRQ>
}
 8001a58:	e01a      	b.n	8001a90 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM17)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <HAL_TIM_Base_MspInit+0x154>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d115      	bne.n	8001a90 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 8001a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 8001a6a:	2180      	movs	r1, #128	; 0x80
 8001a6c:	02c9      	lsls	r1, r1, #11
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x140>)
 8001a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	02db      	lsls	r3, r3, #11
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2016      	movs	r0, #22
 8001a86:	f001 f981 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001a8a:	2016      	movs	r0, #22
 8001a8c:	f001 f993 	bl	8002db6 <HAL_NVIC_EnableIRQ>
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b008      	add	sp, #32
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	40001000 	.word	0x40001000
 8001aa4:	40001400 	.word	0x40001400
 8001aa8:	40002000 	.word	0x40002000
 8001aac:	40014800 	.word	0x40014800

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	240c      	movs	r4, #12
 8001aba:	193b      	adds	r3, r7, r4
 8001abc:	0018      	movs	r0, r3
 8001abe:	2314      	movs	r3, #20
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	f006 fefa 	bl	80088bc <memset>
  if(htim->Instance==TIM3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_TIM_MspPostInit+0x70>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d122      	bne.n	8001b18 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_TIM_MspPostInit+0x74>)
 8001ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_TIM_MspPostInit+0x74>)
 8001ad8:	2101      	movs	r1, #1
 8001ada:	430a      	orrs	r2, r1
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_TIM_MspPostInit+0x74>)
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aea:	0021      	movs	r1, r4
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2202      	movs	r2, #2
 8001af6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2200      	movs	r2, #0
 8001b02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2201      	movs	r2, #1
 8001b08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	187a      	adds	r2, r7, r1
 8001b0c:	23a0      	movs	r3, #160	; 0xa0
 8001b0e:	05db      	lsls	r3, r3, #23
 8001b10:	0011      	movs	r1, r2
 8001b12:	0018      	movs	r0, r3
 8001b14:	f001 fa48 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b009      	add	sp, #36	; 0x24
 8001b1e:	bd90      	pop	{r4, r7, pc}
 8001b20:	40000400 	.word	0x40000400
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b097      	sub	sp, #92	; 0x5c
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	2344      	movs	r3, #68	; 0x44
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	0018      	movs	r0, r3
 8001b36:	2314      	movs	r3, #20
 8001b38:	001a      	movs	r2, r3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f006 febe 	bl	80088bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b40:	2410      	movs	r4, #16
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	0018      	movs	r0, r3
 8001b46:	2334      	movs	r3, #52	; 0x34
 8001b48:	001a      	movs	r2, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	f006 feb6 	bl	80088bc <memset>
  if(huart->Instance==USART2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_UART_MspInit+0xc8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d146      	bne.n	8001be8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f002 fe5d 	bl	8004828 <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b72:	f7ff fe1d 	bl	80017b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <HAL_UART_MspInit+0xcc>)
 8001b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_UART_MspInit+0xcc>)
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0289      	lsls	r1, r1, #10
 8001b80:	430a      	orrs	r2, r1
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_UART_MspInit+0xcc>)
 8001b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	029b      	lsls	r3, r3, #10
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_UART_MspInit+0xcc>)
 8001b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_UART_MspInit+0xcc>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_UART_MspInit+0xcc>)
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001baa:	2144      	movs	r1, #68	; 0x44
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	2201      	movs	r2, #1
 8001bbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	187a      	adds	r2, r7, r1
 8001bcc:	23a0      	movs	r3, #160	; 0xa0
 8001bce:	05db      	lsls	r3, r3, #23
 8001bd0:	0011      	movs	r1, r2
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f001 f9e8 	bl	8002fa8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	201c      	movs	r0, #28
 8001bde:	f001 f8d5 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001be2:	201c      	movs	r0, #28
 8001be4:	f001 f8e7 	bl	8002db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b017      	add	sp, #92	; 0x5c
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	40004400 	.word	0x40004400
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_UART_MspDeInit+0x38>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d10e      	bne.n	8001c28 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_UART_MspDeInit+0x3c>)
 8001c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_UART_MspDeInit+0x3c>)
 8001c10:	4909      	ldr	r1, [pc, #36]	; (8001c38 <HAL_UART_MspDeInit+0x40>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART2_TX_Pin|USART2_RX_Pin);
 8001c16:	23a0      	movs	r3, #160	; 0xa0
 8001c18:	05db      	lsls	r3, r3, #23
 8001c1a:	210c      	movs	r1, #12
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f001 fb27 	bl	8003270 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001c22:	201c      	movs	r0, #28
 8001c24:	f001 f8d7 	bl	8002dd6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40004400 	.word	0x40004400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	fffdffff 	.word	0xfffdffff

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c4c:	46c0      	nop			; (mov r8, r8)
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c60:	f000 f91c 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <TIM2_IRQHandler+0x14>)
 8001c72:	0018      	movs	r0, r3
 8001c74:	f003 fa08 	bl	8005088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	20000140 	.word	0x20000140

08001c84 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f003 f9fc 	bl	8005088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	200001d8 	.word	0x200001d8

08001c9c <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <TIM7_LPTIM2_IRQHandler+0x14>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f003 f9f0 	bl	8005088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	20000224 	.word	0x20000224

08001cb4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <TIM14_IRQHandler+0x14>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f003 f9e4 	bl	8005088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	20000270 	.word	0x20000270

08001ccc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <TIM17_IRQHandler+0x14>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f003 f9d8 	bl	8005088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	200002bc 	.word	0x200002bc

08001ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <USART2_IRQHandler+0x14>)
 8001cea:	0018      	movs	r0, r3
 8001cec:	f004 fafa 	bl	80062e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	20000308 	.word	0x20000308

08001cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <_sbrk+0x5c>)
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <_sbrk+0x60>)
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <_sbrk+0x64>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <_sbrk+0x68>)
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	18d3      	adds	r3, r2, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d207      	bcs.n	8001d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d2c:	f006 fdce 	bl	80088cc <__errno>
 8001d30:	0003      	movs	r3, r0
 8001d32:	220c      	movs	r2, #12
 8001d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	425b      	negs	r3, r3
 8001d3a:	e009      	b.n	8001d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	18d2      	adds	r2, r2, r3
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <_sbrk+0x64>)
 8001d4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b006      	add	sp, #24
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20009000 	.word	0x20009000
 8001d5c:	00000400 	.word	0x00000400
 8001d60:	20000400 	.word	0x20000400
 8001d64:	20000558 	.word	0x20000558

08001d68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d74:	480d      	ldr	r0, [pc, #52]	; (8001dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d78:	f7ff fff6 	bl	8001d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	; (8001db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <LoopForever+0xe>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <LoopForever+0x16>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001da2:	f006 fd99 	bl	80088d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001da6:	f7fe fc55 	bl	8000654 <main>

08001daa <LoopForever>:

LoopForever:
  b LoopForever
 8001daa:	e7fe      	b.n	8001daa <LoopForever>
  ldr   r0, =_estack
 8001dac:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001db8:	080094c0 	.word	0x080094c0
  ldr r2, =_sbss
 8001dbc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001dc0:	20000554 	.word	0x20000554

08001dc4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_COMP_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_Init+0x3c>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_Init+0x3c>)
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0049      	lsls	r1, r1, #1
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f810 	bl	8001e08 <HAL_InitTick>
 8001de8:	1e03      	subs	r3, r0, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e001      	b.n	8001df8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001df4:	f7ff fce2 	bl	80017bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df8:	1dfb      	adds	r3, r7, #7
 8001dfa:	781b      	ldrb	r3, [r3, #0]
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40022000 	.word	0x40022000

08001e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e10:	230f      	movs	r3, #15
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_InitTick+0x88>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d02b      	beq.n	8001e78 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_InitTick+0x8c>)
 8001e22:	681c      	ldr	r4, [r3, #0]
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_InitTick+0x88>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	0019      	movs	r1, r3
 8001e2a:	23fa      	movs	r3, #250	; 0xfa
 8001e2c:	0098      	lsls	r0, r3, #2
 8001e2e:	f7fe f985 	bl	800013c <__udivsi3>
 8001e32:	0003      	movs	r3, r0
 8001e34:	0019      	movs	r1, r3
 8001e36:	0020      	movs	r0, r4
 8001e38:	f7fe f980 	bl	800013c <__udivsi3>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 ffd9 	bl	8002df6 <HAL_SYSTICK_Config>
 8001e44:	1e03      	subs	r3, r0, #0
 8001e46:	d112      	bne.n	8001e6e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d80a      	bhi.n	8001e64 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	2301      	movs	r3, #1
 8001e52:	425b      	negs	r3, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 ff98 	bl	8002d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_InitTick+0x90>)
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e00d      	b.n	8001e80 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e64:	230f      	movs	r3, #15
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e008      	b.n	8001e80 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e6e:	230f      	movs	r3, #15
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	e003      	b.n	8001e80 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e78:	230f      	movs	r3, #15
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e80:	230f      	movs	r3, #15
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b005      	add	sp, #20
 8001e8c:	bd90      	pop	{r4, r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	20000018 	.word	0x20000018
 8001e94:	20000010 	.word	0x20000010
 8001e98:	20000014 	.word	0x20000014

08001e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_IncTick+0x1c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_IncTick+0x20>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	18d2      	adds	r2, r2, r3
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_IncTick+0x20>)
 8001eae:	601a      	str	r2, [r3, #0]
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	20000018 	.word	0x20000018
 8001ebc:	20000404 	.word	0x20000404

08001ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <HAL_GetTick+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	20000404 	.word	0x20000404

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff fff0 	bl	8001ec0 <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3301      	adds	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	189b      	adds	r3, r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	f7ff ffe0 	bl	8001ec0 <HAL_GetTick>
 8001f00:	0002      	movs	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b004      	add	sp, #16
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	20000018 	.word	0x20000018

08001f1c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	40010000 	.word	0x40010000
 8001f44:	fffff9ff 	.word	0xfffff9ff

08001f48 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001f58:	401a      	ands	r2, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b002      	add	sp, #8
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	fe3fffff 	.word	0xfe3fffff

08001f70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	23e0      	movs	r3, #224	; 0xe0
 8001f7e:	045b      	lsls	r3, r3, #17
 8001f80:	4013      	ands	r3, r2
}
 8001f82:	0018      	movs	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	2107      	movs	r1, #7
 8001fa2:	4091      	lsls	r1, r2
 8001fa4:	000a      	movs	r2, r1
 8001fa6:	43d2      	mvns	r2, r2
 8001fa8:	401a      	ands	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2104      	movs	r1, #4
 8001fae:	400b      	ands	r3, r1
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4099      	lsls	r1, r3
 8001fb4:	000b      	movs	r3, r1
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b004      	add	sp, #16
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	2107      	movs	r1, #7
 8001fda:	4091      	lsls	r1, r2
 8001fdc:	000a      	movs	r2, r1
 8001fde:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001fe6:	40da      	lsrs	r2, r3
 8001fe8:	0013      	movs	r3, r2
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	23c0      	movs	r3, #192	; 0xc0
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	4013      	ands	r3, r2
 8002004:	d101      	bne.n	800200a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800200a:	2300      	movs	r3, #0
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	211f      	movs	r1, #31
 8002028:	400a      	ands	r2, r1
 800202a:	210f      	movs	r1, #15
 800202c:	4091      	lsls	r1, r2
 800202e:	000a      	movs	r2, r1
 8002030:	43d2      	mvns	r2, r2
 8002032:	401a      	ands	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0e9b      	lsrs	r3, r3, #26
 8002038:	210f      	movs	r1, #15
 800203a:	4019      	ands	r1, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	201f      	movs	r0, #31
 8002040:	4003      	ands	r3, r0
 8002042:	4099      	lsls	r1, r3
 8002044:	000b      	movs	r3, r1
 8002046:	431a      	orrs	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}

08002054 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	035b      	lsls	r3, r3, #13
 8002066:	0b5b      	lsrs	r3, r3, #13
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	46bd      	mov	sp, r7
 8002072:	b002      	add	sp, #8
 8002074:	bd80      	pop	{r7, pc}

08002076 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	0352      	lsls	r2, r2, #13
 8002088:	0b52      	lsrs	r2, r2, #13
 800208a:	43d2      	mvns	r2, r2
 800208c:	401a      	ands	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	0212      	lsls	r2, r2, #8
 80020b0:	43d2      	mvns	r2, r2
 80020b2:	401a      	ands	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	400b      	ands	r3, r1
 80020bc:	4904      	ldr	r1, [pc, #16]	; (80020d0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80020be:	400b      	ands	r3, r1
 80020c0:	431a      	orrs	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	07ffff00 	.word	0x07ffff00

080020d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	0552      	lsls	r2, r2, #21
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	6fffffe8 	.word	0x6fffffe8

080020fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	401a      	ands	r2, r3
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	055b      	lsls	r3, r3, #21
 8002112:	429a      	cmp	r2, r3
 8002114:	d101      	bne.n	800211a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800211a:	2300      	movs	r3, #0
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <LL_ADC_Enable+0x20>)
 8002132:	4013      	ands	r3, r2
 8002134:	2201      	movs	r2, #1
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}
 8002144:	7fffffe8 	.word	0x7fffffe8

08002148 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2201      	movs	r2, #1
 8002156:	4013      	ands	r3, r2
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <LL_ADC_IsEnabled+0x18>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <LL_ADC_IsEnabled+0x1a>
 8002160:	2300      	movs	r3, #0
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <LL_ADC_REG_StartConversion+0x20>)
 800217a:	4013      	ands	r3, r2
 800217c:	2204      	movs	r2, #4
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}
 800218c:	7fffffe8 	.word	0x7fffffe8

08002190 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2204      	movs	r2, #4
 800219e:	4013      	ands	r3, r2
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d101      	bne.n	80021a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021bc:	231f      	movs	r3, #31
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e17f      	b.n	80024da <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff fb11 	bl	800180c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2254      	movs	r2, #84	; 0x54
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff ff7d 	bl	80020fc <LL_ADC_IsInternalRegulatorEnabled>
 8002202:	1e03      	subs	r3, r0, #0
 8002204:	d115      	bne.n	8002232 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0018      	movs	r0, r3
 800220c:	f7ff ff62 	bl	80020d4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002210:	4bb4      	ldr	r3, [pc, #720]	; (80024e4 <HAL_ADC_Init+0x330>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	49b4      	ldr	r1, [pc, #720]	; (80024e8 <HAL_ADC_Init+0x334>)
 8002216:	0018      	movs	r0, r3
 8002218:	f7fd ff90 	bl	800013c <__udivsi3>
 800221c:	0003      	movs	r3, r0
 800221e:	3301      	adds	r3, #1
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002224:	e002      	b.n	800222c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3b01      	subs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f9      	bne.n	8002226 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff ff60 	bl	80020fc <LL_ADC_IsInternalRegulatorEnabled>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d10f      	bne.n	8002260 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	2210      	movs	r2, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	2201      	movs	r2, #1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002258:	231f      	movs	r3, #31
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0018      	movs	r0, r3
 8002266:	f7ff ff93 	bl	8002190 <LL_ADC_REG_IsConversionOngoing>
 800226a:	0003      	movs	r3, r0
 800226c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	2210      	movs	r2, #16
 8002274:	4013      	ands	r3, r2
 8002276:	d000      	beq.n	800227a <HAL_ADC_Init+0xc6>
 8002278:	e122      	b.n	80024c0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d000      	beq.n	8002282 <HAL_ADC_Init+0xce>
 8002280:	e11e      	b.n	80024c0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	4a99      	ldr	r2, [pc, #612]	; (80024ec <HAL_ADC_Init+0x338>)
 8002288:	4013      	ands	r3, r2
 800228a:	2202      	movs	r2, #2
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0018      	movs	r0, r3
 8002298:	f7ff ff56 	bl	8002148 <LL_ADC_IsEnabled>
 800229c:	1e03      	subs	r3, r0, #0
 800229e:	d000      	beq.n	80022a2 <HAL_ADC_Init+0xee>
 80022a0:	e0ad      	b.n	80023fe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7e1b      	ldrb	r3, [r3, #24]
 80022aa:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7e5b      	ldrb	r3, [r3, #25]
 80022b2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022b4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7e9b      	ldrb	r3, [r3, #26]
 80022ba:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022bc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <HAL_ADC_Init+0x118>
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	015b      	lsls	r3, r3, #5
 80022ca:	e000      	b.n	80022ce <HAL_ADC_Init+0x11a>
 80022cc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022ce:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022d4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da04      	bge.n	80022e8 <HAL_ADC_Init+0x134>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	e001      	b.n	80022ec <HAL_ADC_Init+0x138>
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80022ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	5c5b      	ldrb	r3, [r3, r1]
 80022f4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022f6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2220      	movs	r2, #32
 8002302:	5c9b      	ldrb	r3, [r3, r2]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d115      	bne.n	8002334 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7e9b      	ldrb	r3, [r3, #26]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	0252      	lsls	r2, r2, #9
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e00b      	b.n	8002334 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	2220      	movs	r2, #32
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2201      	movs	r2, #1
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002340:	23e0      	movs	r3, #224	; 0xe0
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800234a:	4313      	orrs	r3, r2
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a65      	ldr	r2, [pc, #404]	; (80024f0 <HAL_ADC_Init+0x33c>)
 800235a:	4013      	ands	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	430a      	orrs	r2, r1
 8002366:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0f9b      	lsrs	r3, r3, #30
 800236e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002374:	4313      	orrs	r3, r2
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	223c      	movs	r2, #60	; 0x3c
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d111      	bne.n	80023aa <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	0f9b      	lsrs	r3, r3, #30
 800238c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002392:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002398:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800239e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	2201      	movs	r2, #1
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	4a50      	ldr	r2, [pc, #320]	; (80024f4 <HAL_ADC_Init+0x340>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	430a      	orrs	r2, r1
 80023be:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	23c0      	movs	r3, #192	; 0xc0
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d018      	beq.n	80023fe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	05db      	lsls	r3, r3, #23
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d012      	beq.n	80023fe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d00c      	beq.n	80023fe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80023e4:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <HAL_ADC_Init+0x344>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a44      	ldr	r2, [pc, #272]	; (80024fc <HAL_ADC_Init+0x348>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	23f0      	movs	r3, #240	; 0xf0
 80023f4:	039b      	lsls	r3, r3, #14
 80023f6:	401a      	ands	r2, r3
 80023f8:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <HAL_ADC_Init+0x344>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	001a      	movs	r2, r3
 8002408:	2100      	movs	r1, #0
 800240a:	f7ff fdbe 	bl	8001f8a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	493a      	ldr	r1, [pc, #232]	; (8002500 <HAL_ADC_Init+0x34c>)
 8002418:	001a      	movs	r2, r3
 800241a:	f7ff fdb6 	bl	8001f8a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2110      	movs	r1, #16
 8002432:	4249      	negs	r1, r1
 8002434:	430a      	orrs	r2, r1
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
 8002438:	e018      	b.n	800246c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	039b      	lsls	r3, r3, #14
 8002442:	429a      	cmp	r2, r3
 8002444:	d112      	bne.n	800246c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	3b01      	subs	r3, #1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	221c      	movs	r2, #28
 8002456:	4013      	ands	r3, r2
 8002458:	2210      	movs	r2, #16
 800245a:	4252      	negs	r2, r2
 800245c:	409a      	lsls	r2, r3
 800245e:	0011      	movs	r1, r2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2100      	movs	r1, #0
 8002472:	0018      	movs	r0, r3
 8002474:	f7ff fda6 	bl	8001fc4 <LL_ADC_GetSamplingTimeCommonChannels>
 8002478:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800247e:	429a      	cmp	r2, r3
 8002480:	d10b      	bne.n	800249a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	2203      	movs	r2, #3
 800248e:	4393      	bics	r3, r2
 8002490:	2201      	movs	r2, #1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002498:	e01c      	b.n	80024d4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	2212      	movs	r2, #18
 80024a0:	4393      	bics	r3, r2
 80024a2:	2210      	movs	r2, #16
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2201      	movs	r2, #1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80024b6:	231f      	movs	r3, #31
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024be:	e009      	b.n	80024d4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	2210      	movs	r2, #16
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024cc:	231f      	movs	r3, #31
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80024d4:	231f      	movs	r3, #31
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b008      	add	sp, #32
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	20000010 	.word	0x20000010
 80024e8:	00030d40 	.word	0x00030d40
 80024ec:	fffffefd 	.word	0xfffffefd
 80024f0:	ffde0201 	.word	0xffde0201
 80024f4:	1ffffc02 	.word	0x1ffffc02
 80024f8:	40012708 	.word	0x40012708
 80024fc:	ffc3ffff 	.word	0xffc3ffff
 8002500:	07ffff04 	.word	0x07ffff04

08002504 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b08      	cmp	r3, #8
 8002514:	d102      	bne.n	800251c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002516:	2308      	movs	r3, #8
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	e00f      	b.n	800253c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	4013      	ands	r3, r2
 8002526:	d007      	beq.n	8002538 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	2220      	movs	r2, #32
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e072      	b.n	800261e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002538:	2304      	movs	r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800253c:	f7ff fcc0 	bl	8001ec0 <HAL_GetTick>
 8002540:	0003      	movs	r3, r0
 8002542:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002544:	e01f      	b.n	8002586 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	3301      	adds	r3, #1
 800254a:	d01c      	beq.n	8002586 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800254c:	f7ff fcb8 	bl	8001ec0 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d302      	bcc.n	8002562 <HAL_ADC_PollForConversion+0x5e>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d111      	bne.n	8002586 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	d10b      	bne.n	8002586 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	2204      	movs	r2, #4
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2254      	movs	r2, #84	; 0x54
 800257e:	2100      	movs	r1, #0
 8002580:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e04b      	b.n	800261e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	d0d9      	beq.n	8002546 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	0092      	lsls	r2, r2, #2
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff fd24 	bl	8001ff2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025aa:	1e03      	subs	r3, r0, #0
 80025ac:	d02e      	beq.n	800260c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7e9b      	ldrb	r3, [r3, #26]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d12a      	bne.n	800260c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2208      	movs	r2, #8
 80025be:	4013      	ands	r3, r2
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d123      	bne.n	800260c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7ff fde1 	bl	8002190 <LL_ADC_REG_IsConversionOngoing>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d110      	bne.n	80025f4 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	210c      	movs	r1, #12
 80025de:	438a      	bics	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	4a10      	ldr	r2, [pc, #64]	; (8002628 <HAL_ADC_PollForConversion+0x124>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	2201      	movs	r2, #1
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	; 0x58
 80025f2:	e00b      	b.n	800260c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	2220      	movs	r2, #32
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	2201      	movs	r2, #1
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7e1b      	ldrb	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	220c      	movs	r2, #12
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b004      	add	sp, #16
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	fffffefe 	.word	0xfffffefe

0800262c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff fda9 	bl	8002190 <LL_ADC_REG_IsConversionOngoing>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d15f      	bne.n	8002702 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2254      	movs	r2, #84	; 0x54
 8002646:	5c9b      	ldrb	r3, [r3, r2]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_ADC_Start_IT+0x24>
 800264c:	2302      	movs	r3, #2
 800264e:	e05f      	b.n	8002710 <HAL_ADC_Start_IT+0xe4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2254      	movs	r2, #84	; 0x54
 8002654:	2101      	movs	r1, #1
 8002656:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002658:	250f      	movs	r5, #15
 800265a:	197c      	adds	r4, r7, r5
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f000 fa40 	bl	8002ae4 <ADC_Enable>
 8002664:	0003      	movs	r3, r0
 8002666:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002668:	197b      	adds	r3, r7, r5
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d143      	bne.n	80026f8 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <HAL_ADC_Start_IT+0xec>)
 8002676:	4013      	ands	r3, r2
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	0052      	lsls	r2, r2, #1
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	221c      	movs	r2, #28
 800268e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2254      	movs	r2, #84	; 0x54
 8002694:	2100      	movs	r1, #0
 8002696:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	211c      	movs	r1, #28
 80026a4:	438a      	bics	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d108      	bne.n	80026c2 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2108      	movs	r1, #8
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
          break;
 80026c0:	e008      	b.n	80026d4 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2104      	movs	r1, #4
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
          break;
 80026d2:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2110      	movs	r1, #16
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff fd3b 	bl	800216c <LL_ADC_REG_StartConversion>
 80026f6:	e008      	b.n	800270a <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2254      	movs	r2, #84	; 0x54
 80026fc:	2100      	movs	r1, #0
 80026fe:	5499      	strb	r1, [r3, r2]
 8002700:	e003      	b.n	800270a <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002702:	230f      	movs	r3, #15
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	2202      	movs	r2, #2
 8002708:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800270a:	230f      	movs	r3, #15
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	781b      	ldrb	r3, [r3, #0]
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b004      	add	sp, #16
 8002716:	bdb0      	pop	{r4, r5, r7, pc}
 8002718:	fffff0fe 	.word	0xfffff0fe

0800271c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273e:	2317      	movs	r3, #23
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2254      	movs	r2, #84	; 0x54
 800274e:	5c9b      	ldrb	r3, [r3, r2]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x24>
 8002754:	2302      	movs	r3, #2
 8002756:	e1c0      	b.n	8002ada <HAL_ADC_ConfigChannel+0x3a6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2254      	movs	r2, #84	; 0x54
 800275c:	2101      	movs	r1, #1
 800275e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff fd13 	bl	8002190 <LL_ADC_REG_IsConversionOngoing>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d000      	beq.n	8002770 <HAL_ADC_ConfigChannel+0x3c>
 800276e:	e1a3      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d100      	bne.n	800277a <HAL_ADC_ConfigChannel+0x46>
 8002778:	e143      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	429a      	cmp	r2, r3
 8002784:	d004      	beq.n	8002790 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800278a:	4ac1      	ldr	r2, [pc, #772]	; (8002a90 <HAL_ADC_ConfigChannel+0x35c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d108      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	0019      	movs	r1, r3
 800279a:	0010      	movs	r0, r2
 800279c:	f7ff fc5a 	bl	8002054 <LL_ADC_REG_SetSequencerChAdd>
 80027a0:	e0c9      	b.n	8002936 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	211f      	movs	r1, #31
 80027ac:	400b      	ands	r3, r1
 80027ae:	210f      	movs	r1, #15
 80027b0:	4099      	lsls	r1, r3
 80027b2:	000b      	movs	r3, r1
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4013      	ands	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	035b      	lsls	r3, r3, #13
 80027c0:	0b5b      	lsrs	r3, r3, #13
 80027c2:	d105      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x9c>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	221f      	movs	r2, #31
 80027cc:	4013      	ands	r3, r2
 80027ce:	e098      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	d000      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xa8>
 80027da:	e091      	b.n	8002900 <HAL_ADC_ConfigChannel+0x1cc>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2202      	movs	r2, #2
 80027e2:	4013      	ands	r3, r2
 80027e4:	d000      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0xb4>
 80027e6:	e089      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1c8>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2204      	movs	r2, #4
 80027ee:	4013      	ands	r3, r2
 80027f0:	d000      	beq.n	80027f4 <HAL_ADC_ConfigChannel+0xc0>
 80027f2:	e081      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x1c4>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2208      	movs	r2, #8
 80027fa:	4013      	ands	r3, r2
 80027fc:	d000      	beq.n	8002800 <HAL_ADC_ConfigChannel+0xcc>
 80027fe:	e079      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x1c0>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2210      	movs	r2, #16
 8002806:	4013      	ands	r3, r2
 8002808:	d000      	beq.n	800280c <HAL_ADC_ConfigChannel+0xd8>
 800280a:	e071      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x1bc>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2220      	movs	r2, #32
 8002812:	4013      	ands	r3, r2
 8002814:	d000      	beq.n	8002818 <HAL_ADC_ConfigChannel+0xe4>
 8002816:	e069      	b.n	80028ec <HAL_ADC_ConfigChannel+0x1b8>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	4013      	ands	r3, r2
 8002820:	d000      	beq.n	8002824 <HAL_ADC_ConfigChannel+0xf0>
 8002822:	e061      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x1b4>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	4013      	ands	r3, r2
 800282c:	d000      	beq.n	8002830 <HAL_ADC_ConfigChannel+0xfc>
 800282e:	e059      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x1b0>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4013      	ands	r3, r2
 800283a:	d151      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x1ac>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4013      	ands	r3, r2
 8002846:	d149      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x1a8>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4013      	ands	r3, r2
 8002852:	d141      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1a4>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	4013      	ands	r3, r2
 800285e:	d139      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x1a0>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	015b      	lsls	r3, r3, #5
 8002868:	4013      	ands	r3, r2
 800286a:	d131      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x19c>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	019b      	lsls	r3, r3, #6
 8002874:	4013      	ands	r3, r2
 8002876:	d129      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x198>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	01db      	lsls	r3, r3, #7
 8002880:	4013      	ands	r3, r2
 8002882:	d121      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x194>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	4013      	ands	r3, r2
 800288e:	d119      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x190>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	025b      	lsls	r3, r3, #9
 8002898:	4013      	ands	r3, r2
 800289a:	d111      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x18c>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	029b      	lsls	r3, r3, #10
 80028a4:	4013      	ands	r3, r2
 80028a6:	d109      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x188>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	02db      	lsls	r3, r3, #11
 80028b0:	4013      	ands	r3, r2
 80028b2:	d001      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x184>
 80028b4:	2312      	movs	r3, #18
 80028b6:	e024      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028b8:	2300      	movs	r3, #0
 80028ba:	e022      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028bc:	2311      	movs	r3, #17
 80028be:	e020      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028c0:	2310      	movs	r3, #16
 80028c2:	e01e      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028c4:	230f      	movs	r3, #15
 80028c6:	e01c      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028c8:	230e      	movs	r3, #14
 80028ca:	e01a      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028cc:	230d      	movs	r3, #13
 80028ce:	e018      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028d0:	230c      	movs	r3, #12
 80028d2:	e016      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028d4:	230b      	movs	r3, #11
 80028d6:	e014      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028d8:	230a      	movs	r3, #10
 80028da:	e012      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028dc:	2309      	movs	r3, #9
 80028de:	e010      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028e0:	2308      	movs	r3, #8
 80028e2:	e00e      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028e4:	2307      	movs	r3, #7
 80028e6:	e00c      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028e8:	2306      	movs	r3, #6
 80028ea:	e00a      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028ec:	2305      	movs	r3, #5
 80028ee:	e008      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028f0:	2304      	movs	r3, #4
 80028f2:	e006      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028f4:	2303      	movs	r3, #3
 80028f6:	e004      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e002      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_ADC_ConfigChannel+0x1ce>
 8002900:	2300      	movs	r3, #0
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6852      	ldr	r2, [r2, #4]
 8002906:	201f      	movs	r0, #31
 8002908:	4002      	ands	r2, r0
 800290a:	4093      	lsls	r3, r2
 800290c:	000a      	movs	r2, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	429a      	cmp	r2, r3
 8002922:	d808      	bhi.n	8002936 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	001a      	movs	r2, r3
 8002932:	f7ff fb6f 	bl	8002014 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	001a      	movs	r2, r3
 8002944:	f7ff fbaa 	bl	800209c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	db00      	blt.n	8002952 <HAL_ADC_ConfigChannel+0x21e>
 8002950:	e0bc      	b.n	8002acc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002952:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <HAL_ADC_ConfigChannel+0x360>)
 8002954:	0018      	movs	r0, r3
 8002956:	f7ff fb0b 	bl	8001f70 <LL_ADC_GetCommonPathInternalCh>
 800295a:	0003      	movs	r3, r0
 800295c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a4d      	ldr	r2, [pc, #308]	; (8002a98 <HAL_ADC_ConfigChannel+0x364>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d122      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002970:	d11d      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2280      	movs	r2, #128	; 0x80
 8002976:	0412      	lsls	r2, r2, #16
 8002978:	4313      	orrs	r3, r2
 800297a:	4a46      	ldr	r2, [pc, #280]	; (8002a94 <HAL_ADC_ConfigChannel+0x360>)
 800297c:	0019      	movs	r1, r3
 800297e:	0010      	movs	r0, r2
 8002980:	f7ff fae2 	bl	8001f48 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002984:	4b45      	ldr	r3, [pc, #276]	; (8002a9c <HAL_ADC_ConfigChannel+0x368>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4945      	ldr	r1, [pc, #276]	; (8002aa0 <HAL_ADC_ConfigChannel+0x36c>)
 800298a:	0018      	movs	r0, r3
 800298c:	f7fd fbd6 	bl	800013c <__udivsi3>
 8002990:	0003      	movs	r3, r0
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	0013      	movs	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	189b      	adds	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800299e:	e002      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f9      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029ac:	e08e      	b.n	8002acc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3c      	ldr	r2, [pc, #240]	; (8002aa4 <HAL_ADC_ConfigChannel+0x370>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d10e      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	045b      	lsls	r3, r3, #17
 80029be:	4013      	ands	r3, r2
 80029c0:	d109      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	0452      	lsls	r2, r2, #17
 80029c8:	4313      	orrs	r3, r2
 80029ca:	4a32      	ldr	r2, [pc, #200]	; (8002a94 <HAL_ADC_ConfigChannel+0x360>)
 80029cc:	0019      	movs	r1, r3
 80029ce:	0010      	movs	r0, r2
 80029d0:	f7ff faba 	bl	8001f48 <LL_ADC_SetCommonPathInternalCh>
 80029d4:	e07a      	b.n	8002acc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a33      	ldr	r2, [pc, #204]	; (8002aa8 <HAL_ADC_ConfigChannel+0x374>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d000      	beq.n	80029e2 <HAL_ADC_ConfigChannel+0x2ae>
 80029e0:	e074      	b.n	8002acc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	03db      	lsls	r3, r3, #15
 80029e8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029ea:	d000      	beq.n	80029ee <HAL_ADC_ConfigChannel+0x2ba>
 80029ec:	e06e      	b.n	8002acc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	03d2      	lsls	r2, r2, #15
 80029f4:	4313      	orrs	r3, r2
 80029f6:	4a27      	ldr	r2, [pc, #156]	; (8002a94 <HAL_ADC_ConfigChannel+0x360>)
 80029f8:	0019      	movs	r1, r3
 80029fa:	0010      	movs	r0, r2
 80029fc:	f7ff faa4 	bl	8001f48 <LL_ADC_SetCommonPathInternalCh>
 8002a00:	e064      	b.n	8002acc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d004      	beq.n	8002a18 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a12:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_ADC_ConfigChannel+0x35c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d107      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	0019      	movs	r1, r3
 8002a22:	0010      	movs	r0, r2
 8002a24:	f7ff fb27 	bl	8002076 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da4d      	bge.n	8002acc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_ADC_ConfigChannel+0x360>)
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7ff fa9c 	bl	8001f70 <LL_ADC_GetCommonPathInternalCh>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <HAL_ADC_ConfigChannel+0x364>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d108      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4a18      	ldr	r2, [pc, #96]	; (8002aac <HAL_ADC_ConfigChannel+0x378>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_ADC_ConfigChannel+0x360>)
 8002a4e:	0019      	movs	r1, r3
 8002a50:	0010      	movs	r0, r2
 8002a52:	f7ff fa79 	bl	8001f48 <LL_ADC_SetCommonPathInternalCh>
 8002a56:	e039      	b.n	8002acc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_ADC_ConfigChannel+0x370>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <HAL_ADC_ConfigChannel+0x37c>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <HAL_ADC_ConfigChannel+0x360>)
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	0010      	movs	r0, r2
 8002a6e:	f7ff fa6b 	bl	8001f48 <LL_ADC_SetCommonPathInternalCh>
 8002a72:	e02b      	b.n	8002acc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <HAL_ADC_ConfigChannel+0x374>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d126      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <HAL_ADC_ConfigChannel+0x380>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	4a03      	ldr	r2, [pc, #12]	; (8002a94 <HAL_ADC_ConfigChannel+0x360>)
 8002a86:	0019      	movs	r1, r3
 8002a88:	0010      	movs	r0, r2
 8002a8a:	f7ff fa5d 	bl	8001f48 <LL_ADC_SetCommonPathInternalCh>
 8002a8e:	e01d      	b.n	8002acc <HAL_ADC_ConfigChannel+0x398>
 8002a90:	80000004 	.word	0x80000004
 8002a94:	40012708 	.word	0x40012708
 8002a98:	b0001000 	.word	0xb0001000
 8002a9c:	20000010 	.word	0x20000010
 8002aa0:	00030d40 	.word	0x00030d40
 8002aa4:	b8004000 	.word	0xb8004000
 8002aa8:	b4002000 	.word	0xb4002000
 8002aac:	ff7fffff 	.word	0xff7fffff
 8002ab0:	feffffff 	.word	0xfeffffff
 8002ab4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	2220      	movs	r2, #32
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ac4:	2317      	movs	r3, #23
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2254      	movs	r2, #84	; 0x54
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002ad4:	2317      	movs	r3, #23
 8002ad6:	18fb      	adds	r3, r7, r3
 8002ad8:	781b      	ldrb	r3, [r3, #0]
}
 8002ada:	0018      	movs	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b006      	add	sp, #24
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)

08002ae4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7ff fb27 	bl	8002148 <LL_ADC_IsEnabled>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d000      	beq.n	8002b00 <ADC_Enable+0x1c>
 8002afe:	e069      	b.n	8002bd4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a36      	ldr	r2, [pc, #216]	; (8002be0 <ADC_Enable+0xfc>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d00d      	beq.n	8002b28 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	2210      	movs	r2, #16
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e056      	b.n	8002bd6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff faf9 	bl	8002124 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002b32:	4b2c      	ldr	r3, [pc, #176]	; (8002be4 <ADC_Enable+0x100>)
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7ff fa1b 	bl	8001f70 <LL_ADC_GetCommonPathInternalCh>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	4013      	ands	r3, r2
 8002b42:	d00f      	beq.n	8002b64 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <ADC_Enable+0x104>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4928      	ldr	r1, [pc, #160]	; (8002bec <ADC_Enable+0x108>)
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7fd faf6 	bl	800013c <__udivsi3>
 8002b50:	0003      	movs	r3, r0
 8002b52:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002b54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b56:	e002      	b.n	8002b5e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f9      	bne.n	8002b58 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7e5b      	ldrb	r3, [r3, #25]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d033      	beq.n	8002bd4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002b6c:	f7ff f9a8 	bl	8001ec0 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b74:	e027      	b.n	8002bc6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7ff fae4 	bl	8002148 <LL_ADC_IsEnabled>
 8002b80:	1e03      	subs	r3, r0, #0
 8002b82:	d104      	bne.n	8002b8e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7ff facb 	bl	8002124 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b8e:	f7ff f997 	bl	8001ec0 <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d914      	bls.n	8002bc6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d00d      	beq.n	8002bc6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	2210      	movs	r2, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	2201      	movs	r2, #1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e007      	b.n	8002bd6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d1d0      	bne.n	8002b76 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b004      	add	sp, #16
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	80000017 	.word	0x80000017
 8002be4:	40012708 	.word	0x40012708
 8002be8:	20000010 	.word	0x20000010
 8002bec:	00030d40 	.word	0x00030d40

08002bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bfc:	1dfb      	adds	r3, r7, #7
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b7f      	cmp	r3, #127	; 0x7f
 8002c02:	d809      	bhi.n	8002c18 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c04:	1dfb      	adds	r3, r7, #7
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	001a      	movs	r2, r3
 8002c0a:	231f      	movs	r3, #31
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <__NVIC_EnableIRQ+0x30>)
 8002c10:	2101      	movs	r1, #1
 8002c12:	4091      	lsls	r1, r2
 8002c14:	000a      	movs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	1dfb      	adds	r3, r7, #7
 8002c2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	1dfb      	adds	r3, r7, #7
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b7f      	cmp	r3, #127	; 0x7f
 8002c36:	d810      	bhi.n	8002c5a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c38:	1dfb      	adds	r3, r7, #7
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	231f      	movs	r3, #31
 8002c40:	4013      	ands	r3, r2
 8002c42:	4908      	ldr	r1, [pc, #32]	; (8002c64 <__NVIC_DisableIRQ+0x40>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	0013      	movs	r3, r2
 8002c4a:	2280      	movs	r2, #128	; 0x80
 8002c4c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c4e:	f3bf 8f4f 	dsb	sy
}
 8002c52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002c54:	f3bf 8f6f 	isb	sy
}
 8002c58:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	0002      	movs	r2, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c7c:	d828      	bhi.n	8002cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <__NVIC_SetPriority+0xd4>)
 8002c80:	1dfb      	adds	r3, r7, #7
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	089b      	lsrs	r3, r3, #2
 8002c88:	33c0      	adds	r3, #192	; 0xc0
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	589b      	ldr	r3, [r3, r2]
 8002c8e:	1dfa      	adds	r2, r7, #7
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	0011      	movs	r1, r2
 8002c94:	2203      	movs	r2, #3
 8002c96:	400a      	ands	r2, r1
 8002c98:	00d2      	lsls	r2, r2, #3
 8002c9a:	21ff      	movs	r1, #255	; 0xff
 8002c9c:	4091      	lsls	r1, r2
 8002c9e:	000a      	movs	r2, r1
 8002ca0:	43d2      	mvns	r2, r2
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	22ff      	movs	r2, #255	; 0xff
 8002cac:	401a      	ands	r2, r3
 8002cae:	1dfb      	adds	r3, r7, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	4003      	ands	r3, r0
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cbc:	481f      	ldr	r0, [pc, #124]	; (8002d3c <__NVIC_SetPriority+0xd4>)
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	33c0      	adds	r3, #192	; 0xc0
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002cce:	e031      	b.n	8002d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd0:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <__NVIC_SetPriority+0xd8>)
 8002cd2:	1dfb      	adds	r3, r7, #7
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	230f      	movs	r3, #15
 8002cda:	400b      	ands	r3, r1
 8002cdc:	3b08      	subs	r3, #8
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	3306      	adds	r3, #6
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	18d3      	adds	r3, r2, r3
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	1dfa      	adds	r2, r7, #7
 8002cec:	7812      	ldrb	r2, [r2, #0]
 8002cee:	0011      	movs	r1, r2
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	00d2      	lsls	r2, r2, #3
 8002cf6:	21ff      	movs	r1, #255	; 0xff
 8002cf8:	4091      	lsls	r1, r2
 8002cfa:	000a      	movs	r2, r1
 8002cfc:	43d2      	mvns	r2, r2
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	019b      	lsls	r3, r3, #6
 8002d06:	22ff      	movs	r2, #255	; 0xff
 8002d08:	401a      	ands	r2, r3
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	2303      	movs	r3, #3
 8002d12:	4003      	ands	r3, r0
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d18:	4809      	ldr	r0, [pc, #36]	; (8002d40 <__NVIC_SetPriority+0xd8>)
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	001c      	movs	r4, r3
 8002d20:	230f      	movs	r3, #15
 8002d22:	4023      	ands	r3, r4
 8002d24:	3b08      	subs	r3, #8
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	3306      	adds	r3, #6
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	18c3      	adds	r3, r0, r3
 8002d30:	3304      	adds	r3, #4
 8002d32:	601a      	str	r2, [r3, #0]
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b003      	add	sp, #12
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1e5a      	subs	r2, r3, #1
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	045b      	lsls	r3, r3, #17
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d301      	bcc.n	8002d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e010      	b.n	8002d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <SysTick_Config+0x44>)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	3a01      	subs	r2, #1
 8002d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d64:	2301      	movs	r3, #1
 8002d66:	425b      	negs	r3, r3
 8002d68:	2103      	movs	r1, #3
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7ff ff7c 	bl	8002c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <SysTick_Config+0x44>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <SysTick_Config+0x44>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b002      	add	sp, #8
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	210f      	movs	r1, #15
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	1c02      	adds	r2, r0, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff ff5d 	bl	8002c68 <__NVIC_SetPriority>
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b25b      	sxtb	r3, r3
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff ff11 	bl	8002bf0 <__NVIC_EnableIRQ>
}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	0002      	movs	r2, r0
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002de2:	1dfb      	adds	r3, r7, #7
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b25b      	sxtb	r3, r3
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff ff1b 	bl	8002c24 <__NVIC_DisableIRQ>
}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff ff9f 	bl	8002d44 <SysTick_Config>
 8002e06:	0003      	movs	r3, r0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e050      	b.n	8002ec4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2225      	movs	r2, #37	; 0x25
 8002e26:	5c9b      	ldrb	r3, [r3, r2]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d008      	beq.n	8002e40 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2204      	movs	r2, #4
 8002e32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e041      	b.n	8002ec4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	210e      	movs	r1, #14
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	491c      	ldr	r1, [pc, #112]	; (8002ecc <HAL_DMA_Abort+0xbc>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_DMA_Abort+0xc0>)
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	221c      	movs	r2, #28
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_DMA_Abort+0xc0>)
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea2:	490a      	ldr	r1, [pc, #40]	; (8002ecc <HAL_DMA_Abort+0xbc>)
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002eb0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2225      	movs	r2, #37	; 0x25
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2224      	movs	r2, #36	; 0x24
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	fffffeff 	.word	0xfffffeff
 8002ed0:	40020000 	.word	0x40020000

08002ed4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002edc:	210f      	movs	r1, #15
 8002ede:	187b      	adds	r3, r7, r1
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2225      	movs	r2, #37	; 0x25
 8002ee8:	5c9b      	ldrb	r3, [r3, r2]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d006      	beq.n	8002efe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ef6:	187b      	adds	r3, r7, r1
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e049      	b.n	8002f92 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	210e      	movs	r1, #14
 8002f0a:	438a      	bics	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	438a      	bics	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	491d      	ldr	r1, [pc, #116]	; (8002fa0 <HAL_DMA_Abort_IT+0xcc>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_DMA_Abort_IT+0xd0>)
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	221c      	movs	r2, #28
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_DMA_Abort_IT+0xd0>)
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00c      	beq.n	8002f70 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f60:	490f      	ldr	r1, [pc, #60]	; (8002fa0 <HAL_DMA_Abort_IT+0xcc>)
 8002f62:	400a      	ands	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2225      	movs	r2, #37	; 0x25
 8002f74:	2101      	movs	r1, #1
 8002f76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	0010      	movs	r0, r2
 8002f90:	4798      	blx	r3
    }
  }
  return status;
 8002f92:	230f      	movs	r3, #15
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	781b      	ldrb	r3, [r3, #0]
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b004      	add	sp, #16
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	fffffeff 	.word	0xfffffeff
 8002fa4:	40020000 	.word	0x40020000

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	e147      	b.n	8003248 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4091      	lsls	r1, r2
 8002fc2:	000a      	movs	r2, r1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d100      	bne.n	8002fd0 <HAL_GPIO_Init+0x28>
 8002fce:	e138      	b.n	8003242 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d005      	beq.n	8002fe8 <HAL_GPIO_Init+0x40>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d130      	bne.n	800304a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	0013      	movs	r3, r2
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	409a      	lsls	r2, r3
 800300a:	0013      	movs	r3, r2
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301e:	2201      	movs	r2, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
 8003024:	0013      	movs	r3, r2
 8003026:	43da      	mvns	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	2201      	movs	r2, #1
 8003036:	401a      	ands	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	409a      	lsls	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2203      	movs	r2, #3
 8003050:	4013      	ands	r3, r2
 8003052:	2b03      	cmp	r3, #3
 8003054:	d017      	beq.n	8003086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	409a      	lsls	r2, r3
 8003064:	0013      	movs	r3, r2
 8003066:	43da      	mvns	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4013      	ands	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2203      	movs	r2, #3
 800308c:	4013      	ands	r3, r2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d123      	bne.n	80030da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	0092      	lsls	r2, r2, #2
 800309c:	58d3      	ldr	r3, [r2, r3]
 800309e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2207      	movs	r2, #7
 80030a4:	4013      	ands	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	409a      	lsls	r2, r3
 80030ac:	0013      	movs	r3, r2
 80030ae:	43da      	mvns	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	691a      	ldr	r2, [r3, #16]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2107      	movs	r1, #7
 80030be:	400b      	ands	r3, r1
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	409a      	lsls	r2, r3
 80030c4:	0013      	movs	r3, r2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	08da      	lsrs	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3208      	adds	r2, #8
 80030d4:	0092      	lsls	r2, r2, #2
 80030d6:	6939      	ldr	r1, [r7, #16]
 80030d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	2203      	movs	r2, #3
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	43da      	mvns	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2203      	movs	r2, #3
 80030f8:	401a      	ands	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	23c0      	movs	r3, #192	; 0xc0
 8003114:	029b      	lsls	r3, r3, #10
 8003116:	4013      	ands	r3, r2
 8003118:	d100      	bne.n	800311c <HAL_GPIO_Init+0x174>
 800311a:	e092      	b.n	8003242 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800311c:	4a50      	ldr	r2, [pc, #320]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3318      	adds	r3, #24
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	589b      	ldr	r3, [r3, r2]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2203      	movs	r2, #3
 800312e:	4013      	ands	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	220f      	movs	r2, #15
 8003134:	409a      	lsls	r2, r3
 8003136:	0013      	movs	r3, r2
 8003138:	43da      	mvns	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	23a0      	movs	r3, #160	; 0xa0
 8003144:	05db      	lsls	r3, r3, #23
 8003146:	429a      	cmp	r2, r3
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_Init+0x1ca>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a45      	ldr	r2, [pc, #276]	; (8003264 <HAL_GPIO_Init+0x2bc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_GPIO_Init+0x1c6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a44      	ldr	r2, [pc, #272]	; (8003268 <HAL_GPIO_Init+0x2c0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_Init+0x1c2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a43      	ldr	r2, [pc, #268]	; (800326c <HAL_GPIO_Init+0x2c4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_GPIO_Init+0x1be>
 8003162:	2303      	movs	r3, #3
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x1cc>
 8003166:	2305      	movs	r3, #5
 8003168:	e004      	b.n	8003174 <HAL_GPIO_Init+0x1cc>
 800316a:	2302      	movs	r3, #2
 800316c:	e002      	b.n	8003174 <HAL_GPIO_Init+0x1cc>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x1cc>
 8003172:	2300      	movs	r3, #0
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	2103      	movs	r1, #3
 8003178:	400a      	ands	r2, r1
 800317a:	00d2      	lsls	r2, r2, #3
 800317c:	4093      	lsls	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003184:	4936      	ldr	r1, [pc, #216]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3318      	adds	r3, #24
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003192:	4b33      	ldr	r3, [pc, #204]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43da      	mvns	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	035b      	lsls	r3, r3, #13
 80031aa:	4013      	ands	r3, r2
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031b6:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	039b      	lsls	r3, r3, #14
 80031d4:	4013      	ands	r3, r2
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031e0:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031e6:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 80031e8:	2384      	movs	r3, #132	; 0x84
 80031ea:	58d3      	ldr	r3, [r2, r3]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	029b      	lsls	r3, r3, #10
 8003200:	4013      	ands	r3, r2
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800320c:	4914      	ldr	r1, [pc, #80]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 800320e:	2284      	movs	r2, #132	; 0x84
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003214:	4a12      	ldr	r2, [pc, #72]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	58d3      	ldr	r3, [r2, r3]
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	43da      	mvns	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	025b      	lsls	r3, r3, #9
 800322e:	4013      	ands	r3, r2
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800323a:	4909      	ldr	r1, [pc, #36]	; (8003260 <HAL_GPIO_Init+0x2b8>)
 800323c:	2280      	movs	r2, #128	; 0x80
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3301      	adds	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	40da      	lsrs	r2, r3
 8003250:	1e13      	subs	r3, r2, #0
 8003252:	d000      	beq.n	8003256 <HAL_GPIO_Init+0x2ae>
 8003254:	e6b0      	b.n	8002fb8 <HAL_GPIO_Init+0x10>
  }
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46bd      	mov	sp, r7
 800325c:	b006      	add	sp, #24
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021800 	.word	0x40021800
 8003264:	50000400 	.word	0x50000400
 8003268:	50000800 	.word	0x50000800
 800326c:	50000c00 	.word	0x50000c00

08003270 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800327e:	e0b4      	b.n	80033ea <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003280:	2201      	movs	r2, #1
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	409a      	lsls	r2, r3
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d100      	bne.n	8003294 <HAL_GPIO_DeInit+0x24>
 8003292:	e0a7      	b.n	80033e4 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003294:	4a5a      	ldr	r2, [pc, #360]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	3318      	adds	r3, #24
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	589b      	ldr	r3, [r3, r2]
 80032a0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2203      	movs	r2, #3
 80032a6:	4013      	ands	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	220f      	movs	r2, #15
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	23a0      	movs	r3, #160	; 0xa0
 80032b8:	05db      	lsls	r3, r3, #23
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d013      	beq.n	80032e6 <HAL_GPIO_DeInit+0x76>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a50      	ldr	r2, [pc, #320]	; (8003404 <HAL_GPIO_DeInit+0x194>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_GPIO_DeInit+0x72>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4f      	ldr	r2, [pc, #316]	; (8003408 <HAL_GPIO_DeInit+0x198>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_GPIO_DeInit+0x6e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4e      	ldr	r2, [pc, #312]	; (800340c <HAL_GPIO_DeInit+0x19c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_GPIO_DeInit+0x6a>
 80032d6:	2303      	movs	r3, #3
 80032d8:	e006      	b.n	80032e8 <HAL_GPIO_DeInit+0x78>
 80032da:	2305      	movs	r3, #5
 80032dc:	e004      	b.n	80032e8 <HAL_GPIO_DeInit+0x78>
 80032de:	2302      	movs	r3, #2
 80032e0:	e002      	b.n	80032e8 <HAL_GPIO_DeInit+0x78>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_GPIO_DeInit+0x78>
 80032e6:	2300      	movs	r3, #0
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	2103      	movs	r1, #3
 80032ec:	400a      	ands	r2, r1
 80032ee:	00d2      	lsls	r2, r2, #3
 80032f0:	4093      	lsls	r3, r2
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d136      	bne.n	8003366 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80032f8:	4a41      	ldr	r2, [pc, #260]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	58d3      	ldr	r3, [r2, r3]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	43d2      	mvns	r2, r2
 8003302:	493f      	ldr	r1, [pc, #252]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 8003304:	4013      	ands	r3, r2
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800330a:	4a3d      	ldr	r2, [pc, #244]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 800330c:	2384      	movs	r3, #132	; 0x84
 800330e:	58d3      	ldr	r3, [r2, r3]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	43d2      	mvns	r2, r2
 8003314:	493a      	ldr	r1, [pc, #232]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 8003316:	4013      	ands	r3, r2
 8003318:	2284      	movs	r2, #132	; 0x84
 800331a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43d9      	mvns	r1, r3
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 8003326:	400a      	ands	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800332a:	4b35      	ldr	r3, [pc, #212]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43d9      	mvns	r1, r3
 8003332:	4b33      	ldr	r3, [pc, #204]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 8003334:	400a      	ands	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2203      	movs	r2, #3
 800333c:	4013      	ands	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	220f      	movs	r2, #15
 8003342:	409a      	lsls	r2, r3
 8003344:	0013      	movs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003348:	4a2d      	ldr	r2, [pc, #180]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3318      	adds	r3, #24
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	589a      	ldr	r2, [r3, r2]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43d9      	mvns	r1, r3
 8003358:	4829      	ldr	r0, [pc, #164]	; (8003400 <HAL_GPIO_DeInit+0x190>)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	400a      	ands	r2, r1
 8003360:	3318      	adds	r3, #24
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2103      	movs	r1, #3
 8003370:	4099      	lsls	r1, r3
 8003372:	000b      	movs	r3, r1
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	08da      	lsrs	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3208      	adds	r2, #8
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	58d3      	ldr	r3, [r2, r3]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	2107      	movs	r1, #7
 800338a:	400a      	ands	r2, r1
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	210f      	movs	r1, #15
 8003390:	4091      	lsls	r1, r2
 8003392:	000a      	movs	r2, r1
 8003394:	43d1      	mvns	r1, r2
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	08d2      	lsrs	r2, r2, #3
 800339a:	4019      	ands	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3208      	adds	r2, #8
 80033a0:	0092      	lsls	r2, r2, #2
 80033a2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	0052      	lsls	r2, r2, #1
 80033ac:	2103      	movs	r1, #3
 80033ae:	4091      	lsls	r1, r2
 80033b0:	000a      	movs	r2, r1
 80033b2:	43d2      	mvns	r2, r2
 80033b4:	401a      	ands	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2101      	movs	r1, #1
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4091      	lsls	r1, r2
 80033c4:	000a      	movs	r2, r1
 80033c6:	43d2      	mvns	r2, r2
 80033c8:	401a      	ands	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	0052      	lsls	r2, r2, #1
 80033d6:	2103      	movs	r1, #3
 80033d8:	4091      	lsls	r1, r2
 80033da:	000a      	movs	r2, r1
 80033dc:	43d2      	mvns	r2, r2
 80033de:	401a      	ands	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3301      	adds	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	40da      	lsrs	r2, r3
 80033f0:	1e13      	subs	r3, r2, #0
 80033f2:	d000      	beq.n	80033f6 <HAL_GPIO_DeInit+0x186>
 80033f4:	e744      	b.n	8003280 <HAL_GPIO_DeInit+0x10>
  }
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b006      	add	sp, #24
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021800 	.word	0x40021800
 8003404:	50000400 	.word	0x50000400
 8003408:	50000800 	.word	0x50000800
 800340c:	50000c00 	.word	0x50000c00

08003410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	000a      	movs	r2, r1
 800341a:	1cbb      	adds	r3, r7, #2
 800341c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	1cba      	adds	r2, r7, #2
 8003424:	8812      	ldrh	r2, [r2, #0]
 8003426:	4013      	ands	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800342a:	230f      	movs	r3, #15
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e003      	b.n	800343c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003434:	230f      	movs	r3, #15
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800343c:	230f      	movs	r3, #15
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	781b      	ldrb	r3, [r3, #0]
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b004      	add	sp, #16
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	0008      	movs	r0, r1
 8003454:	0011      	movs	r1, r2
 8003456:	1cbb      	adds	r3, r7, #2
 8003458:	1c02      	adds	r2, r0, #0
 800345a:	801a      	strh	r2, [r3, #0]
 800345c:	1c7b      	adds	r3, r7, #1
 800345e:	1c0a      	adds	r2, r1, #0
 8003460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003462:	1c7b      	adds	r3, r7, #1
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800346a:	1cbb      	adds	r3, r7, #2
 800346c:	881a      	ldrh	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003472:	e003      	b.n	800347c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003474:	1cbb      	adds	r3, r7, #2
 8003476:	881a      	ldrh	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	000a      	movs	r2, r1
 800348e:	1cbb      	adds	r3, r7, #2
 8003490:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003498:	1cbb      	adds	r3, r7, #2
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	041a      	lsls	r2, r3, #16
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	1cb9      	adds	r1, r7, #2
 80034a8:	8809      	ldrh	r1, [r1, #0]
 80034aa:	400b      	ands	r3, r1
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	619a      	str	r2, [r3, #24]
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b004      	add	sp, #16
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e08f      	b.n	80035ee <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2241      	movs	r2, #65	; 0x41
 80034d2:	5c9b      	ldrb	r3, [r3, r2]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2240      	movs	r2, #64	; 0x40
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7fe f9d5 	bl	8001894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2241      	movs	r2, #65	; 0x41
 80034ee:	2124      	movs	r1, #36	; 0x24
 80034f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	438a      	bics	r2, r1
 8003500:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	493b      	ldr	r1, [pc, #236]	; (80035f8 <HAL_I2C_Init+0x13c>)
 800350c:	400a      	ands	r2, r1
 800350e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4938      	ldr	r1, [pc, #224]	; (80035fc <HAL_I2C_Init+0x140>)
 800351c:	400a      	ands	r2, r1
 800351e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d108      	bne.n	800353a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	0209      	lsls	r1, r1, #8
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	e007      	b.n	800354a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2184      	movs	r1, #132	; 0x84
 8003544:	0209      	lsls	r1, r1, #8
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d109      	bne.n	8003566 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	0109      	lsls	r1, r1, #4
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
 8003564:	e007      	b.n	8003576 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4923      	ldr	r1, [pc, #140]	; (8003600 <HAL_I2C_Init+0x144>)
 8003572:	400a      	ands	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4920      	ldr	r1, [pc, #128]	; (8003604 <HAL_I2C_Init+0x148>)
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	491a      	ldr	r1, [pc, #104]	; (80035fc <HAL_I2C_Init+0x140>)
 8003592:	400a      	ands	r2, r1
 8003594:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	431a      	orrs	r2, r3
 80035a0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69d9      	ldr	r1, [r3, #28]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1a      	ldr	r2, [r3, #32]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2241      	movs	r2, #65	; 0x41
 80035da:	2120      	movs	r1, #32
 80035dc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2242      	movs	r2, #66	; 0x42
 80035e8:	2100      	movs	r1, #0
 80035ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b002      	add	sp, #8
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	f0ffffff 	.word	0xf0ffffff
 80035fc:	ffff7fff 	.word	0xffff7fff
 8003600:	fffff7ff 	.word	0xfffff7ff
 8003604:	02008000 	.word	0x02008000

08003608 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	0008      	movs	r0, r1
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	0019      	movs	r1, r3
 8003616:	230a      	movs	r3, #10
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	1c02      	adds	r2, r0, #0
 800361c:	801a      	strh	r2, [r3, #0]
 800361e:	2308      	movs	r3, #8
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	1c0a      	adds	r2, r1, #0
 8003624:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2241      	movs	r2, #65	; 0x41
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b20      	cmp	r3, #32
 8003630:	d000      	beq.n	8003634 <HAL_I2C_Master_Transmit+0x2c>
 8003632:	e10a      	b.n	800384a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	5c9b      	ldrb	r3, [r3, r2]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_I2C_Master_Transmit+0x3a>
 800363e:	2302      	movs	r3, #2
 8003640:	e104      	b.n	800384c <HAL_I2C_Master_Transmit+0x244>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2240      	movs	r2, #64	; 0x40
 8003646:	2101      	movs	r1, #1
 8003648:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800364a:	f7fe fc39 	bl	8001ec0 <HAL_GetTick>
 800364e:	0003      	movs	r3, r0
 8003650:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	0219      	lsls	r1, r3, #8
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2319      	movs	r3, #25
 800365e:	2201      	movs	r2, #1
 8003660:	f000 f91e 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 8003664:	1e03      	subs	r3, r0, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0ef      	b.n	800384c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2241      	movs	r2, #65	; 0x41
 8003670:	2121      	movs	r1, #33	; 0x21
 8003672:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2242      	movs	r2, #66	; 0x42
 8003678:	2110      	movs	r1, #16
 800367a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2208      	movs	r2, #8
 800368c:	18ba      	adds	r2, r7, r2
 800368e:	8812      	ldrh	r2, [r2, #0]
 8003690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2bff      	cmp	r3, #255	; 0xff
 80036a0:	d906      	bls.n	80036b0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	22ff      	movs	r2, #255	; 0xff
 80036a6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	045b      	lsls	r3, r3, #17
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e007      	b.n	80036c0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	049b      	lsls	r3, r3, #18
 80036be:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d027      	beq.n	8003718 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	b2da      	uxtb	r2, r3
 8003702:	697c      	ldr	r4, [r7, #20]
 8003704:	230a      	movs	r3, #10
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	8819      	ldrh	r1, [r3, #0]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	4b51      	ldr	r3, [pc, #324]	; (8003854 <HAL_I2C_Master_Transmit+0x24c>)
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	0023      	movs	r3, r4
 8003712:	f000 faa7 	bl	8003c64 <I2C_TransferConfig>
 8003716:	e06f      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	b2da      	uxtb	r2, r3
 800371e:	697c      	ldr	r4, [r7, #20]
 8003720:	230a      	movs	r3, #10
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	8819      	ldrh	r1, [r3, #0]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_I2C_Master_Transmit+0x24c>)
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	0023      	movs	r3, r4
 800372e:	f000 fa99 	bl	8003c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003732:	e061      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f908 	bl	8003950 <I2C_WaitOnTXISFlagUntilTimeout>
 8003740:	1e03      	subs	r3, r0, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e081      	b.n	800384c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d03a      	beq.n	80037f8 <HAL_I2C_Master_Transmit+0x1f0>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d136      	bne.n	80037f8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	0013      	movs	r3, r2
 8003794:	2200      	movs	r2, #0
 8003796:	2180      	movs	r1, #128	; 0x80
 8003798:	f000 f882 	bl	80038a0 <I2C_WaitOnFlagUntilTimeout>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e053      	b.n	800384c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2bff      	cmp	r3, #255	; 0xff
 80037ac:	d911      	bls.n	80037d2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	22ff      	movs	r2, #255	; 0xff
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	045c      	lsls	r4, r3, #17
 80037be:	230a      	movs	r3, #10
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	8819      	ldrh	r1, [r3, #0]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	2300      	movs	r3, #0
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	0023      	movs	r3, r4
 80037cc:	f000 fa4a 	bl	8003c64 <I2C_TransferConfig>
 80037d0:	e012      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	049c      	lsls	r4, r3, #18
 80037e6:	230a      	movs	r3, #10
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	8819      	ldrh	r1, [r3, #0]
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	0023      	movs	r3, r4
 80037f4:	f000 fa36 	bl	8003c64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d198      	bne.n	8003734 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 f8e7 	bl	80039dc <I2C_WaitOnSTOPFlagUntilTimeout>
 800380e:	1e03      	subs	r3, r0, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e01a      	b.n	800384c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2220      	movs	r2, #32
 800381c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	490b      	ldr	r1, [pc, #44]	; (8003858 <HAL_I2C_Master_Transmit+0x250>)
 800382a:	400a      	ands	r2, r1
 800382c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2241      	movs	r2, #65	; 0x41
 8003832:	2120      	movs	r1, #32
 8003834:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2242      	movs	r2, #66	; 0x42
 800383a:	2100      	movs	r1, #0
 800383c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2240      	movs	r2, #64	; 0x40
 8003842:	2100      	movs	r1, #0
 8003844:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
  }
}
 800384c:	0018      	movs	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	b007      	add	sp, #28
 8003852:	bd90      	pop	{r4, r7, pc}
 8003854:	80002000 	.word	0x80002000
 8003858:	fe00e800 	.word	0xfe00e800

0800385c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2202      	movs	r2, #2
 800386c:	4013      	ands	r3, r2
 800386e:	2b02      	cmp	r3, #2
 8003870:	d103      	bne.n	800387a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2200      	movs	r2, #0
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2201      	movs	r2, #1
 8003882:	4013      	ands	r3, r2
 8003884:	2b01      	cmp	r3, #1
 8003886:	d007      	beq.n	8003898 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2101      	movs	r1, #1
 8003894:	430a      	orrs	r2, r1
 8003896:	619a      	str	r2, [r3, #24]
  }
}
 8003898:	46c0      	nop			; (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	1dfb      	adds	r3, r7, #7
 80038ae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b0:	e03a      	b.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f000 f8d3 	bl	8003a64 <I2C_IsErrorOccurred>
 80038be:	1e03      	subs	r3, r0, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e040      	b.n	8003948 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	d02d      	beq.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7fe faf8 	bl	8001ec0 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d302      	bcc.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d122      	bne.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	425a      	negs	r2, r3
 80038f2:	4153      	adcs	r3, r2
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	001a      	movs	r2, r3
 80038f8:	1dfb      	adds	r3, r7, #7
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d113      	bne.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	2220      	movs	r2, #32
 8003906:	431a      	orrs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2241      	movs	r2, #65	; 0x41
 8003910:	2120      	movs	r1, #32
 8003912:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2242      	movs	r2, #66	; 0x42
 8003918:	2100      	movs	r1, #0
 800391a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2240      	movs	r2, #64	; 0x40
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e00f      	b.n	8003948 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4013      	ands	r3, r2
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	425a      	negs	r2, r3
 8003938:	4153      	adcs	r3, r2
 800393a:	b2db      	uxtb	r3, r3
 800393c:	001a      	movs	r2, r3
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d0b5      	beq.n	80038b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b004      	add	sp, #16
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800395c:	e032      	b.n	80039c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	0018      	movs	r0, r3
 8003966:	f000 f87d 	bl	8003a64 <I2C_IsErrorOccurred>
 800396a:	1e03      	subs	r3, r0, #0
 800396c:	d001      	beq.n	8003972 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e030      	b.n	80039d4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3301      	adds	r3, #1
 8003976:	d025      	beq.n	80039c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003978:	f7fe faa2 	bl	8001ec0 <HAL_GetTick>
 800397c:	0002      	movs	r2, r0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	429a      	cmp	r2, r3
 8003986:	d302      	bcc.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d11a      	bne.n	80039c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2202      	movs	r2, #2
 8003996:	4013      	ands	r3, r2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d013      	beq.n	80039c4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	2220      	movs	r2, #32
 80039a2:	431a      	orrs	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2241      	movs	r2, #65	; 0x41
 80039ac:	2120      	movs	r1, #32
 80039ae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2242      	movs	r2, #66	; 0x42
 80039b4:	2100      	movs	r1, #0
 80039b6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2240      	movs	r2, #64	; 0x40
 80039bc:	2100      	movs	r1, #0
 80039be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e007      	b.n	80039d4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2202      	movs	r2, #2
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d1c5      	bne.n	800395e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b004      	add	sp, #16
 80039da:	bd80      	pop	{r7, pc}

080039dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e8:	e02f      	b.n	8003a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 f837 	bl	8003a64 <I2C_IsErrorOccurred>
 80039f6:	1e03      	subs	r3, r0, #0
 80039f8:	d001      	beq.n	80039fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e02d      	b.n	8003a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fe fa5f 	bl	8001ec0 <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11a      	bne.n	8003a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d013      	beq.n	8003a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	2220      	movs	r2, #32
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2241      	movs	r2, #65	; 0x41
 8003a32:	2120      	movs	r1, #32
 8003a34:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2242      	movs	r2, #66	; 0x42
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2240      	movs	r2, #64	; 0x40
 8003a42:	2100      	movs	r1, #0
 8003a44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e007      	b.n	8003a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2220      	movs	r2, #32
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d1c8      	bne.n	80039ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b004      	add	sp, #16
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b590      	push	{r4, r7, lr}
 8003a66:	b08b      	sub	sp, #44	; 0x2c
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a70:	2327      	movs	r3, #39	; 0x27
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <I2C_IsErrorOccurred+0x2e>
 8003a90:	e082      	b.n	8003b98 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2210      	movs	r2, #16
 8003a98:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a9a:	e060      	b.n	8003b5e <I2C_IsErrorOccurred+0xfa>
 8003a9c:	2427      	movs	r4, #39	; 0x27
 8003a9e:	193b      	adds	r3, r7, r4
 8003aa0:	193a      	adds	r2, r7, r4
 8003aa2:	7812      	ldrb	r2, [r2, #0]
 8003aa4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	d058      	beq.n	8003b5e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003aac:	f7fe fa08 	bl	8001ec0 <HAL_GetTick>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d306      	bcc.n	8003aca <I2C_IsErrorOccurred+0x66>
 8003abc:	193b      	adds	r3, r7, r4
 8003abe:	193a      	adds	r2, r7, r4
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d149      	bne.n	8003b5e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	2380      	movs	r3, #128	; 0x80
 8003ad2:	01db      	lsls	r3, r3, #7
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ad8:	2013      	movs	r0, #19
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	2142      	movs	r1, #66	; 0x42
 8003ae0:	5c52      	ldrb	r2, [r2, r1]
 8003ae2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	401a      	ands	r2, r3
 8003af0:	2380      	movs	r3, #128	; 0x80
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d126      	bne.n	8003b46 <I2C_IsErrorOccurred+0xe2>
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	01db      	lsls	r3, r3, #7
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d021      	beq.n	8003b46 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003b02:	183b      	adds	r3, r7, r0
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d01d      	beq.n	8003b46 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	01c9      	lsls	r1, r1, #7
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b1c:	f7fe f9d0 	bl	8001ec0 <HAL_GetTick>
 8003b20:	0003      	movs	r3, r0
 8003b22:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b24:	e00f      	b.n	8003b46 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b26:	f7fe f9cb 	bl	8001ec0 <HAL_GetTick>
 8003b2a:	0002      	movs	r2, r0
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b19      	cmp	r3, #25
 8003b32:	d908      	bls.n	8003b46 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	2220      	movs	r2, #32
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b3c:	2327      	movs	r3, #39	; 0x27
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2201      	movs	r2, #1
 8003b42:	701a      	strb	r2, [r3, #0]

              break;
 8003b44:	e00b      	b.n	8003b5e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2127      	movs	r1, #39	; 0x27
 8003b52:	187a      	adds	r2, r7, r1
 8003b54:	1879      	adds	r1, r7, r1
 8003b56:	7809      	ldrb	r1, [r1, #0]
 8003b58:	7011      	strb	r1, [r2, #0]
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d1e3      	bne.n	8003b26 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2220      	movs	r2, #32
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d004      	beq.n	8003b76 <I2C_IsErrorOccurred+0x112>
 8003b6c:	2327      	movs	r3, #39	; 0x27
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d092      	beq.n	8003a9c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b76:	2327      	movs	r3, #39	; 0x27
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2220      	movs	r2, #32
 8003b86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b90:	2327      	movs	r3, #39	; 0x27
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d00c      	beq.n	8003bc4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	2201      	movs	r2, #1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2280      	movs	r2, #128	; 0x80
 8003bb8:	0052      	lsls	r2, r2, #1
 8003bba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bbc:	2327      	movs	r3, #39	; 0x27
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d00c      	beq.n	8003be8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	00d2      	lsls	r2, r2, #3
 8003bde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003be0:	2327      	movs	r3, #39	; 0x27
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d00c      	beq.n	8003c0c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c04:	2327      	movs	r3, #39	; 0x27
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003c0c:	2327      	movs	r3, #39	; 0x27
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01d      	beq.n	8003c52 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f7ff fe1f 	bl	800385c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	490d      	ldr	r1, [pc, #52]	; (8003c60 <I2C_IsErrorOccurred+0x1fc>)
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2241      	movs	r2, #65	; 0x41
 8003c3e:	2120      	movs	r1, #32
 8003c40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2242      	movs	r2, #66	; 0x42
 8003c46:	2100      	movs	r1, #0
 8003c48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2240      	movs	r2, #64	; 0x40
 8003c4e:	2100      	movs	r1, #0
 8003c50:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003c52:	2327      	movs	r3, #39	; 0x27
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	781b      	ldrb	r3, [r3, #0]
}
 8003c58:	0018      	movs	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b00b      	add	sp, #44	; 0x2c
 8003c5e:	bd90      	pop	{r4, r7, pc}
 8003c60:	fe00e800 	.word	0xfe00e800

08003c64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	0008      	movs	r0, r1
 8003c6e:	0011      	movs	r1, r2
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	240a      	movs	r4, #10
 8003c74:	193b      	adds	r3, r7, r4
 8003c76:	1c02      	adds	r2, r0, #0
 8003c78:	801a      	strh	r2, [r3, #0]
 8003c7a:	2009      	movs	r0, #9
 8003c7c:	183b      	adds	r3, r7, r0
 8003c7e:	1c0a      	adds	r2, r1, #0
 8003c80:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c82:	193b      	adds	r3, r7, r4
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	059b      	lsls	r3, r3, #22
 8003c88:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c8a:	183b      	adds	r3, r7, r0
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	0419      	lsls	r1, r3, #16
 8003c90:	23ff      	movs	r3, #255	; 0xff
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c96:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	085b      	lsrs	r3, r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cae:	0d51      	lsrs	r1, r2, #21
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	00d2      	lsls	r2, r2, #3
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	4907      	ldr	r1, [pc, #28]	; (8003cd4 <I2C_TransferConfig+0x70>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	43d2      	mvns	r2, r2
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	0011      	movs	r1, r2
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b007      	add	sp, #28
 8003cd0:	bd90      	pop	{r4, r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	03ff63ff 	.word	0x03ff63ff

08003cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2241      	movs	r2, #65	; 0x41
 8003ce6:	5c9b      	ldrb	r3, [r3, r2]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d138      	bne.n	8003d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2240      	movs	r2, #64	; 0x40
 8003cf2:	5c9b      	ldrb	r3, [r3, r2]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e032      	b.n	8003d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2240      	movs	r2, #64	; 0x40
 8003d00:	2101      	movs	r1, #1
 8003d02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2241      	movs	r2, #65	; 0x41
 8003d08:	2124      	movs	r1, #36	; 0x24
 8003d0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	438a      	bics	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4911      	ldr	r1, [pc, #68]	; (8003d6c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2101      	movs	r1, #1
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2241      	movs	r2, #65	; 0x41
 8003d50:	2120      	movs	r1, #32
 8003d52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2240      	movs	r2, #64	; 0x40
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b002      	add	sp, #8
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	ffffefff 	.word	0xffffefff

08003d70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2241      	movs	r2, #65	; 0x41
 8003d7e:	5c9b      	ldrb	r3, [r3, r2]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d139      	bne.n	8003dfa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2240      	movs	r2, #64	; 0x40
 8003d8a:	5c9b      	ldrb	r3, [r3, r2]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e033      	b.n	8003dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2240      	movs	r2, #64	; 0x40
 8003d98:	2101      	movs	r1, #1
 8003d9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2241      	movs	r2, #65	; 0x41
 8003da0:	2124      	movs	r1, #36	; 0x24
 8003da2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2101      	movs	r1, #1
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2241      	movs	r2, #65	; 0x41
 8003dea:	2120      	movs	r1, #32
 8003dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2240      	movs	r2, #64	; 0x40
 8003df2:	2100      	movs	r1, #0
 8003df4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b004      	add	sp, #16
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	fffff0ff 	.word	0xfffff0ff

08003e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d11f      	bne.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	0013      	movs	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4912      	ldr	r1, [pc, #72]	; (8003e84 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7fc f97e 	bl	800013c <__udivsi3>
 8003e40:	0003      	movs	r3, r0
 8003e42:	3301      	adds	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e46:	e008      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e001      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e009      	b.n	8003e6e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	401a      	ands	r2, r3
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d0ed      	beq.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	fffff9ff 	.word	0xfffff9ff
 8003e80:	20000010 	.word	0x20000010
 8003e84:	000f4240 	.word	0x000f4240

08003e88 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <LL_RCC_GetAPB1Prescaler+0x14>)
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	23e0      	movs	r3, #224	; 0xe0
 8003e92:	01db      	lsls	r3, r3, #7
 8003e94:	4013      	ands	r3, r2
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e2fe      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d100      	bne.n	8003ebe <HAL_RCC_OscConfig+0x1e>
 8003ebc:	e07c      	b.n	8003fb8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ebe:	4bc3      	ldr	r3, [pc, #780]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2238      	movs	r2, #56	; 0x38
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec8:	4bc0      	ldr	r3, [pc, #768]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	4013      	ands	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d102      	bne.n	8003ede <HAL_RCC_OscConfig+0x3e>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d002      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d10b      	bne.n	8003efc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	4bb9      	ldr	r3, [pc, #740]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	029b      	lsls	r3, r3, #10
 8003eec:	4013      	ands	r3, r2
 8003eee:	d062      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x116>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d15e      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e2d9      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	025b      	lsls	r3, r3, #9
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_OscConfig+0x78>
 8003f08:	4bb0      	ldr	r3, [pc, #704]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4baf      	ldr	r3, [pc, #700]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	0249      	lsls	r1, r1, #9
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e020      	b.n	8003f5a <HAL_RCC_OscConfig+0xba>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	23a0      	movs	r3, #160	; 0xa0
 8003f1e:	02db      	lsls	r3, r3, #11
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d10e      	bne.n	8003f42 <HAL_RCC_OscConfig+0xa2>
 8003f24:	4ba9      	ldr	r3, [pc, #676]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4ba8      	ldr	r3, [pc, #672]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	02c9      	lsls	r1, r1, #11
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	4ba6      	ldr	r3, [pc, #664]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4ba5      	ldr	r3, [pc, #660]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	0249      	lsls	r1, r1, #9
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e00b      	b.n	8003f5a <HAL_RCC_OscConfig+0xba>
 8003f42:	4ba2      	ldr	r3, [pc, #648]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4ba1      	ldr	r3, [pc, #644]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f48:	49a1      	ldr	r1, [pc, #644]	; (80041d0 <HAL_RCC_OscConfig+0x330>)
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	4b9f      	ldr	r3, [pc, #636]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b9e      	ldr	r3, [pc, #632]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f54:	499f      	ldr	r1, [pc, #636]	; (80041d4 <HAL_RCC_OscConfig+0x334>)
 8003f56:	400a      	ands	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d014      	beq.n	8003f8c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fd ffad 	bl	8001ec0 <HAL_GetTick>
 8003f66:	0003      	movs	r3, r0
 8003f68:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fd ffa8 	bl	8001ec0 <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e298      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f7e:	4b93      	ldr	r3, [pc, #588]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	029b      	lsls	r3, r3, #10
 8003f86:	4013      	ands	r3, r2
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0xcc>
 8003f8a:	e015      	b.n	8003fb8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd ff98 	bl	8001ec0 <HAL_GetTick>
 8003f90:	0003      	movs	r3, r0
 8003f92:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f96:	f7fd ff93 	bl	8001ec0 <HAL_GetTick>
 8003f9a:	0002      	movs	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b64      	cmp	r3, #100	; 0x64
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e283      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fa8:	4b88      	ldr	r3, [pc, #544]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	029b      	lsls	r3, r3, #10
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d1f0      	bne.n	8003f96 <HAL_RCC_OscConfig+0xf6>
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d100      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x124>
 8003fc2:	e099      	b.n	80040f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc4:	4b81      	ldr	r3, [pc, #516]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2238      	movs	r2, #56	; 0x38
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fce:	4b7f      	ldr	r3, [pc, #508]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x144>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d002      	beq.n	8003fea <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d135      	bne.n	8004056 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fea:	4b78      	ldr	r3, [pc, #480]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	2380      	movs	r3, #128	; 0x80
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d005      	beq.n	8004002 <HAL_RCC_OscConfig+0x162>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e256      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004002:	4b72      	ldr	r3, [pc, #456]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4a74      	ldr	r2, [pc, #464]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 8004008:	4013      	ands	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	021a      	lsls	r2, r3, #8
 8004012:	4b6e      	ldr	r3, [pc, #440]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d112      	bne.n	8004044 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800401e:	4b6b      	ldr	r3, [pc, #428]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6e      	ldr	r2, [pc, #440]	; (80041dc <HAL_RCC_OscConfig+0x33c>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	4b67      	ldr	r3, [pc, #412]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004032:	4b66      	ldr	r3, [pc, #408]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	0adb      	lsrs	r3, r3, #11
 8004038:	2207      	movs	r2, #7
 800403a:	4013      	ands	r3, r2
 800403c:	4a68      	ldr	r2, [pc, #416]	; (80041e0 <HAL_RCC_OscConfig+0x340>)
 800403e:	40da      	lsrs	r2, r3
 8004040:	4b68      	ldr	r3, [pc, #416]	; (80041e4 <HAL_RCC_OscConfig+0x344>)
 8004042:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004044:	4b68      	ldr	r3, [pc, #416]	; (80041e8 <HAL_RCC_OscConfig+0x348>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0018      	movs	r0, r3
 800404a:	f7fd fedd 	bl	8001e08 <HAL_InitTick>
 800404e:	1e03      	subs	r3, r0, #0
 8004050:	d051      	beq.n	80040f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e22c      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d030      	beq.n	80040c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800405e:	4b5b      	ldr	r3, [pc, #364]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a5e      	ldr	r2, [pc, #376]	; (80041dc <HAL_RCC_OscConfig+0x33c>)
 8004064:	4013      	ands	r3, r2
 8004066:	0019      	movs	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	4b57      	ldr	r3, [pc, #348]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004072:	4b56      	ldr	r3, [pc, #344]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4b55      	ldr	r3, [pc, #340]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	0049      	lsls	r1, r1, #1
 800407c:	430a      	orrs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fd ff1e 	bl	8001ec0 <HAL_GetTick>
 8004084:	0003      	movs	r3, r0
 8004086:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408a:	f7fd ff19 	bl	8001ec0 <HAL_GetTick>
 800408e:	0002      	movs	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e209      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800409c:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4013      	ands	r3, r2
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a8:	4b48      	ldr	r3, [pc, #288]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a4a      	ldr	r2, [pc, #296]	; (80041d8 <HAL_RCC_OscConfig+0x338>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	0019      	movs	r1, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	021a      	lsls	r2, r3, #8
 80040b8:	4b44      	ldr	r3, [pc, #272]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	e01b      	b.n	80040f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80040c0:	4b42      	ldr	r3, [pc, #264]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b41      	ldr	r3, [pc, #260]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 80040c6:	4949      	ldr	r1, [pc, #292]	; (80041ec <HAL_RCC_OscConfig+0x34c>)
 80040c8:	400a      	ands	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd fef8 	bl	8001ec0 <HAL_GetTick>
 80040d0:	0003      	movs	r3, r0
 80040d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d6:	f7fd fef3 	bl	8001ec0 <HAL_GetTick>
 80040da:	0002      	movs	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e1e3      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040e8:	4b38      	ldr	r3, [pc, #224]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4013      	ands	r3, r2
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x236>
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2208      	movs	r2, #8
 80040fe:	4013      	ands	r3, r2
 8004100:	d047      	beq.n	8004192 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004102:	4b32      	ldr	r3, [pc, #200]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2238      	movs	r2, #56	; 0x38
 8004108:	4013      	ands	r3, r2
 800410a:	2b18      	cmp	r3, #24
 800410c:	d10a      	bne.n	8004124 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800410e:	4b2f      	ldr	r3, [pc, #188]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004112:	2202      	movs	r2, #2
 8004114:	4013      	ands	r3, r2
 8004116:	d03c      	beq.n	8004192 <HAL_RCC_OscConfig+0x2f2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d138      	bne.n	8004192 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e1c5      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d019      	beq.n	8004160 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800412c:	4b27      	ldr	r3, [pc, #156]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 800412e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004130:	4b26      	ldr	r3, [pc, #152]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004132:	2101      	movs	r1, #1
 8004134:	430a      	orrs	r2, r1
 8004136:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd fec2 	bl	8001ec0 <HAL_GetTick>
 800413c:	0003      	movs	r3, r0
 800413e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004142:	f7fd febd 	bl	8001ec0 <HAL_GetTick>
 8004146:	0002      	movs	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e1ad      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004158:	2202      	movs	r2, #2
 800415a:	4013      	ands	r3, r2
 800415c:	d0f1      	beq.n	8004142 <HAL_RCC_OscConfig+0x2a2>
 800415e:	e018      	b.n	8004192 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004162:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 8004166:	2101      	movs	r1, #1
 8004168:	438a      	bics	r2, r1
 800416a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd fea8 	bl	8001ec0 <HAL_GetTick>
 8004170:	0003      	movs	r3, r0
 8004172:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004176:	f7fd fea3 	bl	8001ec0 <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e193      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004188:	4b10      	ldr	r3, [pc, #64]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 800418a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418c:	2202      	movs	r2, #2
 800418e:	4013      	ands	r3, r2
 8004190:	d1f1      	bne.n	8004176 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2204      	movs	r2, #4
 8004198:	4013      	ands	r3, r2
 800419a:	d100      	bne.n	800419e <HAL_RCC_OscConfig+0x2fe>
 800419c:	e0c6      	b.n	800432c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419e:	231f      	movs	r3, #31
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80041a6:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2238      	movs	r2, #56	; 0x38
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d11e      	bne.n	80041f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_OscConfig+0x32c>)
 80041b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b6:	2202      	movs	r2, #2
 80041b8:	4013      	ands	r3, r2
 80041ba:	d100      	bne.n	80041be <HAL_RCC_OscConfig+0x31e>
 80041bc:	e0b6      	b.n	800432c <HAL_RCC_OscConfig+0x48c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d000      	beq.n	80041c8 <HAL_RCC_OscConfig+0x328>
 80041c6:	e0b1      	b.n	800432c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e171      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
 80041cc:	40021000 	.word	0x40021000
 80041d0:	fffeffff 	.word	0xfffeffff
 80041d4:	fffbffff 	.word	0xfffbffff
 80041d8:	ffff80ff 	.word	0xffff80ff
 80041dc:	ffffc7ff 	.word	0xffffc7ff
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	20000010 	.word	0x20000010
 80041e8:	20000014 	.word	0x20000014
 80041ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041f0:	4bb1      	ldr	r3, [pc, #708]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80041f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	055b      	lsls	r3, r3, #21
 80041f8:	4013      	ands	r3, r2
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_OscConfig+0x360>
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x362>
 8004200:	2300      	movs	r3, #0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d011      	beq.n	800422a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4bac      	ldr	r3, [pc, #688]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800420a:	4bab      	ldr	r3, [pc, #684]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 800420c:	2180      	movs	r1, #128	; 0x80
 800420e:	0549      	lsls	r1, r1, #21
 8004210:	430a      	orrs	r2, r1
 8004212:	63da      	str	r2, [r3, #60]	; 0x3c
 8004214:	4ba8      	ldr	r3, [pc, #672]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	055b      	lsls	r3, r3, #21
 800421c:	4013      	ands	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004222:	231f      	movs	r3, #31
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422a:	4ba4      	ldr	r3, [pc, #656]	; (80044bc <HAL_RCC_OscConfig+0x61c>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	4013      	ands	r3, r2
 8004234:	d11a      	bne.n	800426c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004236:	4ba1      	ldr	r3, [pc, #644]	; (80044bc <HAL_RCC_OscConfig+0x61c>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4ba0      	ldr	r3, [pc, #640]	; (80044bc <HAL_RCC_OscConfig+0x61c>)
 800423c:	2180      	movs	r1, #128	; 0x80
 800423e:	0049      	lsls	r1, r1, #1
 8004240:	430a      	orrs	r2, r1
 8004242:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004244:	f7fd fe3c 	bl	8001ec0 <HAL_GetTick>
 8004248:	0003      	movs	r3, r0
 800424a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424e:	f7fd fe37 	bl	8001ec0 <HAL_GetTick>
 8004252:	0002      	movs	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e127      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004260:	4b96      	ldr	r3, [pc, #600]	; (80044bc <HAL_RCC_OscConfig+0x61c>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4013      	ands	r3, r2
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <HAL_RCC_OscConfig+0x3e2>
 8004274:	4b90      	ldr	r3, [pc, #576]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004278:	4b8f      	ldr	r3, [pc, #572]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 800427a:	2101      	movs	r1, #1
 800427c:	430a      	orrs	r2, r1
 800427e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004280:	e01c      	b.n	80042bc <HAL_RCC_OscConfig+0x41c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b05      	cmp	r3, #5
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x404>
 800428a:	4b8b      	ldr	r3, [pc, #556]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 800428c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800428e:	4b8a      	ldr	r3, [pc, #552]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004290:	2104      	movs	r1, #4
 8004292:	430a      	orrs	r2, r1
 8004294:	65da      	str	r2, [r3, #92]	; 0x5c
 8004296:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004298:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800429a:	4b87      	ldr	r3, [pc, #540]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 800429c:	2101      	movs	r1, #1
 800429e:	430a      	orrs	r2, r1
 80042a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0x41c>
 80042a4:	4b84      	ldr	r3, [pc, #528]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80042a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042a8:	4b83      	ldr	r3, [pc, #524]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80042aa:	2101      	movs	r1, #1
 80042ac:	438a      	bics	r2, r1
 80042ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80042b0:	4b81      	ldr	r3, [pc, #516]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80042b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042b4:	4b80      	ldr	r3, [pc, #512]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80042b6:	2104      	movs	r1, #4
 80042b8:	438a      	bics	r2, r1
 80042ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d014      	beq.n	80042ee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd fdfc 	bl	8001ec0 <HAL_GetTick>
 80042c8:	0003      	movs	r3, r0
 80042ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042cc:	e009      	b.n	80042e2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fd fdf7 	bl	8001ec0 <HAL_GetTick>
 80042d2:	0002      	movs	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	4a79      	ldr	r2, [pc, #484]	; (80044c0 <HAL_RCC_OscConfig+0x620>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e0e6      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e2:	4b75      	ldr	r3, [pc, #468]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80042e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e6:	2202      	movs	r2, #2
 80042e8:	4013      	ands	r3, r2
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x42e>
 80042ec:	e013      	b.n	8004316 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ee:	f7fd fde7 	bl	8001ec0 <HAL_GetTick>
 80042f2:	0003      	movs	r3, r0
 80042f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f6:	e009      	b.n	800430c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f8:	f7fd fde2 	bl	8001ec0 <HAL_GetTick>
 80042fc:	0002      	movs	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	4a6f      	ldr	r2, [pc, #444]	; (80044c0 <HAL_RCC_OscConfig+0x620>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0d1      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800430c:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 800430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004310:	2202      	movs	r2, #2
 8004312:	4013      	ands	r3, r2
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004316:	231f      	movs	r3, #31
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d105      	bne.n	800432c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004320:	4b65      	ldr	r3, [pc, #404]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004324:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004326:	4967      	ldr	r1, [pc, #412]	; (80044c4 <HAL_RCC_OscConfig+0x624>)
 8004328:	400a      	ands	r2, r1
 800432a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d100      	bne.n	8004336 <HAL_RCC_OscConfig+0x496>
 8004334:	e0bb      	b.n	80044ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004336:	4b60      	ldr	r3, [pc, #384]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2238      	movs	r2, #56	; 0x38
 800433c:	4013      	ands	r3, r2
 800433e:	2b10      	cmp	r3, #16
 8004340:	d100      	bne.n	8004344 <HAL_RCC_OscConfig+0x4a4>
 8004342:	e07b      	b.n	800443c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d156      	bne.n	80043fa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434c:	4b5a      	ldr	r3, [pc, #360]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004352:	495d      	ldr	r1, [pc, #372]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 8004354:	400a      	ands	r2, r1
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fd fdb2 	bl	8001ec0 <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004362:	f7fd fdad 	bl	8001ec0 <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e09d      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	049b      	lsls	r3, r3, #18
 800437c:	4013      	ands	r3, r2
 800437e:	d1f0      	bne.n	8004362 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004380:	4b4d      	ldr	r3, [pc, #308]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a51      	ldr	r2, [pc, #324]	; (80044cc <HAL_RCC_OscConfig+0x62c>)
 8004386:	4013      	ands	r3, r2
 8004388:	0019      	movs	r1, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	431a      	orrs	r2, r3
 80043ae:	4b42      	ldr	r3, [pc, #264]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80043b0:	430a      	orrs	r2, r1
 80043b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b4:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	0449      	lsls	r1, r1, #17
 80043be:	430a      	orrs	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80043c2:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	4b3c      	ldr	r3, [pc, #240]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	0549      	lsls	r1, r1, #21
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd fd76 	bl	8001ec0 <HAL_GetTick>
 80043d4:	0003      	movs	r3, r0
 80043d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043da:	f7fd fd71 	bl	8001ec0 <HAL_GetTick>
 80043de:	0002      	movs	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e061      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ec:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	049b      	lsls	r3, r3, #18
 80043f4:	4013      	ands	r3, r2
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x53a>
 80043f8:	e059      	b.n	80044ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004400:	4931      	ldr	r1, [pc, #196]	; (80044c8 <HAL_RCC_OscConfig+0x628>)
 8004402:	400a      	ands	r2, r1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fd fd5b 	bl	8001ec0 <HAL_GetTick>
 800440a:	0003      	movs	r3, r0
 800440c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd fd56 	bl	8001ec0 <HAL_GetTick>
 8004414:	0002      	movs	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e046      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004422:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	049b      	lsls	r3, r3, #18
 800442a:	4013      	ands	r3, r2
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800442e:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	4b21      	ldr	r3, [pc, #132]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 8004434:	4926      	ldr	r1, [pc, #152]	; (80044d0 <HAL_RCC_OscConfig+0x630>)
 8004436:	400a      	ands	r2, r1
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	e038      	b.n	80044ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e033      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCC_OscConfig+0x618>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2203      	movs	r2, #3
 8004452:	401a      	ands	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	429a      	cmp	r2, r3
 800445a:	d126      	bne.n	80044aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2270      	movs	r2, #112	; 0x70
 8004460:	401a      	ands	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d11f      	bne.n	80044aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	23fe      	movs	r3, #254	; 0xfe
 800446e:	01db      	lsls	r3, r3, #7
 8004470:	401a      	ands	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d116      	bne.n	80044aa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	23f8      	movs	r3, #248	; 0xf8
 8004480:	039b      	lsls	r3, r3, #14
 8004482:	401a      	ands	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d10e      	bne.n	80044aa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	23e0      	movs	r3, #224	; 0xe0
 8004490:	051b      	lsls	r3, r3, #20
 8004492:	401a      	ands	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	0f5b      	lsrs	r3, r3, #29
 80044a0:	075a      	lsls	r2, r3, #29
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b008      	add	sp, #32
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40007000 	.word	0x40007000
 80044c0:	00001388 	.word	0x00001388
 80044c4:	efffffff 	.word	0xefffffff
 80044c8:	feffffff 	.word	0xfeffffff
 80044cc:	11c1808c 	.word	0x11c1808c
 80044d0:	eefefffc 	.word	0xeefefffc

080044d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0e9      	b.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b76      	ldr	r3, [pc, #472]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2207      	movs	r2, #7
 80044ee:	4013      	ands	r3, r2
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d91e      	bls.n	8004534 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b73      	ldr	r3, [pc, #460]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2207      	movs	r2, #7
 80044fc:	4393      	bics	r3, r2
 80044fe:	0019      	movs	r1, r3
 8004500:	4b70      	ldr	r3, [pc, #448]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004508:	f7fd fcda 	bl	8001ec0 <HAL_GetTick>
 800450c:	0003      	movs	r3, r0
 800450e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004510:	e009      	b.n	8004526 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004512:	f7fd fcd5 	bl	8001ec0 <HAL_GetTick>
 8004516:	0002      	movs	r2, r0
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	4a6a      	ldr	r2, [pc, #424]	; (80046c8 <HAL_RCC_ClockConfig+0x1f4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0ca      	b.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004526:	4b67      	ldr	r3, [pc, #412]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2207      	movs	r2, #7
 800452c:	4013      	ands	r3, r2
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d1ee      	bne.n	8004512 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2202      	movs	r2, #2
 800453a:	4013      	ands	r3, r2
 800453c:	d015      	beq.n	800456a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2204      	movs	r2, #4
 8004544:	4013      	ands	r3, r2
 8004546:	d006      	beq.n	8004556 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004548:	4b60      	ldr	r3, [pc, #384]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b5f      	ldr	r3, [pc, #380]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 800454e:	21e0      	movs	r1, #224	; 0xe0
 8004550:	01c9      	lsls	r1, r1, #7
 8004552:	430a      	orrs	r2, r1
 8004554:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004556:	4b5d      	ldr	r3, [pc, #372]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4a5d      	ldr	r2, [pc, #372]	; (80046d0 <HAL_RCC_ClockConfig+0x1fc>)
 800455c:	4013      	ands	r3, r2
 800455e:	0019      	movs	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	4b59      	ldr	r3, [pc, #356]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2201      	movs	r2, #1
 8004570:	4013      	ands	r3, r2
 8004572:	d057      	beq.n	8004624 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d107      	bne.n	800458c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800457c:	4b53      	ldr	r3, [pc, #332]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	4013      	ands	r3, r2
 8004586:	d12b      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e097      	b.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004594:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	049b      	lsls	r3, r3, #18
 800459c:	4013      	ands	r3, r2
 800459e:	d11f      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e08b      	b.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ac:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4013      	ands	r3, r2
 80045b6:	d113      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e07f      	b.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045c4:	4b41      	ldr	r3, [pc, #260]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 80045c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045c8:	2202      	movs	r2, #2
 80045ca:	4013      	ands	r3, r2
 80045cc:	d108      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e074      	b.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045d2:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	2202      	movs	r2, #2
 80045d8:	4013      	ands	r3, r2
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e06d      	b.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045e0:	4b3a      	ldr	r3, [pc, #232]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2207      	movs	r2, #7
 80045e6:	4393      	bics	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 80045f0:	430a      	orrs	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f4:	f7fd fc64 	bl	8001ec0 <HAL_GetTick>
 80045f8:	0003      	movs	r3, r0
 80045fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fc:	e009      	b.n	8004612 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fe:	f7fd fc5f 	bl	8001ec0 <HAL_GetTick>
 8004602:	0002      	movs	r2, r0
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	4a2f      	ldr	r2, [pc, #188]	; (80046c8 <HAL_RCC_ClockConfig+0x1f4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e054      	b.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2238      	movs	r2, #56	; 0x38
 8004618:	401a      	ands	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	429a      	cmp	r2, r3
 8004622:	d1ec      	bne.n	80045fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004624:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2207      	movs	r2, #7
 800462a:	4013      	ands	r3, r2
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d21e      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2207      	movs	r2, #7
 8004638:	4393      	bics	r3, r2
 800463a:	0019      	movs	r1, r3
 800463c:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004644:	f7fd fc3c 	bl	8001ec0 <HAL_GetTick>
 8004648:	0003      	movs	r3, r0
 800464a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800464c:	e009      	b.n	8004662 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f7fd fc37 	bl	8001ec0 <HAL_GetTick>
 8004652:	0002      	movs	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <HAL_RCC_ClockConfig+0x1f4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e02c      	b.n	80046bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004662:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2207      	movs	r2, #7
 8004668:	4013      	ands	r3, r2
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d1ee      	bne.n	800464e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2204      	movs	r2, #4
 8004676:	4013      	ands	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <HAL_RCC_ClockConfig+0x200>)
 8004680:	4013      	ands	r3, r2
 8004682:	0019      	movs	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800468e:	f000 f829 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8004692:	0001      	movs	r1, r0
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_RCC_ClockConfig+0x1f8>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	220f      	movs	r2, #15
 800469c:	401a      	ands	r2, r3
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <HAL_RCC_ClockConfig+0x204>)
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	58d3      	ldr	r3, [r2, r3]
 80046a4:	221f      	movs	r2, #31
 80046a6:	4013      	ands	r3, r2
 80046a8:	000a      	movs	r2, r1
 80046aa:	40da      	lsrs	r2, r3
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <HAL_RCC_ClockConfig+0x208>)
 80046ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x20c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7fd fba7 	bl	8001e08 <HAL_InitTick>
 80046ba:	0003      	movs	r3, r0
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b004      	add	sp, #16
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40022000 	.word	0x40022000
 80046c8:	00001388 	.word	0x00001388
 80046cc:	40021000 	.word	0x40021000
 80046d0:	fffff0ff 	.word	0xfffff0ff
 80046d4:	ffff8fff 	.word	0xffff8fff
 80046d8:	08009394 	.word	0x08009394
 80046dc:	20000010 	.word	0x20000010
 80046e0:	20000014 	.word	0x20000014

080046e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ea:	4b3c      	ldr	r3, [pc, #240]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2238      	movs	r2, #56	; 0x38
 80046f0:	4013      	ands	r3, r2
 80046f2:	d10f      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046f4:	4b39      	ldr	r3, [pc, #228]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0adb      	lsrs	r3, r3, #11
 80046fa:	2207      	movs	r2, #7
 80046fc:	4013      	ands	r3, r2
 80046fe:	2201      	movs	r2, #1
 8004700:	409a      	lsls	r2, r3
 8004702:	0013      	movs	r3, r2
 8004704:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004706:	6839      	ldr	r1, [r7, #0]
 8004708:	4835      	ldr	r0, [pc, #212]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800470a:	f7fb fd17 	bl	800013c <__udivsi3>
 800470e:	0003      	movs	r3, r0
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	e05d      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004714:	4b31      	ldr	r3, [pc, #196]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2238      	movs	r2, #56	; 0x38
 800471a:	4013      	ands	r3, r2
 800471c:	2b08      	cmp	r3, #8
 800471e:	d102      	bne.n	8004726 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004720:	4b30      	ldr	r3, [pc, #192]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	e054      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004726:	4b2d      	ldr	r3, [pc, #180]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2238      	movs	r2, #56	; 0x38
 800472c:	4013      	ands	r3, r2
 800472e:	2b10      	cmp	r3, #16
 8004730:	d138      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004732:	4b2a      	ldr	r3, [pc, #168]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2203      	movs	r2, #3
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	2207      	movs	r2, #7
 8004744:	4013      	ands	r3, r2
 8004746:	3301      	adds	r3, #1
 8004748:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d10d      	bne.n	800476c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	4824      	ldr	r0, [pc, #144]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004754:	f7fb fcf2 	bl	800013c <__udivsi3>
 8004758:	0003      	movs	r3, r0
 800475a:	0019      	movs	r1, r3
 800475c:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	227f      	movs	r2, #127	; 0x7f
 8004764:	4013      	ands	r3, r2
 8004766:	434b      	muls	r3, r1
 8004768:	617b      	str	r3, [r7, #20]
        break;
 800476a:	e00d      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	481c      	ldr	r0, [pc, #112]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004770:	f7fb fce4 	bl	800013c <__udivsi3>
 8004774:	0003      	movs	r3, r0
 8004776:	0019      	movs	r1, r3
 8004778:	4b18      	ldr	r3, [pc, #96]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	227f      	movs	r2, #127	; 0x7f
 8004780:	4013      	ands	r3, r2
 8004782:	434b      	muls	r3, r1
 8004784:	617b      	str	r3, [r7, #20]
        break;
 8004786:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004788:	4b14      	ldr	r3, [pc, #80]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	0f5b      	lsrs	r3, r3, #29
 800478e:	2207      	movs	r2, #7
 8004790:	4013      	ands	r3, r2
 8004792:	3301      	adds	r3, #1
 8004794:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	6978      	ldr	r0, [r7, #20]
 800479a:	f7fb fccf 	bl	800013c <__udivsi3>
 800479e:	0003      	movs	r3, r0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e015      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047a4:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2238      	movs	r2, #56	; 0x38
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d103      	bne.n	80047b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e00b      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80047b8:	4b08      	ldr	r3, [pc, #32]	; (80047dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2238      	movs	r2, #56	; 0x38
 80047be:	4013      	ands	r3, r2
 80047c0:	2b18      	cmp	r3, #24
 80047c2:	d103      	bne.n	80047cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80047c4:	23fa      	movs	r3, #250	; 0xfa
 80047c6:	01db      	lsls	r3, r3, #7
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e001      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047d0:	693b      	ldr	r3, [r7, #16]
}
 80047d2:	0018      	movs	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	b006      	add	sp, #24
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	40021000 	.word	0x40021000
 80047e0:	00f42400 	.word	0x00f42400
 80047e4:	007a1200 	.word	0x007a1200

080047e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ec:	4b02      	ldr	r3, [pc, #8]	; (80047f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047ee:	681b      	ldr	r3, [r3, #0]
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	20000010 	.word	0x20000010

080047fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047fc:	b5b0      	push	{r4, r5, r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004800:	f7ff fff2 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004804:	0004      	movs	r4, r0
 8004806:	f7ff fb3f 	bl	8003e88 <LL_RCC_GetAPB1Prescaler>
 800480a:	0003      	movs	r3, r0
 800480c:	0b1a      	lsrs	r2, r3, #12
 800480e:	4b05      	ldr	r3, [pc, #20]	; (8004824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004810:	0092      	lsls	r2, r2, #2
 8004812:	58d3      	ldr	r3, [r2, r3]
 8004814:	221f      	movs	r2, #31
 8004816:	4013      	ands	r3, r2
 8004818:	40dc      	lsrs	r4, r3
 800481a:	0023      	movs	r3, r4
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	bdb0      	pop	{r4, r5, r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	080093d4 	.word	0x080093d4

08004828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004830:	2313      	movs	r3, #19
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004838:	2312      	movs	r3, #18
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	2200      	movs	r2, #0
 800483e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	4013      	ands	r3, r2
 800484a:	d100      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800484c:	e0a3      	b.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484e:	2011      	movs	r0, #17
 8004850:	183b      	adds	r3, r7, r0
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004856:	4bc3      	ldr	r3, [pc, #780]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	055b      	lsls	r3, r3, #21
 800485e:	4013      	ands	r3, r2
 8004860:	d110      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	4bc0      	ldr	r3, [pc, #768]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004866:	4bbf      	ldr	r3, [pc, #764]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004868:	2180      	movs	r1, #128	; 0x80
 800486a:	0549      	lsls	r1, r1, #21
 800486c:	430a      	orrs	r2, r1
 800486e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004870:	4bbc      	ldr	r3, [pc, #752]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	055b      	lsls	r3, r3, #21
 8004878:	4013      	ands	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800487e:	183b      	adds	r3, r7, r0
 8004880:	2201      	movs	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004884:	4bb8      	ldr	r3, [pc, #736]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4bb7      	ldr	r3, [pc, #732]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800488a:	2180      	movs	r1, #128	; 0x80
 800488c:	0049      	lsls	r1, r1, #1
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004892:	f7fd fb15 	bl	8001ec0 <HAL_GetTick>
 8004896:	0003      	movs	r3, r0
 8004898:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800489a:	e00b      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489c:	f7fd fb10 	bl	8001ec0 <HAL_GetTick>
 80048a0:	0002      	movs	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d904      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80048aa:	2313      	movs	r3, #19
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	2203      	movs	r2, #3
 80048b0:	701a      	strb	r2, [r3, #0]
        break;
 80048b2:	e005      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048b4:	4bac      	ldr	r3, [pc, #688]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4013      	ands	r3, r2
 80048be:	d0ed      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80048c0:	2313      	movs	r3, #19
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d154      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ca:	4ba6      	ldr	r3, [pc, #664]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048ce:	23c0      	movs	r3, #192	; 0xc0
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4013      	ands	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d019      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d014      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048e6:	4b9f      	ldr	r3, [pc, #636]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	4aa0      	ldr	r2, [pc, #640]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048f0:	4b9c      	ldr	r3, [pc, #624]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048f4:	4b9b      	ldr	r3, [pc, #620]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	0249      	lsls	r1, r1, #9
 80048fa:	430a      	orrs	r2, r1
 80048fc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048fe:	4b99      	ldr	r3, [pc, #612]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004902:	4b98      	ldr	r3, [pc, #608]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004904:	499a      	ldr	r1, [pc, #616]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004906:	400a      	ands	r2, r1
 8004908:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800490a:	4b96      	ldr	r3, [pc, #600]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2201      	movs	r2, #1
 8004914:	4013      	ands	r3, r2
 8004916:	d016      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fd fad2 	bl	8001ec0 <HAL_GetTick>
 800491c:	0003      	movs	r3, r0
 800491e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004920:	e00c      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fd facd 	bl	8001ec0 <HAL_GetTick>
 8004926:	0002      	movs	r2, r0
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	4a91      	ldr	r2, [pc, #580]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d904      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004932:	2313      	movs	r3, #19
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	2203      	movs	r2, #3
 8004938:	701a      	strb	r2, [r3, #0]
            break;
 800493a:	e004      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800493c:	4b89      	ldr	r3, [pc, #548]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	2202      	movs	r2, #2
 8004942:	4013      	ands	r3, r2
 8004944:	d0ed      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004946:	2313      	movs	r3, #19
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004950:	4b84      	ldr	r3, [pc, #528]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	4a85      	ldr	r2, [pc, #532]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004956:	4013      	ands	r3, r2
 8004958:	0019      	movs	r1, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495e:	4b81      	ldr	r3, [pc, #516]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004960:	430a      	orrs	r2, r1
 8004962:	65da      	str	r2, [r3, #92]	; 0x5c
 8004964:	e00c      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004966:	2312      	movs	r3, #18
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	2213      	movs	r2, #19
 800496c:	18ba      	adds	r2, r7, r2
 800496e:	7812      	ldrb	r2, [r2, #0]
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e005      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	2312      	movs	r3, #18
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	2213      	movs	r2, #19
 800497a:	18ba      	adds	r2, r7, r2
 800497c:	7812      	ldrb	r2, [r2, #0]
 800497e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004980:	2311      	movs	r3, #17
 8004982:	18fb      	adds	r3, r7, r3
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d105      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800498a:	4b76      	ldr	r3, [pc, #472]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800498c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800498e:	4b75      	ldr	r3, [pc, #468]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004990:	4979      	ldr	r1, [pc, #484]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004992:	400a      	ands	r2, r1
 8004994:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	4013      	ands	r3, r2
 800499e:	d009      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049a0:	4b70      	ldr	r3, [pc, #448]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	2203      	movs	r2, #3
 80049a6:	4393      	bics	r3, r2
 80049a8:	0019      	movs	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	4b6d      	ldr	r3, [pc, #436]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049b0:	430a      	orrs	r2, r1
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2202      	movs	r2, #2
 80049ba:	4013      	ands	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049be:	4b69      	ldr	r3, [pc, #420]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	220c      	movs	r2, #12
 80049c4:	4393      	bics	r3, r2
 80049c6:	0019      	movs	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	4b65      	ldr	r3, [pc, #404]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ce:	430a      	orrs	r2, r1
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2210      	movs	r2, #16
 80049d8:	4013      	ands	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049dc:	4b61      	ldr	r3, [pc, #388]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	4a66      	ldr	r2, [pc, #408]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	4b5e      	ldr	r3, [pc, #376]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ec:	430a      	orrs	r2, r1
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4013      	ands	r3, r2
 80049fa:	d009      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049fc:	4b59      	ldr	r3, [pc, #356]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	4a5f      	ldr	r2, [pc, #380]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	4b56      	ldr	r3, [pc, #344]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a1c:	4b51      	ldr	r3, [pc, #324]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	0019      	movs	r1, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	4b4e      	ldr	r3, [pc, #312]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2220      	movs	r2, #32
 8004a36:	4013      	ands	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	4a52      	ldr	r2, [pc, #328]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	4b46      	ldr	r3, [pc, #280]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	01db      	lsls	r3, r3, #7
 8004a56:	4013      	ands	r3, r2
 8004a58:	d015      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a5a:	4b42      	ldr	r3, [pc, #264]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	0899      	lsrs	r1, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1a      	ldr	r2, [r3, #32]
 8004a66:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	2380      	movs	r3, #128	; 0x80
 8004a72:	05db      	lsls	r3, r3, #23
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d106      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a78:	4b3a      	ldr	r3, [pc, #232]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a7e:	2180      	movs	r1, #128	; 0x80
 8004a80:	0249      	lsls	r1, r1, #9
 8004a82:	430a      	orrs	r2, r1
 8004a84:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	2380      	movs	r3, #128	; 0x80
 8004a8c:	031b      	lsls	r3, r3, #12
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a92:	4b34      	ldr	r3, [pc, #208]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	2240      	movs	r2, #64	; 0x40
 8004a98:	4393      	bics	r3, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa0:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	039b      	lsls	r3, r3, #14
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab6:	4a35      	ldr	r2, [pc, #212]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	0019      	movs	r1, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac0:	4b28      	ldr	r3, [pc, #160]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	03db      	lsls	r3, r3, #15
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d106      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ad2:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	0449      	lsls	r1, r1, #17
 8004adc:	430a      	orrs	r2, r1
 8004ade:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	03db      	lsls	r3, r3, #15
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d016      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	4a27      	ldr	r2, [pc, #156]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004afc:	430a      	orrs	r2, r1
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	045b      	lsls	r3, r3, #17
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b0c:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b12:	2180      	movs	r1, #128	; 0x80
 8004b14:	0449      	lsls	r1, r1, #17
 8004b16:	430a      	orrs	r2, r1
 8004b18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	4013      	ands	r3, r2
 8004b24:	d016      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	0019      	movs	r1, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b36:	430a      	orrs	r2, r1
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	01db      	lsls	r3, r3, #7
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d106      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b46:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b4c:	2180      	movs	r1, #128	; 0x80
 8004b4e:	0249      	lsls	r1, r1, #9
 8004b50:	430a      	orrs	r2, r1
 8004b52:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004b54:	2312      	movs	r3, #18
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	781b      	ldrb	r3, [r3, #0]
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b006      	add	sp, #24
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	fffffcff 	.word	0xfffffcff
 8004b70:	fffeffff 	.word	0xfffeffff
 8004b74:	00001388 	.word	0x00001388
 8004b78:	efffffff 	.word	0xefffffff
 8004b7c:	fffff3ff 	.word	0xfffff3ff
 8004b80:	fff3ffff 	.word	0xfff3ffff
 8004b84:	ffcfffff 	.word	0xffcfffff
 8004b88:	ffffcfff 	.word	0xffffcfff
 8004b8c:	ffbfffff 	.word	0xffbfffff
 8004b90:	feffffff 	.word	0xfeffffff
 8004b94:	ffff3fff 	.word	0xffff3fff

08004b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e04a      	b.n	8004c40 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	223d      	movs	r2, #61	; 0x3d
 8004bae:	5c9b      	ldrb	r3, [r3, r2]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d107      	bne.n	8004bc6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	223c      	movs	r2, #60	; 0x3c
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7fc fec9 	bl	8001958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	223d      	movs	r2, #61	; 0x3d
 8004bca:	2102      	movs	r1, #2
 8004bcc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	0019      	movs	r1, r3
 8004bd8:	0010      	movs	r0, r2
 8004bda:	f000 fd53 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2248      	movs	r2, #72	; 0x48
 8004be2:	2101      	movs	r1, #1
 8004be4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	223e      	movs	r2, #62	; 0x3e
 8004bea:	2101      	movs	r1, #1
 8004bec:	5499      	strb	r1, [r3, r2]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	223f      	movs	r2, #63	; 0x3f
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2240      	movs	r2, #64	; 0x40
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	5499      	strb	r1, [r3, r2]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2241      	movs	r2, #65	; 0x41
 8004c02:	2101      	movs	r1, #1
 8004c04:	5499      	strb	r1, [r3, r2]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2242      	movs	r2, #66	; 0x42
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	5499      	strb	r1, [r3, r2]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2243      	movs	r2, #67	; 0x43
 8004c12:	2101      	movs	r1, #1
 8004c14:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2244      	movs	r2, #68	; 0x44
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	5499      	strb	r1, [r3, r2]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2245      	movs	r2, #69	; 0x45
 8004c22:	2101      	movs	r1, #1
 8004c24:	5499      	strb	r1, [r3, r2]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2246      	movs	r2, #70	; 0x46
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	5499      	strb	r1, [r3, r2]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2247      	movs	r2, #71	; 0x47
 8004c32:	2101      	movs	r1, #1
 8004c34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	223d      	movs	r2, #61	; 0x3d
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	0018      	movs	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b002      	add	sp, #8
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	223d      	movs	r2, #61	; 0x3d
 8004c54:	5c9b      	ldrb	r3, [r3, r2]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d001      	beq.n	8004c60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e03a      	b.n	8004cd6 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	223d      	movs	r2, #61	; 0x3d
 8004c64:	2102      	movs	r1, #2
 8004c66:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <HAL_TIM_Base_Start+0x98>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00f      	beq.n	8004c92 <HAL_TIM_Base_Start+0x4a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	05db      	lsls	r3, r3, #23
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIM_Base_Start+0x4a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <HAL_TIM_Base_Start+0x9c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIM_Base_Start+0x4a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <HAL_TIM_Base_Start+0xa0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d116      	bne.n	8004cc0 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <HAL_TIM_Base_Start+0xa4>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d016      	beq.n	8004cd2 <HAL_TIM_Base_Start+0x8a>
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	025b      	lsls	r3, r3, #9
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d011      	beq.n	8004cd2 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbe:	e008      	b.n	8004cd2 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2101      	movs	r1, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e000      	b.n	8004cd4 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b004      	add	sp, #16
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	00010007 	.word	0x00010007

08004cf0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	4a0d      	ldr	r2, [pc, #52]	; (8004d34 <HAL_TIM_Base_Stop+0x44>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	d10d      	bne.n	8004d20 <HAL_TIM_Base_Stop+0x30>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4a0b      	ldr	r2, [pc, #44]	; (8004d38 <HAL_TIM_Base_Stop+0x48>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_Base_Stop+0x30>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	438a      	bics	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	223d      	movs	r2, #61	; 0x3d
 8004d24:	2101      	movs	r1, #1
 8004d26:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b002      	add	sp, #8
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	00001111 	.word	0x00001111
 8004d38:	00000444 	.word	0x00000444

08004d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	223d      	movs	r2, #61	; 0x3d
 8004d48:	5c9b      	ldrb	r3, [r3, r2]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d001      	beq.n	8004d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e042      	b.n	8004dda <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	223d      	movs	r2, #61	; 0x3d
 8004d58:	2102      	movs	r1, #2
 8004d5a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2101      	movs	r1, #1
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1c      	ldr	r2, [pc, #112]	; (8004de4 <HAL_TIM_Base_Start_IT+0xa8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <HAL_TIM_Base_Start_IT+0x5a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	05db      	lsls	r3, r3, #23
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d009      	beq.n	8004d96 <HAL_TIM_Base_Start_IT+0x5a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_TIM_Base_Start_IT+0xac>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIM_Base_Start_IT+0x5a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <HAL_TIM_Base_Start_IT+0xb0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d116      	bne.n	8004dc4 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	d016      	beq.n	8004dd6 <HAL_TIM_Base_Start_IT+0x9a>
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	025b      	lsls	r3, r3, #9
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d011      	beq.n	8004dd6 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc2:	e008      	b.n	8004dd6 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2101      	movs	r1, #1
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e000      	b.n	8004dd8 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40014000 	.word	0x40014000
 8004df0:	00010007 	.word	0x00010007

08004df4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e04a      	b.n	8004e9c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	223d      	movs	r2, #61	; 0x3d
 8004e0a:	5c9b      	ldrb	r3, [r3, r2]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d107      	bne.n	8004e22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	223c      	movs	r2, #60	; 0x3c
 8004e16:	2100      	movs	r1, #0
 8004e18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 f841 	bl	8004ea4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	223d      	movs	r2, #61	; 0x3d
 8004e26:	2102      	movs	r1, #2
 8004e28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3304      	adds	r3, #4
 8004e32:	0019      	movs	r1, r3
 8004e34:	0010      	movs	r0, r2
 8004e36:	f000 fc25 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2248      	movs	r2, #72	; 0x48
 8004e3e:	2101      	movs	r1, #1
 8004e40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	223e      	movs	r2, #62	; 0x3e
 8004e46:	2101      	movs	r1, #1
 8004e48:	5499      	strb	r1, [r3, r2]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	223f      	movs	r2, #63	; 0x3f
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2240      	movs	r2, #64	; 0x40
 8004e56:	2101      	movs	r1, #1
 8004e58:	5499      	strb	r1, [r3, r2]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2241      	movs	r2, #65	; 0x41
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2242      	movs	r2, #66	; 0x42
 8004e66:	2101      	movs	r1, #1
 8004e68:	5499      	strb	r1, [r3, r2]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2243      	movs	r2, #67	; 0x43
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2244      	movs	r2, #68	; 0x44
 8004e76:	2101      	movs	r1, #1
 8004e78:	5499      	strb	r1, [r3, r2]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2245      	movs	r2, #69	; 0x45
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2246      	movs	r2, #70	; 0x46
 8004e86:	2101      	movs	r1, #1
 8004e88:	5499      	strb	r1, [r3, r2]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2247      	movs	r2, #71	; 0x47
 8004e8e:	2101      	movs	r1, #1
 8004e90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	223d      	movs	r2, #61	; 0x3d
 8004e96:	2101      	movs	r1, #1
 8004e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b002      	add	sp, #8
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d108      	bne.n	8004ed6 <HAL_TIM_PWM_Start+0x22>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	223e      	movs	r2, #62	; 0x3e
 8004ec8:	5c9b      	ldrb	r3, [r3, r2]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	1e5a      	subs	r2, r3, #1
 8004ed0:	4193      	sbcs	r3, r2
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	e037      	b.n	8004f46 <HAL_TIM_PWM_Start+0x92>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d108      	bne.n	8004eee <HAL_TIM_PWM_Start+0x3a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	223f      	movs	r2, #63	; 0x3f
 8004ee0:	5c9b      	ldrb	r3, [r3, r2]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	1e5a      	subs	r2, r3, #1
 8004ee8:	4193      	sbcs	r3, r2
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	e02b      	b.n	8004f46 <HAL_TIM_PWM_Start+0x92>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d108      	bne.n	8004f06 <HAL_TIM_PWM_Start+0x52>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2240      	movs	r2, #64	; 0x40
 8004ef8:	5c9b      	ldrb	r3, [r3, r2]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	1e5a      	subs	r2, r3, #1
 8004f00:	4193      	sbcs	r3, r2
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	e01f      	b.n	8004f46 <HAL_TIM_PWM_Start+0x92>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	d108      	bne.n	8004f1e <HAL_TIM_PWM_Start+0x6a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2241      	movs	r2, #65	; 0x41
 8004f10:	5c9b      	ldrb	r3, [r3, r2]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	1e5a      	subs	r2, r3, #1
 8004f18:	4193      	sbcs	r3, r2
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	e013      	b.n	8004f46 <HAL_TIM_PWM_Start+0x92>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d108      	bne.n	8004f36 <HAL_TIM_PWM_Start+0x82>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2242      	movs	r2, #66	; 0x42
 8004f28:	5c9b      	ldrb	r3, [r3, r2]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	1e5a      	subs	r2, r3, #1
 8004f30:	4193      	sbcs	r3, r2
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	e007      	b.n	8004f46 <HAL_TIM_PWM_Start+0x92>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2243      	movs	r2, #67	; 0x43
 8004f3a:	5c9b      	ldrb	r3, [r3, r2]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	1e5a      	subs	r2, r3, #1
 8004f42:	4193      	sbcs	r3, r2
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e08b      	b.n	8005066 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_PWM_Start+0xaa>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	223e      	movs	r2, #62	; 0x3e
 8004f58:	2102      	movs	r1, #2
 8004f5a:	5499      	strb	r1, [r3, r2]
 8004f5c:	e023      	b.n	8004fa6 <HAL_TIM_PWM_Start+0xf2>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d104      	bne.n	8004f6e <HAL_TIM_PWM_Start+0xba>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	223f      	movs	r2, #63	; 0x3f
 8004f68:	2102      	movs	r1, #2
 8004f6a:	5499      	strb	r1, [r3, r2]
 8004f6c:	e01b      	b.n	8004fa6 <HAL_TIM_PWM_Start+0xf2>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d104      	bne.n	8004f7e <HAL_TIM_PWM_Start+0xca>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2240      	movs	r2, #64	; 0x40
 8004f78:	2102      	movs	r1, #2
 8004f7a:	5499      	strb	r1, [r3, r2]
 8004f7c:	e013      	b.n	8004fa6 <HAL_TIM_PWM_Start+0xf2>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	d104      	bne.n	8004f8e <HAL_TIM_PWM_Start+0xda>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2241      	movs	r2, #65	; 0x41
 8004f88:	2102      	movs	r1, #2
 8004f8a:	5499      	strb	r1, [r3, r2]
 8004f8c:	e00b      	b.n	8004fa6 <HAL_TIM_PWM_Start+0xf2>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start+0xea>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2242      	movs	r2, #66	; 0x42
 8004f98:	2102      	movs	r1, #2
 8004f9a:	5499      	strb	r1, [r3, r2]
 8004f9c:	e003      	b.n	8004fa6 <HAL_TIM_PWM_Start+0xf2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2243      	movs	r2, #67	; 0x43
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6839      	ldr	r1, [r7, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	0018      	movs	r0, r3
 8004fb0:	f000 ff56 	bl	8005e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2d      	ldr	r2, [pc, #180]	; (8005070 <HAL_TIM_PWM_Start+0x1bc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x128>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2c      	ldr	r2, [pc, #176]	; (8005074 <HAL_TIM_PWM_Start+0x1c0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x128>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <HAL_TIM_PWM_Start+0x1c4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x128>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a29      	ldr	r2, [pc, #164]	; (800507c <HAL_TIM_PWM_Start+0x1c8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0x12c>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x12e>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d008      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	0209      	lsls	r1, r1, #8
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1c      	ldr	r2, [pc, #112]	; (8005070 <HAL_TIM_PWM_Start+0x1bc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <HAL_TIM_PWM_Start+0x16e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	05db      	lsls	r3, r3, #23
 800500a:	429a      	cmp	r2, r3
 800500c:	d009      	beq.n	8005022 <HAL_TIM_PWM_Start+0x16e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <HAL_TIM_PWM_Start+0x1cc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIM_PWM_Start+0x16e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a15      	ldr	r2, [pc, #84]	; (8005074 <HAL_TIM_PWM_Start+0x1c0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d116      	bne.n	8005050 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a16      	ldr	r2, [pc, #88]	; (8005084 <HAL_TIM_PWM_Start+0x1d0>)
 800502a:	4013      	ands	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b06      	cmp	r3, #6
 8005032:	d016      	beq.n	8005062 <HAL_TIM_PWM_Start+0x1ae>
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	025b      	lsls	r3, r3, #9
 800503a:	429a      	cmp	r2, r3
 800503c:	d011      	beq.n	8005062 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2101      	movs	r1, #1
 800504a:	430a      	orrs	r2, r1
 800504c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	e008      	b.n	8005062 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2101      	movs	r1, #1
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e000      	b.n	8005064 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005062:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	0018      	movs	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	b004      	add	sp, #16
 800506c:	bd80      	pop	{r7, pc}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40014000 	.word	0x40014000
 8005078:	40014400 	.word	0x40014400
 800507c:	40014800 	.word	0x40014800
 8005080:	40000400 	.word	0x40000400
 8005084:	00010007 	.word	0x00010007

08005088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2202      	movs	r2, #2
 80050a4:	4013      	ands	r3, r2
 80050a6:	d021      	beq.n	80050ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2202      	movs	r2, #2
 80050ac:	4013      	ands	r3, r2
 80050ae:	d01d      	beq.n	80050ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2203      	movs	r2, #3
 80050b6:	4252      	negs	r2, r2
 80050b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	2203      	movs	r2, #3
 80050c8:	4013      	ands	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f000 fac0 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 80050d4:	e007      	b.n	80050e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 fab3 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	0018      	movs	r0, r3
 80050e2:	f000 fabf 	bl	8005664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2204      	movs	r2, #4
 80050f0:	4013      	ands	r3, r2
 80050f2:	d022      	beq.n	800513a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2204      	movs	r2, #4
 80050f8:	4013      	ands	r3, r2
 80050fa:	d01e      	beq.n	800513a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2205      	movs	r2, #5
 8005102:	4252      	negs	r2, r2
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	23c0      	movs	r3, #192	; 0xc0
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4013      	ands	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	0018      	movs	r0, r3
 800511e:	f000 fa99 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 8005122:	e007      	b.n	8005134 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	0018      	movs	r0, r3
 8005128:	f000 fa8c 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	0018      	movs	r0, r3
 8005130:	f000 fa98 	bl	8005664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2208      	movs	r2, #8
 800513e:	4013      	ands	r3, r2
 8005140:	d021      	beq.n	8005186 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2208      	movs	r2, #8
 8005146:	4013      	ands	r3, r2
 8005148:	d01d      	beq.n	8005186 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2209      	movs	r2, #9
 8005150:	4252      	negs	r2, r2
 8005152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2204      	movs	r2, #4
 8005158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	2203      	movs	r2, #3
 8005162:	4013      	ands	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0018      	movs	r0, r3
 800516a:	f000 fa73 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 800516e:	e007      	b.n	8005180 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	0018      	movs	r0, r3
 8005174:	f000 fa66 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	0018      	movs	r0, r3
 800517c:	f000 fa72 	bl	8005664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2210      	movs	r2, #16
 800518a:	4013      	ands	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2210      	movs	r2, #16
 8005192:	4013      	ands	r3, r2
 8005194:	d01e      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2211      	movs	r2, #17
 800519c:	4252      	negs	r2, r2
 800519e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2208      	movs	r2, #8
 80051a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	23c0      	movs	r3, #192	; 0xc0
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4013      	ands	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 fa4c 	bl	8005654 <HAL_TIM_IC_CaptureCallback>
 80051bc:	e007      	b.n	80051ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f000 fa3f 	bl	8005644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	0018      	movs	r0, r3
 80051ca:	f000 fa4b 	bl	8005664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2201      	movs	r2, #1
 80051d8:	4013      	ands	r3, r2
 80051da:	d00c      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	4013      	ands	r3, r2
 80051e2:	d008      	beq.n	80051f6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2202      	movs	r2, #2
 80051ea:	4252      	negs	r2, r2
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f7fc f9c1 	bl	8001578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2280      	movs	r2, #128	; 0x80
 80051fa:	4013      	ands	r3, r2
 80051fc:	d104      	bne.n	8005208 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	2380      	movs	r3, #128	; 0x80
 8005202:	019b      	lsls	r3, r3, #6
 8005204:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005206:	d00b      	beq.n	8005220 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2280      	movs	r2, #128	; 0x80
 800520c:	4013      	ands	r3, r2
 800520e:	d007      	beq.n	8005220 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <HAL_TIM_IRQHandler+0x208>)
 8005216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	0018      	movs	r0, r3
 800521c:	f000 feba 	bl	8005f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	2380      	movs	r3, #128	; 0x80
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4013      	ands	r3, r2
 8005228:	d00b      	beq.n	8005242 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2280      	movs	r2, #128	; 0x80
 800522e:	4013      	ands	r3, r2
 8005230:	d007      	beq.n	8005242 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a17      	ldr	r2, [pc, #92]	; (8005294 <HAL_TIM_IRQHandler+0x20c>)
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	0018      	movs	r0, r3
 800523e:	f000 feb1 	bl	8005fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2240      	movs	r2, #64	; 0x40
 8005246:	4013      	ands	r3, r2
 8005248:	d00c      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2240      	movs	r2, #64	; 0x40
 800524e:	4013      	ands	r3, r2
 8005250:	d008      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2241      	movs	r2, #65	; 0x41
 8005258:	4252      	negs	r2, r2
 800525a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	0018      	movs	r0, r3
 8005260:	f000 fa08 	bl	8005674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2220      	movs	r2, #32
 8005268:	4013      	ands	r3, r2
 800526a:	d00c      	beq.n	8005286 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	4013      	ands	r3, r2
 8005272:	d008      	beq.n	8005286 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2221      	movs	r2, #33	; 0x21
 800527a:	4252      	negs	r2, r2
 800527c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	0018      	movs	r0, r3
 8005282:	f000 fe7f 	bl	8005f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	46bd      	mov	sp, r7
 800528a:	b004      	add	sp, #16
 800528c:	bd80      	pop	{r7, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	ffffdf7f 	.word	0xffffdf7f
 8005294:	fffffeff 	.word	0xfffffeff

08005298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a4:	2317      	movs	r3, #23
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	223c      	movs	r2, #60	; 0x3c
 80052b0:	5c9b      	ldrb	r3, [r3, r2]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e0e5      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	223c      	movs	r2, #60	; 0x3c
 80052be:	2101      	movs	r1, #1
 80052c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b14      	cmp	r3, #20
 80052c6:	d900      	bls.n	80052ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80052c8:	e0d1      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	009a      	lsls	r2, r3, #2
 80052ce:	4b70      	ldr	r3, [pc, #448]	; (8005490 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80052d0:	18d3      	adds	r3, r2, r3
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	0011      	movs	r1, r2
 80052de:	0018      	movs	r0, r3
 80052e0:	f000 fa5e 	bl	80057a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2108      	movs	r1, #8
 80052f0:	430a      	orrs	r2, r1
 80052f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2104      	movs	r1, #4
 8005300:	438a      	bics	r2, r1
 8005302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6999      	ldr	r1, [r3, #24]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	619a      	str	r2, [r3, #24]
      break;
 8005316:	e0af      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	0011      	movs	r1, r2
 8005320:	0018      	movs	r0, r3
 8005322:	f000 fac7 	bl	80058b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2180      	movs	r1, #128	; 0x80
 8005332:	0109      	lsls	r1, r1, #4
 8005334:	430a      	orrs	r2, r1
 8005336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4954      	ldr	r1, [pc, #336]	; (8005494 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005344:	400a      	ands	r2, r1
 8005346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6999      	ldr	r1, [r3, #24]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	021a      	lsls	r2, r3, #8
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	619a      	str	r2, [r3, #24]
      break;
 800535c:	e08c      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	0011      	movs	r1, r2
 8005366:	0018      	movs	r0, r3
 8005368:	f000 fb28 	bl	80059bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2108      	movs	r1, #8
 8005378:	430a      	orrs	r2, r1
 800537a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69da      	ldr	r2, [r3, #28]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2104      	movs	r1, #4
 8005388:	438a      	bics	r2, r1
 800538a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69d9      	ldr	r1, [r3, #28]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	61da      	str	r2, [r3, #28]
      break;
 800539e:	e06b      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	0011      	movs	r1, r2
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 fb8f 	bl	8005acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2180      	movs	r1, #128	; 0x80
 80053ba:	0109      	lsls	r1, r1, #4
 80053bc:	430a      	orrs	r2, r1
 80053be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69da      	ldr	r2, [r3, #28]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4932      	ldr	r1, [pc, #200]	; (8005494 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053cc:	400a      	ands	r2, r1
 80053ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69d9      	ldr	r1, [r3, #28]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	61da      	str	r2, [r3, #28]
      break;
 80053e4:	e048      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	0011      	movs	r1, r2
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 fbd6 	bl	8005ba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2108      	movs	r1, #8
 8005400:	430a      	orrs	r2, r1
 8005402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2104      	movs	r1, #4
 8005410:	438a      	bics	r2, r1
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005426:	e027      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	0011      	movs	r1, r2
 8005430:	0018      	movs	r0, r3
 8005432:	f000 fc15 	bl	8005c60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2180      	movs	r1, #128	; 0x80
 8005442:	0109      	lsls	r1, r1, #4
 8005444:	430a      	orrs	r2, r1
 8005446:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4910      	ldr	r1, [pc, #64]	; (8005494 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005454:	400a      	ands	r2, r1
 8005456:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	021a      	lsls	r2, r3, #8
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800546c:	e004      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800546e:	2317      	movs	r3, #23
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
      break;
 8005476:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	223c      	movs	r2, #60	; 0x3c
 800547c:	2100      	movs	r1, #0
 800547e:	5499      	strb	r1, [r3, r2]

  return status;
 8005480:	2317      	movs	r3, #23
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	781b      	ldrb	r3, [r3, #0]
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	b006      	add	sp, #24
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	080093f4 	.word	0x080093f4
 8005494:	fffffbff 	.word	0xfffffbff

08005498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a2:	230f      	movs	r3, #15
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	223c      	movs	r2, #60	; 0x3c
 80054ae:	5c9b      	ldrb	r3, [r3, r2]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_ConfigClockSource+0x20>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0bc      	b.n	8005632 <HAL_TIM_ConfigClockSource+0x19a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	223c      	movs	r2, #60	; 0x3c
 80054bc:	2101      	movs	r1, #1
 80054be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	223d      	movs	r2, #61	; 0x3d
 80054c4:	2102      	movs	r1, #2
 80054c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4a5a      	ldr	r2, [pc, #360]	; (800563c <HAL_TIM_ConfigClockSource+0x1a4>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4a59      	ldr	r2, [pc, #356]	; (8005640 <HAL_TIM_ConfigClockSource+0x1a8>)
 80054dc:	4013      	ands	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2280      	movs	r2, #128	; 0x80
 80054ee:	0192      	lsls	r2, r2, #6
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d040      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0xde>
 80054f4:	2280      	movs	r2, #128	; 0x80
 80054f6:	0192      	lsls	r2, r2, #6
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d900      	bls.n	80054fe <HAL_TIM_ConfigClockSource+0x66>
 80054fc:	e088      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x178>
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	0152      	lsls	r2, r2, #5
 8005502:	4293      	cmp	r3, r2
 8005504:	d100      	bne.n	8005508 <HAL_TIM_ConfigClockSource+0x70>
 8005506:	e088      	b.n	800561a <HAL_TIM_ConfigClockSource+0x182>
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	0152      	lsls	r2, r2, #5
 800550c:	4293      	cmp	r3, r2
 800550e:	d900      	bls.n	8005512 <HAL_TIM_ConfigClockSource+0x7a>
 8005510:	e07e      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x178>
 8005512:	2b70      	cmp	r3, #112	; 0x70
 8005514:	d018      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0xb0>
 8005516:	d900      	bls.n	800551a <HAL_TIM_ConfigClockSource+0x82>
 8005518:	e07a      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x178>
 800551a:	2b60      	cmp	r3, #96	; 0x60
 800551c:	d04f      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x126>
 800551e:	d900      	bls.n	8005522 <HAL_TIM_ConfigClockSource+0x8a>
 8005520:	e076      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x178>
 8005522:	2b50      	cmp	r3, #80	; 0x50
 8005524:	d03b      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x106>
 8005526:	d900      	bls.n	800552a <HAL_TIM_ConfigClockSource+0x92>
 8005528:	e072      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x178>
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d057      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x146>
 800552e:	d900      	bls.n	8005532 <HAL_TIM_ConfigClockSource+0x9a>
 8005530:	e06e      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x178>
 8005532:	2b30      	cmp	r3, #48	; 0x30
 8005534:	d063      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x166>
 8005536:	d86b      	bhi.n	8005610 <HAL_TIM_ConfigClockSource+0x178>
 8005538:	2b20      	cmp	r3, #32
 800553a:	d060      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x166>
 800553c:	d868      	bhi.n	8005610 <HAL_TIM_ConfigClockSource+0x178>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d05d      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x166>
 8005542:	2b10      	cmp	r3, #16
 8005544:	d05b      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x166>
 8005546:	e063      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005558:	f000 fc62 	bl	8005e20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2277      	movs	r2, #119	; 0x77
 8005568:	4313      	orrs	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	609a      	str	r2, [r3, #8]
      break;
 8005574:	e052      	b.n	800561c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005586:	f000 fc4b 	bl	8005e20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2180      	movs	r1, #128	; 0x80
 8005596:	01c9      	lsls	r1, r1, #7
 8005598:	430a      	orrs	r2, r1
 800559a:	609a      	str	r2, [r3, #8]
      break;
 800559c:	e03e      	b.n	800561c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055aa:	001a      	movs	r2, r3
 80055ac:	f000 fbbc 	bl	8005d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2150      	movs	r1, #80	; 0x50
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 fc16 	bl	8005de8 <TIM_ITRx_SetConfig>
      break;
 80055bc:	e02e      	b.n	800561c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ca:	001a      	movs	r2, r3
 80055cc:	f000 fbda 	bl	8005d84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2160      	movs	r1, #96	; 0x60
 80055d6:	0018      	movs	r0, r3
 80055d8:	f000 fc06 	bl	8005de8 <TIM_ITRx_SetConfig>
      break;
 80055dc:	e01e      	b.n	800561c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ea:	001a      	movs	r2, r3
 80055ec:	f000 fb9c 	bl	8005d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2140      	movs	r1, #64	; 0x40
 80055f6:	0018      	movs	r0, r3
 80055f8:	f000 fbf6 	bl	8005de8 <TIM_ITRx_SetConfig>
      break;
 80055fc:	e00e      	b.n	800561c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	0019      	movs	r1, r3
 8005608:	0010      	movs	r0, r2
 800560a:	f000 fbed 	bl	8005de8 <TIM_ITRx_SetConfig>
      break;
 800560e:	e005      	b.n	800561c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005610:	230f      	movs	r3, #15
 8005612:	18fb      	adds	r3, r7, r3
 8005614:	2201      	movs	r2, #1
 8005616:	701a      	strb	r2, [r3, #0]
      break;
 8005618:	e000      	b.n	800561c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800561a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	223d      	movs	r2, #61	; 0x3d
 8005620:	2101      	movs	r1, #1
 8005622:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	223c      	movs	r2, #60	; 0x3c
 8005628:	2100      	movs	r1, #0
 800562a:	5499      	strb	r1, [r3, r2]

  return status;
 800562c:	230f      	movs	r3, #15
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	781b      	ldrb	r3, [r3, #0]
}
 8005632:	0018      	movs	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	b004      	add	sp, #16
 8005638:	bd80      	pop	{r7, pc}
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	ffceff88 	.word	0xffceff88
 8005640:	ffff00ff 	.word	0xffff00ff

08005644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800564c:	46c0      	nop			; (mov r8, r8)
 800564e:	46bd      	mov	sp, r7
 8005650:	b002      	add	sp, #8
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800565c:	46c0      	nop			; (mov r8, r8)
 800565e:	46bd      	mov	sp, r7
 8005660:	b002      	add	sp, #8
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567c:	46c0      	nop			; (mov r8, r8)
 800567e:	46bd      	mov	sp, r7
 8005680:	b002      	add	sp, #8
 8005682:	bd80      	pop	{r7, pc}

08005684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3b      	ldr	r2, [pc, #236]	; (8005784 <TIM_Base_SetConfig+0x100>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d008      	beq.n	80056ae <TIM_Base_SetConfig+0x2a>
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	2380      	movs	r3, #128	; 0x80
 80056a0:	05db      	lsls	r3, r3, #23
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0x2a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a37      	ldr	r2, [pc, #220]	; (8005788 <TIM_Base_SetConfig+0x104>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2270      	movs	r2, #112	; 0x70
 80056b2:	4393      	bics	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a30      	ldr	r2, [pc, #192]	; (8005784 <TIM_Base_SetConfig+0x100>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d018      	beq.n	80056fa <TIM_Base_SetConfig+0x76>
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	2380      	movs	r3, #128	; 0x80
 80056cc:	05db      	lsls	r3, r3, #23
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d013      	beq.n	80056fa <TIM_Base_SetConfig+0x76>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2c      	ldr	r2, [pc, #176]	; (8005788 <TIM_Base_SetConfig+0x104>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00f      	beq.n	80056fa <TIM_Base_SetConfig+0x76>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2b      	ldr	r2, [pc, #172]	; (800578c <TIM_Base_SetConfig+0x108>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00b      	beq.n	80056fa <TIM_Base_SetConfig+0x76>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <TIM_Base_SetConfig+0x10c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <TIM_Base_SetConfig+0x76>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a29      	ldr	r2, [pc, #164]	; (8005794 <TIM_Base_SetConfig+0x110>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d003      	beq.n	80056fa <TIM_Base_SetConfig+0x76>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a28      	ldr	r2, [pc, #160]	; (8005798 <TIM_Base_SetConfig+0x114>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d108      	bne.n	800570c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a27      	ldr	r2, [pc, #156]	; (800579c <TIM_Base_SetConfig+0x118>)
 80056fe:	4013      	ands	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2280      	movs	r2, #128	; 0x80
 8005710:	4393      	bics	r3, r2
 8005712:	001a      	movs	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a13      	ldr	r2, [pc, #76]	; (8005784 <TIM_Base_SetConfig+0x100>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00b      	beq.n	8005752 <TIM_Base_SetConfig+0xce>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <TIM_Base_SetConfig+0x10c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_Base_SetConfig+0xce>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a13      	ldr	r2, [pc, #76]	; (8005794 <TIM_Base_SetConfig+0x110>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_Base_SetConfig+0xce>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a12      	ldr	r2, [pc, #72]	; (8005798 <TIM_Base_SetConfig+0x114>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d103      	bne.n	800575a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2201      	movs	r2, #1
 8005766:	4013      	ands	r3, r2
 8005768:	2b01      	cmp	r3, #1
 800576a:	d106      	bne.n	800577a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2201      	movs	r2, #1
 8005772:	4393      	bics	r3, r2
 8005774:	001a      	movs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	611a      	str	r2, [r3, #16]
  }
}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	46bd      	mov	sp, r7
 800577e:	b004      	add	sp, #16
 8005780:	bd80      	pop	{r7, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	40012c00 	.word	0x40012c00
 8005788:	40000400 	.word	0x40000400
 800578c:	40002000 	.word	0x40002000
 8005790:	40014000 	.word	0x40014000
 8005794:	40014400 	.word	0x40014400
 8005798:	40014800 	.word	0x40014800
 800579c:	fffffcff 	.word	0xfffffcff

080057a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	2201      	movs	r2, #1
 80057b6:	4393      	bics	r3, r2
 80057b8:	001a      	movs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4a32      	ldr	r2, [pc, #200]	; (8005898 <TIM_OC1_SetConfig+0xf8>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2203      	movs	r2, #3
 80057d6:	4393      	bics	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2202      	movs	r2, #2
 80057e8:	4393      	bics	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a28      	ldr	r2, [pc, #160]	; (800589c <TIM_OC1_SetConfig+0xfc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00b      	beq.n	8005816 <TIM_OC1_SetConfig+0x76>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a27      	ldr	r2, [pc, #156]	; (80058a0 <TIM_OC1_SetConfig+0x100>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <TIM_OC1_SetConfig+0x76>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a26      	ldr	r2, [pc, #152]	; (80058a4 <TIM_OC1_SetConfig+0x104>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <TIM_OC1_SetConfig+0x76>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a25      	ldr	r2, [pc, #148]	; (80058a8 <TIM_OC1_SetConfig+0x108>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10c      	bne.n	8005830 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2208      	movs	r2, #8
 800581a:	4393      	bics	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2204      	movs	r2, #4
 800582c:	4393      	bics	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a1a      	ldr	r2, [pc, #104]	; (800589c <TIM_OC1_SetConfig+0xfc>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_OC1_SetConfig+0xb0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <TIM_OC1_SetConfig+0x100>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_OC1_SetConfig+0xb0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <TIM_OC1_SetConfig+0x104>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC1_SetConfig+0xb0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <TIM_OC1_SetConfig+0x108>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d111      	bne.n	8005874 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4a16      	ldr	r2, [pc, #88]	; (80058ac <TIM_OC1_SetConfig+0x10c>)
 8005854:	4013      	ands	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <TIM_OC1_SetConfig+0x110>)
 800585c:	4013      	ands	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	46bd      	mov	sp, r7
 8005892:	b006      	add	sp, #24
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	fffeff8f 	.word	0xfffeff8f
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800
 80058ac:	fffffeff 	.word	0xfffffeff
 80058b0:	fffffdff 	.word	0xfffffdff

080058b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	2210      	movs	r2, #16
 80058ca:	4393      	bics	r3, r2
 80058cc:	001a      	movs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a2e      	ldr	r2, [pc, #184]	; (800599c <TIM_OC2_SetConfig+0xe8>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4a2d      	ldr	r2, [pc, #180]	; (80059a0 <TIM_OC2_SetConfig+0xec>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2220      	movs	r2, #32
 80058fe:	4393      	bics	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a24      	ldr	r2, [pc, #144]	; (80059a4 <TIM_OC2_SetConfig+0xf0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d10d      	bne.n	8005932 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	4393      	bics	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2240      	movs	r2, #64	; 0x40
 800592e:	4393      	bics	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <TIM_OC2_SetConfig+0xf0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00b      	beq.n	8005952 <TIM_OC2_SetConfig+0x9e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1a      	ldr	r2, [pc, #104]	; (80059a8 <TIM_OC2_SetConfig+0xf4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_OC2_SetConfig+0x9e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <TIM_OC2_SetConfig+0xf8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC2_SetConfig+0x9e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <TIM_OC2_SetConfig+0xfc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d113      	bne.n	800597a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <TIM_OC2_SetConfig+0x100>)
 8005956:	4013      	ands	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4a16      	ldr	r2, [pc, #88]	; (80059b8 <TIM_OC2_SetConfig+0x104>)
 800595e:	4013      	ands	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	621a      	str	r2, [r3, #32]
}
 8005994:	46c0      	nop			; (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	b006      	add	sp, #24
 800599a:	bd80      	pop	{r7, pc}
 800599c:	feff8fff 	.word	0xfeff8fff
 80059a0:	fffffcff 	.word	0xfffffcff
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800
 80059b4:	fffffbff 	.word	0xfffffbff
 80059b8:	fffff7ff 	.word	0xfffff7ff

080059bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	4a33      	ldr	r2, [pc, #204]	; (8005aa0 <TIM_OC3_SetConfig+0xe4>)
 80059d2:	401a      	ands	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a2f      	ldr	r2, [pc, #188]	; (8005aa4 <TIM_OC3_SetConfig+0xe8>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2203      	movs	r2, #3
 80059f0:	4393      	bics	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4a29      	ldr	r2, [pc, #164]	; (8005aa8 <TIM_OC3_SetConfig+0xec>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a25      	ldr	r2, [pc, #148]	; (8005aac <TIM_OC3_SetConfig+0xf0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d10d      	bne.n	8005a36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4a24      	ldr	r2, [pc, #144]	; (8005ab0 <TIM_OC3_SetConfig+0xf4>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	4a20      	ldr	r2, [pc, #128]	; (8005ab4 <TIM_OC3_SetConfig+0xf8>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <TIM_OC3_SetConfig+0xf0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_OC3_SetConfig+0x9a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1d      	ldr	r2, [pc, #116]	; (8005ab8 <TIM_OC3_SetConfig+0xfc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_OC3_SetConfig+0x9a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1c      	ldr	r2, [pc, #112]	; (8005abc <TIM_OC3_SetConfig+0x100>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_OC3_SetConfig+0x9a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1b      	ldr	r2, [pc, #108]	; (8005ac0 <TIM_OC3_SetConfig+0x104>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d113      	bne.n	8005a7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4a1a      	ldr	r2, [pc, #104]	; (8005ac4 <TIM_OC3_SetConfig+0x108>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <TIM_OC3_SetConfig+0x10c>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	011b      	lsls	r3, r3, #4
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	621a      	str	r2, [r3, #32]
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b006      	add	sp, #24
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	fffffeff 	.word	0xfffffeff
 8005aa4:	fffeff8f 	.word	0xfffeff8f
 8005aa8:	fffffdff 	.word	0xfffffdff
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	fffff7ff 	.word	0xfffff7ff
 8005ab4:	fffffbff 	.word	0xfffffbff
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40014400 	.word	0x40014400
 8005ac0:	40014800 	.word	0x40014800
 8005ac4:	ffffefff 	.word	0xffffefff
 8005ac8:	ffffdfff 	.word	0xffffdfff

08005acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	4a26      	ldr	r2, [pc, #152]	; (8005b7c <TIM_OC4_SetConfig+0xb0>)
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a22      	ldr	r2, [pc, #136]	; (8005b80 <TIM_OC4_SetConfig+0xb4>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <TIM_OC4_SetConfig+0xb8>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <TIM_OC4_SetConfig+0xbc>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <TIM_OC4_SetConfig+0xc0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d00b      	beq.n	8005b44 <TIM_OC4_SetConfig+0x78>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <TIM_OC4_SetConfig+0xc4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d007      	beq.n	8005b44 <TIM_OC4_SetConfig+0x78>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <TIM_OC4_SetConfig+0xc8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_OC4_SetConfig+0x78>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <TIM_OC4_SetConfig+0xcc>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d109      	bne.n	8005b58 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <TIM_OC4_SetConfig+0xd0>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	019b      	lsls	r3, r3, #6
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b006      	add	sp, #24
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	ffffefff 	.word	0xffffefff
 8005b80:	feff8fff 	.word	0xfeff8fff
 8005b84:	fffffcff 	.word	0xfffffcff
 8005b88:	ffffdfff 	.word	0xffffdfff
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800
 8005b9c:	ffffbfff 	.word	0xffffbfff

08005ba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	4a23      	ldr	r2, [pc, #140]	; (8005c44 <TIM_OC5_SetConfig+0xa4>)
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <TIM_OC5_SetConfig+0xa8>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4a1b      	ldr	r2, [pc, #108]	; (8005c4c <TIM_OC5_SetConfig+0xac>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <TIM_OC5_SetConfig+0xb0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <TIM_OC5_SetConfig+0x6e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a16      	ldr	r2, [pc, #88]	; (8005c54 <TIM_OC5_SetConfig+0xb4>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_OC5_SetConfig+0x6e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <TIM_OC5_SetConfig+0xb8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_OC5_SetConfig+0x6e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a14      	ldr	r2, [pc, #80]	; (8005c5c <TIM_OC5_SetConfig+0xbc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d109      	bne.n	8005c22 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <TIM_OC5_SetConfig+0xa4>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	621a      	str	r2, [r3, #32]
}
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b006      	add	sp, #24
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	fffeffff 	.word	0xfffeffff
 8005c48:	fffeff8f 	.word	0xfffeff8f
 8005c4c:	fffdffff 	.word	0xfffdffff
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800

08005c60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	4a24      	ldr	r2, [pc, #144]	; (8005d08 <TIM_OC6_SetConfig+0xa8>)
 8005c76:	401a      	ands	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <TIM_OC6_SetConfig+0xac>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <TIM_OC6_SetConfig+0xb0>)
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	051b      	lsls	r3, r3, #20
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a18      	ldr	r2, [pc, #96]	; (8005d14 <TIM_OC6_SetConfig+0xb4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00b      	beq.n	8005cd0 <TIM_OC6_SetConfig+0x70>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <TIM_OC6_SetConfig+0xb8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_OC6_SetConfig+0x70>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a16      	ldr	r2, [pc, #88]	; (8005d1c <TIM_OC6_SetConfig+0xbc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_OC6_SetConfig+0x70>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <TIM_OC6_SetConfig+0xc0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d109      	bne.n	8005ce4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4a14      	ldr	r2, [pc, #80]	; (8005d24 <TIM_OC6_SetConfig+0xc4>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	029b      	lsls	r3, r3, #10
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	621a      	str	r2, [r3, #32]
}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	46bd      	mov	sp, r7
 8005d02:	b006      	add	sp, #24
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	ffefffff 	.word	0xffefffff
 8005d0c:	feff8fff 	.word	0xfeff8fff
 8005d10:	ffdfffff 	.word	0xffdfffff
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800
 8005d24:	fffbffff 	.word	0xfffbffff

08005d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4393      	bics	r3, r2
 8005d42:	001a      	movs	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	22f0      	movs	r2, #240	; 0xf0
 8005d52:	4393      	bics	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	220a      	movs	r2, #10
 8005d64:	4393      	bics	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	621a      	str	r2, [r3, #32]
}
 8005d7c:	46c0      	nop			; (mov r8, r8)
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b006      	add	sp, #24
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	2210      	movs	r2, #16
 8005d9c:	4393      	bics	r3, r2
 8005d9e:	001a      	movs	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	4a0d      	ldr	r2, [pc, #52]	; (8005de4 <TIM_TI2_ConfigInputStage+0x60>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	031b      	lsls	r3, r3, #12
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	22a0      	movs	r2, #160	; 0xa0
 8005dc0:	4393      	bics	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	621a      	str	r2, [r3, #32]
}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b006      	add	sp, #24
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	ffff0fff 	.word	0xffff0fff

08005de8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <TIM_ITRx_SetConfig+0x34>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	2207      	movs	r2, #7
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	609a      	str	r2, [r3, #8]
}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b004      	add	sp, #16
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	ffcfff8f 	.word	0xffcfff8f

08005e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	4a09      	ldr	r2, [pc, #36]	; (8005e5c <TIM_ETR_SetConfig+0x3c>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	021a      	lsls	r2, r3, #8
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	609a      	str	r2, [r3, #8]
}
 8005e54:	46c0      	nop			; (mov r8, r8)
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b006      	add	sp, #24
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	ffff00ff 	.word	0xffff00ff

08005e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	221f      	movs	r2, #31
 8005e70:	4013      	ands	r3, r2
 8005e72:	2201      	movs	r2, #1
 8005e74:	409a      	lsls	r2, r3
 8005e76:	0013      	movs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	43d2      	mvns	r2, r2
 8005e82:	401a      	ands	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1a      	ldr	r2, [r3, #32]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	211f      	movs	r1, #31
 8005e90:	400b      	ands	r3, r1
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4099      	lsls	r1, r3
 8005e96:	000b      	movs	r3, r1
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	46c0      	nop			; (mov r8, r8)
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b006      	add	sp, #24
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	223c      	movs	r2, #60	; 0x3c
 8005eb6:	5c9b      	ldrb	r3, [r3, r2]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e055      	b.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	223c      	movs	r2, #60	; 0x3c
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	223d      	movs	r2, #61	; 0x3d
 8005ecc:	2102      	movs	r1, #2
 8005ece:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d108      	bne.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4a22      	ldr	r2, [pc, #136]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2270      	movs	r2, #112	; 0x70
 8005f00:	4393      	bics	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00f      	beq.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	05db      	lsls	r3, r3, #23
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d009      	beq.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a12      	ldr	r2, [pc, #72]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a11      	ldr	r2, [pc, #68]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10c      	bne.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	4393      	bics	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	223d      	movs	r2, #61	; 0x3d
 8005f5e:	2101      	movs	r1, #1
 8005f60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	223c      	movs	r2, #60	; 0x3c
 8005f66:	2100      	movs	r1, #0
 8005f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	b004      	add	sp, #16
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	ff0fffff 	.word	0xff0fffff
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40014000 	.word	0x40014000

08005f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b002      	add	sp, #8
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e046      	b.n	8006054 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2288      	movs	r2, #136	; 0x88
 8005fca:	589b      	ldr	r3, [r3, r2]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2284      	movs	r2, #132	; 0x84
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f7fb fda4 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2288      	movs	r2, #136	; 0x88
 8005fe4:	2124      	movs	r1, #36	; 0x24
 8005fe6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	438a      	bics	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	0018      	movs	r0, r3
 8006004:	f000 ff6e 	bl	8006ee4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 fcac 	bl	8006968 <UART_SetConfig>
 8006010:	0003      	movs	r3, r0
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e01c      	b.n	8006054 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	490d      	ldr	r1, [pc, #52]	; (800605c <HAL_UART_Init+0xa8>)
 8006026:	400a      	ands	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	212a      	movs	r1, #42	; 0x2a
 8006036:	438a      	bics	r2, r1
 8006038:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2101      	movs	r1, #1
 8006046:	430a      	orrs	r2, r1
 8006048:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	0018      	movs	r0, r3
 800604e:	f000 fffd 	bl	800704c <UART_CheckIdleState>
 8006052:	0003      	movs	r3, r0
}
 8006054:	0018      	movs	r0, r3
 8006056:	46bd      	mov	sp, r7
 8006058:	b002      	add	sp, #8
 800605a:	bd80      	pop	{r7, pc}
 800605c:	ffffb7ff 	.word	0xffffb7ff

08006060 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e032      	b.n	80060d8 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2288      	movs	r2, #136	; 0x88
 8006076:	2124      	movs	r1, #36	; 0x24
 8006078:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2101      	movs	r1, #1
 8006086:	438a      	bics	r2, r1
 8006088:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2200      	movs	r2, #0
 8006098:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2200      	movs	r2, #0
 80060a0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	0018      	movs	r0, r3
 80060a6:	f7fb fda7 	bl	8001bf8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2290      	movs	r2, #144	; 0x90
 80060ae:	2100      	movs	r1, #0
 80060b0:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2288      	movs	r2, #136	; 0x88
 80060b6:	2100      	movs	r1, #0
 80060b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	228c      	movs	r2, #140	; 0x8c
 80060be:	2100      	movs	r1, #0
 80060c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2284      	movs	r2, #132	; 0x84
 80060d2:	2100      	movs	r1, #0
 80060d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	0018      	movs	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	b002      	add	sp, #8
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	; 0x28
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	1dbb      	adds	r3, r7, #6
 80060ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2288      	movs	r2, #136	; 0x88
 80060f4:	589b      	ldr	r3, [r3, r2]
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d000      	beq.n	80060fc <HAL_UART_Transmit+0x1c>
 80060fa:	e090      	b.n	800621e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_UART_Transmit+0x2a>
 8006102:	1dbb      	adds	r3, r7, #6
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e088      	b.n	8006220 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	015b      	lsls	r3, r3, #5
 8006116:	429a      	cmp	r2, r3
 8006118:	d109      	bne.n	800612e <HAL_UART_Transmit+0x4e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2201      	movs	r2, #1
 8006126:	4013      	ands	r3, r2
 8006128:	d001      	beq.n	800612e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e078      	b.n	8006220 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2290      	movs	r2, #144	; 0x90
 8006132:	2100      	movs	r1, #0
 8006134:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2288      	movs	r2, #136	; 0x88
 800613a:	2121      	movs	r1, #33	; 0x21
 800613c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800613e:	f7fb febf 	bl	8001ec0 <HAL_GetTick>
 8006142:	0003      	movs	r3, r0
 8006144:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1dba      	adds	r2, r7, #6
 800614a:	2154      	movs	r1, #84	; 0x54
 800614c:	8812      	ldrh	r2, [r2, #0]
 800614e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	1dba      	adds	r2, r7, #6
 8006154:	2156      	movs	r1, #86	; 0x56
 8006156:	8812      	ldrh	r2, [r2, #0]
 8006158:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	2380      	movs	r3, #128	; 0x80
 8006160:	015b      	lsls	r3, r3, #5
 8006162:	429a      	cmp	r2, r3
 8006164:	d108      	bne.n	8006178 <HAL_UART_Transmit+0x98>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e003      	b.n	8006180 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006180:	e030      	b.n	80061e4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	0013      	movs	r3, r2
 800618c:	2200      	movs	r2, #0
 800618e:	2180      	movs	r1, #128	; 0x80
 8006190:	f001 f806 	bl	80071a0 <UART_WaitOnFlagUntilTimeout>
 8006194:	1e03      	subs	r3, r0, #0
 8006196:	d005      	beq.n	80061a4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2288      	movs	r2, #136	; 0x88
 800619c:	2120      	movs	r1, #32
 800619e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e03d      	b.n	8006220 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10b      	bne.n	80061c2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	001a      	movs	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	05d2      	lsls	r2, r2, #23
 80061b6:	0dd2      	lsrs	r2, r2, #23
 80061b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	3302      	adds	r3, #2
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	e007      	b.n	80061d2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	3301      	adds	r3, #1
 80061d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2256      	movs	r2, #86	; 0x56
 80061d6:	5a9b      	ldrh	r3, [r3, r2]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b299      	uxth	r1, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2256      	movs	r2, #86	; 0x56
 80061e2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2256      	movs	r2, #86	; 0x56
 80061e8:	5a9b      	ldrh	r3, [r3, r2]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1c8      	bne.n	8006182 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	0013      	movs	r3, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	2140      	movs	r1, #64	; 0x40
 80061fe:	f000 ffcf 	bl	80071a0 <UART_WaitOnFlagUntilTimeout>
 8006202:	1e03      	subs	r3, r0, #0
 8006204:	d005      	beq.n	8006212 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2288      	movs	r2, #136	; 0x88
 800620a:	2120      	movs	r1, #32
 800620c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e006      	b.n	8006220 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2288      	movs	r2, #136	; 0x88
 8006216:	2120      	movs	r1, #32
 8006218:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e000      	b.n	8006220 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800621e:	2302      	movs	r3, #2
  }
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	b008      	add	sp, #32
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	1dbb      	adds	r3, r7, #6
 8006234:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	228c      	movs	r2, #140	; 0x8c
 800623a:	589b      	ldr	r3, [r3, r2]
 800623c:	2b20      	cmp	r3, #32
 800623e:	d14a      	bne.n	80062d6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_UART_Receive_IT+0x26>
 8006246:	1dbb      	adds	r3, r7, #6
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e042      	b.n	80062d8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	2380      	movs	r3, #128	; 0x80
 8006258:	015b      	lsls	r3, r3, #5
 800625a:	429a      	cmp	r2, r3
 800625c:	d109      	bne.n	8006272 <HAL_UART_Receive_IT+0x4a>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d105      	bne.n	8006272 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2201      	movs	r2, #1
 800626a:	4013      	ands	r3, r2
 800626c:	d001      	beq.n	8006272 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e032      	b.n	80062d8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <HAL_UART_Receive_IT+0xb8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d020      	beq.n	80062c4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	2380      	movs	r3, #128	; 0x80
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	4013      	ands	r3, r2
 800628e:	d019      	beq.n	80062c4 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006290:	f3ef 8310 	mrs	r3, PRIMASK
 8006294:	613b      	str	r3, [r7, #16]
  return(result);
 8006296:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	2301      	movs	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f383 8810 	msr	PRIMASK, r3
}
 80062a4:	46c0      	nop			; (mov r8, r8)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2180      	movs	r1, #128	; 0x80
 80062b2:	04c9      	lsls	r1, r1, #19
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f383 8810 	msr	PRIMASK, r3
}
 80062c2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062c4:	1dbb      	adds	r3, r7, #6
 80062c6:	881a      	ldrh	r2, [r3, #0]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 ffd7 	bl	8007280 <UART_Start_Receive_IT>
 80062d2:	0003      	movs	r3, r0
 80062d4:	e000      	b.n	80062d8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
  }
}
 80062d8:	0018      	movs	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	b008      	add	sp, #32
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40008000 	.word	0x40008000

080062e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062e4:	b5b0      	push	{r4, r5, r7, lr}
 80062e6:	b0aa      	sub	sp, #168	; 0xa8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	22a4      	movs	r2, #164	; 0xa4
 80062f4:	18b9      	adds	r1, r7, r2
 80062f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	20a0      	movs	r0, #160	; 0xa0
 8006300:	1839      	adds	r1, r7, r0
 8006302:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	249c      	movs	r4, #156	; 0x9c
 800630c:	1939      	adds	r1, r7, r4
 800630e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006310:	0011      	movs	r1, r2
 8006312:	18bb      	adds	r3, r7, r2
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4aa2      	ldr	r2, [pc, #648]	; (80065a0 <HAL_UART_IRQHandler+0x2bc>)
 8006318:	4013      	ands	r3, r2
 800631a:	2298      	movs	r2, #152	; 0x98
 800631c:	18bd      	adds	r5, r7, r2
 800631e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006320:	18bb      	adds	r3, r7, r2
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d11a      	bne.n	800635e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006328:	187b      	adds	r3, r7, r1
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2220      	movs	r2, #32
 800632e:	4013      	ands	r3, r2
 8006330:	d015      	beq.n	800635e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006332:	183b      	adds	r3, r7, r0
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2220      	movs	r2, #32
 8006338:	4013      	ands	r3, r2
 800633a:	d105      	bne.n	8006348 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800633c:	193b      	adds	r3, r7, r4
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	2380      	movs	r3, #128	; 0x80
 8006342:	055b      	lsls	r3, r3, #21
 8006344:	4013      	ands	r3, r2
 8006346:	d00a      	beq.n	800635e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634c:	2b00      	cmp	r3, #0
 800634e:	d100      	bne.n	8006352 <HAL_UART_IRQHandler+0x6e>
 8006350:	e2dc      	b.n	800690c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	0010      	movs	r0, r2
 800635a:	4798      	blx	r3
      }
      return;
 800635c:	e2d6      	b.n	800690c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800635e:	2398      	movs	r3, #152	; 0x98
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d100      	bne.n	800636a <HAL_UART_IRQHandler+0x86>
 8006368:	e122      	b.n	80065b0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800636a:	239c      	movs	r3, #156	; 0x9c
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a8c      	ldr	r2, [pc, #560]	; (80065a4 <HAL_UART_IRQHandler+0x2c0>)
 8006372:	4013      	ands	r3, r2
 8006374:	d106      	bne.n	8006384 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006376:	23a0      	movs	r3, #160	; 0xa0
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a8a      	ldr	r2, [pc, #552]	; (80065a8 <HAL_UART_IRQHandler+0x2c4>)
 800637e:	4013      	ands	r3, r2
 8006380:	d100      	bne.n	8006384 <HAL_UART_IRQHandler+0xa0>
 8006382:	e115      	b.n	80065b0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006384:	23a4      	movs	r3, #164	; 0xa4
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2201      	movs	r2, #1
 800638c:	4013      	ands	r3, r2
 800638e:	d012      	beq.n	80063b6 <HAL_UART_IRQHandler+0xd2>
 8006390:	23a0      	movs	r3, #160	; 0xa0
 8006392:	18fb      	adds	r3, r7, r3
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	2380      	movs	r3, #128	; 0x80
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	4013      	ands	r3, r2
 800639c:	d00b      	beq.n	80063b6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2201      	movs	r2, #1
 80063a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2290      	movs	r2, #144	; 0x90
 80063aa:	589b      	ldr	r3, [r3, r2]
 80063ac:	2201      	movs	r2, #1
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2190      	movs	r1, #144	; 0x90
 80063b4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063b6:	23a4      	movs	r3, #164	; 0xa4
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2202      	movs	r2, #2
 80063be:	4013      	ands	r3, r2
 80063c0:	d011      	beq.n	80063e6 <HAL_UART_IRQHandler+0x102>
 80063c2:	239c      	movs	r3, #156	; 0x9c
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2201      	movs	r2, #1
 80063ca:	4013      	ands	r3, r2
 80063cc:	d00b      	beq.n	80063e6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2202      	movs	r2, #2
 80063d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2290      	movs	r2, #144	; 0x90
 80063da:	589b      	ldr	r3, [r3, r2]
 80063dc:	2204      	movs	r2, #4
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2190      	movs	r1, #144	; 0x90
 80063e4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063e6:	23a4      	movs	r3, #164	; 0xa4
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2204      	movs	r2, #4
 80063ee:	4013      	ands	r3, r2
 80063f0:	d011      	beq.n	8006416 <HAL_UART_IRQHandler+0x132>
 80063f2:	239c      	movs	r3, #156	; 0x9c
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2201      	movs	r2, #1
 80063fa:	4013      	ands	r3, r2
 80063fc:	d00b      	beq.n	8006416 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2204      	movs	r2, #4
 8006404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2290      	movs	r2, #144	; 0x90
 800640a:	589b      	ldr	r3, [r3, r2]
 800640c:	2202      	movs	r2, #2
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2190      	movs	r1, #144	; 0x90
 8006414:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006416:	23a4      	movs	r3, #164	; 0xa4
 8006418:	18fb      	adds	r3, r7, r3
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2208      	movs	r2, #8
 800641e:	4013      	ands	r3, r2
 8006420:	d017      	beq.n	8006452 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006422:	23a0      	movs	r3, #160	; 0xa0
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2220      	movs	r2, #32
 800642a:	4013      	ands	r3, r2
 800642c:	d105      	bne.n	800643a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800642e:	239c      	movs	r3, #156	; 0x9c
 8006430:	18fb      	adds	r3, r7, r3
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a5b      	ldr	r2, [pc, #364]	; (80065a4 <HAL_UART_IRQHandler+0x2c0>)
 8006436:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006438:	d00b      	beq.n	8006452 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2208      	movs	r2, #8
 8006440:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2290      	movs	r2, #144	; 0x90
 8006446:	589b      	ldr	r3, [r3, r2]
 8006448:	2208      	movs	r2, #8
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2190      	movs	r1, #144	; 0x90
 8006450:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006452:	23a4      	movs	r3, #164	; 0xa4
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	2380      	movs	r3, #128	; 0x80
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	4013      	ands	r3, r2
 800645e:	d013      	beq.n	8006488 <HAL_UART_IRQHandler+0x1a4>
 8006460:	23a0      	movs	r3, #160	; 0xa0
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	04db      	lsls	r3, r3, #19
 800646a:	4013      	ands	r3, r2
 800646c:	d00c      	beq.n	8006488 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2280      	movs	r2, #128	; 0x80
 8006474:	0112      	lsls	r2, r2, #4
 8006476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2290      	movs	r2, #144	; 0x90
 800647c:	589b      	ldr	r3, [r3, r2]
 800647e:	2220      	movs	r2, #32
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2190      	movs	r1, #144	; 0x90
 8006486:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2290      	movs	r2, #144	; 0x90
 800648c:	589b      	ldr	r3, [r3, r2]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d100      	bne.n	8006494 <HAL_UART_IRQHandler+0x1b0>
 8006492:	e23d      	b.n	8006910 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006494:	23a4      	movs	r3, #164	; 0xa4
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2220      	movs	r2, #32
 800649c:	4013      	ands	r3, r2
 800649e:	d015      	beq.n	80064cc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064a0:	23a0      	movs	r3, #160	; 0xa0
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2220      	movs	r2, #32
 80064a8:	4013      	ands	r3, r2
 80064aa:	d106      	bne.n	80064ba <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064ac:	239c      	movs	r3, #156	; 0x9c
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	2380      	movs	r3, #128	; 0x80
 80064b4:	055b      	lsls	r3, r3, #21
 80064b6:	4013      	ands	r3, r2
 80064b8:	d008      	beq.n	80064cc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	0010      	movs	r0, r2
 80064ca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2290      	movs	r2, #144	; 0x90
 80064d0:	589b      	ldr	r3, [r3, r2]
 80064d2:	2194      	movs	r1, #148	; 0x94
 80064d4:	187a      	adds	r2, r7, r1
 80064d6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2240      	movs	r2, #64	; 0x40
 80064e0:	4013      	ands	r3, r2
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d004      	beq.n	80064f0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064e6:	187b      	adds	r3, r7, r1
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2228      	movs	r2, #40	; 0x28
 80064ec:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064ee:	d04c      	beq.n	800658a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	0018      	movs	r0, r3
 80064f4:	f000 ffe8 	bl	80074c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2240      	movs	r2, #64	; 0x40
 8006500:	4013      	ands	r3, r2
 8006502:	2b40      	cmp	r3, #64	; 0x40
 8006504:	d13c      	bne.n	8006580 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006506:	f3ef 8310 	mrs	r3, PRIMASK
 800650a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800650c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800650e:	2090      	movs	r0, #144	; 0x90
 8006510:	183a      	adds	r2, r7, r0
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	2301      	movs	r3, #1
 8006516:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651a:	f383 8810 	msr	PRIMASK, r3
}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2140      	movs	r1, #64	; 0x40
 800652c:	438a      	bics	r2, r1
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	183b      	adds	r3, r7, r0
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006538:	f383 8810 	msr	PRIMASK, r3
}
 800653c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2280      	movs	r2, #128	; 0x80
 8006542:	589b      	ldr	r3, [r3, r2]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d016      	beq.n	8006576 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2280      	movs	r2, #128	; 0x80
 800654c:	589b      	ldr	r3, [r3, r2]
 800654e:	4a17      	ldr	r2, [pc, #92]	; (80065ac <HAL_UART_IRQHandler+0x2c8>)
 8006550:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2280      	movs	r2, #128	; 0x80
 8006556:	589b      	ldr	r3, [r3, r2]
 8006558:	0018      	movs	r0, r3
 800655a:	f7fc fcbb 	bl	8002ed4 <HAL_DMA_Abort_IT>
 800655e:	1e03      	subs	r3, r0, #0
 8006560:	d01c      	beq.n	800659c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2280      	movs	r2, #128	; 0x80
 8006566:	589b      	ldr	r3, [r3, r2]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	2180      	movs	r1, #128	; 0x80
 800656e:	5852      	ldr	r2, [r2, r1]
 8006570:	0010      	movs	r0, r2
 8006572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006574:	e012      	b.n	800659c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	0018      	movs	r0, r3
 800657a:	f000 f9e1 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657e:	e00d      	b.n	800659c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	0018      	movs	r0, r3
 8006584:	f000 f9dc 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006588:	e008      	b.n	800659c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	0018      	movs	r0, r3
 800658e:	f000 f9d7 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2290      	movs	r2, #144	; 0x90
 8006596:	2100      	movs	r1, #0
 8006598:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800659a:	e1b9      	b.n	8006910 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	46c0      	nop			; (mov r8, r8)
    return;
 800659e:	e1b7      	b.n	8006910 <HAL_UART_IRQHandler+0x62c>
 80065a0:	0000080f 	.word	0x0000080f
 80065a4:	10000001 	.word	0x10000001
 80065a8:	04000120 	.word	0x04000120
 80065ac:	08007595 	.word	0x08007595

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d000      	beq.n	80065ba <HAL_UART_IRQHandler+0x2d6>
 80065b8:	e13e      	b.n	8006838 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065ba:	23a4      	movs	r3, #164	; 0xa4
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2210      	movs	r2, #16
 80065c2:	4013      	ands	r3, r2
 80065c4:	d100      	bne.n	80065c8 <HAL_UART_IRQHandler+0x2e4>
 80065c6:	e137      	b.n	8006838 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065c8:	23a0      	movs	r3, #160	; 0xa0
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2210      	movs	r2, #16
 80065d0:	4013      	ands	r3, r2
 80065d2:	d100      	bne.n	80065d6 <HAL_UART_IRQHandler+0x2f2>
 80065d4:	e130      	b.n	8006838 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2210      	movs	r2, #16
 80065dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2240      	movs	r2, #64	; 0x40
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d000      	beq.n	80065ee <HAL_UART_IRQHandler+0x30a>
 80065ec:	e0a4      	b.n	8006738 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2280      	movs	r2, #128	; 0x80
 80065f2:	589b      	ldr	r3, [r3, r2]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	217e      	movs	r1, #126	; 0x7e
 80065fa:	187b      	adds	r3, r7, r1
 80065fc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80065fe:	187b      	adds	r3, r7, r1
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d100      	bne.n	8006608 <HAL_UART_IRQHandler+0x324>
 8006606:	e185      	b.n	8006914 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	225c      	movs	r2, #92	; 0x5c
 800660c:	5a9b      	ldrh	r3, [r3, r2]
 800660e:	187a      	adds	r2, r7, r1
 8006610:	8812      	ldrh	r2, [r2, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d300      	bcc.n	8006618 <HAL_UART_IRQHandler+0x334>
 8006616:	e17d      	b.n	8006914 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	187a      	adds	r2, r7, r1
 800661c:	215e      	movs	r1, #94	; 0x5e
 800661e:	8812      	ldrh	r2, [r2, #0]
 8006620:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	589b      	ldr	r3, [r3, r2]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2220      	movs	r2, #32
 800662e:	4013      	ands	r3, r2
 8006630:	d170      	bne.n	8006714 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006632:	f3ef 8310 	mrs	r3, PRIMASK
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800663a:	67bb      	str	r3, [r7, #120]	; 0x78
 800663c:	2301      	movs	r3, #1
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006642:	f383 8810 	msr	PRIMASK, r3
}
 8006646:	46c0      	nop			; (mov r8, r8)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	49b4      	ldr	r1, [pc, #720]	; (8006924 <HAL_UART_IRQHandler+0x640>)
 8006654:	400a      	ands	r2, r1
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800665a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	f383 8810 	msr	PRIMASK, r3
}
 8006662:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006664:	f3ef 8310 	mrs	r3, PRIMASK
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800666a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666c:	677b      	str	r3, [r7, #116]	; 0x74
 800666e:	2301      	movs	r3, #1
 8006670:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006674:	f383 8810 	msr	PRIMASK, r3
}
 8006678:	46c0      	nop			; (mov r8, r8)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2101      	movs	r1, #1
 8006686:	438a      	bics	r2, r1
 8006688:	609a      	str	r2, [r3, #8]
 800668a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800668c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006690:	f383 8810 	msr	PRIMASK, r3
}
 8006694:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006696:	f3ef 8310 	mrs	r3, PRIMASK
 800669a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800669c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669e:	673b      	str	r3, [r7, #112]	; 0x70
 80066a0:	2301      	movs	r3, #1
 80066a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a6:	f383 8810 	msr	PRIMASK, r3
}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2140      	movs	r1, #64	; 0x40
 80066b8:	438a      	bics	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
 80066bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066be:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c2:	f383 8810 	msr	PRIMASK, r3
}
 80066c6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	228c      	movs	r2, #140	; 0x8c
 80066cc:	2120      	movs	r1, #32
 80066ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d6:	f3ef 8310 	mrs	r3, PRIMASK
 80066da:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80066dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066e0:	2301      	movs	r3, #1
 80066e2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066e6:	f383 8810 	msr	PRIMASK, r3
}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2110      	movs	r1, #16
 80066f8:	438a      	bics	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2280      	movs	r2, #128	; 0x80
 800670c:	589b      	ldr	r3, [r3, r2]
 800670e:	0018      	movs	r0, r3
 8006710:	f7fc fb7e 	bl	8002e10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	225c      	movs	r2, #92	; 0x5c
 800671e:	5a9a      	ldrh	r2, [r3, r2]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	215e      	movs	r1, #94	; 0x5e
 8006724:	5a5b      	ldrh	r3, [r3, r1]
 8006726:	b29b      	uxth	r3, r3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	b29a      	uxth	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	0011      	movs	r1, r2
 8006730:	0018      	movs	r0, r3
 8006732:	f000 f90d 	bl	8006950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006736:	e0ed      	b.n	8006914 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	225c      	movs	r2, #92	; 0x5c
 800673c:	5a99      	ldrh	r1, [r3, r2]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	225e      	movs	r2, #94	; 0x5e
 8006742:	5a9b      	ldrh	r3, [r3, r2]
 8006744:	b29a      	uxth	r2, r3
 8006746:	208e      	movs	r0, #142	; 0x8e
 8006748:	183b      	adds	r3, r7, r0
 800674a:	1a8a      	subs	r2, r1, r2
 800674c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	225e      	movs	r2, #94	; 0x5e
 8006752:	5a9b      	ldrh	r3, [r3, r2]
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d100      	bne.n	800675c <HAL_UART_IRQHandler+0x478>
 800675a:	e0dd      	b.n	8006918 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800675c:	183b      	adds	r3, r7, r0
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d100      	bne.n	8006766 <HAL_UART_IRQHandler+0x482>
 8006764:	e0d8      	b.n	8006918 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006766:	f3ef 8310 	mrs	r3, PRIMASK
 800676a:	60fb      	str	r3, [r7, #12]
  return(result);
 800676c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800676e:	2488      	movs	r4, #136	; 0x88
 8006770:	193a      	adds	r2, r7, r4
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	2301      	movs	r3, #1
 8006776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f383 8810 	msr	PRIMASK, r3
}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4967      	ldr	r1, [pc, #412]	; (8006928 <HAL_UART_IRQHandler+0x644>)
 800678c:	400a      	ands	r2, r1
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	193b      	adds	r3, r7, r4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f383 8810 	msr	PRIMASK, r3
}
 800679c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800679e:	f3ef 8310 	mrs	r3, PRIMASK
 80067a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80067a4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067a6:	2484      	movs	r4, #132	; 0x84
 80067a8:	193a      	adds	r2, r7, r4
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	2301      	movs	r3, #1
 80067ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f383 8810 	msr	PRIMASK, r3
}
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	495a      	ldr	r1, [pc, #360]	; (800692c <HAL_UART_IRQHandler+0x648>)
 80067c4:	400a      	ands	r2, r1
 80067c6:	609a      	str	r2, [r3, #8]
 80067c8:	193b      	adds	r3, r7, r4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	f383 8810 	msr	PRIMASK, r3
}
 80067d4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	228c      	movs	r2, #140	; 0x8c
 80067da:	2120      	movs	r1, #32
 80067dc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ea:	f3ef 8310 	mrs	r3, PRIMASK
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f2:	2480      	movs	r4, #128	; 0x80
 80067f4:	193a      	adds	r2, r7, r4
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	2301      	movs	r3, #1
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	f383 8810 	msr	PRIMASK, r3
}
 8006802:	46c0      	nop			; (mov r8, r8)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2110      	movs	r1, #16
 8006810:	438a      	bics	r2, r1
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	193b      	adds	r3, r7, r4
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	f383 8810 	msr	PRIMASK, r3
}
 8006820:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2202      	movs	r2, #2
 8006826:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006828:	183b      	adds	r3, r7, r0
 800682a:	881a      	ldrh	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	0011      	movs	r1, r2
 8006830:	0018      	movs	r0, r3
 8006832:	f000 f88d 	bl	8006950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006836:	e06f      	b.n	8006918 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006838:	23a4      	movs	r3, #164	; 0xa4
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	2380      	movs	r3, #128	; 0x80
 8006840:	035b      	lsls	r3, r3, #13
 8006842:	4013      	ands	r3, r2
 8006844:	d010      	beq.n	8006868 <HAL_UART_IRQHandler+0x584>
 8006846:	239c      	movs	r3, #156	; 0x9c
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	03db      	lsls	r3, r3, #15
 8006850:	4013      	ands	r3, r2
 8006852:	d009      	beq.n	8006868 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2280      	movs	r2, #128	; 0x80
 800685a:	0352      	lsls	r2, r2, #13
 800685c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	0018      	movs	r0, r3
 8006862:	f001 fbeb 	bl	800803c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006866:	e05a      	b.n	800691e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006868:	23a4      	movs	r3, #164	; 0xa4
 800686a:	18fb      	adds	r3, r7, r3
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2280      	movs	r2, #128	; 0x80
 8006870:	4013      	ands	r3, r2
 8006872:	d016      	beq.n	80068a2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006874:	23a0      	movs	r3, #160	; 0xa0
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2280      	movs	r2, #128	; 0x80
 800687c:	4013      	ands	r3, r2
 800687e:	d106      	bne.n	800688e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006880:	239c      	movs	r3, #156	; 0x9c
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	2380      	movs	r3, #128	; 0x80
 8006888:	041b      	lsls	r3, r3, #16
 800688a:	4013      	ands	r3, r2
 800688c:	d009      	beq.n	80068a2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006892:	2b00      	cmp	r3, #0
 8006894:	d042      	beq.n	800691c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	0010      	movs	r0, r2
 800689e:	4798      	blx	r3
    }
    return;
 80068a0:	e03c      	b.n	800691c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068a2:	23a4      	movs	r3, #164	; 0xa4
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2240      	movs	r2, #64	; 0x40
 80068aa:	4013      	ands	r3, r2
 80068ac:	d00a      	beq.n	80068c4 <HAL_UART_IRQHandler+0x5e0>
 80068ae:	23a0      	movs	r3, #160	; 0xa0
 80068b0:	18fb      	adds	r3, r7, r3
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2240      	movs	r2, #64	; 0x40
 80068b6:	4013      	ands	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	0018      	movs	r0, r3
 80068be:	f000 fe80 	bl	80075c2 <UART_EndTransmit_IT>
    return;
 80068c2:	e02c      	b.n	800691e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068c4:	23a4      	movs	r3, #164	; 0xa4
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	041b      	lsls	r3, r3, #16
 80068ce:	4013      	ands	r3, r2
 80068d0:	d00b      	beq.n	80068ea <HAL_UART_IRQHandler+0x606>
 80068d2:	23a0      	movs	r3, #160	; 0xa0
 80068d4:	18fb      	adds	r3, r7, r3
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	2380      	movs	r3, #128	; 0x80
 80068da:	05db      	lsls	r3, r3, #23
 80068dc:	4013      	ands	r3, r2
 80068de:	d004      	beq.n	80068ea <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f001 fbba 	bl	800805c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068e8:	e019      	b.n	800691e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80068ea:	23a4      	movs	r3, #164	; 0xa4
 80068ec:	18fb      	adds	r3, r7, r3
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	2380      	movs	r3, #128	; 0x80
 80068f2:	045b      	lsls	r3, r3, #17
 80068f4:	4013      	ands	r3, r2
 80068f6:	d012      	beq.n	800691e <HAL_UART_IRQHandler+0x63a>
 80068f8:	23a0      	movs	r3, #160	; 0xa0
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da0d      	bge.n	800691e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	0018      	movs	r0, r3
 8006906:	f001 fba1 	bl	800804c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800690a:	e008      	b.n	800691e <HAL_UART_IRQHandler+0x63a>
      return;
 800690c:	46c0      	nop			; (mov r8, r8)
 800690e:	e006      	b.n	800691e <HAL_UART_IRQHandler+0x63a>
    return;
 8006910:	46c0      	nop			; (mov r8, r8)
 8006912:	e004      	b.n	800691e <HAL_UART_IRQHandler+0x63a>
      return;
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	e002      	b.n	800691e <HAL_UART_IRQHandler+0x63a>
      return;
 8006918:	46c0      	nop			; (mov r8, r8)
 800691a:	e000      	b.n	800691e <HAL_UART_IRQHandler+0x63a>
    return;
 800691c:	46c0      	nop			; (mov r8, r8)
  }
}
 800691e:	46bd      	mov	sp, r7
 8006920:	b02a      	add	sp, #168	; 0xa8
 8006922:	bdb0      	pop	{r4, r5, r7, pc}
 8006924:	fffffeff 	.word	0xfffffeff
 8006928:	fffffedf 	.word	0xfffffedf
 800692c:	effffffe 	.word	0xeffffffe

08006930 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006938:	46c0      	nop			; (mov r8, r8)
 800693a:	46bd      	mov	sp, r7
 800693c:	b002      	add	sp, #8
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006948:	46c0      	nop			; (mov r8, r8)
 800694a:	46bd      	mov	sp, r7
 800694c:	b002      	add	sp, #8
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	000a      	movs	r2, r1
 800695a:	1cbb      	adds	r3, r7, #2
 800695c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	46bd      	mov	sp, r7
 8006962:	b002      	add	sp, #8
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006968:	b5b0      	push	{r4, r5, r7, lr}
 800696a:	b090      	sub	sp, #64	; 0x40
 800696c:	af00      	add	r7, sp, #0
 800696e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006970:	231a      	movs	r3, #26
 8006972:	2220      	movs	r2, #32
 8006974:	189b      	adds	r3, r3, r2
 8006976:	19db      	adds	r3, r3, r7
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	431a      	orrs	r2, r3
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	431a      	orrs	r2, r3
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	4313      	orrs	r3, r2
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4aaf      	ldr	r2, [pc, #700]	; (8006c58 <UART_SetConfig+0x2f0>)
 800699c:	4013      	ands	r3, r2
 800699e:	0019      	movs	r1, r3
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a6:	430b      	orrs	r3, r1
 80069a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4aaa      	ldr	r2, [pc, #680]	; (8006c5c <UART_SetConfig+0x2f4>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	0018      	movs	r0, r3
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	68d9      	ldr	r1, [r3, #12]
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	0003      	movs	r3, r0
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4aa4      	ldr	r2, [pc, #656]	; (8006c60 <UART_SetConfig+0x2f8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069da:	4313      	orrs	r3, r2
 80069dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	4a9f      	ldr	r2, [pc, #636]	; (8006c64 <UART_SetConfig+0x2fc>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	0019      	movs	r1, r3
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f0:	430b      	orrs	r3, r1
 80069f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fa:	220f      	movs	r2, #15
 80069fc:	4393      	bics	r3, r2
 80069fe:	0018      	movs	r0, r3
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	0003      	movs	r3, r0
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a95      	ldr	r2, [pc, #596]	; (8006c68 <UART_SetConfig+0x300>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d131      	bne.n	8006a7c <UART_SetConfig+0x114>
 8006a18:	4b94      	ldr	r3, [pc, #592]	; (8006c6c <UART_SetConfig+0x304>)
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1c:	2203      	movs	r2, #3
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d01d      	beq.n	8006a60 <UART_SetConfig+0xf8>
 8006a24:	d823      	bhi.n	8006a6e <UART_SetConfig+0x106>
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d00c      	beq.n	8006a44 <UART_SetConfig+0xdc>
 8006a2a:	d820      	bhi.n	8006a6e <UART_SetConfig+0x106>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <UART_SetConfig+0xce>
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d00e      	beq.n	8006a52 <UART_SetConfig+0xea>
 8006a34:	e01b      	b.n	8006a6e <UART_SetConfig+0x106>
 8006a36:	231b      	movs	r3, #27
 8006a38:	2220      	movs	r2, #32
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	19db      	adds	r3, r3, r7
 8006a3e:	2200      	movs	r2, #0
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e0b4      	b.n	8006bae <UART_SetConfig+0x246>
 8006a44:	231b      	movs	r3, #27
 8006a46:	2220      	movs	r2, #32
 8006a48:	189b      	adds	r3, r3, r2
 8006a4a:	19db      	adds	r3, r3, r7
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e0ad      	b.n	8006bae <UART_SetConfig+0x246>
 8006a52:	231b      	movs	r3, #27
 8006a54:	2220      	movs	r2, #32
 8006a56:	189b      	adds	r3, r3, r2
 8006a58:	19db      	adds	r3, r3, r7
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e0a6      	b.n	8006bae <UART_SetConfig+0x246>
 8006a60:	231b      	movs	r3, #27
 8006a62:	2220      	movs	r2, #32
 8006a64:	189b      	adds	r3, r3, r2
 8006a66:	19db      	adds	r3, r3, r7
 8006a68:	2208      	movs	r2, #8
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	e09f      	b.n	8006bae <UART_SetConfig+0x246>
 8006a6e:	231b      	movs	r3, #27
 8006a70:	2220      	movs	r2, #32
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	19db      	adds	r3, r3, r7
 8006a76:	2210      	movs	r2, #16
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	e098      	b.n	8006bae <UART_SetConfig+0x246>
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a7b      	ldr	r2, [pc, #492]	; (8006c70 <UART_SetConfig+0x308>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d131      	bne.n	8006aea <UART_SetConfig+0x182>
 8006a86:	4b79      	ldr	r3, [pc, #484]	; (8006c6c <UART_SetConfig+0x304>)
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	220c      	movs	r2, #12
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b0c      	cmp	r3, #12
 8006a90:	d01d      	beq.n	8006ace <UART_SetConfig+0x166>
 8006a92:	d823      	bhi.n	8006adc <UART_SetConfig+0x174>
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d00c      	beq.n	8006ab2 <UART_SetConfig+0x14a>
 8006a98:	d820      	bhi.n	8006adc <UART_SetConfig+0x174>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <UART_SetConfig+0x13c>
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d00e      	beq.n	8006ac0 <UART_SetConfig+0x158>
 8006aa2:	e01b      	b.n	8006adc <UART_SetConfig+0x174>
 8006aa4:	231b      	movs	r3, #27
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	189b      	adds	r3, r3, r2
 8006aaa:	19db      	adds	r3, r3, r7
 8006aac:	2200      	movs	r2, #0
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	e07d      	b.n	8006bae <UART_SetConfig+0x246>
 8006ab2:	231b      	movs	r3, #27
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	189b      	adds	r3, r3, r2
 8006ab8:	19db      	adds	r3, r3, r7
 8006aba:	2202      	movs	r2, #2
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e076      	b.n	8006bae <UART_SetConfig+0x246>
 8006ac0:	231b      	movs	r3, #27
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	189b      	adds	r3, r3, r2
 8006ac6:	19db      	adds	r3, r3, r7
 8006ac8:	2204      	movs	r2, #4
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e06f      	b.n	8006bae <UART_SetConfig+0x246>
 8006ace:	231b      	movs	r3, #27
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	189b      	adds	r3, r3, r2
 8006ad4:	19db      	adds	r3, r3, r7
 8006ad6:	2208      	movs	r2, #8
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	e068      	b.n	8006bae <UART_SetConfig+0x246>
 8006adc:	231b      	movs	r3, #27
 8006ade:	2220      	movs	r2, #32
 8006ae0:	189b      	adds	r3, r3, r2
 8006ae2:	19db      	adds	r3, r3, r7
 8006ae4:	2210      	movs	r2, #16
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e061      	b.n	8006bae <UART_SetConfig+0x246>
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a61      	ldr	r2, [pc, #388]	; (8006c74 <UART_SetConfig+0x30c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d106      	bne.n	8006b02 <UART_SetConfig+0x19a>
 8006af4:	231b      	movs	r3, #27
 8006af6:	2220      	movs	r2, #32
 8006af8:	189b      	adds	r3, r3, r2
 8006afa:	19db      	adds	r3, r3, r7
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	e055      	b.n	8006bae <UART_SetConfig+0x246>
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a5c      	ldr	r2, [pc, #368]	; (8006c78 <UART_SetConfig+0x310>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d106      	bne.n	8006b1a <UART_SetConfig+0x1b2>
 8006b0c:	231b      	movs	r3, #27
 8006b0e:	2220      	movs	r2, #32
 8006b10:	189b      	adds	r3, r3, r2
 8006b12:	19db      	adds	r3, r3, r7
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e049      	b.n	8006bae <UART_SetConfig+0x246>
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a50      	ldr	r2, [pc, #320]	; (8006c60 <UART_SetConfig+0x2f8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d13e      	bne.n	8006ba2 <UART_SetConfig+0x23a>
 8006b24:	4b51      	ldr	r3, [pc, #324]	; (8006c6c <UART_SetConfig+0x304>)
 8006b26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b28:	23c0      	movs	r3, #192	; 0xc0
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	22c0      	movs	r2, #192	; 0xc0
 8006b30:	0112      	lsls	r2, r2, #4
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d027      	beq.n	8006b86 <UART_SetConfig+0x21e>
 8006b36:	22c0      	movs	r2, #192	; 0xc0
 8006b38:	0112      	lsls	r2, r2, #4
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d82a      	bhi.n	8006b94 <UART_SetConfig+0x22c>
 8006b3e:	2280      	movs	r2, #128	; 0x80
 8006b40:	0112      	lsls	r2, r2, #4
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d011      	beq.n	8006b6a <UART_SetConfig+0x202>
 8006b46:	2280      	movs	r2, #128	; 0x80
 8006b48:	0112      	lsls	r2, r2, #4
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d822      	bhi.n	8006b94 <UART_SetConfig+0x22c>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <UART_SetConfig+0x1f4>
 8006b52:	2280      	movs	r2, #128	; 0x80
 8006b54:	00d2      	lsls	r2, r2, #3
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00e      	beq.n	8006b78 <UART_SetConfig+0x210>
 8006b5a:	e01b      	b.n	8006b94 <UART_SetConfig+0x22c>
 8006b5c:	231b      	movs	r3, #27
 8006b5e:	2220      	movs	r2, #32
 8006b60:	189b      	adds	r3, r3, r2
 8006b62:	19db      	adds	r3, r3, r7
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	e021      	b.n	8006bae <UART_SetConfig+0x246>
 8006b6a:	231b      	movs	r3, #27
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	189b      	adds	r3, r3, r2
 8006b70:	19db      	adds	r3, r3, r7
 8006b72:	2202      	movs	r2, #2
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	e01a      	b.n	8006bae <UART_SetConfig+0x246>
 8006b78:	231b      	movs	r3, #27
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	189b      	adds	r3, r3, r2
 8006b7e:	19db      	adds	r3, r3, r7
 8006b80:	2204      	movs	r2, #4
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	e013      	b.n	8006bae <UART_SetConfig+0x246>
 8006b86:	231b      	movs	r3, #27
 8006b88:	2220      	movs	r2, #32
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	19db      	adds	r3, r3, r7
 8006b8e:	2208      	movs	r2, #8
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e00c      	b.n	8006bae <UART_SetConfig+0x246>
 8006b94:	231b      	movs	r3, #27
 8006b96:	2220      	movs	r2, #32
 8006b98:	189b      	adds	r3, r3, r2
 8006b9a:	19db      	adds	r3, r3, r7
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	e005      	b.n	8006bae <UART_SetConfig+0x246>
 8006ba2:	231b      	movs	r3, #27
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	189b      	adds	r3, r3, r2
 8006ba8:	19db      	adds	r3, r3, r7
 8006baa:	2210      	movs	r2, #16
 8006bac:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2b      	ldr	r2, [pc, #172]	; (8006c60 <UART_SetConfig+0x2f8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d000      	beq.n	8006bba <UART_SetConfig+0x252>
 8006bb8:	e0a9      	b.n	8006d0e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bba:	231b      	movs	r3, #27
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	189b      	adds	r3, r3, r2
 8006bc0:	19db      	adds	r3, r3, r7
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d015      	beq.n	8006bf4 <UART_SetConfig+0x28c>
 8006bc8:	dc18      	bgt.n	8006bfc <UART_SetConfig+0x294>
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d00d      	beq.n	8006bea <UART_SetConfig+0x282>
 8006bce:	dc15      	bgt.n	8006bfc <UART_SetConfig+0x294>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <UART_SetConfig+0x272>
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d005      	beq.n	8006be4 <UART_SetConfig+0x27c>
 8006bd8:	e010      	b.n	8006bfc <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bda:	f7fd fe0f 	bl	80047fc <HAL_RCC_GetPCLK1Freq>
 8006bde:	0003      	movs	r3, r0
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be2:	e014      	b.n	8006c0e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be4:	4b25      	ldr	r3, [pc, #148]	; (8006c7c <UART_SetConfig+0x314>)
 8006be6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be8:	e011      	b.n	8006c0e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bea:	f7fd fd7b 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006bee:	0003      	movs	r3, r0
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bf2:	e00c      	b.n	8006c0e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bf4:	2380      	movs	r3, #128	; 0x80
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bfa:	e008      	b.n	8006c0e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006c00:	231a      	movs	r3, #26
 8006c02:	2220      	movs	r2, #32
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	19db      	adds	r3, r3, r7
 8006c08:	2201      	movs	r2, #1
 8006c0a:	701a      	strb	r2, [r3, #0]
        break;
 8006c0c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d100      	bne.n	8006c16 <UART_SetConfig+0x2ae>
 8006c14:	e14b      	b.n	8006eae <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c1a:	4b19      	ldr	r3, [pc, #100]	; (8006c80 <UART_SetConfig+0x318>)
 8006c1c:	0052      	lsls	r2, r2, #1
 8006c1e:	5ad3      	ldrh	r3, [r2, r3]
 8006c20:	0019      	movs	r1, r3
 8006c22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006c24:	f7f9 fa8a 	bl	800013c <__udivsi3>
 8006c28:	0003      	movs	r3, r0
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	0013      	movs	r3, r2
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	189b      	adds	r3, r3, r2
 8006c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d305      	bcc.n	8006c48 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d91d      	bls.n	8006c84 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006c48:	231a      	movs	r3, #26
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	189b      	adds	r3, r3, r2
 8006c4e:	19db      	adds	r3, r3, r7
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	e12b      	b.n	8006eae <UART_SetConfig+0x546>
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	cfff69f3 	.word	0xcfff69f3
 8006c5c:	ffffcfff 	.word	0xffffcfff
 8006c60:	40008000 	.word	0x40008000
 8006c64:	11fff4ff 	.word	0x11fff4ff
 8006c68:	40013800 	.word	0x40013800
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	40004400 	.word	0x40004400
 8006c74:	40004800 	.word	0x40004800
 8006c78:	40004c00 	.word	0x40004c00
 8006c7c:	00f42400 	.word	0x00f42400
 8006c80:	08009448 	.word	0x08009448
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c90:	4b92      	ldr	r3, [pc, #584]	; (8006edc <UART_SetConfig+0x574>)
 8006c92:	0052      	lsls	r2, r2, #1
 8006c94:	5ad3      	ldrh	r3, [r2, r3]
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	69b8      	ldr	r0, [r7, #24]
 8006ca2:	69f9      	ldr	r1, [r7, #28]
 8006ca4:	f7f9 fbc0 	bl	8000428 <__aeabi_uldivmod>
 8006ca8:	0002      	movs	r2, r0
 8006caa:	000b      	movs	r3, r1
 8006cac:	0e11      	lsrs	r1, r2, #24
 8006cae:	021d      	lsls	r5, r3, #8
 8006cb0:	430d      	orrs	r5, r1
 8006cb2:	0214      	lsls	r4, r2, #8
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	085b      	lsrs	r3, r3, #1
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	68b8      	ldr	r0, [r7, #8]
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	1900      	adds	r0, r0, r4
 8006cc6:	4169      	adcs	r1, r5
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	607b      	str	r3, [r7, #4]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f7f9 fba7 	bl	8000428 <__aeabi_uldivmod>
 8006cda:	0002      	movs	r2, r0
 8006cdc:	000b      	movs	r3, r1
 8006cde:	0013      	movs	r3, r2
 8006ce0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce4:	23c0      	movs	r3, #192	; 0xc0
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d309      	bcc.n	8006d00 <UART_SetConfig+0x398>
 8006cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cee:	2380      	movs	r3, #128	; 0x80
 8006cf0:	035b      	lsls	r3, r3, #13
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d204      	bcs.n	8006d00 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cfc:	60da      	str	r2, [r3, #12]
 8006cfe:	e0d6      	b.n	8006eae <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006d00:	231a      	movs	r3, #26
 8006d02:	2220      	movs	r2, #32
 8006d04:	189b      	adds	r3, r3, r2
 8006d06:	19db      	adds	r3, r3, r7
 8006d08:	2201      	movs	r2, #1
 8006d0a:	701a      	strb	r2, [r3, #0]
 8006d0c:	e0cf      	b.n	8006eae <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	69da      	ldr	r2, [r3, #28]
 8006d12:	2380      	movs	r3, #128	; 0x80
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d000      	beq.n	8006d1c <UART_SetConfig+0x3b4>
 8006d1a:	e070      	b.n	8006dfe <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006d1c:	231b      	movs	r3, #27
 8006d1e:	2220      	movs	r2, #32
 8006d20:	189b      	adds	r3, r3, r2
 8006d22:	19db      	adds	r3, r3, r7
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b08      	cmp	r3, #8
 8006d28:	d015      	beq.n	8006d56 <UART_SetConfig+0x3ee>
 8006d2a:	dc18      	bgt.n	8006d5e <UART_SetConfig+0x3f6>
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d00d      	beq.n	8006d4c <UART_SetConfig+0x3e4>
 8006d30:	dc15      	bgt.n	8006d5e <UART_SetConfig+0x3f6>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <UART_SetConfig+0x3d4>
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d005      	beq.n	8006d46 <UART_SetConfig+0x3de>
 8006d3a:	e010      	b.n	8006d5e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d3c:	f7fd fd5e 	bl	80047fc <HAL_RCC_GetPCLK1Freq>
 8006d40:	0003      	movs	r3, r0
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d44:	e014      	b.n	8006d70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d46:	4b66      	ldr	r3, [pc, #408]	; (8006ee0 <UART_SetConfig+0x578>)
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d4a:	e011      	b.n	8006d70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d4c:	f7fd fcca 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006d50:	0003      	movs	r3, r0
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d54:	e00c      	b.n	8006d70 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d56:	2380      	movs	r3, #128	; 0x80
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d5c:	e008      	b.n	8006d70 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006d62:	231a      	movs	r3, #26
 8006d64:	2220      	movs	r2, #32
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	19db      	adds	r3, r3, r7
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
        break;
 8006d6e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d100      	bne.n	8006d78 <UART_SetConfig+0x410>
 8006d76:	e09a      	b.n	8006eae <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d7c:	4b57      	ldr	r3, [pc, #348]	; (8006edc <UART_SetConfig+0x574>)
 8006d7e:	0052      	lsls	r2, r2, #1
 8006d80:	5ad3      	ldrh	r3, [r2, r3]
 8006d82:	0019      	movs	r1, r3
 8006d84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d86:	f7f9 f9d9 	bl	800013c <__udivsi3>
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	005a      	lsls	r2, r3, #1
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	18d2      	adds	r2, r2, r3
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	0019      	movs	r1, r3
 8006d9c:	0010      	movs	r0, r2
 8006d9e:	f7f9 f9cd 	bl	800013c <__udivsi3>
 8006da2:	0003      	movs	r3, r0
 8006da4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	2b0f      	cmp	r3, #15
 8006daa:	d921      	bls.n	8006df0 <UART_SetConfig+0x488>
 8006dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dae:	2380      	movs	r3, #128	; 0x80
 8006db0:	025b      	lsls	r3, r3, #9
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d21c      	bcs.n	8006df0 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	200e      	movs	r0, #14
 8006dbc:	2420      	movs	r4, #32
 8006dbe:	1903      	adds	r3, r0, r4
 8006dc0:	19db      	adds	r3, r3, r7
 8006dc2:	210f      	movs	r1, #15
 8006dc4:	438a      	bics	r2, r1
 8006dc6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2207      	movs	r2, #7
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	b299      	uxth	r1, r3
 8006dd4:	1903      	adds	r3, r0, r4
 8006dd6:	19db      	adds	r3, r3, r7
 8006dd8:	1902      	adds	r2, r0, r4
 8006dda:	19d2      	adds	r2, r2, r7
 8006ddc:	8812      	ldrh	r2, [r2, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	1902      	adds	r2, r0, r4
 8006de8:	19d2      	adds	r2, r2, r7
 8006dea:	8812      	ldrh	r2, [r2, #0]
 8006dec:	60da      	str	r2, [r3, #12]
 8006dee:	e05e      	b.n	8006eae <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006df0:	231a      	movs	r3, #26
 8006df2:	2220      	movs	r2, #32
 8006df4:	189b      	adds	r3, r3, r2
 8006df6:	19db      	adds	r3, r3, r7
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	e057      	b.n	8006eae <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dfe:	231b      	movs	r3, #27
 8006e00:	2220      	movs	r2, #32
 8006e02:	189b      	adds	r3, r3, r2
 8006e04:	19db      	adds	r3, r3, r7
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d015      	beq.n	8006e38 <UART_SetConfig+0x4d0>
 8006e0c:	dc18      	bgt.n	8006e40 <UART_SetConfig+0x4d8>
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d00d      	beq.n	8006e2e <UART_SetConfig+0x4c6>
 8006e12:	dc15      	bgt.n	8006e40 <UART_SetConfig+0x4d8>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <UART_SetConfig+0x4b6>
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d005      	beq.n	8006e28 <UART_SetConfig+0x4c0>
 8006e1c:	e010      	b.n	8006e40 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e1e:	f7fd fced 	bl	80047fc <HAL_RCC_GetPCLK1Freq>
 8006e22:	0003      	movs	r3, r0
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e26:	e014      	b.n	8006e52 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e28:	4b2d      	ldr	r3, [pc, #180]	; (8006ee0 <UART_SetConfig+0x578>)
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e2c:	e011      	b.n	8006e52 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2e:	f7fd fc59 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 8006e32:	0003      	movs	r3, r0
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e36:	e00c      	b.n	8006e52 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e38:	2380      	movs	r3, #128	; 0x80
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e3e:	e008      	b.n	8006e52 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006e44:	231a      	movs	r3, #26
 8006e46:	2220      	movs	r2, #32
 8006e48:	189b      	adds	r3, r3, r2
 8006e4a:	19db      	adds	r3, r3, r7
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]
        break;
 8006e50:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d02a      	beq.n	8006eae <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e5c:	4b1f      	ldr	r3, [pc, #124]	; (8006edc <UART_SetConfig+0x574>)
 8006e5e:	0052      	lsls	r2, r2, #1
 8006e60:	5ad3      	ldrh	r3, [r2, r3]
 8006e62:	0019      	movs	r1, r3
 8006e64:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e66:	f7f9 f969 	bl	800013c <__udivsi3>
 8006e6a:	0003      	movs	r3, r0
 8006e6c:	001a      	movs	r2, r3
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	18d2      	adds	r2, r2, r3
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	0019      	movs	r1, r3
 8006e7c:	0010      	movs	r0, r2
 8006e7e:	f7f9 f95d 	bl	800013c <__udivsi3>
 8006e82:	0003      	movs	r3, r0
 8006e84:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	2b0f      	cmp	r3, #15
 8006e8a:	d90a      	bls.n	8006ea2 <UART_SetConfig+0x53a>
 8006e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8e:	2380      	movs	r3, #128	; 0x80
 8006e90:	025b      	lsls	r3, r3, #9
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d205      	bcs.n	8006ea2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60da      	str	r2, [r3, #12]
 8006ea0:	e005      	b.n	8006eae <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006ea2:	231a      	movs	r3, #26
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	189b      	adds	r3, r3, r2
 8006ea8:	19db      	adds	r3, r3, r7
 8006eaa:	2201      	movs	r2, #1
 8006eac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	226a      	movs	r2, #106	; 0x6a
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	2268      	movs	r2, #104	; 0x68
 8006eba:	2101      	movs	r1, #1
 8006ebc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006eca:	231a      	movs	r3, #26
 8006ecc:	2220      	movs	r2, #32
 8006ece:	189b      	adds	r3, r3, r2
 8006ed0:	19db      	adds	r3, r3, r7
 8006ed2:	781b      	ldrb	r3, [r3, #0]
}
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b010      	add	sp, #64	; 0x40
 8006eda:	bdb0      	pop	{r4, r5, r7, pc}
 8006edc:	08009448 	.word	0x08009448
 8006ee0:	00f42400 	.word	0x00f42400

08006ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	2208      	movs	r2, #8
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d00b      	beq.n	8006f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4a4a      	ldr	r2, [pc, #296]	; (8007028 <UART_AdvFeatureConfig+0x144>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	0019      	movs	r1, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	2201      	movs	r2, #1
 8006f14:	4013      	ands	r3, r2
 8006f16:	d00b      	beq.n	8006f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	4a43      	ldr	r2, [pc, #268]	; (800702c <UART_AdvFeatureConfig+0x148>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	0019      	movs	r1, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	2202      	movs	r2, #2
 8006f36:	4013      	ands	r3, r2
 8006f38:	d00b      	beq.n	8006f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	4a3b      	ldr	r2, [pc, #236]	; (8007030 <UART_AdvFeatureConfig+0x14c>)
 8006f42:	4013      	ands	r3, r2
 8006f44:	0019      	movs	r1, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f56:	2204      	movs	r2, #4
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d00b      	beq.n	8006f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	4a34      	ldr	r2, [pc, #208]	; (8007034 <UART_AdvFeatureConfig+0x150>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	0019      	movs	r1, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f78:	2210      	movs	r2, #16
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	d00b      	beq.n	8006f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	4a2c      	ldr	r2, [pc, #176]	; (8007038 <UART_AdvFeatureConfig+0x154>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	0019      	movs	r1, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	4a25      	ldr	r2, [pc, #148]	; (800703c <UART_AdvFeatureConfig+0x158>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	0019      	movs	r1, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	2240      	movs	r2, #64	; 0x40
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	d01d      	beq.n	8006ffe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	4a1d      	ldr	r2, [pc, #116]	; (8007040 <UART_AdvFeatureConfig+0x15c>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	0019      	movs	r1, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fde:	2380      	movs	r3, #128	; 0x80
 8006fe0:	035b      	lsls	r3, r3, #13
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d10b      	bne.n	8006ffe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4a15      	ldr	r2, [pc, #84]	; (8007044 <UART_AdvFeatureConfig+0x160>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	0019      	movs	r1, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	2280      	movs	r2, #128	; 0x80
 8007004:	4013      	ands	r3, r2
 8007006:	d00b      	beq.n	8007020 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	4a0e      	ldr	r2, [pc, #56]	; (8007048 <UART_AdvFeatureConfig+0x164>)
 8007010:	4013      	ands	r3, r2
 8007012:	0019      	movs	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	605a      	str	r2, [r3, #4]
  }
}
 8007020:	46c0      	nop			; (mov r8, r8)
 8007022:	46bd      	mov	sp, r7
 8007024:	b002      	add	sp, #8
 8007026:	bd80      	pop	{r7, pc}
 8007028:	ffff7fff 	.word	0xffff7fff
 800702c:	fffdffff 	.word	0xfffdffff
 8007030:	fffeffff 	.word	0xfffeffff
 8007034:	fffbffff 	.word	0xfffbffff
 8007038:	ffffefff 	.word	0xffffefff
 800703c:	ffffdfff 	.word	0xffffdfff
 8007040:	ffefffff 	.word	0xffefffff
 8007044:	ff9fffff 	.word	0xff9fffff
 8007048:	fff7ffff 	.word	0xfff7ffff

0800704c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b092      	sub	sp, #72	; 0x48
 8007050:	af02      	add	r7, sp, #8
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2290      	movs	r2, #144	; 0x90
 8007058:	2100      	movs	r1, #0
 800705a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800705c:	f7fa ff30 	bl	8001ec0 <HAL_GetTick>
 8007060:	0003      	movs	r3, r0
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2208      	movs	r2, #8
 800706c:	4013      	ands	r3, r2
 800706e:	2b08      	cmp	r3, #8
 8007070:	d12d      	bne.n	80070ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007074:	2280      	movs	r2, #128	; 0x80
 8007076:	0391      	lsls	r1, r2, #14
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	4a47      	ldr	r2, [pc, #284]	; (8007198 <UART_CheckIdleState+0x14c>)
 800707c:	9200      	str	r2, [sp, #0]
 800707e:	2200      	movs	r2, #0
 8007080:	f000 f88e 	bl	80071a0 <UART_WaitOnFlagUntilTimeout>
 8007084:	1e03      	subs	r3, r0, #0
 8007086:	d022      	beq.n	80070ce <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007088:	f3ef 8310 	mrs	r3, PRIMASK
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007090:	63bb      	str	r3, [r7, #56]	; 0x38
 8007092:	2301      	movs	r3, #1
 8007094:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	f383 8810 	msr	PRIMASK, r3
}
 800709c:	46c0      	nop			; (mov r8, r8)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2180      	movs	r1, #128	; 0x80
 80070aa:	438a      	bics	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	f383 8810 	msr	PRIMASK, r3
}
 80070b8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2288      	movs	r2, #136	; 0x88
 80070be:	2120      	movs	r1, #32
 80070c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2284      	movs	r2, #132	; 0x84
 80070c6:	2100      	movs	r1, #0
 80070c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e060      	b.n	8007190 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2204      	movs	r2, #4
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d146      	bne.n	800716a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070de:	2280      	movs	r2, #128	; 0x80
 80070e0:	03d1      	lsls	r1, r2, #15
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4a2c      	ldr	r2, [pc, #176]	; (8007198 <UART_CheckIdleState+0x14c>)
 80070e6:	9200      	str	r2, [sp, #0]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f000 f859 	bl	80071a0 <UART_WaitOnFlagUntilTimeout>
 80070ee:	1e03      	subs	r3, r0, #0
 80070f0:	d03b      	beq.n	800716a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f2:	f3ef 8310 	mrs	r3, PRIMASK
 80070f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80070f8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
 80070fc:	2301      	movs	r3, #1
 80070fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f383 8810 	msr	PRIMASK, r3
}
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4922      	ldr	r1, [pc, #136]	; (800719c <UART_CheckIdleState+0x150>)
 8007114:	400a      	ands	r2, r1
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f383 8810 	msr	PRIMASK, r3
}
 8007122:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007124:	f3ef 8310 	mrs	r3, PRIMASK
 8007128:	61bb      	str	r3, [r7, #24]
  return(result);
 800712a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712c:	633b      	str	r3, [r7, #48]	; 0x30
 800712e:	2301      	movs	r3, #1
 8007130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f383 8810 	msr	PRIMASK, r3
}
 8007138:	46c0      	nop			; (mov r8, r8)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2101      	movs	r1, #1
 8007146:	438a      	bics	r2, r1
 8007148:	609a      	str	r2, [r3, #8]
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	228c      	movs	r2, #140	; 0x8c
 800715a:	2120      	movs	r1, #32
 800715c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2284      	movs	r2, #132	; 0x84
 8007162:	2100      	movs	r1, #0
 8007164:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e012      	b.n	8007190 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2288      	movs	r2, #136	; 0x88
 800716e:	2120      	movs	r1, #32
 8007170:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	228c      	movs	r2, #140	; 0x8c
 8007176:	2120      	movs	r1, #32
 8007178:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2284      	movs	r2, #132	; 0x84
 800718a:	2100      	movs	r1, #0
 800718c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	0018      	movs	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	b010      	add	sp, #64	; 0x40
 8007196:	bd80      	pop	{r7, pc}
 8007198:	01ffffff 	.word	0x01ffffff
 800719c:	fffffedf 	.word	0xfffffedf

080071a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	1dfb      	adds	r3, r7, #7
 80071ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b0:	e051      	b.n	8007256 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	3301      	adds	r3, #1
 80071b6:	d04e      	beq.n	8007256 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b8:	f7fa fe82 	bl	8001ec0 <HAL_GetTick>
 80071bc:	0002      	movs	r2, r0
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d302      	bcc.n	80071ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e051      	b.n	8007276 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2204      	movs	r2, #4
 80071da:	4013      	ands	r3, r2
 80071dc:	d03b      	beq.n	8007256 <UART_WaitOnFlagUntilTimeout+0xb6>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b80      	cmp	r3, #128	; 0x80
 80071e2:	d038      	beq.n	8007256 <UART_WaitOnFlagUntilTimeout+0xb6>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b40      	cmp	r3, #64	; 0x40
 80071e8:	d035      	beq.n	8007256 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	2208      	movs	r2, #8
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d111      	bne.n	800721c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2208      	movs	r2, #8
 80071fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	0018      	movs	r0, r3
 8007204:	f000 f960 	bl	80074c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2290      	movs	r2, #144	; 0x90
 800720c:	2108      	movs	r1, #8
 800720e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2284      	movs	r2, #132	; 0x84
 8007214:	2100      	movs	r1, #0
 8007216:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e02c      	b.n	8007276 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69da      	ldr	r2, [r3, #28]
 8007222:	2380      	movs	r3, #128	; 0x80
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	401a      	ands	r2, r3
 8007228:	2380      	movs	r3, #128	; 0x80
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	429a      	cmp	r2, r3
 800722e:	d112      	bne.n	8007256 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2280      	movs	r2, #128	; 0x80
 8007236:	0112      	lsls	r2, r2, #4
 8007238:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	0018      	movs	r0, r3
 800723e:	f000 f943 	bl	80074c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2290      	movs	r2, #144	; 0x90
 8007246:	2120      	movs	r1, #32
 8007248:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2284      	movs	r2, #132	; 0x84
 800724e:	2100      	movs	r1, #0
 8007250:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e00f      	b.n	8007276 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	4013      	ands	r3, r2
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	425a      	negs	r2, r3
 8007266:	4153      	adcs	r3, r2
 8007268:	b2db      	uxtb	r3, r3
 800726a:	001a      	movs	r2, r3
 800726c:	1dfb      	adds	r3, r7, #7
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d09e      	beq.n	80071b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	0018      	movs	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	b004      	add	sp, #16
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b098      	sub	sp, #96	; 0x60
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	1dbb      	adds	r3, r7, #6
 800728c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	1dba      	adds	r2, r7, #6
 8007298:	215c      	movs	r1, #92	; 0x5c
 800729a:	8812      	ldrh	r2, [r2, #0]
 800729c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1dba      	adds	r2, r7, #6
 80072a2:	215e      	movs	r1, #94	; 0x5e
 80072a4:	8812      	ldrh	r2, [r2, #0]
 80072a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	2380      	movs	r3, #128	; 0x80
 80072b4:	015b      	lsls	r3, r3, #5
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d10d      	bne.n	80072d6 <UART_Start_Receive_IT+0x56>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d104      	bne.n	80072cc <UART_Start_Receive_IT+0x4c>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2260      	movs	r2, #96	; 0x60
 80072c6:	497b      	ldr	r1, [pc, #492]	; (80074b4 <UART_Start_Receive_IT+0x234>)
 80072c8:	5299      	strh	r1, [r3, r2]
 80072ca:	e02e      	b.n	800732a <UART_Start_Receive_IT+0xaa>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2260      	movs	r2, #96	; 0x60
 80072d0:	21ff      	movs	r1, #255	; 0xff
 80072d2:	5299      	strh	r1, [r3, r2]
 80072d4:	e029      	b.n	800732a <UART_Start_Receive_IT+0xaa>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10d      	bne.n	80072fa <UART_Start_Receive_IT+0x7a>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d104      	bne.n	80072f0 <UART_Start_Receive_IT+0x70>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2260      	movs	r2, #96	; 0x60
 80072ea:	21ff      	movs	r1, #255	; 0xff
 80072ec:	5299      	strh	r1, [r3, r2]
 80072ee:	e01c      	b.n	800732a <UART_Start_Receive_IT+0xaa>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2260      	movs	r2, #96	; 0x60
 80072f4:	217f      	movs	r1, #127	; 0x7f
 80072f6:	5299      	strh	r1, [r3, r2]
 80072f8:	e017      	b.n	800732a <UART_Start_Receive_IT+0xaa>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	2380      	movs	r3, #128	; 0x80
 8007300:	055b      	lsls	r3, r3, #21
 8007302:	429a      	cmp	r2, r3
 8007304:	d10d      	bne.n	8007322 <UART_Start_Receive_IT+0xa2>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d104      	bne.n	8007318 <UART_Start_Receive_IT+0x98>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2260      	movs	r2, #96	; 0x60
 8007312:	217f      	movs	r1, #127	; 0x7f
 8007314:	5299      	strh	r1, [r3, r2]
 8007316:	e008      	b.n	800732a <UART_Start_Receive_IT+0xaa>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2260      	movs	r2, #96	; 0x60
 800731c:	213f      	movs	r1, #63	; 0x3f
 800731e:	5299      	strh	r1, [r3, r2]
 8007320:	e003      	b.n	800732a <UART_Start_Receive_IT+0xaa>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2260      	movs	r2, #96	; 0x60
 8007326:	2100      	movs	r1, #0
 8007328:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2290      	movs	r2, #144	; 0x90
 800732e:	2100      	movs	r1, #0
 8007330:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	228c      	movs	r2, #140	; 0x8c
 8007336:	2122      	movs	r1, #34	; 0x22
 8007338:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733a:	f3ef 8310 	mrs	r3, PRIMASK
 800733e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007340:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007344:	2301      	movs	r3, #1
 8007346:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800734a:	f383 8810 	msr	PRIMASK, r3
}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2101      	movs	r1, #1
 800735c:	430a      	orrs	r2, r1
 800735e:	609a      	str	r2, [r3, #8]
 8007360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007362:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007366:	f383 8810 	msr	PRIMASK, r3
}
 800736a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007370:	2380      	movs	r3, #128	; 0x80
 8007372:	059b      	lsls	r3, r3, #22
 8007374:	429a      	cmp	r2, r3
 8007376:	d150      	bne.n	800741a <UART_Start_Receive_IT+0x19a>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2268      	movs	r2, #104	; 0x68
 800737c:	5a9b      	ldrh	r3, [r3, r2]
 800737e:	1dba      	adds	r2, r7, #6
 8007380:	8812      	ldrh	r2, [r2, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d349      	bcc.n	800741a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	2380      	movs	r3, #128	; 0x80
 800738c:	015b      	lsls	r3, r3, #5
 800738e:	429a      	cmp	r2, r3
 8007390:	d107      	bne.n	80073a2 <UART_Start_Receive_IT+0x122>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d103      	bne.n	80073a2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4a46      	ldr	r2, [pc, #280]	; (80074b8 <UART_Start_Receive_IT+0x238>)
 800739e:	675a      	str	r2, [r3, #116]	; 0x74
 80073a0:	e002      	b.n	80073a8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4a45      	ldr	r2, [pc, #276]	; (80074bc <UART_Start_Receive_IT+0x23c>)
 80073a6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d019      	beq.n	80073e4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b0:	f3ef 8310 	mrs	r3, PRIMASK
 80073b4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80073b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80073ba:	2301      	movs	r3, #1
 80073bc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	f383 8810 	msr	PRIMASK, r3
}
 80073c4:	46c0      	nop			; (mov r8, r8)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2180      	movs	r1, #128	; 0x80
 80073d2:	0049      	lsls	r1, r1, #1
 80073d4:	430a      	orrs	r2, r1
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073de:	f383 8810 	msr	PRIMASK, r3
}
 80073e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e4:	f3ef 8310 	mrs	r3, PRIMASK
 80073e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073ec:	657b      	str	r3, [r7, #84]	; 0x54
 80073ee:	2301      	movs	r3, #1
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	f383 8810 	msr	PRIMASK, r3
}
 80073f8:	46c0      	nop			; (mov r8, r8)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2180      	movs	r1, #128	; 0x80
 8007406:	0549      	lsls	r1, r1, #21
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800740e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	f383 8810 	msr	PRIMASK, r3
}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	e047      	b.n	80074aa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	2380      	movs	r3, #128	; 0x80
 8007420:	015b      	lsls	r3, r3, #5
 8007422:	429a      	cmp	r2, r3
 8007424:	d107      	bne.n	8007436 <UART_Start_Receive_IT+0x1b6>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d103      	bne.n	8007436 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4a23      	ldr	r2, [pc, #140]	; (80074c0 <UART_Start_Receive_IT+0x240>)
 8007432:	675a      	str	r2, [r3, #116]	; 0x74
 8007434:	e002      	b.n	800743c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <UART_Start_Receive_IT+0x244>)
 800743a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d019      	beq.n	8007478 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007444:	f3ef 8310 	mrs	r3, PRIMASK
 8007448:	61fb      	str	r3, [r7, #28]
  return(result);
 800744a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800744c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800744e:	2301      	movs	r3, #1
 8007450:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f383 8810 	msr	PRIMASK, r3
}
 8007458:	46c0      	nop			; (mov r8, r8)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2190      	movs	r1, #144	; 0x90
 8007466:	0049      	lsls	r1, r1, #1
 8007468:	430a      	orrs	r2, r1
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800746e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	f383 8810 	msr	PRIMASK, r3
}
 8007476:	e018      	b.n	80074aa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007478:	f3ef 8310 	mrs	r3, PRIMASK
 800747c:	613b      	str	r3, [r7, #16]
  return(result);
 800747e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007480:	653b      	str	r3, [r7, #80]	; 0x50
 8007482:	2301      	movs	r3, #1
 8007484:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f383 8810 	msr	PRIMASK, r3
}
 800748c:	46c0      	nop			; (mov r8, r8)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2120      	movs	r1, #32
 800749a:	430a      	orrs	r2, r1
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	f383 8810 	msr	PRIMASK, r3
}
 80074a8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b018      	add	sp, #96	; 0x60
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	000001ff 	.word	0x000001ff
 80074b8:	08007ce5 	.word	0x08007ce5
 80074bc:	080079a5 	.word	0x080079a5
 80074c0:	080077e1 	.word	0x080077e1
 80074c4:	0800761d 	.word	0x0800761d

080074c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08e      	sub	sp, #56	; 0x38
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074d0:	f3ef 8310 	mrs	r3, PRIMASK
 80074d4:	617b      	str	r3, [r7, #20]
  return(result);
 80074d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
 80074da:	2301      	movs	r3, #1
 80074dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	f383 8810 	msr	PRIMASK, r3
}
 80074e4:	46c0      	nop			; (mov r8, r8)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4926      	ldr	r1, [pc, #152]	; (800758c <UART_EndRxTransfer+0xc4>)
 80074f2:	400a      	ands	r2, r1
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f383 8810 	msr	PRIMASK, r3
}
 8007500:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007502:	f3ef 8310 	mrs	r3, PRIMASK
 8007506:	623b      	str	r3, [r7, #32]
  return(result);
 8007508:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800750a:	633b      	str	r3, [r7, #48]	; 0x30
 800750c:	2301      	movs	r3, #1
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	f383 8810 	msr	PRIMASK, r3
}
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	491b      	ldr	r1, [pc, #108]	; (8007590 <UART_EndRxTransfer+0xc8>)
 8007524:	400a      	ands	r2, r1
 8007526:	609a      	str	r2, [r3, #8]
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	f383 8810 	msr	PRIMASK, r3
}
 8007532:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d118      	bne.n	800756e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800753c:	f3ef 8310 	mrs	r3, PRIMASK
 8007540:	60bb      	str	r3, [r7, #8]
  return(result);
 8007542:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007546:	2301      	movs	r3, #1
 8007548:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f383 8810 	msr	PRIMASK, r3
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2110      	movs	r1, #16
 800755e:	438a      	bics	r2, r1
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f383 8810 	msr	PRIMASK, r3
}
 800756c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	228c      	movs	r2, #140	; 0x8c
 8007572:	2120      	movs	r1, #32
 8007574:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	46bd      	mov	sp, r7
 8007586:	b00e      	add	sp, #56	; 0x38
 8007588:	bd80      	pop	{r7, pc}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	fffffedf 	.word	0xfffffedf
 8007590:	effffffe 	.word	0xeffffffe

08007594 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	225e      	movs	r2, #94	; 0x5e
 80075a6:	2100      	movs	r1, #0
 80075a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2256      	movs	r2, #86	; 0x56
 80075ae:	2100      	movs	r1, #0
 80075b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7ff f9c3 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	46bd      	mov	sp, r7
 80075be:	b004      	add	sp, #16
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ca:	f3ef 8310 	mrs	r3, PRIMASK
 80075ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80075d0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	2301      	movs	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f383 8810 	msr	PRIMASK, r3
}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2140      	movs	r1, #64	; 0x40
 80075ec:	438a      	bics	r2, r1
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f383 8810 	msr	PRIMASK, r3
}
 80075fa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2288      	movs	r2, #136	; 0x88
 8007600:	2120      	movs	r1, #32
 8007602:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	0018      	movs	r0, r3
 800760e:	f7ff f98f 	bl	8006930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	46bd      	mov	sp, r7
 8007616:	b006      	add	sp, #24
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b094      	sub	sp, #80	; 0x50
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007624:	204e      	movs	r0, #78	; 0x4e
 8007626:	183b      	adds	r3, r7, r0
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	2160      	movs	r1, #96	; 0x60
 800762c:	5a52      	ldrh	r2, [r2, r1]
 800762e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	228c      	movs	r2, #140	; 0x8c
 8007634:	589b      	ldr	r3, [r3, r2]
 8007636:	2b22      	cmp	r3, #34	; 0x22
 8007638:	d000      	beq.n	800763c <UART_RxISR_8BIT+0x20>
 800763a:	e0bf      	b.n	80077bc <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007642:	214c      	movs	r1, #76	; 0x4c
 8007644:	187b      	adds	r3, r7, r1
 8007646:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007648:	187b      	adds	r3, r7, r1
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	b2da      	uxtb	r2, r3
 800764e:	183b      	adds	r3, r7, r0
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b2d9      	uxtb	r1, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007658:	400a      	ands	r2, r1
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	225e      	movs	r2, #94	; 0x5e
 800766c:	5a9b      	ldrh	r3, [r3, r2]
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b299      	uxth	r1, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	225e      	movs	r2, #94	; 0x5e
 8007678:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	225e      	movs	r2, #94	; 0x5e
 800767e:	5a9b      	ldrh	r3, [r3, r2]
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d000      	beq.n	8007688 <UART_RxISR_8BIT+0x6c>
 8007686:	e0a1      	b.n	80077cc <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007688:	f3ef 8310 	mrs	r3, PRIMASK
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007690:	64bb      	str	r3, [r7, #72]	; 0x48
 8007692:	2301      	movs	r3, #1
 8007694:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	f383 8810 	msr	PRIMASK, r3
}
 800769c:	46c0      	nop			; (mov r8, r8)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	494a      	ldr	r1, [pc, #296]	; (80077d4 <UART_RxISR_8BIT+0x1b8>)
 80076aa:	400a      	ands	r2, r1
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	f383 8810 	msr	PRIMASK, r3
}
 80076b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ba:	f3ef 8310 	mrs	r3, PRIMASK
 80076be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c2:	647b      	str	r3, [r7, #68]	; 0x44
 80076c4:	2301      	movs	r3, #1
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ca:	f383 8810 	msr	PRIMASK, r3
}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2101      	movs	r1, #1
 80076dc:	438a      	bics	r2, r1
 80076de:	609a      	str	r2, [r3, #8]
 80076e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	f383 8810 	msr	PRIMASK, r3
}
 80076ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	228c      	movs	r2, #140	; 0x8c
 80076f0:	2120      	movs	r1, #32
 80076f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a34      	ldr	r2, [pc, #208]	; (80077d8 <UART_RxISR_8BIT+0x1bc>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d01f      	beq.n	800774a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	2380      	movs	r3, #128	; 0x80
 8007712:	041b      	lsls	r3, r3, #16
 8007714:	4013      	ands	r3, r2
 8007716:	d018      	beq.n	800774a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007718:	f3ef 8310 	mrs	r3, PRIMASK
 800771c:	61bb      	str	r3, [r7, #24]
  return(result);
 800771e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007720:	643b      	str	r3, [r7, #64]	; 0x40
 8007722:	2301      	movs	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	f383 8810 	msr	PRIMASK, r3
}
 800772c:	46c0      	nop			; (mov r8, r8)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4928      	ldr	r1, [pc, #160]	; (80077dc <UART_RxISR_8BIT+0x1c0>)
 800773a:	400a      	ands	r2, r1
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007740:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	f383 8810 	msr	PRIMASK, r3
}
 8007748:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800774e:	2b01      	cmp	r3, #1
 8007750:	d12f      	bne.n	80077b2 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007758:	f3ef 8310 	mrs	r3, PRIMASK
 800775c:	60fb      	str	r3, [r7, #12]
  return(result);
 800775e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007762:	2301      	movs	r3, #1
 8007764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f383 8810 	msr	PRIMASK, r3
}
 800776c:	46c0      	nop			; (mov r8, r8)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2110      	movs	r1, #16
 800777a:	438a      	bics	r2, r1
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007780:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f383 8810 	msr	PRIMASK, r3
}
 8007788:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	2210      	movs	r2, #16
 8007792:	4013      	ands	r3, r2
 8007794:	2b10      	cmp	r3, #16
 8007796:	d103      	bne.n	80077a0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2210      	movs	r2, #16
 800779e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	225c      	movs	r2, #92	; 0x5c
 80077a4:	5a9a      	ldrh	r2, [r3, r2]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	0011      	movs	r1, r2
 80077aa:	0018      	movs	r0, r3
 80077ac:	f7ff f8d0 	bl	8006950 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077b0:	e00c      	b.n	80077cc <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	0018      	movs	r0, r3
 80077b6:	f7f9 ff65 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 80077ba:	e007      	b.n	80077cc <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2108      	movs	r1, #8
 80077c8:	430a      	orrs	r2, r1
 80077ca:	619a      	str	r2, [r3, #24]
}
 80077cc:	46c0      	nop			; (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b014      	add	sp, #80	; 0x50
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	fffffedf 	.word	0xfffffedf
 80077d8:	40008000 	.word	0x40008000
 80077dc:	fbffffff 	.word	0xfbffffff

080077e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b094      	sub	sp, #80	; 0x50
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80077e8:	204e      	movs	r0, #78	; 0x4e
 80077ea:	183b      	adds	r3, r7, r0
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	2160      	movs	r1, #96	; 0x60
 80077f0:	5a52      	ldrh	r2, [r2, r1]
 80077f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	228c      	movs	r2, #140	; 0x8c
 80077f8:	589b      	ldr	r3, [r3, r2]
 80077fa:	2b22      	cmp	r3, #34	; 0x22
 80077fc:	d000      	beq.n	8007800 <UART_RxISR_16BIT+0x20>
 80077fe:	e0bf      	b.n	8007980 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007806:	214c      	movs	r1, #76	; 0x4c
 8007808:	187b      	adds	r3, r7, r1
 800780a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007810:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8007812:	187b      	adds	r3, r7, r1
 8007814:	183a      	adds	r2, r7, r0
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	8812      	ldrh	r2, [r2, #0]
 800781a:	4013      	ands	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007820:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007826:	1c9a      	adds	r2, r3, #2
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	225e      	movs	r2, #94	; 0x5e
 8007830:	5a9b      	ldrh	r3, [r3, r2]
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b299      	uxth	r1, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	225e      	movs	r2, #94	; 0x5e
 800783c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	225e      	movs	r2, #94	; 0x5e
 8007842:	5a9b      	ldrh	r3, [r3, r2]
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d000      	beq.n	800784c <UART_RxISR_16BIT+0x6c>
 800784a:	e0a1      	b.n	8007990 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800784c:	f3ef 8310 	mrs	r3, PRIMASK
 8007850:	623b      	str	r3, [r7, #32]
  return(result);
 8007852:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007854:	647b      	str	r3, [r7, #68]	; 0x44
 8007856:	2301      	movs	r3, #1
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	f383 8810 	msr	PRIMASK, r3
}
 8007860:	46c0      	nop			; (mov r8, r8)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	494a      	ldr	r1, [pc, #296]	; (8007998 <UART_RxISR_16BIT+0x1b8>)
 800786e:	400a      	ands	r2, r1
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	f383 8810 	msr	PRIMASK, r3
}
 800787c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800787e:	f3ef 8310 	mrs	r3, PRIMASK
 8007882:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007886:	643b      	str	r3, [r7, #64]	; 0x40
 8007888:	2301      	movs	r3, #1
 800788a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	f383 8810 	msr	PRIMASK, r3
}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2101      	movs	r1, #1
 80078a0:	438a      	bics	r2, r1
 80078a2:	609a      	str	r2, [r3, #8]
 80078a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	f383 8810 	msr	PRIMASK, r3
}
 80078ae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	228c      	movs	r2, #140	; 0x8c
 80078b4:	2120      	movs	r1, #32
 80078b6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a34      	ldr	r2, [pc, #208]	; (800799c <UART_RxISR_16BIT+0x1bc>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d01f      	beq.n	800790e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	2380      	movs	r3, #128	; 0x80
 80078d6:	041b      	lsls	r3, r3, #16
 80078d8:	4013      	ands	r3, r2
 80078da:	d018      	beq.n	800790e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078dc:	f3ef 8310 	mrs	r3, PRIMASK
 80078e0:	617b      	str	r3, [r7, #20]
  return(result);
 80078e2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e6:	2301      	movs	r3, #1
 80078e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	f383 8810 	msr	PRIMASK, r3
}
 80078f0:	46c0      	nop			; (mov r8, r8)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4928      	ldr	r1, [pc, #160]	; (80079a0 <UART_RxISR_16BIT+0x1c0>)
 80078fe:	400a      	ands	r2, r1
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007904:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f383 8810 	msr	PRIMASK, r3
}
 800790c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007912:	2b01      	cmp	r3, #1
 8007914:	d12f      	bne.n	8007976 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800791c:	f3ef 8310 	mrs	r3, PRIMASK
 8007920:	60bb      	str	r3, [r7, #8]
  return(result);
 8007922:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007924:	63bb      	str	r3, [r7, #56]	; 0x38
 8007926:	2301      	movs	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f383 8810 	msr	PRIMASK, r3
}
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2110      	movs	r1, #16
 800793e:	438a      	bics	r2, r1
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007944:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f383 8810 	msr	PRIMASK, r3
}
 800794c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	2210      	movs	r2, #16
 8007956:	4013      	ands	r3, r2
 8007958:	2b10      	cmp	r3, #16
 800795a:	d103      	bne.n	8007964 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2210      	movs	r2, #16
 8007962:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	225c      	movs	r2, #92	; 0x5c
 8007968:	5a9a      	ldrh	r2, [r3, r2]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	0011      	movs	r1, r2
 800796e:	0018      	movs	r0, r3
 8007970:	f7fe ffee 	bl	8006950 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007974:	e00c      	b.n	8007990 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	0018      	movs	r0, r3
 800797a:	f7f9 fe83 	bl	8001684 <HAL_UART_RxCpltCallback>
}
 800797e:	e007      	b.n	8007990 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699a      	ldr	r2, [r3, #24]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2108      	movs	r1, #8
 800798c:	430a      	orrs	r2, r1
 800798e:	619a      	str	r2, [r3, #24]
}
 8007990:	46c0      	nop			; (mov r8, r8)
 8007992:	46bd      	mov	sp, r7
 8007994:	b014      	add	sp, #80	; 0x50
 8007996:	bd80      	pop	{r7, pc}
 8007998:	fffffedf 	.word	0xfffffedf
 800799c:	40008000 	.word	0x40008000
 80079a0:	fbffffff 	.word	0xfbffffff

080079a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b0a0      	sub	sp, #128	; 0x80
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80079ac:	237a      	movs	r3, #122	; 0x7a
 80079ae:	18fb      	adds	r3, r7, r3
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	2160      	movs	r1, #96	; 0x60
 80079b4:	5a52      	ldrh	r2, [r2, r1]
 80079b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	228c      	movs	r2, #140	; 0x8c
 80079d4:	589b      	ldr	r3, [r3, r2]
 80079d6:	2b22      	cmp	r3, #34	; 0x22
 80079d8:	d000      	beq.n	80079dc <UART_RxISR_8BIT_FIFOEN+0x38>
 80079da:	e16a      	b.n	8007cb2 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079dc:	236e      	movs	r3, #110	; 0x6e
 80079de:	18fb      	adds	r3, r7, r3
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	2168      	movs	r1, #104	; 0x68
 80079e4:	5a52      	ldrh	r2, [r2, r1]
 80079e6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079e8:	e111      	b.n	8007c0e <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079f0:	216c      	movs	r1, #108	; 0x6c
 80079f2:	187b      	adds	r3, r7, r1
 80079f4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079f6:	187b      	adds	r3, r7, r1
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	237a      	movs	r3, #122	; 0x7a
 80079fe:	18fb      	adds	r3, r7, r3
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b2d9      	uxtb	r1, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a08:	400a      	ands	r2, r1
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	225e      	movs	r2, #94	; 0x5e
 8007a1c:	5a9b      	ldrh	r3, [r3, r2]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b299      	uxth	r1, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	225e      	movs	r2, #94	; 0x5e
 8007a28:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a34:	2207      	movs	r2, #7
 8007a36:	4013      	ands	r3, r2
 8007a38:	d049      	beq.n	8007ace <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	4013      	ands	r3, r2
 8007a40:	d010      	beq.n	8007a64 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007a42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a44:	2380      	movs	r3, #128	; 0x80
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	4013      	ands	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2201      	movs	r2, #1
 8007a52:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2290      	movs	r2, #144	; 0x90
 8007a58:	589b      	ldr	r3, [r3, r2]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2190      	movs	r1, #144	; 0x90
 8007a62:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a66:	2202      	movs	r2, #2
 8007a68:	4013      	ands	r3, r2
 8007a6a:	d00f      	beq.n	8007a8c <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4013      	ands	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2290      	movs	r2, #144	; 0x90
 8007a80:	589b      	ldr	r3, [r3, r2]
 8007a82:	2204      	movs	r2, #4
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2190      	movs	r1, #144	; 0x90
 8007a8a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a8e:	2204      	movs	r2, #4
 8007a90:	4013      	ands	r3, r2
 8007a92:	d00f      	beq.n	8007ab4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007a94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a96:	2201      	movs	r2, #1
 8007a98:	4013      	ands	r3, r2
 8007a9a:	d00b      	beq.n	8007ab4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2204      	movs	r2, #4
 8007aa2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2290      	movs	r2, #144	; 0x90
 8007aa8:	589b      	ldr	r3, [r3, r2]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2190      	movs	r1, #144	; 0x90
 8007ab2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2290      	movs	r2, #144	; 0x90
 8007ab8:	589b      	ldr	r3, [r3, r2]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f7fe ff3d 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2290      	movs	r2, #144	; 0x90
 8007aca:	2100      	movs	r1, #0
 8007acc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	225e      	movs	r2, #94	; 0x5e
 8007ad2:	5a9b      	ldrh	r3, [r3, r2]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d000      	beq.n	8007adc <UART_RxISR_8BIT_FIFOEN+0x138>
 8007ada:	e098      	b.n	8007c0e <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007adc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ae4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aec:	f383 8810 	msr	PRIMASK, r3
}
 8007af0:	46c0      	nop			; (mov r8, r8)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4973      	ldr	r1, [pc, #460]	; (8007ccc <UART_RxISR_8BIT_FIFOEN+0x328>)
 8007afe:	400a      	ands	r2, r1
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b04:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b08:	f383 8810 	msr	PRIMASK, r3
}
 8007b0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b12:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8007b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b16:	667b      	str	r3, [r7, #100]	; 0x64
 8007b18:	2301      	movs	r3, #1
 8007b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b1e:	f383 8810 	msr	PRIMASK, r3
}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4968      	ldr	r1, [pc, #416]	; (8007cd0 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8007b30:	400a      	ands	r2, r1
 8007b32:	609a      	str	r2, [r3, #8]
 8007b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3a:	f383 8810 	msr	PRIMASK, r3
}
 8007b3e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	228c      	movs	r2, #140	; 0x8c
 8007b44:	2120      	movs	r1, #32
 8007b46:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a5e      	ldr	r2, [pc, #376]	; (8007cd4 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d01f      	beq.n	8007b9e <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	2380      	movs	r3, #128	; 0x80
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d018      	beq.n	8007b9e <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b74:	663b      	str	r3, [r7, #96]	; 0x60
 8007b76:	2301      	movs	r3, #1
 8007b78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	f383 8810 	msr	PRIMASK, r3
}
 8007b80:	46c0      	nop			; (mov r8, r8)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4952      	ldr	r1, [pc, #328]	; (8007cd8 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8007b8e:	400a      	ands	r2, r1
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b98:	f383 8810 	msr	PRIMASK, r3
}
 8007b9c:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d12f      	bne.n	8007c06 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bac:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb0:	623b      	str	r3, [r7, #32]
  return(result);
 8007bb2:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	f383 8810 	msr	PRIMASK, r3
}
 8007bc0:	46c0      	nop			; (mov r8, r8)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2110      	movs	r1, #16
 8007bce:	438a      	bics	r2, r1
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	f383 8810 	msr	PRIMASK, r3
}
 8007bdc:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	2210      	movs	r2, #16
 8007be6:	4013      	ands	r3, r2
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d103      	bne.n	8007bf4 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2210      	movs	r2, #16
 8007bf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	225c      	movs	r2, #92	; 0x5c
 8007bf8:	5a9a      	ldrh	r2, [r3, r2]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	0011      	movs	r1, r2
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f7fe fea6 	bl	8006950 <HAL_UARTEx_RxEventCallback>
 8007c04:	e003      	b.n	8007c0e <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	0018      	movs	r0, r3
 8007c0a:	f7f9 fd3b 	bl	8001684 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c0e:	236e      	movs	r3, #110	; 0x6e
 8007c10:	18fb      	adds	r3, r7, r3
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d004      	beq.n	8007c22 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	d000      	beq.n	8007c22 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007c20:	e6e3      	b.n	80079ea <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c22:	205a      	movs	r0, #90	; 0x5a
 8007c24:	183b      	adds	r3, r7, r0
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	215e      	movs	r1, #94	; 0x5e
 8007c2a:	5a52      	ldrh	r2, [r2, r1]
 8007c2c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c2e:	0001      	movs	r1, r0
 8007c30:	187b      	adds	r3, r7, r1
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d044      	beq.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2268      	movs	r2, #104	; 0x68
 8007c3c:	5a9b      	ldrh	r3, [r3, r2]
 8007c3e:	187a      	adds	r2, r7, r1
 8007c40:	8812      	ldrh	r2, [r2, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d23d      	bcs.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c46:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8007c50:	2301      	movs	r3, #1
 8007c52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f383 8810 	msr	PRIMASK, r3
}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	491d      	ldr	r1, [pc, #116]	; (8007cdc <UART_RxISR_8BIT_FIFOEN+0x338>)
 8007c68:	400a      	ands	r2, r1
 8007c6a:	609a      	str	r2, [r3, #8]
 8007c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f383 8810 	msr	PRIMASK, r3
}
 8007c76:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a19      	ldr	r2, [pc, #100]	; (8007ce0 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8007c7c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c82:	617b      	str	r3, [r7, #20]
  return(result);
 8007c84:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c86:	653b      	str	r3, [r7, #80]	; 0x50
 8007c88:	2301      	movs	r3, #1
 8007c8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	f383 8810 	msr	PRIMASK, r3
}
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2120      	movs	r1, #32
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f383 8810 	msr	PRIMASK, r3
}
 8007cae:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cb0:	e007      	b.n	8007cc2 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2108      	movs	r1, #8
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	619a      	str	r2, [r3, #24]
}
 8007cc2:	46c0      	nop			; (mov r8, r8)
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	b020      	add	sp, #128	; 0x80
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	fffffeff 	.word	0xfffffeff
 8007cd0:	effffffe 	.word	0xeffffffe
 8007cd4:	40008000 	.word	0x40008000
 8007cd8:	fbffffff 	.word	0xfbffffff
 8007cdc:	efffffff 	.word	0xefffffff
 8007ce0:	0800761d 	.word	0x0800761d

08007ce4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b0a2      	sub	sp, #136	; 0x88
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007cec:	2382      	movs	r3, #130	; 0x82
 8007cee:	18fb      	adds	r3, r7, r3
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	2160      	movs	r1, #96	; 0x60
 8007cf4:	5a52      	ldrh	r2, [r2, r1]
 8007cf6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	2284      	movs	r2, #132	; 0x84
 8007d00:	18ba      	adds	r2, r7, r2
 8007d02:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	228c      	movs	r2, #140	; 0x8c
 8007d18:	589b      	ldr	r3, [r3, r2]
 8007d1a:	2b22      	cmp	r3, #34	; 0x22
 8007d1c:	d000      	beq.n	8007d20 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8007d1e:	e174      	b.n	800800a <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d20:	2376      	movs	r3, #118	; 0x76
 8007d22:	18fb      	adds	r3, r7, r3
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	2168      	movs	r1, #104	; 0x68
 8007d28:	5a52      	ldrh	r2, [r2, r1]
 8007d2a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d2c:	e119      	b.n	8007f62 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d34:	2174      	movs	r1, #116	; 0x74
 8007d36:	187b      	adds	r3, r7, r1
 8007d38:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3e:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d40:	187b      	adds	r3, r7, r1
 8007d42:	2282      	movs	r2, #130	; 0x82
 8007d44:	18ba      	adds	r2, r7, r2
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	8812      	ldrh	r2, [r2, #0]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	1c9a      	adds	r2, r3, #2
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	225e      	movs	r2, #94	; 0x5e
 8007d60:	5a9b      	ldrh	r3, [r3, r2]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b299      	uxth	r1, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	225e      	movs	r2, #94	; 0x5e
 8007d6c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	2184      	movs	r1, #132	; 0x84
 8007d76:	187a      	adds	r2, r7, r1
 8007d78:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d7a:	187b      	adds	r3, r7, r1
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2207      	movs	r2, #7
 8007d80:	4013      	ands	r3, r2
 8007d82:	d04e      	beq.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d84:	187b      	adds	r3, r7, r1
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	d010      	beq.n	8007db0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8007d8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d90:	2380      	movs	r3, #128	; 0x80
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	4013      	ands	r3, r2
 8007d96:	d00b      	beq.n	8007db0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2290      	movs	r2, #144	; 0x90
 8007da4:	589b      	ldr	r3, [r3, r2]
 8007da6:	2201      	movs	r2, #1
 8007da8:	431a      	orrs	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2190      	movs	r1, #144	; 0x90
 8007dae:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007db0:	2384      	movs	r3, #132	; 0x84
 8007db2:	18fb      	adds	r3, r7, r3
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2202      	movs	r2, #2
 8007db8:	4013      	ands	r3, r2
 8007dba:	d00f      	beq.n	8007ddc <UART_RxISR_16BIT_FIFOEN+0xf8>
 8007dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	d00b      	beq.n	8007ddc <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2290      	movs	r2, #144	; 0x90
 8007dd0:	589b      	ldr	r3, [r3, r2]
 8007dd2:	2204      	movs	r2, #4
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2190      	movs	r1, #144	; 0x90
 8007dda:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ddc:	2384      	movs	r3, #132	; 0x84
 8007dde:	18fb      	adds	r3, r7, r3
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2204      	movs	r2, #4
 8007de4:	4013      	ands	r3, r2
 8007de6:	d00f      	beq.n	8007e08 <UART_RxISR_16BIT_FIFOEN+0x124>
 8007de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dea:	2201      	movs	r2, #1
 8007dec:	4013      	ands	r3, r2
 8007dee:	d00b      	beq.n	8007e08 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2204      	movs	r2, #4
 8007df6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2290      	movs	r2, #144	; 0x90
 8007dfc:	589b      	ldr	r3, [r3, r2]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2190      	movs	r1, #144	; 0x90
 8007e06:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2290      	movs	r2, #144	; 0x90
 8007e0c:	589b      	ldr	r3, [r3, r2]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	0018      	movs	r0, r3
 8007e16:	f7fe fd93 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2290      	movs	r2, #144	; 0x90
 8007e1e:	2100      	movs	r1, #0
 8007e20:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	225e      	movs	r2, #94	; 0x5e
 8007e26:	5a9b      	ldrh	r3, [r3, r2]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d000      	beq.n	8007e30 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8007e2e:	e098      	b.n	8007f62 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e30:	f3ef 8310 	mrs	r3, PRIMASK
 8007e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e40:	f383 8810 	msr	PRIMASK, r3
}
 8007e44:	46c0      	nop			; (mov r8, r8)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4974      	ldr	r1, [pc, #464]	; (8008024 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8007e52:	400a      	ands	r2, r1
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e58:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e5c:	f383 8810 	msr	PRIMASK, r3
}
 8007e60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e62:	f3ef 8310 	mrs	r3, PRIMASK
 8007e66:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e72:	f383 8810 	msr	PRIMASK, r3
}
 8007e76:	46c0      	nop			; (mov r8, r8)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4969      	ldr	r1, [pc, #420]	; (8008028 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8007e84:	400a      	ands	r2, r1
 8007e86:	609a      	str	r2, [r3, #8]
 8007e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e8a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8e:	f383 8810 	msr	PRIMASK, r3
}
 8007e92:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	228c      	movs	r2, #140	; 0x8c
 8007e98:	2120      	movs	r1, #32
 8007e9a:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a5f      	ldr	r2, [pc, #380]	; (800802c <UART_RxISR_16BIT_FIFOEN+0x348>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d01f      	beq.n	8007ef2 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	2380      	movs	r3, #128	; 0x80
 8007eba:	041b      	lsls	r3, r3, #16
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	d018      	beq.n	8007ef2 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ec4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8007eca:	2301      	movs	r3, #1
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed0:	f383 8810 	msr	PRIMASK, r3
}
 8007ed4:	46c0      	nop			; (mov r8, r8)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4953      	ldr	r1, [pc, #332]	; (8008030 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8007ee2:	400a      	ands	r2, r1
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	f383 8810 	msr	PRIMASK, r3
}
 8007ef0:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d12f      	bne.n	8007f5a <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f00:	f3ef 8310 	mrs	r3, PRIMASK
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f08:	663b      	str	r3, [r7, #96]	; 0x60
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	f383 8810 	msr	PRIMASK, r3
}
 8007f14:	46c0      	nop			; (mov r8, r8)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2110      	movs	r1, #16
 8007f22:	438a      	bics	r2, r1
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	f383 8810 	msr	PRIMASK, r3
}
 8007f30:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	2210      	movs	r2, #16
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	2b10      	cmp	r3, #16
 8007f3e:	d103      	bne.n	8007f48 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2210      	movs	r2, #16
 8007f46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	225c      	movs	r2, #92	; 0x5c
 8007f4c:	5a9a      	ldrh	r2, [r3, r2]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	0011      	movs	r1, r2
 8007f52:	0018      	movs	r0, r3
 8007f54:	f7fe fcfc 	bl	8006950 <HAL_UARTEx_RxEventCallback>
 8007f58:	e003      	b.n	8007f62 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f7f9 fb91 	bl	8001684 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f62:	2376      	movs	r3, #118	; 0x76
 8007f64:	18fb      	adds	r3, r7, r3
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <UART_RxISR_16BIT_FIFOEN+0x296>
 8007f6c:	2384      	movs	r3, #132	; 0x84
 8007f6e:	18fb      	adds	r3, r7, r3
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2220      	movs	r2, #32
 8007f74:	4013      	ands	r3, r2
 8007f76:	d000      	beq.n	8007f7a <UART_RxISR_16BIT_FIFOEN+0x296>
 8007f78:	e6d9      	b.n	8007d2e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f7a:	205e      	movs	r0, #94	; 0x5e
 8007f7c:	183b      	adds	r3, r7, r0
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	215e      	movs	r1, #94	; 0x5e
 8007f82:	5a52      	ldrh	r2, [r2, r1]
 8007f84:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f86:	0001      	movs	r1, r0
 8007f88:	187b      	adds	r3, r7, r1
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d044      	beq.n	800801a <UART_RxISR_16BIT_FIFOEN+0x336>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2268      	movs	r2, #104	; 0x68
 8007f94:	5a9b      	ldrh	r3, [r3, r2]
 8007f96:	187a      	adds	r2, r7, r1
 8007f98:	8812      	ldrh	r2, [r2, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d23d      	bcs.n	800801a <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fa8:	2301      	movs	r3, #1
 8007faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f383 8810 	msr	PRIMASK, r3
}
 8007fb2:	46c0      	nop			; (mov r8, r8)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689a      	ldr	r2, [r3, #8]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	491d      	ldr	r1, [pc, #116]	; (8008034 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8007fc0:	400a      	ands	r2, r1
 8007fc2:	609a      	str	r2, [r3, #8]
 8007fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f383 8810 	msr	PRIMASK, r3
}
 8007fce:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a19      	ldr	r2, [pc, #100]	; (8008038 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8007fd4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fda:	61bb      	str	r3, [r7, #24]
  return(result);
 8007fdc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fde:	657b      	str	r3, [r7, #84]	; 0x54
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	f383 8810 	msr	PRIMASK, r3
}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2120      	movs	r1, #32
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ffe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	f383 8810 	msr	PRIMASK, r3
}
 8008006:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008008:	e007      	b.n	800801a <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2108      	movs	r1, #8
 8008016:	430a      	orrs	r2, r1
 8008018:	619a      	str	r2, [r3, #24]
}
 800801a:	46c0      	nop			; (mov r8, r8)
 800801c:	46bd      	mov	sp, r7
 800801e:	b022      	add	sp, #136	; 0x88
 8008020:	bd80      	pop	{r7, pc}
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	fffffeff 	.word	0xfffffeff
 8008028:	effffffe 	.word	0xeffffffe
 800802c:	40008000 	.word	0x40008000
 8008030:	fbffffff 	.word	0xfbffffff
 8008034:	efffffff 	.word	0xefffffff
 8008038:	080077e1 	.word	0x080077e1

0800803c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008044:	46c0      	nop			; (mov r8, r8)
 8008046:	46bd      	mov	sp, r7
 8008048:	b002      	add	sp, #8
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008054:	46c0      	nop			; (mov r8, r8)
 8008056:	46bd      	mov	sp, r7
 8008058:	b002      	add	sp, #8
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008064:	46c0      	nop			; (mov r8, r8)
 8008066:	46bd      	mov	sp, r7
 8008068:	b002      	add	sp, #8
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2284      	movs	r2, #132	; 0x84
 8008078:	5c9b      	ldrb	r3, [r3, r2]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <HAL_UARTEx_DisableFifoMode+0x16>
 800807e:	2302      	movs	r3, #2
 8008080:	e027      	b.n	80080d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2284      	movs	r2, #132	; 0x84
 8008086:	2101      	movs	r1, #1
 8008088:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2288      	movs	r2, #136	; 0x88
 800808e:	2124      	movs	r1, #36	; 0x24
 8008090:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2101      	movs	r1, #1
 80080a6:	438a      	bics	r2, r1
 80080a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4a0b      	ldr	r2, [pc, #44]	; (80080dc <HAL_UARTEx_DisableFifoMode+0x70>)
 80080ae:	4013      	ands	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2288      	movs	r2, #136	; 0x88
 80080c4:	2120      	movs	r1, #32
 80080c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2284      	movs	r2, #132	; 0x84
 80080cc:	2100      	movs	r1, #0
 80080ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	0018      	movs	r0, r3
 80080d4:	46bd      	mov	sp, r7
 80080d6:	b004      	add	sp, #16
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	dfffffff 	.word	0xdfffffff

080080e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2284      	movs	r2, #132	; 0x84
 80080ee:	5c9b      	ldrb	r3, [r3, r2]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e02e      	b.n	8008156 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2284      	movs	r2, #132	; 0x84
 80080fc:	2101      	movs	r1, #1
 80080fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2288      	movs	r2, #136	; 0x88
 8008104:	2124      	movs	r1, #36	; 0x24
 8008106:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2101      	movs	r1, #1
 800811c:	438a      	bics	r2, r1
 800811e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	08d9      	lsrs	r1, r3, #3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	0018      	movs	r0, r3
 8008138:	f000 f854 	bl	80081e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2288      	movs	r2, #136	; 0x88
 8008148:	2120      	movs	r1, #32
 800814a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2284      	movs	r2, #132	; 0x84
 8008150:	2100      	movs	r1, #0
 8008152:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b004      	add	sp, #16
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2284      	movs	r2, #132	; 0x84
 800816e:	5c9b      	ldrb	r3, [r3, r2]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008174:	2302      	movs	r3, #2
 8008176:	e02f      	b.n	80081d8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2284      	movs	r2, #132	; 0x84
 800817c:	2101      	movs	r1, #1
 800817e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2288      	movs	r2, #136	; 0x88
 8008184:	2124      	movs	r1, #36	; 0x24
 8008186:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2101      	movs	r1, #1
 800819c:	438a      	bics	r2, r1
 800819e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	4a0e      	ldr	r2, [pc, #56]	; (80081e0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80081a8:	4013      	ands	r3, r2
 80081aa:	0019      	movs	r1, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	0018      	movs	r0, r3
 80081ba:	f000 f813 	bl	80081e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2288      	movs	r2, #136	; 0x88
 80081ca:	2120      	movs	r1, #32
 80081cc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2284      	movs	r2, #132	; 0x84
 80081d2:	2100      	movs	r1, #0
 80081d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	0018      	movs	r0, r3
 80081da:	46bd      	mov	sp, r7
 80081dc:	b004      	add	sp, #16
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	f1ffffff 	.word	0xf1ffffff

080081e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d108      	bne.n	8008206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	226a      	movs	r2, #106	; 0x6a
 80081f8:	2101      	movs	r1, #1
 80081fa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2268      	movs	r2, #104	; 0x68
 8008200:	2101      	movs	r1, #1
 8008202:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008204:	e043      	b.n	800828e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008206:	260f      	movs	r6, #15
 8008208:	19bb      	adds	r3, r7, r6
 800820a:	2208      	movs	r2, #8
 800820c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800820e:	200e      	movs	r0, #14
 8008210:	183b      	adds	r3, r7, r0
 8008212:	2208      	movs	r2, #8
 8008214:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	0e5b      	lsrs	r3, r3, #25
 800821e:	b2da      	uxtb	r2, r3
 8008220:	240d      	movs	r4, #13
 8008222:	193b      	adds	r3, r7, r4
 8008224:	2107      	movs	r1, #7
 8008226:	400a      	ands	r2, r1
 8008228:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	0f5b      	lsrs	r3, r3, #29
 8008232:	b2da      	uxtb	r2, r3
 8008234:	250c      	movs	r5, #12
 8008236:	197b      	adds	r3, r7, r5
 8008238:	2107      	movs	r1, #7
 800823a:	400a      	ands	r2, r1
 800823c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800823e:	183b      	adds	r3, r7, r0
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	197a      	adds	r2, r7, r5
 8008244:	7812      	ldrb	r2, [r2, #0]
 8008246:	4914      	ldr	r1, [pc, #80]	; (8008298 <UARTEx_SetNbDataToProcess+0xb4>)
 8008248:	5c8a      	ldrb	r2, [r1, r2]
 800824a:	435a      	muls	r2, r3
 800824c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800824e:	197b      	adds	r3, r7, r5
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	4a12      	ldr	r2, [pc, #72]	; (800829c <UARTEx_SetNbDataToProcess+0xb8>)
 8008254:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008256:	0019      	movs	r1, r3
 8008258:	f7f7 fffa 	bl	8000250 <__divsi3>
 800825c:	0003      	movs	r3, r0
 800825e:	b299      	uxth	r1, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	226a      	movs	r2, #106	; 0x6a
 8008264:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008266:	19bb      	adds	r3, r7, r6
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	193a      	adds	r2, r7, r4
 800826c:	7812      	ldrb	r2, [r2, #0]
 800826e:	490a      	ldr	r1, [pc, #40]	; (8008298 <UARTEx_SetNbDataToProcess+0xb4>)
 8008270:	5c8a      	ldrb	r2, [r1, r2]
 8008272:	435a      	muls	r2, r3
 8008274:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008276:	193b      	adds	r3, r7, r4
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	4a08      	ldr	r2, [pc, #32]	; (800829c <UARTEx_SetNbDataToProcess+0xb8>)
 800827c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800827e:	0019      	movs	r1, r3
 8008280:	f7f7 ffe6 	bl	8000250 <__divsi3>
 8008284:	0003      	movs	r3, r0
 8008286:	b299      	uxth	r1, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2268      	movs	r2, #104	; 0x68
 800828c:	5299      	strh	r1, [r3, r2]
}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	46bd      	mov	sp, r7
 8008292:	b005      	add	sp, #20
 8008294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008296:	46c0      	nop			; (mov r8, r8)
 8008298:	08009460 	.word	0x08009460
 800829c:	08009468 	.word	0x08009468

080082a0 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80082a0:	b590      	push	{r4, r7, lr}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af02      	add	r7, sp, #8
 80082a6:	0002      	movs	r2, r0
 80082a8:	1dfb      	adds	r3, r7, #7
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	1dbb      	adds	r3, r7, #6
 80082ae:	1c0a      	adds	r2, r1, #0
 80082b0:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 80082b2:	1dfb      	adds	r3, r7, #7
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	4a16      	ldr	r2, [pc, #88]	; (8008310 <I2C_LCD_ExpanderWrite+0x70>)
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	18d3      	adds	r3, r2, r3
 80082bc:	3301      	adds	r3, #1
 80082be:	781a      	ldrb	r2, [r3, #0]
 80082c0:	1dbb      	adds	r3, r7, #6
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	240f      	movs	r4, #15
 80082ca:	193b      	adds	r3, r7, r4
 80082cc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 80082ce:	1dfb      	adds	r3, r7, #7
 80082d0:	781a      	ldrb	r2, [r3, #0]
 80082d2:	4910      	ldr	r1, [pc, #64]	; (8008314 <I2C_LCD_ExpanderWrite+0x74>)
 80082d4:	0013      	movs	r3, r2
 80082d6:	005b      	lsls	r3, r3, #1
 80082d8:	189b      	adds	r3, r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	18cb      	adds	r3, r1, r3
 80082de:	3304      	adds	r3, #4
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	1dfb      	adds	r3, r7, #7
 80082e4:	781a      	ldrb	r2, [r3, #0]
 80082e6:	490b      	ldr	r1, [pc, #44]	; (8008314 <I2C_LCD_ExpanderWrite+0x74>)
 80082e8:	0013      	movs	r3, r2
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	189b      	adds	r3, r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	18cb      	adds	r3, r1, r3
 80082f2:	3308      	adds	r3, #8
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	18db      	adds	r3, r3, r3
 80082fa:	b299      	uxth	r1, r3
 80082fc:	193a      	adds	r2, r7, r4
 80082fe:	2364      	movs	r3, #100	; 0x64
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	2301      	movs	r3, #1
 8008304:	f7fb f980 	bl	8003608 <HAL_I2C_Master_Transmit>
}
 8008308:	46c0      	nop			; (mov r8, r8)
 800830a:	46bd      	mov	sp, r7
 800830c:	b005      	add	sp, #20
 800830e:	bd90      	pop	{r4, r7, pc}
 8008310:	20000408 	.word	0x20000408
 8008314:	08009470 	.word	0x08009470

08008318 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8008318:	b590      	push	{r4, r7, lr}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	0002      	movs	r2, r0
 8008320:	1dfb      	adds	r3, r7, #7
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	1dbb      	adds	r3, r7, #6
 8008326:	1c0a      	adds	r2, r1, #0
 8008328:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 800832a:	1dbb      	adds	r3, r7, #6
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2204      	movs	r2, #4
 8008330:	4313      	orrs	r3, r2
 8008332:	b2da      	uxtb	r2, r3
 8008334:	1dfb      	adds	r3, r7, #7
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	0011      	movs	r1, r2
 800833a:	0018      	movs	r0, r3
 800833c:	f7ff ffb0 	bl	80082a0 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8008340:	4b25      	ldr	r3, [pc, #148]	; (80083d8 <I2C_LCD_EnPulse+0xc0>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	4b25      	ldr	r3, [pc, #148]	; (80083dc <I2C_LCD_EnPulse+0xc4>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4925      	ldr	r1, [pc, #148]	; (80083e0 <I2C_LCD_EnPulse+0xc8>)
 800834c:	0018      	movs	r0, r3
 800834e:	f7f7 fef5 	bl	800013c <__udivsi3>
 8008352:	0003      	movs	r3, r0
 8008354:	005c      	lsls	r4, r3, #1
 8008356:	4b21      	ldr	r3, [pc, #132]	; (80083dc <I2C_LCD_EnPulse+0xc4>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4921      	ldr	r1, [pc, #132]	; (80083e0 <I2C_LCD_EnPulse+0xc8>)
 800835c:	0018      	movs	r0, r3
 800835e:	f7f7 feed 	bl	800013c <__udivsi3>
 8008362:	0003      	movs	r3, r0
 8008364:	085b      	lsrs	r3, r3, #1
 8008366:	1ae3      	subs	r3, r4, r3
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	4b1b      	ldr	r3, [pc, #108]	; (80083d8 <I2C_LCD_EnPulse+0xc0>)
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	429a      	cmp	r2, r3
 8008376:	d8f8      	bhi.n	800836a <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8008378:	1dbb      	adds	r3, r7, #6
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	2204      	movs	r2, #4
 800837e:	4393      	bics	r3, r2
 8008380:	b2da      	uxtb	r2, r3
 8008382:	1dfb      	adds	r3, r7, #7
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	0011      	movs	r1, r2
 8008388:	0018      	movs	r0, r3
 800838a:	f7ff ff89 	bl	80082a0 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 800838e:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <I2C_LCD_EnPulse+0xc0>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	4b11      	ldr	r3, [pc, #68]	; (80083dc <I2C_LCD_EnPulse+0xc4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4911      	ldr	r1, [pc, #68]	; (80083e0 <I2C_LCD_EnPulse+0xc8>)
 800839a:	0018      	movs	r0, r3
 800839c:	f7f7 fece 	bl	800013c <__udivsi3>
 80083a0:	0003      	movs	r3, r0
 80083a2:	001a      	movs	r2, r3
 80083a4:	2332      	movs	r3, #50	; 0x32
 80083a6:	4353      	muls	r3, r2
 80083a8:	001c      	movs	r4, r3
 80083aa:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <I2C_LCD_EnPulse+0xc4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	490c      	ldr	r1, [pc, #48]	; (80083e0 <I2C_LCD_EnPulse+0xc8>)
 80083b0:	0018      	movs	r0, r3
 80083b2:	f7f7 fec3 	bl	800013c <__udivsi3>
 80083b6:	0003      	movs	r3, r0
 80083b8:	085b      	lsrs	r3, r3, #1
 80083ba:	1ae3      	subs	r3, r4, r3
 80083bc:	60bb      	str	r3, [r7, #8]
 80083be:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <I2C_LCD_EnPulse+0xc0>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d8f8      	bhi.n	80083be <I2C_LCD_EnPulse+0xa6>
}
 80083cc:	46c0      	nop			; (mov r8, r8)
 80083ce:	46c0      	nop			; (mov r8, r8)
 80083d0:	46bd      	mov	sp, r7
 80083d2:	b007      	add	sp, #28
 80083d4:	bd90      	pop	{r4, r7, pc}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	e000e010 	.word	0xe000e010
 80083dc:	20000010 	.word	0x20000010
 80083e0:	000f4240 	.word	0x000f4240

080083e4 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	0002      	movs	r2, r0
 80083ec:	1dfb      	adds	r3, r7, #7
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	1dbb      	adds	r3, r7, #6
 80083f2:	1c0a      	adds	r2, r1, #0
 80083f4:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 80083f6:	1dbb      	adds	r3, r7, #6
 80083f8:	781a      	ldrb	r2, [r3, #0]
 80083fa:	1dfb      	adds	r3, r7, #7
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	0011      	movs	r1, r2
 8008400:	0018      	movs	r0, r3
 8008402:	f7ff ff4d 	bl	80082a0 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8008406:	1dbb      	adds	r3, r7, #6
 8008408:	781a      	ldrb	r2, [r3, #0]
 800840a:	1dfb      	adds	r3, r7, #7
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	0011      	movs	r1, r2
 8008410:	0018      	movs	r0, r3
 8008412:	f7ff ff81 	bl	8008318 <I2C_LCD_EnPulse>
}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	46bd      	mov	sp, r7
 800841a:	b002      	add	sp, #8
 800841c:	bd80      	pop	{r7, pc}

0800841e <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 800841e:	b590      	push	{r4, r7, lr}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	0004      	movs	r4, r0
 8008426:	0008      	movs	r0, r1
 8008428:	0011      	movs	r1, r2
 800842a:	1dfb      	adds	r3, r7, #7
 800842c:	1c22      	adds	r2, r4, #0
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	1dbb      	adds	r3, r7, #6
 8008432:	1c02      	adds	r2, r0, #0
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	1d7b      	adds	r3, r7, #5
 8008438:	1c0a      	adds	r2, r1, #0
 800843a:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 800843c:	200f      	movs	r0, #15
 800843e:	183b      	adds	r3, r7, r0
 8008440:	1dba      	adds	r2, r7, #6
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	210f      	movs	r1, #15
 8008446:	438a      	bics	r2, r1
 8008448:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 800844a:	1dbb      	adds	r3, r7, #6
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	011a      	lsls	r2, r3, #4
 8008450:	240e      	movs	r4, #14
 8008452:	193b      	adds	r3, r7, r4
 8008454:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8008456:	183a      	adds	r2, r7, r0
 8008458:	1d7b      	adds	r3, r7, #5
 800845a:	7812      	ldrb	r2, [r2, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	4313      	orrs	r3, r2
 8008460:	b2da      	uxtb	r2, r3
 8008462:	1dfb      	adds	r3, r7, #7
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	0011      	movs	r1, r2
 8008468:	0018      	movs	r0, r3
 800846a:	f7ff ffbb 	bl	80083e4 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800846e:	193a      	adds	r2, r7, r4
 8008470:	1d7b      	adds	r3, r7, #5
 8008472:	7812      	ldrb	r2, [r2, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	4313      	orrs	r3, r2
 8008478:	b2da      	uxtb	r2, r3
 800847a:	1dfb      	adds	r3, r7, #7
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	0011      	movs	r1, r2
 8008480:	0018      	movs	r0, r3
 8008482:	f7ff ffaf 	bl	80083e4 <I2C_LCD_Write4Bits>
}
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	46bd      	mov	sp, r7
 800848a:	b005      	add	sp, #20
 800848c:	bd90      	pop	{r4, r7, pc}

0800848e <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b082      	sub	sp, #8
 8008492:	af00      	add	r7, sp, #0
 8008494:	0002      	movs	r2, r0
 8008496:	1dfb      	adds	r3, r7, #7
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	1dbb      	adds	r3, r7, #6
 800849c:	1c0a      	adds	r2, r1, #0
 800849e:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80084a0:	1dbb      	adds	r3, r7, #6
 80084a2:	7819      	ldrb	r1, [r3, #0]
 80084a4:	1dfb      	adds	r3, r7, #7
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2200      	movs	r2, #0
 80084aa:	0018      	movs	r0, r3
 80084ac:	f7ff ffb7 	bl	800841e <I2C_LCD_Send>
}
 80084b0:	46c0      	nop			; (mov r8, r8)
 80084b2:	46bd      	mov	sp, r7
 80084b4:	b002      	add	sp, #8
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	0002      	movs	r2, r0
 80084c0:	1dfb      	adds	r3, r7, #7
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	1dbb      	adds	r3, r7, #6
 80084c6:	1c0a      	adds	r2, r1, #0
 80084c8:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80084ca:	1dbb      	adds	r3, r7, #6
 80084cc:	7819      	ldrb	r1, [r3, #0]
 80084ce:	1dfb      	adds	r3, r7, #7
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	2201      	movs	r2, #1
 80084d4:	0018      	movs	r0, r3
 80084d6:	f7ff ffa2 	bl	800841e <I2C_LCD_Send>
}
 80084da:	46c0      	nop			; (mov r8, r8)
 80084dc:	46bd      	mov	sp, r7
 80084de:	b002      	add	sp, #8
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b08b      	sub	sp, #44	; 0x2c
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	0002      	movs	r2, r0
 80084ec:	1dfb      	adds	r3, r7, #7
 80084ee:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80084f0:	46c0      	nop			; (mov r8, r8)
 80084f2:	f7f9 fce5 	bl	8001ec0 <HAL_GetTick>
 80084f6:	0003      	movs	r3, r0
 80084f8:	2b31      	cmp	r3, #49	; 0x31
 80084fa:	d9fa      	bls.n	80084f2 <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80084fc:	1dfb      	adds	r3, r7, #7
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	2130      	movs	r1, #48	; 0x30
 8008502:	0018      	movs	r0, r3
 8008504:	f7ff ffc3 	bl	800848e <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8008508:	2300      	movs	r3, #0
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
 800850c:	e025      	b.n	800855a <I2C_LCD_Init+0x76>
 800850e:	4b57      	ldr	r3, [pc, #348]	; (800866c <I2C_LCD_Init+0x188>)
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	4b56      	ldr	r3, [pc, #344]	; (8008670 <I2C_LCD_Init+0x18c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4956      	ldr	r1, [pc, #344]	; (8008674 <I2C_LCD_Init+0x190>)
 800851a:	0018      	movs	r0, r3
 800851c:	f7f7 fe0e 	bl	800013c <__udivsi3>
 8008520:	0003      	movs	r3, r0
 8008522:	001a      	movs	r2, r3
 8008524:	0013      	movs	r3, r2
 8008526:	015b      	lsls	r3, r3, #5
 8008528:	1a9b      	subs	r3, r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	189b      	adds	r3, r3, r2
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	001c      	movs	r4, r3
 8008532:	4b4f      	ldr	r3, [pc, #316]	; (8008670 <I2C_LCD_Init+0x18c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	494f      	ldr	r1, [pc, #316]	; (8008674 <I2C_LCD_Init+0x190>)
 8008538:	0018      	movs	r0, r3
 800853a:	f7f7 fdff 	bl	800013c <__udivsi3>
 800853e:	0003      	movs	r3, r0
 8008540:	085b      	lsrs	r3, r3, #1
 8008542:	1ae3      	subs	r3, r4, r3
 8008544:	60bb      	str	r3, [r7, #8]
 8008546:	4b49      	ldr	r3, [pc, #292]	; (800866c <I2C_LCD_Init+0x188>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	d8f8      	bhi.n	8008546 <I2C_LCD_Init+0x62>
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	3301      	adds	r3, #1
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	2b04      	cmp	r3, #4
 800855e:	d9d6      	bls.n	800850e <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8008560:	1dfb      	adds	r3, r7, #7
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2130      	movs	r1, #48	; 0x30
 8008566:	0018      	movs	r0, r3
 8008568:	f7ff ff91 	bl	800848e <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 800856c:	2300      	movs	r3, #0
 800856e:	623b      	str	r3, [r7, #32]
 8008570:	e025      	b.n	80085be <I2C_LCD_Init+0xda>
 8008572:	4b3e      	ldr	r3, [pc, #248]	; (800866c <I2C_LCD_Init+0x188>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	4b3d      	ldr	r3, [pc, #244]	; (8008670 <I2C_LCD_Init+0x18c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	493d      	ldr	r1, [pc, #244]	; (8008674 <I2C_LCD_Init+0x190>)
 800857e:	0018      	movs	r0, r3
 8008580:	f7f7 fddc 	bl	800013c <__udivsi3>
 8008584:	0003      	movs	r3, r0
 8008586:	001a      	movs	r2, r3
 8008588:	0013      	movs	r3, r2
 800858a:	015b      	lsls	r3, r3, #5
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	189b      	adds	r3, r3, r2
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	001c      	movs	r4, r3
 8008596:	4b36      	ldr	r3, [pc, #216]	; (8008670 <I2C_LCD_Init+0x18c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4936      	ldr	r1, [pc, #216]	; (8008674 <I2C_LCD_Init+0x190>)
 800859c:	0018      	movs	r0, r3
 800859e:	f7f7 fdcd 	bl	800013c <__udivsi3>
 80085a2:	0003      	movs	r3, r0
 80085a4:	085b      	lsrs	r3, r3, #1
 80085a6:	1ae3      	subs	r3, r4, r3
 80085a8:	613b      	str	r3, [r7, #16]
 80085aa:	4b30      	ldr	r3, [pc, #192]	; (800866c <I2C_LCD_Init+0x188>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d8f8      	bhi.n	80085aa <I2C_LCD_Init+0xc6>
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	3301      	adds	r3, #1
 80085bc:	623b      	str	r3, [r7, #32]
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d9d6      	bls.n	8008572 <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80085c4:	1dfb      	adds	r3, r7, #7
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2130      	movs	r1, #48	; 0x30
 80085ca:	0018      	movs	r0, r3
 80085cc:	f7ff ff5f 	bl	800848e <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80085d0:	4b26      	ldr	r3, [pc, #152]	; (800866c <I2C_LCD_Init+0x188>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	4b26      	ldr	r3, [pc, #152]	; (8008670 <I2C_LCD_Init+0x18c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4926      	ldr	r1, [pc, #152]	; (8008674 <I2C_LCD_Init+0x190>)
 80085dc:	0018      	movs	r0, r3
 80085de:	f7f7 fdad 	bl	800013c <__udivsi3>
 80085e2:	0003      	movs	r3, r0
 80085e4:	001a      	movs	r2, r3
 80085e6:	2396      	movs	r3, #150	; 0x96
 80085e8:	4353      	muls	r3, r2
 80085ea:	001c      	movs	r4, r3
 80085ec:	4b20      	ldr	r3, [pc, #128]	; (8008670 <I2C_LCD_Init+0x18c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4920      	ldr	r1, [pc, #128]	; (8008674 <I2C_LCD_Init+0x190>)
 80085f2:	0018      	movs	r0, r3
 80085f4:	f7f7 fda2 	bl	800013c <__udivsi3>
 80085f8:	0003      	movs	r3, r0
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	1ae3      	subs	r3, r4, r3
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	4b1a      	ldr	r3, [pc, #104]	; (800866c <I2C_LCD_Init+0x188>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	429a      	cmp	r2, r3
 800860c:	d8f8      	bhi.n	8008600 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 800860e:	1dfb      	adds	r3, r7, #7
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2102      	movs	r1, #2
 8008614:	0018      	movs	r0, r3
 8008616:	f7ff ff3a 	bl	800848e <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800861a:	1dfb      	adds	r3, r7, #7
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2128      	movs	r1, #40	; 0x28
 8008620:	0018      	movs	r0, r3
 8008622:	f7ff ff34 	bl	800848e <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8008626:	1dfb      	adds	r3, r7, #7
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	210c      	movs	r1, #12
 800862c:	0018      	movs	r0, r3
 800862e:	f7ff ff2e 	bl	800848e <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8008632:	1dfb      	adds	r3, r7, #7
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	2106      	movs	r1, #6
 8008638:	0018      	movs	r0, r3
 800863a:	f7ff ff28 	bl	800848e <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800863e:	1dfb      	adds	r3, r7, #7
 8008640:	781a      	ldrb	r2, [r3, #0]
 8008642:	4b0d      	ldr	r3, [pc, #52]	; (8008678 <I2C_LCD_Init+0x194>)
 8008644:	0052      	lsls	r2, r2, #1
 8008646:	2104      	movs	r1, #4
 8008648:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 800864a:	1dfb      	adds	r3, r7, #7
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <I2C_LCD_Init+0x194>)
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	18d3      	adds	r3, r2, r3
 8008654:	3301      	adds	r3, #1
 8008656:	2208      	movs	r2, #8
 8008658:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 800865a:	1dfb      	adds	r3, r7, #7
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	0018      	movs	r0, r3
 8008660:	f000 f80c 	bl	800867c <I2C_LCD_Clear>
}
 8008664:	46c0      	nop			; (mov r8, r8)
 8008666:	46bd      	mov	sp, r7
 8008668:	b00b      	add	sp, #44	; 0x2c
 800866a:	bd90      	pop	{r4, r7, pc}
 800866c:	e000e010 	.word	0xe000e010
 8008670:	20000010 	.word	0x20000010
 8008674:	000f4240 	.word	0x000f4240
 8008678:	20000408 	.word	0x20000408

0800867c <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	0002      	movs	r2, r0
 8008684:	1dfb      	adds	r3, r7, #7
 8008686:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8008688:	1dfb      	adds	r3, r7, #7
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2101      	movs	r1, #1
 800868e:	0018      	movs	r0, r3
 8008690:	f7ff fefd 	bl	800848e <I2C_LCD_Cmd>
    DELAY_MS(2);
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	e025      	b.n	80086e6 <I2C_LCD_Clear+0x6a>
 800869a:	4b17      	ldr	r3, [pc, #92]	; (80086f8 <I2C_LCD_Clear+0x7c>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	4b16      	ldr	r3, [pc, #88]	; (80086fc <I2C_LCD_Clear+0x80>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4916      	ldr	r1, [pc, #88]	; (8008700 <I2C_LCD_Clear+0x84>)
 80086a6:	0018      	movs	r0, r3
 80086a8:	f7f7 fd48 	bl	800013c <__udivsi3>
 80086ac:	0003      	movs	r3, r0
 80086ae:	001a      	movs	r2, r3
 80086b0:	0013      	movs	r3, r2
 80086b2:	015b      	lsls	r3, r3, #5
 80086b4:	1a9b      	subs	r3, r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	189b      	adds	r3, r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	001c      	movs	r4, r3
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <I2C_LCD_Clear+0x80>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	490f      	ldr	r1, [pc, #60]	; (8008700 <I2C_LCD_Clear+0x84>)
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7f7 fd39 	bl	800013c <__udivsi3>
 80086ca:	0003      	movs	r3, r0
 80086cc:	085b      	lsrs	r3, r3, #1
 80086ce:	1ae3      	subs	r3, r4, r3
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <I2C_LCD_Clear+0x7c>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d8f8      	bhi.n	80086d2 <I2C_LCD_Clear+0x56>
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	3301      	adds	r3, #1
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d9d6      	bls.n	800869a <I2C_LCD_Clear+0x1e>
}
 80086ec:	46c0      	nop			; (mov r8, r8)
 80086ee:	46c0      	nop			; (mov r8, r8)
 80086f0:	46bd      	mov	sp, r7
 80086f2:	b007      	add	sp, #28
 80086f4:	bd90      	pop	{r4, r7, pc}
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	e000e010 	.word	0xe000e010
 80086fc:	20000010 	.word	0x20000010
 8008700:	000f4240 	.word	0x000f4240

08008704 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8008704:	b590      	push	{r4, r7, lr}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	0004      	movs	r4, r0
 800870c:	0008      	movs	r0, r1
 800870e:	0011      	movs	r1, r2
 8008710:	1dfb      	adds	r3, r7, #7
 8008712:	1c22      	adds	r2, r4, #0
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	1dbb      	adds	r3, r7, #6
 8008718:	1c02      	adds	r2, r0, #0
 800871a:	701a      	strb	r2, [r3, #0]
 800871c:	1d7b      	adds	r3, r7, #5
 800871e:	1c0a      	adds	r2, r1, #0
 8008720:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8008722:	2308      	movs	r3, #8
 8008724:	18fb      	adds	r3, r7, r3
 8008726:	4a1d      	ldr	r2, [pc, #116]	; (800879c <I2C_LCD_SetCursor+0x98>)
 8008728:	ca13      	ldmia	r2!, {r0, r1, r4}
 800872a:	c313      	stmia	r3!, {r0, r1, r4}
 800872c:	6812      	ldr	r2, [r2, #0]
 800872e:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8008730:	1dfb      	adds	r3, r7, #7
 8008732:	781a      	ldrb	r2, [r3, #0]
 8008734:	491a      	ldr	r1, [pc, #104]	; (80087a0 <I2C_LCD_SetCursor+0x9c>)
 8008736:	0013      	movs	r3, r2
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	189b      	adds	r3, r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	18cb      	adds	r3, r1, r3
 8008740:	330a      	adds	r3, #10
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	1d7a      	adds	r2, r7, #5
 8008746:	7812      	ldrb	r2, [r2, #0]
 8008748:	429a      	cmp	r2, r3
 800874a:	d90c      	bls.n	8008766 <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 800874c:	1dfb      	adds	r3, r7, #7
 800874e:	781a      	ldrb	r2, [r3, #0]
 8008750:	4913      	ldr	r1, [pc, #76]	; (80087a0 <I2C_LCD_SetCursor+0x9c>)
 8008752:	0013      	movs	r3, r2
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	189b      	adds	r3, r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	18cb      	adds	r3, r1, r3
 800875c:	330a      	adds	r3, #10
 800875e:	781a      	ldrb	r2, [r3, #0]
 8008760:	1d7b      	adds	r3, r7, #5
 8008762:	3a01      	subs	r2, #1
 8008764:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8008766:	1d7b      	adds	r3, r7, #5
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	2308      	movs	r3, #8
 800876c:	18fb      	adds	r3, r7, r3
 800876e:	0092      	lsls	r2, r2, #2
 8008770:	58d3      	ldr	r3, [r2, r3]
 8008772:	b2da      	uxtb	r2, r3
 8008774:	1dbb      	adds	r3, r7, #6
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	18d3      	adds	r3, r2, r3
 800877a:	b2db      	uxtb	r3, r3
 800877c:	b25b      	sxtb	r3, r3
 800877e:	2280      	movs	r2, #128	; 0x80
 8008780:	4252      	negs	r2, r2
 8008782:	4313      	orrs	r3, r2
 8008784:	b25b      	sxtb	r3, r3
 8008786:	b2da      	uxtb	r2, r3
 8008788:	1dfb      	adds	r3, r7, #7
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	0011      	movs	r1, r2
 800878e:	0018      	movs	r0, r3
 8008790:	f7ff fe7d 	bl	800848e <I2C_LCD_Cmd>
}
 8008794:	46c0      	nop			; (mov r8, r8)
 8008796:	46bd      	mov	sp, r7
 8008798:	b007      	add	sp, #28
 800879a:	bd90      	pop	{r4, r7, pc}
 800879c:	08009384 	.word	0x08009384
 80087a0:	08009470 	.word	0x08009470

080087a4 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	0002      	movs	r2, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	1dfb      	adds	r3, r7, #7
 80087b0:	701a      	strb	r2, [r3, #0]
    while (*Str)
 80087b2:	e009      	b.n	80087c8 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	1c5a      	adds	r2, r3, #1
 80087b8:	603a      	str	r2, [r7, #0]
 80087ba:	781a      	ldrb	r2, [r3, #0]
 80087bc:	1dfb      	adds	r3, r7, #7
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	0011      	movs	r1, r2
 80087c2:	0018      	movs	r0, r3
 80087c4:	f7ff fe78 	bl	80084b8 <I2C_LCD_Data>
    while (*Str)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1f1      	bne.n	80087b4 <I2C_LCD_WriteString+0x10>
    }
}
 80087d0:	46c0      	nop			; (mov r8, r8)
 80087d2:	46c0      	nop			; (mov r8, r8)
 80087d4:	46bd      	mov	sp, r7
 80087d6:	b002      	add	sp, #8
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <I2C_LCD_Display>:
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_NOBACKLIGHT;
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
}

void I2C_LCD_Display(uint8_t I2C_LCD_InstanceIndex)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	0002      	movs	r2, r0
 80087e4:	1dfb      	adds	r3, r7, #7
 80087e6:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_DISPLAYON;
 80087e8:	1dfb      	adds	r3, r7, #7
 80087ea:	781a      	ldrb	r2, [r3, #0]
 80087ec:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <I2C_LCD_Display+0x4c>)
 80087ee:	0052      	lsls	r2, r2, #1
 80087f0:	5cd3      	ldrb	r3, [r2, r3]
 80087f2:	1dfa      	adds	r2, r7, #7
 80087f4:	7812      	ldrb	r2, [r2, #0]
 80087f6:	2104      	movs	r1, #4
 80087f8:	430b      	orrs	r3, r1
 80087fa:	b2d9      	uxtb	r1, r3
 80087fc:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <I2C_LCD_Display+0x4c>)
 80087fe:	0052      	lsls	r2, r2, #1
 8008800:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 8008802:	1dfb      	adds	r3, r7, #7
 8008804:	781a      	ldrb	r2, [r3, #0]
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <I2C_LCD_Display+0x4c>)
 8008808:	0052      	lsls	r2, r2, #1
 800880a:	5cd3      	ldrb	r3, [r2, r3]
 800880c:	2208      	movs	r2, #8
 800880e:	4313      	orrs	r3, r2
 8008810:	b2da      	uxtb	r2, r3
 8008812:	1dfb      	adds	r3, r7, #7
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	0011      	movs	r1, r2
 8008818:	0018      	movs	r0, r3
 800881a:	f7ff fe38 	bl	800848e <I2C_LCD_Cmd>
}
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	46bd      	mov	sp, r7
 8008822:	b002      	add	sp, #8
 8008824:	bd80      	pop	{r7, pc}
 8008826:	46c0      	nop			; (mov r8, r8)
 8008828:	20000408 	.word	0x20000408

0800882c <I2C_LCD_NoDisplay>:

void I2C_LCD_NoDisplay(uint8_t I2C_LCD_InstanceIndex)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	0002      	movs	r2, r0
 8008834:	1dfb      	adds	r3, r7, #7
 8008836:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl &= ~LCD_DISPLAYON;
 8008838:	1dfb      	adds	r3, r7, #7
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	4b0e      	ldr	r3, [pc, #56]	; (8008878 <I2C_LCD_NoDisplay+0x4c>)
 800883e:	0052      	lsls	r2, r2, #1
 8008840:	5cd3      	ldrb	r3, [r2, r3]
 8008842:	1dfa      	adds	r2, r7, #7
 8008844:	7812      	ldrb	r2, [r2, #0]
 8008846:	2104      	movs	r1, #4
 8008848:	438b      	bics	r3, r1
 800884a:	b2d9      	uxtb	r1, r3
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <I2C_LCD_NoDisplay+0x4c>)
 800884e:	0052      	lsls	r2, r2, #1
 8008850:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 8008852:	1dfb      	adds	r3, r7, #7
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	4b08      	ldr	r3, [pc, #32]	; (8008878 <I2C_LCD_NoDisplay+0x4c>)
 8008858:	0052      	lsls	r2, r2, #1
 800885a:	5cd3      	ldrb	r3, [r2, r3]
 800885c:	2208      	movs	r2, #8
 800885e:	4313      	orrs	r3, r2
 8008860:	b2da      	uxtb	r2, r3
 8008862:	1dfb      	adds	r3, r7, #7
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	0011      	movs	r1, r2
 8008868:	0018      	movs	r0, r3
 800886a:	f7ff fe10 	bl	800848e <I2C_LCD_Cmd>
}
 800886e:	46c0      	nop			; (mov r8, r8)
 8008870:	46bd      	mov	sp, r7
 8008872:	b002      	add	sp, #8
 8008874:	bd80      	pop	{r7, pc}
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	20000408 	.word	0x20000408

0800887c <siprintf>:
 800887c:	b40e      	push	{r1, r2, r3}
 800887e:	b500      	push	{lr}
 8008880:	490b      	ldr	r1, [pc, #44]	; (80088b0 <siprintf+0x34>)
 8008882:	b09c      	sub	sp, #112	; 0x70
 8008884:	ab1d      	add	r3, sp, #116	; 0x74
 8008886:	9002      	str	r0, [sp, #8]
 8008888:	9006      	str	r0, [sp, #24]
 800888a:	9107      	str	r1, [sp, #28]
 800888c:	9104      	str	r1, [sp, #16]
 800888e:	4809      	ldr	r0, [pc, #36]	; (80088b4 <siprintf+0x38>)
 8008890:	4909      	ldr	r1, [pc, #36]	; (80088b8 <siprintf+0x3c>)
 8008892:	cb04      	ldmia	r3!, {r2}
 8008894:	9105      	str	r1, [sp, #20]
 8008896:	6800      	ldr	r0, [r0, #0]
 8008898:	a902      	add	r1, sp, #8
 800889a:	9301      	str	r3, [sp, #4]
 800889c:	f000 f9a2 	bl	8008be4 <_svfiprintf_r>
 80088a0:	2200      	movs	r2, #0
 80088a2:	9b02      	ldr	r3, [sp, #8]
 80088a4:	701a      	strb	r2, [r3, #0]
 80088a6:	b01c      	add	sp, #112	; 0x70
 80088a8:	bc08      	pop	{r3}
 80088aa:	b003      	add	sp, #12
 80088ac:	4718      	bx	r3
 80088ae:	46c0      	nop			; (mov r8, r8)
 80088b0:	7fffffff 	.word	0x7fffffff
 80088b4:	20000068 	.word	0x20000068
 80088b8:	ffff0208 	.word	0xffff0208

080088bc <memset>:
 80088bc:	0003      	movs	r3, r0
 80088be:	1882      	adds	r2, r0, r2
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d100      	bne.n	80088c6 <memset+0xa>
 80088c4:	4770      	bx	lr
 80088c6:	7019      	strb	r1, [r3, #0]
 80088c8:	3301      	adds	r3, #1
 80088ca:	e7f9      	b.n	80088c0 <memset+0x4>

080088cc <__errno>:
 80088cc:	4b01      	ldr	r3, [pc, #4]	; (80088d4 <__errno+0x8>)
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	4770      	bx	lr
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	20000068 	.word	0x20000068

080088d8 <__libc_init_array>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	2600      	movs	r6, #0
 80088dc:	4c0c      	ldr	r4, [pc, #48]	; (8008910 <__libc_init_array+0x38>)
 80088de:	4d0d      	ldr	r5, [pc, #52]	; (8008914 <__libc_init_array+0x3c>)
 80088e0:	1b64      	subs	r4, r4, r5
 80088e2:	10a4      	asrs	r4, r4, #2
 80088e4:	42a6      	cmp	r6, r4
 80088e6:	d109      	bne.n	80088fc <__libc_init_array+0x24>
 80088e8:	2600      	movs	r6, #0
 80088ea:	f000 fc6d 	bl	80091c8 <_init>
 80088ee:	4c0a      	ldr	r4, [pc, #40]	; (8008918 <__libc_init_array+0x40>)
 80088f0:	4d0a      	ldr	r5, [pc, #40]	; (800891c <__libc_init_array+0x44>)
 80088f2:	1b64      	subs	r4, r4, r5
 80088f4:	10a4      	asrs	r4, r4, #2
 80088f6:	42a6      	cmp	r6, r4
 80088f8:	d105      	bne.n	8008906 <__libc_init_array+0x2e>
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	00b3      	lsls	r3, r6, #2
 80088fe:	58eb      	ldr	r3, [r5, r3]
 8008900:	4798      	blx	r3
 8008902:	3601      	adds	r6, #1
 8008904:	e7ee      	b.n	80088e4 <__libc_init_array+0xc>
 8008906:	00b3      	lsls	r3, r6, #2
 8008908:	58eb      	ldr	r3, [r5, r3]
 800890a:	4798      	blx	r3
 800890c:	3601      	adds	r6, #1
 800890e:	e7f2      	b.n	80088f6 <__libc_init_array+0x1e>
 8008910:	080094b8 	.word	0x080094b8
 8008914:	080094b8 	.word	0x080094b8
 8008918:	080094bc 	.word	0x080094bc
 800891c:	080094b8 	.word	0x080094b8

08008920 <__retarget_lock_acquire_recursive>:
 8008920:	4770      	bx	lr

08008922 <__retarget_lock_release_recursive>:
 8008922:	4770      	bx	lr

08008924 <_free_r>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	0005      	movs	r5, r0
 8008928:	2900      	cmp	r1, #0
 800892a:	d010      	beq.n	800894e <_free_r+0x2a>
 800892c:	1f0c      	subs	r4, r1, #4
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	da00      	bge.n	8008936 <_free_r+0x12>
 8008934:	18e4      	adds	r4, r4, r3
 8008936:	0028      	movs	r0, r5
 8008938:	f000 f8e2 	bl	8008b00 <__malloc_lock>
 800893c:	4a1d      	ldr	r2, [pc, #116]	; (80089b4 <_free_r+0x90>)
 800893e:	6813      	ldr	r3, [r2, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d105      	bne.n	8008950 <_free_r+0x2c>
 8008944:	6063      	str	r3, [r4, #4]
 8008946:	6014      	str	r4, [r2, #0]
 8008948:	0028      	movs	r0, r5
 800894a:	f000 f8e1 	bl	8008b10 <__malloc_unlock>
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	42a3      	cmp	r3, r4
 8008952:	d908      	bls.n	8008966 <_free_r+0x42>
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	1821      	adds	r1, r4, r0
 8008958:	428b      	cmp	r3, r1
 800895a:	d1f3      	bne.n	8008944 <_free_r+0x20>
 800895c:	6819      	ldr	r1, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	1809      	adds	r1, r1, r0
 8008962:	6021      	str	r1, [r4, #0]
 8008964:	e7ee      	b.n	8008944 <_free_r+0x20>
 8008966:	001a      	movs	r2, r3
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <_free_r+0x4e>
 800896e:	42a3      	cmp	r3, r4
 8008970:	d9f9      	bls.n	8008966 <_free_r+0x42>
 8008972:	6811      	ldr	r1, [r2, #0]
 8008974:	1850      	adds	r0, r2, r1
 8008976:	42a0      	cmp	r0, r4
 8008978:	d10b      	bne.n	8008992 <_free_r+0x6e>
 800897a:	6820      	ldr	r0, [r4, #0]
 800897c:	1809      	adds	r1, r1, r0
 800897e:	1850      	adds	r0, r2, r1
 8008980:	6011      	str	r1, [r2, #0]
 8008982:	4283      	cmp	r3, r0
 8008984:	d1e0      	bne.n	8008948 <_free_r+0x24>
 8008986:	6818      	ldr	r0, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	1841      	adds	r1, r0, r1
 800898c:	6011      	str	r1, [r2, #0]
 800898e:	6053      	str	r3, [r2, #4]
 8008990:	e7da      	b.n	8008948 <_free_r+0x24>
 8008992:	42a0      	cmp	r0, r4
 8008994:	d902      	bls.n	800899c <_free_r+0x78>
 8008996:	230c      	movs	r3, #12
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	e7d5      	b.n	8008948 <_free_r+0x24>
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	1821      	adds	r1, r4, r0
 80089a0:	428b      	cmp	r3, r1
 80089a2:	d103      	bne.n	80089ac <_free_r+0x88>
 80089a4:	6819      	ldr	r1, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	1809      	adds	r1, r1, r0
 80089aa:	6021      	str	r1, [r4, #0]
 80089ac:	6063      	str	r3, [r4, #4]
 80089ae:	6054      	str	r4, [r2, #4]
 80089b0:	e7ca      	b.n	8008948 <_free_r+0x24>
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	2000054c 	.word	0x2000054c

080089b8 <sbrk_aligned>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	4e0f      	ldr	r6, [pc, #60]	; (80089f8 <sbrk_aligned+0x40>)
 80089bc:	000d      	movs	r5, r1
 80089be:	6831      	ldr	r1, [r6, #0]
 80089c0:	0004      	movs	r4, r0
 80089c2:	2900      	cmp	r1, #0
 80089c4:	d102      	bne.n	80089cc <sbrk_aligned+0x14>
 80089c6:	f000 fba1 	bl	800910c <_sbrk_r>
 80089ca:	6030      	str	r0, [r6, #0]
 80089cc:	0029      	movs	r1, r5
 80089ce:	0020      	movs	r0, r4
 80089d0:	f000 fb9c 	bl	800910c <_sbrk_r>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d00a      	beq.n	80089ee <sbrk_aligned+0x36>
 80089d8:	2303      	movs	r3, #3
 80089da:	1cc5      	adds	r5, r0, #3
 80089dc:	439d      	bics	r5, r3
 80089de:	42a8      	cmp	r0, r5
 80089e0:	d007      	beq.n	80089f2 <sbrk_aligned+0x3a>
 80089e2:	1a29      	subs	r1, r5, r0
 80089e4:	0020      	movs	r0, r4
 80089e6:	f000 fb91 	bl	800910c <_sbrk_r>
 80089ea:	3001      	adds	r0, #1
 80089ec:	d101      	bne.n	80089f2 <sbrk_aligned+0x3a>
 80089ee:	2501      	movs	r5, #1
 80089f0:	426d      	negs	r5, r5
 80089f2:	0028      	movs	r0, r5
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	20000550 	.word	0x20000550

080089fc <_malloc_r>:
 80089fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089fe:	2203      	movs	r2, #3
 8008a00:	1ccb      	adds	r3, r1, #3
 8008a02:	4393      	bics	r3, r2
 8008a04:	3308      	adds	r3, #8
 8008a06:	0006      	movs	r6, r0
 8008a08:	001f      	movs	r7, r3
 8008a0a:	2b0c      	cmp	r3, #12
 8008a0c:	d238      	bcs.n	8008a80 <_malloc_r+0x84>
 8008a0e:	270c      	movs	r7, #12
 8008a10:	42b9      	cmp	r1, r7
 8008a12:	d837      	bhi.n	8008a84 <_malloc_r+0x88>
 8008a14:	0030      	movs	r0, r6
 8008a16:	f000 f873 	bl	8008b00 <__malloc_lock>
 8008a1a:	4b38      	ldr	r3, [pc, #224]	; (8008afc <_malloc_r+0x100>)
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	001c      	movs	r4, r3
 8008a22:	2c00      	cmp	r4, #0
 8008a24:	d133      	bne.n	8008a8e <_malloc_r+0x92>
 8008a26:	0039      	movs	r1, r7
 8008a28:	0030      	movs	r0, r6
 8008a2a:	f7ff ffc5 	bl	80089b8 <sbrk_aligned>
 8008a2e:	0004      	movs	r4, r0
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d15e      	bne.n	8008af2 <_malloc_r+0xf6>
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	681c      	ldr	r4, [r3, #0]
 8008a38:	0025      	movs	r5, r4
 8008a3a:	2d00      	cmp	r5, #0
 8008a3c:	d14e      	bne.n	8008adc <_malloc_r+0xe0>
 8008a3e:	2c00      	cmp	r4, #0
 8008a40:	d051      	beq.n	8008ae6 <_malloc_r+0xea>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	0029      	movs	r1, r5
 8008a46:	18e3      	adds	r3, r4, r3
 8008a48:	0030      	movs	r0, r6
 8008a4a:	9301      	str	r3, [sp, #4]
 8008a4c:	f000 fb5e 	bl	800910c <_sbrk_r>
 8008a50:	9b01      	ldr	r3, [sp, #4]
 8008a52:	4283      	cmp	r3, r0
 8008a54:	d147      	bne.n	8008ae6 <_malloc_r+0xea>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	0030      	movs	r0, r6
 8008a5a:	1aff      	subs	r7, r7, r3
 8008a5c:	0039      	movs	r1, r7
 8008a5e:	f7ff ffab 	bl	80089b8 <sbrk_aligned>
 8008a62:	3001      	adds	r0, #1
 8008a64:	d03f      	beq.n	8008ae6 <_malloc_r+0xea>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	19db      	adds	r3, r3, r7
 8008a6a:	6023      	str	r3, [r4, #0]
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d040      	beq.n	8008af6 <_malloc_r+0xfa>
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	42a2      	cmp	r2, r4
 8008a78:	d133      	bne.n	8008ae2 <_malloc_r+0xe6>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	605a      	str	r2, [r3, #4]
 8008a7e:	e014      	b.n	8008aaa <_malloc_r+0xae>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	dac5      	bge.n	8008a10 <_malloc_r+0x14>
 8008a84:	230c      	movs	r3, #12
 8008a86:	2500      	movs	r5, #0
 8008a88:	6033      	str	r3, [r6, #0]
 8008a8a:	0028      	movs	r0, r5
 8008a8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a8e:	6821      	ldr	r1, [r4, #0]
 8008a90:	1bc9      	subs	r1, r1, r7
 8008a92:	d420      	bmi.n	8008ad6 <_malloc_r+0xda>
 8008a94:	290b      	cmp	r1, #11
 8008a96:	d918      	bls.n	8008aca <_malloc_r+0xce>
 8008a98:	19e2      	adds	r2, r4, r7
 8008a9a:	6027      	str	r7, [r4, #0]
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d112      	bne.n	8008ac6 <_malloc_r+0xca>
 8008aa0:	9b00      	ldr	r3, [sp, #0]
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	6011      	str	r1, [r2, #0]
 8008aa8:	6053      	str	r3, [r2, #4]
 8008aaa:	0030      	movs	r0, r6
 8008aac:	0025      	movs	r5, r4
 8008aae:	f000 f82f 	bl	8008b10 <__malloc_unlock>
 8008ab2:	2207      	movs	r2, #7
 8008ab4:	350b      	adds	r5, #11
 8008ab6:	1d23      	adds	r3, r4, #4
 8008ab8:	4395      	bics	r5, r2
 8008aba:	1aea      	subs	r2, r5, r3
 8008abc:	429d      	cmp	r5, r3
 8008abe:	d0e4      	beq.n	8008a8a <_malloc_r+0x8e>
 8008ac0:	1b5b      	subs	r3, r3, r5
 8008ac2:	50a3      	str	r3, [r4, r2]
 8008ac4:	e7e1      	b.n	8008a8a <_malloc_r+0x8e>
 8008ac6:	605a      	str	r2, [r3, #4]
 8008ac8:	e7ec      	b.n	8008aa4 <_malloc_r+0xa8>
 8008aca:	6862      	ldr	r2, [r4, #4]
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	d1d5      	bne.n	8008a7c <_malloc_r+0x80>
 8008ad0:	9b00      	ldr	r3, [sp, #0]
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e7e9      	b.n	8008aaa <_malloc_r+0xae>
 8008ad6:	0023      	movs	r3, r4
 8008ad8:	6864      	ldr	r4, [r4, #4]
 8008ada:	e7a2      	b.n	8008a22 <_malloc_r+0x26>
 8008adc:	002c      	movs	r4, r5
 8008ade:	686d      	ldr	r5, [r5, #4]
 8008ae0:	e7ab      	b.n	8008a3a <_malloc_r+0x3e>
 8008ae2:	0013      	movs	r3, r2
 8008ae4:	e7c4      	b.n	8008a70 <_malloc_r+0x74>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	0030      	movs	r0, r6
 8008aea:	6033      	str	r3, [r6, #0]
 8008aec:	f000 f810 	bl	8008b10 <__malloc_unlock>
 8008af0:	e7cb      	b.n	8008a8a <_malloc_r+0x8e>
 8008af2:	6027      	str	r7, [r4, #0]
 8008af4:	e7d9      	b.n	8008aaa <_malloc_r+0xae>
 8008af6:	605b      	str	r3, [r3, #4]
 8008af8:	deff      	udf	#255	; 0xff
 8008afa:	46c0      	nop			; (mov r8, r8)
 8008afc:	2000054c 	.word	0x2000054c

08008b00 <__malloc_lock>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	4802      	ldr	r0, [pc, #8]	; (8008b0c <__malloc_lock+0xc>)
 8008b04:	f7ff ff0c 	bl	8008920 <__retarget_lock_acquire_recursive>
 8008b08:	bd10      	pop	{r4, pc}
 8008b0a:	46c0      	nop			; (mov r8, r8)
 8008b0c:	20000548 	.word	0x20000548

08008b10 <__malloc_unlock>:
 8008b10:	b510      	push	{r4, lr}
 8008b12:	4802      	ldr	r0, [pc, #8]	; (8008b1c <__malloc_unlock+0xc>)
 8008b14:	f7ff ff05 	bl	8008922 <__retarget_lock_release_recursive>
 8008b18:	bd10      	pop	{r4, pc}
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	20000548 	.word	0x20000548

08008b20 <__ssputs_r>:
 8008b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b22:	b085      	sub	sp, #20
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	9203      	str	r2, [sp, #12]
 8008b28:	688e      	ldr	r6, [r1, #8]
 8008b2a:	9a01      	ldr	r2, [sp, #4]
 8008b2c:	0007      	movs	r7, r0
 8008b2e:	000c      	movs	r4, r1
 8008b30:	680b      	ldr	r3, [r1, #0]
 8008b32:	4296      	cmp	r6, r2
 8008b34:	d831      	bhi.n	8008b9a <__ssputs_r+0x7a>
 8008b36:	898a      	ldrh	r2, [r1, #12]
 8008b38:	2190      	movs	r1, #144	; 0x90
 8008b3a:	00c9      	lsls	r1, r1, #3
 8008b3c:	420a      	tst	r2, r1
 8008b3e:	d029      	beq.n	8008b94 <__ssputs_r+0x74>
 8008b40:	2003      	movs	r0, #3
 8008b42:	6921      	ldr	r1, [r4, #16]
 8008b44:	1a5b      	subs	r3, r3, r1
 8008b46:	9302      	str	r3, [sp, #8]
 8008b48:	6963      	ldr	r3, [r4, #20]
 8008b4a:	4343      	muls	r3, r0
 8008b4c:	0fdd      	lsrs	r5, r3, #31
 8008b4e:	18ed      	adds	r5, r5, r3
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	9802      	ldr	r0, [sp, #8]
 8008b54:	3301      	adds	r3, #1
 8008b56:	181b      	adds	r3, r3, r0
 8008b58:	106d      	asrs	r5, r5, #1
 8008b5a:	42ab      	cmp	r3, r5
 8008b5c:	d900      	bls.n	8008b60 <__ssputs_r+0x40>
 8008b5e:	001d      	movs	r5, r3
 8008b60:	0552      	lsls	r2, r2, #21
 8008b62:	d529      	bpl.n	8008bb8 <__ssputs_r+0x98>
 8008b64:	0029      	movs	r1, r5
 8008b66:	0038      	movs	r0, r7
 8008b68:	f7ff ff48 	bl	80089fc <_malloc_r>
 8008b6c:	1e06      	subs	r6, r0, #0
 8008b6e:	d02d      	beq.n	8008bcc <__ssputs_r+0xac>
 8008b70:	9a02      	ldr	r2, [sp, #8]
 8008b72:	6921      	ldr	r1, [r4, #16]
 8008b74:	f000 fae7 	bl	8009146 <memcpy>
 8008b78:	89a2      	ldrh	r2, [r4, #12]
 8008b7a:	4b19      	ldr	r3, [pc, #100]	; (8008be0 <__ssputs_r+0xc0>)
 8008b7c:	401a      	ands	r2, r3
 8008b7e:	2380      	movs	r3, #128	; 0x80
 8008b80:	4313      	orrs	r3, r2
 8008b82:	81a3      	strh	r3, [r4, #12]
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	6126      	str	r6, [r4, #16]
 8008b88:	18f6      	adds	r6, r6, r3
 8008b8a:	6026      	str	r6, [r4, #0]
 8008b8c:	6165      	str	r5, [r4, #20]
 8008b8e:	9e01      	ldr	r6, [sp, #4]
 8008b90:	1aed      	subs	r5, r5, r3
 8008b92:	60a5      	str	r5, [r4, #8]
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	429e      	cmp	r6, r3
 8008b98:	d900      	bls.n	8008b9c <__ssputs_r+0x7c>
 8008b9a:	9e01      	ldr	r6, [sp, #4]
 8008b9c:	0032      	movs	r2, r6
 8008b9e:	9903      	ldr	r1, [sp, #12]
 8008ba0:	6820      	ldr	r0, [r4, #0]
 8008ba2:	f000 fa9f 	bl	80090e4 <memmove>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	68a3      	ldr	r3, [r4, #8]
 8008baa:	1b9b      	subs	r3, r3, r6
 8008bac:	60a3      	str	r3, [r4, #8]
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	199b      	adds	r3, r3, r6
 8008bb2:	6023      	str	r3, [r4, #0]
 8008bb4:	b005      	add	sp, #20
 8008bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb8:	002a      	movs	r2, r5
 8008bba:	0038      	movs	r0, r7
 8008bbc:	f000 facc 	bl	8009158 <_realloc_r>
 8008bc0:	1e06      	subs	r6, r0, #0
 8008bc2:	d1df      	bne.n	8008b84 <__ssputs_r+0x64>
 8008bc4:	0038      	movs	r0, r7
 8008bc6:	6921      	ldr	r1, [r4, #16]
 8008bc8:	f7ff feac 	bl	8008924 <_free_r>
 8008bcc:	230c      	movs	r3, #12
 8008bce:	2001      	movs	r0, #1
 8008bd0:	603b      	str	r3, [r7, #0]
 8008bd2:	89a2      	ldrh	r2, [r4, #12]
 8008bd4:	3334      	adds	r3, #52	; 0x34
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	81a3      	strh	r3, [r4, #12]
 8008bda:	4240      	negs	r0, r0
 8008bdc:	e7ea      	b.n	8008bb4 <__ssputs_r+0x94>
 8008bde:	46c0      	nop			; (mov r8, r8)
 8008be0:	fffffb7f 	.word	0xfffffb7f

08008be4 <_svfiprintf_r>:
 8008be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be6:	b0a1      	sub	sp, #132	; 0x84
 8008be8:	9003      	str	r0, [sp, #12]
 8008bea:	001d      	movs	r5, r3
 8008bec:	898b      	ldrh	r3, [r1, #12]
 8008bee:	000f      	movs	r7, r1
 8008bf0:	0016      	movs	r6, r2
 8008bf2:	061b      	lsls	r3, r3, #24
 8008bf4:	d511      	bpl.n	8008c1a <_svfiprintf_r+0x36>
 8008bf6:	690b      	ldr	r3, [r1, #16]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10e      	bne.n	8008c1a <_svfiprintf_r+0x36>
 8008bfc:	2140      	movs	r1, #64	; 0x40
 8008bfe:	f7ff fefd 	bl	80089fc <_malloc_r>
 8008c02:	6038      	str	r0, [r7, #0]
 8008c04:	6138      	str	r0, [r7, #16]
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d105      	bne.n	8008c16 <_svfiprintf_r+0x32>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	9a03      	ldr	r2, [sp, #12]
 8008c0e:	3801      	subs	r0, #1
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	b021      	add	sp, #132	; 0x84
 8008c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c16:	2340      	movs	r3, #64	; 0x40
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	ac08      	add	r4, sp, #32
 8008c1e:	6163      	str	r3, [r4, #20]
 8008c20:	3320      	adds	r3, #32
 8008c22:	7663      	strb	r3, [r4, #25]
 8008c24:	3310      	adds	r3, #16
 8008c26:	76a3      	strb	r3, [r4, #26]
 8008c28:	9507      	str	r5, [sp, #28]
 8008c2a:	0035      	movs	r5, r6
 8008c2c:	782b      	ldrb	r3, [r5, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <_svfiprintf_r+0x52>
 8008c32:	2b25      	cmp	r3, #37	; 0x25
 8008c34:	d148      	bne.n	8008cc8 <_svfiprintf_r+0xe4>
 8008c36:	1bab      	subs	r3, r5, r6
 8008c38:	9305      	str	r3, [sp, #20]
 8008c3a:	42b5      	cmp	r5, r6
 8008c3c:	d00b      	beq.n	8008c56 <_svfiprintf_r+0x72>
 8008c3e:	0032      	movs	r2, r6
 8008c40:	0039      	movs	r1, r7
 8008c42:	9803      	ldr	r0, [sp, #12]
 8008c44:	f7ff ff6c 	bl	8008b20 <__ssputs_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d100      	bne.n	8008c4e <_svfiprintf_r+0x6a>
 8008c4c:	e0af      	b.n	8008dae <_svfiprintf_r+0x1ca>
 8008c4e:	6963      	ldr	r3, [r4, #20]
 8008c50:	9a05      	ldr	r2, [sp, #20]
 8008c52:	189b      	adds	r3, r3, r2
 8008c54:	6163      	str	r3, [r4, #20]
 8008c56:	782b      	ldrb	r3, [r5, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d100      	bne.n	8008c5e <_svfiprintf_r+0x7a>
 8008c5c:	e0a7      	b.n	8008dae <_svfiprintf_r+0x1ca>
 8008c5e:	2201      	movs	r2, #1
 8008c60:	2300      	movs	r3, #0
 8008c62:	4252      	negs	r2, r2
 8008c64:	6062      	str	r2, [r4, #4]
 8008c66:	a904      	add	r1, sp, #16
 8008c68:	3254      	adds	r2, #84	; 0x54
 8008c6a:	1852      	adds	r2, r2, r1
 8008c6c:	1c6e      	adds	r6, r5, #1
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	60e3      	str	r3, [r4, #12]
 8008c72:	60a3      	str	r3, [r4, #8]
 8008c74:	7013      	strb	r3, [r2, #0]
 8008c76:	65a3      	str	r3, [r4, #88]	; 0x58
 8008c78:	4b55      	ldr	r3, [pc, #340]	; (8008dd0 <_svfiprintf_r+0x1ec>)
 8008c7a:	2205      	movs	r2, #5
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	7831      	ldrb	r1, [r6, #0]
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	f000 fa55 	bl	8009130 <memchr>
 8008c86:	1c75      	adds	r5, r6, #1
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d11f      	bne.n	8008ccc <_svfiprintf_r+0xe8>
 8008c8c:	6822      	ldr	r2, [r4, #0]
 8008c8e:	06d3      	lsls	r3, r2, #27
 8008c90:	d504      	bpl.n	8008c9c <_svfiprintf_r+0xb8>
 8008c92:	2353      	movs	r3, #83	; 0x53
 8008c94:	a904      	add	r1, sp, #16
 8008c96:	185b      	adds	r3, r3, r1
 8008c98:	2120      	movs	r1, #32
 8008c9a:	7019      	strb	r1, [r3, #0]
 8008c9c:	0713      	lsls	r3, r2, #28
 8008c9e:	d504      	bpl.n	8008caa <_svfiprintf_r+0xc6>
 8008ca0:	2353      	movs	r3, #83	; 0x53
 8008ca2:	a904      	add	r1, sp, #16
 8008ca4:	185b      	adds	r3, r3, r1
 8008ca6:	212b      	movs	r1, #43	; 0x2b
 8008ca8:	7019      	strb	r1, [r3, #0]
 8008caa:	7833      	ldrb	r3, [r6, #0]
 8008cac:	2b2a      	cmp	r3, #42	; 0x2a
 8008cae:	d016      	beq.n	8008cde <_svfiprintf_r+0xfa>
 8008cb0:	0035      	movs	r5, r6
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	200a      	movs	r0, #10
 8008cb6:	68e3      	ldr	r3, [r4, #12]
 8008cb8:	782a      	ldrb	r2, [r5, #0]
 8008cba:	1c6e      	adds	r6, r5, #1
 8008cbc:	3a30      	subs	r2, #48	; 0x30
 8008cbe:	2a09      	cmp	r2, #9
 8008cc0:	d94e      	bls.n	8008d60 <_svfiprintf_r+0x17c>
 8008cc2:	2900      	cmp	r1, #0
 8008cc4:	d111      	bne.n	8008cea <_svfiprintf_r+0x106>
 8008cc6:	e017      	b.n	8008cf8 <_svfiprintf_r+0x114>
 8008cc8:	3501      	adds	r5, #1
 8008cca:	e7af      	b.n	8008c2c <_svfiprintf_r+0x48>
 8008ccc:	9b05      	ldr	r3, [sp, #20]
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	1ac0      	subs	r0, r0, r3
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4083      	lsls	r3, r0
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	002e      	movs	r6, r5
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	e7cc      	b.n	8008c78 <_svfiprintf_r+0x94>
 8008cde:	9b07      	ldr	r3, [sp, #28]
 8008ce0:	1d19      	adds	r1, r3, #4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	9107      	str	r1, [sp, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	db01      	blt.n	8008cee <_svfiprintf_r+0x10a>
 8008cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cec:	e004      	b.n	8008cf8 <_svfiprintf_r+0x114>
 8008cee:	425b      	negs	r3, r3
 8008cf0:	60e3      	str	r3, [r4, #12]
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	782b      	ldrb	r3, [r5, #0]
 8008cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8008cfc:	d10a      	bne.n	8008d14 <_svfiprintf_r+0x130>
 8008cfe:	786b      	ldrb	r3, [r5, #1]
 8008d00:	2b2a      	cmp	r3, #42	; 0x2a
 8008d02:	d135      	bne.n	8008d70 <_svfiprintf_r+0x18c>
 8008d04:	9b07      	ldr	r3, [sp, #28]
 8008d06:	3502      	adds	r5, #2
 8008d08:	1d1a      	adds	r2, r3, #4
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	9207      	str	r2, [sp, #28]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	db2b      	blt.n	8008d6a <_svfiprintf_r+0x186>
 8008d12:	9309      	str	r3, [sp, #36]	; 0x24
 8008d14:	4e2f      	ldr	r6, [pc, #188]	; (8008dd4 <_svfiprintf_r+0x1f0>)
 8008d16:	2203      	movs	r2, #3
 8008d18:	0030      	movs	r0, r6
 8008d1a:	7829      	ldrb	r1, [r5, #0]
 8008d1c:	f000 fa08 	bl	8009130 <memchr>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d006      	beq.n	8008d32 <_svfiprintf_r+0x14e>
 8008d24:	2340      	movs	r3, #64	; 0x40
 8008d26:	1b80      	subs	r0, r0, r6
 8008d28:	4083      	lsls	r3, r0
 8008d2a:	6822      	ldr	r2, [r4, #0]
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	7829      	ldrb	r1, [r5, #0]
 8008d34:	2206      	movs	r2, #6
 8008d36:	4828      	ldr	r0, [pc, #160]	; (8008dd8 <_svfiprintf_r+0x1f4>)
 8008d38:	1c6e      	adds	r6, r5, #1
 8008d3a:	7621      	strb	r1, [r4, #24]
 8008d3c:	f000 f9f8 	bl	8009130 <memchr>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d03c      	beq.n	8008dbe <_svfiprintf_r+0x1da>
 8008d44:	4b25      	ldr	r3, [pc, #148]	; (8008ddc <_svfiprintf_r+0x1f8>)
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d125      	bne.n	8008d96 <_svfiprintf_r+0x1b2>
 8008d4a:	2207      	movs	r2, #7
 8008d4c:	9b07      	ldr	r3, [sp, #28]
 8008d4e:	3307      	adds	r3, #7
 8008d50:	4393      	bics	r3, r2
 8008d52:	3308      	adds	r3, #8
 8008d54:	9307      	str	r3, [sp, #28]
 8008d56:	6963      	ldr	r3, [r4, #20]
 8008d58:	9a04      	ldr	r2, [sp, #16]
 8008d5a:	189b      	adds	r3, r3, r2
 8008d5c:	6163      	str	r3, [r4, #20]
 8008d5e:	e764      	b.n	8008c2a <_svfiprintf_r+0x46>
 8008d60:	4343      	muls	r3, r0
 8008d62:	0035      	movs	r5, r6
 8008d64:	2101      	movs	r1, #1
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	e7a6      	b.n	8008cb8 <_svfiprintf_r+0xd4>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	425b      	negs	r3, r3
 8008d6e:	e7d0      	b.n	8008d12 <_svfiprintf_r+0x12e>
 8008d70:	2300      	movs	r3, #0
 8008d72:	200a      	movs	r0, #10
 8008d74:	001a      	movs	r2, r3
 8008d76:	3501      	adds	r5, #1
 8008d78:	6063      	str	r3, [r4, #4]
 8008d7a:	7829      	ldrb	r1, [r5, #0]
 8008d7c:	1c6e      	adds	r6, r5, #1
 8008d7e:	3930      	subs	r1, #48	; 0x30
 8008d80:	2909      	cmp	r1, #9
 8008d82:	d903      	bls.n	8008d8c <_svfiprintf_r+0x1a8>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0c5      	beq.n	8008d14 <_svfiprintf_r+0x130>
 8008d88:	9209      	str	r2, [sp, #36]	; 0x24
 8008d8a:	e7c3      	b.n	8008d14 <_svfiprintf_r+0x130>
 8008d8c:	4342      	muls	r2, r0
 8008d8e:	0035      	movs	r5, r6
 8008d90:	2301      	movs	r3, #1
 8008d92:	1852      	adds	r2, r2, r1
 8008d94:	e7f1      	b.n	8008d7a <_svfiprintf_r+0x196>
 8008d96:	aa07      	add	r2, sp, #28
 8008d98:	9200      	str	r2, [sp, #0]
 8008d9a:	0021      	movs	r1, r4
 8008d9c:	003a      	movs	r2, r7
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <_svfiprintf_r+0x1fc>)
 8008da0:	9803      	ldr	r0, [sp, #12]
 8008da2:	e000      	b.n	8008da6 <_svfiprintf_r+0x1c2>
 8008da4:	bf00      	nop
 8008da6:	9004      	str	r0, [sp, #16]
 8008da8:	9b04      	ldr	r3, [sp, #16]
 8008daa:	3301      	adds	r3, #1
 8008dac:	d1d3      	bne.n	8008d56 <_svfiprintf_r+0x172>
 8008dae:	89bb      	ldrh	r3, [r7, #12]
 8008db0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008db2:	065b      	lsls	r3, r3, #25
 8008db4:	d400      	bmi.n	8008db8 <_svfiprintf_r+0x1d4>
 8008db6:	e72c      	b.n	8008c12 <_svfiprintf_r+0x2e>
 8008db8:	2001      	movs	r0, #1
 8008dba:	4240      	negs	r0, r0
 8008dbc:	e729      	b.n	8008c12 <_svfiprintf_r+0x2e>
 8008dbe:	aa07      	add	r2, sp, #28
 8008dc0:	9200      	str	r2, [sp, #0]
 8008dc2:	0021      	movs	r1, r4
 8008dc4:	003a      	movs	r2, r7
 8008dc6:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <_svfiprintf_r+0x1fc>)
 8008dc8:	9803      	ldr	r0, [sp, #12]
 8008dca:	f000 f87b 	bl	8008ec4 <_printf_i>
 8008dce:	e7ea      	b.n	8008da6 <_svfiprintf_r+0x1c2>
 8008dd0:	0800947c 	.word	0x0800947c
 8008dd4:	08009482 	.word	0x08009482
 8008dd8:	08009486 	.word	0x08009486
 8008ddc:	00000000 	.word	0x00000000
 8008de0:	08008b21 	.word	0x08008b21

08008de4 <_printf_common>:
 8008de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008de6:	0016      	movs	r6, r2
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	688a      	ldr	r2, [r1, #8]
 8008dec:	690b      	ldr	r3, [r1, #16]
 8008dee:	000c      	movs	r4, r1
 8008df0:	9000      	str	r0, [sp, #0]
 8008df2:	4293      	cmp	r3, r2
 8008df4:	da00      	bge.n	8008df8 <_printf_common+0x14>
 8008df6:	0013      	movs	r3, r2
 8008df8:	0022      	movs	r2, r4
 8008dfa:	6033      	str	r3, [r6, #0]
 8008dfc:	3243      	adds	r2, #67	; 0x43
 8008dfe:	7812      	ldrb	r2, [r2, #0]
 8008e00:	2a00      	cmp	r2, #0
 8008e02:	d001      	beq.n	8008e08 <_printf_common+0x24>
 8008e04:	3301      	adds	r3, #1
 8008e06:	6033      	str	r3, [r6, #0]
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	069b      	lsls	r3, r3, #26
 8008e0c:	d502      	bpl.n	8008e14 <_printf_common+0x30>
 8008e0e:	6833      	ldr	r3, [r6, #0]
 8008e10:	3302      	adds	r3, #2
 8008e12:	6033      	str	r3, [r6, #0]
 8008e14:	6822      	ldr	r2, [r4, #0]
 8008e16:	2306      	movs	r3, #6
 8008e18:	0015      	movs	r5, r2
 8008e1a:	401d      	ands	r5, r3
 8008e1c:	421a      	tst	r2, r3
 8008e1e:	d027      	beq.n	8008e70 <_printf_common+0x8c>
 8008e20:	0023      	movs	r3, r4
 8008e22:	3343      	adds	r3, #67	; 0x43
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	1e5a      	subs	r2, r3, #1
 8008e28:	4193      	sbcs	r3, r2
 8008e2a:	6822      	ldr	r2, [r4, #0]
 8008e2c:	0692      	lsls	r2, r2, #26
 8008e2e:	d430      	bmi.n	8008e92 <_printf_common+0xae>
 8008e30:	0022      	movs	r2, r4
 8008e32:	9901      	ldr	r1, [sp, #4]
 8008e34:	9800      	ldr	r0, [sp, #0]
 8008e36:	9d08      	ldr	r5, [sp, #32]
 8008e38:	3243      	adds	r2, #67	; 0x43
 8008e3a:	47a8      	blx	r5
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d025      	beq.n	8008e8c <_printf_common+0xa8>
 8008e40:	2206      	movs	r2, #6
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	2500      	movs	r5, #0
 8008e46:	4013      	ands	r3, r2
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d105      	bne.n	8008e58 <_printf_common+0x74>
 8008e4c:	6833      	ldr	r3, [r6, #0]
 8008e4e:	68e5      	ldr	r5, [r4, #12]
 8008e50:	1aed      	subs	r5, r5, r3
 8008e52:	43eb      	mvns	r3, r5
 8008e54:	17db      	asrs	r3, r3, #31
 8008e56:	401d      	ands	r5, r3
 8008e58:	68a3      	ldr	r3, [r4, #8]
 8008e5a:	6922      	ldr	r2, [r4, #16]
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	dd01      	ble.n	8008e64 <_printf_common+0x80>
 8008e60:	1a9b      	subs	r3, r3, r2
 8008e62:	18ed      	adds	r5, r5, r3
 8008e64:	2600      	movs	r6, #0
 8008e66:	42b5      	cmp	r5, r6
 8008e68:	d120      	bne.n	8008eac <_printf_common+0xc8>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	e010      	b.n	8008e90 <_printf_common+0xac>
 8008e6e:	3501      	adds	r5, #1
 8008e70:	68e3      	ldr	r3, [r4, #12]
 8008e72:	6832      	ldr	r2, [r6, #0]
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	42ab      	cmp	r3, r5
 8008e78:	ddd2      	ble.n	8008e20 <_printf_common+0x3c>
 8008e7a:	0022      	movs	r2, r4
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	9901      	ldr	r1, [sp, #4]
 8008e80:	9800      	ldr	r0, [sp, #0]
 8008e82:	9f08      	ldr	r7, [sp, #32]
 8008e84:	3219      	adds	r2, #25
 8008e86:	47b8      	blx	r7
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d1f0      	bne.n	8008e6e <_printf_common+0x8a>
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	4240      	negs	r0, r0
 8008e90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e92:	2030      	movs	r0, #48	; 0x30
 8008e94:	18e1      	adds	r1, r4, r3
 8008e96:	3143      	adds	r1, #67	; 0x43
 8008e98:	7008      	strb	r0, [r1, #0]
 8008e9a:	0021      	movs	r1, r4
 8008e9c:	1c5a      	adds	r2, r3, #1
 8008e9e:	3145      	adds	r1, #69	; 0x45
 8008ea0:	7809      	ldrb	r1, [r1, #0]
 8008ea2:	18a2      	adds	r2, r4, r2
 8008ea4:	3243      	adds	r2, #67	; 0x43
 8008ea6:	3302      	adds	r3, #2
 8008ea8:	7011      	strb	r1, [r2, #0]
 8008eaa:	e7c1      	b.n	8008e30 <_printf_common+0x4c>
 8008eac:	0022      	movs	r2, r4
 8008eae:	2301      	movs	r3, #1
 8008eb0:	9901      	ldr	r1, [sp, #4]
 8008eb2:	9800      	ldr	r0, [sp, #0]
 8008eb4:	9f08      	ldr	r7, [sp, #32]
 8008eb6:	321a      	adds	r2, #26
 8008eb8:	47b8      	blx	r7
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d0e6      	beq.n	8008e8c <_printf_common+0xa8>
 8008ebe:	3601      	adds	r6, #1
 8008ec0:	e7d1      	b.n	8008e66 <_printf_common+0x82>
	...

08008ec4 <_printf_i>:
 8008ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec6:	b08b      	sub	sp, #44	; 0x2c
 8008ec8:	9206      	str	r2, [sp, #24]
 8008eca:	000a      	movs	r2, r1
 8008ecc:	3243      	adds	r2, #67	; 0x43
 8008ece:	9307      	str	r3, [sp, #28]
 8008ed0:	9005      	str	r0, [sp, #20]
 8008ed2:	9204      	str	r2, [sp, #16]
 8008ed4:	7e0a      	ldrb	r2, [r1, #24]
 8008ed6:	000c      	movs	r4, r1
 8008ed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008eda:	2a78      	cmp	r2, #120	; 0x78
 8008edc:	d809      	bhi.n	8008ef2 <_printf_i+0x2e>
 8008ede:	2a62      	cmp	r2, #98	; 0x62
 8008ee0:	d80b      	bhi.n	8008efa <_printf_i+0x36>
 8008ee2:	2a00      	cmp	r2, #0
 8008ee4:	d100      	bne.n	8008ee8 <_printf_i+0x24>
 8008ee6:	e0be      	b.n	8009066 <_printf_i+0x1a2>
 8008ee8:	497c      	ldr	r1, [pc, #496]	; (80090dc <_printf_i+0x218>)
 8008eea:	9103      	str	r1, [sp, #12]
 8008eec:	2a58      	cmp	r2, #88	; 0x58
 8008eee:	d100      	bne.n	8008ef2 <_printf_i+0x2e>
 8008ef0:	e093      	b.n	800901a <_printf_i+0x156>
 8008ef2:	0026      	movs	r6, r4
 8008ef4:	3642      	adds	r6, #66	; 0x42
 8008ef6:	7032      	strb	r2, [r6, #0]
 8008ef8:	e022      	b.n	8008f40 <_printf_i+0x7c>
 8008efa:	0010      	movs	r0, r2
 8008efc:	3863      	subs	r0, #99	; 0x63
 8008efe:	2815      	cmp	r0, #21
 8008f00:	d8f7      	bhi.n	8008ef2 <_printf_i+0x2e>
 8008f02:	f7f7 f911 	bl	8000128 <__gnu_thumb1_case_shi>
 8008f06:	0016      	.short	0x0016
 8008f08:	fff6001f 	.word	0xfff6001f
 8008f0c:	fff6fff6 	.word	0xfff6fff6
 8008f10:	001ffff6 	.word	0x001ffff6
 8008f14:	fff6fff6 	.word	0xfff6fff6
 8008f18:	fff6fff6 	.word	0xfff6fff6
 8008f1c:	003600a3 	.word	0x003600a3
 8008f20:	fff60083 	.word	0xfff60083
 8008f24:	00b4fff6 	.word	0x00b4fff6
 8008f28:	0036fff6 	.word	0x0036fff6
 8008f2c:	fff6fff6 	.word	0xfff6fff6
 8008f30:	0087      	.short	0x0087
 8008f32:	0026      	movs	r6, r4
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	3642      	adds	r6, #66	; 0x42
 8008f38:	1d11      	adds	r1, r2, #4
 8008f3a:	6019      	str	r1, [r3, #0]
 8008f3c:	6813      	ldr	r3, [r2, #0]
 8008f3e:	7033      	strb	r3, [r6, #0]
 8008f40:	2301      	movs	r3, #1
 8008f42:	e0a2      	b.n	800908a <_printf_i+0x1c6>
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	6809      	ldr	r1, [r1, #0]
 8008f48:	1d02      	adds	r2, r0, #4
 8008f4a:	060d      	lsls	r5, r1, #24
 8008f4c:	d50b      	bpl.n	8008f66 <_printf_i+0xa2>
 8008f4e:	6805      	ldr	r5, [r0, #0]
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	da03      	bge.n	8008f5e <_printf_i+0x9a>
 8008f56:	232d      	movs	r3, #45	; 0x2d
 8008f58:	9a04      	ldr	r2, [sp, #16]
 8008f5a:	426d      	negs	r5, r5
 8008f5c:	7013      	strb	r3, [r2, #0]
 8008f5e:	4b5f      	ldr	r3, [pc, #380]	; (80090dc <_printf_i+0x218>)
 8008f60:	270a      	movs	r7, #10
 8008f62:	9303      	str	r3, [sp, #12]
 8008f64:	e01b      	b.n	8008f9e <_printf_i+0xda>
 8008f66:	6805      	ldr	r5, [r0, #0]
 8008f68:	601a      	str	r2, [r3, #0]
 8008f6a:	0649      	lsls	r1, r1, #25
 8008f6c:	d5f1      	bpl.n	8008f52 <_printf_i+0x8e>
 8008f6e:	b22d      	sxth	r5, r5
 8008f70:	e7ef      	b.n	8008f52 <_printf_i+0x8e>
 8008f72:	680d      	ldr	r5, [r1, #0]
 8008f74:	6819      	ldr	r1, [r3, #0]
 8008f76:	1d08      	adds	r0, r1, #4
 8008f78:	6018      	str	r0, [r3, #0]
 8008f7a:	062e      	lsls	r6, r5, #24
 8008f7c:	d501      	bpl.n	8008f82 <_printf_i+0xbe>
 8008f7e:	680d      	ldr	r5, [r1, #0]
 8008f80:	e003      	b.n	8008f8a <_printf_i+0xc6>
 8008f82:	066d      	lsls	r5, r5, #25
 8008f84:	d5fb      	bpl.n	8008f7e <_printf_i+0xba>
 8008f86:	680d      	ldr	r5, [r1, #0]
 8008f88:	b2ad      	uxth	r5, r5
 8008f8a:	4b54      	ldr	r3, [pc, #336]	; (80090dc <_printf_i+0x218>)
 8008f8c:	2708      	movs	r7, #8
 8008f8e:	9303      	str	r3, [sp, #12]
 8008f90:	2a6f      	cmp	r2, #111	; 0x6f
 8008f92:	d000      	beq.n	8008f96 <_printf_i+0xd2>
 8008f94:	3702      	adds	r7, #2
 8008f96:	0023      	movs	r3, r4
 8008f98:	2200      	movs	r2, #0
 8008f9a:	3343      	adds	r3, #67	; 0x43
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	6863      	ldr	r3, [r4, #4]
 8008fa0:	60a3      	str	r3, [r4, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	db03      	blt.n	8008fae <_printf_i+0xea>
 8008fa6:	2104      	movs	r1, #4
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	438a      	bics	r2, r1
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	d102      	bne.n	8008fb8 <_printf_i+0xf4>
 8008fb2:	9e04      	ldr	r6, [sp, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00c      	beq.n	8008fd2 <_printf_i+0x10e>
 8008fb8:	9e04      	ldr	r6, [sp, #16]
 8008fba:	0028      	movs	r0, r5
 8008fbc:	0039      	movs	r1, r7
 8008fbe:	f7f7 f943 	bl	8000248 <__aeabi_uidivmod>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	3e01      	subs	r6, #1
 8008fc6:	5c5b      	ldrb	r3, [r3, r1]
 8008fc8:	7033      	strb	r3, [r6, #0]
 8008fca:	002b      	movs	r3, r5
 8008fcc:	0005      	movs	r5, r0
 8008fce:	429f      	cmp	r7, r3
 8008fd0:	d9f3      	bls.n	8008fba <_printf_i+0xf6>
 8008fd2:	2f08      	cmp	r7, #8
 8008fd4:	d109      	bne.n	8008fea <_printf_i+0x126>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	07db      	lsls	r3, r3, #31
 8008fda:	d506      	bpl.n	8008fea <_printf_i+0x126>
 8008fdc:	6862      	ldr	r2, [r4, #4]
 8008fde:	6923      	ldr	r3, [r4, #16]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	dc02      	bgt.n	8008fea <_printf_i+0x126>
 8008fe4:	2330      	movs	r3, #48	; 0x30
 8008fe6:	3e01      	subs	r6, #1
 8008fe8:	7033      	strb	r3, [r6, #0]
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	1b9b      	subs	r3, r3, r6
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	9b07      	ldr	r3, [sp, #28]
 8008ff2:	0021      	movs	r1, r4
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	9805      	ldr	r0, [sp, #20]
 8008ff8:	9b06      	ldr	r3, [sp, #24]
 8008ffa:	aa09      	add	r2, sp, #36	; 0x24
 8008ffc:	f7ff fef2 	bl	8008de4 <_printf_common>
 8009000:	3001      	adds	r0, #1
 8009002:	d147      	bne.n	8009094 <_printf_i+0x1d0>
 8009004:	2001      	movs	r0, #1
 8009006:	4240      	negs	r0, r0
 8009008:	b00b      	add	sp, #44	; 0x2c
 800900a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800900c:	2220      	movs	r2, #32
 800900e:	6809      	ldr	r1, [r1, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	2278      	movs	r2, #120	; 0x78
 8009016:	4932      	ldr	r1, [pc, #200]	; (80090e0 <_printf_i+0x21c>)
 8009018:	9103      	str	r1, [sp, #12]
 800901a:	0021      	movs	r1, r4
 800901c:	3145      	adds	r1, #69	; 0x45
 800901e:	700a      	strb	r2, [r1, #0]
 8009020:	6819      	ldr	r1, [r3, #0]
 8009022:	6822      	ldr	r2, [r4, #0]
 8009024:	c920      	ldmia	r1!, {r5}
 8009026:	0610      	lsls	r0, r2, #24
 8009028:	d402      	bmi.n	8009030 <_printf_i+0x16c>
 800902a:	0650      	lsls	r0, r2, #25
 800902c:	d500      	bpl.n	8009030 <_printf_i+0x16c>
 800902e:	b2ad      	uxth	r5, r5
 8009030:	6019      	str	r1, [r3, #0]
 8009032:	07d3      	lsls	r3, r2, #31
 8009034:	d502      	bpl.n	800903c <_printf_i+0x178>
 8009036:	2320      	movs	r3, #32
 8009038:	4313      	orrs	r3, r2
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	2710      	movs	r7, #16
 800903e:	2d00      	cmp	r5, #0
 8009040:	d1a9      	bne.n	8008f96 <_printf_i+0xd2>
 8009042:	2220      	movs	r2, #32
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	4393      	bics	r3, r2
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	e7a4      	b.n	8008f96 <_printf_i+0xd2>
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	680d      	ldr	r5, [r1, #0]
 8009050:	1d10      	adds	r0, r2, #4
 8009052:	6949      	ldr	r1, [r1, #20]
 8009054:	6018      	str	r0, [r3, #0]
 8009056:	6813      	ldr	r3, [r2, #0]
 8009058:	062e      	lsls	r6, r5, #24
 800905a:	d501      	bpl.n	8009060 <_printf_i+0x19c>
 800905c:	6019      	str	r1, [r3, #0]
 800905e:	e002      	b.n	8009066 <_printf_i+0x1a2>
 8009060:	066d      	lsls	r5, r5, #25
 8009062:	d5fb      	bpl.n	800905c <_printf_i+0x198>
 8009064:	8019      	strh	r1, [r3, #0]
 8009066:	2300      	movs	r3, #0
 8009068:	9e04      	ldr	r6, [sp, #16]
 800906a:	6123      	str	r3, [r4, #16]
 800906c:	e7c0      	b.n	8008ff0 <_printf_i+0x12c>
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	1d11      	adds	r1, r2, #4
 8009072:	6019      	str	r1, [r3, #0]
 8009074:	6816      	ldr	r6, [r2, #0]
 8009076:	2100      	movs	r1, #0
 8009078:	0030      	movs	r0, r6
 800907a:	6862      	ldr	r2, [r4, #4]
 800907c:	f000 f858 	bl	8009130 <memchr>
 8009080:	2800      	cmp	r0, #0
 8009082:	d001      	beq.n	8009088 <_printf_i+0x1c4>
 8009084:	1b80      	subs	r0, r0, r6
 8009086:	6060      	str	r0, [r4, #4]
 8009088:	6863      	ldr	r3, [r4, #4]
 800908a:	6123      	str	r3, [r4, #16]
 800908c:	2300      	movs	r3, #0
 800908e:	9a04      	ldr	r2, [sp, #16]
 8009090:	7013      	strb	r3, [r2, #0]
 8009092:	e7ad      	b.n	8008ff0 <_printf_i+0x12c>
 8009094:	0032      	movs	r2, r6
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	9906      	ldr	r1, [sp, #24]
 800909a:	9805      	ldr	r0, [sp, #20]
 800909c:	9d07      	ldr	r5, [sp, #28]
 800909e:	47a8      	blx	r5
 80090a0:	3001      	adds	r0, #1
 80090a2:	d0af      	beq.n	8009004 <_printf_i+0x140>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	079b      	lsls	r3, r3, #30
 80090a8:	d415      	bmi.n	80090d6 <_printf_i+0x212>
 80090aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ac:	68e0      	ldr	r0, [r4, #12]
 80090ae:	4298      	cmp	r0, r3
 80090b0:	daaa      	bge.n	8009008 <_printf_i+0x144>
 80090b2:	0018      	movs	r0, r3
 80090b4:	e7a8      	b.n	8009008 <_printf_i+0x144>
 80090b6:	0022      	movs	r2, r4
 80090b8:	2301      	movs	r3, #1
 80090ba:	9906      	ldr	r1, [sp, #24]
 80090bc:	9805      	ldr	r0, [sp, #20]
 80090be:	9e07      	ldr	r6, [sp, #28]
 80090c0:	3219      	adds	r2, #25
 80090c2:	47b0      	blx	r6
 80090c4:	3001      	adds	r0, #1
 80090c6:	d09d      	beq.n	8009004 <_printf_i+0x140>
 80090c8:	3501      	adds	r5, #1
 80090ca:	68e3      	ldr	r3, [r4, #12]
 80090cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	42ab      	cmp	r3, r5
 80090d2:	dcf0      	bgt.n	80090b6 <_printf_i+0x1f2>
 80090d4:	e7e9      	b.n	80090aa <_printf_i+0x1e6>
 80090d6:	2500      	movs	r5, #0
 80090d8:	e7f7      	b.n	80090ca <_printf_i+0x206>
 80090da:	46c0      	nop			; (mov r8, r8)
 80090dc:	0800948d 	.word	0x0800948d
 80090e0:	0800949e 	.word	0x0800949e

080090e4 <memmove>:
 80090e4:	b510      	push	{r4, lr}
 80090e6:	4288      	cmp	r0, r1
 80090e8:	d902      	bls.n	80090f0 <memmove+0xc>
 80090ea:	188b      	adds	r3, r1, r2
 80090ec:	4298      	cmp	r0, r3
 80090ee:	d303      	bcc.n	80090f8 <memmove+0x14>
 80090f0:	2300      	movs	r3, #0
 80090f2:	e007      	b.n	8009104 <memmove+0x20>
 80090f4:	5c8b      	ldrb	r3, [r1, r2]
 80090f6:	5483      	strb	r3, [r0, r2]
 80090f8:	3a01      	subs	r2, #1
 80090fa:	d2fb      	bcs.n	80090f4 <memmove+0x10>
 80090fc:	bd10      	pop	{r4, pc}
 80090fe:	5ccc      	ldrb	r4, [r1, r3]
 8009100:	54c4      	strb	r4, [r0, r3]
 8009102:	3301      	adds	r3, #1
 8009104:	429a      	cmp	r2, r3
 8009106:	d1fa      	bne.n	80090fe <memmove+0x1a>
 8009108:	e7f8      	b.n	80090fc <memmove+0x18>
	...

0800910c <_sbrk_r>:
 800910c:	2300      	movs	r3, #0
 800910e:	b570      	push	{r4, r5, r6, lr}
 8009110:	4d06      	ldr	r5, [pc, #24]	; (800912c <_sbrk_r+0x20>)
 8009112:	0004      	movs	r4, r0
 8009114:	0008      	movs	r0, r1
 8009116:	602b      	str	r3, [r5, #0]
 8009118:	f7f8 fdf0 	bl	8001cfc <_sbrk>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d103      	bne.n	8009128 <_sbrk_r+0x1c>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d000      	beq.n	8009128 <_sbrk_r+0x1c>
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	bd70      	pop	{r4, r5, r6, pc}
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	20000544 	.word	0x20000544

08009130 <memchr>:
 8009130:	b2c9      	uxtb	r1, r1
 8009132:	1882      	adds	r2, r0, r2
 8009134:	4290      	cmp	r0, r2
 8009136:	d101      	bne.n	800913c <memchr+0xc>
 8009138:	2000      	movs	r0, #0
 800913a:	4770      	bx	lr
 800913c:	7803      	ldrb	r3, [r0, #0]
 800913e:	428b      	cmp	r3, r1
 8009140:	d0fb      	beq.n	800913a <memchr+0xa>
 8009142:	3001      	adds	r0, #1
 8009144:	e7f6      	b.n	8009134 <memchr+0x4>

08009146 <memcpy>:
 8009146:	2300      	movs	r3, #0
 8009148:	b510      	push	{r4, lr}
 800914a:	429a      	cmp	r2, r3
 800914c:	d100      	bne.n	8009150 <memcpy+0xa>
 800914e:	bd10      	pop	{r4, pc}
 8009150:	5ccc      	ldrb	r4, [r1, r3]
 8009152:	54c4      	strb	r4, [r0, r3]
 8009154:	3301      	adds	r3, #1
 8009156:	e7f8      	b.n	800914a <memcpy+0x4>

08009158 <_realloc_r>:
 8009158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800915a:	0007      	movs	r7, r0
 800915c:	000e      	movs	r6, r1
 800915e:	0014      	movs	r4, r2
 8009160:	2900      	cmp	r1, #0
 8009162:	d105      	bne.n	8009170 <_realloc_r+0x18>
 8009164:	0011      	movs	r1, r2
 8009166:	f7ff fc49 	bl	80089fc <_malloc_r>
 800916a:	0005      	movs	r5, r0
 800916c:	0028      	movs	r0, r5
 800916e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009170:	2a00      	cmp	r2, #0
 8009172:	d103      	bne.n	800917c <_realloc_r+0x24>
 8009174:	f7ff fbd6 	bl	8008924 <_free_r>
 8009178:	0025      	movs	r5, r4
 800917a:	e7f7      	b.n	800916c <_realloc_r+0x14>
 800917c:	f000 f81b 	bl	80091b6 <_malloc_usable_size_r>
 8009180:	9001      	str	r0, [sp, #4]
 8009182:	4284      	cmp	r4, r0
 8009184:	d803      	bhi.n	800918e <_realloc_r+0x36>
 8009186:	0035      	movs	r5, r6
 8009188:	0843      	lsrs	r3, r0, #1
 800918a:	42a3      	cmp	r3, r4
 800918c:	d3ee      	bcc.n	800916c <_realloc_r+0x14>
 800918e:	0021      	movs	r1, r4
 8009190:	0038      	movs	r0, r7
 8009192:	f7ff fc33 	bl	80089fc <_malloc_r>
 8009196:	1e05      	subs	r5, r0, #0
 8009198:	d0e8      	beq.n	800916c <_realloc_r+0x14>
 800919a:	9b01      	ldr	r3, [sp, #4]
 800919c:	0022      	movs	r2, r4
 800919e:	429c      	cmp	r4, r3
 80091a0:	d900      	bls.n	80091a4 <_realloc_r+0x4c>
 80091a2:	001a      	movs	r2, r3
 80091a4:	0031      	movs	r1, r6
 80091a6:	0028      	movs	r0, r5
 80091a8:	f7ff ffcd 	bl	8009146 <memcpy>
 80091ac:	0031      	movs	r1, r6
 80091ae:	0038      	movs	r0, r7
 80091b0:	f7ff fbb8 	bl	8008924 <_free_r>
 80091b4:	e7da      	b.n	800916c <_realloc_r+0x14>

080091b6 <_malloc_usable_size_r>:
 80091b6:	1f0b      	subs	r3, r1, #4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	1f18      	subs	r0, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	da01      	bge.n	80091c4 <_malloc_usable_size_r+0xe>
 80091c0:	580b      	ldr	r3, [r1, r0]
 80091c2:	18c0      	adds	r0, r0, r3
 80091c4:	4770      	bx	lr
	...

080091c8 <_init>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr

080091d4 <_fini>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	46c0      	nop			; (mov r8, r8)
 80091d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091da:	bc08      	pop	{r3}
 80091dc:	469e      	mov	lr, r3
 80091de:	4770      	bx	lr
