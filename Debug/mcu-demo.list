
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08008c84  08008c84  00018c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f54  08008f54  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008f54  08008f54  00018f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f5c  08008f5c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f5c  08008f5c  00018f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f60  08008f60  00018f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  20000068  08008fcc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08008fcc  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017bd3  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f82  00000000  00000000  00037ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  0003ac28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a6  00000000  00000000  0003c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b179  00000000  00000000  0003d1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a037  00000000  00000000  00058377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aef0a  00000000  00000000  000723ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052bc  00000000  00000000  001212b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00126574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008c6c 	.word	0x08008c6c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08008c6c 	.word	0x08008c6c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_uldivmod>:
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 800042c:	2a00      	cmp	r2, #0
 800042e:	d10f      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 8000430:	2900      	cmp	r1, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_uldivmod+0xe>
 8000434:	2800      	cmp	r0, #0
 8000436:	d002      	beq.n	800043e <__aeabi_uldivmod+0x16>
 8000438:	2100      	movs	r1, #0
 800043a:	43c9      	mvns	r1, r1
 800043c:	0008      	movs	r0, r1
 800043e:	b407      	push	{r0, r1, r2}
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <__aeabi_uldivmod+0x24>)
 8000442:	a102      	add	r1, pc, #8	; (adr r1, 800044c <__aeabi_uldivmod+0x24>)
 8000444:	1840      	adds	r0, r0, r1
 8000446:	9002      	str	r0, [sp, #8]
 8000448:	bd03      	pop	{r0, r1, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	ffffffd9 	.word	0xffffffd9
 8000450:	b403      	push	{r0, r1}
 8000452:	4668      	mov	r0, sp
 8000454:	b501      	push	{r0, lr}
 8000456:	9802      	ldr	r0, [sp, #8]
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	469e      	mov	lr, r3
 8000460:	b002      	add	sp, #8
 8000462:	bc0c      	pop	{r2, r3}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__udivmoddi4>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	b5e0      	push	{r5, r6, r7, lr}
 8000474:	0004      	movs	r4, r0
 8000476:	000d      	movs	r5, r1
 8000478:	4692      	mov	sl, r2
 800047a:	4699      	mov	r9, r3
 800047c:	b083      	sub	sp, #12
 800047e:	428b      	cmp	r3, r1
 8000480:	d830      	bhi.n	80004e4 <__udivmoddi4+0x7c>
 8000482:	d02d      	beq.n	80004e0 <__udivmoddi4+0x78>
 8000484:	4649      	mov	r1, r9
 8000486:	4650      	mov	r0, sl
 8000488:	f000 f8ba 	bl	8000600 <__clzdi2>
 800048c:	0029      	movs	r1, r5
 800048e:	0006      	movs	r6, r0
 8000490:	0020      	movs	r0, r4
 8000492:	f000 f8b5 	bl	8000600 <__clzdi2>
 8000496:	1a33      	subs	r3, r6, r0
 8000498:	4698      	mov	r8, r3
 800049a:	3b20      	subs	r3, #32
 800049c:	d434      	bmi.n	8000508 <__udivmoddi4+0xa0>
 800049e:	469b      	mov	fp, r3
 80004a0:	4653      	mov	r3, sl
 80004a2:	465a      	mov	r2, fp
 80004a4:	4093      	lsls	r3, r2
 80004a6:	4642      	mov	r2, r8
 80004a8:	001f      	movs	r7, r3
 80004aa:	4653      	mov	r3, sl
 80004ac:	4093      	lsls	r3, r2
 80004ae:	001e      	movs	r6, r3
 80004b0:	42af      	cmp	r7, r5
 80004b2:	d83b      	bhi.n	800052c <__udivmoddi4+0xc4>
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d100      	bne.n	80004ba <__udivmoddi4+0x52>
 80004b8:	e079      	b.n	80005ae <__udivmoddi4+0x146>
 80004ba:	465b      	mov	r3, fp
 80004bc:	1ba4      	subs	r4, r4, r6
 80004be:	41bd      	sbcs	r5, r7
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	da00      	bge.n	80004c6 <__udivmoddi4+0x5e>
 80004c4:	e076      	b.n	80005b4 <__udivmoddi4+0x14c>
 80004c6:	2200      	movs	r2, #0
 80004c8:	2300      	movs	r3, #0
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	465a      	mov	r2, fp
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	4642      	mov	r2, r8
 80004da:	4093      	lsls	r3, r2
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	e029      	b.n	8000534 <__udivmoddi4+0xcc>
 80004e0:	4282      	cmp	r2, r0
 80004e2:	d9cf      	bls.n	8000484 <__udivmoddi4+0x1c>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2300      	movs	r3, #0
 80004e8:	9200      	str	r2, [sp, #0]
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <__udivmoddi4+0x8e>
 80004f2:	601c      	str	r4, [r3, #0]
 80004f4:	605d      	str	r5, [r3, #4]
 80004f6:	9800      	ldr	r0, [sp, #0]
 80004f8:	9901      	ldr	r1, [sp, #4]
 80004fa:	b003      	add	sp, #12
 80004fc:	bcf0      	pop	{r4, r5, r6, r7}
 80004fe:	46bb      	mov	fp, r7
 8000500:	46b2      	mov	sl, r6
 8000502:	46a9      	mov	r9, r5
 8000504:	46a0      	mov	r8, r4
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	4642      	mov	r2, r8
 800050a:	469b      	mov	fp, r3
 800050c:	2320      	movs	r3, #32
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	4652      	mov	r2, sl
 8000512:	40da      	lsrs	r2, r3
 8000514:	4641      	mov	r1, r8
 8000516:	0013      	movs	r3, r2
 8000518:	464a      	mov	r2, r9
 800051a:	408a      	lsls	r2, r1
 800051c:	0017      	movs	r7, r2
 800051e:	4642      	mov	r2, r8
 8000520:	431f      	orrs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d9c3      	bls.n	80004b4 <__udivmoddi4+0x4c>
 800052c:	2200      	movs	r2, #0
 800052e:	2300      	movs	r3, #0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	4643      	mov	r3, r8
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0d8      	beq.n	80004ec <__udivmoddi4+0x84>
 800053a:	07fb      	lsls	r3, r7, #31
 800053c:	0872      	lsrs	r2, r6, #1
 800053e:	431a      	orrs	r2, r3
 8000540:	4646      	mov	r6, r8
 8000542:	087b      	lsrs	r3, r7, #1
 8000544:	e00e      	b.n	8000564 <__udivmoddi4+0xfc>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d101      	bne.n	800054e <__udivmoddi4+0xe6>
 800054a:	42a2      	cmp	r2, r4
 800054c:	d80c      	bhi.n	8000568 <__udivmoddi4+0x100>
 800054e:	1aa4      	subs	r4, r4, r2
 8000550:	419d      	sbcs	r5, r3
 8000552:	2001      	movs	r0, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2100      	movs	r1, #0
 800055a:	3e01      	subs	r6, #1
 800055c:	1824      	adds	r4, r4, r0
 800055e:	414d      	adcs	r5, r1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d006      	beq.n	8000572 <__udivmoddi4+0x10a>
 8000564:	42ab      	cmp	r3, r5
 8000566:	d9ee      	bls.n	8000546 <__udivmoddi4+0xde>
 8000568:	3e01      	subs	r6, #1
 800056a:	1924      	adds	r4, r4, r4
 800056c:	416d      	adcs	r5, r5
 800056e:	2e00      	cmp	r6, #0
 8000570:	d1f8      	bne.n	8000564 <__udivmoddi4+0xfc>
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	465b      	mov	r3, fp
 8000578:	1900      	adds	r0, r0, r4
 800057a:	4169      	adcs	r1, r5
 800057c:	2b00      	cmp	r3, #0
 800057e:	db24      	blt.n	80005ca <__udivmoddi4+0x162>
 8000580:	002b      	movs	r3, r5
 8000582:	465a      	mov	r2, fp
 8000584:	4644      	mov	r4, r8
 8000586:	40d3      	lsrs	r3, r2
 8000588:	002a      	movs	r2, r5
 800058a:	40e2      	lsrs	r2, r4
 800058c:	001c      	movs	r4, r3
 800058e:	465b      	mov	r3, fp
 8000590:	0015      	movs	r5, r2
 8000592:	2b00      	cmp	r3, #0
 8000594:	db2a      	blt.n	80005ec <__udivmoddi4+0x184>
 8000596:	0026      	movs	r6, r4
 8000598:	409e      	lsls	r6, r3
 800059a:	0033      	movs	r3, r6
 800059c:	0026      	movs	r6, r4
 800059e:	4647      	mov	r7, r8
 80005a0:	40be      	lsls	r6, r7
 80005a2:	0032      	movs	r2, r6
 80005a4:	1a80      	subs	r0, r0, r2
 80005a6:	4199      	sbcs	r1, r3
 80005a8:	9000      	str	r0, [sp, #0]
 80005aa:	9101      	str	r1, [sp, #4]
 80005ac:	e79e      	b.n	80004ec <__udivmoddi4+0x84>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d8bc      	bhi.n	800052c <__udivmoddi4+0xc4>
 80005b2:	e782      	b.n	80004ba <__udivmoddi4+0x52>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	9100      	str	r1, [sp, #0]
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	e785      	b.n	80004d6 <__udivmoddi4+0x6e>
 80005ca:	4642      	mov	r2, r8
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	4646      	mov	r6, r8
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0023      	movs	r3, r4
 80005d8:	40f3      	lsrs	r3, r6
 80005da:	4644      	mov	r4, r8
 80005dc:	4313      	orrs	r3, r2
 80005de:	002a      	movs	r2, r5
 80005e0:	40e2      	lsrs	r2, r4
 80005e2:	001c      	movs	r4, r3
 80005e4:	465b      	mov	r3, fp
 80005e6:	0015      	movs	r5, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dad4      	bge.n	8000596 <__udivmoddi4+0x12e>
 80005ec:	4642      	mov	r2, r8
 80005ee:	002f      	movs	r7, r5
 80005f0:	2320      	movs	r3, #32
 80005f2:	0026      	movs	r6, r4
 80005f4:	4097      	lsls	r7, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	40de      	lsrs	r6, r3
 80005fa:	003b      	movs	r3, r7
 80005fc:	4333      	orrs	r3, r6
 80005fe:	e7cd      	b.n	800059c <__udivmoddi4+0x134>

08000600 <__clzdi2>:
 8000600:	b510      	push	{r4, lr}
 8000602:	2900      	cmp	r1, #0
 8000604:	d103      	bne.n	800060e <__clzdi2+0xe>
 8000606:	f000 f807 	bl	8000618 <__clzsi2>
 800060a:	3020      	adds	r0, #32
 800060c:	e002      	b.n	8000614 <__clzdi2+0x14>
 800060e:	0008      	movs	r0, r1
 8000610:	f000 f802 	bl	8000618 <__clzsi2>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <__clzsi2>:
 8000618:	211c      	movs	r1, #28
 800061a:	2301      	movs	r3, #1
 800061c:	041b      	lsls	r3, r3, #16
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0xe>
 8000622:	0c00      	lsrs	r0, r0, #16
 8000624:	3910      	subs	r1, #16
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	4298      	cmp	r0, r3
 800062a:	d301      	bcc.n	8000630 <__clzsi2+0x18>
 800062c:	0a00      	lsrs	r0, r0, #8
 800062e:	3908      	subs	r1, #8
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	4298      	cmp	r0, r3
 8000634:	d301      	bcc.n	800063a <__clzsi2+0x22>
 8000636:	0900      	lsrs	r0, r0, #4
 8000638:	3904      	subs	r1, #4
 800063a:	a202      	add	r2, pc, #8	; (adr r2, 8000644 <__clzsi2+0x2c>)
 800063c:	5c10      	ldrb	r0, [r2, r0]
 800063e:	1840      	adds	r0, r0, r1
 8000640:	4770      	bx	lr
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	02020304 	.word	0x02020304
 8000648:	01010101 	.word	0x01010101
	...

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f001 fac3 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f8e3 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fbbb 	bl	8000ddc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 fb6b 	bl	8000d40 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800066a:	f000 f925 	bl	80008b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800066e:	f000 f989 	bl	8000984 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000672:	f000 f9c7 	bl	8000a04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000676:	f000 fa19 	bl	8000aac <MX_TIM3_Init>
  MX_TIM6_Init();
 800067a:	f000 fa99 	bl	8000bb0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800067e:	f000 fad3 	bl	8000c28 <MX_TIM7_Init>
  MX_TIM14_Init();
 8000682:	f000 fb0d 	bl	8000ca0 <MX_TIM14_Init>
  MX_TIM17_Init();
 8000686:	f000 fb33 	bl	8000cf0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 800068a:	4b58      	ldr	r3, [pc, #352]	; (80007ec <main+0x198>)
 800068c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068e:	4b57      	ldr	r3, [pc, #348]	; (80007ec <main+0x198>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	63da      	str	r2, [r3, #60]	; 0x3c
 8000696:	4b55      	ldr	r3, [pc, #340]	; (80007ec <main+0x198>)
 8000698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006a2:	4b52      	ldr	r3, [pc, #328]	; (80007ec <main+0x198>)
 80006a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a6:	4b51      	ldr	r3, [pc, #324]	; (80007ec <main+0x198>)
 80006a8:	2110      	movs	r1, #16
 80006aa:	430a      	orrs	r2, r1
 80006ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ae:	4b4f      	ldr	r3, [pc, #316]	; (80007ec <main+0x198>)
 80006b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b2:	2210      	movs	r2, #16
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 80006ba:	4b4c      	ldr	r3, [pc, #304]	; (80007ec <main+0x198>)
 80006bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006be:	4b4b      	ldr	r3, [pc, #300]	; (80007ec <main+0x198>)
 80006c0:	2120      	movs	r1, #32
 80006c2:	430a      	orrs	r2, r1
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c6:	4b49      	ldr	r3, [pc, #292]	; (80007ec <main+0x198>)
 80006c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ca:	2220      	movs	r2, #32
 80006cc:	4013      	ands	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]

  // Enable the TIM14 peripheral
   __HAL_RCC_TIM14_CLK_ENABLE();
 80006d2:	4b46      	ldr	r3, [pc, #280]	; (80007ec <main+0x198>)
 80006d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d6:	4b45      	ldr	r3, [pc, #276]	; (80007ec <main+0x198>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0209      	lsls	r1, r1, #8
 80006dc:	430a      	orrs	r2, r1
 80006de:	641a      	str	r2, [r3, #64]	; 0x40
 80006e0:	4b42      	ldr	r3, [pc, #264]	; (80007ec <main+0x198>)
 80006e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]

   // Enable the TIM17 peripheral
    __HAL_RCC_TIM17_CLK_ENABLE();
 80006ee:	4b3f      	ldr	r3, [pc, #252]	; (80007ec <main+0x198>)
 80006f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f2:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <main+0x198>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	02c9      	lsls	r1, r1, #11
 80006f8:	430a      	orrs	r2, r1
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
 80006fc:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <main+0x198>)
 80006fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	02db      	lsls	r3, r3, #11
 8000704:	4013      	ands	r3, r2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	200f      	movs	r0, #15
 8000710:	f002 fa28 	bl	8002b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000714:	200f      	movs	r0, #15
 8000716:	f002 fa3a 	bl	8002b8e <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2011      	movs	r0, #17
 8000720:	f002 fa20 	bl	8002b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000724:	2011      	movs	r0, #17
 8000726:	f002 fa32 	bl	8002b8e <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2012      	movs	r0, #18
 8000730:	f002 fa18 	bl	8002b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8000734:	2012      	movs	r0, #18
 8000736:	f002 fa2a 	bl	8002b8e <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM14
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2013      	movs	r0, #19
 8000740:	f002 fa10 	bl	8002b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000744:	2013      	movs	r0, #19
 8000746:	f002 fa22 	bl	8002b8e <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM17
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2016      	movs	r0, #22
 8000750:	f002 fa08 	bl	8002b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000754:	2016      	movs	r0, #22
 8000756:	f002 fa1a 	bl	8002b8e <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <main+0x19c>)
 800075c:	0018      	movs	r0, r3
 800075e:	f004 f87f 	bl	8004860 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000762:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <main+0x1a0>)
 8000764:	0018      	movs	r0, r3
 8000766:	f004 f87b 	bl	8004860 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <main+0x1a4>)
 800076c:	0018      	movs	r0, r3
 800076e:	f004 f877 	bl	8004860 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <main+0x1a8>)
 8000774:	0018      	movs	r0, r3
 8000776:	f004 f873 	bl	8004860 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <main+0x1ac>)
 800077c:	0018      	movs	r0, r3
 800077e:	f004 f86f 	bl	8004860 <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <main+0x1b0>)
 8000784:	2100      	movs	r1, #0
 8000786:	0018      	movs	r0, r3
 8000788:	f004 f926 	bl	80049d8 <HAL_TIM_PWM_Start>

  // I2C Display
  hardwareTestLCD();
 800078c:	f000 fc06 	bl	8000f9c <hardwareTestLCD>

  // Variables
  int servoAngle;
  int adcValue;
  stateTracker = 1;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <main+0x1b4>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check UART Transmissions
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 8000796:	491d      	ldr	r1, [pc, #116]	; (800080c <main+0x1b8>)
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <main+0x1bc>)
 800079a:	2201      	movs	r2, #1
 800079c:	0018      	movs	r0, r3
 800079e:	f005 fa95 	bl	8005ccc <HAL_UART_Receive_IT>

	  // Get potentiometer value
	  HAL_ADC_Start_IT(&hadc1);
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <main+0x1c0>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fe4f 	bl	8002448 <HAL_ADC_Start_IT>
	  getPotValue();
 80007aa:	f000 fbc9 	bl	8000f40 <getPotValue>

	  // State Machine
	  stateMachineDecider();
 80007ae:	f000 fc87 	bl	80010c0 <stateMachineDecider>
	  stateMachineController(stateTracker);
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <main+0x1b4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fc3c 	bl	8001034 <stateMachineController>

	  // Monitor LEDs
	  if (ledOneFlag == 0 ){
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <main+0x1c4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d106      	bne.n	80007d2 <main+0x17e>
		  HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,GPIO_PIN_RESET);
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <main+0x1c8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 fc49 	bl	8003062 <HAL_GPIO_WritePin>
 80007d0:	e7e1      	b.n	8000796 <main+0x142>
	  } else if (ledTwoFlag == 0){
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <main+0x1cc>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d1dd      	bne.n	8000796 <main+0x142>
		  HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,GPIO_PIN_RESET);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	01db      	lsls	r3, r3, #7
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <main+0x1d0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	0019      	movs	r1, r3
 80007e4:	f002 fc3d 	bl	8003062 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 80007e8:	e7d5      	b.n	8000796 <main+0x142>
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40021000 	.word	0x40021000
 80007f0:	2000013c 	.word	0x2000013c
 80007f4:	200001d4 	.word	0x200001d4
 80007f8:	20000220 	.word	0x20000220
 80007fc:	2000026c 	.word	0x2000026c
 8000800:	200002b8 	.word	0x200002b8
 8000804:	20000188 	.word	0x20000188
 8000808:	200003f4 	.word	0x200003f4
 800080c:	200003ec 	.word	0x200003ec
 8000810:	20000304 	.word	0x20000304
 8000814:	20000084 	.word	0x20000084
 8000818:	20000004 	.word	0x20000004
 800081c:	50000800 	.word	0x50000800
 8000820:	20000008 	.word	0x20000008
 8000824:	50000400 	.word	0x50000400

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b093      	sub	sp, #76	; 0x4c
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	2410      	movs	r4, #16
 8000830:	193b      	adds	r3, r7, r4
 8000832:	0018      	movs	r0, r3
 8000834:	2338      	movs	r3, #56	; 0x38
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f007 fd91 	bl	8008360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083e:	003b      	movs	r3, r7
 8000840:	0018      	movs	r0, r3
 8000842:	2310      	movs	r3, #16
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f007 fd8a 	bl	8008360 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	0018      	movs	r0, r3
 8000852:	f003 f8e5 	bl	8003a20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2202      	movs	r2, #2
 800085a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	0052      	lsls	r2, r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2240      	movs	r2, #64	; 0x40
 800086e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	f003 f91d 	bl	8003ab8 <HAL_RCC_OscConfig>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000882:	f000 fec5 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	003b      	movs	r3, r7
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088c:	003b      	movs	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	003b      	movs	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	003b      	movs	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800089e:	003b      	movs	r3, r7
 80008a0:	2100      	movs	r1, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f003 fc22 	bl	80040ec <HAL_RCC_ClockConfig>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008ac:	f000 feb0 	bl	8001610 <Error_Handler>
  }
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b013      	add	sp, #76	; 0x4c
 80008b6:	bd90      	pop	{r4, r7, pc}

080008b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	0018      	movs	r0, r3
 80008c2:	230c      	movs	r3, #12
 80008c4:	001a      	movs	r2, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	f007 fd4a 	bl	8008360 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_ADC1_Init+0xc4>)
 80008ce:	4a2c      	ldr	r2, [pc, #176]	; (8000980 <MX_ADC1_Init+0xc8>)
 80008d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_ADC1_Init+0xc4>)
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	05d2      	lsls	r2, r2, #23
 80008d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_ADC1_Init+0xc4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <MX_ADC1_Init+0xc4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_ADC1_Init+0xc4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_ADC1_Init+0xc4>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_ADC1_Init+0xc4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_ADC1_Init+0xc4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_ADC1_Init+0xc4>)
 8000900:	2201      	movs	r2, #1
 8000902:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_ADC1_Init+0xc4>)
 8000906:	2201      	movs	r2, #1
 8000908:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_ADC1_Init+0xc4>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_ADC1_Init+0xc4>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_ADC1_Init+0xc4>)
 8000918:	222c      	movs	r2, #44	; 0x2c
 800091a:	2100      	movs	r1, #0
 800091c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_ADC1_Init+0xc4>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_ADC1_Init+0xc4>)
 8000926:	2200      	movs	r2, #0
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_ADC1_Init+0xc4>)
 800092c:	2200      	movs	r2, #0
 800092e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_ADC1_Init+0xc4>)
 8000932:	223c      	movs	r2, #60	; 0x3c
 8000934:	2100      	movs	r1, #0
 8000936:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_ADC1_Init+0xc4>)
 800093a:	2200      	movs	r2, #0
 800093c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_ADC1_Init+0xc4>)
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fb45 	bl	8001fd0 <HAL_ADC_Init>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800094a:	f000 fe61 	bl	8001610 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	1d3a      	adds	r2, r7, #4
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_ADC1_Init+0xc4>)
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fdf2 	bl	8002550 <HAL_ADC_ConfigChannel>
 800096c:	1e03      	subs	r3, r0, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000970:	f000 fe4e 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000084 	.word	0x20000084
 8000980:	40012400 	.word	0x40012400

08000984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_I2C1_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <MX_I2C1_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_I2C1_Init+0x74>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <MX_I2C1_Init+0x7c>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_I2C1_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009c0:	0018      	movs	r0, r3
 80009c2:	f002 fb87 	bl	80030d4 <HAL_I2C_Init>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ca:	f000 fe21 	bl	8001610 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	0018      	movs	r0, r3
 80009d4:	f002 ff8c 	bl	80038f0 <HAL_I2CEx_ConfigAnalogFilter>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 fe18 	bl	8001610 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009e2:	2100      	movs	r1, #0
 80009e4:	0018      	movs	r0, r3
 80009e6:	f002 ffcf 	bl	8003988 <HAL_I2CEx_ConfigDigitalFilter>
 80009ea:	1e03      	subs	r3, r0, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 fe0f 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200000e8 	.word	0x200000e8
 80009fc:	40005400 	.word	0x40005400
 8000a00:	00303d5b 	.word	0x00303d5b

08000a04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	2310      	movs	r3, #16
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2310      	movs	r3, #16
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f007 fca3 	bl	8008360 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	230c      	movs	r3, #12
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f007 fc9c 	bl	8008360 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_TIM2_Init+0xa0>)
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	05d2      	lsls	r2, r2, #23
 8000a2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_TIM2_Init+0xa0>)
 8000a32:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_TIM2_Init+0xa0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_TIM2_Init+0xa0>)
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <MX_TIM2_Init+0xa4>)
 8000a40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM2_Init+0xa0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_TIM2_Init+0xa0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_TIM2_Init+0xa0>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f003 fead 	bl	80047b0 <HAL_TIM_Base_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a5a:	f000 fdd9 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5e:	2110      	movs	r1, #16
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	0152      	lsls	r2, r2, #5
 8000a66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a68:	187a      	adds	r2, r7, r1
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_TIM2_Init+0xa0>)
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 faa4 	bl	8004fbc <HAL_TIM_ConfigClockSource>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a78:	f000 fdca 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a88:	1d3a      	adds	r2, r7, #4
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_TIM2_Init+0xa0>)
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f004 ff9c 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000a98:	f000 fdba 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b008      	add	sp, #32
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000013c 	.word	0x2000013c
 8000aa8:	000003e7 	.word	0x000003e7

08000aac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08e      	sub	sp, #56	; 0x38
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	2328      	movs	r3, #40	; 0x28
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2310      	movs	r3, #16
 8000aba:	001a      	movs	r2, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	f007 fc4f 	bl	8008360 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac2:	231c      	movs	r3, #28
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	230c      	movs	r3, #12
 8000aca:	001a      	movs	r2, r3
 8000acc:	2100      	movs	r1, #0
 8000ace:	f007 fc47 	bl	8008360 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	003b      	movs	r3, r7
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	231c      	movs	r3, #28
 8000ad8:	001a      	movs	r2, r3
 8000ada:	2100      	movs	r1, #0
 8000adc:	f007 fc40 	bl	8008360 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000ae2:	4a31      	ldr	r2, [pc, #196]	; (8000ba8 <MX_TIM3_Init+0xfc>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000ae8:	2240      	movs	r2, #64	; 0x40
 8000aea:	32ff      	adds	r2, #255	; 0xff
 8000aec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000af6:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <MX_TIM3_Init+0x100>)
 8000af8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f003 fe51 	bl	80047b0 <HAL_TIM_Base_Init>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 fd7d 	bl	8001610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b16:	2128      	movs	r1, #40	; 0x28
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	0152      	lsls	r2, r2, #5
 8000b1e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b20:	187a      	adds	r2, r7, r1
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000b24:	0011      	movs	r1, r2
 8000b26:	0018      	movs	r0, r3
 8000b28:	f004 fa48 	bl	8004fbc <HAL_TIM_ConfigClockSource>
 8000b2c:	1e03      	subs	r3, r0, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000b30:	f000 fd6e 	bl	8001610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f003 feee 	bl	8004918 <HAL_TIM_PWM_Init>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b40:	f000 fd66 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	211c      	movs	r1, #28
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b52:	187a      	adds	r2, r7, r1
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f004 ff37 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	1e03      	subs	r3, r0, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000b62:	f000 fd55 	bl	8001610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2260      	movs	r2, #96	; 0x60
 8000b6a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b7e:	0039      	movs	r1, r7
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	0018      	movs	r0, r3
 8000b86:	f004 f919 	bl	8004dbc <HAL_TIM_PWM_ConfigChannel>
 8000b8a:	1e03      	subs	r3, r0, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000b8e:	f000 fd3f 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <MX_TIM3_Init+0xf8>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 febb 	bl	8001910 <HAL_TIM_MspPostInit>

}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b00e      	add	sp, #56	; 0x38
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	20000188 	.word	0x20000188
 8000ba8:	40000400 	.word	0x40000400
 8000bac:	000003e7 	.word	0x000003e7

08000bb0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	230c      	movs	r3, #12
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f007 fbce 	bl	8008360 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM6_Init+0x6c>)
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <MX_TIM6_Init+0x70>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_TIM6_Init+0x6c>)
 8000bcc:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <MX_TIM6_Init+0x74>)
 8000bce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_TIM6_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_TIM6_Init+0x6c>)
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_TIM6_Init+0x74>)
 8000bda:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_TIM6_Init+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_TIM6_Init+0x6c>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f003 fde3 	bl	80047b0 <HAL_TIM_Base_Init>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000bee:	f000 fd0f 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bfe:	1d3a      	adds	r2, r7, #4
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_TIM6_Init+0x6c>)
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f004 fee1 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000c0e:	f000 fcff 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b004      	add	sp, #16
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	200001d4 	.word	0x200001d4
 8000c20:	40001000 	.word	0x40001000
 8000c24:	000003e7 	.word	0x000003e7

08000c28 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	0018      	movs	r0, r3
 8000c32:	230c      	movs	r3, #12
 8000c34:	001a      	movs	r2, r3
 8000c36:	2100      	movs	r1, #0
 8000c38:	f007 fb92 	bl	8008360 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_TIM7_Init+0x6c>)
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <MX_TIM7_Init+0x70>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_TIM7_Init+0x6c>)
 8000c44:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <MX_TIM7_Init+0x74>)
 8000c46:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_TIM7_Init+0x6c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_TIM7_Init+0x6c>)
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <MX_TIM7_Init+0x74>)
 8000c52:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_TIM7_Init+0x6c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_TIM7_Init+0x6c>)
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f003 fda7 	bl	80047b0 <HAL_TIM_Base_Init>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000c66:	f000 fcd3 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c76:	1d3a      	adds	r2, r7, #4
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_TIM7_Init+0x6c>)
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f004 fea5 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 8000c82:	1e03      	subs	r3, r0, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000c86:	f000 fcc3 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000220 	.word	0x20000220
 8000c98:	40001400 	.word	0x40001400
 8000c9c:	000003e7 	.word	0x000003e7

08000ca0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_TIM14_Init+0x40>)
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <MX_TIM14_Init+0x44>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7999;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <MX_TIM14_Init+0x40>)
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <MX_TIM14_Init+0x48>)
 8000cae:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_TIM14_Init+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <MX_TIM14_Init+0x40>)
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <MX_TIM14_Init+0x4c>)
 8000cba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_TIM14_Init+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <MX_TIM14_Init+0x40>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <MX_TIM14_Init+0x40>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f003 fd70 	bl	80047b0 <HAL_TIM_Base_Init>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000cd4:	f000 fc9c 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	2000026c 	.word	0x2000026c
 8000ce4:	40002000 	.word	0x40002000
 8000ce8:	00001f3f 	.word	0x00001f3f
 8000cec:	000003e7 	.word	0x000003e7

08000cf0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_TIM17_Init+0x44>)
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <MX_TIM17_Init+0x48>)
 8000cf8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_TIM17_Init+0x44>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_TIM17_Init+0x44>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <MX_TIM17_Init+0x44>)
 8000d08:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <MX_TIM17_Init+0x4c>)
 8000d0a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_TIM17_Init+0x44>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <MX_TIM17_Init+0x44>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_TIM17_Init+0x44>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <MX_TIM17_Init+0x44>)
 8000d20:	0018      	movs	r0, r3
 8000d22:	f003 fd45 	bl	80047b0 <HAL_TIM_Base_Init>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000d2a:	f000 fc71 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200002b8 	.word	0x200002b8
 8000d38:	40014800 	.word	0x40014800
 8000d3c:	000003e7 	.word	0x000003e7

08000d40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d44:	4b23      	ldr	r3, [pc, #140]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d46:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <MX_USART2_UART_Init+0x98>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d4c:	22e1      	movs	r2, #225	; 0xe1
 8000d4e:	0252      	lsls	r2, r2, #9
 8000d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f004 fea4 	bl	8005ad8 <HAL_UART_Init>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d94:	f000 fc3c 	bl	8001610 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f006 fef1 	bl	8007b84 <HAL_UARTEx_SetTxFifoThreshold>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000da6:	f000 fc33 	bl	8001610 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000dac:	2100      	movs	r1, #0
 8000dae:	0018      	movs	r0, r3
 8000db0:	f006 ff28 	bl	8007c04 <HAL_UARTEx_SetRxFifoThreshold>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f000 fc2a 	bl	8001610 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <MX_USART2_UART_Init+0x94>)
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f006 fea6 	bl	8007b10 <HAL_UARTEx_DisableFifoMode>
 8000dc4:	1e03      	subs	r3, r0, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f000 fc22 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	20000304 	.word	0x20000304
 8000dd8:	40004400 	.word	0x40004400

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b08b      	sub	sp, #44	; 0x2c
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	2414      	movs	r4, #20
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	0018      	movs	r0, r3
 8000de8:	2314      	movs	r3, #20
 8000dea:	001a      	movs	r2, r3
 8000dec:	2100      	movs	r1, #0
 8000dee:	f007 fab7 	bl	8008360 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b4f      	ldr	r3, [pc, #316]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000df6:	4b4e      	ldr	r3, [pc, #312]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000df8:	2104      	movs	r1, #4
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dfe:	4b4c      	ldr	r3, [pc, #304]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e02:	2204      	movs	r2, #4
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0e:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e10:	2120      	movs	r1, #32
 8000e12:	430a      	orrs	r2, r1
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
 8000e16:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2e:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e32:	2201      	movs	r2, #1
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e3e:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e40:	2102      	movs	r1, #2
 8000e42:	430a      	orrs	r2, r1
 8000e44:	635a      	str	r2, [r3, #52]	; 0x34
 8000e46:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e52:	23a0      	movs	r3, #160	; 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f002 f901 	bl	8003062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000e60:	4934      	ldr	r1, [pc, #208]	; (8000f34 <MX_GPIO_Init+0x158>)
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <MX_GPIO_Init+0x15c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	0018      	movs	r0, r3
 8000e68:	f002 f8fb 	bl	8003062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000e6c:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <MX_GPIO_Init+0x160>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	0018      	movs	r0, r3
 8000e74:	f002 f8f5 	bl	8003062 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INPUT_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_2_Pin;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	0192      	lsls	r2, r2, #6
 8000e7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	2201      	movs	r2, #1
 8000e8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_2_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	4a2b      	ldr	r2, [pc, #172]	; (8000f3c <MX_GPIO_Init+0x160>)
 8000e90:	0019      	movs	r1, r3
 8000e92:	0010      	movs	r0, r2
 8000e94:	f001 ff64 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2202      	movs	r2, #2
 8000eae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	193a      	adds	r2, r7, r4
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 ff51 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <MX_GPIO_Init+0x158>)
 8000ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <MX_GPIO_Init+0x15c>)
 8000eda:	0019      	movs	r1, r3
 8000edc:	0010      	movs	r0, r2
 8000ede:	f001 ff3f 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	2201      	movs	r2, #1
 8000eec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <MX_GPIO_Init+0x160>)
 8000efe:	0019      	movs	r1, r3
 8000f00:	0010      	movs	r0, r2
 8000f02:	f001 ff2d 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000f06:	0021      	movs	r1, r4
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <MX_GPIO_Init+0x15c>)
 8000f1e:	0019      	movs	r1, r3
 8000f20:	0010      	movs	r0, r2
 8000f22:	f001 ff1d 	bl	8002d60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b00b      	add	sp, #44	; 0x2c
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	40021000 	.word	0x40021000
 8000f34:	00004010 	.word	0x00004010
 8000f38:	50000400 	.word	0x50000400
 8000f3c:	50000800 	.word	0x50000800

08000f40 <getPotValue>:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
	}

	/* Get ADC value from potentiometer */
	void getPotValue(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <getPotValue+0x24>)
 8000f46:	2105      	movs	r1, #5
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f001 f9e9 	bl	8002320 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <getPotValue+0x24>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f001 faf1 	bl	8002538 <HAL_ADC_GetValue>
 8000f56:	0003      	movs	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <getPotValue+0x28>)
 8000f5c:	801a      	strh	r2, [r3, #0]

		/* Debug */
		//sprintf(msg, "potValue: %hu\r\n", potValue);
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000084 	.word	0x20000084
 8000f68:	200003f2 	.word	0x200003f2

08000f6c <getAdcFromPot>:

	/* getADC from Pot */
	int getAdcFromPot(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
		/* Get pot value */
		uint16_t potValue;
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <getAdcFromPot+0x2c>)
 8000f74:	2105      	movs	r1, #5
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 f9d2 	bl	8002320 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <getAdcFromPot+0x2c>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f001 fada 	bl	8002538 <HAL_ADC_GetValue>
 8000f84:	0002      	movs	r2, r0
 8000f86:	1dbb      	adds	r3, r7, #6
 8000f88:	801a      	strh	r2, [r3, #0]
		return potValue;
 8000f8a:	1dbb      	adds	r3, r7, #6
 8000f8c:	881b      	ldrh	r3, [r3, #0]
	}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	20000084 	.word	0x20000084

08000f9c <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f006 fff1 	bl	8007f88 <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2000      	movs	r0, #0
 8000fac:	f007 f8fc 	bl	80081a8 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Hardware Test");
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <hardwareTestLCD+0x38>)
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f007 f947 	bl	8008248 <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f007 f8f2 	bl	80081a8 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Meow");
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <hardwareTestLCD+0x3c>)
 8000fc6:	0019      	movs	r1, r3
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f007 f93d 	bl	8008248 <I2C_LCD_WriteString>
	}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08008cac 	.word	0x08008cac
 8000fd8:	08008cbc 	.word	0x08008cbc

08000fdc <motorControl>:

	/* Motor control */
	void motorControl(int adcValue){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, adcValue); // Interpolate pot values to PWM range
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <motorControl+0x18>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000188 	.word	0x20000188

08000ff8 <myMap>:

	/* Mapping function */
	 int myMap(int x, int in_min, int in_max, int out_min, int out_max){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
		 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	69b9      	ldr	r1, [r7, #24]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	1a8a      	subs	r2, r1, r2
 8001012:	435a      	muls	r2, r3
 8001014:	0010      	movs	r0, r2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	0019      	movs	r1, r3
 800101e:	f7ff f917 	bl	8000250 <__divsi3>
 8001022:	0003      	movs	r3, r0
 8001024:	001a      	movs	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	18d3      	adds	r3, r2, r3
	 }
 800102a:	0018      	movs	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	b004      	add	sp, #16
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <stateMachineController>:

	 /* State Machine Controller */
	 // Description: Determines which state the program will execute.
	 //  Input:		 Integer corresponding to state (1 = A, 2 = B, 3 = C)
	 void stateMachineController(int state){
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

		 switch(state){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d015      	beq.n	800106e <stateMachineController+0x3a>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b03      	cmp	r3, #3
 8001046:	dc2d      	bgt.n	80010a4 <stateMachineController+0x70>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d003      	beq.n	8001056 <stateMachineController+0x22>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d009      	beq.n	8001068 <stateMachineController+0x34>
				 ledTwoFlag = 1;

				 stateHandlerC();
				 break;
		 }
	 }
 8001054:	e026      	b.n	80010a4 <stateMachineController+0x70>
				 ledOneFlag = 1;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <stateMachineController+0x78>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <stateMachineController+0x7c>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
				 stateHandlerA();
 8001062:	f000 f8ad 	bl	80011c0 <stateHandlerA>
				 break;
 8001066:	e01d      	b.n	80010a4 <stateMachineController+0x70>
				 stateHandlerB();
 8001068:	f000 f8ea 	bl	8001240 <stateHandlerB>
				 break;
 800106c:	e01a      	b.n	80010a4 <stateMachineController+0x70>
				 sprintf(msg, "Executing C.\n\r");
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <stateMachineController+0x80>)
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <stateMachineController+0x84>)
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f007 f953 	bl	8008320 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <stateMachineController+0x84>)
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff f84b 	bl	8000118 <strlen>
 8001082:	0003      	movs	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	2301      	movs	r3, #1
 8001088:	425b      	negs	r3, r3
 800108a:	490b      	ldr	r1, [pc, #44]	; (80010b8 <stateMachineController+0x84>)
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <stateMachineController+0x88>)
 800108e:	f004 fd79 	bl	8005b84 <HAL_UART_Transmit>
				 ledOneFlag = 1;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <stateMachineController+0x78>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <stateMachineController+0x7c>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
				 stateHandlerC();
 800109e:	f000 f975 	bl	800138c <stateHandlerC>
				 break;
 80010a2:	46c0      	nop			; (mov r8, r8)
	 }
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004
 80010b0:	20000008 	.word	0x20000008
 80010b4:	08008cc4 	.word	0x08008cc4
 80010b8:	20000398 	.word	0x20000398
 80010bc:	20000304 	.word	0x20000304

080010c0 <stateMachineDecider>:

	 /* State Machine Controller */
	 // Description: Monitors button pushes to update current state value.
	 void stateMachineDecider(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
		 // Go to State B if it is State A
		 if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 1){
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <stateMachineDecider+0xe0>)
 80010c6:	2108      	movs	r1, #8
 80010c8:	0018      	movs	r0, r3
 80010ca:	f001 ffad 	bl	8003028 <HAL_GPIO_ReadPin>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d01c      	beq.n	800110c <stateMachineDecider+0x4c>
 80010d2:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <stateMachineDecider+0xe4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d118      	bne.n	800110c <stateMachineDecider+0x4c>

			 // Debug message
			 sprintf(msg, "Going to State B.\n\r");
 80010da:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <stateMachineDecider+0xe8>)
 80010dc:	4b33      	ldr	r3, [pc, #204]	; (80011ac <stateMachineDecider+0xec>)
 80010de:	0011      	movs	r1, r2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f007 f91d 	bl	8008320 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <stateMachineDecider+0xec>)
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff f815 	bl	8000118 <strlen>
 80010ee:	0003      	movs	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	2301      	movs	r3, #1
 80010f4:	425b      	negs	r3, r3
 80010f6:	492d      	ldr	r1, [pc, #180]	; (80011ac <stateMachineDecider+0xec>)
 80010f8:	482d      	ldr	r0, [pc, #180]	; (80011b0 <stateMachineDecider+0xf0>)
 80010fa:	f004 fd43 	bl	8005b84 <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 80010fe:	2000      	movs	r0, #0
 8001100:	f007 f80e 	bl	8008120 <I2C_LCD_Clear>

			 // Go to State B
			 stateTracker = 2;
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <stateMachineDecider+0xe4>)
 8001106:	2202      	movs	r2, #2
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e046      	b.n	800119a <stateMachineDecider+0xda>

		 // Go to State A if it is State B
		 } else if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 2){
 800110c:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <stateMachineDecider+0xe0>)
 800110e:	2108      	movs	r1, #8
 8001110:	0018      	movs	r0, r3
 8001112:	f001 ff89 	bl	8003028 <HAL_GPIO_ReadPin>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d01c      	beq.n	8001154 <stateMachineDecider+0x94>
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <stateMachineDecider+0xe4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b02      	cmp	r3, #2
 8001120:	d118      	bne.n	8001154 <stateMachineDecider+0x94>

			 // Debug message
			 sprintf(msg, "Going to State A.\n\r");
 8001122:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <stateMachineDecider+0xf4>)
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <stateMachineDecider+0xec>)
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f007 f8f9 	bl	8008320 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <stateMachineDecider+0xec>)
 8001130:	0018      	movs	r0, r3
 8001132:	f7fe fff1 	bl	8000118 <strlen>
 8001136:	0003      	movs	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	2301      	movs	r3, #1
 800113c:	425b      	negs	r3, r3
 800113e:	491b      	ldr	r1, [pc, #108]	; (80011ac <stateMachineDecider+0xec>)
 8001140:	481b      	ldr	r0, [pc, #108]	; (80011b0 <stateMachineDecider+0xf0>)
 8001142:	f004 fd1f 	bl	8005b84 <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 8001146:	2000      	movs	r0, #0
 8001148:	f006 ffea 	bl	8008120 <I2C_LCD_Clear>

			 // Stay in State A
			 stateTracker = 1;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <stateMachineDecider+0xe4>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e022      	b.n	800119a <stateMachineDecider+0xda>

		// Button 2 pressed (State C)
		 } else if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin) && stateTracker == 1){
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	019b      	lsls	r3, r3, #6
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <stateMachineDecider+0xf8>)
 800115a:	0019      	movs	r1, r3
 800115c:	0010      	movs	r0, r2
 800115e:	f001 ff63 	bl	8003028 <HAL_GPIO_ReadPin>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d119      	bne.n	800119a <stateMachineDecider+0xda>
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <stateMachineDecider+0xe4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d115      	bne.n	800119a <stateMachineDecider+0xda>

			 // Debug message
			 sprintf(msg, "Going to State C.\n\r");
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <stateMachineDecider+0xfc>)
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <stateMachineDecider+0xec>)
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f007 f8d3 	bl	8008320 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <stateMachineDecider+0xec>)
 800117c:	0018      	movs	r0, r3
 800117e:	f7fe ffcb 	bl	8000118 <strlen>
 8001182:	0003      	movs	r3, r0
 8001184:	b29a      	uxth	r2, r3
 8001186:	2301      	movs	r3, #1
 8001188:	425b      	negs	r3, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <stateMachineDecider+0xec>)
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <stateMachineDecider+0xf0>)
 800118e:	f004 fcf9 	bl	8005b84 <HAL_UART_Transmit>

			 // Go to State C
			 stateTracker = 3;
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <stateMachineDecider+0xe4>)
 8001194:	2203      	movs	r2, #3
 8001196:	601a      	str	r2, [r3, #0]
		 }
	 }
 8001198:	e7ff      	b.n	800119a <stateMachineDecider+0xda>
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	50000400 	.word	0x50000400
 80011a4:	200003f4 	.word	0x200003f4
 80011a8:	08008cd4 	.word	0x08008cd4
 80011ac:	20000398 	.word	0x20000398
 80011b0:	20000304 	.word	0x20000304
 80011b4:	08008ce8 	.word	0x08008ce8
 80011b8:	50000800 	.word	0x50000800
 80011bc:	08008cfc 	.word	0x08008cfc

080011c0 <stateHandlerA>:

	 /* State Handler A */
	 void stateHandlerA(void){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
		 // LCD Control
		 I2C_LCD_Display(MyI2C_LCD);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f007 f85a 	bl	8008280 <I2C_LCD_Display>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2000      	movs	r0, #0
 80011d2:	f006 ffe9 	bl	80081a8 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <stateHandlerA+0x6c>)
 80011d8:	0019      	movs	r1, r3
 80011da:	2000      	movs	r0, #0
 80011dc:	f007 f834 	bl	8008248 <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2100      	movs	r1, #0
 80011e4:	2000      	movs	r0, #0
 80011e6:	f006 ffdf 	bl	80081a8 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <stateHandlerA+0x70>)
 80011ec:	0019      	movs	r1, r3
 80011ee:	2000      	movs	r0, #0
 80011f0:	f007 f82a 	bl	8008248 <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <stateHandlerA+0x74>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f001 f926 	bl	8002448 <HAL_ADC_Start_IT>
		 getPotValue();
 80011fc:	f7ff fea0 	bl	8000f40 <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 8001200:	f7ff feb4 	bl	8000f6c <getAdcFromPot>
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <stateHandlerA+0x78>)
 8001206:	23b4      	movs	r3, #180	; 0xb4
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2300      	movs	r3, #0
 800120c:	213c      	movs	r1, #60	; 0x3c
 800120e:	f7ff fef3 	bl	8000ff8 <myMap>
 8001212:	0003      	movs	r3, r0
 8001214:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff fedf 	bl	8000fdc <motorControl>

		 // No button pushes - Stay in State A
		 stateTracker = 1;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <stateHandlerA+0x7c>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
	 }
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b002      	add	sp, #8
 800122a:	bd80      	pop	{r7, pc}
 800122c:	08008d10 	.word	0x08008d10
 8001230:	08008d20 	.word	0x08008d20
 8001234:	20000084 	.word	0x20000084
 8001238:	00000fff 	.word	0x00000fff
 800123c:	200003f4 	.word	0x200003f4

08001240 <stateHandlerB>:

	 /* State Handler B */
	 void stateHandlerB(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af02      	add	r7, sp, #8

		 // When State B is initially called, let alone one of the LEDs (in question) on
		 if (ledOneFlag == 1 && ledTwoFlag == 1){
 8001246:	4b42      	ldr	r3, [pc, #264]	; (8001350 <stateHandlerB+0x110>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d109      	bne.n	8001262 <stateHandlerB+0x22>
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <stateHandlerB+0x114>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d105      	bne.n	8001262 <stateHandlerB+0x22>
			 ledOneFlag = 1;
 8001256:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <stateHandlerB+0x110>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]
			 ledTwoFlag = 0;
 800125c:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <stateHandlerB+0x114>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
		 }

		 // LCD Control
		 I2C_LCD_Display(MyI2C_LCD);
 8001262:	2000      	movs	r0, #0
 8001264:	f007 f80c 	bl	8008280 <I2C_LCD_Display>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2000      	movs	r0, #0
 800126e:	f006 ff9b 	bl	80081a8 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "ADC: ");
 8001272:	4b39      	ldr	r3, [pc, #228]	; (8001358 <stateHandlerB+0x118>)
 8001274:	0019      	movs	r1, r3
 8001276:	2000      	movs	r0, #0
 8001278:	f006 ffe6 	bl	8008248 <I2C_LCD_WriteString>
		 sprintf(msg2, "%hu", potValue);
 800127c:	4b37      	ldr	r3, [pc, #220]	; (800135c <stateHandlerB+0x11c>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	4937      	ldr	r1, [pc, #220]	; (8001360 <stateHandlerB+0x120>)
 8001284:	4b37      	ldr	r3, [pc, #220]	; (8001364 <stateHandlerB+0x124>)
 8001286:	0018      	movs	r0, r3
 8001288:	f007 f84a 	bl	8008320 <siprintf>
		 I2C_LCD_WriteString(MyI2C_LCD, msg2);
 800128c:	4b35      	ldr	r3, [pc, #212]	; (8001364 <stateHandlerB+0x124>)
 800128e:	0019      	movs	r1, r3
 8001290:	2000      	movs	r0, #0
 8001292:	f006 ffd9 	bl	8008248 <I2C_LCD_WriteString>
		 I2C_LCD_WriteString(MyI2C_LCD, " State B");
 8001296:	4b34      	ldr	r3, [pc, #208]	; (8001368 <stateHandlerB+0x128>)
 8001298:	0019      	movs	r1, r3
 800129a:	2000      	movs	r0, #0
 800129c:	f006 ffd4 	bl	8008248 <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2100      	movs	r1, #0
 80012a4:	2000      	movs	r0, #0
 80012a6:	f006 ff7f 	bl	80081a8 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 80012aa:	4b30      	ldr	r3, [pc, #192]	; (800136c <stateHandlerB+0x12c>)
 80012ac:	0019      	movs	r1, r3
 80012ae:	2000      	movs	r0, #0
 80012b0:	f006 ffca 	bl	8008248 <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <stateHandlerB+0x130>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f001 f8c6 	bl	8002448 <HAL_ADC_Start_IT>
		 getPotValue();
 80012bc:	f7ff fe40 	bl	8000f40 <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 80012c0:	f7ff fe54 	bl	8000f6c <getAdcFromPot>
 80012c4:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <stateHandlerB+0x134>)
 80012c6:	23b4      	movs	r3, #180	; 0xb4
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	213c      	movs	r1, #60	; 0x3c
 80012ce:	f7ff fe93 	bl	8000ff8 <myMap>
 80012d2:	0003      	movs	r3, r0
 80012d4:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff fe7f 	bl	8000fdc <motorControl>
		 // adc towards 5v = 1hz

		 // LED1 and LED2 toggle
		 // B1 pressed = Turn off
		 // B1 not pressed = Turn on, blink at 1 Hz (Modify PSC)
		 if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin)){
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <stateHandlerB+0x138>)
 80012e4:	0019      	movs	r1, r3
 80012e6:	0010      	movs	r0, r2
 80012e8:	f001 fe9e 	bl	8003028 <HAL_GPIO_ReadPin>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d128      	bne.n	8001342 <stateHandlerB+0x102>

			 // Testing millis - time since program start
			 sprintf(msg2, "Time since program start (ms): %u\r\n", millisProgStart);
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <stateHandlerB+0x13c>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	001a      	movs	r2, r3
 80012f6:	4922      	ldr	r1, [pc, #136]	; (8001380 <stateHandlerB+0x140>)
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <stateHandlerB+0x124>)
 80012fa:	0018      	movs	r0, r3
 80012fc:	f007 f810 	bl	8008320 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <stateHandlerB+0x124>)
 8001302:	0018      	movs	r0, r3
 8001304:	f7fe ff08 	bl	8000118 <strlen>
 8001308:	0003      	movs	r3, r0
 800130a:	b29a      	uxth	r2, r3
 800130c:	2301      	movs	r3, #1
 800130e:	425b      	negs	r3, r3
 8001310:	4914      	ldr	r1, [pc, #80]	; (8001364 <stateHandlerB+0x124>)
 8001312:	481c      	ldr	r0, [pc, #112]	; (8001384 <stateHandlerB+0x144>)
 8001314:	f004 fc36 	bl	8005b84 <HAL_UART_Transmit>

			 // If LED1 is on, swap with LED2
			 if (ledOneFlag == 1){
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <stateHandlerB+0x110>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d106      	bne.n	800132e <stateHandlerB+0xee>
				 ledOneFlag = 0;
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <stateHandlerB+0x110>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <stateHandlerB+0x114>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e009      	b.n	8001342 <stateHandlerB+0x102>

			// If LED2 is on, swap with LED1
			 } else if (ledTwoFlag == 1){
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <stateHandlerB+0x114>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d105      	bne.n	8001342 <stateHandlerB+0x102>
				 ledTwoFlag = 0;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <stateHandlerB+0x114>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
				 ledOneFlag = 1;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <stateHandlerB+0x110>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
			 }
		 }

		 // No button pushes - Stay in State B
		 stateTracker = 2;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <stateHandlerB+0x148>)
 8001344:	2202      	movs	r2, #2
 8001346:	601a      	str	r2, [r3, #0]
	 }
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000004 	.word	0x20000004
 8001354:	20000008 	.word	0x20000008
 8001358:	08008d30 	.word	0x08008d30
 800135c:	200003f2 	.word	0x200003f2
 8001360:	08008d38 	.word	0x08008d38
 8001364:	200003b0 	.word	0x200003b0
 8001368:	08008d3c 	.word	0x08008d3c
 800136c:	08008d20 	.word	0x08008d20
 8001370:	20000084 	.word	0x20000084
 8001374:	00000fff 	.word	0x00000fff
 8001378:	50000800 	.word	0x50000800
 800137c:	200003f8 	.word	0x200003f8
 8001380:	08008d48 	.word	0x08008d48
 8001384:	20000304 	.word	0x20000304
 8001388:	200003f4 	.word	0x200003f4

0800138c <stateHandlerC>:

	 /* State Handler C */
	 void stateHandlerC(void){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

		 // Turn off LCD
		 I2C_LCD_NoDisplay(MyI2C_LCD);
 8001390:	2000      	movs	r0, #0
 8001392:	f006 ff9d 	bl	80082d0 <I2C_LCD_NoDisplay>

		 // Debug Message
		 sprintf(msg, "State C.\n\r");
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <stateHandlerC+0x44>)
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <stateHandlerC+0x48>)
 800139a:	0011      	movs	r1, r2
 800139c:	0018      	movs	r0, r3
 800139e:	f006 ffbf 	bl	8008320 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <stateHandlerC+0x48>)
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7fe feb7 	bl	8000118 <strlen>
 80013aa:	0003      	movs	r3, r0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	2301      	movs	r3, #1
 80013b0:	425b      	negs	r3, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <stateHandlerC+0x48>)
 80013b4:	4808      	ldr	r0, [pc, #32]	; (80013d8 <stateHandlerC+0x4c>)
 80013b6:	f004 fbe5 	bl	8005b84 <HAL_UART_Transmit>

		 // Test function to show State C. State C functionality yet to be added.
		 HAL_Delay(3000);
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <stateHandlerC+0x50>)
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 fc97 	bl	8001cf0 <HAL_Delay>

		 // Turn back into UART (Tx)
		 //MX_USART2_UART_Init();

		 // Return to State A
		 stateTracker = 1;
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <stateHandlerC+0x54>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
	 }
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	08008d6c 	.word	0x08008d6c
 80013d4:	20000398 	.word	0x20000398
 80013d8:	20000304 	.word	0x20000304
 80013dc:	00000bb8 	.word	0x00000bb8
 80013e0:	200003f4 	.word	0x200003f4

080013e4 <HAL_TIM_PeriodElapsedCallback>:

	 /* Controller Function for LED1, LED2 and LED3*/
	 // Description: Frequency currently determined by each timer's PSC value.
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

		 // TIM2 controls LED1
		 if(htim->Instance == TIM2){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d109      	bne.n	800140c <HAL_TIM_PeriodElapsedCallback+0x28>
			 if (ledOneFlag == 1){
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d14e      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0xba>
				 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	0018      	movs	r0, r3
 8001406:	f001 fe49 	bl	800309c <HAL_GPIO_TogglePin>
		 }
		 // TIM17 counts up to 1 ms
		 else if(htim->Instance == TIM17){
			 millisProgStart+=1;
		 }
	 }
 800140a:	e048      	b.n	800149e <HAL_TIM_PeriodElapsedCallback+0xba>
		 } else if(htim->Instance == TIM6){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10b      	bne.n	800142e <HAL_TIM_PeriodElapsedCallback+0x4a>
			 if (ledTwoFlag == 1) {
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d13f      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0xba>
				 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	01db      	lsls	r3, r3, #7
 8001422:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001424:	0019      	movs	r1, r3
 8001426:	0010      	movs	r0, r2
 8001428:	f001 fe38 	bl	800309c <HAL_GPIO_TogglePin>
	 }
 800142c:	e037      	b.n	800149e <HAL_TIM_PeriodElapsedCallback+0xba>
		 } else if(htim->Instance == TIM7){
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a22      	ldr	r2, [pc, #136]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d105      	bne.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x60>
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800143a:	2110      	movs	r1, #16
 800143c:	0018      	movs	r0, r3
 800143e:	f001 fe2d 	bl	800309c <HAL_GPIO_TogglePin>
	 }
 8001442:	e02c      	b.n	800149e <HAL_TIM_PeriodElapsedCallback+0xba>
		 } else if(htim->Instance == TIM14){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d11c      	bne.n	8001488 <HAL_TIM_PeriodElapsedCallback+0xa4>
			 if (stateTracker == 1){
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d123      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0xba>
				 if (uartFlag == 1){
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d11f      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0xba>
					 sprintf(msg2, "Autumn2024 MX1 SID: 24429298, ADC Reading: %hu\r\n", potValue);
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	001a      	movs	r2, r3
 8001464:	491a      	ldr	r1, [pc, #104]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001468:	0018      	movs	r0, r3
 800146a:	f006 ff59 	bl	8008320 <siprintf>
					 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001470:	0018      	movs	r0, r3
 8001472:	f7fe fe51 	bl	8000118 <strlen>
 8001476:	0003      	movs	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	2301      	movs	r3, #1
 800147c:	425b      	negs	r3, r3
 800147e:	4915      	ldr	r1, [pc, #84]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001480:	4815      	ldr	r0, [pc, #84]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001482:	f004 fb7f 	bl	8005b84 <HAL_UART_Transmit>
	 }
 8001486:	e00a      	b.n	800149e <HAL_TIM_PeriodElapsedCallback+0xba>
		 else if(htim->Instance == TIM17){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a13      	ldr	r2, [pc, #76]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d105      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0xba>
			 millisProgStart+=1;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800149c:	801a      	strh	r2, [r3, #0]
	 }
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	20000004 	.word	0x20000004
 80014ac:	50000800 	.word	0x50000800
 80014b0:	40001000 	.word	0x40001000
 80014b4:	20000008 	.word	0x20000008
 80014b8:	50000400 	.word	0x50000400
 80014bc:	40001400 	.word	0x40001400
 80014c0:	40002000 	.word	0x40002000
 80014c4:	200003f4 	.word	0x200003f4
 80014c8:	20000000 	.word	0x20000000
 80014cc:	200003f2 	.word	0x200003f2
 80014d0:	08008d78 	.word	0x08008d78
 80014d4:	200003b0 	.word	0x200003b0
 80014d8:	20000304 	.word	0x20000304
 80014dc:	40014800 	.word	0x40014800
 80014e0:	200003f8 	.word	0x200003f8

080014e4 <HAL_UART_RxCpltCallback>:

	 /* UART Receive Interrupt Handler */
	 // Handles receiving of bytes
	 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

		 sprintf(msg, "Value Received: %s\r\n", msgRx);
 80014ec:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <HAL_UART_RxCpltCallback+0x100>)
 80014ee:	493e      	ldr	r1, [pc, #248]	; (80015e8 <HAL_UART_RxCpltCallback+0x104>)
 80014f0:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 80014f2:	0018      	movs	r0, r3
 80014f4:	f006 ff14 	bl	8008320 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7fe fe0c 	bl	8000118 <strlen>
 8001500:	0003      	movs	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	2301      	movs	r3, #1
 8001506:	425b      	negs	r3, r3
 8001508:	4938      	ldr	r1, [pc, #224]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 800150a:	4839      	ldr	r0, [pc, #228]	; (80015f0 <HAL_UART_RxCpltCallback+0x10c>)
 800150c:	f004 fb3a 	bl	8005b84 <HAL_UART_Transmit>

		 if (strcmp(msgRx,"j") == 0) {
 8001510:	4a38      	ldr	r2, [pc, #224]	; (80015f4 <HAL_UART_RxCpltCallback+0x110>)
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_UART_RxCpltCallback+0x100>)
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f7fe fdf4 	bl	8000104 <strcmp>
 800151c:	1e03      	subs	r3, r0, #0
 800151e:	d14a      	bne.n	80015b6 <HAL_UART_RxCpltCallback+0xd2>
			 if (stateTracker == 1){
 8001520:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <HAL_UART_RxCpltCallback+0x114>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d133      	bne.n	8001590 <HAL_UART_RxCpltCallback+0xac>

				if (uartFlag == 0){
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_UART_RxCpltCallback+0x118>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d115      	bne.n	800155c <HAL_UART_RxCpltCallback+0x78>
					sprintf(msg, "Turning ON UART.\r\n");
 8001530:	4a33      	ldr	r2, [pc, #204]	; (8001600 <HAL_UART_RxCpltCallback+0x11c>)
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f006 fef2 	bl	8008320 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 800153e:	0018      	movs	r0, r3
 8001540:	f7fe fdea 	bl	8000118 <strlen>
 8001544:	0003      	movs	r3, r0
 8001546:	b29a      	uxth	r2, r3
 8001548:	2301      	movs	r3, #1
 800154a:	425b      	negs	r3, r3
 800154c:	4927      	ldr	r1, [pc, #156]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 800154e:	4828      	ldr	r0, [pc, #160]	; (80015f0 <HAL_UART_RxCpltCallback+0x10c>)
 8001550:	f004 fb18 	bl	8005b84 <HAL_UART_Transmit>
					uartFlag = 1;
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <HAL_UART_RxCpltCallback+0x118>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]
			 }
		 } else {
			 sprintf(msg, "Incorrect key.\r\n");
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
		 }
	 }
 800155a:	e03e      	b.n	80015da <HAL_UART_RxCpltCallback+0xf6>
				} else if (uartFlag == 1) {
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_UART_RxCpltCallback+0x118>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d13a      	bne.n	80015da <HAL_UART_RxCpltCallback+0xf6>
					sprintf(msg, "Turning OFF UART.\r\n");
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_UART_RxCpltCallback+0x120>)
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 8001568:	0011      	movs	r1, r2
 800156a:	0018      	movs	r0, r3
 800156c:	f006 fed8 	bl	8008320 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 8001572:	0018      	movs	r0, r3
 8001574:	f7fe fdd0 	bl	8000118 <strlen>
 8001578:	0003      	movs	r3, r0
 800157a:	b29a      	uxth	r2, r3
 800157c:	2301      	movs	r3, #1
 800157e:	425b      	negs	r3, r3
 8001580:	491a      	ldr	r1, [pc, #104]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 8001582:	481b      	ldr	r0, [pc, #108]	; (80015f0 <HAL_UART_RxCpltCallback+0x10c>)
 8001584:	f004 fafe 	bl	8005b84 <HAL_UART_Transmit>
					uartFlag = 0;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_UART_RxCpltCallback+0x118>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
	 }
 800158e:	e024      	b.n	80015da <HAL_UART_RxCpltCallback+0xf6>
				 sprintf(msg, "Cannot disable, not in State A.\r\n");
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_UART_RxCpltCallback+0x124>)
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 8001594:	0011      	movs	r1, r2
 8001596:	0018      	movs	r0, r3
 8001598:	f006 fec2 	bl	8008320 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 800159e:	0018      	movs	r0, r3
 80015a0:	f7fe fdba 	bl	8000118 <strlen>
 80015a4:	0003      	movs	r3, r0
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	2301      	movs	r3, #1
 80015aa:	425b      	negs	r3, r3
 80015ac:	490f      	ldr	r1, [pc, #60]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <HAL_UART_RxCpltCallback+0x10c>)
 80015b0:	f004 fae8 	bl	8005b84 <HAL_UART_Transmit>
	 }
 80015b4:	e011      	b.n	80015da <HAL_UART_RxCpltCallback+0xf6>
			 sprintf(msg, "Incorrect key.\r\n");
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <HAL_UART_RxCpltCallback+0x128>)
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f006 feaf 	bl	8008320 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7fe fda7 	bl	8000118 <strlen>
 80015ca:	0003      	movs	r3, r0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	2301      	movs	r3, #1
 80015d0:	425b      	negs	r3, r3
 80015d2:	4906      	ldr	r1, [pc, #24]	; (80015ec <HAL_UART_RxCpltCallback+0x108>)
 80015d4:	4806      	ldr	r0, [pc, #24]	; (80015f0 <HAL_UART_RxCpltCallback+0x10c>)
 80015d6:	f004 fad5 	bl	8005b84 <HAL_UART_Transmit>
	 }
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	200003ec 	.word	0x200003ec
 80015e8:	08008dac 	.word	0x08008dac
 80015ec:	20000398 	.word	0x20000398
 80015f0:	20000304 	.word	0x20000304
 80015f4:	08008dc4 	.word	0x08008dc4
 80015f8:	200003f4 	.word	0x200003f4
 80015fc:	20000000 	.word	0x20000000
 8001600:	08008dc8 	.word	0x08008dc8
 8001604:	08008ddc 	.word	0x08008ddc
 8001608:	08008df0 	.word	0x08008df0
 800160c:	08008e14 	.word	0x08008e14

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>
	...

0800161c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_MspInit+0x4c>)
 8001624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_MspInit+0x4c>)
 8001628:	2101      	movs	r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	2201      	movs	r2, #1
 8001634:	4013      	ands	r3, r2
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_MspInit+0x4c>)
 800163c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x4c>)
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0549      	lsls	r1, r1, #21
 8001644:	430a      	orrs	r2, r1
 8001646:	63da      	str	r2, [r3, #60]	; 0x3c
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_MspInit+0x4c>)
 800164a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	055b      	lsls	r3, r3, #21
 8001650:	4013      	ands	r3, r2
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	0018      	movs	r0, r3
 800165c:	f000 fb6c 	bl	8001d38 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b08b      	sub	sp, #44	; 0x2c
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	2414      	movs	r4, #20
 8001676:	193b      	adds	r3, r7, r4
 8001678:	0018      	movs	r0, r3
 800167a:	2314      	movs	r3, #20
 800167c:	001a      	movs	r2, r3
 800167e:	2100      	movs	r1, #0
 8001680:	f006 fe6e 	bl	8008360 <memset>
  if(hadc->Instance==ADC1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <HAL_ADC_MspInit+0x80>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d129      	bne.n	80016e2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_ADC_MspInit+0x84>)
 8001690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_ADC_MspInit+0x84>)
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	0349      	lsls	r1, r1, #13
 8001698:	430a      	orrs	r2, r1
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_ADC_MspInit+0x84>)
 800169e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	035b      	lsls	r3, r3, #13
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_ADC_MspInit+0x84>)
 80016ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_ADC_MspInit+0x84>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_ADC_MspInit+0x84>)
 80016b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ba:	2201      	movs	r2, #1
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c8:	193b      	adds	r3, r7, r4
 80016ca:	2203      	movs	r2, #3
 80016cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 80016d4:	193a      	adds	r2, r7, r4
 80016d6:	23a0      	movs	r3, #160	; 0xa0
 80016d8:	05db      	lsls	r3, r3, #23
 80016da:	0011      	movs	r1, r2
 80016dc:	0018      	movs	r0, r3
 80016de:	f001 fb3f 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b00b      	add	sp, #44	; 0x2c
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40012400 	.word	0x40012400
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b097      	sub	sp, #92	; 0x5c
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	2344      	movs	r3, #68	; 0x44
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	0018      	movs	r0, r3
 8001702:	2314      	movs	r3, #20
 8001704:	001a      	movs	r2, r3
 8001706:	2100      	movs	r1, #0
 8001708:	f006 fe2a 	bl	8008360 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	2410      	movs	r4, #16
 800170e:	193b      	adds	r3, r7, r4
 8001710:	0018      	movs	r0, r3
 8001712:	2334      	movs	r3, #52	; 0x34
 8001714:	001a      	movs	r2, r3
 8001716:	2100      	movs	r1, #0
 8001718:	f006 fe22 	bl	8008360 <memset>
  if(hi2c->Instance==I2C1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_I2C_MspInit+0xb8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d13e      	bne.n	80017a4 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001726:	193b      	adds	r3, r7, r4
 8001728:	2220      	movs	r2, #32
 800172a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800172c:	193b      	adds	r3, r7, r4
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001732:	193b      	adds	r3, r7, r4
 8001734:	0018      	movs	r0, r3
 8001736:	f002 fe83 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	1e03      	subs	r3, r0, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800173e:	f7ff ff67 	bl	8001610 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_I2C_MspInit+0xbc>)
 8001744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_I2C_MspInit+0xbc>)
 8001748:	2102      	movs	r1, #2
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_I2C_MspInit+0xbc>)
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800175a:	2144      	movs	r1, #68	; 0x44
 800175c:	187b      	adds	r3, r7, r1
 800175e:	22c0      	movs	r2, #192	; 0xc0
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001764:	187b      	adds	r3, r7, r1
 8001766:	2212      	movs	r2, #18
 8001768:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2206      	movs	r2, #6
 800177a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	187b      	adds	r3, r7, r1
 800177e:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <HAL_I2C_MspInit+0xc0>)
 8001780:	0019      	movs	r1, r3
 8001782:	0010      	movs	r0, r2
 8001784:	f001 faec 	bl	8002d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_I2C_MspInit+0xbc>)
 800178a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_I2C_MspInit+0xbc>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	0389      	lsls	r1, r1, #14
 8001792:	430a      	orrs	r2, r1
 8001794:	63da      	str	r2, [r3, #60]	; 0x3c
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_I2C_MspInit+0xbc>)
 8001798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	039b      	lsls	r3, r3, #14
 800179e:	4013      	ands	r3, r2
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b017      	add	sp, #92	; 0x5c
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	40005400 	.word	0x40005400
 80017b0:	40021000 	.word	0x40021000
 80017b4:	50000400 	.word	0x50000400

080017b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d114      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 80017ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017d0:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 80017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	200f      	movs	r0, #15
 80017ea:	f001 f9bb 	bl	8002b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f001 f9cd 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80017f4:	e07c      	b.n	80018f0 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM3)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a40      	ldr	r2, [pc, #256]	; (80018fc <HAL_TIM_Base_MspInit+0x144>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d10c      	bne.n	800181a <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001800:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 8001802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 8001806:	2102      	movs	r1, #2
 8001808:	430a      	orrs	r2, r1
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
 800180c:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
 8001816:	69bb      	ldr	r3, [r7, #24]
}
 8001818:	e06a      	b.n	80018f0 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM6)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a38      	ldr	r2, [pc, #224]	; (8001900 <HAL_TIM_Base_MspInit+0x148>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d114      	bne.n	800184e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 8001826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001828:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 800182a:	2110      	movs	r1, #16
 800182c:	430a      	orrs	r2, r1
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001830:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	2210      	movs	r2, #16
 8001836:	4013      	ands	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2011      	movs	r0, #17
 8001842:	f001 f98f 	bl	8002b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8001846:	2011      	movs	r0, #17
 8001848:	f001 f9a1 	bl	8002b8e <HAL_NVIC_EnableIRQ>
}
 800184c:	e050      	b.n	80018f0 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM7)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a2c      	ldr	r2, [pc, #176]	; (8001904 <HAL_TIM_Base_MspInit+0x14c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d114      	bne.n	8001882 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 800185a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 800185e:	2120      	movs	r1, #32
 8001860:	430a      	orrs	r2, r1
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 8001866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001868:	2220      	movs	r2, #32
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2012      	movs	r0, #18
 8001876:	f001 f975 	bl	8002b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 800187a:	2012      	movs	r0, #18
 800187c:	f001 f987 	bl	8002b8e <HAL_NVIC_EnableIRQ>
}
 8001880:	e036      	b.n	80018f0 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM14)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a20      	ldr	r2, [pc, #128]	; (8001908 <HAL_TIM_Base_MspInit+0x150>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d116      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 800188e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	0209      	lsls	r1, r1, #8
 8001896:	430a      	orrs	r2, r1
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 800189c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	4013      	ands	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	2013      	movs	r0, #19
 80018ae:	f001 f959 	bl	8002b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80018b2:	2013      	movs	r0, #19
 80018b4:	f001 f96b 	bl	8002b8e <HAL_NVIC_EnableIRQ>
}
 80018b8:	e01a      	b.n	80018f0 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM17)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a13      	ldr	r2, [pc, #76]	; (800190c <HAL_TIM_Base_MspInit+0x154>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d115      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 80018c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	02c9      	lsls	r1, r1, #11
 80018ce:	430a      	orrs	r2, r1
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_TIM_Base_MspInit+0x140>)
 80018d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	02db      	lsls	r3, r3, #11
 80018da:	4013      	ands	r3, r2
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2016      	movs	r0, #22
 80018e6:	f001 f93d 	bl	8002b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80018ea:	2016      	movs	r0, #22
 80018ec:	f001 f94f 	bl	8002b8e <HAL_NVIC_EnableIRQ>
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b008      	add	sp, #32
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40000400 	.word	0x40000400
 8001900:	40001000 	.word	0x40001000
 8001904:	40001400 	.word	0x40001400
 8001908:	40002000 	.word	0x40002000
 800190c:	40014800 	.word	0x40014800

08001910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	240c      	movs	r4, #12
 800191a:	193b      	adds	r3, r7, r4
 800191c:	0018      	movs	r0, r3
 800191e:	2314      	movs	r3, #20
 8001920:	001a      	movs	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	f006 fd1c 	bl	8008360 <memset>
  if(htim->Instance==TIM3)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_TIM_MspPostInit+0x70>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d122      	bne.n	8001978 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_TIM_MspPostInit+0x74>)
 8001934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_TIM_MspPostInit+0x74>)
 8001938:	2101      	movs	r1, #1
 800193a:	430a      	orrs	r2, r1
 800193c:	635a      	str	r2, [r3, #52]	; 0x34
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_TIM_MspPostInit+0x74>)
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001942:	2201      	movs	r2, #1
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800194a:	0021      	movs	r1, r4
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2240      	movs	r2, #64	; 0x40
 8001950:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2202      	movs	r2, #2
 8001956:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001964:	187b      	adds	r3, r7, r1
 8001966:	2201      	movs	r2, #1
 8001968:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	187a      	adds	r2, r7, r1
 800196c:	23a0      	movs	r3, #160	; 0xa0
 800196e:	05db      	lsls	r3, r3, #23
 8001970:	0011      	movs	r1, r2
 8001972:	0018      	movs	r0, r3
 8001974:	f001 f9f4 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b009      	add	sp, #36	; 0x24
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	40000400 	.word	0x40000400
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b097      	sub	sp, #92	; 0x5c
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	2344      	movs	r3, #68	; 0x44
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	0018      	movs	r0, r3
 8001996:	2314      	movs	r3, #20
 8001998:	001a      	movs	r2, r3
 800199a:	2100      	movs	r1, #0
 800199c:	f006 fce0 	bl	8008360 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a0:	2410      	movs	r4, #16
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	0018      	movs	r0, r3
 80019a6:	2334      	movs	r3, #52	; 0x34
 80019a8:	001a      	movs	r2, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	f006 fcd8 	bl	8008360 <memset>
  if(huart->Instance==USART2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <HAL_UART_MspInit+0xc8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d146      	bne.n	8001a48 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	2202      	movs	r2, #2
 80019be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	0018      	movs	r0, r3
 80019ca:	f002 fd39 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019d2:	f7ff fe1d 	bl	8001610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_UART_MspInit+0xcc>)
 80019d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_UART_MspInit+0xcc>)
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	0289      	lsls	r1, r1, #10
 80019e0:	430a      	orrs	r2, r1
 80019e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_UART_MspInit+0xcc>)
 80019e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_UART_MspInit+0xcc>)
 80019f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_UART_MspInit+0xcc>)
 80019f8:	2101      	movs	r1, #1
 80019fa:	430a      	orrs	r2, r1
 80019fc:	635a      	str	r2, [r3, #52]	; 0x34
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_UART_MspInit+0xcc>)
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	2201      	movs	r2, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001a0a:	2144      	movs	r1, #68	; 0x44
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2202      	movs	r2, #2
 8001a16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2201      	movs	r2, #1
 8001a28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	187a      	adds	r2, r7, r1
 8001a2c:	23a0      	movs	r3, #160	; 0xa0
 8001a2e:	05db      	lsls	r3, r3, #23
 8001a30:	0011      	movs	r1, r2
 8001a32:	0018      	movs	r0, r3
 8001a34:	f001 f994 	bl	8002d60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	201c      	movs	r0, #28
 8001a3e:	f001 f891 	bl	8002b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a42:	201c      	movs	r0, #28
 8001a44:	f001 f8a3 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a48:	46c0      	nop			; (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b017      	add	sp, #92	; 0x5c
 8001a4e:	bd90      	pop	{r4, r7, pc}
 8001a50:	40004400 	.word	0x40004400
 8001a54:	40021000 	.word	0x40021000

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7c:	f000 f91c 	bl	8001cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <TIM2_IRQHandler+0x14>)
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f003 f88c 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	2000013c 	.word	0x2000013c

08001aa0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f003 f880 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	200001d4 	.word	0x200001d4

08001ab8 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <TIM7_LPTIM2_IRQHandler+0x14>)
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f003 f874 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	20000220 	.word	0x20000220

08001ad0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <TIM14_IRQHandler+0x14>)
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f003 f868 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	2000026c 	.word	0x2000026c

08001ae8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <TIM17_IRQHandler+0x14>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f003 f85c 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	200002b8 	.word	0x200002b8

08001b00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <USART2_IRQHandler+0x14>)
 8001b06:	0018      	movs	r0, r3
 8001b08:	f004 f93e 	bl	8005d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	20000304 	.word	0x20000304

08001b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <_sbrk+0x5c>)
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <_sbrk+0x60>)
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <_sbrk+0x64>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <_sbrk+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	18d3      	adds	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d207      	bcs.n	8001b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b48:	f006 fc12 	bl	8008370 <__errno>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	425b      	negs	r3, r3
 8001b56:	e009      	b.n	8001b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	18d2      	adds	r2, r2, r3
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <_sbrk+0x64>)
 8001b68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b006      	add	sp, #24
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20009000 	.word	0x20009000
 8001b78:	00000400 	.word	0x00000400
 8001b7c:	200003fc 	.word	0x200003fc
 8001b80:	20000550 	.word	0x20000550

08001b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b94:	f7ff fff6 	bl	8001b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	; (8001bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <LoopForever+0xe>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	; (8001bdc <LoopForever+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bbe:	f006 fbdd 	bl	800837c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001bc2:	f7fe fd47 	bl	8000654 <main>

08001bc6 <LoopForever>:

LoopForever:
  b LoopForever
 8001bc6:	e7fe      	b.n	8001bc6 <LoopForever>
  ldr   r0, =_estack
 8001bc8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001bd4:	08008f64 	.word	0x08008f64
  ldr r2, =_sbss
 8001bd8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001bdc:	20000550 	.word	0x20000550

08001be0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_COMP_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_Init+0x3c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_Init+0x3c>)
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	0049      	lsls	r1, r1, #1
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f000 f810 	bl	8001c24 <HAL_InitTick>
 8001c04:	1e03      	subs	r3, r0, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c08:	1dfb      	adds	r3, r7, #7
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
 8001c0e:	e001      	b.n	8001c14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fd04 	bl	800161c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c14:	1dfb      	adds	r3, r7, #7
 8001c16:	781b      	ldrb	r3, [r3, #0]
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b002      	add	sp, #8
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_InitTick+0x88>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d02b      	beq.n	8001c94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_InitTick+0x8c>)
 8001c3e:	681c      	ldr	r4, [r3, #0]
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_InitTick+0x88>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	0019      	movs	r1, r3
 8001c46:	23fa      	movs	r3, #250	; 0xfa
 8001c48:	0098      	lsls	r0, r3, #2
 8001c4a:	f7fe fa77 	bl	800013c <__udivsi3>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	0019      	movs	r1, r3
 8001c52:	0020      	movs	r0, r4
 8001c54:	f7fe fa72 	bl	800013c <__udivsi3>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 ffa7 	bl	8002bae <HAL_SYSTICK_Config>
 8001c60:	1e03      	subs	r3, r0, #0
 8001c62:	d112      	bne.n	8001c8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d80a      	bhi.n	8001c80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	425b      	negs	r3, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 ff76 	bl	8002b64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_InitTick+0x90>)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e00d      	b.n	8001c9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c80:	230f      	movs	r3, #15
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e008      	b.n	8001c9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c8a:	230f      	movs	r3, #15
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e003      	b.n	8001c9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c94:	230f      	movs	r3, #15
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b005      	add	sp, #20
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	20000014 	.word	0x20000014
 8001cb0:	2000000c 	.word	0x2000000c
 8001cb4:	20000010 	.word	0x20000010

08001cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_IncTick+0x1c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	001a      	movs	r2, r3
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	18d2      	adds	r2, r2, r3
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_IncTick+0x20>)
 8001cca:	601a      	str	r2, [r3, #0]
}
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	20000014 	.word	0x20000014
 8001cd8:	20000400 	.word	0x20000400

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b02      	ldr	r3, [pc, #8]	; (8001cec <HAL_GetTick+0x10>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	20000400 	.word	0x20000400

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff fff0 	bl	8001cdc <HAL_GetTick>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3301      	adds	r3, #1
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_Delay+0x44>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	001a      	movs	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	189b      	adds	r3, r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	f7ff ffe0 	bl	8001cdc <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	20000014 	.word	0x20000014

08001d38 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b002      	add	sp, #8
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	fffff9ff 	.word	0xfffff9ff

08001d64 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001d74:	401a      	ands	r2, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	fe3fffff 	.word	0xfe3fffff

08001d8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	23e0      	movs	r3, #224	; 0xe0
 8001d9a:	045b      	lsls	r3, r3, #17
 8001d9c:	4013      	ands	r3, r2
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	b002      	add	sp, #8
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	2104      	movs	r1, #4
 8001dba:	400a      	ands	r2, r1
 8001dbc:	2107      	movs	r1, #7
 8001dbe:	4091      	lsls	r1, r2
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	43d2      	mvns	r2, r2
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2104      	movs	r1, #4
 8001dca:	400b      	ands	r3, r1
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4099      	lsls	r1, r3
 8001dd0:	000b      	movs	r3, r1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b004      	add	sp, #16
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	2104      	movs	r1, #4
 8001df2:	400a      	ands	r2, r1
 8001df4:	2107      	movs	r1, #7
 8001df6:	4091      	lsls	r1, r2
 8001df8:	000a      	movs	r2, r1
 8001dfa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2104      	movs	r1, #4
 8001e00:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e02:	40da      	lsrs	r2, r3
 8001e04:	0013      	movs	r3, r2
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	23c0      	movs	r3, #192	; 0xc0
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d101      	bne.n	8001e26 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	211f      	movs	r1, #31
 8001e44:	400a      	ands	r2, r1
 8001e46:	210f      	movs	r1, #15
 8001e48:	4091      	lsls	r1, r2
 8001e4a:	000a      	movs	r2, r1
 8001e4c:	43d2      	mvns	r2, r2
 8001e4e:	401a      	ands	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	210f      	movs	r1, #15
 8001e56:	4019      	ands	r1, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	201f      	movs	r0, #31
 8001e5c:	4003      	ands	r3, r0
 8001e5e:	4099      	lsls	r1, r3
 8001e60:	000b      	movs	r3, r1
 8001e62:	431a      	orrs	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b004      	add	sp, #16
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	035b      	lsls	r3, r3, #13
 8001e82:	0b5b      	lsrs	r3, r3, #13
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	0352      	lsls	r2, r2, #13
 8001ea4:	0b52      	lsrs	r2, r2, #13
 8001ea6:	43d2      	mvns	r2, r2
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b002      	add	sp, #8
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	0212      	lsls	r2, r2, #8
 8001ecc:	43d2      	mvns	r2, r2
 8001ece:	401a      	ands	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
 8001ed8:	4904      	ldr	r1, [pc, #16]	; (8001eec <LL_ADC_SetChannelSamplingTime+0x34>)
 8001eda:	400b      	ands	r3, r1
 8001edc:	431a      	orrs	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	07ffff00 	.word	0x07ffff00

08001ef0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <LL_ADC_EnableInternalRegulator+0x24>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	0552      	lsls	r2, r2, #21
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	6fffffe8 	.word	0x6fffffe8

08001f18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	055b      	lsls	r3, r3, #21
 8001f28:	401a      	ands	r2, r3
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	055b      	lsls	r3, r3, #21
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d101      	bne.n	8001f36 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <LL_ADC_Enable+0x20>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2201      	movs	r2, #1
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	7fffffe8 	.word	0x7fffffe8

08001f64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <LL_ADC_IsEnabled+0x18>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_ADC_IsEnabled+0x1a>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b002      	add	sp, #8
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <LL_ADC_REG_StartConversion+0x20>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	2204      	movs	r2, #4
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	7fffffe8 	.word	0x7fffffe8

08001fac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2204      	movs	r2, #4
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d101      	bne.n	8001fc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	231f      	movs	r3, #31
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e17f      	b.n	80022f6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10a      	bne.n	8002014 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f7ff fb33 	bl	800166c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2254      	movs	r2, #84	; 0x54
 8002010:	2100      	movs	r1, #0
 8002012:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0018      	movs	r0, r3
 800201a:	f7ff ff7d 	bl	8001f18 <LL_ADC_IsInternalRegulatorEnabled>
 800201e:	1e03      	subs	r3, r0, #0
 8002020:	d115      	bne.n	800204e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0018      	movs	r0, r3
 8002028:	f7ff ff62 	bl	8001ef0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800202c:	4bb4      	ldr	r3, [pc, #720]	; (8002300 <HAL_ADC_Init+0x330>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	49b4      	ldr	r1, [pc, #720]	; (8002304 <HAL_ADC_Init+0x334>)
 8002032:	0018      	movs	r0, r3
 8002034:	f7fe f882 	bl	800013c <__udivsi3>
 8002038:	0003      	movs	r3, r0
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002040:	e002      	b.n	8002048 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3b01      	subs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f9      	bne.n	8002042 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	0018      	movs	r0, r3
 8002054:	f7ff ff60 	bl	8001f18 <LL_ADC_IsInternalRegulatorEnabled>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d10f      	bne.n	800207c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	2210      	movs	r2, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2201      	movs	r2, #1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002074:	231f      	movs	r3, #31
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff ff93 	bl	8001fac <LL_ADC_REG_IsConversionOngoing>
 8002086:	0003      	movs	r3, r0
 8002088:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	2210      	movs	r2, #16
 8002090:	4013      	ands	r3, r2
 8002092:	d000      	beq.n	8002096 <HAL_ADC_Init+0xc6>
 8002094:	e122      	b.n	80022dc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d000      	beq.n	800209e <HAL_ADC_Init+0xce>
 800209c:	e11e      	b.n	80022dc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	4a99      	ldr	r2, [pc, #612]	; (8002308 <HAL_ADC_Init+0x338>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	2202      	movs	r2, #2
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7ff ff56 	bl	8001f64 <LL_ADC_IsEnabled>
 80020b8:	1e03      	subs	r3, r0, #0
 80020ba:	d000      	beq.n	80020be <HAL_ADC_Init+0xee>
 80020bc:	e0ad      	b.n	800221a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7e1b      	ldrb	r3, [r3, #24]
 80020c6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80020c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7e5b      	ldrb	r3, [r3, #25]
 80020ce:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80020d0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7e9b      	ldrb	r3, [r3, #26]
 80020d6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80020d8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_ADC_Init+0x118>
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	015b      	lsls	r3, r3, #5
 80020e6:	e000      	b.n	80020ea <HAL_ADC_Init+0x11a>
 80020e8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80020ea:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80020f0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da04      	bge.n	8002104 <HAL_ADC_Init+0x134>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	e001      	b.n	8002108 <HAL_ADC_Init+0x138>
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002108:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	5c5b      	ldrb	r3, [r3, r1]
 8002110:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002112:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	5c9b      	ldrb	r3, [r3, r2]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d115      	bne.n	8002150 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7e9b      	ldrb	r3, [r3, #26]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	0252      	lsls	r2, r2, #9
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e00b      	b.n	8002150 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	2220      	movs	r2, #32
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	2201      	movs	r2, #1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215c:	23e0      	movs	r3, #224	; 0xe0
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002166:	4313      	orrs	r3, r2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a65      	ldr	r2, [pc, #404]	; (800230c <HAL_ADC_Init+0x33c>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	430a      	orrs	r2, r1
 8002182:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	0f9b      	lsrs	r3, r3, #30
 800218a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002190:	4313      	orrs	r3, r2
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	223c      	movs	r2, #60	; 0x3c
 800219c:	5c9b      	ldrb	r3, [r3, r2]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d111      	bne.n	80021c6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0f9b      	lsrs	r3, r3, #30
 80021a8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80021ae:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80021b4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80021ba:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	2201      	movs	r2, #1
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	4a50      	ldr	r2, [pc, #320]	; (8002310 <HAL_ADC_Init+0x340>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	430a      	orrs	r2, r1
 80021da:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	23c0      	movs	r3, #192	; 0xc0
 80021e2:	061b      	lsls	r3, r3, #24
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d018      	beq.n	800221a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	05db      	lsls	r3, r3, #23
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d012      	beq.n	800221a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	061b      	lsls	r3, r3, #24
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d00c      	beq.n	800221a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002200:	4b44      	ldr	r3, [pc, #272]	; (8002314 <HAL_ADC_Init+0x344>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a44      	ldr	r2, [pc, #272]	; (8002318 <HAL_ADC_Init+0x348>)
 8002206:	4013      	ands	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	23f0      	movs	r3, #240	; 0xf0
 8002210:	039b      	lsls	r3, r3, #14
 8002212:	401a      	ands	r2, r3
 8002214:	4b3f      	ldr	r3, [pc, #252]	; (8002314 <HAL_ADC_Init+0x344>)
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002222:	001a      	movs	r2, r3
 8002224:	2100      	movs	r1, #0
 8002226:	f7ff fdbe 	bl	8001da6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	493a      	ldr	r1, [pc, #232]	; (800231c <HAL_ADC_Init+0x34c>)
 8002234:	001a      	movs	r2, r3
 8002236:	f7ff fdb6 	bl	8001da6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2110      	movs	r1, #16
 800224e:	4249      	negs	r1, r1
 8002250:	430a      	orrs	r2, r1
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
 8002254:	e018      	b.n	8002288 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	039b      	lsls	r3, r3, #14
 800225e:	429a      	cmp	r2, r3
 8002260:	d112      	bne.n	8002288 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	3b01      	subs	r3, #1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	221c      	movs	r2, #28
 8002272:	4013      	ands	r3, r2
 8002274:	2210      	movs	r2, #16
 8002276:	4252      	negs	r2, r2
 8002278:	409a      	lsls	r2, r3
 800227a:	0011      	movs	r1, r2
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2100      	movs	r1, #0
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff fda6 	bl	8001de0 <LL_ADC_GetSamplingTimeCommonChannels>
 8002294:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800229a:	429a      	cmp	r2, r3
 800229c:	d10b      	bne.n	80022b6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	2203      	movs	r2, #3
 80022aa:	4393      	bics	r3, r2
 80022ac:	2201      	movs	r2, #1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022b4:	e01c      	b.n	80022f0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	2212      	movs	r2, #18
 80022bc:	4393      	bics	r3, r2
 80022be:	2210      	movs	r2, #16
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	2201      	movs	r2, #1
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80022d2:	231f      	movs	r3, #31
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80022da:	e009      	b.n	80022f0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	2210      	movs	r2, #16
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022e8:	231f      	movs	r3, #31
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80022f0:	231f      	movs	r3, #31
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	781b      	ldrb	r3, [r3, #0]
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b008      	add	sp, #32
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	2000000c 	.word	0x2000000c
 8002304:	00030d40 	.word	0x00030d40
 8002308:	fffffefd 	.word	0xfffffefd
 800230c:	ffde0201 	.word	0xffde0201
 8002310:	1ffffc02 	.word	0x1ffffc02
 8002314:	40012708 	.word	0x40012708
 8002318:	ffc3ffff 	.word	0xffc3ffff
 800231c:	07ffff04 	.word	0x07ffff04

08002320 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d102      	bne.n	8002338 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002332:	2308      	movs	r3, #8
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	e00f      	b.n	8002358 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	4013      	ands	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	2220      	movs	r2, #32
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e072      	b.n	800243a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002354:	2304      	movs	r3, #4
 8002356:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002358:	f7ff fcc0 	bl	8001cdc <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002360:	e01f      	b.n	80023a2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	d01c      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002368:	f7ff fcb8 	bl	8001cdc <HAL_GetTick>
 800236c:	0002      	movs	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d302      	bcc.n	800237e <HAL_ADC_PollForConversion+0x5e>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d111      	bne.n	80023a2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4013      	ands	r3, r2
 8002388:	d10b      	bne.n	80023a2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	2204      	movs	r2, #4
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2254      	movs	r2, #84	; 0x54
 800239a:	2100      	movs	r1, #0
 800239c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e04b      	b.n	800243a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4013      	ands	r3, r2
 80023ac:	d0d9      	beq.n	8002362 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7ff fd24 	bl	8001e0e <LL_ADC_REG_IsTriggerSourceSWStart>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d02e      	beq.n	8002428 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7e9b      	ldrb	r3, [r3, #26]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d12a      	bne.n	8002428 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2208      	movs	r2, #8
 80023da:	4013      	ands	r3, r2
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d123      	bne.n	8002428 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff fde1 	bl	8001fac <LL_ADC_REG_IsConversionOngoing>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d110      	bne.n	8002410 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	210c      	movs	r1, #12
 80023fa:	438a      	bics	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	4a10      	ldr	r2, [pc, #64]	; (8002444 <HAL_ADC_PollForConversion+0x124>)
 8002404:	4013      	ands	r3, r2
 8002406:	2201      	movs	r2, #1
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	659a      	str	r2, [r3, #88]	; 0x58
 800240e:	e00b      	b.n	8002428 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	2220      	movs	r2, #32
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2201      	movs	r2, #1
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7e1b      	ldrb	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	220c      	movs	r2, #12
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	0018      	movs	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			; (mov r8, r8)
 8002444:	fffffefe 	.word	0xfffffefe

08002448 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff fda9 	bl	8001fac <LL_ADC_REG_IsConversionOngoing>
 800245a:	1e03      	subs	r3, r0, #0
 800245c:	d15f      	bne.n	800251e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2254      	movs	r2, #84	; 0x54
 8002462:	5c9b      	ldrb	r3, [r3, r2]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_ADC_Start_IT+0x24>
 8002468:	2302      	movs	r3, #2
 800246a:	e05f      	b.n	800252c <HAL_ADC_Start_IT+0xe4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2254      	movs	r2, #84	; 0x54
 8002470:	2101      	movs	r1, #1
 8002472:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002474:	250f      	movs	r5, #15
 8002476:	197c      	adds	r4, r7, r5
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fa40 	bl	8002900 <ADC_Enable>
 8002480:	0003      	movs	r3, r0
 8002482:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002484:	197b      	adds	r3, r7, r5
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d143      	bne.n	8002514 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	4a28      	ldr	r2, [pc, #160]	; (8002534 <HAL_ADC_Start_IT+0xec>)
 8002492:	4013      	ands	r3, r2
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	0052      	lsls	r2, r2, #1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	221c      	movs	r2, #28
 80024aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2254      	movs	r2, #84	; 0x54
 80024b0:	2100      	movs	r1, #0
 80024b2:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	211c      	movs	r1, #28
 80024c0:	438a      	bics	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d108      	bne.n	80024de <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2108      	movs	r1, #8
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]
          break;
 80024dc:	e008      	b.n	80024f0 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2104      	movs	r1, #4
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
          break;
 80024ee:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d107      	bne.n	8002508 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2110      	movs	r1, #16
 8002504:	430a      	orrs	r2, r1
 8002506:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff fd3b 	bl	8001f88 <LL_ADC_REG_StartConversion>
 8002512:	e008      	b.n	8002526 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2254      	movs	r2, #84	; 0x54
 8002518:	2100      	movs	r1, #0
 800251a:	5499      	strb	r1, [r3, r2]
 800251c:	e003      	b.n	8002526 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800251e:	230f      	movs	r3, #15
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002526:	230f      	movs	r3, #15
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	781b      	ldrb	r3, [r3, #0]
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b004      	add	sp, #16
 8002532:	bdb0      	pop	{r4, r5, r7, pc}
 8002534:	fffff0fe 	.word	0xfffff0fe

08002538 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b002      	add	sp, #8
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255a:	2317      	movs	r3, #23
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2254      	movs	r2, #84	; 0x54
 800256a:	5c9b      	ldrb	r3, [r3, r2]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x24>
 8002570:	2302      	movs	r3, #2
 8002572:	e1c0      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x3a6>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2254      	movs	r2, #84	; 0x54
 8002578:	2101      	movs	r1, #1
 800257a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff fd13 	bl	8001fac <LL_ADC_REG_IsConversionOngoing>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d000      	beq.n	800258c <HAL_ADC_ConfigChannel+0x3c>
 800258a:	e1a3      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d100      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x46>
 8002594:	e143      	b.n	800281e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	429a      	cmp	r2, r3
 80025a0:	d004      	beq.n	80025ac <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80025a6:	4ac1      	ldr	r2, [pc, #772]	; (80028ac <HAL_ADC_ConfigChannel+0x35c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d108      	bne.n	80025be <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0019      	movs	r1, r3
 80025b6:	0010      	movs	r0, r2
 80025b8:	f7ff fc5a 	bl	8001e70 <LL_ADC_REG_SetSequencerChAdd>
 80025bc:	e0c9      	b.n	8002752 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	211f      	movs	r1, #31
 80025c8:	400b      	ands	r3, r1
 80025ca:	210f      	movs	r1, #15
 80025cc:	4099      	lsls	r1, r3
 80025ce:	000b      	movs	r3, r1
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4013      	ands	r3, r2
 80025d4:	0019      	movs	r1, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	035b      	lsls	r3, r3, #13
 80025dc:	0b5b      	lsrs	r3, r3, #13
 80025de:	d105      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x9c>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	221f      	movs	r2, #31
 80025e8:	4013      	ands	r3, r2
 80025ea:	e098      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	d000      	beq.n	80025f8 <HAL_ADC_ConfigChannel+0xa8>
 80025f6:	e091      	b.n	800271c <HAL_ADC_ConfigChannel+0x1cc>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2202      	movs	r2, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	d000      	beq.n	8002604 <HAL_ADC_ConfigChannel+0xb4>
 8002602:	e089      	b.n	8002718 <HAL_ADC_ConfigChannel+0x1c8>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2204      	movs	r2, #4
 800260a:	4013      	ands	r3, r2
 800260c:	d000      	beq.n	8002610 <HAL_ADC_ConfigChannel+0xc0>
 800260e:	e081      	b.n	8002714 <HAL_ADC_ConfigChannel+0x1c4>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2208      	movs	r2, #8
 8002616:	4013      	ands	r3, r2
 8002618:	d000      	beq.n	800261c <HAL_ADC_ConfigChannel+0xcc>
 800261a:	e079      	b.n	8002710 <HAL_ADC_ConfigChannel+0x1c0>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2210      	movs	r2, #16
 8002622:	4013      	ands	r3, r2
 8002624:	d000      	beq.n	8002628 <HAL_ADC_ConfigChannel+0xd8>
 8002626:	e071      	b.n	800270c <HAL_ADC_ConfigChannel+0x1bc>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2220      	movs	r2, #32
 800262e:	4013      	ands	r3, r2
 8002630:	d000      	beq.n	8002634 <HAL_ADC_ConfigChannel+0xe4>
 8002632:	e069      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1b8>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	4013      	ands	r3, r2
 800263c:	d000      	beq.n	8002640 <HAL_ADC_ConfigChannel+0xf0>
 800263e:	e061      	b.n	8002704 <HAL_ADC_ConfigChannel+0x1b4>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	4013      	ands	r3, r2
 8002648:	d000      	beq.n	800264c <HAL_ADC_ConfigChannel+0xfc>
 800264a:	e059      	b.n	8002700 <HAL_ADC_ConfigChannel+0x1b0>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4013      	ands	r3, r2
 8002656:	d151      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1ac>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d149      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x1a8>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4013      	ands	r3, r2
 800266e:	d141      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1a4>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4013      	ands	r3, r2
 800267a:	d139      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1a0>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	015b      	lsls	r3, r3, #5
 8002684:	4013      	ands	r3, r2
 8002686:	d131      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x19c>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	019b      	lsls	r3, r3, #6
 8002690:	4013      	ands	r3, r2
 8002692:	d129      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x198>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	01db      	lsls	r3, r3, #7
 800269c:	4013      	ands	r3, r2
 800269e:	d121      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x194>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	4013      	ands	r3, r2
 80026aa:	d119      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x190>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	025b      	lsls	r3, r3, #9
 80026b4:	4013      	ands	r3, r2
 80026b6:	d111      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x18c>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	029b      	lsls	r3, r3, #10
 80026c0:	4013      	ands	r3, r2
 80026c2:	d109      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x188>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	02db      	lsls	r3, r3, #11
 80026cc:	4013      	ands	r3, r2
 80026ce:	d001      	beq.n	80026d4 <HAL_ADC_ConfigChannel+0x184>
 80026d0:	2312      	movs	r3, #18
 80026d2:	e024      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026d4:	2300      	movs	r3, #0
 80026d6:	e022      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026d8:	2311      	movs	r3, #17
 80026da:	e020      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026dc:	2310      	movs	r3, #16
 80026de:	e01e      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026e0:	230f      	movs	r3, #15
 80026e2:	e01c      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026e4:	230e      	movs	r3, #14
 80026e6:	e01a      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026e8:	230d      	movs	r3, #13
 80026ea:	e018      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026ec:	230c      	movs	r3, #12
 80026ee:	e016      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026f0:	230b      	movs	r3, #11
 80026f2:	e014      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026f4:	230a      	movs	r3, #10
 80026f6:	e012      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026f8:	2309      	movs	r3, #9
 80026fa:	e010      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 80026fc:	2308      	movs	r3, #8
 80026fe:	e00e      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 8002700:	2307      	movs	r3, #7
 8002702:	e00c      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 8002704:	2306      	movs	r3, #6
 8002706:	e00a      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 8002708:	2305      	movs	r3, #5
 800270a:	e008      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 800270c:	2304      	movs	r3, #4
 800270e:	e006      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 8002710:	2303      	movs	r3, #3
 8002712:	e004      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 8002714:	2302      	movs	r3, #2
 8002716:	e002      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_ADC_ConfigChannel+0x1ce>
 800271c:	2300      	movs	r3, #0
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	6852      	ldr	r2, [r2, #4]
 8002722:	201f      	movs	r0, #31
 8002724:	4002      	ands	r2, r0
 8002726:	4093      	lsls	r3, r2
 8002728:	000a      	movs	r2, r1
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	429a      	cmp	r2, r3
 800273e:	d808      	bhi.n	8002752 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	001a      	movs	r2, r3
 800274e:	f7ff fb6f 	bl	8001e30 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	001a      	movs	r2, r3
 8002760:	f7ff fbaa 	bl	8001eb8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db00      	blt.n	800276e <HAL_ADC_ConfigChannel+0x21e>
 800276c:	e0bc      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800276e:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <HAL_ADC_ConfigChannel+0x360>)
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff fb0b 	bl	8001d8c <LL_ADC_GetCommonPathInternalCh>
 8002776:	0003      	movs	r3, r0
 8002778:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a4d      	ldr	r2, [pc, #308]	; (80028b4 <HAL_ADC_ConfigChannel+0x364>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d122      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	041b      	lsls	r3, r3, #16
 800278a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800278c:	d11d      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	0412      	lsls	r2, r2, #16
 8002794:	4313      	orrs	r3, r2
 8002796:	4a46      	ldr	r2, [pc, #280]	; (80028b0 <HAL_ADC_ConfigChannel+0x360>)
 8002798:	0019      	movs	r1, r3
 800279a:	0010      	movs	r0, r2
 800279c:	f7ff fae2 	bl	8001d64 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a0:	4b45      	ldr	r3, [pc, #276]	; (80028b8 <HAL_ADC_ConfigChannel+0x368>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4945      	ldr	r1, [pc, #276]	; (80028bc <HAL_ADC_ConfigChannel+0x36c>)
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7fd fcc8 	bl	800013c <__udivsi3>
 80027ac:	0003      	movs	r3, r0
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	0013      	movs	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	189b      	adds	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027ba:	e002      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3b01      	subs	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f9      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80027c8:	e08e      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <HAL_ADC_ConfigChannel+0x370>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d10e      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	045b      	lsls	r3, r3, #17
 80027da:	4013      	ands	r3, r2
 80027dc:	d109      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	0452      	lsls	r2, r2, #17
 80027e4:	4313      	orrs	r3, r2
 80027e6:	4a32      	ldr	r2, [pc, #200]	; (80028b0 <HAL_ADC_ConfigChannel+0x360>)
 80027e8:	0019      	movs	r1, r3
 80027ea:	0010      	movs	r0, r2
 80027ec:	f7ff faba 	bl	8001d64 <LL_ADC_SetCommonPathInternalCh>
 80027f0:	e07a      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a33      	ldr	r2, [pc, #204]	; (80028c4 <HAL_ADC_ConfigChannel+0x374>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d000      	beq.n	80027fe <HAL_ADC_ConfigChannel+0x2ae>
 80027fc:	e074      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	03db      	lsls	r3, r3, #15
 8002804:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002806:	d000      	beq.n	800280a <HAL_ADC_ConfigChannel+0x2ba>
 8002808:	e06e      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	03d2      	lsls	r2, r2, #15
 8002810:	4313      	orrs	r3, r2
 8002812:	4a27      	ldr	r2, [pc, #156]	; (80028b0 <HAL_ADC_ConfigChannel+0x360>)
 8002814:	0019      	movs	r1, r3
 8002816:	0010      	movs	r0, r2
 8002818:	f7ff faa4 	bl	8001d64 <LL_ADC_SetCommonPathInternalCh>
 800281c:	e064      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	429a      	cmp	r2, r3
 8002828:	d004      	beq.n	8002834 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800282e:	4a1f      	ldr	r2, [pc, #124]	; (80028ac <HAL_ADC_ConfigChannel+0x35c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d107      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	0019      	movs	r1, r3
 800283e:	0010      	movs	r0, r2
 8002840:	f7ff fb27 	bl	8001e92 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	da4d      	bge.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_ADC_ConfigChannel+0x360>)
 800284e:	0018      	movs	r0, r3
 8002850:	f7ff fa9c 	bl	8001d8c <LL_ADC_GetCommonPathInternalCh>
 8002854:	0003      	movs	r3, r0
 8002856:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <HAL_ADC_ConfigChannel+0x364>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d108      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <HAL_ADC_ConfigChannel+0x378>)
 8002866:	4013      	ands	r3, r2
 8002868:	4a11      	ldr	r2, [pc, #68]	; (80028b0 <HAL_ADC_ConfigChannel+0x360>)
 800286a:	0019      	movs	r1, r3
 800286c:	0010      	movs	r0, r2
 800286e:	f7ff fa79 	bl	8001d64 <LL_ADC_SetCommonPathInternalCh>
 8002872:	e039      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_ADC_ConfigChannel+0x370>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d108      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_ADC_ConfigChannel+0x37c>)
 8002882:	4013      	ands	r3, r2
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_ADC_ConfigChannel+0x360>)
 8002886:	0019      	movs	r1, r3
 8002888:	0010      	movs	r0, r2
 800288a:	f7ff fa6b 	bl	8001d64 <LL_ADC_SetCommonPathInternalCh>
 800288e:	e02b      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <HAL_ADC_ConfigChannel+0x374>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d126      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <HAL_ADC_ConfigChannel+0x380>)
 800289e:	4013      	ands	r3, r2
 80028a0:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <HAL_ADC_ConfigChannel+0x360>)
 80028a2:	0019      	movs	r1, r3
 80028a4:	0010      	movs	r0, r2
 80028a6:	f7ff fa5d 	bl	8001d64 <LL_ADC_SetCommonPathInternalCh>
 80028aa:	e01d      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x398>
 80028ac:	80000004 	.word	0x80000004
 80028b0:	40012708 	.word	0x40012708
 80028b4:	b0001000 	.word	0xb0001000
 80028b8:	2000000c 	.word	0x2000000c
 80028bc:	00030d40 	.word	0x00030d40
 80028c0:	b8004000 	.word	0xb8004000
 80028c4:	b4002000 	.word	0xb4002000
 80028c8:	ff7fffff 	.word	0xff7fffff
 80028cc:	feffffff 	.word	0xfeffffff
 80028d0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	2220      	movs	r2, #32
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028e0:	2317      	movs	r3, #23
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2254      	movs	r2, #84	; 0x54
 80028ec:	2100      	movs	r1, #0
 80028ee:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80028f0:	2317      	movs	r3, #23
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	781b      	ldrb	r3, [r3, #0]
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b006      	add	sp, #24
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)

08002900 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0018      	movs	r0, r3
 8002912:	f7ff fb27 	bl	8001f64 <LL_ADC_IsEnabled>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d000      	beq.n	800291c <ADC_Enable+0x1c>
 800291a:	e069      	b.n	80029f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4a36      	ldr	r2, [pc, #216]	; (80029fc <ADC_Enable+0xfc>)
 8002924:	4013      	ands	r3, r2
 8002926:	d00d      	beq.n	8002944 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	2210      	movs	r2, #16
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	2201      	movs	r2, #1
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e056      	b.n	80029f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0018      	movs	r0, r3
 800294a:	f7ff faf9 	bl	8001f40 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800294e:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <ADC_Enable+0x100>)
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff fa1b 	bl	8001d8c <LL_ADC_GetCommonPathInternalCh>
 8002956:	0002      	movs	r2, r0
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	4013      	ands	r3, r2
 800295e:	d00f      	beq.n	8002980 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <ADC_Enable+0x104>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4928      	ldr	r1, [pc, #160]	; (8002a08 <ADC_Enable+0x108>)
 8002966:	0018      	movs	r0, r3
 8002968:	f7fd fbe8 	bl	800013c <__udivsi3>
 800296c:	0003      	movs	r3, r0
 800296e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002970:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002972:	e002      	b.n	800297a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3b01      	subs	r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f9      	bne.n	8002974 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7e5b      	ldrb	r3, [r3, #25]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d033      	beq.n	80029f0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002988:	f7ff f9a8 	bl	8001cdc <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002990:	e027      	b.n	80029e2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0018      	movs	r0, r3
 8002998:	f7ff fae4 	bl	8001f64 <LL_ADC_IsEnabled>
 800299c:	1e03      	subs	r3, r0, #0
 800299e:	d104      	bne.n	80029aa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7ff facb 	bl	8001f40 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029aa:	f7ff f997 	bl	8001cdc <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d914      	bls.n	80029e2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2201      	movs	r2, #1
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d00d      	beq.n	80029e2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	2210      	movs	r2, #16
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	2201      	movs	r2, #1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d1d0      	bne.n	8002992 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	80000017 	.word	0x80000017
 8002a00:	40012708 	.word	0x40012708
 8002a04:	2000000c 	.word	0x2000000c
 8002a08:	00030d40 	.word	0x00030d40

08002a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	0002      	movs	r2, r0
 8002a14:	1dfb      	adds	r3, r7, #7
 8002a16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a1e:	d809      	bhi.n	8002a34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a20:	1dfb      	adds	r3, r7, #7
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	001a      	movs	r2, r3
 8002a26:	231f      	movs	r3, #31
 8002a28:	401a      	ands	r2, r3
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_EnableIRQ+0x30>)
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4091      	lsls	r1, r2
 8002a30:	000a      	movs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a40:	b590      	push	{r4, r7, lr}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	0002      	movs	r2, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	1dfb      	adds	r3, r7, #7
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b7f      	cmp	r3, #127	; 0x7f
 8002a54:	d828      	bhi.n	8002aa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a56:	4a2f      	ldr	r2, [pc, #188]	; (8002b14 <__NVIC_SetPriority+0xd4>)
 8002a58:	1dfb      	adds	r3, r7, #7
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	33c0      	adds	r3, #192	; 0xc0
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	589b      	ldr	r3, [r3, r2]
 8002a66:	1dfa      	adds	r2, r7, #7
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	400a      	ands	r2, r1
 8002a70:	00d2      	lsls	r2, r2, #3
 8002a72:	21ff      	movs	r1, #255	; 0xff
 8002a74:	4091      	lsls	r1, r2
 8002a76:	000a      	movs	r2, r1
 8002a78:	43d2      	mvns	r2, r2
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	401a      	ands	r2, r3
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	4003      	ands	r3, r0
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a94:	481f      	ldr	r0, [pc, #124]	; (8002b14 <__NVIC_SetPriority+0xd4>)
 8002a96:	1dfb      	adds	r3, r7, #7
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b25b      	sxtb	r3, r3
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	33c0      	adds	r3, #192	; 0xc0
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002aa6:	e031      	b.n	8002b0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <__NVIC_SetPriority+0xd8>)
 8002aaa:	1dfb      	adds	r3, r7, #7
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	0019      	movs	r1, r3
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	400b      	ands	r3, r1
 8002ab4:	3b08      	subs	r3, #8
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3306      	adds	r3, #6
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	18d3      	adds	r3, r2, r3
 8002abe:	3304      	adds	r3, #4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	1dfa      	adds	r2, r7, #7
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	2203      	movs	r2, #3
 8002aca:	400a      	ands	r2, r1
 8002acc:	00d2      	lsls	r2, r2, #3
 8002ace:	21ff      	movs	r1, #255	; 0xff
 8002ad0:	4091      	lsls	r1, r2
 8002ad2:	000a      	movs	r2, r1
 8002ad4:	43d2      	mvns	r2, r2
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	019b      	lsls	r3, r3, #6
 8002ade:	22ff      	movs	r2, #255	; 0xff
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	1dfb      	adds	r3, r7, #7
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	2303      	movs	r3, #3
 8002aea:	4003      	ands	r3, r0
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <__NVIC_SetPriority+0xd8>)
 8002af2:	1dfb      	adds	r3, r7, #7
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	001c      	movs	r4, r3
 8002af8:	230f      	movs	r3, #15
 8002afa:	4023      	ands	r3, r4
 8002afc:	3b08      	subs	r3, #8
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	430a      	orrs	r2, r1
 8002b02:	3306      	adds	r3, #6
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	18c3      	adds	r3, r0, r3
 8002b08:	3304      	adds	r3, #4
 8002b0a:	601a      	str	r2, [r3, #0]
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b003      	add	sp, #12
 8002b12:	bd90      	pop	{r4, r7, pc}
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1e5a      	subs	r2, r3, #1
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	045b      	lsls	r3, r3, #17
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d301      	bcc.n	8002b34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b30:	2301      	movs	r3, #1
 8002b32:	e010      	b.n	8002b56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <SysTick_Config+0x44>)
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	3a01      	subs	r2, #1
 8002b3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	425b      	negs	r3, r3
 8002b40:	2103      	movs	r1, #3
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff ff7c 	bl	8002a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <SysTick_Config+0x44>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <SysTick_Config+0x44>)
 8002b50:	2207      	movs	r2, #7
 8002b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	e000e010 	.word	0xe000e010

08002b64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	210f      	movs	r1, #15
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	1c02      	adds	r2, r0, #0
 8002b74:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	0011      	movs	r1, r2
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff ff5d 	bl	8002a40 <__NVIC_SetPriority>
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	0002      	movs	r2, r0
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7ff ff33 	bl	8002a0c <__NVIC_EnableIRQ>
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b002      	add	sp, #8
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff ffaf 	bl	8002b1c <SysTick_Config>
 8002bbe:	0003      	movs	r3, r0
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b002      	add	sp, #8
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e050      	b.n	8002c7c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2225      	movs	r2, #37	; 0x25
 8002bde:	5c9b      	ldrb	r3, [r3, r2]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d008      	beq.n	8002bf8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e041      	b.n	8002c7c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	210e      	movs	r1, #14
 8002c04:	438a      	bics	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	491c      	ldr	r1, [pc, #112]	; (8002c84 <HAL_DMA_Abort+0xbc>)
 8002c14:	400a      	ands	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2101      	movs	r1, #1
 8002c24:	438a      	bics	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_DMA_Abort+0xc0>)
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	221c      	movs	r2, #28
 8002c32:	4013      	ands	r3, r2
 8002c34:	2201      	movs	r2, #1
 8002c36:	409a      	lsls	r2, r3
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_DMA_Abort+0xc0>)
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c46:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5a:	490a      	ldr	r1, [pc, #40]	; (8002c84 <HAL_DMA_Abort+0xbc>)
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c68:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2225      	movs	r2, #37	; 0x25
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2224      	movs	r2, #36	; 0x24
 8002c76:	2100      	movs	r1, #0
 8002c78:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	fffffeff 	.word	0xfffffeff
 8002c88:	40020000 	.word	0x40020000

08002c8c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	210f      	movs	r1, #15
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2225      	movs	r2, #37	; 0x25
 8002ca0:	5c9b      	ldrb	r3, [r3, r2]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d006      	beq.n	8002cb6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2204      	movs	r2, #4
 8002cac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cae:	187b      	adds	r3, r7, r1
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e049      	b.n	8002d4a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	210e      	movs	r1, #14
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	438a      	bics	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	491d      	ldr	r1, [pc, #116]	; (8002d58 <HAL_DMA_Abort_IT+0xcc>)
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_DMA_Abort_IT+0xd0>)
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	221c      	movs	r2, #28
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_DMA_Abort_IT+0xd0>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d18:	490f      	ldr	r1, [pc, #60]	; (8002d58 <HAL_DMA_Abort_IT+0xcc>)
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002d26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2225      	movs	r2, #37	; 0x25
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2224      	movs	r2, #36	; 0x24
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	0010      	movs	r0, r2
 8002d48:	4798      	blx	r3
    }
  }
  return status;
 8002d4a:	230f      	movs	r3, #15
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	781b      	ldrb	r3, [r3, #0]
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b004      	add	sp, #16
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	fffffeff 	.word	0xfffffeff
 8002d5c:	40020000 	.word	0x40020000

08002d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6e:	e147      	b.n	8003000 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4091      	lsls	r1, r2
 8002d7a:	000a      	movs	r2, r1
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d100      	bne.n	8002d88 <HAL_GPIO_Init+0x28>
 8002d86:	e138      	b.n	8002ffa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d005      	beq.n	8002da0 <HAL_GPIO_Init+0x40>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d130      	bne.n	8002e02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	409a      	lsls	r2, r3
 8002dae:	0013      	movs	r3, r2
 8002db0:	43da      	mvns	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	0013      	movs	r3, r2
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	0013      	movs	r3, r2
 8002dde:	43da      	mvns	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	2201      	movs	r2, #1
 8002dee:	401a      	ands	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	409a      	lsls	r2, r3
 8002df4:	0013      	movs	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2203      	movs	r2, #3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d017      	beq.n	8002e3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2203      	movs	r2, #3
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	0013      	movs	r3, r2
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	0013      	movs	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2203      	movs	r2, #3
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d123      	bne.n	8002e92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	08da      	lsrs	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3208      	adds	r2, #8
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	58d3      	ldr	r3, [r2, r3]
 8002e56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	409a      	lsls	r2, r3
 8002e64:	0013      	movs	r3, r2
 8002e66:	43da      	mvns	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2107      	movs	r1, #7
 8002e76:	400b      	ands	r3, r1
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	0013      	movs	r3, r2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	08da      	lsrs	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3208      	adds	r2, #8
 8002e8c:	0092      	lsls	r2, r2, #2
 8002e8e:	6939      	ldr	r1, [r7, #16]
 8002e90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	409a      	lsls	r2, r3
 8002ea0:	0013      	movs	r3, r2
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2203      	movs	r2, #3
 8002eb0:	401a      	ands	r2, r3
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	0013      	movs	r3, r2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	23c0      	movs	r3, #192	; 0xc0
 8002ecc:	029b      	lsls	r3, r3, #10
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d100      	bne.n	8002ed4 <HAL_GPIO_Init+0x174>
 8002ed2:	e092      	b.n	8002ffa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002ed4:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3318      	adds	r3, #24
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	589b      	ldr	r3, [r3, r2]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	220f      	movs	r2, #15
 8002eec:	409a      	lsls	r2, r3
 8002eee:	0013      	movs	r3, r2
 8002ef0:	43da      	mvns	r2, r3
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	23a0      	movs	r3, #160	; 0xa0
 8002efc:	05db      	lsls	r3, r3, #23
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x1ca>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a45      	ldr	r2, [pc, #276]	; (800301c <HAL_GPIO_Init+0x2bc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x1c6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a44      	ldr	r2, [pc, #272]	; (8003020 <HAL_GPIO_Init+0x2c0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x1c2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a43      	ldr	r2, [pc, #268]	; (8003024 <HAL_GPIO_Init+0x2c4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x1be>
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e006      	b.n	8002f2c <HAL_GPIO_Init+0x1cc>
 8002f1e:	2305      	movs	r3, #5
 8002f20:	e004      	b.n	8002f2c <HAL_GPIO_Init+0x1cc>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e002      	b.n	8002f2c <HAL_GPIO_Init+0x1cc>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_GPIO_Init+0x1cc>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	2103      	movs	r1, #3
 8002f30:	400a      	ands	r2, r1
 8002f32:	00d2      	lsls	r2, r2, #3
 8002f34:	4093      	lsls	r3, r2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002f3c:	4936      	ldr	r1, [pc, #216]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	089b      	lsrs	r3, r3, #2
 8002f42:	3318      	adds	r3, #24
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f4a:	4b33      	ldr	r3, [pc, #204]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	035b      	lsls	r3, r3, #13
 8002f62:	4013      	ands	r3, r2
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002f74:	4b28      	ldr	r3, [pc, #160]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	039b      	lsls	r3, r3, #14
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002fa0:	2384      	movs	r3, #132	; 0x84
 8002fa2:	58d3      	ldr	r3, [r2, r3]
 8002fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4013      	ands	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	029b      	lsls	r3, r3, #10
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fc4:	4914      	ldr	r1, [pc, #80]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002fc6:	2284      	movs	r2, #132	; 0x84
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	58d3      	ldr	r3, [r2, r3]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	025b      	lsls	r3, r3, #9
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ff2:	4909      	ldr	r1, [pc, #36]	; (8003018 <HAL_GPIO_Init+0x2b8>)
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	40da      	lsrs	r2, r3
 8003008:	1e13      	subs	r3, r2, #0
 800300a:	d000      	beq.n	800300e <HAL_GPIO_Init+0x2ae>
 800300c:	e6b0      	b.n	8002d70 <HAL_GPIO_Init+0x10>
  }
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b006      	add	sp, #24
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021800 	.word	0x40021800
 800301c:	50000400 	.word	0x50000400
 8003020:	50000800 	.word	0x50000800
 8003024:	50000c00 	.word	0x50000c00

08003028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	000a      	movs	r2, r1
 8003032:	1cbb      	adds	r3, r7, #2
 8003034:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	1cba      	adds	r2, r7, #2
 800303c:	8812      	ldrh	r2, [r2, #0]
 800303e:	4013      	ands	r3, r2
 8003040:	d004      	beq.n	800304c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003042:	230f      	movs	r3, #15
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e003      	b.n	8003054 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800304c:	230f      	movs	r3, #15
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003054:	230f      	movs	r3, #15
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	781b      	ldrb	r3, [r3, #0]
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	0008      	movs	r0, r1
 800306c:	0011      	movs	r1, r2
 800306e:	1cbb      	adds	r3, r7, #2
 8003070:	1c02      	adds	r2, r0, #0
 8003072:	801a      	strh	r2, [r3, #0]
 8003074:	1c7b      	adds	r3, r7, #1
 8003076:	1c0a      	adds	r2, r1, #0
 8003078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800307a:	1c7b      	adds	r3, r7, #1
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003082:	1cbb      	adds	r3, r7, #2
 8003084:	881a      	ldrh	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800308a:	e003      	b.n	8003094 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800308c:	1cbb      	adds	r3, r7, #2
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	000a      	movs	r2, r1
 80030a6:	1cbb      	adds	r3, r7, #2
 80030a8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030b0:	1cbb      	adds	r3, r7, #2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4013      	ands	r3, r2
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43db      	mvns	r3, r3
 80030be:	1cb9      	adds	r1, r7, #2
 80030c0:	8809      	ldrh	r1, [r1, #0]
 80030c2:	400b      	ands	r3, r1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	619a      	str	r2, [r3, #24]
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b004      	add	sp, #16
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e08f      	b.n	8003206 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2241      	movs	r2, #65	; 0x41
 80030ea:	5c9b      	ldrb	r3, [r3, r2]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d107      	bne.n	8003102 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2240      	movs	r2, #64	; 0x40
 80030f6:	2100      	movs	r1, #0
 80030f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7fe faf9 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2241      	movs	r2, #65	; 0x41
 8003106:	2124      	movs	r1, #36	; 0x24
 8003108:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2101      	movs	r1, #1
 8003116:	438a      	bics	r2, r1
 8003118:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	493b      	ldr	r1, [pc, #236]	; (8003210 <HAL_I2C_Init+0x13c>)
 8003124:	400a      	ands	r2, r1
 8003126:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4938      	ldr	r1, [pc, #224]	; (8003214 <HAL_I2C_Init+0x140>)
 8003134:	400a      	ands	r2, r1
 8003136:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d108      	bne.n	8003152 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2180      	movs	r1, #128	; 0x80
 800314a:	0209      	lsls	r1, r1, #8
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	e007      	b.n	8003162 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2184      	movs	r1, #132	; 0x84
 800315c:	0209      	lsls	r1, r1, #8
 800315e:	430a      	orrs	r2, r1
 8003160:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d109      	bne.n	800317e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	0109      	lsls	r1, r1, #4
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	e007      	b.n	800318e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4923      	ldr	r1, [pc, #140]	; (8003218 <HAL_I2C_Init+0x144>)
 800318a:	400a      	ands	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4920      	ldr	r1, [pc, #128]	; (800321c <HAL_I2C_Init+0x148>)
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	491a      	ldr	r1, [pc, #104]	; (8003214 <HAL_I2C_Init+0x140>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69d9      	ldr	r1, [r3, #28]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1a      	ldr	r2, [r3, #32]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2241      	movs	r2, #65	; 0x41
 80031f2:	2120      	movs	r1, #32
 80031f4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2242      	movs	r2, #66	; 0x42
 8003200:	2100      	movs	r1, #0
 8003202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b002      	add	sp, #8
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	f0ffffff 	.word	0xf0ffffff
 8003214:	ffff7fff 	.word	0xffff7fff
 8003218:	fffff7ff 	.word	0xfffff7ff
 800321c:	02008000 	.word	0x02008000

08003220 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	0008      	movs	r0, r1
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	0019      	movs	r1, r3
 800322e:	230a      	movs	r3, #10
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	1c02      	adds	r2, r0, #0
 8003234:	801a      	strh	r2, [r3, #0]
 8003236:	2308      	movs	r3, #8
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	1c0a      	adds	r2, r1, #0
 800323c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2241      	movs	r2, #65	; 0x41
 8003242:	5c9b      	ldrb	r3, [r3, r2]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	d000      	beq.n	800324c <HAL_I2C_Master_Transmit+0x2c>
 800324a:	e10a      	b.n	8003462 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2240      	movs	r2, #64	; 0x40
 8003250:	5c9b      	ldrb	r3, [r3, r2]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <HAL_I2C_Master_Transmit+0x3a>
 8003256:	2302      	movs	r3, #2
 8003258:	e104      	b.n	8003464 <HAL_I2C_Master_Transmit+0x244>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2240      	movs	r2, #64	; 0x40
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003262:	f7fe fd3b 	bl	8001cdc <HAL_GetTick>
 8003266:	0003      	movs	r3, r0
 8003268:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	0219      	lsls	r1, r3, #8
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2319      	movs	r3, #25
 8003276:	2201      	movs	r2, #1
 8003278:	f000 f91e 	bl	80034b8 <I2C_WaitOnFlagUntilTimeout>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0ef      	b.n	8003464 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2241      	movs	r2, #65	; 0x41
 8003288:	2121      	movs	r1, #33	; 0x21
 800328a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2242      	movs	r2, #66	; 0x42
 8003290:	2110      	movs	r1, #16
 8003292:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2208      	movs	r2, #8
 80032a4:	18ba      	adds	r2, r7, r2
 80032a6:	8812      	ldrh	r2, [r2, #0]
 80032a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2bff      	cmp	r3, #255	; 0xff
 80032b8:	d906      	bls.n	80032c8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	045b      	lsls	r3, r3, #17
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e007      	b.n	80032d8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	049b      	lsls	r3, r3, #18
 80032d6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d027      	beq.n	8003330 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	b2da      	uxtb	r2, r3
 800331a:	697c      	ldr	r4, [r7, #20]
 800331c:	230a      	movs	r3, #10
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	8819      	ldrh	r1, [r3, #0]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	4b51      	ldr	r3, [pc, #324]	; (800346c <HAL_I2C_Master_Transmit+0x24c>)
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	0023      	movs	r3, r4
 800332a:	f000 faa7 	bl	800387c <I2C_TransferConfig>
 800332e:	e06f      	b.n	8003410 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	b2da      	uxtb	r2, r3
 8003336:	697c      	ldr	r4, [r7, #20]
 8003338:	230a      	movs	r3, #10
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	8819      	ldrh	r1, [r3, #0]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	4b4a      	ldr	r3, [pc, #296]	; (800346c <HAL_I2C_Master_Transmit+0x24c>)
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	0023      	movs	r3, r4
 8003346:	f000 fa99 	bl	800387c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800334a:	e061      	b.n	8003410 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	0018      	movs	r0, r3
 8003354:	f000 f908 	bl	8003568 <I2C_WaitOnTXISFlagUntilTimeout>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d001      	beq.n	8003360 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e081      	b.n	8003464 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	781a      	ldrb	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d03a      	beq.n	8003410 <HAL_I2C_Master_Transmit+0x1f0>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d136      	bne.n	8003410 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	0013      	movs	r3, r2
 80033ac:	2200      	movs	r2, #0
 80033ae:	2180      	movs	r1, #128	; 0x80
 80033b0:	f000 f882 	bl	80034b8 <I2C_WaitOnFlagUntilTimeout>
 80033b4:	1e03      	subs	r3, r0, #0
 80033b6:	d001      	beq.n	80033bc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e053      	b.n	8003464 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2bff      	cmp	r3, #255	; 0xff
 80033c4:	d911      	bls.n	80033ea <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	22ff      	movs	r2, #255	; 0xff
 80033ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	045c      	lsls	r4, r3, #17
 80033d6:	230a      	movs	r3, #10
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	8819      	ldrh	r1, [r3, #0]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	2300      	movs	r3, #0
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	0023      	movs	r3, r4
 80033e4:	f000 fa4a 	bl	800387c <I2C_TransferConfig>
 80033e8:	e012      	b.n	8003410 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	049c      	lsls	r4, r3, #18
 80033fe:	230a      	movs	r3, #10
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	8819      	ldrh	r1, [r3, #0]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	2300      	movs	r3, #0
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	0023      	movs	r3, r4
 800340c:	f000 fa36 	bl	800387c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d198      	bne.n	800334c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 f8e7 	bl	80035f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e01a      	b.n	8003464 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2220      	movs	r2, #32
 8003434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	490b      	ldr	r1, [pc, #44]	; (8003470 <HAL_I2C_Master_Transmit+0x250>)
 8003442:	400a      	ands	r2, r1
 8003444:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2241      	movs	r2, #65	; 0x41
 800344a:	2120      	movs	r1, #32
 800344c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2242      	movs	r2, #66	; 0x42
 8003452:	2100      	movs	r1, #0
 8003454:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2240      	movs	r2, #64	; 0x40
 800345a:	2100      	movs	r1, #0
 800345c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b007      	add	sp, #28
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	80002000 	.word	0x80002000
 8003470:	fe00e800 	.word	0xfe00e800

08003474 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2202      	movs	r2, #2
 8003484:	4013      	ands	r3, r2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d103      	bne.n	8003492 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	2b01      	cmp	r3, #1
 800349e:	d007      	beq.n	80034b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2101      	movs	r1, #1
 80034ac:	430a      	orrs	r2, r1
 80034ae:	619a      	str	r2, [r3, #24]
  }
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	1dfb      	adds	r3, r7, #7
 80034c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c8:	e03a      	b.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	6839      	ldr	r1, [r7, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f8d3 	bl	800367c <I2C_IsErrorOccurred>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d001      	beq.n	80034de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e040      	b.n	8003560 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	d02d      	beq.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e4:	f7fe fbfa 	bl	8001cdc <HAL_GetTick>
 80034e8:	0002      	movs	r2, r0
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <I2C_WaitOnFlagUntilTimeout+0x42>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d122      	bne.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	425a      	negs	r2, r3
 800350a:	4153      	adcs	r3, r2
 800350c:	b2db      	uxtb	r3, r3
 800350e:	001a      	movs	r2, r3
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d113      	bne.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	2220      	movs	r2, #32
 800351e:	431a      	orrs	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2241      	movs	r2, #65	; 0x41
 8003528:	2120      	movs	r1, #32
 800352a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2242      	movs	r2, #66	; 0x42
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e00f      	b.n	8003560 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	425a      	negs	r2, r3
 8003550:	4153      	adcs	r3, r2
 8003552:	b2db      	uxtb	r3, r3
 8003554:	001a      	movs	r2, r3
 8003556:	1dfb      	adds	r3, r7, #7
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d0b5      	beq.n	80034ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003574:	e032      	b.n	80035dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	0018      	movs	r0, r3
 800357e:	f000 f87d 	bl	800367c <I2C_IsErrorOccurred>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d001      	beq.n	800358a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e030      	b.n	80035ec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3301      	adds	r3, #1
 800358e:	d025      	beq.n	80035dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003590:	f7fe fba4 	bl	8001cdc <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d302      	bcc.n	80035a6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11a      	bne.n	80035dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2202      	movs	r2, #2
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d013      	beq.n	80035dc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	2220      	movs	r2, #32
 80035ba:	431a      	orrs	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2241      	movs	r2, #65	; 0x41
 80035c4:	2120      	movs	r1, #32
 80035c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2242      	movs	r2, #66	; 0x42
 80035cc:	2100      	movs	r1, #0
 80035ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e007      	b.n	80035ec <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2202      	movs	r2, #2
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d1c5      	bne.n	8003576 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b004      	add	sp, #16
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003600:	e02f      	b.n	8003662 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f837 	bl	800367c <I2C_IsErrorOccurred>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e02d      	b.n	8003672 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fe fb61 	bl	8001cdc <HAL_GetTick>
 800361a:	0002      	movs	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11a      	bne.n	8003662 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2220      	movs	r2, #32
 8003634:	4013      	ands	r3, r2
 8003636:	2b20      	cmp	r3, #32
 8003638:	d013      	beq.n	8003662 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	2220      	movs	r2, #32
 8003640:	431a      	orrs	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2241      	movs	r2, #65	; 0x41
 800364a:	2120      	movs	r1, #32
 800364c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2242      	movs	r2, #66	; 0x42
 8003652:	2100      	movs	r1, #0
 8003654:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2240      	movs	r2, #64	; 0x40
 800365a:	2100      	movs	r1, #0
 800365c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e007      	b.n	8003672 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2220      	movs	r2, #32
 800366a:	4013      	ands	r3, r2
 800366c:	2b20      	cmp	r3, #32
 800366e:	d1c8      	bne.n	8003602 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b004      	add	sp, #16
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b08b      	sub	sp, #44	; 0x2c
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2327      	movs	r3, #39	; 0x27
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2210      	movs	r2, #16
 80036a4:	4013      	ands	r3, r2
 80036a6:	d100      	bne.n	80036aa <I2C_IsErrorOccurred+0x2e>
 80036a8:	e082      	b.n	80037b0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2210      	movs	r2, #16
 80036b0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036b2:	e060      	b.n	8003776 <I2C_IsErrorOccurred+0xfa>
 80036b4:	2427      	movs	r4, #39	; 0x27
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	193a      	adds	r2, r7, r4
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	3301      	adds	r3, #1
 80036c2:	d058      	beq.n	8003776 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7fe fb0a 	bl	8001cdc <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d306      	bcc.n	80036e2 <I2C_IsErrorOccurred+0x66>
 80036d4:	193b      	adds	r3, r7, r4
 80036d6:	193a      	adds	r2, r7, r4
 80036d8:	7812      	ldrb	r2, [r2, #0]
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d149      	bne.n	8003776 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	01db      	lsls	r3, r3, #7
 80036ec:	4013      	ands	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036f0:	2013      	movs	r0, #19
 80036f2:	183b      	adds	r3, r7, r0
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	2142      	movs	r1, #66	; 0x42
 80036f8:	5c52      	ldrb	r2, [r2, r1]
 80036fa:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	401a      	ands	r2, r3
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	429a      	cmp	r2, r3
 800370e:	d126      	bne.n	800375e <I2C_IsErrorOccurred+0xe2>
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	01db      	lsls	r3, r3, #7
 8003716:	429a      	cmp	r2, r3
 8003718:	d021      	beq.n	800375e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800371a:	183b      	adds	r3, r7, r0
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b20      	cmp	r3, #32
 8003720:	d01d      	beq.n	800375e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	01c9      	lsls	r1, r1, #7
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003734:	f7fe fad2 	bl	8001cdc <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373c:	e00f      	b.n	800375e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800373e:	f7fe facd 	bl	8001cdc <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b19      	cmp	r3, #25
 800374a:	d908      	bls.n	800375e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2220      	movs	r2, #32
 8003750:	4313      	orrs	r3, r2
 8003752:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003754:	2327      	movs	r3, #39	; 0x27
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]

              break;
 800375c:	e00b      	b.n	8003776 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2220      	movs	r2, #32
 8003766:	4013      	ands	r3, r2
 8003768:	2127      	movs	r1, #39	; 0x27
 800376a:	187a      	adds	r2, r7, r1
 800376c:	1879      	adds	r1, r7, r1
 800376e:	7809      	ldrb	r1, [r1, #0]
 8003770:	7011      	strb	r1, [r2, #0]
 8003772:	2b20      	cmp	r3, #32
 8003774:	d1e3      	bne.n	800373e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2220      	movs	r2, #32
 800377e:	4013      	ands	r3, r2
 8003780:	2b20      	cmp	r3, #32
 8003782:	d004      	beq.n	800378e <I2C_IsErrorOccurred+0x112>
 8003784:	2327      	movs	r3, #39	; 0x27
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d092      	beq.n	80036b4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800378e:	2327      	movs	r3, #39	; 0x27
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d103      	bne.n	80037a0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2220      	movs	r2, #32
 800379e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2204      	movs	r2, #4
 80037a4:	4313      	orrs	r3, r2
 80037a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037a8:	2327      	movs	r3, #39	; 0x27
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4013      	ands	r3, r2
 80037c0:	d00c      	beq.n	80037dc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	2201      	movs	r2, #1
 80037c6:	4313      	orrs	r3, r2
 80037c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2280      	movs	r2, #128	; 0x80
 80037d0:	0052      	lsls	r2, r2, #1
 80037d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d4:	2327      	movs	r3, #39	; 0x27
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	2201      	movs	r2, #1
 80037da:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4013      	ands	r3, r2
 80037e4:	d00c      	beq.n	8003800 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	2208      	movs	r2, #8
 80037ea:	4313      	orrs	r3, r2
 80037ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	00d2      	lsls	r2, r2, #3
 80037f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f8:	2327      	movs	r3, #39	; 0x27
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4013      	ands	r3, r2
 8003808:	d00c      	beq.n	8003824 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	2202      	movs	r2, #2
 800380e:	4313      	orrs	r3, r2
 8003810:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2280      	movs	r2, #128	; 0x80
 8003818:	0092      	lsls	r2, r2, #2
 800381a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381c:	2327      	movs	r3, #39	; 0x27
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003824:	2327      	movs	r3, #39	; 0x27
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01d      	beq.n	800386a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	0018      	movs	r0, r3
 8003832:	f7ff fe1f 	bl	8003474 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	490d      	ldr	r1, [pc, #52]	; (8003878 <I2C_IsErrorOccurred+0x1fc>)
 8003842:	400a      	ands	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	431a      	orrs	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2241      	movs	r2, #65	; 0x41
 8003856:	2120      	movs	r1, #32
 8003858:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2242      	movs	r2, #66	; 0x42
 800385e:	2100      	movs	r1, #0
 8003860:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	2100      	movs	r1, #0
 8003868:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800386a:	2327      	movs	r3, #39	; 0x27
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	781b      	ldrb	r3, [r3, #0]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b00b      	add	sp, #44	; 0x2c
 8003876:	bd90      	pop	{r4, r7, pc}
 8003878:	fe00e800 	.word	0xfe00e800

0800387c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	0008      	movs	r0, r1
 8003886:	0011      	movs	r1, r2
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	240a      	movs	r4, #10
 800388c:	193b      	adds	r3, r7, r4
 800388e:	1c02      	adds	r2, r0, #0
 8003890:	801a      	strh	r2, [r3, #0]
 8003892:	2009      	movs	r0, #9
 8003894:	183b      	adds	r3, r7, r0
 8003896:	1c0a      	adds	r2, r1, #0
 8003898:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389a:	193b      	adds	r3, r7, r4
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	059b      	lsls	r3, r3, #22
 80038a0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038a2:	183b      	adds	r3, r7, r0
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	0419      	lsls	r1, r3, #16
 80038a8:	23ff      	movs	r3, #255	; 0xff
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ae:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	4313      	orrs	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c6:	0d51      	lsrs	r1, r2, #21
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	00d2      	lsls	r2, r2, #3
 80038cc:	400a      	ands	r2, r1
 80038ce:	4907      	ldr	r1, [pc, #28]	; (80038ec <I2C_TransferConfig+0x70>)
 80038d0:	430a      	orrs	r2, r1
 80038d2:	43d2      	mvns	r2, r2
 80038d4:	401a      	ands	r2, r3
 80038d6:	0011      	movs	r1, r2
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b007      	add	sp, #28
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	03ff63ff 	.word	0x03ff63ff

080038f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2241      	movs	r2, #65	; 0x41
 80038fe:	5c9b      	ldrb	r3, [r3, r2]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	d138      	bne.n	8003978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2240      	movs	r2, #64	; 0x40
 800390a:	5c9b      	ldrb	r3, [r3, r2]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003910:	2302      	movs	r3, #2
 8003912:	e032      	b.n	800397a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	2101      	movs	r1, #1
 800391a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2241      	movs	r2, #65	; 0x41
 8003920:	2124      	movs	r1, #36	; 0x24
 8003922:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2101      	movs	r1, #1
 8003930:	438a      	bics	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4911      	ldr	r1, [pc, #68]	; (8003984 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003940:	400a      	ands	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2101      	movs	r1, #1
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2241      	movs	r2, #65	; 0x41
 8003968:	2120      	movs	r1, #32
 800396a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	2100      	movs	r1, #0
 8003972:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	0018      	movs	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	b002      	add	sp, #8
 8003980:	bd80      	pop	{r7, pc}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	ffffefff 	.word	0xffffefff

08003988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2241      	movs	r2, #65	; 0x41
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b20      	cmp	r3, #32
 800399c:	d139      	bne.n	8003a12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2240      	movs	r2, #64	; 0x40
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e033      	b.n	8003a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	2101      	movs	r1, #1
 80039b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2241      	movs	r2, #65	; 0x41
 80039b8:	2124      	movs	r1, #36	; 0x24
 80039ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	438a      	bics	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a11      	ldr	r2, [pc, #68]	; (8003a1c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	430a      	orrs	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2241      	movs	r2, #65	; 0x41
 8003a02:	2120      	movs	r1, #32
 8003a04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2240      	movs	r2, #64	; 0x40
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	fffff0ff 	.word	0xfffff0ff

08003a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d11f      	bne.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	0013      	movs	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	189b      	adds	r3, r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4912      	ldr	r1, [pc, #72]	; (8003a9c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fc fb72 	bl	800013c <__udivsi3>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a5e:	e008      	b.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e009      	b.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d0ed      	beq.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b004      	add	sp, #16
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	40007000 	.word	0x40007000
 8003a94:	fffff9ff 	.word	0xfffff9ff
 8003a98:	2000000c 	.word	0x2000000c
 8003a9c:	000f4240 	.word	0x000f4240

08003aa0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	23e0      	movs	r3, #224	; 0xe0
 8003aaa:	01db      	lsls	r3, r3, #7
 8003aac:	4013      	ands	r3, r2
}
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000

08003ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e2fe      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x1e>
 8003ad4:	e07c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	4bc3      	ldr	r3, [pc, #780]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2238      	movs	r2, #56	; 0x38
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae0:	4bc0      	ldr	r3, [pc, #768]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d102      	bne.n	8003af6 <HAL_RCC_OscConfig+0x3e>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d002      	beq.n	8003afc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d10b      	bne.n	8003b14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afc:	4bb9      	ldr	r3, [pc, #740]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	029b      	lsls	r3, r3, #10
 8003b04:	4013      	ands	r3, r2
 8003b06:	d062      	beq.n	8003bce <HAL_RCC_OscConfig+0x116>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d15e      	bne.n	8003bce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e2d9      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	025b      	lsls	r3, r3, #9
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_RCC_OscConfig+0x78>
 8003b20:	4bb0      	ldr	r3, [pc, #704]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4baf      	ldr	r3, [pc, #700]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	0249      	lsls	r1, r1, #9
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e020      	b.n	8003b72 <HAL_RCC_OscConfig+0xba>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	23a0      	movs	r3, #160	; 0xa0
 8003b36:	02db      	lsls	r3, r3, #11
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d10e      	bne.n	8003b5a <HAL_RCC_OscConfig+0xa2>
 8003b3c:	4ba9      	ldr	r3, [pc, #676]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4ba8      	ldr	r3, [pc, #672]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	02c9      	lsls	r1, r1, #11
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	4ba6      	ldr	r3, [pc, #664]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4ba5      	ldr	r3, [pc, #660]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	0249      	lsls	r1, r1, #9
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e00b      	b.n	8003b72 <HAL_RCC_OscConfig+0xba>
 8003b5a:	4ba2      	ldr	r3, [pc, #648]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4ba1      	ldr	r3, [pc, #644]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b60:	49a1      	ldr	r1, [pc, #644]	; (8003de8 <HAL_RCC_OscConfig+0x330>)
 8003b62:	400a      	ands	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	4b9f      	ldr	r3, [pc, #636]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b9e      	ldr	r3, [pc, #632]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b6c:	499f      	ldr	r1, [pc, #636]	; (8003dec <HAL_RCC_OscConfig+0x334>)
 8003b6e:	400a      	ands	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d014      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe f8af 	bl	8001cdc <HAL_GetTick>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fe f8aa 	bl	8001cdc <HAL_GetTick>
 8003b88:	0002      	movs	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e298      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b96:	4b93      	ldr	r3, [pc, #588]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xcc>
 8003ba2:	e015      	b.n	8003bd0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe f89a 	bl	8001cdc <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bae:	f7fe f895 	bl	8001cdc <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b64      	cmp	r3, #100	; 0x64
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e283      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc0:	4b88      	ldr	r3, [pc, #544]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	029b      	lsls	r3, r3, #10
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d1f0      	bne.n	8003bae <HAL_RCC_OscConfig+0xf6>
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d100      	bne.n	8003bdc <HAL_RCC_OscConfig+0x124>
 8003bda:	e099      	b.n	8003d10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bdc:	4b81      	ldr	r3, [pc, #516]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2238      	movs	r2, #56	; 0x38
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be6:	4b7f      	ldr	r3, [pc, #508]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2203      	movs	r2, #3
 8003bec:	4013      	ands	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCC_OscConfig+0x144>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d002      	beq.n	8003c02 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d135      	bne.n	8003c6e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c02:	4b78      	ldr	r3, [pc, #480]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_OscConfig+0x162>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e256      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	4b72      	ldr	r3, [pc, #456]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a74      	ldr	r2, [pc, #464]	; (8003df0 <HAL_RCC_OscConfig+0x338>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	0019      	movs	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	021a      	lsls	r2, r3, #8
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d112      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c36:	4b6b      	ldr	r3, [pc, #428]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_RCC_OscConfig+0x33c>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	4b67      	ldr	r3, [pc, #412]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003c4a:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	0adb      	lsrs	r3, r3, #11
 8003c50:	2207      	movs	r2, #7
 8003c52:	4013      	ands	r3, r2
 8003c54:	4a68      	ldr	r2, [pc, #416]	; (8003df8 <HAL_RCC_OscConfig+0x340>)
 8003c56:	40da      	lsrs	r2, r3
 8003c58:	4b68      	ldr	r3, [pc, #416]	; (8003dfc <HAL_RCC_OscConfig+0x344>)
 8003c5a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c5c:	4b68      	ldr	r3, [pc, #416]	; (8003e00 <HAL_RCC_OscConfig+0x348>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7fd ffdf 	bl	8001c24 <HAL_InitTick>
 8003c66:	1e03      	subs	r3, r0, #0
 8003c68:	d051      	beq.n	8003d0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e22c      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d030      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c76:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5e      	ldr	r2, [pc, #376]	; (8003df4 <HAL_RCC_OscConfig+0x33c>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	4b57      	ldr	r3, [pc, #348]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003c8a:	4b56      	ldr	r3, [pc, #344]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	0049      	lsls	r1, r1, #1
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fe f820 	bl	8001cdc <HAL_GetTick>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fe f81b 	bl	8001cdc <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e209      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b48      	ldr	r3, [pc, #288]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <HAL_RCC_OscConfig+0x338>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	0019      	movs	r1, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	4b44      	ldr	r3, [pc, #272]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e01b      	b.n	8003d10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003cd8:	4b42      	ldr	r3, [pc, #264]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003cde:	4949      	ldr	r1, [pc, #292]	; (8003e04 <HAL_RCC_OscConfig+0x34c>)
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fd fffa 	bl	8001cdc <HAL_GetTick>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fd fff5 	bl	8001cdc <HAL_GetTick>
 8003cf2:	0002      	movs	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e1e3      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d00:	4b38      	ldr	r3, [pc, #224]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d1f0      	bne.n	8003cee <HAL_RCC_OscConfig+0x236>
 8003d0c:	e000      	b.n	8003d10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d0e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2208      	movs	r2, #8
 8003d16:	4013      	ands	r3, r2
 8003d18:	d047      	beq.n	8003daa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d1a:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2238      	movs	r2, #56	; 0x38
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b18      	cmp	r3, #24
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d26:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d03c      	beq.n	8003daa <HAL_RCC_OscConfig+0x2f2>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d138      	bne.n	8003daa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e1c5      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d019      	beq.n	8003d78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003d44:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d48:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd ffc4 	bl	8001cdc <HAL_GetTick>
 8003d54:	0003      	movs	r3, r0
 8003d56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fd ffbf 	bl	8001cdc <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e1ad      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	2202      	movs	r2, #2
 8003d72:	4013      	ands	r3, r2
 8003d74:	d0f1      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2a2>
 8003d76:	e018      	b.n	8003daa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003d7e:	2101      	movs	r1, #1
 8003d80:	438a      	bics	r2, r1
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fd ffaa 	bl	8001cdc <HAL_GetTick>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fd ffa5 	bl	8001cdc <HAL_GetTick>
 8003d92:	0002      	movs	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e193      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003da0:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da4:	2202      	movs	r2, #2
 8003da6:	4013      	ands	r3, r2
 8003da8:	d1f1      	bne.n	8003d8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2204      	movs	r2, #4
 8003db0:	4013      	ands	r3, r2
 8003db2:	d100      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2fe>
 8003db4:	e0c6      	b.n	8003f44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db6:	231f      	movs	r3, #31
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2238      	movs	r2, #56	; 0x38
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d11e      	bne.n	8003e08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_RCC_OscConfig+0x32c>)
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d100      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x31e>
 8003dd4:	e0b6      	b.n	8003f44 <HAL_RCC_OscConfig+0x48c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d000      	beq.n	8003de0 <HAL_RCC_OscConfig+0x328>
 8003dde:	e0b1      	b.n	8003f44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e171      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
 8003de4:	40021000 	.word	0x40021000
 8003de8:	fffeffff 	.word	0xfffeffff
 8003dec:	fffbffff 	.word	0xfffbffff
 8003df0:	ffff80ff 	.word	0xffff80ff
 8003df4:	ffffc7ff 	.word	0xffffc7ff
 8003df8:	00f42400 	.word	0x00f42400
 8003dfc:	2000000c 	.word	0x2000000c
 8003e00:	20000010 	.word	0x20000010
 8003e04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e08:	4bb1      	ldr	r3, [pc, #708]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	055b      	lsls	r3, r3, #21
 8003e10:	4013      	ands	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_OscConfig+0x360>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x362>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d011      	beq.n	8003e42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e1e:	4bac      	ldr	r3, [pc, #688]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e22:	4bab      	ldr	r3, [pc, #684]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	0549      	lsls	r1, r1, #21
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e2c:	4ba8      	ldr	r3, [pc, #672]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	055b      	lsls	r3, r3, #21
 8003e34:	4013      	ands	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003e3a:	231f      	movs	r3, #31
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	2201      	movs	r2, #1
 8003e40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e42:	4ba4      	ldr	r3, [pc, #656]	; (80040d4 <HAL_RCC_OscConfig+0x61c>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d11a      	bne.n	8003e84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e4e:	4ba1      	ldr	r3, [pc, #644]	; (80040d4 <HAL_RCC_OscConfig+0x61c>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4ba0      	ldr	r3, [pc, #640]	; (80040d4 <HAL_RCC_OscConfig+0x61c>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	0049      	lsls	r1, r1, #1
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003e5c:	f7fd ff3e 	bl	8001cdc <HAL_GetTick>
 8003e60:	0003      	movs	r3, r0
 8003e62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fd ff39 	bl	8001cdc <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e127      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e78:	4b96      	ldr	r3, [pc, #600]	; (80040d4 <HAL_RCC_OscConfig+0x61c>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3e2>
 8003e8c:	4b90      	ldr	r3, [pc, #576]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003e8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e90:	4b8f      	ldr	r3, [pc, #572]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e98:	e01c      	b.n	8003ed4 <HAL_RCC_OscConfig+0x41c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x404>
 8003ea2:	4b8b      	ldr	r3, [pc, #556]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003ea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ea6:	4b8a      	ldr	r3, [pc, #552]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eae:	4b88      	ldr	r3, [pc, #544]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003eb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eb2:	4b87      	ldr	r3, [pc, #540]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x41c>
 8003ebc:	4b84      	ldr	r3, [pc, #528]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ec0:	4b83      	ldr	r3, [pc, #524]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ec8:	4b81      	ldr	r3, [pc, #516]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003eca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ecc:	4b80      	ldr	r3, [pc, #512]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003ece:	2104      	movs	r1, #4
 8003ed0:	438a      	bics	r2, r1
 8003ed2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd fefe 	bl	8001cdc <HAL_GetTick>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee4:	e009      	b.n	8003efa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fd fef9 	bl	8001cdc <HAL_GetTick>
 8003eea:	0002      	movs	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	4a79      	ldr	r2, [pc, #484]	; (80040d8 <HAL_RCC_OscConfig+0x620>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e0e6      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efa:	4b75      	ldr	r3, [pc, #468]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	2202      	movs	r2, #2
 8003f00:	4013      	ands	r3, r2
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x42e>
 8003f04:	e013      	b.n	8003f2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fd fee9 	bl	8001cdc <HAL_GetTick>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f0e:	e009      	b.n	8003f24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fd fee4 	bl	8001cdc <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	4a6f      	ldr	r2, [pc, #444]	; (80040d8 <HAL_RCC_OscConfig+0x620>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0d1      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f24:	4b6a      	ldr	r3, [pc, #424]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	2202      	movs	r2, #2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f2e:	231f      	movs	r3, #31
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f38:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f3c:	4b64      	ldr	r3, [pc, #400]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003f3e:	4967      	ldr	r1, [pc, #412]	; (80040dc <HAL_RCC_OscConfig+0x624>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d100      	bne.n	8003f4e <HAL_RCC_OscConfig+0x496>
 8003f4c:	e0bb      	b.n	80040c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4e:	4b60      	ldr	r3, [pc, #384]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2238      	movs	r2, #56	; 0x38
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d100      	bne.n	8003f5c <HAL_RCC_OscConfig+0x4a4>
 8003f5a:	e07b      	b.n	8004054 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d156      	bne.n	8004012 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f64:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003f6a:	495d      	ldr	r1, [pc, #372]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fd feb4 	bl	8001cdc <HAL_GetTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fd feaf 	bl	8001cdc <HAL_GetTick>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e09d      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8c:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	049b      	lsls	r3, r3, #18
 8003f94:	4013      	ands	r3, r2
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f98:	4b4d      	ldr	r3, [pc, #308]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4a51      	ldr	r2, [pc, #324]	; (80040e4 <HAL_RCC_OscConfig+0x62c>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	4b42      	ldr	r3, [pc, #264]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fcc:	4b40      	ldr	r3, [pc, #256]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003fd2:	2180      	movs	r1, #128	; 0x80
 8003fd4:	0449      	lsls	r1, r1, #17
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003fda:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	4b3c      	ldr	r3, [pc, #240]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	0549      	lsls	r1, r1, #21
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fe78 	bl	8001cdc <HAL_GetTick>
 8003fec:	0003      	movs	r3, r0
 8003fee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff2:	f7fd fe73 	bl	8001cdc <HAL_GetTick>
 8003ff6:	0002      	movs	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e061      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004004:	4b32      	ldr	r3, [pc, #200]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	049b      	lsls	r3, r3, #18
 800400c:	4013      	ands	r3, r2
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x53a>
 8004010:	e059      	b.n	80040c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004012:	4b2f      	ldr	r3, [pc, #188]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8004018:	4931      	ldr	r1, [pc, #196]	; (80040e0 <HAL_RCC_OscConfig+0x628>)
 800401a:	400a      	ands	r2, r1
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7fd fe5d 	bl	8001cdc <HAL_GetTick>
 8004022:	0003      	movs	r3, r0
 8004024:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fe58 	bl	8001cdc <HAL_GetTick>
 800402c:	0002      	movs	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e046      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403a:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	049b      	lsls	r3, r3, #18
 8004042:	4013      	ands	r3, r2
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 800404c:	4926      	ldr	r1, [pc, #152]	; (80040e8 <HAL_RCC_OscConfig+0x630>)
 800404e:	400a      	ands	r2, r1
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	e038      	b.n	80040c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e033      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_RCC_OscConfig+0x618>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2203      	movs	r2, #3
 800406a:	401a      	ands	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	429a      	cmp	r2, r3
 8004072:	d126      	bne.n	80040c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2270      	movs	r2, #112	; 0x70
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d11f      	bne.n	80040c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	23fe      	movs	r3, #254	; 0xfe
 8004086:	01db      	lsls	r3, r3, #7
 8004088:	401a      	ands	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d116      	bne.n	80040c2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	23f8      	movs	r3, #248	; 0xf8
 8004098:	039b      	lsls	r3, r3, #14
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d10e      	bne.n	80040c2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	23e0      	movs	r3, #224	; 0xe0
 80040a8:	051b      	lsls	r3, r3, #20
 80040aa:	401a      	ands	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	0f5b      	lsrs	r3, r3, #29
 80040b8:	075a      	lsls	r2, r3, #29
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b008      	add	sp, #32
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40007000 	.word	0x40007000
 80040d8:	00001388 	.word	0x00001388
 80040dc:	efffffff 	.word	0xefffffff
 80040e0:	feffffff 	.word	0xfeffffff
 80040e4:	11c1808c 	.word	0x11c1808c
 80040e8:	eefefffc 	.word	0xeefefffc

080040ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0e9      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004100:	4b76      	ldr	r3, [pc, #472]	; (80042dc <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2207      	movs	r2, #7
 8004106:	4013      	ands	r3, r2
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d91e      	bls.n	800414c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4b73      	ldr	r3, [pc, #460]	; (80042dc <HAL_RCC_ClockConfig+0x1f0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2207      	movs	r2, #7
 8004114:	4393      	bics	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	4b70      	ldr	r3, [pc, #448]	; (80042dc <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004120:	f7fd fddc 	bl	8001cdc <HAL_GetTick>
 8004124:	0003      	movs	r3, r0
 8004126:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004128:	e009      	b.n	800413e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412a:	f7fd fdd7 	bl	8001cdc <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	4a6a      	ldr	r2, [pc, #424]	; (80042e0 <HAL_RCC_ClockConfig+0x1f4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e0ca      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800413e:	4b67      	ldr	r3, [pc, #412]	; (80042dc <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2207      	movs	r2, #7
 8004144:	4013      	ands	r3, r2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d1ee      	bne.n	800412a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2202      	movs	r2, #2
 8004152:	4013      	ands	r3, r2
 8004154:	d015      	beq.n	8004182 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2204      	movs	r2, #4
 800415c:	4013      	ands	r3, r2
 800415e:	d006      	beq.n	800416e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004160:	4b60      	ldr	r3, [pc, #384]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	4b5f      	ldr	r3, [pc, #380]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004166:	21e0      	movs	r1, #224	; 0xe0
 8004168:	01c9      	lsls	r1, r1, #7
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416e:	4b5d      	ldr	r3, [pc, #372]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4a5d      	ldr	r2, [pc, #372]	; (80042e8 <HAL_RCC_ClockConfig+0x1fc>)
 8004174:	4013      	ands	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2201      	movs	r2, #1
 8004188:	4013      	ands	r3, r2
 800418a:	d057      	beq.n	800423c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	029b      	lsls	r3, r3, #10
 800419c:	4013      	ands	r3, r2
 800419e:	d12b      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e097      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ac:	4b4d      	ldr	r3, [pc, #308]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	049b      	lsls	r3, r3, #18
 80041b4:	4013      	ands	r3, r2
 80041b6:	d11f      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e08b      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c4:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4013      	ands	r3, r2
 80041ce:	d113      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e07f      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d106      	bne.n	80041ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041dc:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	2202      	movs	r2, #2
 80041e2:	4013      	ands	r3, r2
 80041e4:	d108      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e074      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ea:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	2202      	movs	r2, #2
 80041f0:	4013      	ands	r3, r2
 80041f2:	d101      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e06d      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041f8:	4b3a      	ldr	r3, [pc, #232]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2207      	movs	r2, #7
 80041fe:	4393      	bics	r3, r2
 8004200:	0019      	movs	r1, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004208:	430a      	orrs	r2, r1
 800420a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fd fd66 	bl	8001cdc <HAL_GetTick>
 8004210:	0003      	movs	r3, r0
 8004212:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004214:	e009      	b.n	800422a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004216:	f7fd fd61 	bl	8001cdc <HAL_GetTick>
 800421a:	0002      	movs	r2, r0
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	4a2f      	ldr	r2, [pc, #188]	; (80042e0 <HAL_RCC_ClockConfig+0x1f4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e054      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2238      	movs	r2, #56	; 0x38
 8004230:	401a      	ands	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	429a      	cmp	r2, r3
 800423a:	d1ec      	bne.n	8004216 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_RCC_ClockConfig+0x1f0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2207      	movs	r2, #7
 8004242:	4013      	ands	r3, r2
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d21e      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_ClockConfig+0x1f0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2207      	movs	r2, #7
 8004250:	4393      	bics	r3, r2
 8004252:	0019      	movs	r1, r3
 8004254:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_RCC_ClockConfig+0x1f0>)
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800425c:	f7fd fd3e 	bl	8001cdc <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004264:	e009      	b.n	800427a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004266:	f7fd fd39 	bl	8001cdc <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HAL_RCC_ClockConfig+0x1f4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e02c      	b.n	80042d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800427a:	4b18      	ldr	r3, [pc, #96]	; (80042dc <HAL_RCC_ClockConfig+0x1f0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2207      	movs	r2, #7
 8004280:	4013      	ands	r3, r2
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d1ee      	bne.n	8004266 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2204      	movs	r2, #4
 800428e:	4013      	ands	r3, r2
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4a15      	ldr	r2, [pc, #84]	; (80042ec <HAL_RCC_ClockConfig+0x200>)
 8004298:	4013      	ands	r3, r2
 800429a:	0019      	movs	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80042a6:	f000 f829 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042aa:	0001      	movs	r1, r0
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_RCC_ClockConfig+0x1f8>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	220f      	movs	r2, #15
 80042b4:	401a      	ands	r2, r3
 80042b6:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <HAL_RCC_ClockConfig+0x204>)
 80042b8:	0092      	lsls	r2, r2, #2
 80042ba:	58d3      	ldr	r3, [r2, r3]
 80042bc:	221f      	movs	r2, #31
 80042be:	4013      	ands	r3, r2
 80042c0:	000a      	movs	r2, r1
 80042c2:	40da      	lsrs	r2, r3
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCC_ClockConfig+0x208>)
 80042c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_ClockConfig+0x20c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7fd fca9 	bl	8001c24 <HAL_InitTick>
 80042d2:	0003      	movs	r3, r0
}
 80042d4:	0018      	movs	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b004      	add	sp, #16
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40022000 	.word	0x40022000
 80042e0:	00001388 	.word	0x00001388
 80042e4:	40021000 	.word	0x40021000
 80042e8:	fffff0ff 	.word	0xfffff0ff
 80042ec:	ffff8fff 	.word	0xffff8fff
 80042f0:	08008e38 	.word	0x08008e38
 80042f4:	2000000c 	.word	0x2000000c
 80042f8:	20000010 	.word	0x20000010

080042fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004302:	4b3c      	ldr	r3, [pc, #240]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2238      	movs	r2, #56	; 0x38
 8004308:	4013      	ands	r3, r2
 800430a:	d10f      	bne.n	800432c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800430c:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0adb      	lsrs	r3, r3, #11
 8004312:	2207      	movs	r2, #7
 8004314:	4013      	ands	r3, r2
 8004316:	2201      	movs	r2, #1
 8004318:	409a      	lsls	r2, r3
 800431a:	0013      	movs	r3, r2
 800431c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800431e:	6839      	ldr	r1, [r7, #0]
 8004320:	4835      	ldr	r0, [pc, #212]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004322:	f7fb ff0b 	bl	800013c <__udivsi3>
 8004326:	0003      	movs	r3, r0
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	e05d      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800432c:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2238      	movs	r2, #56	; 0x38
 8004332:	4013      	ands	r3, r2
 8004334:	2b08      	cmp	r3, #8
 8004336:	d102      	bne.n	800433e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004338:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_RCC_GetSysClockFreq+0x100>)
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	e054      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800433e:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2238      	movs	r2, #56	; 0x38
 8004344:	4013      	ands	r3, r2
 8004346:	2b10      	cmp	r3, #16
 8004348:	d138      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800434a:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2203      	movs	r2, #3
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	091b      	lsrs	r3, r3, #4
 800435a:	2207      	movs	r2, #7
 800435c:	4013      	ands	r3, r2
 800435e:	3301      	adds	r3, #1
 8004360:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d10d      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	4824      	ldr	r0, [pc, #144]	; (80043fc <HAL_RCC_GetSysClockFreq+0x100>)
 800436c:	f7fb fee6 	bl	800013c <__udivsi3>
 8004370:	0003      	movs	r3, r0
 8004372:	0019      	movs	r1, r3
 8004374:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	227f      	movs	r2, #127	; 0x7f
 800437c:	4013      	ands	r3, r2
 800437e:	434b      	muls	r3, r1
 8004380:	617b      	str	r3, [r7, #20]
        break;
 8004382:	e00d      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	481c      	ldr	r0, [pc, #112]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004388:	f7fb fed8 	bl	800013c <__udivsi3>
 800438c:	0003      	movs	r3, r0
 800438e:	0019      	movs	r1, r3
 8004390:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	0a1b      	lsrs	r3, r3, #8
 8004396:	227f      	movs	r2, #127	; 0x7f
 8004398:	4013      	ands	r3, r2
 800439a:	434b      	muls	r3, r1
 800439c:	617b      	str	r3, [r7, #20]
        break;
 800439e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	0f5b      	lsrs	r3, r3, #29
 80043a6:	2207      	movs	r2, #7
 80043a8:	4013      	ands	r3, r2
 80043aa:	3301      	adds	r3, #1
 80043ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	6978      	ldr	r0, [r7, #20]
 80043b2:	f7fb fec3 	bl	800013c <__udivsi3>
 80043b6:	0003      	movs	r3, r0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	e015      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80043bc:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2238      	movs	r2, #56	; 0x38
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d103      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2238      	movs	r2, #56	; 0x38
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b18      	cmp	r3, #24
 80043da:	d103      	bne.n	80043e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80043dc:	23fa      	movs	r3, #250	; 0xfa
 80043de:	01db      	lsls	r3, r3, #7
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	e001      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043e8:	693b      	ldr	r3, [r7, #16]
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b006      	add	sp, #24
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	40021000 	.word	0x40021000
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	007a1200 	.word	0x007a1200

08004400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b02      	ldr	r3, [pc, #8]	; (8004410 <HAL_RCC_GetHCLKFreq+0x10>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	0018      	movs	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	2000000c 	.word	0x2000000c

08004414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004414:	b5b0      	push	{r4, r5, r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004418:	f7ff fff2 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 800441c:	0004      	movs	r4, r0
 800441e:	f7ff fb3f 	bl	8003aa0 <LL_RCC_GetAPB1Prescaler>
 8004422:	0003      	movs	r3, r0
 8004424:	0b1a      	lsrs	r2, r3, #12
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004428:	0092      	lsls	r2, r2, #2
 800442a:	58d3      	ldr	r3, [r2, r3]
 800442c:	221f      	movs	r2, #31
 800442e:	4013      	ands	r3, r2
 8004430:	40dc      	lsrs	r4, r3
 8004432:	0023      	movs	r3, r4
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	bdb0      	pop	{r4, r5, r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	08008e78 	.word	0x08008e78

08004440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004448:	2313      	movs	r3, #19
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004450:	2312      	movs	r3, #18
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	029b      	lsls	r3, r3, #10
 8004460:	4013      	ands	r3, r2
 8004462:	d100      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004464:	e0a3      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004466:	2011      	movs	r0, #17
 8004468:	183b      	adds	r3, r7, r0
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446e:	4bc3      	ldr	r3, [pc, #780]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	055b      	lsls	r3, r3, #21
 8004476:	4013      	ands	r3, r2
 8004478:	d110      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447a:	4bc0      	ldr	r3, [pc, #768]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800447c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800447e:	4bbf      	ldr	r3, [pc, #764]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004480:	2180      	movs	r1, #128	; 0x80
 8004482:	0549      	lsls	r1, r1, #21
 8004484:	430a      	orrs	r2, r1
 8004486:	63da      	str	r2, [r3, #60]	; 0x3c
 8004488:	4bbc      	ldr	r3, [pc, #752]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800448a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	055b      	lsls	r3, r3, #21
 8004490:	4013      	ands	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
 8004494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004496:	183b      	adds	r3, r7, r0
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800449c:	4bb8      	ldr	r3, [pc, #736]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4bb7      	ldr	r3, [pc, #732]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	0049      	lsls	r1, r1, #1
 80044a6:	430a      	orrs	r2, r1
 80044a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044aa:	f7fd fc17 	bl	8001cdc <HAL_GetTick>
 80044ae:	0003      	movs	r3, r0
 80044b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b2:	e00b      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fd fc12 	bl	8001cdc <HAL_GetTick>
 80044b8:	0002      	movs	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d904      	bls.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80044c2:	2313      	movs	r3, #19
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	2203      	movs	r2, #3
 80044c8:	701a      	strb	r2, [r3, #0]
        break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044cc:	4bac      	ldr	r3, [pc, #688]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	4013      	ands	r3, r2
 80044d6:	d0ed      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80044d8:	2313      	movs	r3, #19
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d154      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044e2:	4ba6      	ldr	r3, [pc, #664]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044e6:	23c0      	movs	r3, #192	; 0xc0
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4013      	ands	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d019      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d014      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044fe:	4b9f      	ldr	r3, [pc, #636]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004502:	4aa0      	ldr	r2, [pc, #640]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004504:	4013      	ands	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004508:	4b9c      	ldr	r3, [pc, #624]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800450a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800450c:	4b9b      	ldr	r3, [pc, #620]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	0249      	lsls	r1, r1, #9
 8004512:	430a      	orrs	r2, r1
 8004514:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004516:	4b99      	ldr	r3, [pc, #612]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004518:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800451a:	4b98      	ldr	r3, [pc, #608]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800451c:	499a      	ldr	r1, [pc, #616]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800451e:	400a      	ands	r2, r1
 8004520:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004522:	4b96      	ldr	r3, [pc, #600]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2201      	movs	r2, #1
 800452c:	4013      	ands	r3, r2
 800452e:	d016      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd fbd4 	bl	8001cdc <HAL_GetTick>
 8004534:	0003      	movs	r3, r0
 8004536:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004538:	e00c      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fd fbcf 	bl	8001cdc <HAL_GetTick>
 800453e:	0002      	movs	r2, r0
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	4a91      	ldr	r2, [pc, #580]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d904      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800454a:	2313      	movs	r3, #19
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2203      	movs	r2, #3
 8004550:	701a      	strb	r2, [r3, #0]
            break;
 8004552:	e004      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004554:	4b89      	ldr	r3, [pc, #548]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004558:	2202      	movs	r2, #2
 800455a:	4013      	ands	r3, r2
 800455c:	d0ed      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800455e:	2313      	movs	r3, #19
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004568:	4b84      	ldr	r3, [pc, #528]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	4a85      	ldr	r2, [pc, #532]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800456e:	4013      	ands	r3, r2
 8004570:	0019      	movs	r1, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004576:	4b81      	ldr	r3, [pc, #516]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004578:	430a      	orrs	r2, r1
 800457a:	65da      	str	r2, [r3, #92]	; 0x5c
 800457c:	e00c      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800457e:	2312      	movs	r3, #18
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	2213      	movs	r2, #19
 8004584:	18ba      	adds	r2, r7, r2
 8004586:	7812      	ldrb	r2, [r2, #0]
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e005      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	2312      	movs	r3, #18
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	2213      	movs	r2, #19
 8004592:	18ba      	adds	r2, r7, r2
 8004594:	7812      	ldrb	r2, [r2, #0]
 8004596:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004598:	2311      	movs	r3, #17
 800459a:	18fb      	adds	r3, r7, r3
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d105      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a2:	4b76      	ldr	r3, [pc, #472]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a6:	4b75      	ldr	r3, [pc, #468]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045a8:	4979      	ldr	r1, [pc, #484]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2201      	movs	r2, #1
 80045b4:	4013      	ands	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b8:	4b70      	ldr	r3, [pc, #448]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	2203      	movs	r2, #3
 80045be:	4393      	bics	r3, r2
 80045c0:	0019      	movs	r1, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4b6d      	ldr	r3, [pc, #436]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045c8:	430a      	orrs	r2, r1
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2202      	movs	r2, #2
 80045d2:	4013      	ands	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d6:	4b69      	ldr	r3, [pc, #420]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	220c      	movs	r2, #12
 80045dc:	4393      	bics	r3, r2
 80045de:	0019      	movs	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	4b65      	ldr	r3, [pc, #404]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045e6:	430a      	orrs	r2, r1
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2210      	movs	r2, #16
 80045f0:	4013      	ands	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f4:	4b61      	ldr	r3, [pc, #388]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	4a66      	ldr	r2, [pc, #408]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	0019      	movs	r1, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	4b5e      	ldr	r3, [pc, #376]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004604:	430a      	orrs	r2, r1
 8004606:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4013      	ands	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	4a5f      	ldr	r2, [pc, #380]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800461a:	4013      	ands	r3, r2
 800461c:	0019      	movs	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	4b56      	ldr	r3, [pc, #344]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004624:	430a      	orrs	r2, r1
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4013      	ands	r3, r2
 8004632:	d009      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004634:	4b51      	ldr	r3, [pc, #324]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004638:	4a58      	ldr	r2, [pc, #352]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800463a:	4013      	ands	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69da      	ldr	r2, [r3, #28]
 8004642:	4b4e      	ldr	r3, [pc, #312]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004644:	430a      	orrs	r2, r1
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2220      	movs	r2, #32
 800464e:	4013      	ands	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004652:	4b4a      	ldr	r3, [pc, #296]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	4a52      	ldr	r2, [pc, #328]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004658:	4013      	ands	r3, r2
 800465a:	0019      	movs	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	4b46      	ldr	r3, [pc, #280]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004662:	430a      	orrs	r2, r1
 8004664:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	01db      	lsls	r3, r3, #7
 800466e:	4013      	ands	r3, r2
 8004670:	d015      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004672:	4b42      	ldr	r3, [pc, #264]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	0899      	lsrs	r1, r3, #2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1a      	ldr	r2, [r3, #32]
 800467e:	4b3f      	ldr	r3, [pc, #252]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004680:	430a      	orrs	r2, r1
 8004682:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	05db      	lsls	r3, r3, #23
 800468c:	429a      	cmp	r2, r3
 800468e:	d106      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004690:	4b3a      	ldr	r3, [pc, #232]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	4b39      	ldr	r3, [pc, #228]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	0249      	lsls	r1, r1, #9
 800469a:	430a      	orrs	r2, r1
 800469c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	031b      	lsls	r3, r3, #12
 80046a6:	4013      	ands	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046aa:	4b34      	ldr	r3, [pc, #208]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	2240      	movs	r2, #64	; 0x40
 80046b0:	4393      	bics	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b8:	4b30      	ldr	r3, [pc, #192]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046ba:	430a      	orrs	r2, r1
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	039b      	lsls	r3, r3, #14
 80046c6:	4013      	ands	r3, r2
 80046c8:	d016      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	4a35      	ldr	r2, [pc, #212]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	0019      	movs	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046d8:	4b28      	ldr	r3, [pc, #160]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046da:	430a      	orrs	r2, r1
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	03db      	lsls	r3, r3, #15
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d106      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	4b23      	ldr	r3, [pc, #140]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046f0:	2180      	movs	r1, #128	; 0x80
 80046f2:	0449      	lsls	r1, r1, #17
 80046f4:	430a      	orrs	r2, r1
 80046f6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	03db      	lsls	r3, r3, #15
 8004700:	4013      	ands	r3, r2
 8004702:	d016      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800470a:	4013      	ands	r3, r2
 800470c:	0019      	movs	r1, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004714:	430a      	orrs	r2, r1
 8004716:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	045b      	lsls	r3, r3, #17
 8004720:	429a      	cmp	r2, r3
 8004722:	d106      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004724:	4b15      	ldr	r3, [pc, #84]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	4b14      	ldr	r3, [pc, #80]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	0449      	lsls	r1, r1, #17
 800472e:	430a      	orrs	r2, r1
 8004730:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	4013      	ands	r3, r2
 800473c:	d016      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800473e:	4b0f      	ldr	r3, [pc, #60]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004744:	4013      	ands	r3, r2
 8004746:	0019      	movs	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800474e:	430a      	orrs	r2, r1
 8004750:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	01db      	lsls	r3, r3, #7
 800475a:	429a      	cmp	r2, r3
 800475c:	d106      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004764:	2180      	movs	r1, #128	; 0x80
 8004766:	0249      	lsls	r1, r1, #9
 8004768:	430a      	orrs	r2, r1
 800476a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800476c:	2312      	movs	r3, #18
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	781b      	ldrb	r3, [r3, #0]
}
 8004772:	0018      	movs	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	b006      	add	sp, #24
 8004778:	bd80      	pop	{r7, pc}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	40021000 	.word	0x40021000
 8004780:	40007000 	.word	0x40007000
 8004784:	fffffcff 	.word	0xfffffcff
 8004788:	fffeffff 	.word	0xfffeffff
 800478c:	00001388 	.word	0x00001388
 8004790:	efffffff 	.word	0xefffffff
 8004794:	fffff3ff 	.word	0xfffff3ff
 8004798:	fff3ffff 	.word	0xfff3ffff
 800479c:	ffcfffff 	.word	0xffcfffff
 80047a0:	ffffcfff 	.word	0xffffcfff
 80047a4:	ffbfffff 	.word	0xffbfffff
 80047a8:	feffffff 	.word	0xfeffffff
 80047ac:	ffff3fff 	.word	0xffff3fff

080047b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e04a      	b.n	8004858 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	223d      	movs	r2, #61	; 0x3d
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d107      	bne.n	80047de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	223c      	movs	r2, #60	; 0x3c
 80047d2:	2100      	movs	r1, #0
 80047d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f7fc ffed 	bl	80017b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	223d      	movs	r2, #61	; 0x3d
 80047e2:	2102      	movs	r1, #2
 80047e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3304      	adds	r3, #4
 80047ee:	0019      	movs	r1, r3
 80047f0:	0010      	movs	r0, r2
 80047f2:	f000 fcd9 	bl	80051a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2248      	movs	r2, #72	; 0x48
 80047fa:	2101      	movs	r1, #1
 80047fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	223e      	movs	r2, #62	; 0x3e
 8004802:	2101      	movs	r1, #1
 8004804:	5499      	strb	r1, [r3, r2]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	223f      	movs	r2, #63	; 0x3f
 800480a:	2101      	movs	r1, #1
 800480c:	5499      	strb	r1, [r3, r2]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2240      	movs	r2, #64	; 0x40
 8004812:	2101      	movs	r1, #1
 8004814:	5499      	strb	r1, [r3, r2]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2241      	movs	r2, #65	; 0x41
 800481a:	2101      	movs	r1, #1
 800481c:	5499      	strb	r1, [r3, r2]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2242      	movs	r2, #66	; 0x42
 8004822:	2101      	movs	r1, #1
 8004824:	5499      	strb	r1, [r3, r2]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2243      	movs	r2, #67	; 0x43
 800482a:	2101      	movs	r1, #1
 800482c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2244      	movs	r2, #68	; 0x44
 8004832:	2101      	movs	r1, #1
 8004834:	5499      	strb	r1, [r3, r2]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2245      	movs	r2, #69	; 0x45
 800483a:	2101      	movs	r1, #1
 800483c:	5499      	strb	r1, [r3, r2]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2246      	movs	r2, #70	; 0x46
 8004842:	2101      	movs	r1, #1
 8004844:	5499      	strb	r1, [r3, r2]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2247      	movs	r2, #71	; 0x47
 800484a:	2101      	movs	r1, #1
 800484c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	223d      	movs	r2, #61	; 0x3d
 8004852:	2101      	movs	r1, #1
 8004854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	223d      	movs	r2, #61	; 0x3d
 800486c:	5c9b      	ldrb	r3, [r3, r2]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e042      	b.n	80048fe <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	223d      	movs	r2, #61	; 0x3d
 800487c:	2102      	movs	r1, #2
 800487e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2101      	movs	r1, #1
 800488c:	430a      	orrs	r2, r1
 800488e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <HAL_TIM_Base_Start_IT+0xa8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00f      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x5a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	05db      	lsls	r3, r3, #23
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d009      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x5a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <HAL_TIM_Base_Start_IT+0xac>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x5a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_TIM_Base_Start_IT+0xb0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d116      	bne.n	80048e8 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <HAL_TIM_Base_Start_IT+0xb4>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b06      	cmp	r3, #6
 80048ca:	d016      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x9a>
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	2380      	movs	r3, #128	; 0x80
 80048d0:	025b      	lsls	r3, r3, #9
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d011      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2101      	movs	r1, #1
 80048e2:	430a      	orrs	r2, r1
 80048e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e6:	e008      	b.n	80048fa <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2101      	movs	r1, #1
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e000      	b.n	80048fc <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b004      	add	sp, #16
 8004904:	bd80      	pop	{r7, pc}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40000400 	.word	0x40000400
 8004910:	40014000 	.word	0x40014000
 8004914:	00010007 	.word	0x00010007

08004918 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e04a      	b.n	80049c0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	223d      	movs	r2, #61	; 0x3d
 800492e:	5c9b      	ldrb	r3, [r3, r2]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d107      	bne.n	8004946 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	223c      	movs	r2, #60	; 0x3c
 800493a:	2100      	movs	r1, #0
 800493c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f000 f841 	bl	80049c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	223d      	movs	r2, #61	; 0x3d
 800494a:	2102      	movs	r1, #2
 800494c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3304      	adds	r3, #4
 8004956:	0019      	movs	r1, r3
 8004958:	0010      	movs	r0, r2
 800495a:	f000 fc25 	bl	80051a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2248      	movs	r2, #72	; 0x48
 8004962:	2101      	movs	r1, #1
 8004964:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	223e      	movs	r2, #62	; 0x3e
 800496a:	2101      	movs	r1, #1
 800496c:	5499      	strb	r1, [r3, r2]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	223f      	movs	r2, #63	; 0x3f
 8004972:	2101      	movs	r1, #1
 8004974:	5499      	strb	r1, [r3, r2]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2240      	movs	r2, #64	; 0x40
 800497a:	2101      	movs	r1, #1
 800497c:	5499      	strb	r1, [r3, r2]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2241      	movs	r2, #65	; 0x41
 8004982:	2101      	movs	r1, #1
 8004984:	5499      	strb	r1, [r3, r2]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2242      	movs	r2, #66	; 0x42
 800498a:	2101      	movs	r1, #1
 800498c:	5499      	strb	r1, [r3, r2]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2243      	movs	r2, #67	; 0x43
 8004992:	2101      	movs	r1, #1
 8004994:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2244      	movs	r2, #68	; 0x44
 800499a:	2101      	movs	r1, #1
 800499c:	5499      	strb	r1, [r3, r2]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2245      	movs	r2, #69	; 0x45
 80049a2:	2101      	movs	r1, #1
 80049a4:	5499      	strb	r1, [r3, r2]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2246      	movs	r2, #70	; 0x46
 80049aa:	2101      	movs	r1, #1
 80049ac:	5499      	strb	r1, [r3, r2]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2247      	movs	r2, #71	; 0x47
 80049b2:	2101      	movs	r1, #1
 80049b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	223d      	movs	r2, #61	; 0x3d
 80049ba:	2101      	movs	r1, #1
 80049bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d108      	bne.n	80049fa <HAL_TIM_PWM_Start+0x22>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	223e      	movs	r2, #62	; 0x3e
 80049ec:	5c9b      	ldrb	r3, [r3, r2]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	1e5a      	subs	r2, r3, #1
 80049f4:	4193      	sbcs	r3, r2
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	e037      	b.n	8004a6a <HAL_TIM_PWM_Start+0x92>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d108      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x3a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	223f      	movs	r2, #63	; 0x3f
 8004a04:	5c9b      	ldrb	r3, [r3, r2]
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	1e5a      	subs	r2, r3, #1
 8004a0c:	4193      	sbcs	r3, r2
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	e02b      	b.n	8004a6a <HAL_TIM_PWM_Start+0x92>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d108      	bne.n	8004a2a <HAL_TIM_PWM_Start+0x52>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2240      	movs	r2, #64	; 0x40
 8004a1c:	5c9b      	ldrb	r3, [r3, r2]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	1e5a      	subs	r2, r3, #1
 8004a24:	4193      	sbcs	r3, r2
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	e01f      	b.n	8004a6a <HAL_TIM_PWM_Start+0x92>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b0c      	cmp	r3, #12
 8004a2e:	d108      	bne.n	8004a42 <HAL_TIM_PWM_Start+0x6a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2241      	movs	r2, #65	; 0x41
 8004a34:	5c9b      	ldrb	r3, [r3, r2]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	1e5a      	subs	r2, r3, #1
 8004a3c:	4193      	sbcs	r3, r2
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	e013      	b.n	8004a6a <HAL_TIM_PWM_Start+0x92>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d108      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x82>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2242      	movs	r2, #66	; 0x42
 8004a4c:	5c9b      	ldrb	r3, [r3, r2]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	1e5a      	subs	r2, r3, #1
 8004a54:	4193      	sbcs	r3, r2
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e007      	b.n	8004a6a <HAL_TIM_PWM_Start+0x92>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2243      	movs	r2, #67	; 0x43
 8004a5e:	5c9b      	ldrb	r3, [r3, r2]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	1e5a      	subs	r2, r3, #1
 8004a66:	4193      	sbcs	r3, r2
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e08b      	b.n	8004b8a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0xaa>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	223e      	movs	r2, #62	; 0x3e
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	5499      	strb	r1, [r3, r2]
 8004a80:	e023      	b.n	8004aca <HAL_TIM_PWM_Start+0xf2>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start+0xba>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	223f      	movs	r2, #63	; 0x3f
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	5499      	strb	r1, [r3, r2]
 8004a90:	e01b      	b.n	8004aca <HAL_TIM_PWM_Start+0xf2>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0xca>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	5499      	strb	r1, [r3, r2]
 8004aa0:	e013      	b.n	8004aca <HAL_TIM_PWM_Start+0xf2>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0xda>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2241      	movs	r2, #65	; 0x41
 8004aac:	2102      	movs	r1, #2
 8004aae:	5499      	strb	r1, [r3, r2]
 8004ab0:	e00b      	b.n	8004aca <HAL_TIM_PWM_Start+0xf2>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0xea>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2242      	movs	r2, #66	; 0x42
 8004abc:	2102      	movs	r1, #2
 8004abe:	5499      	strb	r1, [r3, r2]
 8004ac0:	e003      	b.n	8004aca <HAL_TIM_PWM_Start+0xf2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2243      	movs	r2, #67	; 0x43
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f000 ff56 	bl	8005984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2d      	ldr	r2, [pc, #180]	; (8004b94 <HAL_TIM_PWM_Start+0x1bc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00e      	beq.n	8004b00 <HAL_TIM_PWM_Start+0x128>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2c      	ldr	r2, [pc, #176]	; (8004b98 <HAL_TIM_PWM_Start+0x1c0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d009      	beq.n	8004b00 <HAL_TIM_PWM_Start+0x128>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2a      	ldr	r2, [pc, #168]	; (8004b9c <HAL_TIM_PWM_Start+0x1c4>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d004      	beq.n	8004b00 <HAL_TIM_PWM_Start+0x128>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a29      	ldr	r2, [pc, #164]	; (8004ba0 <HAL_TIM_PWM_Start+0x1c8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_PWM_Start+0x12c>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <HAL_TIM_PWM_Start+0x12e>
 8004b04:	2300      	movs	r3, #0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2180      	movs	r1, #128	; 0x80
 8004b16:	0209      	lsls	r1, r1, #8
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <HAL_TIM_PWM_Start+0x1bc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00f      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x16e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	05db      	lsls	r3, r3, #23
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d009      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x16e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <HAL_TIM_PWM_Start+0x1cc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d004      	beq.n	8004b46 <HAL_TIM_PWM_Start+0x16e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <HAL_TIM_PWM_Start+0x1c0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d116      	bne.n	8004b74 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4a16      	ldr	r2, [pc, #88]	; (8004ba8 <HAL_TIM_PWM_Start+0x1d0>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b06      	cmp	r3, #6
 8004b56:	d016      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x1ae>
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	025b      	lsls	r3, r3, #9
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d011      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b72:	e008      	b.n	8004b86 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2101      	movs	r1, #1
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e000      	b.n	8004b88 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b86:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b004      	add	sp, #16
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	40014400 	.word	0x40014400
 8004ba0:	40014800 	.word	0x40014800
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	00010007 	.word	0x00010007

08004bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d021      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d01d      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2203      	movs	r2, #3
 8004bda:	4252      	negs	r2, r2
 8004bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2203      	movs	r2, #3
 8004bec:	4013      	ands	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f000 fac0 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e007      	b.n	8004c0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f000 fab3 	bl	8005168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 fabf 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2204      	movs	r2, #4
 8004c14:	4013      	ands	r3, r2
 8004c16:	d022      	beq.n	8004c5e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d01e      	beq.n	8004c5e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2205      	movs	r2, #5
 8004c26:	4252      	negs	r2, r2
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	23c0      	movs	r3, #192	; 0xc0
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f000 fa99 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004c46:	e007      	b.n	8004c58 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 fa8c 	bl	8005168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	0018      	movs	r0, r3
 8004c54:	f000 fa98 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2208      	movs	r2, #8
 8004c62:	4013      	ands	r3, r2
 8004c64:	d021      	beq.n	8004caa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d01d      	beq.n	8004caa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2209      	movs	r2, #9
 8004c74:	4252      	negs	r2, r2
 8004c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	2203      	movs	r2, #3
 8004c86:	4013      	ands	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 fa73 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004c92:	e007      	b.n	8004ca4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 fa66 	bl	8005168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f000 fa72 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2210      	movs	r2, #16
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d022      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2210      	movs	r2, #16
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d01e      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2211      	movs	r2, #17
 8004cc0:	4252      	negs	r2, r2
 8004cc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	23c0      	movs	r3, #192	; 0xc0
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 fa4c 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e007      	b.n	8004cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 fa3f 	bl	8005168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f000 fa4b 	bl	8005188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d00c      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	4013      	ands	r3, r2
 8004d06:	d008      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	4252      	negs	r2, r2
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7fc fb65 	bl	80013e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2280      	movs	r2, #128	; 0x80
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d104      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	2380      	movs	r3, #128	; 0x80
 8004d26:	019b      	lsls	r3, r3, #6
 8004d28:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d2a:	d00b      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2280      	movs	r2, #128	; 0x80
 8004d30:	4013      	ands	r3, r2
 8004d32:	d007      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1e      	ldr	r2, [pc, #120]	; (8004db4 <HAL_TIM_IRQHandler+0x208>)
 8004d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f000 feba 	bl	8005ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	2380      	movs	r3, #128	; 0x80
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2280      	movs	r2, #128	; 0x80
 8004d52:	4013      	ands	r3, r2
 8004d54:	d007      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <HAL_TIM_IRQHandler+0x20c>)
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 feb1 	bl	8005ac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2240      	movs	r2, #64	; 0x40
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d00c      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2240      	movs	r2, #64	; 0x40
 8004d72:	4013      	ands	r3, r2
 8004d74:	d008      	beq.n	8004d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2241      	movs	r2, #65	; 0x41
 8004d7c:	4252      	negs	r2, r2
 8004d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	0018      	movs	r0, r3
 8004d84:	f000 fa08 	bl	8005198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d00c      	beq.n	8004daa <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	4013      	ands	r3, r2
 8004d96:	d008      	beq.n	8004daa <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2221      	movs	r2, #33	; 0x21
 8004d9e:	4252      	negs	r2, r2
 8004da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 fe7f 	bl	8005aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b004      	add	sp, #16
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	ffffdf7f 	.word	0xffffdf7f
 8004db8:	fffffeff 	.word	0xfffffeff

08004dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2317      	movs	r3, #23
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	223c      	movs	r2, #60	; 0x3c
 8004dd4:	5c9b      	ldrb	r3, [r3, r2]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_TIM_PWM_ConfigChannel+0x22>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e0e5      	b.n	8004faa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	223c      	movs	r2, #60	; 0x3c
 8004de2:	2101      	movs	r1, #1
 8004de4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b14      	cmp	r3, #20
 8004dea:	d900      	bls.n	8004dee <HAL_TIM_PWM_ConfigChannel+0x32>
 8004dec:	e0d1      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	009a      	lsls	r2, r3, #2
 8004df2:	4b70      	ldr	r3, [pc, #448]	; (8004fb4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004df4:	18d3      	adds	r3, r2, r3
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	0011      	movs	r1, r2
 8004e02:	0018      	movs	r0, r3
 8004e04:	f000 fa5e 	bl	80052c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2108      	movs	r1, #8
 8004e14:	430a      	orrs	r2, r1
 8004e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2104      	movs	r1, #4
 8004e24:	438a      	bics	r2, r1
 8004e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6999      	ldr	r1, [r3, #24]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	619a      	str	r2, [r3, #24]
      break;
 8004e3a:	e0af      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	0011      	movs	r1, r2
 8004e44:	0018      	movs	r0, r3
 8004e46:	f000 fac7 	bl	80053d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699a      	ldr	r2, [r3, #24]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2180      	movs	r1, #128	; 0x80
 8004e56:	0109      	lsls	r1, r1, #4
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4954      	ldr	r1, [pc, #336]	; (8004fb8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004e68:	400a      	ands	r2, r1
 8004e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6999      	ldr	r1, [r3, #24]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	021a      	lsls	r2, r3, #8
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	619a      	str	r2, [r3, #24]
      break;
 8004e80:	e08c      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	0011      	movs	r1, r2
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f000 fb28 	bl	80054e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2108      	movs	r1, #8
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69da      	ldr	r2, [r3, #28]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2104      	movs	r1, #4
 8004eac:	438a      	bics	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69d9      	ldr	r1, [r3, #28]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	61da      	str	r2, [r3, #28]
      break;
 8004ec2:	e06b      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	0011      	movs	r1, r2
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f000 fb8f 	bl	80055f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2180      	movs	r1, #128	; 0x80
 8004ede:	0109      	lsls	r1, r1, #4
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69da      	ldr	r2, [r3, #28]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4932      	ldr	r1, [pc, #200]	; (8004fb8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69d9      	ldr	r1, [r3, #28]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	61da      	str	r2, [r3, #28]
      break;
 8004f08:	e048      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	0011      	movs	r1, r2
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 fbd6 	bl	80056c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2108      	movs	r1, #8
 8004f24:	430a      	orrs	r2, r1
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2104      	movs	r1, #4
 8004f34:	438a      	bics	r2, r1
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691a      	ldr	r2, [r3, #16]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f4a:	e027      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	0011      	movs	r1, r2
 8004f54:	0018      	movs	r0, r3
 8004f56:	f000 fc15 	bl	8005784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	0109      	lsls	r1, r1, #4
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4910      	ldr	r1, [pc, #64]	; (8004fb8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	021a      	lsls	r2, r3, #8
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f90:	e004      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004f92:	2317      	movs	r3, #23
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	2201      	movs	r2, #1
 8004f98:	701a      	strb	r2, [r3, #0]
      break;
 8004f9a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	223c      	movs	r2, #60	; 0x3c
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	5499      	strb	r1, [r3, r2]

  return status;
 8004fa4:	2317      	movs	r3, #23
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	781b      	ldrb	r3, [r3, #0]
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b006      	add	sp, #24
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	08008e98 	.word	0x08008e98
 8004fb8:	fffffbff 	.word	0xfffffbff

08004fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	230f      	movs	r3, #15
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	223c      	movs	r2, #60	; 0x3c
 8004fd2:	5c9b      	ldrb	r3, [r3, r2]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIM_ConfigClockSource+0x20>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e0bc      	b.n	8005156 <HAL_TIM_ConfigClockSource+0x19a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	223c      	movs	r2, #60	; 0x3c
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	223d      	movs	r2, #61	; 0x3d
 8004fe8:	2102      	movs	r1, #2
 8004fea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4a5a      	ldr	r2, [pc, #360]	; (8005160 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4a59      	ldr	r2, [pc, #356]	; (8005164 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005000:	4013      	ands	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	0192      	lsls	r2, r2, #6
 8005014:	4293      	cmp	r3, r2
 8005016:	d040      	beq.n	800509a <HAL_TIM_ConfigClockSource+0xde>
 8005018:	2280      	movs	r2, #128	; 0x80
 800501a:	0192      	lsls	r2, r2, #6
 800501c:	4293      	cmp	r3, r2
 800501e:	d900      	bls.n	8005022 <HAL_TIM_ConfigClockSource+0x66>
 8005020:	e088      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x178>
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	0152      	lsls	r2, r2, #5
 8005026:	4293      	cmp	r3, r2
 8005028:	d100      	bne.n	800502c <HAL_TIM_ConfigClockSource+0x70>
 800502a:	e088      	b.n	800513e <HAL_TIM_ConfigClockSource+0x182>
 800502c:	2280      	movs	r2, #128	; 0x80
 800502e:	0152      	lsls	r2, r2, #5
 8005030:	4293      	cmp	r3, r2
 8005032:	d900      	bls.n	8005036 <HAL_TIM_ConfigClockSource+0x7a>
 8005034:	e07e      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x178>
 8005036:	2b70      	cmp	r3, #112	; 0x70
 8005038:	d018      	beq.n	800506c <HAL_TIM_ConfigClockSource+0xb0>
 800503a:	d900      	bls.n	800503e <HAL_TIM_ConfigClockSource+0x82>
 800503c:	e07a      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x178>
 800503e:	2b60      	cmp	r3, #96	; 0x60
 8005040:	d04f      	beq.n	80050e2 <HAL_TIM_ConfigClockSource+0x126>
 8005042:	d900      	bls.n	8005046 <HAL_TIM_ConfigClockSource+0x8a>
 8005044:	e076      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x178>
 8005046:	2b50      	cmp	r3, #80	; 0x50
 8005048:	d03b      	beq.n	80050c2 <HAL_TIM_ConfigClockSource+0x106>
 800504a:	d900      	bls.n	800504e <HAL_TIM_ConfigClockSource+0x92>
 800504c:	e072      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x178>
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d057      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0x146>
 8005052:	d900      	bls.n	8005056 <HAL_TIM_ConfigClockSource+0x9a>
 8005054:	e06e      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x178>
 8005056:	2b30      	cmp	r3, #48	; 0x30
 8005058:	d063      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x166>
 800505a:	d86b      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x178>
 800505c:	2b20      	cmp	r3, #32
 800505e:	d060      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x166>
 8005060:	d868      	bhi.n	8005134 <HAL_TIM_ConfigClockSource+0x178>
 8005062:	2b00      	cmp	r3, #0
 8005064:	d05d      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x166>
 8005066:	2b10      	cmp	r3, #16
 8005068:	d05b      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x166>
 800506a:	e063      	b.n	8005134 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800507c:	f000 fc62 	bl	8005944 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2277      	movs	r2, #119	; 0x77
 800508c:	4313      	orrs	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	609a      	str	r2, [r3, #8]
      break;
 8005098:	e052      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050aa:	f000 fc4b 	bl	8005944 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2180      	movs	r1, #128	; 0x80
 80050ba:	01c9      	lsls	r1, r1, #7
 80050bc:	430a      	orrs	r2, r1
 80050be:	609a      	str	r2, [r3, #8]
      break;
 80050c0:	e03e      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	001a      	movs	r2, r3
 80050d0:	f000 fbbc 	bl	800584c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2150      	movs	r1, #80	; 0x50
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 fc16 	bl	800590c <TIM_ITRx_SetConfig>
      break;
 80050e0:	e02e      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ee:	001a      	movs	r2, r3
 80050f0:	f000 fbda 	bl	80058a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2160      	movs	r1, #96	; 0x60
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 fc06 	bl	800590c <TIM_ITRx_SetConfig>
      break;
 8005100:	e01e      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	001a      	movs	r2, r3
 8005110:	f000 fb9c 	bl	800584c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2140      	movs	r1, #64	; 0x40
 800511a:	0018      	movs	r0, r3
 800511c:	f000 fbf6 	bl	800590c <TIM_ITRx_SetConfig>
      break;
 8005120:	e00e      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	0019      	movs	r1, r3
 800512c:	0010      	movs	r0, r2
 800512e:	f000 fbed 	bl	800590c <TIM_ITRx_SetConfig>
      break;
 8005132:	e005      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005134:	230f      	movs	r3, #15
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
      break;
 800513c:	e000      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800513e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	223d      	movs	r2, #61	; 0x3d
 8005144:	2101      	movs	r1, #1
 8005146:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	223c      	movs	r2, #60	; 0x3c
 800514c:	2100      	movs	r1, #0
 800514e:	5499      	strb	r1, [r3, r2]

  return status;
 8005150:	230f      	movs	r3, #15
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	781b      	ldrb	r3, [r3, #0]
}
 8005156:	0018      	movs	r0, r3
 8005158:	46bd      	mov	sp, r7
 800515a:	b004      	add	sp, #16
 800515c:	bd80      	pop	{r7, pc}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	ffceff88 	.word	0xffceff88
 8005164:	ffff00ff 	.word	0xffff00ff

08005168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005180:	46c0      	nop			; (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005190:	46c0      	nop			; (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	b002      	add	sp, #8
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b002      	add	sp, #8
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3b      	ldr	r2, [pc, #236]	; (80052a8 <TIM_Base_SetConfig+0x100>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d008      	beq.n	80051d2 <TIM_Base_SetConfig+0x2a>
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	05db      	lsls	r3, r3, #23
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d003      	beq.n	80051d2 <TIM_Base_SetConfig+0x2a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a37      	ldr	r2, [pc, #220]	; (80052ac <TIM_Base_SetConfig+0x104>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d108      	bne.n	80051e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2270      	movs	r2, #112	; 0x70
 80051d6:	4393      	bics	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a30      	ldr	r2, [pc, #192]	; (80052a8 <TIM_Base_SetConfig+0x100>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d018      	beq.n	800521e <TIM_Base_SetConfig+0x76>
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	05db      	lsls	r3, r3, #23
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d013      	beq.n	800521e <TIM_Base_SetConfig+0x76>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <TIM_Base_SetConfig+0x104>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00f      	beq.n	800521e <TIM_Base_SetConfig+0x76>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2b      	ldr	r2, [pc, #172]	; (80052b0 <TIM_Base_SetConfig+0x108>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_Base_SetConfig+0x76>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2a      	ldr	r2, [pc, #168]	; (80052b4 <TIM_Base_SetConfig+0x10c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0x76>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a29      	ldr	r2, [pc, #164]	; (80052b8 <TIM_Base_SetConfig+0x110>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0x76>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a28      	ldr	r2, [pc, #160]	; (80052bc <TIM_Base_SetConfig+0x114>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <TIM_Base_SetConfig+0x118>)
 8005222:	4013      	ands	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2280      	movs	r2, #128	; 0x80
 8005234:	4393      	bics	r3, r2
 8005236:	001a      	movs	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <TIM_Base_SetConfig+0x100>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00b      	beq.n	8005276 <TIM_Base_SetConfig+0xce>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <TIM_Base_SetConfig+0x10c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_Base_SetConfig+0xce>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <TIM_Base_SetConfig+0x110>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_Base_SetConfig+0xce>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a12      	ldr	r2, [pc, #72]	; (80052bc <TIM_Base_SetConfig+0x114>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d103      	bne.n	800527e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2201      	movs	r2, #1
 800528a:	4013      	ands	r3, r2
 800528c:	2b01      	cmp	r3, #1
 800528e:	d106      	bne.n	800529e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2201      	movs	r2, #1
 8005296:	4393      	bics	r3, r2
 8005298:	001a      	movs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	611a      	str	r2, [r3, #16]
  }
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b004      	add	sp, #16
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40002000 	.word	0x40002000
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800
 80052c0:	fffffcff 	.word	0xfffffcff

080052c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	2201      	movs	r2, #1
 80052da:	4393      	bics	r3, r2
 80052dc:	001a      	movs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a32      	ldr	r2, [pc, #200]	; (80053bc <TIM_OC1_SetConfig+0xf8>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2203      	movs	r2, #3
 80052fa:	4393      	bics	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2202      	movs	r2, #2
 800530c:	4393      	bics	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a28      	ldr	r2, [pc, #160]	; (80053c0 <TIM_OC1_SetConfig+0xfc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <TIM_OC1_SetConfig+0x76>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a27      	ldr	r2, [pc, #156]	; (80053c4 <TIM_OC1_SetConfig+0x100>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <TIM_OC1_SetConfig+0x76>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a26      	ldr	r2, [pc, #152]	; (80053c8 <TIM_OC1_SetConfig+0x104>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_OC1_SetConfig+0x76>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a25      	ldr	r2, [pc, #148]	; (80053cc <TIM_OC1_SetConfig+0x108>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10c      	bne.n	8005354 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2208      	movs	r2, #8
 800533e:	4393      	bics	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2204      	movs	r2, #4
 8005350:	4393      	bics	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1a      	ldr	r2, [pc, #104]	; (80053c0 <TIM_OC1_SetConfig+0xfc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00b      	beq.n	8005374 <TIM_OC1_SetConfig+0xb0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a19      	ldr	r2, [pc, #100]	; (80053c4 <TIM_OC1_SetConfig+0x100>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d007      	beq.n	8005374 <TIM_OC1_SetConfig+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <TIM_OC1_SetConfig+0x104>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC1_SetConfig+0xb0>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a17      	ldr	r2, [pc, #92]	; (80053cc <TIM_OC1_SetConfig+0x108>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d111      	bne.n	8005398 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <TIM_OC1_SetConfig+0x10c>)
 8005378:	4013      	ands	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <TIM_OC1_SetConfig+0x110>)
 8005380:	4013      	ands	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	621a      	str	r2, [r3, #32]
}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b006      	add	sp, #24
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	fffeff8f 	.word	0xfffeff8f
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40014000 	.word	0x40014000
 80053c8:	40014400 	.word	0x40014400
 80053cc:	40014800 	.word	0x40014800
 80053d0:	fffffeff 	.word	0xfffffeff
 80053d4:	fffffdff 	.word	0xfffffdff

080053d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	2210      	movs	r2, #16
 80053ee:	4393      	bics	r3, r2
 80053f0:	001a      	movs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4a2e      	ldr	r2, [pc, #184]	; (80054c0 <TIM_OC2_SetConfig+0xe8>)
 8005406:	4013      	ands	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <TIM_OC2_SetConfig+0xec>)
 800540e:	4013      	ands	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2220      	movs	r2, #32
 8005422:	4393      	bics	r3, r2
 8005424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a24      	ldr	r2, [pc, #144]	; (80054c8 <TIM_OC2_SetConfig+0xf0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d10d      	bne.n	8005456 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2280      	movs	r2, #128	; 0x80
 800543e:	4393      	bics	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2240      	movs	r2, #64	; 0x40
 8005452:	4393      	bics	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1b      	ldr	r2, [pc, #108]	; (80054c8 <TIM_OC2_SetConfig+0xf0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00b      	beq.n	8005476 <TIM_OC2_SetConfig+0x9e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1a      	ldr	r2, [pc, #104]	; (80054cc <TIM_OC2_SetConfig+0xf4>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d007      	beq.n	8005476 <TIM_OC2_SetConfig+0x9e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a19      	ldr	r2, [pc, #100]	; (80054d0 <TIM_OC2_SetConfig+0xf8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d003      	beq.n	8005476 <TIM_OC2_SetConfig+0x9e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <TIM_OC2_SetConfig+0xfc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d113      	bne.n	800549e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <TIM_OC2_SetConfig+0x100>)
 800547a:	4013      	ands	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4a16      	ldr	r2, [pc, #88]	; (80054dc <TIM_OC2_SetConfig+0x104>)
 8005482:	4013      	ands	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	46c0      	nop			; (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b006      	add	sp, #24
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	feff8fff 	.word	0xfeff8fff
 80054c4:	fffffcff 	.word	0xfffffcff
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800
 80054d8:	fffffbff 	.word	0xfffffbff
 80054dc:	fffff7ff 	.word	0xfffff7ff

080054e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	4a33      	ldr	r2, [pc, #204]	; (80055c4 <TIM_OC3_SetConfig+0xe4>)
 80054f6:	401a      	ands	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a2f      	ldr	r2, [pc, #188]	; (80055c8 <TIM_OC3_SetConfig+0xe8>)
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2203      	movs	r2, #3
 8005514:	4393      	bics	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	4a29      	ldr	r2, [pc, #164]	; (80055cc <TIM_OC3_SetConfig+0xec>)
 8005526:	4013      	ands	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a25      	ldr	r2, [pc, #148]	; (80055d0 <TIM_OC3_SetConfig+0xf0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d10d      	bne.n	800555a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4a24      	ldr	r2, [pc, #144]	; (80055d4 <TIM_OC3_SetConfig+0xf4>)
 8005542:	4013      	ands	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	4a20      	ldr	r2, [pc, #128]	; (80055d8 <TIM_OC3_SetConfig+0xf8>)
 8005556:	4013      	ands	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <TIM_OC3_SetConfig+0xf0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_OC3_SetConfig+0x9a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1d      	ldr	r2, [pc, #116]	; (80055dc <TIM_OC3_SetConfig+0xfc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_OC3_SetConfig+0x9a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <TIM_OC3_SetConfig+0x100>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_OC3_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <TIM_OC3_SetConfig+0x104>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d113      	bne.n	80055a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <TIM_OC3_SetConfig+0x108>)
 800557e:	4013      	ands	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4a19      	ldr	r2, [pc, #100]	; (80055ec <TIM_OC3_SetConfig+0x10c>)
 8005586:	4013      	ands	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	4313      	orrs	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	621a      	str	r2, [r3, #32]
}
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b006      	add	sp, #24
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	fffffeff 	.word	0xfffffeff
 80055c8:	fffeff8f 	.word	0xfffeff8f
 80055cc:	fffffdff 	.word	0xfffffdff
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	fffff7ff 	.word	0xfffff7ff
 80055d8:	fffffbff 	.word	0xfffffbff
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40014400 	.word	0x40014400
 80055e4:	40014800 	.word	0x40014800
 80055e8:	ffffefff 	.word	0xffffefff
 80055ec:	ffffdfff 	.word	0xffffdfff

080055f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <TIM_OC4_SetConfig+0xb0>)
 8005606:	401a      	ands	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a22      	ldr	r2, [pc, #136]	; (80056a4 <TIM_OC4_SetConfig+0xb4>)
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4a21      	ldr	r2, [pc, #132]	; (80056a8 <TIM_OC4_SetConfig+0xb8>)
 8005624:	4013      	ands	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4a1d      	ldr	r2, [pc, #116]	; (80056ac <TIM_OC4_SetConfig+0xbc>)
 8005638:	4013      	ands	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	031b      	lsls	r3, r3, #12
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a19      	ldr	r2, [pc, #100]	; (80056b0 <TIM_OC4_SetConfig+0xc0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00b      	beq.n	8005668 <TIM_OC4_SetConfig+0x78>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a18      	ldr	r2, [pc, #96]	; (80056b4 <TIM_OC4_SetConfig+0xc4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_OC4_SetConfig+0x78>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <TIM_OC4_SetConfig+0xc8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC4_SetConfig+0x78>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a16      	ldr	r2, [pc, #88]	; (80056bc <TIM_OC4_SetConfig+0xcc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d109      	bne.n	800567c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <TIM_OC4_SetConfig+0xd0>)
 800566c:	4013      	ands	r3, r2
 800566e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	b006      	add	sp, #24
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	ffffefff 	.word	0xffffefff
 80056a4:	feff8fff 	.word	0xfeff8fff
 80056a8:	fffffcff 	.word	0xfffffcff
 80056ac:	ffffdfff 	.word	0xffffdfff
 80056b0:	40012c00 	.word	0x40012c00
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800
 80056c0:	ffffbfff 	.word	0xffffbfff

080056c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	4a23      	ldr	r2, [pc, #140]	; (8005768 <TIM_OC5_SetConfig+0xa4>)
 80056da:	401a      	ands	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a1f      	ldr	r2, [pc, #124]	; (800576c <TIM_OC5_SetConfig+0xa8>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4a1b      	ldr	r2, [pc, #108]	; (8005770 <TIM_OC5_SetConfig+0xac>)
 8005702:	4013      	ands	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	041b      	lsls	r3, r3, #16
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a17      	ldr	r2, [pc, #92]	; (8005774 <TIM_OC5_SetConfig+0xb0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00b      	beq.n	8005732 <TIM_OC5_SetConfig+0x6e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a16      	ldr	r2, [pc, #88]	; (8005778 <TIM_OC5_SetConfig+0xb4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_OC5_SetConfig+0x6e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a15      	ldr	r2, [pc, #84]	; (800577c <TIM_OC5_SetConfig+0xb8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_OC5_SetConfig+0x6e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a14      	ldr	r2, [pc, #80]	; (8005780 <TIM_OC5_SetConfig+0xbc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d109      	bne.n	8005746 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <TIM_OC5_SetConfig+0xa4>)
 8005736:	4013      	ands	r3, r2
 8005738:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	b006      	add	sp, #24
 8005766:	bd80      	pop	{r7, pc}
 8005768:	fffeffff 	.word	0xfffeffff
 800576c:	fffeff8f 	.word	0xfffeff8f
 8005770:	fffdffff 	.word	0xfffdffff
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	4a24      	ldr	r2, [pc, #144]	; (800582c <TIM_OC6_SetConfig+0xa8>)
 800579a:	401a      	ands	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a20      	ldr	r2, [pc, #128]	; (8005830 <TIM_OC6_SetConfig+0xac>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	021b      	lsls	r3, r3, #8
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <TIM_OC6_SetConfig+0xb0>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	051b      	lsls	r3, r3, #20
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a18      	ldr	r2, [pc, #96]	; (8005838 <TIM_OC6_SetConfig+0xb4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d00b      	beq.n	80057f4 <TIM_OC6_SetConfig+0x70>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a17      	ldr	r2, [pc, #92]	; (800583c <TIM_OC6_SetConfig+0xb8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_OC6_SetConfig+0x70>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a16      	ldr	r2, [pc, #88]	; (8005840 <TIM_OC6_SetConfig+0xbc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC6_SetConfig+0x70>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a15      	ldr	r2, [pc, #84]	; (8005844 <TIM_OC6_SetConfig+0xc0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d109      	bne.n	8005808 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	4a14      	ldr	r2, [pc, #80]	; (8005848 <TIM_OC6_SetConfig+0xc4>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	029b      	lsls	r3, r3, #10
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b006      	add	sp, #24
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	ffefffff 	.word	0xffefffff
 8005830:	feff8fff 	.word	0xfeff8fff
 8005834:	ffdfffff 	.word	0xffdfffff
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800
 8005848:	fffbffff 	.word	0xfffbffff

0800584c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	2201      	movs	r2, #1
 8005864:	4393      	bics	r3, r2
 8005866:	001a      	movs	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	22f0      	movs	r2, #240	; 0xf0
 8005876:	4393      	bics	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	220a      	movs	r2, #10
 8005888:	4393      	bics	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	621a      	str	r2, [r3, #32]
}
 80058a0:	46c0      	nop			; (mov r8, r8)
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b006      	add	sp, #24
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	2210      	movs	r2, #16
 80058c0:	4393      	bics	r3, r2
 80058c2:	001a      	movs	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4a0d      	ldr	r2, [pc, #52]	; (8005908 <TIM_TI2_ConfigInputStage+0x60>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	031b      	lsls	r3, r3, #12
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	22a0      	movs	r2, #160	; 0xa0
 80058e4:	4393      	bics	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	621a      	str	r2, [r3, #32]
}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	46bd      	mov	sp, r7
 8005902:	b006      	add	sp, #24
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	ffff0fff 	.word	0xffff0fff

0800590c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a08      	ldr	r2, [pc, #32]	; (8005940 <TIM_ITRx_SetConfig+0x34>)
 8005920:	4013      	ands	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	2207      	movs	r2, #7
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	609a      	str	r2, [r3, #8]
}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	46bd      	mov	sp, r7
 800593a:	b004      	add	sp, #16
 800593c:	bd80      	pop	{r7, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	ffcfff8f 	.word	0xffcfff8f

08005944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	4a09      	ldr	r2, [pc, #36]	; (8005980 <TIM_ETR_SetConfig+0x3c>)
 800595c:	4013      	ands	r3, r2
 800595e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	021a      	lsls	r2, r3, #8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	431a      	orrs	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	609a      	str	r2, [r3, #8]
}
 8005978:	46c0      	nop			; (mov r8, r8)
 800597a:	46bd      	mov	sp, r7
 800597c:	b006      	add	sp, #24
 800597e:	bd80      	pop	{r7, pc}
 8005980:	ffff00ff 	.word	0xffff00ff

08005984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	221f      	movs	r2, #31
 8005994:	4013      	ands	r3, r2
 8005996:	2201      	movs	r2, #1
 8005998:	409a      	lsls	r2, r3
 800599a:	0013      	movs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	43d2      	mvns	r2, r2
 80059a6:	401a      	ands	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1a      	ldr	r2, [r3, #32]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	211f      	movs	r1, #31
 80059b4:	400b      	ands	r3, r1
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4099      	lsls	r1, r3
 80059ba:	000b      	movs	r3, r1
 80059bc:	431a      	orrs	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b006      	add	sp, #24
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	223c      	movs	r2, #60	; 0x3c
 80059da:	5c9b      	ldrb	r3, [r3, r2]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e055      	b.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	223c      	movs	r2, #60	; 0x3c
 80059e8:	2101      	movs	r1, #1
 80059ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	223d      	movs	r2, #61	; 0x3d
 80059f0:	2102      	movs	r1, #2
 80059f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a23      	ldr	r2, [pc, #140]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a22      	ldr	r2, [pc, #136]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2270      	movs	r2, #112	; 0x70
 8005a24:	4393      	bics	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00f      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	05db      	lsls	r3, r3, #23
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d009      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a11      	ldr	r2, [pc, #68]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d10c      	bne.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2280      	movs	r2, #128	; 0x80
 8005a68:	4393      	bics	r3, r2
 8005a6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	223d      	movs	r2, #61	; 0x3d
 8005a82:	2101      	movs	r1, #1
 8005a84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	223c      	movs	r2, #60	; 0x3c
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	0018      	movs	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b004      	add	sp, #16
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	ff0fffff 	.word	0xff0fffff
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40014000 	.word	0x40014000

08005aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ab0:	46c0      	nop			; (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	b002      	add	sp, #8
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b002      	add	sp, #8
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e046      	b.n	8005b78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2288      	movs	r2, #136	; 0x88
 8005aee:	589b      	ldr	r3, [r3, r2]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2284      	movs	r2, #132	; 0x84
 8005af8:	2100      	movs	r1, #0
 8005afa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	0018      	movs	r0, r3
 8005b00:	f7fb ff42 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2288      	movs	r2, #136	; 0x88
 8005b08:	2124      	movs	r1, #36	; 0x24
 8005b0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2101      	movs	r1, #1
 8005b18:	438a      	bics	r2, r1
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	0018      	movs	r0, r3
 8005b28:	f000 ff2e 	bl	8006988 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f000 fc6c 	bl	800640c <UART_SetConfig>
 8005b34:	0003      	movs	r3, r0
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e01c      	b.n	8005b78 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	490d      	ldr	r1, [pc, #52]	; (8005b80 <HAL_UART_Init+0xa8>)
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	212a      	movs	r1, #42	; 0x2a
 8005b5a:	438a      	bics	r2, r1
 8005b5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2101      	movs	r1, #1
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	0018      	movs	r0, r3
 8005b72:	f000 ffbd 	bl	8006af0 <UART_CheckIdleState>
 8005b76:	0003      	movs	r3, r0
}
 8005b78:	0018      	movs	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	ffffb7ff 	.word	0xffffb7ff

08005b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	; 0x28
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	1dbb      	adds	r3, r7, #6
 8005b92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2288      	movs	r2, #136	; 0x88
 8005b98:	589b      	ldr	r3, [r3, r2]
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d000      	beq.n	8005ba0 <HAL_UART_Transmit+0x1c>
 8005b9e:	e090      	b.n	8005cc2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_UART_Transmit+0x2a>
 8005ba6:	1dbb      	adds	r3, r7, #6
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e088      	b.n	8005cc4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	015b      	lsls	r3, r3, #5
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d109      	bne.n	8005bd2 <HAL_UART_Transmit+0x4e>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d105      	bne.n	8005bd2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d001      	beq.n	8005bd2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e078      	b.n	8005cc4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2290      	movs	r2, #144	; 0x90
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2288      	movs	r2, #136	; 0x88
 8005bde:	2121      	movs	r1, #33	; 0x21
 8005be0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be2:	f7fc f87b 	bl	8001cdc <HAL_GetTick>
 8005be6:	0003      	movs	r3, r0
 8005be8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1dba      	adds	r2, r7, #6
 8005bee:	2154      	movs	r1, #84	; 0x54
 8005bf0:	8812      	ldrh	r2, [r2, #0]
 8005bf2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1dba      	adds	r2, r7, #6
 8005bf8:	2156      	movs	r1, #86	; 0x56
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	015b      	lsls	r3, r3, #5
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d108      	bne.n	8005c1c <HAL_UART_Transmit+0x98>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d104      	bne.n	8005c1c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	61bb      	str	r3, [r7, #24]
 8005c1a:	e003      	b.n	8005c24 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c24:	e030      	b.n	8005c88 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	0013      	movs	r3, r2
 8005c30:	2200      	movs	r2, #0
 8005c32:	2180      	movs	r1, #128	; 0x80
 8005c34:	f001 f806 	bl	8006c44 <UART_WaitOnFlagUntilTimeout>
 8005c38:	1e03      	subs	r3, r0, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2288      	movs	r2, #136	; 0x88
 8005c40:	2120      	movs	r1, #32
 8005c42:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e03d      	b.n	8005cc4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	001a      	movs	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	05d2      	lsls	r2, r2, #23
 8005c5a:	0dd2      	lsrs	r2, r2, #23
 8005c5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	3302      	adds	r3, #2
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	e007      	b.n	8005c76 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	781a      	ldrb	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2256      	movs	r2, #86	; 0x56
 8005c7a:	5a9b      	ldrh	r3, [r3, r2]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b299      	uxth	r1, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2256      	movs	r2, #86	; 0x56
 8005c86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2256      	movs	r2, #86	; 0x56
 8005c8c:	5a9b      	ldrh	r3, [r3, r2]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1c8      	bne.n	8005c26 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	0013      	movs	r3, r2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2140      	movs	r1, #64	; 0x40
 8005ca2:	f000 ffcf 	bl	8006c44 <UART_WaitOnFlagUntilTimeout>
 8005ca6:	1e03      	subs	r3, r0, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2288      	movs	r2, #136	; 0x88
 8005cae:	2120      	movs	r1, #32
 8005cb0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e006      	b.n	8005cc4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2288      	movs	r2, #136	; 0x88
 8005cba:	2120      	movs	r1, #32
 8005cbc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e000      	b.n	8005cc4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005cc2:	2302      	movs	r3, #2
  }
}
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b008      	add	sp, #32
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	1dbb      	adds	r3, r7, #6
 8005cd8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	228c      	movs	r2, #140	; 0x8c
 8005cde:	589b      	ldr	r3, [r3, r2]
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d14a      	bne.n	8005d7a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <HAL_UART_Receive_IT+0x26>
 8005cea:	1dbb      	adds	r3, r7, #6
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e042      	b.n	8005d7c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	2380      	movs	r3, #128	; 0x80
 8005cfc:	015b      	lsls	r3, r3, #5
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d109      	bne.n	8005d16 <HAL_UART_Receive_IT+0x4a>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d001      	beq.n	8005d16 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e032      	b.n	8005d7c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a18      	ldr	r2, [pc, #96]	; (8005d84 <HAL_UART_Receive_IT+0xb8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d020      	beq.n	8005d68 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	4013      	ands	r3, r2
 8005d32:	d019      	beq.n	8005d68 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d34:	f3ef 8310 	mrs	r3, PRIMASK
 8005d38:	613b      	str	r3, [r7, #16]
  return(result);
 8005d3a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	2301      	movs	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f383 8810 	msr	PRIMASK, r3
}
 8005d48:	46c0      	nop			; (mov r8, r8)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2180      	movs	r1, #128	; 0x80
 8005d56:	04c9      	lsls	r1, r1, #19
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f383 8810 	msr	PRIMASK, r3
}
 8005d66:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d68:	1dbb      	adds	r3, r7, #6
 8005d6a:	881a      	ldrh	r2, [r3, #0]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 ffd7 	bl	8006d24 <UART_Start_Receive_IT>
 8005d76:	0003      	movs	r3, r0
 8005d78:	e000      	b.n	8005d7c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8005d7a:	2302      	movs	r3, #2
  }
}
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b008      	add	sp, #32
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40008000 	.word	0x40008000

08005d88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d88:	b5b0      	push	{r4, r5, r7, lr}
 8005d8a:	b0aa      	sub	sp, #168	; 0xa8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	22a4      	movs	r2, #164	; 0xa4
 8005d98:	18b9      	adds	r1, r7, r2
 8005d9a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	20a0      	movs	r0, #160	; 0xa0
 8005da4:	1839      	adds	r1, r7, r0
 8005da6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	249c      	movs	r4, #156	; 0x9c
 8005db0:	1939      	adds	r1, r7, r4
 8005db2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005db4:	0011      	movs	r1, r2
 8005db6:	18bb      	adds	r3, r7, r2
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4aa2      	ldr	r2, [pc, #648]	; (8006044 <HAL_UART_IRQHandler+0x2bc>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	2298      	movs	r2, #152	; 0x98
 8005dc0:	18bd      	adds	r5, r7, r2
 8005dc2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005dc4:	18bb      	adds	r3, r7, r2
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d11a      	bne.n	8005e02 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005dcc:	187b      	adds	r3, r7, r1
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d015      	beq.n	8005e02 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005dd6:	183b      	adds	r3, r7, r0
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d105      	bne.n	8005dec <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005de0:	193b      	adds	r3, r7, r4
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	055b      	lsls	r3, r3, #21
 8005de8:	4013      	ands	r3, r2
 8005dea:	d00a      	beq.n	8005e02 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d100      	bne.n	8005df6 <HAL_UART_IRQHandler+0x6e>
 8005df4:	e2dc      	b.n	80063b0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	0010      	movs	r0, r2
 8005dfe:	4798      	blx	r3
      }
      return;
 8005e00:	e2d6      	b.n	80063b0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e02:	2398      	movs	r3, #152	; 0x98
 8005e04:	18fb      	adds	r3, r7, r3
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d100      	bne.n	8005e0e <HAL_UART_IRQHandler+0x86>
 8005e0c:	e122      	b.n	8006054 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e0e:	239c      	movs	r3, #156	; 0x9c
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a8c      	ldr	r2, [pc, #560]	; (8006048 <HAL_UART_IRQHandler+0x2c0>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	d106      	bne.n	8005e28 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e1a:	23a0      	movs	r3, #160	; 0xa0
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a8a      	ldr	r2, [pc, #552]	; (800604c <HAL_UART_IRQHandler+0x2c4>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	d100      	bne.n	8005e28 <HAL_UART_IRQHandler+0xa0>
 8005e26:	e115      	b.n	8006054 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e28:	23a4      	movs	r3, #164	; 0xa4
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4013      	ands	r3, r2
 8005e32:	d012      	beq.n	8005e5a <HAL_UART_IRQHandler+0xd2>
 8005e34:	23a0      	movs	r3, #160	; 0xa0
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d00b      	beq.n	8005e5a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2201      	movs	r2, #1
 8005e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2290      	movs	r2, #144	; 0x90
 8005e4e:	589b      	ldr	r3, [r3, r2]
 8005e50:	2201      	movs	r2, #1
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2190      	movs	r1, #144	; 0x90
 8005e58:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e5a:	23a4      	movs	r3, #164	; 0xa4
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2202      	movs	r2, #2
 8005e62:	4013      	ands	r3, r2
 8005e64:	d011      	beq.n	8005e8a <HAL_UART_IRQHandler+0x102>
 8005e66:	239c      	movs	r3, #156	; 0x9c
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d00b      	beq.n	8005e8a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2202      	movs	r2, #2
 8005e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2290      	movs	r2, #144	; 0x90
 8005e7e:	589b      	ldr	r3, [r3, r2]
 8005e80:	2204      	movs	r2, #4
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2190      	movs	r1, #144	; 0x90
 8005e88:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8a:	23a4      	movs	r3, #164	; 0xa4
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2204      	movs	r2, #4
 8005e92:	4013      	ands	r3, r2
 8005e94:	d011      	beq.n	8005eba <HAL_UART_IRQHandler+0x132>
 8005e96:	239c      	movs	r3, #156	; 0x9c
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2290      	movs	r2, #144	; 0x90
 8005eae:	589b      	ldr	r3, [r3, r2]
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2190      	movs	r1, #144	; 0x90
 8005eb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005eba:	23a4      	movs	r3, #164	; 0xa4
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d017      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ec6:	23a0      	movs	r3, #160	; 0xa0
 8005ec8:	18fb      	adds	r3, r7, r3
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d105      	bne.n	8005ede <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ed2:	239c      	movs	r3, #156	; 0x9c
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a5b      	ldr	r2, [pc, #364]	; (8006048 <HAL_UART_IRQHandler+0x2c0>)
 8005eda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005edc:	d00b      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2208      	movs	r2, #8
 8005ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2290      	movs	r2, #144	; 0x90
 8005eea:	589b      	ldr	r3, [r3, r2]
 8005eec:	2208      	movs	r2, #8
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2190      	movs	r1, #144	; 0x90
 8005ef4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ef6:	23a4      	movs	r3, #164	; 0xa4
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	4013      	ands	r3, r2
 8005f02:	d013      	beq.n	8005f2c <HAL_UART_IRQHandler+0x1a4>
 8005f04:	23a0      	movs	r3, #160	; 0xa0
 8005f06:	18fb      	adds	r3, r7, r3
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	2380      	movs	r3, #128	; 0x80
 8005f0c:	04db      	lsls	r3, r3, #19
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d00c      	beq.n	8005f2c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2280      	movs	r2, #128	; 0x80
 8005f18:	0112      	lsls	r2, r2, #4
 8005f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2290      	movs	r2, #144	; 0x90
 8005f20:	589b      	ldr	r3, [r3, r2]
 8005f22:	2220      	movs	r2, #32
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2190      	movs	r1, #144	; 0x90
 8005f2a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2290      	movs	r2, #144	; 0x90
 8005f30:	589b      	ldr	r3, [r3, r2]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d100      	bne.n	8005f38 <HAL_UART_IRQHandler+0x1b0>
 8005f36:	e23d      	b.n	80063b4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f38:	23a4      	movs	r3, #164	; 0xa4
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	4013      	ands	r3, r2
 8005f42:	d015      	beq.n	8005f70 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f44:	23a0      	movs	r3, #160	; 0xa0
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d106      	bne.n	8005f5e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f50:	239c      	movs	r3, #156	; 0x9c
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	055b      	lsls	r3, r3, #21
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d008      	beq.n	8005f70 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d004      	beq.n	8005f70 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	0010      	movs	r0, r2
 8005f6e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2290      	movs	r2, #144	; 0x90
 8005f74:	589b      	ldr	r3, [r3, r2]
 8005f76:	2194      	movs	r1, #148	; 0x94
 8005f78:	187a      	adds	r2, r7, r1
 8005f7a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2240      	movs	r2, #64	; 0x40
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b40      	cmp	r3, #64	; 0x40
 8005f88:	d004      	beq.n	8005f94 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f8a:	187b      	adds	r3, r7, r1
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2228      	movs	r2, #40	; 0x28
 8005f90:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f92:	d04c      	beq.n	800602e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	0018      	movs	r0, r3
 8005f98:	f000 ffe8 	bl	8006f6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2240      	movs	r2, #64	; 0x40
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b40      	cmp	r3, #64	; 0x40
 8005fa8:	d13c      	bne.n	8006024 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005faa:	f3ef 8310 	mrs	r3, PRIMASK
 8005fae:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005fb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb2:	2090      	movs	r0, #144	; 0x90
 8005fb4:	183a      	adds	r2, r7, r0
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	2301      	movs	r3, #1
 8005fba:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fbe:	f383 8810 	msr	PRIMASK, r3
}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2140      	movs	r1, #64	; 0x40
 8005fd0:	438a      	bics	r2, r1
 8005fd2:	609a      	str	r2, [r3, #8]
 8005fd4:	183b      	adds	r3, r7, r0
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fdc:	f383 8810 	msr	PRIMASK, r3
}
 8005fe0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2280      	movs	r2, #128	; 0x80
 8005fe6:	589b      	ldr	r3, [r3, r2]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d016      	beq.n	800601a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2280      	movs	r2, #128	; 0x80
 8005ff0:	589b      	ldr	r3, [r3, r2]
 8005ff2:	4a17      	ldr	r2, [pc, #92]	; (8006050 <HAL_UART_IRQHandler+0x2c8>)
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2280      	movs	r2, #128	; 0x80
 8005ffa:	589b      	ldr	r3, [r3, r2]
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f7fc fe45 	bl	8002c8c <HAL_DMA_Abort_IT>
 8006002:	1e03      	subs	r3, r0, #0
 8006004:	d01c      	beq.n	8006040 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2280      	movs	r2, #128	; 0x80
 800600a:	589b      	ldr	r3, [r3, r2]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	2180      	movs	r1, #128	; 0x80
 8006012:	5852      	ldr	r2, [r2, r1]
 8006014:	0010      	movs	r0, r2
 8006016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	e012      	b.n	8006040 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	0018      	movs	r0, r3
 800601e:	f000 f9e1 	bl	80063e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006022:	e00d      	b.n	8006040 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	0018      	movs	r0, r3
 8006028:	f000 f9dc 	bl	80063e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	e008      	b.n	8006040 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	0018      	movs	r0, r3
 8006032:	f000 f9d7 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2290      	movs	r2, #144	; 0x90
 800603a:	2100      	movs	r1, #0
 800603c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800603e:	e1b9      	b.n	80063b4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	46c0      	nop			; (mov r8, r8)
    return;
 8006042:	e1b7      	b.n	80063b4 <HAL_UART_IRQHandler+0x62c>
 8006044:	0000080f 	.word	0x0000080f
 8006048:	10000001 	.word	0x10000001
 800604c:	04000120 	.word	0x04000120
 8006050:	08007039 	.word	0x08007039

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006058:	2b01      	cmp	r3, #1
 800605a:	d000      	beq.n	800605e <HAL_UART_IRQHandler+0x2d6>
 800605c:	e13e      	b.n	80062dc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800605e:	23a4      	movs	r3, #164	; 0xa4
 8006060:	18fb      	adds	r3, r7, r3
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2210      	movs	r2, #16
 8006066:	4013      	ands	r3, r2
 8006068:	d100      	bne.n	800606c <HAL_UART_IRQHandler+0x2e4>
 800606a:	e137      	b.n	80062dc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800606c:	23a0      	movs	r3, #160	; 0xa0
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2210      	movs	r2, #16
 8006074:	4013      	ands	r3, r2
 8006076:	d100      	bne.n	800607a <HAL_UART_IRQHandler+0x2f2>
 8006078:	e130      	b.n	80062dc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2210      	movs	r2, #16
 8006080:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2240      	movs	r2, #64	; 0x40
 800608a:	4013      	ands	r3, r2
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d000      	beq.n	8006092 <HAL_UART_IRQHandler+0x30a>
 8006090:	e0a4      	b.n	80061dc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2280      	movs	r2, #128	; 0x80
 8006096:	589b      	ldr	r3, [r3, r2]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	217e      	movs	r1, #126	; 0x7e
 800609e:	187b      	adds	r3, r7, r1
 80060a0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80060a2:	187b      	adds	r3, r7, r1
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d100      	bne.n	80060ac <HAL_UART_IRQHandler+0x324>
 80060aa:	e185      	b.n	80063b8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	225c      	movs	r2, #92	; 0x5c
 80060b0:	5a9b      	ldrh	r3, [r3, r2]
 80060b2:	187a      	adds	r2, r7, r1
 80060b4:	8812      	ldrh	r2, [r2, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d300      	bcc.n	80060bc <HAL_UART_IRQHandler+0x334>
 80060ba:	e17d      	b.n	80063b8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	187a      	adds	r2, r7, r1
 80060c0:	215e      	movs	r1, #94	; 0x5e
 80060c2:	8812      	ldrh	r2, [r2, #0]
 80060c4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2280      	movs	r2, #128	; 0x80
 80060ca:	589b      	ldr	r3, [r3, r2]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2220      	movs	r2, #32
 80060d2:	4013      	ands	r3, r2
 80060d4:	d170      	bne.n	80061b8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d6:	f3ef 8310 	mrs	r3, PRIMASK
 80060da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060de:	67bb      	str	r3, [r7, #120]	; 0x78
 80060e0:	2301      	movs	r3, #1
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e6:	f383 8810 	msr	PRIMASK, r3
}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	49b4      	ldr	r1, [pc, #720]	; (80063c8 <HAL_UART_IRQHandler+0x640>)
 80060f8:	400a      	ands	r2, r1
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	f383 8810 	msr	PRIMASK, r3
}
 8006106:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006108:	f3ef 8310 	mrs	r3, PRIMASK
 800610c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800610e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	677b      	str	r3, [r7, #116]	; 0x74
 8006112:	2301      	movs	r3, #1
 8006114:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006118:	f383 8810 	msr	PRIMASK, r3
}
 800611c:	46c0      	nop			; (mov r8, r8)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2101      	movs	r1, #1
 800612a:	438a      	bics	r2, r1
 800612c:	609a      	str	r2, [r3, #8]
 800612e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006130:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006134:	f383 8810 	msr	PRIMASK, r3
}
 8006138:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800613a:	f3ef 8310 	mrs	r3, PRIMASK
 800613e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006140:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006142:	673b      	str	r3, [r7, #112]	; 0x70
 8006144:	2301      	movs	r3, #1
 8006146:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614a:	f383 8810 	msr	PRIMASK, r3
}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2140      	movs	r1, #64	; 0x40
 800615c:	438a      	bics	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
 8006160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006162:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006166:	f383 8810 	msr	PRIMASK, r3
}
 800616a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	228c      	movs	r2, #140	; 0x8c
 8006170:	2120      	movs	r1, #32
 8006172:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617a:	f3ef 8310 	mrs	r3, PRIMASK
 800617e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006180:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006182:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006184:	2301      	movs	r3, #1
 8006186:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800618a:	f383 8810 	msr	PRIMASK, r3
}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2110      	movs	r1, #16
 800619c:	438a      	bics	r2, r1
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a6:	f383 8810 	msr	PRIMASK, r3
}
 80061aa:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	589b      	ldr	r3, [r3, r2]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7fc fd08 	bl	8002bc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	225c      	movs	r2, #92	; 0x5c
 80061c2:	5a9a      	ldrh	r2, [r3, r2]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	215e      	movs	r1, #94	; 0x5e
 80061c8:	5a5b      	ldrh	r3, [r3, r1]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	0011      	movs	r1, r2
 80061d4:	0018      	movs	r0, r3
 80061d6:	f000 f90d 	bl	80063f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061da:	e0ed      	b.n	80063b8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	225c      	movs	r2, #92	; 0x5c
 80061e0:	5a99      	ldrh	r1, [r3, r2]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	225e      	movs	r2, #94	; 0x5e
 80061e6:	5a9b      	ldrh	r3, [r3, r2]
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	208e      	movs	r0, #142	; 0x8e
 80061ec:	183b      	adds	r3, r7, r0
 80061ee:	1a8a      	subs	r2, r1, r2
 80061f0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	225e      	movs	r2, #94	; 0x5e
 80061f6:	5a9b      	ldrh	r3, [r3, r2]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d100      	bne.n	8006200 <HAL_UART_IRQHandler+0x478>
 80061fe:	e0dd      	b.n	80063bc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006200:	183b      	adds	r3, r7, r0
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d100      	bne.n	800620a <HAL_UART_IRQHandler+0x482>
 8006208:	e0d8      	b.n	80063bc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800620a:	f3ef 8310 	mrs	r3, PRIMASK
 800620e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006210:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006212:	2488      	movs	r4, #136	; 0x88
 8006214:	193a      	adds	r2, r7, r4
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	2301      	movs	r3, #1
 800621a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f383 8810 	msr	PRIMASK, r3
}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4967      	ldr	r1, [pc, #412]	; (80063cc <HAL_UART_IRQHandler+0x644>)
 8006230:	400a      	ands	r2, r1
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	193b      	adds	r3, r7, r4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f383 8810 	msr	PRIMASK, r3
}
 8006240:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006242:	f3ef 8310 	mrs	r3, PRIMASK
 8006246:	61bb      	str	r3, [r7, #24]
  return(result);
 8006248:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800624a:	2484      	movs	r4, #132	; 0x84
 800624c:	193a      	adds	r2, r7, r4
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	2301      	movs	r3, #1
 8006252:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	495a      	ldr	r1, [pc, #360]	; (80063d0 <HAL_UART_IRQHandler+0x648>)
 8006268:	400a      	ands	r2, r1
 800626a:	609a      	str	r2, [r3, #8]
 800626c:	193b      	adds	r3, r7, r4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f383 8810 	msr	PRIMASK, r3
}
 8006278:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	228c      	movs	r2, #140	; 0x8c
 800627e:	2120      	movs	r1, #32
 8006280:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628e:	f3ef 8310 	mrs	r3, PRIMASK
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006296:	2480      	movs	r4, #128	; 0x80
 8006298:	193a      	adds	r2, r7, r4
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	2301      	movs	r3, #1
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	f383 8810 	msr	PRIMASK, r3
}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2110      	movs	r1, #16
 80062b4:	438a      	bics	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	193b      	adds	r3, r7, r4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	f383 8810 	msr	PRIMASK, r3
}
 80062c4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062cc:	183b      	adds	r3, r7, r0
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	0011      	movs	r1, r2
 80062d4:	0018      	movs	r0, r3
 80062d6:	f000 f88d 	bl	80063f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062da:	e06f      	b.n	80063bc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062dc:	23a4      	movs	r3, #164	; 0xa4
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	2380      	movs	r3, #128	; 0x80
 80062e4:	035b      	lsls	r3, r3, #13
 80062e6:	4013      	ands	r3, r2
 80062e8:	d010      	beq.n	800630c <HAL_UART_IRQHandler+0x584>
 80062ea:	239c      	movs	r3, #156	; 0x9c
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	03db      	lsls	r3, r3, #15
 80062f4:	4013      	ands	r3, r2
 80062f6:	d009      	beq.n	800630c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2280      	movs	r2, #128	; 0x80
 80062fe:	0352      	lsls	r2, r2, #13
 8006300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	0018      	movs	r0, r3
 8006306:	f001 fbeb 	bl	8007ae0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800630a:	e05a      	b.n	80063c2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800630c:	23a4      	movs	r3, #164	; 0xa4
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2280      	movs	r2, #128	; 0x80
 8006314:	4013      	ands	r3, r2
 8006316:	d016      	beq.n	8006346 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006318:	23a0      	movs	r3, #160	; 0xa0
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2280      	movs	r2, #128	; 0x80
 8006320:	4013      	ands	r3, r2
 8006322:	d106      	bne.n	8006332 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006324:	239c      	movs	r3, #156	; 0x9c
 8006326:	18fb      	adds	r3, r7, r3
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	041b      	lsls	r3, r3, #16
 800632e:	4013      	ands	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006336:	2b00      	cmp	r3, #0
 8006338:	d042      	beq.n	80063c0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	0010      	movs	r0, r2
 8006342:	4798      	blx	r3
    }
    return;
 8006344:	e03c      	b.n	80063c0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006346:	23a4      	movs	r3, #164	; 0xa4
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2240      	movs	r2, #64	; 0x40
 800634e:	4013      	ands	r3, r2
 8006350:	d00a      	beq.n	8006368 <HAL_UART_IRQHandler+0x5e0>
 8006352:	23a0      	movs	r3, #160	; 0xa0
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2240      	movs	r2, #64	; 0x40
 800635a:	4013      	ands	r3, r2
 800635c:	d004      	beq.n	8006368 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	0018      	movs	r0, r3
 8006362:	f000 fe80 	bl	8007066 <UART_EndTransmit_IT>
    return;
 8006366:	e02c      	b.n	80063c2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006368:	23a4      	movs	r3, #164	; 0xa4
 800636a:	18fb      	adds	r3, r7, r3
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	2380      	movs	r3, #128	; 0x80
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	4013      	ands	r3, r2
 8006374:	d00b      	beq.n	800638e <HAL_UART_IRQHandler+0x606>
 8006376:	23a0      	movs	r3, #160	; 0xa0
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	2380      	movs	r3, #128	; 0x80
 800637e:	05db      	lsls	r3, r3, #23
 8006380:	4013      	ands	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	0018      	movs	r0, r3
 8006388:	f001 fbba 	bl	8007b00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800638c:	e019      	b.n	80063c2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800638e:	23a4      	movs	r3, #164	; 0xa4
 8006390:	18fb      	adds	r3, r7, r3
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	2380      	movs	r3, #128	; 0x80
 8006396:	045b      	lsls	r3, r3, #17
 8006398:	4013      	ands	r3, r2
 800639a:	d012      	beq.n	80063c2 <HAL_UART_IRQHandler+0x63a>
 800639c:	23a0      	movs	r3, #160	; 0xa0
 800639e:	18fb      	adds	r3, r7, r3
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	da0d      	bge.n	80063c2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0018      	movs	r0, r3
 80063aa:	f001 fba1 	bl	8007af0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063ae:	e008      	b.n	80063c2 <HAL_UART_IRQHandler+0x63a>
      return;
 80063b0:	46c0      	nop			; (mov r8, r8)
 80063b2:	e006      	b.n	80063c2 <HAL_UART_IRQHandler+0x63a>
    return;
 80063b4:	46c0      	nop			; (mov r8, r8)
 80063b6:	e004      	b.n	80063c2 <HAL_UART_IRQHandler+0x63a>
      return;
 80063b8:	46c0      	nop			; (mov r8, r8)
 80063ba:	e002      	b.n	80063c2 <HAL_UART_IRQHandler+0x63a>
      return;
 80063bc:	46c0      	nop			; (mov r8, r8)
 80063be:	e000      	b.n	80063c2 <HAL_UART_IRQHandler+0x63a>
    return;
 80063c0:	46c0      	nop			; (mov r8, r8)
  }
}
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b02a      	add	sp, #168	; 0xa8
 80063c6:	bdb0      	pop	{r4, r5, r7, pc}
 80063c8:	fffffeff 	.word	0xfffffeff
 80063cc:	fffffedf 	.word	0xfffffedf
 80063d0:	effffffe 	.word	0xeffffffe

080063d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063dc:	46c0      	nop			; (mov r8, r8)
 80063de:	46bd      	mov	sp, r7
 80063e0:	b002      	add	sp, #8
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063ec:	46c0      	nop			; (mov r8, r8)
 80063ee:	46bd      	mov	sp, r7
 80063f0:	b002      	add	sp, #8
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	000a      	movs	r2, r1
 80063fe:	1cbb      	adds	r3, r7, #2
 8006400:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	46bd      	mov	sp, r7
 8006406:	b002      	add	sp, #8
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800640c:	b5b0      	push	{r4, r5, r7, lr}
 800640e:	b090      	sub	sp, #64	; 0x40
 8006410:	af00      	add	r7, sp, #0
 8006412:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006414:	231a      	movs	r3, #26
 8006416:	2220      	movs	r2, #32
 8006418:	189b      	adds	r3, r3, r2
 800641a:	19db      	adds	r3, r3, r7
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	431a      	orrs	r2, r3
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	431a      	orrs	r2, r3
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4313      	orrs	r3, r2
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4aaf      	ldr	r2, [pc, #700]	; (80066fc <UART_SetConfig+0x2f0>)
 8006440:	4013      	ands	r3, r2
 8006442:	0019      	movs	r1, r3
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644a:	430b      	orrs	r3, r1
 800644c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4aaa      	ldr	r2, [pc, #680]	; (8006700 <UART_SetConfig+0x2f4>)
 8006456:	4013      	ands	r3, r2
 8006458:	0018      	movs	r0, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	68d9      	ldr	r1, [r3, #12]
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	0003      	movs	r3, r0
 8006464:	430b      	orrs	r3, r1
 8006466:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4aa4      	ldr	r2, [pc, #656]	; (8006704 <UART_SetConfig+0x2f8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800647e:	4313      	orrs	r3, r2
 8006480:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4a9f      	ldr	r2, [pc, #636]	; (8006708 <UART_SetConfig+0x2fc>)
 800648a:	4013      	ands	r3, r2
 800648c:	0019      	movs	r1, r3
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006494:	430b      	orrs	r3, r1
 8006496:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	220f      	movs	r2, #15
 80064a0:	4393      	bics	r3, r2
 80064a2:	0018      	movs	r0, r3
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	0003      	movs	r3, r0
 80064ae:	430b      	orrs	r3, r1
 80064b0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a95      	ldr	r2, [pc, #596]	; (800670c <UART_SetConfig+0x300>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d131      	bne.n	8006520 <UART_SetConfig+0x114>
 80064bc:	4b94      	ldr	r3, [pc, #592]	; (8006710 <UART_SetConfig+0x304>)
 80064be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c0:	2203      	movs	r2, #3
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d01d      	beq.n	8006504 <UART_SetConfig+0xf8>
 80064c8:	d823      	bhi.n	8006512 <UART_SetConfig+0x106>
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d00c      	beq.n	80064e8 <UART_SetConfig+0xdc>
 80064ce:	d820      	bhi.n	8006512 <UART_SetConfig+0x106>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <UART_SetConfig+0xce>
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d00e      	beq.n	80064f6 <UART_SetConfig+0xea>
 80064d8:	e01b      	b.n	8006512 <UART_SetConfig+0x106>
 80064da:	231b      	movs	r3, #27
 80064dc:	2220      	movs	r2, #32
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	19db      	adds	r3, r3, r7
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e0b4      	b.n	8006652 <UART_SetConfig+0x246>
 80064e8:	231b      	movs	r3, #27
 80064ea:	2220      	movs	r2, #32
 80064ec:	189b      	adds	r3, r3, r2
 80064ee:	19db      	adds	r3, r3, r7
 80064f0:	2202      	movs	r2, #2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	e0ad      	b.n	8006652 <UART_SetConfig+0x246>
 80064f6:	231b      	movs	r3, #27
 80064f8:	2220      	movs	r2, #32
 80064fa:	189b      	adds	r3, r3, r2
 80064fc:	19db      	adds	r3, r3, r7
 80064fe:	2204      	movs	r2, #4
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	e0a6      	b.n	8006652 <UART_SetConfig+0x246>
 8006504:	231b      	movs	r3, #27
 8006506:	2220      	movs	r2, #32
 8006508:	189b      	adds	r3, r3, r2
 800650a:	19db      	adds	r3, r3, r7
 800650c:	2208      	movs	r2, #8
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	e09f      	b.n	8006652 <UART_SetConfig+0x246>
 8006512:	231b      	movs	r3, #27
 8006514:	2220      	movs	r2, #32
 8006516:	189b      	adds	r3, r3, r2
 8006518:	19db      	adds	r3, r3, r7
 800651a:	2210      	movs	r2, #16
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e098      	b.n	8006652 <UART_SetConfig+0x246>
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a7b      	ldr	r2, [pc, #492]	; (8006714 <UART_SetConfig+0x308>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d131      	bne.n	800658e <UART_SetConfig+0x182>
 800652a:	4b79      	ldr	r3, [pc, #484]	; (8006710 <UART_SetConfig+0x304>)
 800652c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652e:	220c      	movs	r2, #12
 8006530:	4013      	ands	r3, r2
 8006532:	2b0c      	cmp	r3, #12
 8006534:	d01d      	beq.n	8006572 <UART_SetConfig+0x166>
 8006536:	d823      	bhi.n	8006580 <UART_SetConfig+0x174>
 8006538:	2b08      	cmp	r3, #8
 800653a:	d00c      	beq.n	8006556 <UART_SetConfig+0x14a>
 800653c:	d820      	bhi.n	8006580 <UART_SetConfig+0x174>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <UART_SetConfig+0x13c>
 8006542:	2b04      	cmp	r3, #4
 8006544:	d00e      	beq.n	8006564 <UART_SetConfig+0x158>
 8006546:	e01b      	b.n	8006580 <UART_SetConfig+0x174>
 8006548:	231b      	movs	r3, #27
 800654a:	2220      	movs	r2, #32
 800654c:	189b      	adds	r3, r3, r2
 800654e:	19db      	adds	r3, r3, r7
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e07d      	b.n	8006652 <UART_SetConfig+0x246>
 8006556:	231b      	movs	r3, #27
 8006558:	2220      	movs	r2, #32
 800655a:	189b      	adds	r3, r3, r2
 800655c:	19db      	adds	r3, r3, r7
 800655e:	2202      	movs	r2, #2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e076      	b.n	8006652 <UART_SetConfig+0x246>
 8006564:	231b      	movs	r3, #27
 8006566:	2220      	movs	r2, #32
 8006568:	189b      	adds	r3, r3, r2
 800656a:	19db      	adds	r3, r3, r7
 800656c:	2204      	movs	r2, #4
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	e06f      	b.n	8006652 <UART_SetConfig+0x246>
 8006572:	231b      	movs	r3, #27
 8006574:	2220      	movs	r2, #32
 8006576:	189b      	adds	r3, r3, r2
 8006578:	19db      	adds	r3, r3, r7
 800657a:	2208      	movs	r2, #8
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e068      	b.n	8006652 <UART_SetConfig+0x246>
 8006580:	231b      	movs	r3, #27
 8006582:	2220      	movs	r2, #32
 8006584:	189b      	adds	r3, r3, r2
 8006586:	19db      	adds	r3, r3, r7
 8006588:	2210      	movs	r2, #16
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	e061      	b.n	8006652 <UART_SetConfig+0x246>
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a61      	ldr	r2, [pc, #388]	; (8006718 <UART_SetConfig+0x30c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d106      	bne.n	80065a6 <UART_SetConfig+0x19a>
 8006598:	231b      	movs	r3, #27
 800659a:	2220      	movs	r2, #32
 800659c:	189b      	adds	r3, r3, r2
 800659e:	19db      	adds	r3, r3, r7
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	e055      	b.n	8006652 <UART_SetConfig+0x246>
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a5c      	ldr	r2, [pc, #368]	; (800671c <UART_SetConfig+0x310>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d106      	bne.n	80065be <UART_SetConfig+0x1b2>
 80065b0:	231b      	movs	r3, #27
 80065b2:	2220      	movs	r2, #32
 80065b4:	189b      	adds	r3, r3, r2
 80065b6:	19db      	adds	r3, r3, r7
 80065b8:	2200      	movs	r2, #0
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	e049      	b.n	8006652 <UART_SetConfig+0x246>
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a50      	ldr	r2, [pc, #320]	; (8006704 <UART_SetConfig+0x2f8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d13e      	bne.n	8006646 <UART_SetConfig+0x23a>
 80065c8:	4b51      	ldr	r3, [pc, #324]	; (8006710 <UART_SetConfig+0x304>)
 80065ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065cc:	23c0      	movs	r3, #192	; 0xc0
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	4013      	ands	r3, r2
 80065d2:	22c0      	movs	r2, #192	; 0xc0
 80065d4:	0112      	lsls	r2, r2, #4
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d027      	beq.n	800662a <UART_SetConfig+0x21e>
 80065da:	22c0      	movs	r2, #192	; 0xc0
 80065dc:	0112      	lsls	r2, r2, #4
 80065de:	4293      	cmp	r3, r2
 80065e0:	d82a      	bhi.n	8006638 <UART_SetConfig+0x22c>
 80065e2:	2280      	movs	r2, #128	; 0x80
 80065e4:	0112      	lsls	r2, r2, #4
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d011      	beq.n	800660e <UART_SetConfig+0x202>
 80065ea:	2280      	movs	r2, #128	; 0x80
 80065ec:	0112      	lsls	r2, r2, #4
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d822      	bhi.n	8006638 <UART_SetConfig+0x22c>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <UART_SetConfig+0x1f4>
 80065f6:	2280      	movs	r2, #128	; 0x80
 80065f8:	00d2      	lsls	r2, r2, #3
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00e      	beq.n	800661c <UART_SetConfig+0x210>
 80065fe:	e01b      	b.n	8006638 <UART_SetConfig+0x22c>
 8006600:	231b      	movs	r3, #27
 8006602:	2220      	movs	r2, #32
 8006604:	189b      	adds	r3, r3, r2
 8006606:	19db      	adds	r3, r3, r7
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e021      	b.n	8006652 <UART_SetConfig+0x246>
 800660e:	231b      	movs	r3, #27
 8006610:	2220      	movs	r2, #32
 8006612:	189b      	adds	r3, r3, r2
 8006614:	19db      	adds	r3, r3, r7
 8006616:	2202      	movs	r2, #2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	e01a      	b.n	8006652 <UART_SetConfig+0x246>
 800661c:	231b      	movs	r3, #27
 800661e:	2220      	movs	r2, #32
 8006620:	189b      	adds	r3, r3, r2
 8006622:	19db      	adds	r3, r3, r7
 8006624:	2204      	movs	r2, #4
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	e013      	b.n	8006652 <UART_SetConfig+0x246>
 800662a:	231b      	movs	r3, #27
 800662c:	2220      	movs	r2, #32
 800662e:	189b      	adds	r3, r3, r2
 8006630:	19db      	adds	r3, r3, r7
 8006632:	2208      	movs	r2, #8
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e00c      	b.n	8006652 <UART_SetConfig+0x246>
 8006638:	231b      	movs	r3, #27
 800663a:	2220      	movs	r2, #32
 800663c:	189b      	adds	r3, r3, r2
 800663e:	19db      	adds	r3, r3, r7
 8006640:	2210      	movs	r2, #16
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e005      	b.n	8006652 <UART_SetConfig+0x246>
 8006646:	231b      	movs	r3, #27
 8006648:	2220      	movs	r2, #32
 800664a:	189b      	adds	r3, r3, r2
 800664c:	19db      	adds	r3, r3, r7
 800664e:	2210      	movs	r2, #16
 8006650:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a2b      	ldr	r2, [pc, #172]	; (8006704 <UART_SetConfig+0x2f8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d000      	beq.n	800665e <UART_SetConfig+0x252>
 800665c:	e0a9      	b.n	80067b2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800665e:	231b      	movs	r3, #27
 8006660:	2220      	movs	r2, #32
 8006662:	189b      	adds	r3, r3, r2
 8006664:	19db      	adds	r3, r3, r7
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d015      	beq.n	8006698 <UART_SetConfig+0x28c>
 800666c:	dc18      	bgt.n	80066a0 <UART_SetConfig+0x294>
 800666e:	2b04      	cmp	r3, #4
 8006670:	d00d      	beq.n	800668e <UART_SetConfig+0x282>
 8006672:	dc15      	bgt.n	80066a0 <UART_SetConfig+0x294>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <UART_SetConfig+0x272>
 8006678:	2b02      	cmp	r3, #2
 800667a:	d005      	beq.n	8006688 <UART_SetConfig+0x27c>
 800667c:	e010      	b.n	80066a0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800667e:	f7fd fec9 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 8006682:	0003      	movs	r3, r0
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006686:	e014      	b.n	80066b2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <UART_SetConfig+0x314>)
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800668c:	e011      	b.n	80066b2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800668e:	f7fd fe35 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 8006692:	0003      	movs	r3, r0
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006696:	e00c      	b.n	80066b2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006698:	2380      	movs	r3, #128	; 0x80
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800669e:	e008      	b.n	80066b2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80066a4:	231a      	movs	r3, #26
 80066a6:	2220      	movs	r2, #32
 80066a8:	189b      	adds	r3, r3, r2
 80066aa:	19db      	adds	r3, r3, r7
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
        break;
 80066b0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d100      	bne.n	80066ba <UART_SetConfig+0x2ae>
 80066b8:	e14b      	b.n	8006952 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066be:	4b19      	ldr	r3, [pc, #100]	; (8006724 <UART_SetConfig+0x318>)
 80066c0:	0052      	lsls	r2, r2, #1
 80066c2:	5ad3      	ldrh	r3, [r2, r3]
 80066c4:	0019      	movs	r1, r3
 80066c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066c8:	f7f9 fd38 	bl	800013c <__udivsi3>
 80066cc:	0003      	movs	r3, r0
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	0013      	movs	r3, r2
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	189b      	adds	r3, r3, r2
 80066da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066dc:	429a      	cmp	r2, r3
 80066de:	d305      	bcc.n	80066ec <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d91d      	bls.n	8006728 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80066ec:	231a      	movs	r3, #26
 80066ee:	2220      	movs	r2, #32
 80066f0:	189b      	adds	r3, r3, r2
 80066f2:	19db      	adds	r3, r3, r7
 80066f4:	2201      	movs	r2, #1
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	e12b      	b.n	8006952 <UART_SetConfig+0x546>
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	cfff69f3 	.word	0xcfff69f3
 8006700:	ffffcfff 	.word	0xffffcfff
 8006704:	40008000 	.word	0x40008000
 8006708:	11fff4ff 	.word	0x11fff4ff
 800670c:	40013800 	.word	0x40013800
 8006710:	40021000 	.word	0x40021000
 8006714:	40004400 	.word	0x40004400
 8006718:	40004800 	.word	0x40004800
 800671c:	40004c00 	.word	0x40004c00
 8006720:	00f42400 	.word	0x00f42400
 8006724:	08008eec 	.word	0x08008eec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	2300      	movs	r3, #0
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006734:	4b92      	ldr	r3, [pc, #584]	; (8006980 <UART_SetConfig+0x574>)
 8006736:	0052      	lsls	r2, r2, #1
 8006738:	5ad3      	ldrh	r3, [r2, r3]
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	69b8      	ldr	r0, [r7, #24]
 8006746:	69f9      	ldr	r1, [r7, #28]
 8006748:	f7f9 fe6e 	bl	8000428 <__aeabi_uldivmod>
 800674c:	0002      	movs	r2, r0
 800674e:	000b      	movs	r3, r1
 8006750:	0e11      	lsrs	r1, r2, #24
 8006752:	021d      	lsls	r5, r3, #8
 8006754:	430d      	orrs	r5, r1
 8006756:	0214      	lsls	r4, r2, #8
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	68b8      	ldr	r0, [r7, #8]
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	1900      	adds	r0, r0, r4
 800676a:	4169      	adcs	r1, r5
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	607b      	str	r3, [r7, #4]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f7f9 fe55 	bl	8000428 <__aeabi_uldivmod>
 800677e:	0002      	movs	r2, r0
 8006780:	000b      	movs	r3, r1
 8006782:	0013      	movs	r3, r2
 8006784:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006788:	23c0      	movs	r3, #192	; 0xc0
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	429a      	cmp	r2, r3
 800678e:	d309      	bcc.n	80067a4 <UART_SetConfig+0x398>
 8006790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006792:	2380      	movs	r3, #128	; 0x80
 8006794:	035b      	lsls	r3, r3, #13
 8006796:	429a      	cmp	r2, r3
 8006798:	d204      	bcs.n	80067a4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067a0:	60da      	str	r2, [r3, #12]
 80067a2:	e0d6      	b.n	8006952 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80067a4:	231a      	movs	r3, #26
 80067a6:	2220      	movs	r2, #32
 80067a8:	189b      	adds	r3, r3, r2
 80067aa:	19db      	adds	r3, r3, r7
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e0cf      	b.n	8006952 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	69da      	ldr	r2, [r3, #28]
 80067b6:	2380      	movs	r3, #128	; 0x80
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d000      	beq.n	80067c0 <UART_SetConfig+0x3b4>
 80067be:	e070      	b.n	80068a2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80067c0:	231b      	movs	r3, #27
 80067c2:	2220      	movs	r2, #32
 80067c4:	189b      	adds	r3, r3, r2
 80067c6:	19db      	adds	r3, r3, r7
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d015      	beq.n	80067fa <UART_SetConfig+0x3ee>
 80067ce:	dc18      	bgt.n	8006802 <UART_SetConfig+0x3f6>
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d00d      	beq.n	80067f0 <UART_SetConfig+0x3e4>
 80067d4:	dc15      	bgt.n	8006802 <UART_SetConfig+0x3f6>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <UART_SetConfig+0x3d4>
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d005      	beq.n	80067ea <UART_SetConfig+0x3de>
 80067de:	e010      	b.n	8006802 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e0:	f7fd fe18 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80067e4:	0003      	movs	r3, r0
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067e8:	e014      	b.n	8006814 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ea:	4b66      	ldr	r3, [pc, #408]	; (8006984 <UART_SetConfig+0x578>)
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ee:	e011      	b.n	8006814 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067f0:	f7fd fd84 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80067f4:	0003      	movs	r3, r0
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f8:	e00c      	b.n	8006814 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067fa:	2380      	movs	r3, #128	; 0x80
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006800:	e008      	b.n	8006814 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006806:	231a      	movs	r3, #26
 8006808:	2220      	movs	r2, #32
 800680a:	189b      	adds	r3, r3, r2
 800680c:	19db      	adds	r3, r3, r7
 800680e:	2201      	movs	r2, #1
 8006810:	701a      	strb	r2, [r3, #0]
        break;
 8006812:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	2b00      	cmp	r3, #0
 8006818:	d100      	bne.n	800681c <UART_SetConfig+0x410>
 800681a:	e09a      	b.n	8006952 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006820:	4b57      	ldr	r3, [pc, #348]	; (8006980 <UART_SetConfig+0x574>)
 8006822:	0052      	lsls	r2, r2, #1
 8006824:	5ad3      	ldrh	r3, [r2, r3]
 8006826:	0019      	movs	r1, r3
 8006828:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800682a:	f7f9 fc87 	bl	800013c <__udivsi3>
 800682e:	0003      	movs	r3, r0
 8006830:	005a      	lsls	r2, r3, #1
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	18d2      	adds	r2, r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	0019      	movs	r1, r3
 8006840:	0010      	movs	r0, r2
 8006842:	f7f9 fc7b 	bl	800013c <__udivsi3>
 8006846:	0003      	movs	r3, r0
 8006848:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	2b0f      	cmp	r3, #15
 800684e:	d921      	bls.n	8006894 <UART_SetConfig+0x488>
 8006850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	025b      	lsls	r3, r3, #9
 8006856:	429a      	cmp	r2, r3
 8006858:	d21c      	bcs.n	8006894 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	b29a      	uxth	r2, r3
 800685e:	200e      	movs	r0, #14
 8006860:	2420      	movs	r4, #32
 8006862:	1903      	adds	r3, r0, r4
 8006864:	19db      	adds	r3, r3, r7
 8006866:	210f      	movs	r1, #15
 8006868:	438a      	bics	r2, r1
 800686a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	b29b      	uxth	r3, r3
 8006872:	2207      	movs	r2, #7
 8006874:	4013      	ands	r3, r2
 8006876:	b299      	uxth	r1, r3
 8006878:	1903      	adds	r3, r0, r4
 800687a:	19db      	adds	r3, r3, r7
 800687c:	1902      	adds	r2, r0, r4
 800687e:	19d2      	adds	r2, r2, r7
 8006880:	8812      	ldrh	r2, [r2, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	1902      	adds	r2, r0, r4
 800688c:	19d2      	adds	r2, r2, r7
 800688e:	8812      	ldrh	r2, [r2, #0]
 8006890:	60da      	str	r2, [r3, #12]
 8006892:	e05e      	b.n	8006952 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006894:	231a      	movs	r3, #26
 8006896:	2220      	movs	r2, #32
 8006898:	189b      	adds	r3, r3, r2
 800689a:	19db      	adds	r3, r3, r7
 800689c:	2201      	movs	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	e057      	b.n	8006952 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068a2:	231b      	movs	r3, #27
 80068a4:	2220      	movs	r2, #32
 80068a6:	189b      	adds	r3, r3, r2
 80068a8:	19db      	adds	r3, r3, r7
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d015      	beq.n	80068dc <UART_SetConfig+0x4d0>
 80068b0:	dc18      	bgt.n	80068e4 <UART_SetConfig+0x4d8>
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d00d      	beq.n	80068d2 <UART_SetConfig+0x4c6>
 80068b6:	dc15      	bgt.n	80068e4 <UART_SetConfig+0x4d8>
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <UART_SetConfig+0x4b6>
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d005      	beq.n	80068cc <UART_SetConfig+0x4c0>
 80068c0:	e010      	b.n	80068e4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c2:	f7fd fda7 	bl	8004414 <HAL_RCC_GetPCLK1Freq>
 80068c6:	0003      	movs	r3, r0
 80068c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ca:	e014      	b.n	80068f6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068cc:	4b2d      	ldr	r3, [pc, #180]	; (8006984 <UART_SetConfig+0x578>)
 80068ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068d0:	e011      	b.n	80068f6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068d2:	f7fd fd13 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80068d6:	0003      	movs	r3, r0
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068da:	e00c      	b.n	80068f6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068dc:	2380      	movs	r3, #128	; 0x80
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068e2:	e008      	b.n	80068f6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80068e8:	231a      	movs	r3, #26
 80068ea:	2220      	movs	r2, #32
 80068ec:	189b      	adds	r3, r3, r2
 80068ee:	19db      	adds	r3, r3, r7
 80068f0:	2201      	movs	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
        break;
 80068f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d02a      	beq.n	8006952 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006900:	4b1f      	ldr	r3, [pc, #124]	; (8006980 <UART_SetConfig+0x574>)
 8006902:	0052      	lsls	r2, r2, #1
 8006904:	5ad3      	ldrh	r3, [r2, r3]
 8006906:	0019      	movs	r1, r3
 8006908:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800690a:	f7f9 fc17 	bl	800013c <__udivsi3>
 800690e:	0003      	movs	r3, r0
 8006910:	001a      	movs	r2, r3
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	18d2      	adds	r2, r2, r3
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	0019      	movs	r1, r3
 8006920:	0010      	movs	r0, r2
 8006922:	f7f9 fc0b 	bl	800013c <__udivsi3>
 8006926:	0003      	movs	r3, r0
 8006928:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	2b0f      	cmp	r3, #15
 800692e:	d90a      	bls.n	8006946 <UART_SetConfig+0x53a>
 8006930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006932:	2380      	movs	r3, #128	; 0x80
 8006934:	025b      	lsls	r3, r3, #9
 8006936:	429a      	cmp	r2, r3
 8006938:	d205      	bcs.n	8006946 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	b29a      	uxth	r2, r3
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60da      	str	r2, [r3, #12]
 8006944:	e005      	b.n	8006952 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006946:	231a      	movs	r3, #26
 8006948:	2220      	movs	r2, #32
 800694a:	189b      	adds	r3, r3, r2
 800694c:	19db      	adds	r3, r3, r7
 800694e:	2201      	movs	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	226a      	movs	r2, #106	; 0x6a
 8006956:	2101      	movs	r1, #1
 8006958:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	2268      	movs	r2, #104	; 0x68
 800695e:	2101      	movs	r1, #1
 8006960:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	2200      	movs	r2, #0
 8006966:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	2200      	movs	r2, #0
 800696c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800696e:	231a      	movs	r3, #26
 8006970:	2220      	movs	r2, #32
 8006972:	189b      	adds	r3, r3, r2
 8006974:	19db      	adds	r3, r3, r7
 8006976:	781b      	ldrb	r3, [r3, #0]
}
 8006978:	0018      	movs	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	b010      	add	sp, #64	; 0x40
 800697e:	bdb0      	pop	{r4, r5, r7, pc}
 8006980:	08008eec 	.word	0x08008eec
 8006984:	00f42400 	.word	0x00f42400

08006988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	2208      	movs	r2, #8
 8006996:	4013      	ands	r3, r2
 8006998:	d00b      	beq.n	80069b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	4a4a      	ldr	r2, [pc, #296]	; (8006acc <UART_AdvFeatureConfig+0x144>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	0019      	movs	r1, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	2201      	movs	r2, #1
 80069b8:	4013      	ands	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	4a43      	ldr	r2, [pc, #268]	; (8006ad0 <UART_AdvFeatureConfig+0x148>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	0019      	movs	r1, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	2202      	movs	r2, #2
 80069da:	4013      	ands	r3, r2
 80069dc:	d00b      	beq.n	80069f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4a3b      	ldr	r2, [pc, #236]	; (8006ad4 <UART_AdvFeatureConfig+0x14c>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	0019      	movs	r1, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	2204      	movs	r2, #4
 80069fc:	4013      	ands	r3, r2
 80069fe:	d00b      	beq.n	8006a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	4a34      	ldr	r2, [pc, #208]	; (8006ad8 <UART_AdvFeatureConfig+0x150>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1c:	2210      	movs	r2, #16
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	; (8006adc <UART_AdvFeatureConfig+0x154>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3e:	2220      	movs	r2, #32
 8006a40:	4013      	ands	r3, r2
 8006a42:	d00b      	beq.n	8006a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	4a25      	ldr	r2, [pc, #148]	; (8006ae0 <UART_AdvFeatureConfig+0x158>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	0019      	movs	r1, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a60:	2240      	movs	r2, #64	; 0x40
 8006a62:	4013      	ands	r3, r2
 8006a64:	d01d      	beq.n	8006aa2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ae4 <UART_AdvFeatureConfig+0x15c>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	0019      	movs	r1, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a82:	2380      	movs	r3, #128	; 0x80
 8006a84:	035b      	lsls	r3, r3, #13
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d10b      	bne.n	8006aa2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <UART_AdvFeatureConfig+0x160>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	0019      	movs	r1, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa6:	2280      	movs	r2, #128	; 0x80
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	d00b      	beq.n	8006ac4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	4a0e      	ldr	r2, [pc, #56]	; (8006aec <UART_AdvFeatureConfig+0x164>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	0019      	movs	r1, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	605a      	str	r2, [r3, #4]
  }
}
 8006ac4:	46c0      	nop			; (mov r8, r8)
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	b002      	add	sp, #8
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	ffff7fff 	.word	0xffff7fff
 8006ad0:	fffdffff 	.word	0xfffdffff
 8006ad4:	fffeffff 	.word	0xfffeffff
 8006ad8:	fffbffff 	.word	0xfffbffff
 8006adc:	ffffefff 	.word	0xffffefff
 8006ae0:	ffffdfff 	.word	0xffffdfff
 8006ae4:	ffefffff 	.word	0xffefffff
 8006ae8:	ff9fffff 	.word	0xff9fffff
 8006aec:	fff7ffff 	.word	0xfff7ffff

08006af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b092      	sub	sp, #72	; 0x48
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2290      	movs	r2, #144	; 0x90
 8006afc:	2100      	movs	r1, #0
 8006afe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b00:	f7fb f8ec 	bl	8001cdc <HAL_GetTick>
 8006b04:	0003      	movs	r3, r0
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2208      	movs	r2, #8
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d12d      	bne.n	8006b72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b18:	2280      	movs	r2, #128	; 0x80
 8006b1a:	0391      	lsls	r1, r2, #14
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4a47      	ldr	r2, [pc, #284]	; (8006c3c <UART_CheckIdleState+0x14c>)
 8006b20:	9200      	str	r2, [sp, #0]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f000 f88e 	bl	8006c44 <UART_WaitOnFlagUntilTimeout>
 8006b28:	1e03      	subs	r3, r0, #0
 8006b2a:	d022      	beq.n	8006b72 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b34:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b36:	2301      	movs	r3, #1
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	f383 8810 	msr	PRIMASK, r3
}
 8006b40:	46c0      	nop			; (mov r8, r8)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2180      	movs	r1, #128	; 0x80
 8006b4e:	438a      	bics	r2, r1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	f383 8810 	msr	PRIMASK, r3
}
 8006b5c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2288      	movs	r2, #136	; 0x88
 8006b62:	2120      	movs	r1, #32
 8006b64:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2284      	movs	r2, #132	; 0x84
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e060      	b.n	8006c34 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d146      	bne.n	8006c0e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b82:	2280      	movs	r2, #128	; 0x80
 8006b84:	03d1      	lsls	r1, r2, #15
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4a2c      	ldr	r2, [pc, #176]	; (8006c3c <UART_CheckIdleState+0x14c>)
 8006b8a:	9200      	str	r2, [sp, #0]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f000 f859 	bl	8006c44 <UART_WaitOnFlagUntilTimeout>
 8006b92:	1e03      	subs	r3, r0, #0
 8006b94:	d03b      	beq.n	8006c0e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b96:	f3ef 8310 	mrs	r3, PRIMASK
 8006b9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f383 8810 	msr	PRIMASK, r3
}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4922      	ldr	r1, [pc, #136]	; (8006c40 <UART_CheckIdleState+0x150>)
 8006bb8:	400a      	ands	r2, r1
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f383 8810 	msr	PRIMASK, r3
}
 8006bc6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bce:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f383 8810 	msr	PRIMASK, r3
}
 8006bdc:	46c0      	nop			; (mov r8, r8)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2101      	movs	r1, #1
 8006bea:	438a      	bics	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f383 8810 	msr	PRIMASK, r3
}
 8006bf8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	228c      	movs	r2, #140	; 0x8c
 8006bfe:	2120      	movs	r1, #32
 8006c00:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2284      	movs	r2, #132	; 0x84
 8006c06:	2100      	movs	r1, #0
 8006c08:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e012      	b.n	8006c34 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2288      	movs	r2, #136	; 0x88
 8006c12:	2120      	movs	r1, #32
 8006c14:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	228c      	movs	r2, #140	; 0x8c
 8006c1a:	2120      	movs	r1, #32
 8006c1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2284      	movs	r2, #132	; 0x84
 8006c2e:	2100      	movs	r1, #0
 8006c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	0018      	movs	r0, r3
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b010      	add	sp, #64	; 0x40
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	01ffffff 	.word	0x01ffffff
 8006c40:	fffffedf 	.word	0xfffffedf

08006c44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	1dfb      	adds	r3, r7, #7
 8006c52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c54:	e051      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	d04e      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c5c:	f7fb f83e 	bl	8001cdc <HAL_GetTick>
 8006c60:	0002      	movs	r2, r0
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d302      	bcc.n	8006c72 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e051      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2204      	movs	r2, #4
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d03b      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb6>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b80      	cmp	r3, #128	; 0x80
 8006c86:	d038      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb6>
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d035      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	2208      	movs	r2, #8
 8006c96:	4013      	ands	r3, r2
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d111      	bne.n	8006cc0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f000 f960 	bl	8006f6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2290      	movs	r2, #144	; 0x90
 8006cb0:	2108      	movs	r1, #8
 8006cb2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2284      	movs	r2, #132	; 0x84
 8006cb8:	2100      	movs	r1, #0
 8006cba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e02c      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69da      	ldr	r2, [r3, #28]
 8006cc6:	2380      	movs	r3, #128	; 0x80
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	401a      	ands	r2, r3
 8006ccc:	2380      	movs	r3, #128	; 0x80
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d112      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2280      	movs	r2, #128	; 0x80
 8006cda:	0112      	lsls	r2, r2, #4
 8006cdc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f000 f943 	bl	8006f6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2290      	movs	r2, #144	; 0x90
 8006cea:	2120      	movs	r1, #32
 8006cec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2284      	movs	r2, #132	; 0x84
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e00f      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	425a      	negs	r2, r3
 8006d0a:	4153      	adcs	r3, r2
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	001a      	movs	r2, r3
 8006d10:	1dfb      	adds	r3, r7, #7
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d09e      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b004      	add	sp, #16
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b098      	sub	sp, #96	; 0x60
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	1dbb      	adds	r3, r7, #6
 8006d30:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	1dba      	adds	r2, r7, #6
 8006d3c:	215c      	movs	r1, #92	; 0x5c
 8006d3e:	8812      	ldrh	r2, [r2, #0]
 8006d40:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1dba      	adds	r2, r7, #6
 8006d46:	215e      	movs	r1, #94	; 0x5e
 8006d48:	8812      	ldrh	r2, [r2, #0]
 8006d4a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	2380      	movs	r3, #128	; 0x80
 8006d58:	015b      	lsls	r3, r3, #5
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d10d      	bne.n	8006d7a <UART_Start_Receive_IT+0x56>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <UART_Start_Receive_IT+0x4c>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2260      	movs	r2, #96	; 0x60
 8006d6a:	497b      	ldr	r1, [pc, #492]	; (8006f58 <UART_Start_Receive_IT+0x234>)
 8006d6c:	5299      	strh	r1, [r3, r2]
 8006d6e:	e02e      	b.n	8006dce <UART_Start_Receive_IT+0xaa>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2260      	movs	r2, #96	; 0x60
 8006d74:	21ff      	movs	r1, #255	; 0xff
 8006d76:	5299      	strh	r1, [r3, r2]
 8006d78:	e029      	b.n	8006dce <UART_Start_Receive_IT+0xaa>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10d      	bne.n	8006d9e <UART_Start_Receive_IT+0x7a>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <UART_Start_Receive_IT+0x70>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2260      	movs	r2, #96	; 0x60
 8006d8e:	21ff      	movs	r1, #255	; 0xff
 8006d90:	5299      	strh	r1, [r3, r2]
 8006d92:	e01c      	b.n	8006dce <UART_Start_Receive_IT+0xaa>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2260      	movs	r2, #96	; 0x60
 8006d98:	217f      	movs	r1, #127	; 0x7f
 8006d9a:	5299      	strh	r1, [r3, r2]
 8006d9c:	e017      	b.n	8006dce <UART_Start_Receive_IT+0xaa>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	2380      	movs	r3, #128	; 0x80
 8006da4:	055b      	lsls	r3, r3, #21
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d10d      	bne.n	8006dc6 <UART_Start_Receive_IT+0xa2>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d104      	bne.n	8006dbc <UART_Start_Receive_IT+0x98>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2260      	movs	r2, #96	; 0x60
 8006db6:	217f      	movs	r1, #127	; 0x7f
 8006db8:	5299      	strh	r1, [r3, r2]
 8006dba:	e008      	b.n	8006dce <UART_Start_Receive_IT+0xaa>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2260      	movs	r2, #96	; 0x60
 8006dc0:	213f      	movs	r1, #63	; 0x3f
 8006dc2:	5299      	strh	r1, [r3, r2]
 8006dc4:	e003      	b.n	8006dce <UART_Start_Receive_IT+0xaa>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2260      	movs	r2, #96	; 0x60
 8006dca:	2100      	movs	r1, #0
 8006dcc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2290      	movs	r2, #144	; 0x90
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	228c      	movs	r2, #140	; 0x8c
 8006dda:	2122      	movs	r1, #34	; 0x22
 8006ddc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dde:	f3ef 8310 	mrs	r3, PRIMASK
 8006de2:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de8:	2301      	movs	r3, #1
 8006dea:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dee:	f383 8810 	msr	PRIMASK, r3
}
 8006df2:	46c0      	nop			; (mov r8, r8)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689a      	ldr	r2, [r3, #8]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2101      	movs	r1, #1
 8006e00:	430a      	orrs	r2, r1
 8006e02:	609a      	str	r2, [r3, #8]
 8006e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e06:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0a:	f383 8810 	msr	PRIMASK, r3
}
 8006e0e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006e14:	2380      	movs	r3, #128	; 0x80
 8006e16:	059b      	lsls	r3, r3, #22
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d150      	bne.n	8006ebe <UART_Start_Receive_IT+0x19a>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2268      	movs	r2, #104	; 0x68
 8006e20:	5a9b      	ldrh	r3, [r3, r2]
 8006e22:	1dba      	adds	r2, r7, #6
 8006e24:	8812      	ldrh	r2, [r2, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d349      	bcc.n	8006ebe <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	2380      	movs	r3, #128	; 0x80
 8006e30:	015b      	lsls	r3, r3, #5
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d107      	bne.n	8006e46 <UART_Start_Receive_IT+0x122>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4a46      	ldr	r2, [pc, #280]	; (8006f5c <UART_Start_Receive_IT+0x238>)
 8006e42:	675a      	str	r2, [r3, #116]	; 0x74
 8006e44:	e002      	b.n	8006e4c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4a45      	ldr	r2, [pc, #276]	; (8006f60 <UART_Start_Receive_IT+0x23c>)
 8006e4a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d019      	beq.n	8006e88 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e54:	f3ef 8310 	mrs	r3, PRIMASK
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e5e:	2301      	movs	r3, #1
 8006e60:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e64:	f383 8810 	msr	PRIMASK, r3
}
 8006e68:	46c0      	nop			; (mov r8, r8)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2180      	movs	r1, #128	; 0x80
 8006e76:	0049      	lsls	r1, r1, #1
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e82:	f383 8810 	msr	PRIMASK, r3
}
 8006e86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e88:	f3ef 8310 	mrs	r3, PRIMASK
 8006e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e90:	657b      	str	r3, [r7, #84]	; 0x54
 8006e92:	2301      	movs	r3, #1
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	f383 8810 	msr	PRIMASK, r3
}
 8006e9c:	46c0      	nop			; (mov r8, r8)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2180      	movs	r1, #128	; 0x80
 8006eaa:	0549      	lsls	r1, r1, #21
 8006eac:	430a      	orrs	r2, r1
 8006eae:	609a      	str	r2, [r3, #8]
 8006eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	f383 8810 	msr	PRIMASK, r3
}
 8006eba:	46c0      	nop			; (mov r8, r8)
 8006ebc:	e047      	b.n	8006f4e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	2380      	movs	r3, #128	; 0x80
 8006ec4:	015b      	lsls	r3, r3, #5
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d107      	bne.n	8006eda <UART_Start_Receive_IT+0x1b6>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4a23      	ldr	r2, [pc, #140]	; (8006f64 <UART_Start_Receive_IT+0x240>)
 8006ed6:	675a      	str	r2, [r3, #116]	; 0x74
 8006ed8:	e002      	b.n	8006ee0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a22      	ldr	r2, [pc, #136]	; (8006f68 <UART_Start_Receive_IT+0x244>)
 8006ede:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d019      	beq.n	8006f1c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8006eec:	61fb      	str	r3, [r7, #28]
  return(result);
 8006eee:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	f383 8810 	msr	PRIMASK, r3
}
 8006efc:	46c0      	nop			; (mov r8, r8)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2190      	movs	r1, #144	; 0x90
 8006f0a:	0049      	lsls	r1, r1, #1
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	f383 8810 	msr	PRIMASK, r3
}
 8006f1a:	e018      	b.n	8006f4e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f20:	613b      	str	r3, [r7, #16]
  return(result);
 8006f22:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f24:	653b      	str	r3, [r7, #80]	; 0x50
 8006f26:	2301      	movs	r3, #1
 8006f28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f383 8810 	msr	PRIMASK, r3
}
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2120      	movs	r1, #32
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f383 8810 	msr	PRIMASK, r3
}
 8006f4c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	0018      	movs	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	b018      	add	sp, #96	; 0x60
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	000001ff 	.word	0x000001ff
 8006f5c:	08007789 	.word	0x08007789
 8006f60:	08007449 	.word	0x08007449
 8006f64:	08007285 	.word	0x08007285
 8006f68:	080070c1 	.word	0x080070c1

08006f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08e      	sub	sp, #56	; 0x38
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f74:	f3ef 8310 	mrs	r3, PRIMASK
 8006f78:	617b      	str	r3, [r7, #20]
  return(result);
 8006f7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f7e:	2301      	movs	r3, #1
 8006f80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f383 8810 	msr	PRIMASK, r3
}
 8006f88:	46c0      	nop			; (mov r8, r8)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4926      	ldr	r1, [pc, #152]	; (8007030 <UART_EndRxTransfer+0xc4>)
 8006f96:	400a      	ands	r2, r1
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	f383 8810 	msr	PRIMASK, r3
}
 8006fa4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8006faa:	623b      	str	r3, [r7, #32]
  return(result);
 8006fac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	f383 8810 	msr	PRIMASK, r3
}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	491b      	ldr	r1, [pc, #108]	; (8007034 <UART_EndRxTransfer+0xc8>)
 8006fc8:	400a      	ands	r2, r1
 8006fca:	609a      	str	r2, [r3, #8]
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	f383 8810 	msr	PRIMASK, r3
}
 8006fd6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d118      	bne.n	8007012 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fe4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fea:	2301      	movs	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f383 8810 	msr	PRIMASK, r3
}
 8006ff4:	46c0      	nop			; (mov r8, r8)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2110      	movs	r1, #16
 8007002:	438a      	bics	r2, r1
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f383 8810 	msr	PRIMASK, r3
}
 8007010:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	228c      	movs	r2, #140	; 0x8c
 8007016:	2120      	movs	r1, #32
 8007018:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	46bd      	mov	sp, r7
 800702a:	b00e      	add	sp, #56	; 0x38
 800702c:	bd80      	pop	{r7, pc}
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	fffffedf 	.word	0xfffffedf
 8007034:	effffffe 	.word	0xeffffffe

08007038 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	225e      	movs	r2, #94	; 0x5e
 800704a:	2100      	movs	r1, #0
 800704c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2256      	movs	r2, #86	; 0x56
 8007052:	2100      	movs	r1, #0
 8007054:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	0018      	movs	r0, r3
 800705a:	f7ff f9c3 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	46bd      	mov	sp, r7
 8007062:	b004      	add	sp, #16
 8007064:	bd80      	pop	{r7, pc}

08007066 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b086      	sub	sp, #24
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706e:	f3ef 8310 	mrs	r3, PRIMASK
 8007072:	60bb      	str	r3, [r7, #8]
  return(result);
 8007074:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	2301      	movs	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f383 8810 	msr	PRIMASK, r3
}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2140      	movs	r1, #64	; 0x40
 8007090:	438a      	bics	r2, r1
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f383 8810 	msr	PRIMASK, r3
}
 800709e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2288      	movs	r2, #136	; 0x88
 80070a4:	2120      	movs	r1, #32
 80070a6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	0018      	movs	r0, r3
 80070b2:	f7ff f98f 	bl	80063d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b006      	add	sp, #24
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b094      	sub	sp, #80	; 0x50
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070c8:	204e      	movs	r0, #78	; 0x4e
 80070ca:	183b      	adds	r3, r7, r0
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	2160      	movs	r1, #96	; 0x60
 80070d0:	5a52      	ldrh	r2, [r2, r1]
 80070d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	228c      	movs	r2, #140	; 0x8c
 80070d8:	589b      	ldr	r3, [r3, r2]
 80070da:	2b22      	cmp	r3, #34	; 0x22
 80070dc:	d000      	beq.n	80070e0 <UART_RxISR_8BIT+0x20>
 80070de:	e0bf      	b.n	8007260 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070e6:	214c      	movs	r1, #76	; 0x4c
 80070e8:	187b      	adds	r3, r7, r1
 80070ea:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070ec:	187b      	adds	r3, r7, r1
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	183b      	adds	r3, r7, r0
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	b2d9      	uxtb	r1, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fc:	400a      	ands	r2, r1
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	225e      	movs	r2, #94	; 0x5e
 8007110:	5a9b      	ldrh	r3, [r3, r2]
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	b299      	uxth	r1, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	225e      	movs	r2, #94	; 0x5e
 800711c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	225e      	movs	r2, #94	; 0x5e
 8007122:	5a9b      	ldrh	r3, [r3, r2]
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d000      	beq.n	800712c <UART_RxISR_8BIT+0x6c>
 800712a:	e0a1      	b.n	8007270 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712c:	f3ef 8310 	mrs	r3, PRIMASK
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007134:	64bb      	str	r3, [r7, #72]	; 0x48
 8007136:	2301      	movs	r3, #1
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	f383 8810 	msr	PRIMASK, r3
}
 8007140:	46c0      	nop			; (mov r8, r8)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	494a      	ldr	r1, [pc, #296]	; (8007278 <UART_RxISR_8BIT+0x1b8>)
 800714e:	400a      	ands	r2, r1
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	f383 8810 	msr	PRIMASK, r3
}
 800715c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800715e:	f3ef 8310 	mrs	r3, PRIMASK
 8007162:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007166:	647b      	str	r3, [r7, #68]	; 0x44
 8007168:	2301      	movs	r3, #1
 800716a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716e:	f383 8810 	msr	PRIMASK, r3
}
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2101      	movs	r1, #1
 8007180:	438a      	bics	r2, r1
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007186:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	f383 8810 	msr	PRIMASK, r3
}
 800718e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	228c      	movs	r2, #140	; 0x8c
 8007194:	2120      	movs	r1, #32
 8007196:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a34      	ldr	r2, [pc, #208]	; (800727c <UART_RxISR_8BIT+0x1bc>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d01f      	beq.n	80071ee <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	2380      	movs	r3, #128	; 0x80
 80071b6:	041b      	lsls	r3, r3, #16
 80071b8:	4013      	ands	r3, r2
 80071ba:	d018      	beq.n	80071ee <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071bc:	f3ef 8310 	mrs	r3, PRIMASK
 80071c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80071c2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071c4:	643b      	str	r3, [r7, #64]	; 0x40
 80071c6:	2301      	movs	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	f383 8810 	msr	PRIMASK, r3
}
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4928      	ldr	r1, [pc, #160]	; (8007280 <UART_RxISR_8BIT+0x1c0>)
 80071de:	400a      	ands	r2, r1
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f383 8810 	msr	PRIMASK, r3
}
 80071ec:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d12f      	bne.n	8007256 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007200:	60fb      	str	r3, [r7, #12]
  return(result);
 8007202:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007206:	2301      	movs	r3, #1
 8007208:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f383 8810 	msr	PRIMASK, r3
}
 8007210:	46c0      	nop			; (mov r8, r8)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2110      	movs	r1, #16
 800721e:	438a      	bics	r2, r1
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007224:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f383 8810 	msr	PRIMASK, r3
}
 800722c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	2210      	movs	r2, #16
 8007236:	4013      	ands	r3, r2
 8007238:	2b10      	cmp	r3, #16
 800723a:	d103      	bne.n	8007244 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2210      	movs	r2, #16
 8007242:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	225c      	movs	r2, #92	; 0x5c
 8007248:	5a9a      	ldrh	r2, [r3, r2]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	0011      	movs	r1, r2
 800724e:	0018      	movs	r0, r3
 8007250:	f7ff f8d0 	bl	80063f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007254:	e00c      	b.n	8007270 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	0018      	movs	r0, r3
 800725a:	f7fa f943 	bl	80014e4 <HAL_UART_RxCpltCallback>
}
 800725e:	e007      	b.n	8007270 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2108      	movs	r1, #8
 800726c:	430a      	orrs	r2, r1
 800726e:	619a      	str	r2, [r3, #24]
}
 8007270:	46c0      	nop			; (mov r8, r8)
 8007272:	46bd      	mov	sp, r7
 8007274:	b014      	add	sp, #80	; 0x50
 8007276:	bd80      	pop	{r7, pc}
 8007278:	fffffedf 	.word	0xfffffedf
 800727c:	40008000 	.word	0x40008000
 8007280:	fbffffff 	.word	0xfbffffff

08007284 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b094      	sub	sp, #80	; 0x50
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800728c:	204e      	movs	r0, #78	; 0x4e
 800728e:	183b      	adds	r3, r7, r0
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	2160      	movs	r1, #96	; 0x60
 8007294:	5a52      	ldrh	r2, [r2, r1]
 8007296:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	228c      	movs	r2, #140	; 0x8c
 800729c:	589b      	ldr	r3, [r3, r2]
 800729e:	2b22      	cmp	r3, #34	; 0x22
 80072a0:	d000      	beq.n	80072a4 <UART_RxISR_16BIT+0x20>
 80072a2:	e0bf      	b.n	8007424 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072aa:	214c      	movs	r1, #76	; 0x4c
 80072ac:	187b      	adds	r3, r7, r1
 80072ae:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80072b6:	187b      	adds	r3, r7, r1
 80072b8:	183a      	adds	r2, r7, r0
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	8812      	ldrh	r2, [r2, #0]
 80072be:	4013      	ands	r3, r2
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ca:	1c9a      	adds	r2, r3, #2
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	225e      	movs	r2, #94	; 0x5e
 80072d4:	5a9b      	ldrh	r3, [r3, r2]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	b299      	uxth	r1, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	225e      	movs	r2, #94	; 0x5e
 80072e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	225e      	movs	r2, #94	; 0x5e
 80072e6:	5a9b      	ldrh	r3, [r3, r2]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d000      	beq.n	80072f0 <UART_RxISR_16BIT+0x6c>
 80072ee:	e0a1      	b.n	8007434 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072f0:	f3ef 8310 	mrs	r3, PRIMASK
 80072f4:	623b      	str	r3, [r7, #32]
  return(result);
 80072f6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072f8:	647b      	str	r3, [r7, #68]	; 0x44
 80072fa:	2301      	movs	r3, #1
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	f383 8810 	msr	PRIMASK, r3
}
 8007304:	46c0      	nop			; (mov r8, r8)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	494a      	ldr	r1, [pc, #296]	; (800743c <UART_RxISR_16BIT+0x1b8>)
 8007312:	400a      	ands	r2, r1
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007318:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	f383 8810 	msr	PRIMASK, r3
}
 8007320:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007322:	f3ef 8310 	mrs	r3, PRIMASK
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800732a:	643b      	str	r3, [r7, #64]	; 0x40
 800732c:	2301      	movs	r3, #1
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	f383 8810 	msr	PRIMASK, r3
}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689a      	ldr	r2, [r3, #8]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2101      	movs	r1, #1
 8007344:	438a      	bics	r2, r1
 8007346:	609a      	str	r2, [r3, #8]
 8007348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800734a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734e:	f383 8810 	msr	PRIMASK, r3
}
 8007352:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	228c      	movs	r2, #140	; 0x8c
 8007358:	2120      	movs	r1, #32
 800735a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a34      	ldr	r2, [pc, #208]	; (8007440 <UART_RxISR_16BIT+0x1bc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d01f      	beq.n	80073b2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	2380      	movs	r3, #128	; 0x80
 800737a:	041b      	lsls	r3, r3, #16
 800737c:	4013      	ands	r3, r2
 800737e:	d018      	beq.n	80073b2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007380:	f3ef 8310 	mrs	r3, PRIMASK
 8007384:	617b      	str	r3, [r7, #20]
  return(result);
 8007386:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800738a:	2301      	movs	r3, #1
 800738c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	f383 8810 	msr	PRIMASK, r3
}
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4928      	ldr	r1, [pc, #160]	; (8007444 <UART_RxISR_16BIT+0x1c0>)
 80073a2:	400a      	ands	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f383 8810 	msr	PRIMASK, r3
}
 80073b0:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d12f      	bne.n	800741a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c0:	f3ef 8310 	mrs	r3, PRIMASK
 80073c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80073c6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80073ca:	2301      	movs	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f383 8810 	msr	PRIMASK, r3
}
 80073d4:	46c0      	nop			; (mov r8, r8)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2110      	movs	r1, #16
 80073e2:	438a      	bics	r2, r1
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f383 8810 	msr	PRIMASK, r3
}
 80073f0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	2210      	movs	r2, #16
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b10      	cmp	r3, #16
 80073fe:	d103      	bne.n	8007408 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2210      	movs	r2, #16
 8007406:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	225c      	movs	r2, #92	; 0x5c
 800740c:	5a9a      	ldrh	r2, [r3, r2]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	0011      	movs	r1, r2
 8007412:	0018      	movs	r0, r3
 8007414:	f7fe ffee 	bl	80063f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007418:	e00c      	b.n	8007434 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	0018      	movs	r0, r3
 800741e:	f7fa f861 	bl	80014e4 <HAL_UART_RxCpltCallback>
}
 8007422:	e007      	b.n	8007434 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2108      	movs	r1, #8
 8007430:	430a      	orrs	r2, r1
 8007432:	619a      	str	r2, [r3, #24]
}
 8007434:	46c0      	nop			; (mov r8, r8)
 8007436:	46bd      	mov	sp, r7
 8007438:	b014      	add	sp, #80	; 0x50
 800743a:	bd80      	pop	{r7, pc}
 800743c:	fffffedf 	.word	0xfffffedf
 8007440:	40008000 	.word	0x40008000
 8007444:	fbffffff 	.word	0xfbffffff

08007448 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b0a0      	sub	sp, #128	; 0x80
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007450:	237a      	movs	r3, #122	; 0x7a
 8007452:	18fb      	adds	r3, r7, r3
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	2160      	movs	r1, #96	; 0x60
 8007458:	5a52      	ldrh	r2, [r2, r1]
 800745a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	228c      	movs	r2, #140	; 0x8c
 8007478:	589b      	ldr	r3, [r3, r2]
 800747a:	2b22      	cmp	r3, #34	; 0x22
 800747c:	d000      	beq.n	8007480 <UART_RxISR_8BIT_FIFOEN+0x38>
 800747e:	e16a      	b.n	8007756 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007480:	236e      	movs	r3, #110	; 0x6e
 8007482:	18fb      	adds	r3, r7, r3
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	2168      	movs	r1, #104	; 0x68
 8007488:	5a52      	ldrh	r2, [r2, r1]
 800748a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800748c:	e111      	b.n	80076b2 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007494:	216c      	movs	r1, #108	; 0x6c
 8007496:	187b      	adds	r3, r7, r1
 8007498:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800749a:	187b      	adds	r3, r7, r1
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	237a      	movs	r3, #122	; 0x7a
 80074a2:	18fb      	adds	r3, r7, r3
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b2d9      	uxtb	r1, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ac:	400a      	ands	r2, r1
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	225e      	movs	r2, #94	; 0x5e
 80074c0:	5a9b      	ldrh	r3, [r3, r2]
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b299      	uxth	r1, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	225e      	movs	r2, #94	; 0x5e
 80074cc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80074d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074d8:	2207      	movs	r2, #7
 80074da:	4013      	ands	r3, r2
 80074dc:	d049      	beq.n	8007572 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074e0:	2201      	movs	r2, #1
 80074e2:	4013      	ands	r3, r2
 80074e4:	d010      	beq.n	8007508 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80074e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	4013      	ands	r3, r2
 80074ee:	d00b      	beq.n	8007508 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2201      	movs	r2, #1
 80074f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2290      	movs	r2, #144	; 0x90
 80074fc:	589b      	ldr	r3, [r3, r2]
 80074fe:	2201      	movs	r2, #1
 8007500:	431a      	orrs	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2190      	movs	r1, #144	; 0x90
 8007506:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007508:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800750a:	2202      	movs	r2, #2
 800750c:	4013      	ands	r3, r2
 800750e:	d00f      	beq.n	8007530 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007512:	2201      	movs	r2, #1
 8007514:	4013      	ands	r3, r2
 8007516:	d00b      	beq.n	8007530 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2202      	movs	r2, #2
 800751e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2290      	movs	r2, #144	; 0x90
 8007524:	589b      	ldr	r3, [r3, r2]
 8007526:	2204      	movs	r2, #4
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2190      	movs	r1, #144	; 0x90
 800752e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007532:	2204      	movs	r2, #4
 8007534:	4013      	ands	r3, r2
 8007536:	d00f      	beq.n	8007558 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800753a:	2201      	movs	r2, #1
 800753c:	4013      	ands	r3, r2
 800753e:	d00b      	beq.n	8007558 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2204      	movs	r2, #4
 8007546:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2290      	movs	r2, #144	; 0x90
 800754c:	589b      	ldr	r3, [r3, r2]
 800754e:	2202      	movs	r2, #2
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2190      	movs	r1, #144	; 0x90
 8007556:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2290      	movs	r2, #144	; 0x90
 800755c:	589b      	ldr	r3, [r3, r2]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	0018      	movs	r0, r3
 8007566:	f7fe ff3d 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2290      	movs	r2, #144	; 0x90
 800756e:	2100      	movs	r1, #0
 8007570:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	225e      	movs	r2, #94	; 0x5e
 8007576:	5a9b      	ldrh	r3, [r3, r2]
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d000      	beq.n	8007580 <UART_RxISR_8BIT_FIFOEN+0x138>
 800757e:	e098      	b.n	80076b2 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007580:	f3ef 8310 	mrs	r3, PRIMASK
 8007584:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007588:	66bb      	str	r3, [r7, #104]	; 0x68
 800758a:	2301      	movs	r3, #1
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007590:	f383 8810 	msr	PRIMASK, r3
}
 8007594:	46c0      	nop			; (mov r8, r8)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4973      	ldr	r1, [pc, #460]	; (8007770 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80075a2:	400a      	ands	r2, r1
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075a8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075ac:	f383 8810 	msr	PRIMASK, r3
}
 80075b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075b2:	f3ef 8310 	mrs	r3, PRIMASK
 80075b6:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80075b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075ba:	667b      	str	r3, [r7, #100]	; 0x64
 80075bc:	2301      	movs	r3, #1
 80075be:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c2:	f383 8810 	msr	PRIMASK, r3
}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4968      	ldr	r1, [pc, #416]	; (8007774 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80075d4:	400a      	ands	r2, r1
 80075d6:	609a      	str	r2, [r3, #8]
 80075d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075da:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075de:	f383 8810 	msr	PRIMASK, r3
}
 80075e2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	228c      	movs	r2, #140	; 0x8c
 80075e8:	2120      	movs	r1, #32
 80075ea:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a5e      	ldr	r2, [pc, #376]	; (8007778 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d01f      	beq.n	8007642 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	2380      	movs	r3, #128	; 0x80
 800760a:	041b      	lsls	r3, r3, #16
 800760c:	4013      	ands	r3, r2
 800760e:	d018      	beq.n	8007642 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007610:	f3ef 8310 	mrs	r3, PRIMASK
 8007614:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007618:	663b      	str	r3, [r7, #96]	; 0x60
 800761a:	2301      	movs	r3, #1
 800761c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	f383 8810 	msr	PRIMASK, r3
}
 8007624:	46c0      	nop			; (mov r8, r8)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4952      	ldr	r1, [pc, #328]	; (800777c <UART_RxISR_8BIT_FIFOEN+0x334>)
 8007632:	400a      	ands	r2, r1
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007638:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763c:	f383 8810 	msr	PRIMASK, r3
}
 8007640:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d12f      	bne.n	80076aa <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007650:	f3ef 8310 	mrs	r3, PRIMASK
 8007654:	623b      	str	r3, [r7, #32]
  return(result);
 8007656:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800765a:	2301      	movs	r3, #1
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	f383 8810 	msr	PRIMASK, r3
}
 8007664:	46c0      	nop			; (mov r8, r8)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2110      	movs	r1, #16
 8007672:	438a      	bics	r2, r1
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	f383 8810 	msr	PRIMASK, r3
}
 8007680:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	2210      	movs	r2, #16
 800768a:	4013      	ands	r3, r2
 800768c:	2b10      	cmp	r3, #16
 800768e:	d103      	bne.n	8007698 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2210      	movs	r2, #16
 8007696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	225c      	movs	r2, #92	; 0x5c
 800769c:	5a9a      	ldrh	r2, [r3, r2]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	0011      	movs	r1, r2
 80076a2:	0018      	movs	r0, r3
 80076a4:	f7fe fea6 	bl	80063f4 <HAL_UARTEx_RxEventCallback>
 80076a8:	e003      	b.n	80076b2 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	0018      	movs	r0, r3
 80076ae:	f7f9 ff19 	bl	80014e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076b2:	236e      	movs	r3, #110	; 0x6e
 80076b4:	18fb      	adds	r3, r7, r3
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80076bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076be:	2220      	movs	r2, #32
 80076c0:	4013      	ands	r3, r2
 80076c2:	d000      	beq.n	80076c6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80076c4:	e6e3      	b.n	800748e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80076c6:	205a      	movs	r0, #90	; 0x5a
 80076c8:	183b      	adds	r3, r7, r0
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	215e      	movs	r1, #94	; 0x5e
 80076ce:	5a52      	ldrh	r2, [r2, r1]
 80076d0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076d2:	0001      	movs	r1, r0
 80076d4:	187b      	adds	r3, r7, r1
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d044      	beq.n	8007766 <UART_RxISR_8BIT_FIFOEN+0x31e>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2268      	movs	r2, #104	; 0x68
 80076e0:	5a9b      	ldrh	r3, [r3, r2]
 80076e2:	187a      	adds	r2, r7, r1
 80076e4:	8812      	ldrh	r2, [r2, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d23d      	bcs.n	8007766 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ea:	f3ef 8310 	mrs	r3, PRIMASK
 80076ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80076f0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076f2:	657b      	str	r3, [r7, #84]	; 0x54
 80076f4:	2301      	movs	r3, #1
 80076f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f383 8810 	msr	PRIMASK, r3
}
 80076fe:	46c0      	nop			; (mov r8, r8)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	491d      	ldr	r1, [pc, #116]	; (8007780 <UART_RxISR_8BIT_FIFOEN+0x338>)
 800770c:	400a      	ands	r2, r1
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f383 8810 	msr	PRIMASK, r3
}
 800771a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a19      	ldr	r2, [pc, #100]	; (8007784 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8007720:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007722:	f3ef 8310 	mrs	r3, PRIMASK
 8007726:	617b      	str	r3, [r7, #20]
  return(result);
 8007728:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800772a:	653b      	str	r3, [r7, #80]	; 0x50
 800772c:	2301      	movs	r3, #1
 800772e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f383 8810 	msr	PRIMASK, r3
}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2120      	movs	r1, #32
 8007744:	430a      	orrs	r2, r1
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800774a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	f383 8810 	msr	PRIMASK, r3
}
 8007752:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007754:	e007      	b.n	8007766 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	699a      	ldr	r2, [r3, #24]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2108      	movs	r1, #8
 8007762:	430a      	orrs	r2, r1
 8007764:	619a      	str	r2, [r3, #24]
}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	46bd      	mov	sp, r7
 800776a:	b020      	add	sp, #128	; 0x80
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	fffffeff 	.word	0xfffffeff
 8007774:	effffffe 	.word	0xeffffffe
 8007778:	40008000 	.word	0x40008000
 800777c:	fbffffff 	.word	0xfbffffff
 8007780:	efffffff 	.word	0xefffffff
 8007784:	080070c1 	.word	0x080070c1

08007788 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b0a2      	sub	sp, #136	; 0x88
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007790:	2382      	movs	r3, #130	; 0x82
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	2160      	movs	r1, #96	; 0x60
 8007798:	5a52      	ldrh	r2, [r2, r1]
 800779a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	2284      	movs	r2, #132	; 0x84
 80077a4:	18ba      	adds	r2, r7, r2
 80077a6:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	228c      	movs	r2, #140	; 0x8c
 80077bc:	589b      	ldr	r3, [r3, r2]
 80077be:	2b22      	cmp	r3, #34	; 0x22
 80077c0:	d000      	beq.n	80077c4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80077c2:	e174      	b.n	8007aae <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077c4:	2376      	movs	r3, #118	; 0x76
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	2168      	movs	r1, #104	; 0x68
 80077cc:	5a52      	ldrh	r2, [r2, r1]
 80077ce:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077d0:	e119      	b.n	8007a06 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077d8:	2174      	movs	r1, #116	; 0x74
 80077da:	187b      	adds	r3, r7, r1
 80077dc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e2:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80077e4:	187b      	adds	r3, r7, r1
 80077e6:	2282      	movs	r2, #130	; 0x82
 80077e8:	18ba      	adds	r2, r7, r2
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	8812      	ldrh	r2, [r2, #0]
 80077ee:	4013      	ands	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fa:	1c9a      	adds	r2, r3, #2
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	225e      	movs	r2, #94	; 0x5e
 8007804:	5a9b      	ldrh	r3, [r3, r2]
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b01      	subs	r3, #1
 800780a:	b299      	uxth	r1, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	225e      	movs	r2, #94	; 0x5e
 8007810:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	2184      	movs	r1, #132	; 0x84
 800781a:	187a      	adds	r2, r7, r1
 800781c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800781e:	187b      	adds	r3, r7, r1
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2207      	movs	r2, #7
 8007824:	4013      	ands	r3, r2
 8007826:	d04e      	beq.n	80078c6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007828:	187b      	adds	r3, r7, r1
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2201      	movs	r2, #1
 800782e:	4013      	ands	r3, r2
 8007830:	d010      	beq.n	8007854 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8007832:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007834:	2380      	movs	r3, #128	; 0x80
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	4013      	ands	r3, r2
 800783a:	d00b      	beq.n	8007854 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2201      	movs	r2, #1
 8007842:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2290      	movs	r2, #144	; 0x90
 8007848:	589b      	ldr	r3, [r3, r2]
 800784a:	2201      	movs	r2, #1
 800784c:	431a      	orrs	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2190      	movs	r1, #144	; 0x90
 8007852:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007854:	2384      	movs	r3, #132	; 0x84
 8007856:	18fb      	adds	r3, r7, r3
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2202      	movs	r2, #2
 800785c:	4013      	ands	r3, r2
 800785e:	d00f      	beq.n	8007880 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8007860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007862:	2201      	movs	r2, #1
 8007864:	4013      	ands	r3, r2
 8007866:	d00b      	beq.n	8007880 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2202      	movs	r2, #2
 800786e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2290      	movs	r2, #144	; 0x90
 8007874:	589b      	ldr	r3, [r3, r2]
 8007876:	2204      	movs	r2, #4
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2190      	movs	r1, #144	; 0x90
 800787e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007880:	2384      	movs	r3, #132	; 0x84
 8007882:	18fb      	adds	r3, r7, r3
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2204      	movs	r2, #4
 8007888:	4013      	ands	r3, r2
 800788a:	d00f      	beq.n	80078ac <UART_RxISR_16BIT_FIFOEN+0x124>
 800788c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788e:	2201      	movs	r2, #1
 8007890:	4013      	ands	r3, r2
 8007892:	d00b      	beq.n	80078ac <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2204      	movs	r2, #4
 800789a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2290      	movs	r2, #144	; 0x90
 80078a0:	589b      	ldr	r3, [r3, r2]
 80078a2:	2202      	movs	r2, #2
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2190      	movs	r1, #144	; 0x90
 80078aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2290      	movs	r2, #144	; 0x90
 80078b0:	589b      	ldr	r3, [r3, r2]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d007      	beq.n	80078c6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7fe fd93 	bl	80063e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2290      	movs	r2, #144	; 0x90
 80078c2:	2100      	movs	r1, #0
 80078c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	225e      	movs	r2, #94	; 0x5e
 80078ca:	5a9b      	ldrh	r3, [r3, r2]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d000      	beq.n	80078d4 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80078d2:	e098      	b.n	8007a06 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d4:	f3ef 8310 	mrs	r3, PRIMASK
 80078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80078da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078de:	2301      	movs	r3, #1
 80078e0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e4:	f383 8810 	msr	PRIMASK, r3
}
 80078e8:	46c0      	nop			; (mov r8, r8)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4974      	ldr	r1, [pc, #464]	; (8007ac8 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80078f6:	400a      	ands	r2, r1
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007900:	f383 8810 	msr	PRIMASK, r3
}
 8007904:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007906:	f3ef 8310 	mrs	r3, PRIMASK
 800790a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800790c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800790e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007910:	2301      	movs	r3, #1
 8007912:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007916:	f383 8810 	msr	PRIMASK, r3
}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689a      	ldr	r2, [r3, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4969      	ldr	r1, [pc, #420]	; (8007acc <UART_RxISR_16BIT_FIFOEN+0x344>)
 8007928:	400a      	ands	r2, r1
 800792a:	609a      	str	r2, [r3, #8]
 800792c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800792e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007932:	f383 8810 	msr	PRIMASK, r3
}
 8007936:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	228c      	movs	r2, #140	; 0x8c
 800793c:	2120      	movs	r1, #32
 800793e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a5f      	ldr	r2, [pc, #380]	; (8007ad0 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d01f      	beq.n	8007996 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	041b      	lsls	r3, r3, #16
 8007960:	4013      	ands	r3, r2
 8007962:	d018      	beq.n	8007996 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007964:	f3ef 8310 	mrs	r3, PRIMASK
 8007968:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800796c:	667b      	str	r3, [r7, #100]	; 0x64
 800796e:	2301      	movs	r3, #1
 8007970:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007974:	f383 8810 	msr	PRIMASK, r3
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4953      	ldr	r1, [pc, #332]	; (8007ad4 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8007986:	400a      	ands	r2, r1
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800798c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	f383 8810 	msr	PRIMASK, r3
}
 8007994:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d12f      	bne.n	80079fe <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a4:	f3ef 8310 	mrs	r3, PRIMASK
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ac:	663b      	str	r3, [r7, #96]	; 0x60
 80079ae:	2301      	movs	r3, #1
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	f383 8810 	msr	PRIMASK, r3
}
 80079b8:	46c0      	nop			; (mov r8, r8)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2110      	movs	r1, #16
 80079c6:	438a      	bics	r2, r1
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	f383 8810 	msr	PRIMASK, r3
}
 80079d4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	2210      	movs	r2, #16
 80079de:	4013      	ands	r3, r2
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d103      	bne.n	80079ec <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2210      	movs	r2, #16
 80079ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	225c      	movs	r2, #92	; 0x5c
 80079f0:	5a9a      	ldrh	r2, [r3, r2]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	0011      	movs	r1, r2
 80079f6:	0018      	movs	r0, r3
 80079f8:	f7fe fcfc 	bl	80063f4 <HAL_UARTEx_RxEventCallback>
 80079fc:	e003      	b.n	8007a06 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	0018      	movs	r0, r3
 8007a02:	f7f9 fd6f 	bl	80014e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a06:	2376      	movs	r3, #118	; 0x76
 8007a08:	18fb      	adds	r3, r7, r3
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d006      	beq.n	8007a1e <UART_RxISR_16BIT_FIFOEN+0x296>
 8007a10:	2384      	movs	r3, #132	; 0x84
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2220      	movs	r2, #32
 8007a18:	4013      	ands	r3, r2
 8007a1a:	d000      	beq.n	8007a1e <UART_RxISR_16BIT_FIFOEN+0x296>
 8007a1c:	e6d9      	b.n	80077d2 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a1e:	205e      	movs	r0, #94	; 0x5e
 8007a20:	183b      	adds	r3, r7, r0
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	215e      	movs	r1, #94	; 0x5e
 8007a26:	5a52      	ldrh	r2, [r2, r1]
 8007a28:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a2a:	0001      	movs	r1, r0
 8007a2c:	187b      	adds	r3, r7, r1
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d044      	beq.n	8007abe <UART_RxISR_16BIT_FIFOEN+0x336>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2268      	movs	r2, #104	; 0x68
 8007a38:	5a9b      	ldrh	r3, [r3, r2]
 8007a3a:	187a      	adds	r2, r7, r1
 8007a3c:	8812      	ldrh	r2, [r2, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d23d      	bcs.n	8007abe <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a42:	f3ef 8310 	mrs	r3, PRIMASK
 8007a46:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a48:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f383 8810 	msr	PRIMASK, r3
}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	491d      	ldr	r1, [pc, #116]	; (8007ad8 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8007a64:	400a      	ands	r2, r1
 8007a66:	609a      	str	r2, [r3, #8]
 8007a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f383 8810 	msr	PRIMASK, r3
}
 8007a72:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a19      	ldr	r2, [pc, #100]	; (8007adc <UART_RxISR_16BIT_FIFOEN+0x354>)
 8007a78:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a80:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a82:	657b      	str	r3, [r7, #84]	; 0x54
 8007a84:	2301      	movs	r3, #1
 8007a86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	f383 8810 	msr	PRIMASK, r3
}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2120      	movs	r1, #32
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	f383 8810 	msr	PRIMASK, r3
}
 8007aaa:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aac:	e007      	b.n	8007abe <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	699a      	ldr	r2, [r3, #24]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2108      	movs	r1, #8
 8007aba:	430a      	orrs	r2, r1
 8007abc:	619a      	str	r2, [r3, #24]
}
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b022      	add	sp, #136	; 0x88
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	fffffeff 	.word	0xfffffeff
 8007acc:	effffffe 	.word	0xeffffffe
 8007ad0:	40008000 	.word	0x40008000
 8007ad4:	fbffffff 	.word	0xfbffffff
 8007ad8:	efffffff 	.word	0xefffffff
 8007adc:	08007285 	.word	0x08007285

08007ae0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ae8:	46c0      	nop			; (mov r8, r8)
 8007aea:	46bd      	mov	sp, r7
 8007aec:	b002      	add	sp, #8
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007af8:	46c0      	nop			; (mov r8, r8)
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b002      	add	sp, #8
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b08:	46c0      	nop			; (mov r8, r8)
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b002      	add	sp, #8
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2284      	movs	r2, #132	; 0x84
 8007b1c:	5c9b      	ldrb	r3, [r3, r2]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e027      	b.n	8007b76 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2284      	movs	r2, #132	; 0x84
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2288      	movs	r2, #136	; 0x88
 8007b32:	2124      	movs	r1, #36	; 0x24
 8007b34:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2101      	movs	r1, #1
 8007b4a:	438a      	bics	r2, r1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4a0b      	ldr	r2, [pc, #44]	; (8007b80 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2288      	movs	r2, #136	; 0x88
 8007b68:	2120      	movs	r1, #32
 8007b6a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2284      	movs	r2, #132	; 0x84
 8007b70:	2100      	movs	r1, #0
 8007b72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	0018      	movs	r0, r3
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	b004      	add	sp, #16
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	dfffffff 	.word	0xdfffffff

08007b84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2284      	movs	r2, #132	; 0x84
 8007b92:	5c9b      	ldrb	r3, [r3, r2]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e02e      	b.n	8007bfa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2284      	movs	r2, #132	; 0x84
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2288      	movs	r2, #136	; 0x88
 8007ba8:	2124      	movs	r1, #36	; 0x24
 8007baa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	438a      	bics	r2, r1
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	08d9      	lsrs	r1, r3, #3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f000 f854 	bl	8007c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2288      	movs	r2, #136	; 0x88
 8007bec:	2120      	movs	r1, #32
 8007bee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2284      	movs	r2, #132	; 0x84
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b004      	add	sp, #16
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2284      	movs	r2, #132	; 0x84
 8007c12:	5c9b      	ldrb	r3, [r3, r2]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e02f      	b.n	8007c7c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2284      	movs	r2, #132	; 0x84
 8007c20:	2101      	movs	r1, #1
 8007c22:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2288      	movs	r2, #136	; 0x88
 8007c28:	2124      	movs	r1, #36	; 0x24
 8007c2a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2101      	movs	r1, #1
 8007c40:	438a      	bics	r2, r1
 8007c42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	4a0e      	ldr	r2, [pc, #56]	; (8007c84 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	0019      	movs	r1, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f000 f813 	bl	8007c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2288      	movs	r2, #136	; 0x88
 8007c6e:	2120      	movs	r1, #32
 8007c70:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2284      	movs	r2, #132	; 0x84
 8007c76:	2100      	movs	r1, #0
 8007c78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b004      	add	sp, #16
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	f1ffffff 	.word	0xf1ffffff

08007c88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d108      	bne.n	8007caa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	226a      	movs	r2, #106	; 0x6a
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2268      	movs	r2, #104	; 0x68
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ca8:	e043      	b.n	8007d32 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007caa:	260f      	movs	r6, #15
 8007cac:	19bb      	adds	r3, r7, r6
 8007cae:	2208      	movs	r2, #8
 8007cb0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cb2:	200e      	movs	r0, #14
 8007cb4:	183b      	adds	r3, r7, r0
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	0e5b      	lsrs	r3, r3, #25
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	240d      	movs	r4, #13
 8007cc6:	193b      	adds	r3, r7, r4
 8007cc8:	2107      	movs	r1, #7
 8007cca:	400a      	ands	r2, r1
 8007ccc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	0f5b      	lsrs	r3, r3, #29
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	250c      	movs	r5, #12
 8007cda:	197b      	adds	r3, r7, r5
 8007cdc:	2107      	movs	r1, #7
 8007cde:	400a      	ands	r2, r1
 8007ce0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ce2:	183b      	adds	r3, r7, r0
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	197a      	adds	r2, r7, r5
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	4914      	ldr	r1, [pc, #80]	; (8007d3c <UARTEx_SetNbDataToProcess+0xb4>)
 8007cec:	5c8a      	ldrb	r2, [r1, r2]
 8007cee:	435a      	muls	r2, r3
 8007cf0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cf2:	197b      	adds	r3, r7, r5
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	4a12      	ldr	r2, [pc, #72]	; (8007d40 <UARTEx_SetNbDataToProcess+0xb8>)
 8007cf8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cfa:	0019      	movs	r1, r3
 8007cfc:	f7f8 faa8 	bl	8000250 <__divsi3>
 8007d00:	0003      	movs	r3, r0
 8007d02:	b299      	uxth	r1, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	226a      	movs	r2, #106	; 0x6a
 8007d08:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d0a:	19bb      	adds	r3, r7, r6
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	193a      	adds	r2, r7, r4
 8007d10:	7812      	ldrb	r2, [r2, #0]
 8007d12:	490a      	ldr	r1, [pc, #40]	; (8007d3c <UARTEx_SetNbDataToProcess+0xb4>)
 8007d14:	5c8a      	ldrb	r2, [r1, r2]
 8007d16:	435a      	muls	r2, r3
 8007d18:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d1a:	193b      	adds	r3, r7, r4
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	4a08      	ldr	r2, [pc, #32]	; (8007d40 <UARTEx_SetNbDataToProcess+0xb8>)
 8007d20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d22:	0019      	movs	r1, r3
 8007d24:	f7f8 fa94 	bl	8000250 <__divsi3>
 8007d28:	0003      	movs	r3, r0
 8007d2a:	b299      	uxth	r1, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2268      	movs	r2, #104	; 0x68
 8007d30:	5299      	strh	r1, [r3, r2]
}
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	46bd      	mov	sp, r7
 8007d36:	b005      	add	sp, #20
 8007d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	08008f04 	.word	0x08008f04
 8007d40:	08008f0c 	.word	0x08008f0c

08007d44 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007d44:	b590      	push	{r4, r7, lr}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	0002      	movs	r2, r0
 8007d4c:	1dfb      	adds	r3, r7, #7
 8007d4e:	701a      	strb	r2, [r3, #0]
 8007d50:	1dbb      	adds	r3, r7, #6
 8007d52:	1c0a      	adds	r2, r1, #0
 8007d54:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8007d56:	1dfb      	adds	r3, r7, #7
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	4a16      	ldr	r2, [pc, #88]	; (8007db4 <I2C_LCD_ExpanderWrite+0x70>)
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	18d3      	adds	r3, r2, r3
 8007d60:	3301      	adds	r3, #1
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	1dbb      	adds	r3, r7, #6
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	240f      	movs	r4, #15
 8007d6e:	193b      	adds	r3, r7, r4
 8007d70:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8007d72:	1dfb      	adds	r3, r7, #7
 8007d74:	781a      	ldrb	r2, [r3, #0]
 8007d76:	4910      	ldr	r1, [pc, #64]	; (8007db8 <I2C_LCD_ExpanderWrite+0x74>)
 8007d78:	0013      	movs	r3, r2
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	189b      	adds	r3, r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	18cb      	adds	r3, r1, r3
 8007d82:	3304      	adds	r3, #4
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	1dfb      	adds	r3, r7, #7
 8007d88:	781a      	ldrb	r2, [r3, #0]
 8007d8a:	490b      	ldr	r1, [pc, #44]	; (8007db8 <I2C_LCD_ExpanderWrite+0x74>)
 8007d8c:	0013      	movs	r3, r2
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	189b      	adds	r3, r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	18cb      	adds	r3, r1, r3
 8007d96:	3308      	adds	r3, #8
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	18db      	adds	r3, r3, r3
 8007d9e:	b299      	uxth	r1, r3
 8007da0:	193a      	adds	r2, r7, r4
 8007da2:	2364      	movs	r3, #100	; 0x64
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	2301      	movs	r3, #1
 8007da8:	f7fb fa3a 	bl	8003220 <HAL_I2C_Master_Transmit>
}
 8007dac:	46c0      	nop			; (mov r8, r8)
 8007dae:	46bd      	mov	sp, r7
 8007db0:	b005      	add	sp, #20
 8007db2:	bd90      	pop	{r4, r7, pc}
 8007db4:	20000404 	.word	0x20000404
 8007db8:	08008f14 	.word	0x08008f14

08007dbc <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007dbc:	b590      	push	{r4, r7, lr}
 8007dbe:	b087      	sub	sp, #28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	0002      	movs	r2, r0
 8007dc4:	1dfb      	adds	r3, r7, #7
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	1dbb      	adds	r3, r7, #6
 8007dca:	1c0a      	adds	r2, r1, #0
 8007dcc:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8007dce:	1dbb      	adds	r3, r7, #6
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2204      	movs	r2, #4
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	1dfb      	adds	r3, r7, #7
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	0011      	movs	r1, r2
 8007dde:	0018      	movs	r0, r3
 8007de0:	f7ff ffb0 	bl	8007d44 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8007de4:	4b25      	ldr	r3, [pc, #148]	; (8007e7c <I2C_LCD_EnPulse+0xc0>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	617b      	str	r3, [r7, #20]
 8007dea:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <I2C_LCD_EnPulse+0xc4>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4925      	ldr	r1, [pc, #148]	; (8007e84 <I2C_LCD_EnPulse+0xc8>)
 8007df0:	0018      	movs	r0, r3
 8007df2:	f7f8 f9a3 	bl	800013c <__udivsi3>
 8007df6:	0003      	movs	r3, r0
 8007df8:	005c      	lsls	r4, r3, #1
 8007dfa:	4b21      	ldr	r3, [pc, #132]	; (8007e80 <I2C_LCD_EnPulse+0xc4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4921      	ldr	r1, [pc, #132]	; (8007e84 <I2C_LCD_EnPulse+0xc8>)
 8007e00:	0018      	movs	r0, r3
 8007e02:	f7f8 f99b 	bl	800013c <__udivsi3>
 8007e06:	0003      	movs	r3, r0
 8007e08:	085b      	lsrs	r3, r3, #1
 8007e0a:	1ae3      	subs	r3, r4, r3
 8007e0c:	613b      	str	r3, [r7, #16]
 8007e0e:	4b1b      	ldr	r3, [pc, #108]	; (8007e7c <I2C_LCD_EnPulse+0xc0>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d8f8      	bhi.n	8007e0e <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8007e1c:	1dbb      	adds	r3, r7, #6
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2204      	movs	r2, #4
 8007e22:	4393      	bics	r3, r2
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	1dfb      	adds	r3, r7, #7
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	0011      	movs	r1, r2
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	f7ff ff89 	bl	8007d44 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8007e32:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <I2C_LCD_EnPulse+0xc0>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <I2C_LCD_EnPulse+0xc4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4911      	ldr	r1, [pc, #68]	; (8007e84 <I2C_LCD_EnPulse+0xc8>)
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f7f8 f97c 	bl	800013c <__udivsi3>
 8007e44:	0003      	movs	r3, r0
 8007e46:	001a      	movs	r2, r3
 8007e48:	2332      	movs	r3, #50	; 0x32
 8007e4a:	4353      	muls	r3, r2
 8007e4c:	001c      	movs	r4, r3
 8007e4e:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <I2C_LCD_EnPulse+0xc4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	490c      	ldr	r1, [pc, #48]	; (8007e84 <I2C_LCD_EnPulse+0xc8>)
 8007e54:	0018      	movs	r0, r3
 8007e56:	f7f8 f971 	bl	800013c <__udivsi3>
 8007e5a:	0003      	movs	r3, r0
 8007e5c:	085b      	lsrs	r3, r3, #1
 8007e5e:	1ae3      	subs	r3, r4, r3
 8007e60:	60bb      	str	r3, [r7, #8]
 8007e62:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <I2C_LCD_EnPulse+0xc0>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d8f8      	bhi.n	8007e62 <I2C_LCD_EnPulse+0xa6>
}
 8007e70:	46c0      	nop			; (mov r8, r8)
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	46bd      	mov	sp, r7
 8007e76:	b007      	add	sp, #28
 8007e78:	bd90      	pop	{r4, r7, pc}
 8007e7a:	46c0      	nop			; (mov r8, r8)
 8007e7c:	e000e010 	.word	0xe000e010
 8007e80:	2000000c 	.word	0x2000000c
 8007e84:	000f4240 	.word	0x000f4240

08007e88 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	0002      	movs	r2, r0
 8007e90:	1dfb      	adds	r3, r7, #7
 8007e92:	701a      	strb	r2, [r3, #0]
 8007e94:	1dbb      	adds	r3, r7, #6
 8007e96:	1c0a      	adds	r2, r1, #0
 8007e98:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8007e9a:	1dbb      	adds	r3, r7, #6
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	1dfb      	adds	r3, r7, #7
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	0011      	movs	r1, r2
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f7ff ff4d 	bl	8007d44 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8007eaa:	1dbb      	adds	r3, r7, #6
 8007eac:	781a      	ldrb	r2, [r3, #0]
 8007eae:	1dfb      	adds	r3, r7, #7
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	0011      	movs	r1, r2
 8007eb4:	0018      	movs	r0, r3
 8007eb6:	f7ff ff81 	bl	8007dbc <I2C_LCD_EnPulse>
}
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b002      	add	sp, #8
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8007ec2:	b590      	push	{r4, r7, lr}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	0004      	movs	r4, r0
 8007eca:	0008      	movs	r0, r1
 8007ecc:	0011      	movs	r1, r2
 8007ece:	1dfb      	adds	r3, r7, #7
 8007ed0:	1c22      	adds	r2, r4, #0
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	1dbb      	adds	r3, r7, #6
 8007ed6:	1c02      	adds	r2, r0, #0
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	1d7b      	adds	r3, r7, #5
 8007edc:	1c0a      	adds	r2, r1, #0
 8007ede:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8007ee0:	200f      	movs	r0, #15
 8007ee2:	183b      	adds	r3, r7, r0
 8007ee4:	1dba      	adds	r2, r7, #6
 8007ee6:	7812      	ldrb	r2, [r2, #0]
 8007ee8:	210f      	movs	r1, #15
 8007eea:	438a      	bics	r2, r1
 8007eec:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8007eee:	1dbb      	adds	r3, r7, #6
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	011a      	lsls	r2, r3, #4
 8007ef4:	240e      	movs	r4, #14
 8007ef6:	193b      	adds	r3, r7, r4
 8007ef8:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8007efa:	183a      	adds	r2, r7, r0
 8007efc:	1d7b      	adds	r3, r7, #5
 8007efe:	7812      	ldrb	r2, [r2, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	1dfb      	adds	r3, r7, #7
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	0011      	movs	r1, r2
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f7ff ffbb 	bl	8007e88 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8007f12:	193a      	adds	r2, r7, r4
 8007f14:	1d7b      	adds	r3, r7, #5
 8007f16:	7812      	ldrb	r2, [r2, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	1dfb      	adds	r3, r7, #7
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	0011      	movs	r1, r2
 8007f24:	0018      	movs	r0, r3
 8007f26:	f7ff ffaf 	bl	8007e88 <I2C_LCD_Write4Bits>
}
 8007f2a:	46c0      	nop			; (mov r8, r8)
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	b005      	add	sp, #20
 8007f30:	bd90      	pop	{r4, r7, pc}

08007f32 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	0002      	movs	r2, r0
 8007f3a:	1dfb      	adds	r3, r7, #7
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	1dbb      	adds	r3, r7, #6
 8007f40:	1c0a      	adds	r2, r1, #0
 8007f42:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8007f44:	1dbb      	adds	r3, r7, #6
 8007f46:	7819      	ldrb	r1, [r3, #0]
 8007f48:	1dfb      	adds	r3, r7, #7
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f7ff ffb7 	bl	8007ec2 <I2C_LCD_Send>
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b002      	add	sp, #8
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	0002      	movs	r2, r0
 8007f64:	1dfb      	adds	r3, r7, #7
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	1dbb      	adds	r3, r7, #6
 8007f6a:	1c0a      	adds	r2, r1, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8007f6e:	1dbb      	adds	r3, r7, #6
 8007f70:	7819      	ldrb	r1, [r3, #0]
 8007f72:	1dfb      	adds	r3, r7, #7
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2201      	movs	r2, #1
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f7ff ffa2 	bl	8007ec2 <I2C_LCD_Send>
}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	46bd      	mov	sp, r7
 8007f82:	b002      	add	sp, #8
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8007f88:	b590      	push	{r4, r7, lr}
 8007f8a:	b08b      	sub	sp, #44	; 0x2c
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	0002      	movs	r2, r0
 8007f90:	1dfb      	adds	r3, r7, #7
 8007f92:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8007f94:	46c0      	nop			; (mov r8, r8)
 8007f96:	f7f9 fea1 	bl	8001cdc <HAL_GetTick>
 8007f9a:	0003      	movs	r3, r0
 8007f9c:	2b31      	cmp	r3, #49	; 0x31
 8007f9e:	d9fa      	bls.n	8007f96 <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8007fa0:	1dfb      	adds	r3, r7, #7
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2130      	movs	r1, #48	; 0x30
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f7ff ffc3 	bl	8007f32 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8007fac:	2300      	movs	r3, #0
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb0:	e025      	b.n	8007ffe <I2C_LCD_Init+0x76>
 8007fb2:	4b57      	ldr	r3, [pc, #348]	; (8008110 <I2C_LCD_Init+0x188>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	4b56      	ldr	r3, [pc, #344]	; (8008114 <I2C_LCD_Init+0x18c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4956      	ldr	r1, [pc, #344]	; (8008118 <I2C_LCD_Init+0x190>)
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f7f8 f8bc 	bl	800013c <__udivsi3>
 8007fc4:	0003      	movs	r3, r0
 8007fc6:	001a      	movs	r2, r3
 8007fc8:	0013      	movs	r3, r2
 8007fca:	015b      	lsls	r3, r3, #5
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	189b      	adds	r3, r3, r2
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	001c      	movs	r4, r3
 8007fd6:	4b4f      	ldr	r3, [pc, #316]	; (8008114 <I2C_LCD_Init+0x18c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	494f      	ldr	r1, [pc, #316]	; (8008118 <I2C_LCD_Init+0x190>)
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f7f8 f8ad 	bl	800013c <__udivsi3>
 8007fe2:	0003      	movs	r3, r0
 8007fe4:	085b      	lsrs	r3, r3, #1
 8007fe6:	1ae3      	subs	r3, r4, r3
 8007fe8:	60bb      	str	r3, [r7, #8]
 8007fea:	4b49      	ldr	r3, [pc, #292]	; (8008110 <I2C_LCD_Init+0x188>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d8f8      	bhi.n	8007fea <I2C_LCD_Init+0x62>
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	2b04      	cmp	r3, #4
 8008002:	d9d6      	bls.n	8007fb2 <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8008004:	1dfb      	adds	r3, r7, #7
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2130      	movs	r1, #48	; 0x30
 800800a:	0018      	movs	r0, r3
 800800c:	f7ff ff91 	bl	8007f32 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8008010:	2300      	movs	r3, #0
 8008012:	623b      	str	r3, [r7, #32]
 8008014:	e025      	b.n	8008062 <I2C_LCD_Init+0xda>
 8008016:	4b3e      	ldr	r3, [pc, #248]	; (8008110 <I2C_LCD_Init+0x188>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	4b3d      	ldr	r3, [pc, #244]	; (8008114 <I2C_LCD_Init+0x18c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	493d      	ldr	r1, [pc, #244]	; (8008118 <I2C_LCD_Init+0x190>)
 8008022:	0018      	movs	r0, r3
 8008024:	f7f8 f88a 	bl	800013c <__udivsi3>
 8008028:	0003      	movs	r3, r0
 800802a:	001a      	movs	r2, r3
 800802c:	0013      	movs	r3, r2
 800802e:	015b      	lsls	r3, r3, #5
 8008030:	1a9b      	subs	r3, r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	189b      	adds	r3, r3, r2
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	001c      	movs	r4, r3
 800803a:	4b36      	ldr	r3, [pc, #216]	; (8008114 <I2C_LCD_Init+0x18c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4936      	ldr	r1, [pc, #216]	; (8008118 <I2C_LCD_Init+0x190>)
 8008040:	0018      	movs	r0, r3
 8008042:	f7f8 f87b 	bl	800013c <__udivsi3>
 8008046:	0003      	movs	r3, r0
 8008048:	085b      	lsrs	r3, r3, #1
 800804a:	1ae3      	subs	r3, r4, r3
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	4b30      	ldr	r3, [pc, #192]	; (8008110 <I2C_LCD_Init+0x188>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	429a      	cmp	r2, r3
 800805a:	d8f8      	bhi.n	800804e <I2C_LCD_Init+0xc6>
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	3301      	adds	r3, #1
 8008060:	623b      	str	r3, [r7, #32]
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	2b04      	cmp	r3, #4
 8008066:	d9d6      	bls.n	8008016 <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8008068:	1dfb      	adds	r3, r7, #7
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2130      	movs	r1, #48	; 0x30
 800806e:	0018      	movs	r0, r3
 8008070:	f7ff ff5f 	bl	8007f32 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8008074:	4b26      	ldr	r3, [pc, #152]	; (8008110 <I2C_LCD_Init+0x188>)
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	61fb      	str	r3, [r7, #28]
 800807a:	4b26      	ldr	r3, [pc, #152]	; (8008114 <I2C_LCD_Init+0x18c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4926      	ldr	r1, [pc, #152]	; (8008118 <I2C_LCD_Init+0x190>)
 8008080:	0018      	movs	r0, r3
 8008082:	f7f8 f85b 	bl	800013c <__udivsi3>
 8008086:	0003      	movs	r3, r0
 8008088:	001a      	movs	r2, r3
 800808a:	2396      	movs	r3, #150	; 0x96
 800808c:	4353      	muls	r3, r2
 800808e:	001c      	movs	r4, r3
 8008090:	4b20      	ldr	r3, [pc, #128]	; (8008114 <I2C_LCD_Init+0x18c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4920      	ldr	r1, [pc, #128]	; (8008118 <I2C_LCD_Init+0x190>)
 8008096:	0018      	movs	r0, r3
 8008098:	f7f8 f850 	bl	800013c <__udivsi3>
 800809c:	0003      	movs	r3, r0
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	1ae3      	subs	r3, r4, r3
 80080a2:	61bb      	str	r3, [r7, #24]
 80080a4:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <I2C_LCD_Init+0x188>)
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d8f8      	bhi.n	80080a4 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80080b2:	1dfb      	adds	r3, r7, #7
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	2102      	movs	r1, #2
 80080b8:	0018      	movs	r0, r3
 80080ba:	f7ff ff3a 	bl	8007f32 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80080be:	1dfb      	adds	r3, r7, #7
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2128      	movs	r1, #40	; 0x28
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7ff ff34 	bl	8007f32 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80080ca:	1dfb      	adds	r3, r7, #7
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	210c      	movs	r1, #12
 80080d0:	0018      	movs	r0, r3
 80080d2:	f7ff ff2e 	bl	8007f32 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80080d6:	1dfb      	adds	r3, r7, #7
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2106      	movs	r1, #6
 80080dc:	0018      	movs	r0, r3
 80080de:	f7ff ff28 	bl	8007f32 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80080e2:	1dfb      	adds	r3, r7, #7
 80080e4:	781a      	ldrb	r2, [r3, #0]
 80080e6:	4b0d      	ldr	r3, [pc, #52]	; (800811c <I2C_LCD_Init+0x194>)
 80080e8:	0052      	lsls	r2, r2, #1
 80080ea:	2104      	movs	r1, #4
 80080ec:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80080ee:	1dfb      	adds	r3, r7, #7
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4a0a      	ldr	r2, [pc, #40]	; (800811c <I2C_LCD_Init+0x194>)
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	18d3      	adds	r3, r2, r3
 80080f8:	3301      	adds	r3, #1
 80080fa:	2208      	movs	r2, #8
 80080fc:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80080fe:	1dfb      	adds	r3, r7, #7
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	0018      	movs	r0, r3
 8008104:	f000 f80c 	bl	8008120 <I2C_LCD_Clear>
}
 8008108:	46c0      	nop			; (mov r8, r8)
 800810a:	46bd      	mov	sp, r7
 800810c:	b00b      	add	sp, #44	; 0x2c
 800810e:	bd90      	pop	{r4, r7, pc}
 8008110:	e000e010 	.word	0xe000e010
 8008114:	2000000c 	.word	0x2000000c
 8008118:	000f4240 	.word	0x000f4240
 800811c:	20000404 	.word	0x20000404

08008120 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8008120:	b590      	push	{r4, r7, lr}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	0002      	movs	r2, r0
 8008128:	1dfb      	adds	r3, r7, #7
 800812a:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800812c:	1dfb      	adds	r3, r7, #7
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2101      	movs	r1, #1
 8008132:	0018      	movs	r0, r3
 8008134:	f7ff fefd 	bl	8007f32 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8008138:	2300      	movs	r3, #0
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	e025      	b.n	800818a <I2C_LCD_Clear+0x6a>
 800813e:	4b17      	ldr	r3, [pc, #92]	; (800819c <I2C_LCD_Clear+0x7c>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <I2C_LCD_Clear+0x80>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4916      	ldr	r1, [pc, #88]	; (80081a4 <I2C_LCD_Clear+0x84>)
 800814a:	0018      	movs	r0, r3
 800814c:	f7f7 fff6 	bl	800013c <__udivsi3>
 8008150:	0003      	movs	r3, r0
 8008152:	001a      	movs	r2, r3
 8008154:	0013      	movs	r3, r2
 8008156:	015b      	lsls	r3, r3, #5
 8008158:	1a9b      	subs	r3, r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	189b      	adds	r3, r3, r2
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	001c      	movs	r4, r3
 8008162:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <I2C_LCD_Clear+0x80>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	490f      	ldr	r1, [pc, #60]	; (80081a4 <I2C_LCD_Clear+0x84>)
 8008168:	0018      	movs	r0, r3
 800816a:	f7f7 ffe7 	bl	800013c <__udivsi3>
 800816e:	0003      	movs	r3, r0
 8008170:	085b      	lsrs	r3, r3, #1
 8008172:	1ae3      	subs	r3, r4, r3
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	4b09      	ldr	r3, [pc, #36]	; (800819c <I2C_LCD_Clear+0x7c>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	429a      	cmp	r2, r3
 8008182:	d8f8      	bhi.n	8008176 <I2C_LCD_Clear+0x56>
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	3301      	adds	r3, #1
 8008188:	617b      	str	r3, [r7, #20]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d9d6      	bls.n	800813e <I2C_LCD_Clear+0x1e>
}
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	46bd      	mov	sp, r7
 8008196:	b007      	add	sp, #28
 8008198:	bd90      	pop	{r4, r7, pc}
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	e000e010 	.word	0xe000e010
 80081a0:	2000000c 	.word	0x2000000c
 80081a4:	000f4240 	.word	0x000f4240

080081a8 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80081a8:	b590      	push	{r4, r7, lr}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	0004      	movs	r4, r0
 80081b0:	0008      	movs	r0, r1
 80081b2:	0011      	movs	r1, r2
 80081b4:	1dfb      	adds	r3, r7, #7
 80081b6:	1c22      	adds	r2, r4, #0
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	1dbb      	adds	r3, r7, #6
 80081bc:	1c02      	adds	r2, r0, #0
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	1d7b      	adds	r3, r7, #5
 80081c2:	1c0a      	adds	r2, r1, #0
 80081c4:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80081c6:	2308      	movs	r3, #8
 80081c8:	18fb      	adds	r3, r7, r3
 80081ca:	4a1d      	ldr	r2, [pc, #116]	; (8008240 <I2C_LCD_SetCursor+0x98>)
 80081cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80081ce:	c313      	stmia	r3!, {r0, r1, r4}
 80081d0:	6812      	ldr	r2, [r2, #0]
 80081d2:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 80081d4:	1dfb      	adds	r3, r7, #7
 80081d6:	781a      	ldrb	r2, [r3, #0]
 80081d8:	491a      	ldr	r1, [pc, #104]	; (8008244 <I2C_LCD_SetCursor+0x9c>)
 80081da:	0013      	movs	r3, r2
 80081dc:	005b      	lsls	r3, r3, #1
 80081de:	189b      	adds	r3, r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	18cb      	adds	r3, r1, r3
 80081e4:	330a      	adds	r3, #10
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	1d7a      	adds	r2, r7, #5
 80081ea:	7812      	ldrb	r2, [r2, #0]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d90c      	bls.n	800820a <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 80081f0:	1dfb      	adds	r3, r7, #7
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	4913      	ldr	r1, [pc, #76]	; (8008244 <I2C_LCD_SetCursor+0x9c>)
 80081f6:	0013      	movs	r3, r2
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	189b      	adds	r3, r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	18cb      	adds	r3, r1, r3
 8008200:	330a      	adds	r3, #10
 8008202:	781a      	ldrb	r2, [r3, #0]
 8008204:	1d7b      	adds	r3, r7, #5
 8008206:	3a01      	subs	r2, #1
 8008208:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 800820a:	1d7b      	adds	r3, r7, #5
 800820c:	781a      	ldrb	r2, [r3, #0]
 800820e:	2308      	movs	r3, #8
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	0092      	lsls	r2, r2, #2
 8008214:	58d3      	ldr	r3, [r2, r3]
 8008216:	b2da      	uxtb	r2, r3
 8008218:	1dbb      	adds	r3, r7, #6
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	18d3      	adds	r3, r2, r3
 800821e:	b2db      	uxtb	r3, r3
 8008220:	b25b      	sxtb	r3, r3
 8008222:	2280      	movs	r2, #128	; 0x80
 8008224:	4252      	negs	r2, r2
 8008226:	4313      	orrs	r3, r2
 8008228:	b25b      	sxtb	r3, r3
 800822a:	b2da      	uxtb	r2, r3
 800822c:	1dfb      	adds	r3, r7, #7
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	0011      	movs	r1, r2
 8008232:	0018      	movs	r0, r3
 8008234:	f7ff fe7d 	bl	8007f32 <I2C_LCD_Cmd>
}
 8008238:	46c0      	nop			; (mov r8, r8)
 800823a:	46bd      	mov	sp, r7
 800823c:	b007      	add	sp, #28
 800823e:	bd90      	pop	{r4, r7, pc}
 8008240:	08008e28 	.word	0x08008e28
 8008244:	08008f14 	.word	0x08008f14

08008248 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	0002      	movs	r2, r0
 8008250:	6039      	str	r1, [r7, #0]
 8008252:	1dfb      	adds	r3, r7, #7
 8008254:	701a      	strb	r2, [r3, #0]
    while (*Str)
 8008256:	e009      	b.n	800826c <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	603a      	str	r2, [r7, #0]
 800825e:	781a      	ldrb	r2, [r3, #0]
 8008260:	1dfb      	adds	r3, r7, #7
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	0011      	movs	r1, r2
 8008266:	0018      	movs	r0, r3
 8008268:	f7ff fe78 	bl	8007f5c <I2C_LCD_Data>
    while (*Str)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1f1      	bne.n	8008258 <I2C_LCD_WriteString+0x10>
    }
}
 8008274:	46c0      	nop			; (mov r8, r8)
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	46bd      	mov	sp, r7
 800827a:	b002      	add	sp, #8
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <I2C_LCD_Display>:
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_NOBACKLIGHT;
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
}

void I2C_LCD_Display(uint8_t I2C_LCD_InstanceIndex)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	0002      	movs	r2, r0
 8008288:	1dfb      	adds	r3, r7, #7
 800828a:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_DISPLAYON;
 800828c:	1dfb      	adds	r3, r7, #7
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	4b0e      	ldr	r3, [pc, #56]	; (80082cc <I2C_LCD_Display+0x4c>)
 8008292:	0052      	lsls	r2, r2, #1
 8008294:	5cd3      	ldrb	r3, [r2, r3]
 8008296:	1dfa      	adds	r2, r7, #7
 8008298:	7812      	ldrb	r2, [r2, #0]
 800829a:	2104      	movs	r1, #4
 800829c:	430b      	orrs	r3, r1
 800829e:	b2d9      	uxtb	r1, r3
 80082a0:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <I2C_LCD_Display+0x4c>)
 80082a2:	0052      	lsls	r2, r2, #1
 80082a4:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 80082a6:	1dfb      	adds	r3, r7, #7
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	4b08      	ldr	r3, [pc, #32]	; (80082cc <I2C_LCD_Display+0x4c>)
 80082ac:	0052      	lsls	r2, r2, #1
 80082ae:	5cd3      	ldrb	r3, [r2, r3]
 80082b0:	2208      	movs	r2, #8
 80082b2:	4313      	orrs	r3, r2
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	1dfb      	adds	r3, r7, #7
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	0011      	movs	r1, r2
 80082bc:	0018      	movs	r0, r3
 80082be:	f7ff fe38 	bl	8007f32 <I2C_LCD_Cmd>
}
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	46bd      	mov	sp, r7
 80082c6:	b002      	add	sp, #8
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	46c0      	nop			; (mov r8, r8)
 80082cc:	20000404 	.word	0x20000404

080082d0 <I2C_LCD_NoDisplay>:

void I2C_LCD_NoDisplay(uint8_t I2C_LCD_InstanceIndex)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	0002      	movs	r2, r0
 80082d8:	1dfb      	adds	r3, r7, #7
 80082da:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl &= ~LCD_DISPLAYON;
 80082dc:	1dfb      	adds	r3, r7, #7
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	4b0e      	ldr	r3, [pc, #56]	; (800831c <I2C_LCD_NoDisplay+0x4c>)
 80082e2:	0052      	lsls	r2, r2, #1
 80082e4:	5cd3      	ldrb	r3, [r2, r3]
 80082e6:	1dfa      	adds	r2, r7, #7
 80082e8:	7812      	ldrb	r2, [r2, #0]
 80082ea:	2104      	movs	r1, #4
 80082ec:	438b      	bics	r3, r1
 80082ee:	b2d9      	uxtb	r1, r3
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <I2C_LCD_NoDisplay+0x4c>)
 80082f2:	0052      	lsls	r2, r2, #1
 80082f4:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 80082f6:	1dfb      	adds	r3, r7, #7
 80082f8:	781a      	ldrb	r2, [r3, #0]
 80082fa:	4b08      	ldr	r3, [pc, #32]	; (800831c <I2C_LCD_NoDisplay+0x4c>)
 80082fc:	0052      	lsls	r2, r2, #1
 80082fe:	5cd3      	ldrb	r3, [r2, r3]
 8008300:	2208      	movs	r2, #8
 8008302:	4313      	orrs	r3, r2
 8008304:	b2da      	uxtb	r2, r3
 8008306:	1dfb      	adds	r3, r7, #7
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	0011      	movs	r1, r2
 800830c:	0018      	movs	r0, r3
 800830e:	f7ff fe10 	bl	8007f32 <I2C_LCD_Cmd>
}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	46bd      	mov	sp, r7
 8008316:	b002      	add	sp, #8
 8008318:	bd80      	pop	{r7, pc}
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	20000404 	.word	0x20000404

08008320 <siprintf>:
 8008320:	b40e      	push	{r1, r2, r3}
 8008322:	b500      	push	{lr}
 8008324:	490b      	ldr	r1, [pc, #44]	; (8008354 <siprintf+0x34>)
 8008326:	b09c      	sub	sp, #112	; 0x70
 8008328:	ab1d      	add	r3, sp, #116	; 0x74
 800832a:	9002      	str	r0, [sp, #8]
 800832c:	9006      	str	r0, [sp, #24]
 800832e:	9107      	str	r1, [sp, #28]
 8008330:	9104      	str	r1, [sp, #16]
 8008332:	4809      	ldr	r0, [pc, #36]	; (8008358 <siprintf+0x38>)
 8008334:	4909      	ldr	r1, [pc, #36]	; (800835c <siprintf+0x3c>)
 8008336:	cb04      	ldmia	r3!, {r2}
 8008338:	9105      	str	r1, [sp, #20]
 800833a:	6800      	ldr	r0, [r0, #0]
 800833c:	a902      	add	r1, sp, #8
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	f000 f9a2 	bl	8008688 <_svfiprintf_r>
 8008344:	2200      	movs	r2, #0
 8008346:	9b02      	ldr	r3, [sp, #8]
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	b01c      	add	sp, #112	; 0x70
 800834c:	bc08      	pop	{r3}
 800834e:	b003      	add	sp, #12
 8008350:	4718      	bx	r3
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	7fffffff 	.word	0x7fffffff
 8008358:	20000064 	.word	0x20000064
 800835c:	ffff0208 	.word	0xffff0208

08008360 <memset>:
 8008360:	0003      	movs	r3, r0
 8008362:	1882      	adds	r2, r0, r2
 8008364:	4293      	cmp	r3, r2
 8008366:	d100      	bne.n	800836a <memset+0xa>
 8008368:	4770      	bx	lr
 800836a:	7019      	strb	r1, [r3, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	e7f9      	b.n	8008364 <memset+0x4>

08008370 <__errno>:
 8008370:	4b01      	ldr	r3, [pc, #4]	; (8008378 <__errno+0x8>)
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	4770      	bx	lr
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	20000064 	.word	0x20000064

0800837c <__libc_init_array>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	2600      	movs	r6, #0
 8008380:	4c0c      	ldr	r4, [pc, #48]	; (80083b4 <__libc_init_array+0x38>)
 8008382:	4d0d      	ldr	r5, [pc, #52]	; (80083b8 <__libc_init_array+0x3c>)
 8008384:	1b64      	subs	r4, r4, r5
 8008386:	10a4      	asrs	r4, r4, #2
 8008388:	42a6      	cmp	r6, r4
 800838a:	d109      	bne.n	80083a0 <__libc_init_array+0x24>
 800838c:	2600      	movs	r6, #0
 800838e:	f000 fc6d 	bl	8008c6c <_init>
 8008392:	4c0a      	ldr	r4, [pc, #40]	; (80083bc <__libc_init_array+0x40>)
 8008394:	4d0a      	ldr	r5, [pc, #40]	; (80083c0 <__libc_init_array+0x44>)
 8008396:	1b64      	subs	r4, r4, r5
 8008398:	10a4      	asrs	r4, r4, #2
 800839a:	42a6      	cmp	r6, r4
 800839c:	d105      	bne.n	80083aa <__libc_init_array+0x2e>
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	00b3      	lsls	r3, r6, #2
 80083a2:	58eb      	ldr	r3, [r5, r3]
 80083a4:	4798      	blx	r3
 80083a6:	3601      	adds	r6, #1
 80083a8:	e7ee      	b.n	8008388 <__libc_init_array+0xc>
 80083aa:	00b3      	lsls	r3, r6, #2
 80083ac:	58eb      	ldr	r3, [r5, r3]
 80083ae:	4798      	blx	r3
 80083b0:	3601      	adds	r6, #1
 80083b2:	e7f2      	b.n	800839a <__libc_init_array+0x1e>
 80083b4:	08008f5c 	.word	0x08008f5c
 80083b8:	08008f5c 	.word	0x08008f5c
 80083bc:	08008f60 	.word	0x08008f60
 80083c0:	08008f5c 	.word	0x08008f5c

080083c4 <__retarget_lock_acquire_recursive>:
 80083c4:	4770      	bx	lr

080083c6 <__retarget_lock_release_recursive>:
 80083c6:	4770      	bx	lr

080083c8 <_free_r>:
 80083c8:	b570      	push	{r4, r5, r6, lr}
 80083ca:	0005      	movs	r5, r0
 80083cc:	2900      	cmp	r1, #0
 80083ce:	d010      	beq.n	80083f2 <_free_r+0x2a>
 80083d0:	1f0c      	subs	r4, r1, #4
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	da00      	bge.n	80083da <_free_r+0x12>
 80083d8:	18e4      	adds	r4, r4, r3
 80083da:	0028      	movs	r0, r5
 80083dc:	f000 f8e2 	bl	80085a4 <__malloc_lock>
 80083e0:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <_free_r+0x90>)
 80083e2:	6813      	ldr	r3, [r2, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d105      	bne.n	80083f4 <_free_r+0x2c>
 80083e8:	6063      	str	r3, [r4, #4]
 80083ea:	6014      	str	r4, [r2, #0]
 80083ec:	0028      	movs	r0, r5
 80083ee:	f000 f8e1 	bl	80085b4 <__malloc_unlock>
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	d908      	bls.n	800840a <_free_r+0x42>
 80083f8:	6820      	ldr	r0, [r4, #0]
 80083fa:	1821      	adds	r1, r4, r0
 80083fc:	428b      	cmp	r3, r1
 80083fe:	d1f3      	bne.n	80083e8 <_free_r+0x20>
 8008400:	6819      	ldr	r1, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	1809      	adds	r1, r1, r0
 8008406:	6021      	str	r1, [r4, #0]
 8008408:	e7ee      	b.n	80083e8 <_free_r+0x20>
 800840a:	001a      	movs	r2, r3
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <_free_r+0x4e>
 8008412:	42a3      	cmp	r3, r4
 8008414:	d9f9      	bls.n	800840a <_free_r+0x42>
 8008416:	6811      	ldr	r1, [r2, #0]
 8008418:	1850      	adds	r0, r2, r1
 800841a:	42a0      	cmp	r0, r4
 800841c:	d10b      	bne.n	8008436 <_free_r+0x6e>
 800841e:	6820      	ldr	r0, [r4, #0]
 8008420:	1809      	adds	r1, r1, r0
 8008422:	1850      	adds	r0, r2, r1
 8008424:	6011      	str	r1, [r2, #0]
 8008426:	4283      	cmp	r3, r0
 8008428:	d1e0      	bne.n	80083ec <_free_r+0x24>
 800842a:	6818      	ldr	r0, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	1841      	adds	r1, r0, r1
 8008430:	6011      	str	r1, [r2, #0]
 8008432:	6053      	str	r3, [r2, #4]
 8008434:	e7da      	b.n	80083ec <_free_r+0x24>
 8008436:	42a0      	cmp	r0, r4
 8008438:	d902      	bls.n	8008440 <_free_r+0x78>
 800843a:	230c      	movs	r3, #12
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	e7d5      	b.n	80083ec <_free_r+0x24>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	1821      	adds	r1, r4, r0
 8008444:	428b      	cmp	r3, r1
 8008446:	d103      	bne.n	8008450 <_free_r+0x88>
 8008448:	6819      	ldr	r1, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	1809      	adds	r1, r1, r0
 800844e:	6021      	str	r1, [r4, #0]
 8008450:	6063      	str	r3, [r4, #4]
 8008452:	6054      	str	r4, [r2, #4]
 8008454:	e7ca      	b.n	80083ec <_free_r+0x24>
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	20000548 	.word	0x20000548

0800845c <sbrk_aligned>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	4e0f      	ldr	r6, [pc, #60]	; (800849c <sbrk_aligned+0x40>)
 8008460:	000d      	movs	r5, r1
 8008462:	6831      	ldr	r1, [r6, #0]
 8008464:	0004      	movs	r4, r0
 8008466:	2900      	cmp	r1, #0
 8008468:	d102      	bne.n	8008470 <sbrk_aligned+0x14>
 800846a:	f000 fba1 	bl	8008bb0 <_sbrk_r>
 800846e:	6030      	str	r0, [r6, #0]
 8008470:	0029      	movs	r1, r5
 8008472:	0020      	movs	r0, r4
 8008474:	f000 fb9c 	bl	8008bb0 <_sbrk_r>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d00a      	beq.n	8008492 <sbrk_aligned+0x36>
 800847c:	2303      	movs	r3, #3
 800847e:	1cc5      	adds	r5, r0, #3
 8008480:	439d      	bics	r5, r3
 8008482:	42a8      	cmp	r0, r5
 8008484:	d007      	beq.n	8008496 <sbrk_aligned+0x3a>
 8008486:	1a29      	subs	r1, r5, r0
 8008488:	0020      	movs	r0, r4
 800848a:	f000 fb91 	bl	8008bb0 <_sbrk_r>
 800848e:	3001      	adds	r0, #1
 8008490:	d101      	bne.n	8008496 <sbrk_aligned+0x3a>
 8008492:	2501      	movs	r5, #1
 8008494:	426d      	negs	r5, r5
 8008496:	0028      	movs	r0, r5
 8008498:	bd70      	pop	{r4, r5, r6, pc}
 800849a:	46c0      	nop			; (mov r8, r8)
 800849c:	2000054c 	.word	0x2000054c

080084a0 <_malloc_r>:
 80084a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084a2:	2203      	movs	r2, #3
 80084a4:	1ccb      	adds	r3, r1, #3
 80084a6:	4393      	bics	r3, r2
 80084a8:	3308      	adds	r3, #8
 80084aa:	0006      	movs	r6, r0
 80084ac:	001f      	movs	r7, r3
 80084ae:	2b0c      	cmp	r3, #12
 80084b0:	d238      	bcs.n	8008524 <_malloc_r+0x84>
 80084b2:	270c      	movs	r7, #12
 80084b4:	42b9      	cmp	r1, r7
 80084b6:	d837      	bhi.n	8008528 <_malloc_r+0x88>
 80084b8:	0030      	movs	r0, r6
 80084ba:	f000 f873 	bl	80085a4 <__malloc_lock>
 80084be:	4b38      	ldr	r3, [pc, #224]	; (80085a0 <_malloc_r+0x100>)
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	001c      	movs	r4, r3
 80084c6:	2c00      	cmp	r4, #0
 80084c8:	d133      	bne.n	8008532 <_malloc_r+0x92>
 80084ca:	0039      	movs	r1, r7
 80084cc:	0030      	movs	r0, r6
 80084ce:	f7ff ffc5 	bl	800845c <sbrk_aligned>
 80084d2:	0004      	movs	r4, r0
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d15e      	bne.n	8008596 <_malloc_r+0xf6>
 80084d8:	9b00      	ldr	r3, [sp, #0]
 80084da:	681c      	ldr	r4, [r3, #0]
 80084dc:	0025      	movs	r5, r4
 80084de:	2d00      	cmp	r5, #0
 80084e0:	d14e      	bne.n	8008580 <_malloc_r+0xe0>
 80084e2:	2c00      	cmp	r4, #0
 80084e4:	d051      	beq.n	800858a <_malloc_r+0xea>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	0029      	movs	r1, r5
 80084ea:	18e3      	adds	r3, r4, r3
 80084ec:	0030      	movs	r0, r6
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	f000 fb5e 	bl	8008bb0 <_sbrk_r>
 80084f4:	9b01      	ldr	r3, [sp, #4]
 80084f6:	4283      	cmp	r3, r0
 80084f8:	d147      	bne.n	800858a <_malloc_r+0xea>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	0030      	movs	r0, r6
 80084fe:	1aff      	subs	r7, r7, r3
 8008500:	0039      	movs	r1, r7
 8008502:	f7ff ffab 	bl	800845c <sbrk_aligned>
 8008506:	3001      	adds	r0, #1
 8008508:	d03f      	beq.n	800858a <_malloc_r+0xea>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	19db      	adds	r3, r3, r7
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	9b00      	ldr	r3, [sp, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d040      	beq.n	800859a <_malloc_r+0xfa>
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	42a2      	cmp	r2, r4
 800851c:	d133      	bne.n	8008586 <_malloc_r+0xe6>
 800851e:	2200      	movs	r2, #0
 8008520:	605a      	str	r2, [r3, #4]
 8008522:	e014      	b.n	800854e <_malloc_r+0xae>
 8008524:	2b00      	cmp	r3, #0
 8008526:	dac5      	bge.n	80084b4 <_malloc_r+0x14>
 8008528:	230c      	movs	r3, #12
 800852a:	2500      	movs	r5, #0
 800852c:	6033      	str	r3, [r6, #0]
 800852e:	0028      	movs	r0, r5
 8008530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008532:	6821      	ldr	r1, [r4, #0]
 8008534:	1bc9      	subs	r1, r1, r7
 8008536:	d420      	bmi.n	800857a <_malloc_r+0xda>
 8008538:	290b      	cmp	r1, #11
 800853a:	d918      	bls.n	800856e <_malloc_r+0xce>
 800853c:	19e2      	adds	r2, r4, r7
 800853e:	6027      	str	r7, [r4, #0]
 8008540:	42a3      	cmp	r3, r4
 8008542:	d112      	bne.n	800856a <_malloc_r+0xca>
 8008544:	9b00      	ldr	r3, [sp, #0]
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	6863      	ldr	r3, [r4, #4]
 800854a:	6011      	str	r1, [r2, #0]
 800854c:	6053      	str	r3, [r2, #4]
 800854e:	0030      	movs	r0, r6
 8008550:	0025      	movs	r5, r4
 8008552:	f000 f82f 	bl	80085b4 <__malloc_unlock>
 8008556:	2207      	movs	r2, #7
 8008558:	350b      	adds	r5, #11
 800855a:	1d23      	adds	r3, r4, #4
 800855c:	4395      	bics	r5, r2
 800855e:	1aea      	subs	r2, r5, r3
 8008560:	429d      	cmp	r5, r3
 8008562:	d0e4      	beq.n	800852e <_malloc_r+0x8e>
 8008564:	1b5b      	subs	r3, r3, r5
 8008566:	50a3      	str	r3, [r4, r2]
 8008568:	e7e1      	b.n	800852e <_malloc_r+0x8e>
 800856a:	605a      	str	r2, [r3, #4]
 800856c:	e7ec      	b.n	8008548 <_malloc_r+0xa8>
 800856e:	6862      	ldr	r2, [r4, #4]
 8008570:	42a3      	cmp	r3, r4
 8008572:	d1d5      	bne.n	8008520 <_malloc_r+0x80>
 8008574:	9b00      	ldr	r3, [sp, #0]
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	e7e9      	b.n	800854e <_malloc_r+0xae>
 800857a:	0023      	movs	r3, r4
 800857c:	6864      	ldr	r4, [r4, #4]
 800857e:	e7a2      	b.n	80084c6 <_malloc_r+0x26>
 8008580:	002c      	movs	r4, r5
 8008582:	686d      	ldr	r5, [r5, #4]
 8008584:	e7ab      	b.n	80084de <_malloc_r+0x3e>
 8008586:	0013      	movs	r3, r2
 8008588:	e7c4      	b.n	8008514 <_malloc_r+0x74>
 800858a:	230c      	movs	r3, #12
 800858c:	0030      	movs	r0, r6
 800858e:	6033      	str	r3, [r6, #0]
 8008590:	f000 f810 	bl	80085b4 <__malloc_unlock>
 8008594:	e7cb      	b.n	800852e <_malloc_r+0x8e>
 8008596:	6027      	str	r7, [r4, #0]
 8008598:	e7d9      	b.n	800854e <_malloc_r+0xae>
 800859a:	605b      	str	r3, [r3, #4]
 800859c:	deff      	udf	#255	; 0xff
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	20000548 	.word	0x20000548

080085a4 <__malloc_lock>:
 80085a4:	b510      	push	{r4, lr}
 80085a6:	4802      	ldr	r0, [pc, #8]	; (80085b0 <__malloc_lock+0xc>)
 80085a8:	f7ff ff0c 	bl	80083c4 <__retarget_lock_acquire_recursive>
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	46c0      	nop			; (mov r8, r8)
 80085b0:	20000544 	.word	0x20000544

080085b4 <__malloc_unlock>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4802      	ldr	r0, [pc, #8]	; (80085c0 <__malloc_unlock+0xc>)
 80085b8:	f7ff ff05 	bl	80083c6 <__retarget_lock_release_recursive>
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	20000544 	.word	0x20000544

080085c4 <__ssputs_r>:
 80085c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c6:	b085      	sub	sp, #20
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	9203      	str	r2, [sp, #12]
 80085cc:	688e      	ldr	r6, [r1, #8]
 80085ce:	9a01      	ldr	r2, [sp, #4]
 80085d0:	0007      	movs	r7, r0
 80085d2:	000c      	movs	r4, r1
 80085d4:	680b      	ldr	r3, [r1, #0]
 80085d6:	4296      	cmp	r6, r2
 80085d8:	d831      	bhi.n	800863e <__ssputs_r+0x7a>
 80085da:	898a      	ldrh	r2, [r1, #12]
 80085dc:	2190      	movs	r1, #144	; 0x90
 80085de:	00c9      	lsls	r1, r1, #3
 80085e0:	420a      	tst	r2, r1
 80085e2:	d029      	beq.n	8008638 <__ssputs_r+0x74>
 80085e4:	2003      	movs	r0, #3
 80085e6:	6921      	ldr	r1, [r4, #16]
 80085e8:	1a5b      	subs	r3, r3, r1
 80085ea:	9302      	str	r3, [sp, #8]
 80085ec:	6963      	ldr	r3, [r4, #20]
 80085ee:	4343      	muls	r3, r0
 80085f0:	0fdd      	lsrs	r5, r3, #31
 80085f2:	18ed      	adds	r5, r5, r3
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	9802      	ldr	r0, [sp, #8]
 80085f8:	3301      	adds	r3, #1
 80085fa:	181b      	adds	r3, r3, r0
 80085fc:	106d      	asrs	r5, r5, #1
 80085fe:	42ab      	cmp	r3, r5
 8008600:	d900      	bls.n	8008604 <__ssputs_r+0x40>
 8008602:	001d      	movs	r5, r3
 8008604:	0552      	lsls	r2, r2, #21
 8008606:	d529      	bpl.n	800865c <__ssputs_r+0x98>
 8008608:	0029      	movs	r1, r5
 800860a:	0038      	movs	r0, r7
 800860c:	f7ff ff48 	bl	80084a0 <_malloc_r>
 8008610:	1e06      	subs	r6, r0, #0
 8008612:	d02d      	beq.n	8008670 <__ssputs_r+0xac>
 8008614:	9a02      	ldr	r2, [sp, #8]
 8008616:	6921      	ldr	r1, [r4, #16]
 8008618:	f000 fae7 	bl	8008bea <memcpy>
 800861c:	89a2      	ldrh	r2, [r4, #12]
 800861e:	4b19      	ldr	r3, [pc, #100]	; (8008684 <__ssputs_r+0xc0>)
 8008620:	401a      	ands	r2, r3
 8008622:	2380      	movs	r3, #128	; 0x80
 8008624:	4313      	orrs	r3, r2
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	9b02      	ldr	r3, [sp, #8]
 800862a:	6126      	str	r6, [r4, #16]
 800862c:	18f6      	adds	r6, r6, r3
 800862e:	6026      	str	r6, [r4, #0]
 8008630:	6165      	str	r5, [r4, #20]
 8008632:	9e01      	ldr	r6, [sp, #4]
 8008634:	1aed      	subs	r5, r5, r3
 8008636:	60a5      	str	r5, [r4, #8]
 8008638:	9b01      	ldr	r3, [sp, #4]
 800863a:	429e      	cmp	r6, r3
 800863c:	d900      	bls.n	8008640 <__ssputs_r+0x7c>
 800863e:	9e01      	ldr	r6, [sp, #4]
 8008640:	0032      	movs	r2, r6
 8008642:	9903      	ldr	r1, [sp, #12]
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	f000 fa9f 	bl	8008b88 <memmove>
 800864a:	2000      	movs	r0, #0
 800864c:	68a3      	ldr	r3, [r4, #8]
 800864e:	1b9b      	subs	r3, r3, r6
 8008650:	60a3      	str	r3, [r4, #8]
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	199b      	adds	r3, r3, r6
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	b005      	add	sp, #20
 800865a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800865c:	002a      	movs	r2, r5
 800865e:	0038      	movs	r0, r7
 8008660:	f000 facc 	bl	8008bfc <_realloc_r>
 8008664:	1e06      	subs	r6, r0, #0
 8008666:	d1df      	bne.n	8008628 <__ssputs_r+0x64>
 8008668:	0038      	movs	r0, r7
 800866a:	6921      	ldr	r1, [r4, #16]
 800866c:	f7ff feac 	bl	80083c8 <_free_r>
 8008670:	230c      	movs	r3, #12
 8008672:	2001      	movs	r0, #1
 8008674:	603b      	str	r3, [r7, #0]
 8008676:	89a2      	ldrh	r2, [r4, #12]
 8008678:	3334      	adds	r3, #52	; 0x34
 800867a:	4313      	orrs	r3, r2
 800867c:	81a3      	strh	r3, [r4, #12]
 800867e:	4240      	negs	r0, r0
 8008680:	e7ea      	b.n	8008658 <__ssputs_r+0x94>
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	fffffb7f 	.word	0xfffffb7f

08008688 <_svfiprintf_r>:
 8008688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800868a:	b0a1      	sub	sp, #132	; 0x84
 800868c:	9003      	str	r0, [sp, #12]
 800868e:	001d      	movs	r5, r3
 8008690:	898b      	ldrh	r3, [r1, #12]
 8008692:	000f      	movs	r7, r1
 8008694:	0016      	movs	r6, r2
 8008696:	061b      	lsls	r3, r3, #24
 8008698:	d511      	bpl.n	80086be <_svfiprintf_r+0x36>
 800869a:	690b      	ldr	r3, [r1, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10e      	bne.n	80086be <_svfiprintf_r+0x36>
 80086a0:	2140      	movs	r1, #64	; 0x40
 80086a2:	f7ff fefd 	bl	80084a0 <_malloc_r>
 80086a6:	6038      	str	r0, [r7, #0]
 80086a8:	6138      	str	r0, [r7, #16]
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d105      	bne.n	80086ba <_svfiprintf_r+0x32>
 80086ae:	230c      	movs	r3, #12
 80086b0:	9a03      	ldr	r2, [sp, #12]
 80086b2:	3801      	subs	r0, #1
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	b021      	add	sp, #132	; 0x84
 80086b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086ba:	2340      	movs	r3, #64	; 0x40
 80086bc:	617b      	str	r3, [r7, #20]
 80086be:	2300      	movs	r3, #0
 80086c0:	ac08      	add	r4, sp, #32
 80086c2:	6163      	str	r3, [r4, #20]
 80086c4:	3320      	adds	r3, #32
 80086c6:	7663      	strb	r3, [r4, #25]
 80086c8:	3310      	adds	r3, #16
 80086ca:	76a3      	strb	r3, [r4, #26]
 80086cc:	9507      	str	r5, [sp, #28]
 80086ce:	0035      	movs	r5, r6
 80086d0:	782b      	ldrb	r3, [r5, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <_svfiprintf_r+0x52>
 80086d6:	2b25      	cmp	r3, #37	; 0x25
 80086d8:	d148      	bne.n	800876c <_svfiprintf_r+0xe4>
 80086da:	1bab      	subs	r3, r5, r6
 80086dc:	9305      	str	r3, [sp, #20]
 80086de:	42b5      	cmp	r5, r6
 80086e0:	d00b      	beq.n	80086fa <_svfiprintf_r+0x72>
 80086e2:	0032      	movs	r2, r6
 80086e4:	0039      	movs	r1, r7
 80086e6:	9803      	ldr	r0, [sp, #12]
 80086e8:	f7ff ff6c 	bl	80085c4 <__ssputs_r>
 80086ec:	3001      	adds	r0, #1
 80086ee:	d100      	bne.n	80086f2 <_svfiprintf_r+0x6a>
 80086f0:	e0af      	b.n	8008852 <_svfiprintf_r+0x1ca>
 80086f2:	6963      	ldr	r3, [r4, #20]
 80086f4:	9a05      	ldr	r2, [sp, #20]
 80086f6:	189b      	adds	r3, r3, r2
 80086f8:	6163      	str	r3, [r4, #20]
 80086fa:	782b      	ldrb	r3, [r5, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d100      	bne.n	8008702 <_svfiprintf_r+0x7a>
 8008700:	e0a7      	b.n	8008852 <_svfiprintf_r+0x1ca>
 8008702:	2201      	movs	r2, #1
 8008704:	2300      	movs	r3, #0
 8008706:	4252      	negs	r2, r2
 8008708:	6062      	str	r2, [r4, #4]
 800870a:	a904      	add	r1, sp, #16
 800870c:	3254      	adds	r2, #84	; 0x54
 800870e:	1852      	adds	r2, r2, r1
 8008710:	1c6e      	adds	r6, r5, #1
 8008712:	6023      	str	r3, [r4, #0]
 8008714:	60e3      	str	r3, [r4, #12]
 8008716:	60a3      	str	r3, [r4, #8]
 8008718:	7013      	strb	r3, [r2, #0]
 800871a:	65a3      	str	r3, [r4, #88]	; 0x58
 800871c:	4b55      	ldr	r3, [pc, #340]	; (8008874 <_svfiprintf_r+0x1ec>)
 800871e:	2205      	movs	r2, #5
 8008720:	0018      	movs	r0, r3
 8008722:	7831      	ldrb	r1, [r6, #0]
 8008724:	9305      	str	r3, [sp, #20]
 8008726:	f000 fa55 	bl	8008bd4 <memchr>
 800872a:	1c75      	adds	r5, r6, #1
 800872c:	2800      	cmp	r0, #0
 800872e:	d11f      	bne.n	8008770 <_svfiprintf_r+0xe8>
 8008730:	6822      	ldr	r2, [r4, #0]
 8008732:	06d3      	lsls	r3, r2, #27
 8008734:	d504      	bpl.n	8008740 <_svfiprintf_r+0xb8>
 8008736:	2353      	movs	r3, #83	; 0x53
 8008738:	a904      	add	r1, sp, #16
 800873a:	185b      	adds	r3, r3, r1
 800873c:	2120      	movs	r1, #32
 800873e:	7019      	strb	r1, [r3, #0]
 8008740:	0713      	lsls	r3, r2, #28
 8008742:	d504      	bpl.n	800874e <_svfiprintf_r+0xc6>
 8008744:	2353      	movs	r3, #83	; 0x53
 8008746:	a904      	add	r1, sp, #16
 8008748:	185b      	adds	r3, r3, r1
 800874a:	212b      	movs	r1, #43	; 0x2b
 800874c:	7019      	strb	r1, [r3, #0]
 800874e:	7833      	ldrb	r3, [r6, #0]
 8008750:	2b2a      	cmp	r3, #42	; 0x2a
 8008752:	d016      	beq.n	8008782 <_svfiprintf_r+0xfa>
 8008754:	0035      	movs	r5, r6
 8008756:	2100      	movs	r1, #0
 8008758:	200a      	movs	r0, #10
 800875a:	68e3      	ldr	r3, [r4, #12]
 800875c:	782a      	ldrb	r2, [r5, #0]
 800875e:	1c6e      	adds	r6, r5, #1
 8008760:	3a30      	subs	r2, #48	; 0x30
 8008762:	2a09      	cmp	r2, #9
 8008764:	d94e      	bls.n	8008804 <_svfiprintf_r+0x17c>
 8008766:	2900      	cmp	r1, #0
 8008768:	d111      	bne.n	800878e <_svfiprintf_r+0x106>
 800876a:	e017      	b.n	800879c <_svfiprintf_r+0x114>
 800876c:	3501      	adds	r5, #1
 800876e:	e7af      	b.n	80086d0 <_svfiprintf_r+0x48>
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	1ac0      	subs	r0, r0, r3
 8008776:	2301      	movs	r3, #1
 8008778:	4083      	lsls	r3, r0
 800877a:	4313      	orrs	r3, r2
 800877c:	002e      	movs	r6, r5
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	e7cc      	b.n	800871c <_svfiprintf_r+0x94>
 8008782:	9b07      	ldr	r3, [sp, #28]
 8008784:	1d19      	adds	r1, r3, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	9107      	str	r1, [sp, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	db01      	blt.n	8008792 <_svfiprintf_r+0x10a>
 800878e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008790:	e004      	b.n	800879c <_svfiprintf_r+0x114>
 8008792:	425b      	negs	r3, r3
 8008794:	60e3      	str	r3, [r4, #12]
 8008796:	2302      	movs	r3, #2
 8008798:	4313      	orrs	r3, r2
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	782b      	ldrb	r3, [r5, #0]
 800879e:	2b2e      	cmp	r3, #46	; 0x2e
 80087a0:	d10a      	bne.n	80087b8 <_svfiprintf_r+0x130>
 80087a2:	786b      	ldrb	r3, [r5, #1]
 80087a4:	2b2a      	cmp	r3, #42	; 0x2a
 80087a6:	d135      	bne.n	8008814 <_svfiprintf_r+0x18c>
 80087a8:	9b07      	ldr	r3, [sp, #28]
 80087aa:	3502      	adds	r5, #2
 80087ac:	1d1a      	adds	r2, r3, #4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	9207      	str	r2, [sp, #28]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	db2b      	blt.n	800880e <_svfiprintf_r+0x186>
 80087b6:	9309      	str	r3, [sp, #36]	; 0x24
 80087b8:	4e2f      	ldr	r6, [pc, #188]	; (8008878 <_svfiprintf_r+0x1f0>)
 80087ba:	2203      	movs	r2, #3
 80087bc:	0030      	movs	r0, r6
 80087be:	7829      	ldrb	r1, [r5, #0]
 80087c0:	f000 fa08 	bl	8008bd4 <memchr>
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d006      	beq.n	80087d6 <_svfiprintf_r+0x14e>
 80087c8:	2340      	movs	r3, #64	; 0x40
 80087ca:	1b80      	subs	r0, r0, r6
 80087cc:	4083      	lsls	r3, r0
 80087ce:	6822      	ldr	r2, [r4, #0]
 80087d0:	3501      	adds	r5, #1
 80087d2:	4313      	orrs	r3, r2
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	7829      	ldrb	r1, [r5, #0]
 80087d8:	2206      	movs	r2, #6
 80087da:	4828      	ldr	r0, [pc, #160]	; (800887c <_svfiprintf_r+0x1f4>)
 80087dc:	1c6e      	adds	r6, r5, #1
 80087de:	7621      	strb	r1, [r4, #24]
 80087e0:	f000 f9f8 	bl	8008bd4 <memchr>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d03c      	beq.n	8008862 <_svfiprintf_r+0x1da>
 80087e8:	4b25      	ldr	r3, [pc, #148]	; (8008880 <_svfiprintf_r+0x1f8>)
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d125      	bne.n	800883a <_svfiprintf_r+0x1b2>
 80087ee:	2207      	movs	r2, #7
 80087f0:	9b07      	ldr	r3, [sp, #28]
 80087f2:	3307      	adds	r3, #7
 80087f4:	4393      	bics	r3, r2
 80087f6:	3308      	adds	r3, #8
 80087f8:	9307      	str	r3, [sp, #28]
 80087fa:	6963      	ldr	r3, [r4, #20]
 80087fc:	9a04      	ldr	r2, [sp, #16]
 80087fe:	189b      	adds	r3, r3, r2
 8008800:	6163      	str	r3, [r4, #20]
 8008802:	e764      	b.n	80086ce <_svfiprintf_r+0x46>
 8008804:	4343      	muls	r3, r0
 8008806:	0035      	movs	r5, r6
 8008808:	2101      	movs	r1, #1
 800880a:	189b      	adds	r3, r3, r2
 800880c:	e7a6      	b.n	800875c <_svfiprintf_r+0xd4>
 800880e:	2301      	movs	r3, #1
 8008810:	425b      	negs	r3, r3
 8008812:	e7d0      	b.n	80087b6 <_svfiprintf_r+0x12e>
 8008814:	2300      	movs	r3, #0
 8008816:	200a      	movs	r0, #10
 8008818:	001a      	movs	r2, r3
 800881a:	3501      	adds	r5, #1
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	7829      	ldrb	r1, [r5, #0]
 8008820:	1c6e      	adds	r6, r5, #1
 8008822:	3930      	subs	r1, #48	; 0x30
 8008824:	2909      	cmp	r1, #9
 8008826:	d903      	bls.n	8008830 <_svfiprintf_r+0x1a8>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d0c5      	beq.n	80087b8 <_svfiprintf_r+0x130>
 800882c:	9209      	str	r2, [sp, #36]	; 0x24
 800882e:	e7c3      	b.n	80087b8 <_svfiprintf_r+0x130>
 8008830:	4342      	muls	r2, r0
 8008832:	0035      	movs	r5, r6
 8008834:	2301      	movs	r3, #1
 8008836:	1852      	adds	r2, r2, r1
 8008838:	e7f1      	b.n	800881e <_svfiprintf_r+0x196>
 800883a:	aa07      	add	r2, sp, #28
 800883c:	9200      	str	r2, [sp, #0]
 800883e:	0021      	movs	r1, r4
 8008840:	003a      	movs	r2, r7
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <_svfiprintf_r+0x1fc>)
 8008844:	9803      	ldr	r0, [sp, #12]
 8008846:	e000      	b.n	800884a <_svfiprintf_r+0x1c2>
 8008848:	bf00      	nop
 800884a:	9004      	str	r0, [sp, #16]
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	3301      	adds	r3, #1
 8008850:	d1d3      	bne.n	80087fa <_svfiprintf_r+0x172>
 8008852:	89bb      	ldrh	r3, [r7, #12]
 8008854:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008856:	065b      	lsls	r3, r3, #25
 8008858:	d400      	bmi.n	800885c <_svfiprintf_r+0x1d4>
 800885a:	e72c      	b.n	80086b6 <_svfiprintf_r+0x2e>
 800885c:	2001      	movs	r0, #1
 800885e:	4240      	negs	r0, r0
 8008860:	e729      	b.n	80086b6 <_svfiprintf_r+0x2e>
 8008862:	aa07      	add	r2, sp, #28
 8008864:	9200      	str	r2, [sp, #0]
 8008866:	0021      	movs	r1, r4
 8008868:	003a      	movs	r2, r7
 800886a:	4b06      	ldr	r3, [pc, #24]	; (8008884 <_svfiprintf_r+0x1fc>)
 800886c:	9803      	ldr	r0, [sp, #12]
 800886e:	f000 f87b 	bl	8008968 <_printf_i>
 8008872:	e7ea      	b.n	800884a <_svfiprintf_r+0x1c2>
 8008874:	08008f20 	.word	0x08008f20
 8008878:	08008f26 	.word	0x08008f26
 800887c:	08008f2a 	.word	0x08008f2a
 8008880:	00000000 	.word	0x00000000
 8008884:	080085c5 	.word	0x080085c5

08008888 <_printf_common>:
 8008888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800888a:	0016      	movs	r6, r2
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	688a      	ldr	r2, [r1, #8]
 8008890:	690b      	ldr	r3, [r1, #16]
 8008892:	000c      	movs	r4, r1
 8008894:	9000      	str	r0, [sp, #0]
 8008896:	4293      	cmp	r3, r2
 8008898:	da00      	bge.n	800889c <_printf_common+0x14>
 800889a:	0013      	movs	r3, r2
 800889c:	0022      	movs	r2, r4
 800889e:	6033      	str	r3, [r6, #0]
 80088a0:	3243      	adds	r2, #67	; 0x43
 80088a2:	7812      	ldrb	r2, [r2, #0]
 80088a4:	2a00      	cmp	r2, #0
 80088a6:	d001      	beq.n	80088ac <_printf_common+0x24>
 80088a8:	3301      	adds	r3, #1
 80088aa:	6033      	str	r3, [r6, #0]
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	069b      	lsls	r3, r3, #26
 80088b0:	d502      	bpl.n	80088b8 <_printf_common+0x30>
 80088b2:	6833      	ldr	r3, [r6, #0]
 80088b4:	3302      	adds	r3, #2
 80088b6:	6033      	str	r3, [r6, #0]
 80088b8:	6822      	ldr	r2, [r4, #0]
 80088ba:	2306      	movs	r3, #6
 80088bc:	0015      	movs	r5, r2
 80088be:	401d      	ands	r5, r3
 80088c0:	421a      	tst	r2, r3
 80088c2:	d027      	beq.n	8008914 <_printf_common+0x8c>
 80088c4:	0023      	movs	r3, r4
 80088c6:	3343      	adds	r3, #67	; 0x43
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	1e5a      	subs	r2, r3, #1
 80088cc:	4193      	sbcs	r3, r2
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	0692      	lsls	r2, r2, #26
 80088d2:	d430      	bmi.n	8008936 <_printf_common+0xae>
 80088d4:	0022      	movs	r2, r4
 80088d6:	9901      	ldr	r1, [sp, #4]
 80088d8:	9800      	ldr	r0, [sp, #0]
 80088da:	9d08      	ldr	r5, [sp, #32]
 80088dc:	3243      	adds	r2, #67	; 0x43
 80088de:	47a8      	blx	r5
 80088e0:	3001      	adds	r0, #1
 80088e2:	d025      	beq.n	8008930 <_printf_common+0xa8>
 80088e4:	2206      	movs	r2, #6
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	2500      	movs	r5, #0
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d105      	bne.n	80088fc <_printf_common+0x74>
 80088f0:	6833      	ldr	r3, [r6, #0]
 80088f2:	68e5      	ldr	r5, [r4, #12]
 80088f4:	1aed      	subs	r5, r5, r3
 80088f6:	43eb      	mvns	r3, r5
 80088f8:	17db      	asrs	r3, r3, #31
 80088fa:	401d      	ands	r5, r3
 80088fc:	68a3      	ldr	r3, [r4, #8]
 80088fe:	6922      	ldr	r2, [r4, #16]
 8008900:	4293      	cmp	r3, r2
 8008902:	dd01      	ble.n	8008908 <_printf_common+0x80>
 8008904:	1a9b      	subs	r3, r3, r2
 8008906:	18ed      	adds	r5, r5, r3
 8008908:	2600      	movs	r6, #0
 800890a:	42b5      	cmp	r5, r6
 800890c:	d120      	bne.n	8008950 <_printf_common+0xc8>
 800890e:	2000      	movs	r0, #0
 8008910:	e010      	b.n	8008934 <_printf_common+0xac>
 8008912:	3501      	adds	r5, #1
 8008914:	68e3      	ldr	r3, [r4, #12]
 8008916:	6832      	ldr	r2, [r6, #0]
 8008918:	1a9b      	subs	r3, r3, r2
 800891a:	42ab      	cmp	r3, r5
 800891c:	ddd2      	ble.n	80088c4 <_printf_common+0x3c>
 800891e:	0022      	movs	r2, r4
 8008920:	2301      	movs	r3, #1
 8008922:	9901      	ldr	r1, [sp, #4]
 8008924:	9800      	ldr	r0, [sp, #0]
 8008926:	9f08      	ldr	r7, [sp, #32]
 8008928:	3219      	adds	r2, #25
 800892a:	47b8      	blx	r7
 800892c:	3001      	adds	r0, #1
 800892e:	d1f0      	bne.n	8008912 <_printf_common+0x8a>
 8008930:	2001      	movs	r0, #1
 8008932:	4240      	negs	r0, r0
 8008934:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008936:	2030      	movs	r0, #48	; 0x30
 8008938:	18e1      	adds	r1, r4, r3
 800893a:	3143      	adds	r1, #67	; 0x43
 800893c:	7008      	strb	r0, [r1, #0]
 800893e:	0021      	movs	r1, r4
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	3145      	adds	r1, #69	; 0x45
 8008944:	7809      	ldrb	r1, [r1, #0]
 8008946:	18a2      	adds	r2, r4, r2
 8008948:	3243      	adds	r2, #67	; 0x43
 800894a:	3302      	adds	r3, #2
 800894c:	7011      	strb	r1, [r2, #0]
 800894e:	e7c1      	b.n	80088d4 <_printf_common+0x4c>
 8008950:	0022      	movs	r2, r4
 8008952:	2301      	movs	r3, #1
 8008954:	9901      	ldr	r1, [sp, #4]
 8008956:	9800      	ldr	r0, [sp, #0]
 8008958:	9f08      	ldr	r7, [sp, #32]
 800895a:	321a      	adds	r2, #26
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	d0e6      	beq.n	8008930 <_printf_common+0xa8>
 8008962:	3601      	adds	r6, #1
 8008964:	e7d1      	b.n	800890a <_printf_common+0x82>
	...

08008968 <_printf_i>:
 8008968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896a:	b08b      	sub	sp, #44	; 0x2c
 800896c:	9206      	str	r2, [sp, #24]
 800896e:	000a      	movs	r2, r1
 8008970:	3243      	adds	r2, #67	; 0x43
 8008972:	9307      	str	r3, [sp, #28]
 8008974:	9005      	str	r0, [sp, #20]
 8008976:	9204      	str	r2, [sp, #16]
 8008978:	7e0a      	ldrb	r2, [r1, #24]
 800897a:	000c      	movs	r4, r1
 800897c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800897e:	2a78      	cmp	r2, #120	; 0x78
 8008980:	d809      	bhi.n	8008996 <_printf_i+0x2e>
 8008982:	2a62      	cmp	r2, #98	; 0x62
 8008984:	d80b      	bhi.n	800899e <_printf_i+0x36>
 8008986:	2a00      	cmp	r2, #0
 8008988:	d100      	bne.n	800898c <_printf_i+0x24>
 800898a:	e0be      	b.n	8008b0a <_printf_i+0x1a2>
 800898c:	497c      	ldr	r1, [pc, #496]	; (8008b80 <_printf_i+0x218>)
 800898e:	9103      	str	r1, [sp, #12]
 8008990:	2a58      	cmp	r2, #88	; 0x58
 8008992:	d100      	bne.n	8008996 <_printf_i+0x2e>
 8008994:	e093      	b.n	8008abe <_printf_i+0x156>
 8008996:	0026      	movs	r6, r4
 8008998:	3642      	adds	r6, #66	; 0x42
 800899a:	7032      	strb	r2, [r6, #0]
 800899c:	e022      	b.n	80089e4 <_printf_i+0x7c>
 800899e:	0010      	movs	r0, r2
 80089a0:	3863      	subs	r0, #99	; 0x63
 80089a2:	2815      	cmp	r0, #21
 80089a4:	d8f7      	bhi.n	8008996 <_printf_i+0x2e>
 80089a6:	f7f7 fbbf 	bl	8000128 <__gnu_thumb1_case_shi>
 80089aa:	0016      	.short	0x0016
 80089ac:	fff6001f 	.word	0xfff6001f
 80089b0:	fff6fff6 	.word	0xfff6fff6
 80089b4:	001ffff6 	.word	0x001ffff6
 80089b8:	fff6fff6 	.word	0xfff6fff6
 80089bc:	fff6fff6 	.word	0xfff6fff6
 80089c0:	003600a3 	.word	0x003600a3
 80089c4:	fff60083 	.word	0xfff60083
 80089c8:	00b4fff6 	.word	0x00b4fff6
 80089cc:	0036fff6 	.word	0x0036fff6
 80089d0:	fff6fff6 	.word	0xfff6fff6
 80089d4:	0087      	.short	0x0087
 80089d6:	0026      	movs	r6, r4
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	3642      	adds	r6, #66	; 0x42
 80089dc:	1d11      	adds	r1, r2, #4
 80089de:	6019      	str	r1, [r3, #0]
 80089e0:	6813      	ldr	r3, [r2, #0]
 80089e2:	7033      	strb	r3, [r6, #0]
 80089e4:	2301      	movs	r3, #1
 80089e6:	e0a2      	b.n	8008b2e <_printf_i+0x1c6>
 80089e8:	6818      	ldr	r0, [r3, #0]
 80089ea:	6809      	ldr	r1, [r1, #0]
 80089ec:	1d02      	adds	r2, r0, #4
 80089ee:	060d      	lsls	r5, r1, #24
 80089f0:	d50b      	bpl.n	8008a0a <_printf_i+0xa2>
 80089f2:	6805      	ldr	r5, [r0, #0]
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	2d00      	cmp	r5, #0
 80089f8:	da03      	bge.n	8008a02 <_printf_i+0x9a>
 80089fa:	232d      	movs	r3, #45	; 0x2d
 80089fc:	9a04      	ldr	r2, [sp, #16]
 80089fe:	426d      	negs	r5, r5
 8008a00:	7013      	strb	r3, [r2, #0]
 8008a02:	4b5f      	ldr	r3, [pc, #380]	; (8008b80 <_printf_i+0x218>)
 8008a04:	270a      	movs	r7, #10
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	e01b      	b.n	8008a42 <_printf_i+0xda>
 8008a0a:	6805      	ldr	r5, [r0, #0]
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	0649      	lsls	r1, r1, #25
 8008a10:	d5f1      	bpl.n	80089f6 <_printf_i+0x8e>
 8008a12:	b22d      	sxth	r5, r5
 8008a14:	e7ef      	b.n	80089f6 <_printf_i+0x8e>
 8008a16:	680d      	ldr	r5, [r1, #0]
 8008a18:	6819      	ldr	r1, [r3, #0]
 8008a1a:	1d08      	adds	r0, r1, #4
 8008a1c:	6018      	str	r0, [r3, #0]
 8008a1e:	062e      	lsls	r6, r5, #24
 8008a20:	d501      	bpl.n	8008a26 <_printf_i+0xbe>
 8008a22:	680d      	ldr	r5, [r1, #0]
 8008a24:	e003      	b.n	8008a2e <_printf_i+0xc6>
 8008a26:	066d      	lsls	r5, r5, #25
 8008a28:	d5fb      	bpl.n	8008a22 <_printf_i+0xba>
 8008a2a:	680d      	ldr	r5, [r1, #0]
 8008a2c:	b2ad      	uxth	r5, r5
 8008a2e:	4b54      	ldr	r3, [pc, #336]	; (8008b80 <_printf_i+0x218>)
 8008a30:	2708      	movs	r7, #8
 8008a32:	9303      	str	r3, [sp, #12]
 8008a34:	2a6f      	cmp	r2, #111	; 0x6f
 8008a36:	d000      	beq.n	8008a3a <_printf_i+0xd2>
 8008a38:	3702      	adds	r7, #2
 8008a3a:	0023      	movs	r3, r4
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	3343      	adds	r3, #67	; 0x43
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	60a3      	str	r3, [r4, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	db03      	blt.n	8008a52 <_printf_i+0xea>
 8008a4a:	2104      	movs	r1, #4
 8008a4c:	6822      	ldr	r2, [r4, #0]
 8008a4e:	438a      	bics	r2, r1
 8008a50:	6022      	str	r2, [r4, #0]
 8008a52:	2d00      	cmp	r5, #0
 8008a54:	d102      	bne.n	8008a5c <_printf_i+0xf4>
 8008a56:	9e04      	ldr	r6, [sp, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00c      	beq.n	8008a76 <_printf_i+0x10e>
 8008a5c:	9e04      	ldr	r6, [sp, #16]
 8008a5e:	0028      	movs	r0, r5
 8008a60:	0039      	movs	r1, r7
 8008a62:	f7f7 fbf1 	bl	8000248 <__aeabi_uidivmod>
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	3e01      	subs	r6, #1
 8008a6a:	5c5b      	ldrb	r3, [r3, r1]
 8008a6c:	7033      	strb	r3, [r6, #0]
 8008a6e:	002b      	movs	r3, r5
 8008a70:	0005      	movs	r5, r0
 8008a72:	429f      	cmp	r7, r3
 8008a74:	d9f3      	bls.n	8008a5e <_printf_i+0xf6>
 8008a76:	2f08      	cmp	r7, #8
 8008a78:	d109      	bne.n	8008a8e <_printf_i+0x126>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	07db      	lsls	r3, r3, #31
 8008a7e:	d506      	bpl.n	8008a8e <_printf_i+0x126>
 8008a80:	6862      	ldr	r2, [r4, #4]
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	dc02      	bgt.n	8008a8e <_printf_i+0x126>
 8008a88:	2330      	movs	r3, #48	; 0x30
 8008a8a:	3e01      	subs	r6, #1
 8008a8c:	7033      	strb	r3, [r6, #0]
 8008a8e:	9b04      	ldr	r3, [sp, #16]
 8008a90:	1b9b      	subs	r3, r3, r6
 8008a92:	6123      	str	r3, [r4, #16]
 8008a94:	9b07      	ldr	r3, [sp, #28]
 8008a96:	0021      	movs	r1, r4
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	9805      	ldr	r0, [sp, #20]
 8008a9c:	9b06      	ldr	r3, [sp, #24]
 8008a9e:	aa09      	add	r2, sp, #36	; 0x24
 8008aa0:	f7ff fef2 	bl	8008888 <_printf_common>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d147      	bne.n	8008b38 <_printf_i+0x1d0>
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	4240      	negs	r0, r0
 8008aac:	b00b      	add	sp, #44	; 0x2c
 8008aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	6809      	ldr	r1, [r1, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	6022      	str	r2, [r4, #0]
 8008ab8:	2278      	movs	r2, #120	; 0x78
 8008aba:	4932      	ldr	r1, [pc, #200]	; (8008b84 <_printf_i+0x21c>)
 8008abc:	9103      	str	r1, [sp, #12]
 8008abe:	0021      	movs	r1, r4
 8008ac0:	3145      	adds	r1, #69	; 0x45
 8008ac2:	700a      	strb	r2, [r1, #0]
 8008ac4:	6819      	ldr	r1, [r3, #0]
 8008ac6:	6822      	ldr	r2, [r4, #0]
 8008ac8:	c920      	ldmia	r1!, {r5}
 8008aca:	0610      	lsls	r0, r2, #24
 8008acc:	d402      	bmi.n	8008ad4 <_printf_i+0x16c>
 8008ace:	0650      	lsls	r0, r2, #25
 8008ad0:	d500      	bpl.n	8008ad4 <_printf_i+0x16c>
 8008ad2:	b2ad      	uxth	r5, r5
 8008ad4:	6019      	str	r1, [r3, #0]
 8008ad6:	07d3      	lsls	r3, r2, #31
 8008ad8:	d502      	bpl.n	8008ae0 <_printf_i+0x178>
 8008ada:	2320      	movs	r3, #32
 8008adc:	4313      	orrs	r3, r2
 8008ade:	6023      	str	r3, [r4, #0]
 8008ae0:	2710      	movs	r7, #16
 8008ae2:	2d00      	cmp	r5, #0
 8008ae4:	d1a9      	bne.n	8008a3a <_printf_i+0xd2>
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	4393      	bics	r3, r2
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	e7a4      	b.n	8008a3a <_printf_i+0xd2>
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	680d      	ldr	r5, [r1, #0]
 8008af4:	1d10      	adds	r0, r2, #4
 8008af6:	6949      	ldr	r1, [r1, #20]
 8008af8:	6018      	str	r0, [r3, #0]
 8008afa:	6813      	ldr	r3, [r2, #0]
 8008afc:	062e      	lsls	r6, r5, #24
 8008afe:	d501      	bpl.n	8008b04 <_printf_i+0x19c>
 8008b00:	6019      	str	r1, [r3, #0]
 8008b02:	e002      	b.n	8008b0a <_printf_i+0x1a2>
 8008b04:	066d      	lsls	r5, r5, #25
 8008b06:	d5fb      	bpl.n	8008b00 <_printf_i+0x198>
 8008b08:	8019      	strh	r1, [r3, #0]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	9e04      	ldr	r6, [sp, #16]
 8008b0e:	6123      	str	r3, [r4, #16]
 8008b10:	e7c0      	b.n	8008a94 <_printf_i+0x12c>
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	1d11      	adds	r1, r2, #4
 8008b16:	6019      	str	r1, [r3, #0]
 8008b18:	6816      	ldr	r6, [r2, #0]
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	0030      	movs	r0, r6
 8008b1e:	6862      	ldr	r2, [r4, #4]
 8008b20:	f000 f858 	bl	8008bd4 <memchr>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d001      	beq.n	8008b2c <_printf_i+0x1c4>
 8008b28:	1b80      	subs	r0, r0, r6
 8008b2a:	6060      	str	r0, [r4, #4]
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	2300      	movs	r3, #0
 8008b32:	9a04      	ldr	r2, [sp, #16]
 8008b34:	7013      	strb	r3, [r2, #0]
 8008b36:	e7ad      	b.n	8008a94 <_printf_i+0x12c>
 8008b38:	0032      	movs	r2, r6
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	9906      	ldr	r1, [sp, #24]
 8008b3e:	9805      	ldr	r0, [sp, #20]
 8008b40:	9d07      	ldr	r5, [sp, #28]
 8008b42:	47a8      	blx	r5
 8008b44:	3001      	adds	r0, #1
 8008b46:	d0af      	beq.n	8008aa8 <_printf_i+0x140>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	079b      	lsls	r3, r3, #30
 8008b4c:	d415      	bmi.n	8008b7a <_printf_i+0x212>
 8008b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b50:	68e0      	ldr	r0, [r4, #12]
 8008b52:	4298      	cmp	r0, r3
 8008b54:	daaa      	bge.n	8008aac <_printf_i+0x144>
 8008b56:	0018      	movs	r0, r3
 8008b58:	e7a8      	b.n	8008aac <_printf_i+0x144>
 8008b5a:	0022      	movs	r2, r4
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	9906      	ldr	r1, [sp, #24]
 8008b60:	9805      	ldr	r0, [sp, #20]
 8008b62:	9e07      	ldr	r6, [sp, #28]
 8008b64:	3219      	adds	r2, #25
 8008b66:	47b0      	blx	r6
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d09d      	beq.n	8008aa8 <_printf_i+0x140>
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b72:	1a9b      	subs	r3, r3, r2
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	dcf0      	bgt.n	8008b5a <_printf_i+0x1f2>
 8008b78:	e7e9      	b.n	8008b4e <_printf_i+0x1e6>
 8008b7a:	2500      	movs	r5, #0
 8008b7c:	e7f7      	b.n	8008b6e <_printf_i+0x206>
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	08008f31 	.word	0x08008f31
 8008b84:	08008f42 	.word	0x08008f42

08008b88 <memmove>:
 8008b88:	b510      	push	{r4, lr}
 8008b8a:	4288      	cmp	r0, r1
 8008b8c:	d902      	bls.n	8008b94 <memmove+0xc>
 8008b8e:	188b      	adds	r3, r1, r2
 8008b90:	4298      	cmp	r0, r3
 8008b92:	d303      	bcc.n	8008b9c <memmove+0x14>
 8008b94:	2300      	movs	r3, #0
 8008b96:	e007      	b.n	8008ba8 <memmove+0x20>
 8008b98:	5c8b      	ldrb	r3, [r1, r2]
 8008b9a:	5483      	strb	r3, [r0, r2]
 8008b9c:	3a01      	subs	r2, #1
 8008b9e:	d2fb      	bcs.n	8008b98 <memmove+0x10>
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	5ccc      	ldrb	r4, [r1, r3]
 8008ba4:	54c4      	strb	r4, [r0, r3]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d1fa      	bne.n	8008ba2 <memmove+0x1a>
 8008bac:	e7f8      	b.n	8008ba0 <memmove+0x18>
	...

08008bb0 <_sbrk_r>:
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	b570      	push	{r4, r5, r6, lr}
 8008bb4:	4d06      	ldr	r5, [pc, #24]	; (8008bd0 <_sbrk_r+0x20>)
 8008bb6:	0004      	movs	r4, r0
 8008bb8:	0008      	movs	r0, r1
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	f7f8 ffac 	bl	8001b18 <_sbrk>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d103      	bne.n	8008bcc <_sbrk_r+0x1c>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d000      	beq.n	8008bcc <_sbrk_r+0x1c>
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
 8008bce:	46c0      	nop			; (mov r8, r8)
 8008bd0:	20000540 	.word	0x20000540

08008bd4 <memchr>:
 8008bd4:	b2c9      	uxtb	r1, r1
 8008bd6:	1882      	adds	r2, r0, r2
 8008bd8:	4290      	cmp	r0, r2
 8008bda:	d101      	bne.n	8008be0 <memchr+0xc>
 8008bdc:	2000      	movs	r0, #0
 8008bde:	4770      	bx	lr
 8008be0:	7803      	ldrb	r3, [r0, #0]
 8008be2:	428b      	cmp	r3, r1
 8008be4:	d0fb      	beq.n	8008bde <memchr+0xa>
 8008be6:	3001      	adds	r0, #1
 8008be8:	e7f6      	b.n	8008bd8 <memchr+0x4>

08008bea <memcpy>:
 8008bea:	2300      	movs	r3, #0
 8008bec:	b510      	push	{r4, lr}
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d100      	bne.n	8008bf4 <memcpy+0xa>
 8008bf2:	bd10      	pop	{r4, pc}
 8008bf4:	5ccc      	ldrb	r4, [r1, r3]
 8008bf6:	54c4      	strb	r4, [r0, r3]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	e7f8      	b.n	8008bee <memcpy+0x4>

08008bfc <_realloc_r>:
 8008bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bfe:	0007      	movs	r7, r0
 8008c00:	000e      	movs	r6, r1
 8008c02:	0014      	movs	r4, r2
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d105      	bne.n	8008c14 <_realloc_r+0x18>
 8008c08:	0011      	movs	r1, r2
 8008c0a:	f7ff fc49 	bl	80084a0 <_malloc_r>
 8008c0e:	0005      	movs	r5, r0
 8008c10:	0028      	movs	r0, r5
 8008c12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	d103      	bne.n	8008c20 <_realloc_r+0x24>
 8008c18:	f7ff fbd6 	bl	80083c8 <_free_r>
 8008c1c:	0025      	movs	r5, r4
 8008c1e:	e7f7      	b.n	8008c10 <_realloc_r+0x14>
 8008c20:	f000 f81b 	bl	8008c5a <_malloc_usable_size_r>
 8008c24:	9001      	str	r0, [sp, #4]
 8008c26:	4284      	cmp	r4, r0
 8008c28:	d803      	bhi.n	8008c32 <_realloc_r+0x36>
 8008c2a:	0035      	movs	r5, r6
 8008c2c:	0843      	lsrs	r3, r0, #1
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	d3ee      	bcc.n	8008c10 <_realloc_r+0x14>
 8008c32:	0021      	movs	r1, r4
 8008c34:	0038      	movs	r0, r7
 8008c36:	f7ff fc33 	bl	80084a0 <_malloc_r>
 8008c3a:	1e05      	subs	r5, r0, #0
 8008c3c:	d0e8      	beq.n	8008c10 <_realloc_r+0x14>
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	0022      	movs	r2, r4
 8008c42:	429c      	cmp	r4, r3
 8008c44:	d900      	bls.n	8008c48 <_realloc_r+0x4c>
 8008c46:	001a      	movs	r2, r3
 8008c48:	0031      	movs	r1, r6
 8008c4a:	0028      	movs	r0, r5
 8008c4c:	f7ff ffcd 	bl	8008bea <memcpy>
 8008c50:	0031      	movs	r1, r6
 8008c52:	0038      	movs	r0, r7
 8008c54:	f7ff fbb8 	bl	80083c8 <_free_r>
 8008c58:	e7da      	b.n	8008c10 <_realloc_r+0x14>

08008c5a <_malloc_usable_size_r>:
 8008c5a:	1f0b      	subs	r3, r1, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	1f18      	subs	r0, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da01      	bge.n	8008c68 <_malloc_usable_size_r+0xe>
 8008c64:	580b      	ldr	r3, [r1, r0]
 8008c66:	18c0      	adds	r0, r0, r3
 8008c68:	4770      	bx	lr
	...

08008c6c <_init>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	46c0      	nop			; (mov r8, r8)
 8008c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c72:	bc08      	pop	{r3}
 8008c74:	469e      	mov	lr, r3
 8008c76:	4770      	bx	lr

08008c78 <_fini>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	46c0      	nop			; (mov r8, r8)
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr
