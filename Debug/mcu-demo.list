
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e38  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc0  08004fc0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc8  08004fc8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000005c  0800502c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800502c  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001493d  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002848  00000000  00000000  00034a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00037250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef8  00000000  00000000  00038540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a985  00000000  00000000  00039438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001780a  00000000  00000000  00053dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae2be  00000000  00000000  0006b5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ac8  00000000  00000000  00119888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004edc 	.word	0x08004edc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08004edc 	.word	0x08004edc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fc88 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f816 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f9a4 	bl	8000998 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f954 	bl	80008fc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000654:	f000 f858 	bl	8000708 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000658:	f000 f8bc 	bl	80007d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 800065c:	f000 f8fa 	bl	8000854 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <main+0x34>)
 8000662:	0018      	movs	r0, r3
 8000664:	f001 f8aa 	bl	80017bc <HAL_ADC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  hardwareTestLED();
 8000668:	f000 fa38 	bl	8000adc <hardwareTestLED>
	  hardwareTestPot();
 800066c:	f000 fa78 	bl	8000b60 <hardwareTestPot>
	  hardwareTestLED();
 8000670:	e7fa      	b.n	8000668 <main+0x28>
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	20000078 	.word	0x20000078

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b093      	sub	sp, #76	; 0x4c
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	2410      	movs	r4, #16
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2338      	movs	r3, #56	; 0x38
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f003 ffa1 	bl	80045d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	003b      	movs	r3, r7
 8000690:	0018      	movs	r0, r3
 8000692:	2310      	movs	r3, #16
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f003 ff9a 	bl	80045d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fee1 	bl	8002468 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2202      	movs	r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	0052      	lsls	r2, r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2240      	movs	r2, #64	; 0x40
 80006be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 ff19 	bl	8002500 <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006d2:	f000 fa73 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	003b      	movs	r3, r7
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	003b      	movs	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ee:	003b      	movs	r3, r7
 80006f0:	2100      	movs	r1, #0
 80006f2:	0018      	movs	r0, r3
 80006f4:	f002 fa1e 	bl	8002b34 <HAL_RCC_ClockConfig>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006fc:	f000 fa5e 	bl	8000bbc <Error_Handler>
  }
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b013      	add	sp, #76	; 0x4c
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	0018      	movs	r0, r3
 8000712:	230c      	movs	r3, #12
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f003 ff5a 	bl	80045d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_ADC1_Init+0xc4>)
 800071e:	4a2c      	ldr	r2, [pc, #176]	; (80007d0 <MX_ADC1_Init+0xc8>)
 8000720:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	05d2      	lsls	r2, r2, #23
 8000728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_ADC1_Init+0xc4>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <MX_ADC1_Init+0xc4>)
 800073e:	2204      	movs	r2, #4
 8000740:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000744:	2200      	movs	r2, #0
 8000746:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_ADC1_Init+0xc4>)
 800074a:	2200      	movs	r2, #0
 800074c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000750:	2201      	movs	r2, #1
 8000752:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000756:	2201      	movs	r2, #1
 8000758:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0xc4>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000768:	222c      	movs	r2, #44	; 0x2c
 800076a:	2100      	movs	r1, #0
 800076c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000770:	2200      	movs	r2, #0
 8000772:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000776:	2200      	movs	r2, #0
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0xc4>)
 800077c:	2200      	movs	r2, #0
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000782:	223c      	movs	r2, #60	; 0x3c
 8000784:	2100      	movs	r1, #0
 8000786:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_ADC1_Init+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0xc4>)
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fdd7 	bl	8001344 <HAL_ADC_Init>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800079a:	f000 fa0f 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	1d3a      	adds	r2, r7, #4
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_ADC1_Init+0xc4>)
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 f884 	bl	80018c4 <HAL_ADC_ConfigChannel>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80007c0:	f000 f9fc 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b004      	add	sp, #16
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000078 	.word	0x20000078
 80007d0:	40012400 	.word	0x40012400

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_I2C1_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_I2C1_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_I2C1_Init+0x74>)
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <MX_I2C1_Init+0x7c>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_I2C1_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_I2C1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_I2C1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_I2C1_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_I2C1_Init+0x74>)
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fceb 	bl	80021ec <HAL_I2C_Init>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800081a:	f000 f9cf 	bl	8000bbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_I2C1_Init+0x74>)
 8000820:	2100      	movs	r1, #0
 8000822:	0018      	movs	r0, r3
 8000824:	f001 fd88 	bl	8002338 <HAL_I2CEx_ConfigAnalogFilter>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800082c:	f000 f9c6 	bl	8000bbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <MX_I2C1_Init+0x74>)
 8000832:	2100      	movs	r1, #0
 8000834:	0018      	movs	r0, r3
 8000836:	f001 fdcb 	bl	80023d0 <HAL_I2CEx_ConfigDigitalFilter>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 f9bd 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000dc 	.word	0x200000dc
 800084c:	40005400 	.word	0x40005400
 8000850:	00303d5b 	.word	0x00303d5b

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	2310      	movs	r3, #16
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	0018      	movs	r0, r3
 8000860:	2310      	movs	r3, #16
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f003 feb3 	bl	80045d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	0018      	movs	r0, r3
 800086e:	230c      	movs	r3, #12
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f003 feac 	bl	80045d0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_TIM2_Init+0xa4>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	05d2      	lsls	r2, r2, #23
 800087e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_TIM2_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_TIM2_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_TIM2_Init+0xa4>)
 800088e:	2201      	movs	r2, #1
 8000890:	4252      	negs	r2, r2
 8000892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_TIM2_Init+0xa4>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_TIM2_Init+0xa4>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_TIM2_Init+0xa4>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 fca8 	bl	80031f8 <HAL_TIM_Base_Init>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 f986 	bl	8000bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	2110      	movs	r1, #16
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	0152      	lsls	r2, r2, #5
 80008b8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ba:	187a      	adds	r2, r7, r1
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_TIM2_Init+0xa4>)
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f002 fcf1 	bl	80032a8 <HAL_TIM_ConfigClockSource>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80008ca:	f000 f977 	bl	8000bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008da:	1d3a      	adds	r2, r7, #4
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_TIM2_Init+0xa4>)
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 fee1 	bl	80036a8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008ea:	f000 f967 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b008      	add	sp, #32
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	20000130 	.word	0x20000130

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000902:	4a24      	ldr	r2, [pc, #144]	; (8000994 <MX_USART2_UART_Init+0x98>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000908:	22e1      	movs	r2, #225	; 0xe1
 800090a:	0252      	lsls	r2, r2, #9
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_USART2_UART_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_USART2_UART_Init+0x94>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_USART2_UART_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000946:	0018      	movs	r0, r3
 8000948:	f002 ff1c 	bl	8003784 <HAL_UART_Init>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000950:	f000 f934 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000956:	2100      	movs	r1, #0
 8000958:	0018      	movs	r0, r3
 800095a:	f003 fd39 	bl	80043d0 <HAL_UARTEx_SetTxFifoThreshold>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000962:	f000 f92b 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_USART2_UART_Init+0x94>)
 8000968:	2100      	movs	r1, #0
 800096a:	0018      	movs	r0, r3
 800096c:	f003 fd70 	bl	8004450 <HAL_UARTEx_SetRxFifoThreshold>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000974:	f000 f922 	bl	8000bbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <MX_USART2_UART_Init+0x94>)
 800097a:	0018      	movs	r0, r3
 800097c:	f003 fcee 	bl	800435c <HAL_UARTEx_DisableFifoMode>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000984:	f000 f91a 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	2000017c 	.word	0x2000017c
 8000994:	40004400 	.word	0x40004400

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b08b      	sub	sp, #44	; 0x2c
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	2414      	movs	r4, #20
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	0018      	movs	r0, r3
 80009a4:	2314      	movs	r3, #20
 80009a6:	001a      	movs	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	f003 fe11 	bl	80045d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <MX_GPIO_Init+0x134>)
 80009b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009b2:	4b46      	ldr	r3, [pc, #280]	; (8000acc <MX_GPIO_Init+0x134>)
 80009b4:	2104      	movs	r1, #4
 80009b6:	430a      	orrs	r2, r1
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <MX_GPIO_Init+0x134>)
 80009bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009be:	2204      	movs	r2, #4
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b41      	ldr	r3, [pc, #260]	; (8000acc <MX_GPIO_Init+0x134>)
 80009c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ca:	4b40      	ldr	r3, [pc, #256]	; (8000acc <MX_GPIO_Init+0x134>)
 80009cc:	2120      	movs	r1, #32
 80009ce:	430a      	orrs	r2, r1
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <MX_GPIO_Init+0x134>)
 80009d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009d6:	2220      	movs	r2, #32
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <MX_GPIO_Init+0x134>)
 80009e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e2:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <MX_GPIO_Init+0x134>)
 80009e4:	2101      	movs	r1, #1
 80009e6:	430a      	orrs	r2, r1
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <MX_GPIO_Init+0x134>)
 80009ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ee:	2201      	movs	r2, #1
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <MX_GPIO_Init+0x134>)
 80009f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009fa:	4b34      	ldr	r3, [pc, #208]	; (8000acc <MX_GPIO_Init+0x134>)
 80009fc:	2102      	movs	r1, #2
 80009fe:	430a      	orrs	r2, r1
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <MX_GPIO_Init+0x134>)
 8000a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a06:	2202      	movs	r2, #2
 8000a08:	4013      	ands	r3, r2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	2200      	movs	r2, #0
 8000a14:	2120      	movs	r1, #32
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 fbca 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000a1c:	492c      	ldr	r1, [pc, #176]	; (8000ad0 <MX_GPIO_Init+0x138>)
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <MX_GPIO_Init+0x13c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fbc4 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <MX_GPIO_Init+0x140>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 fbbe 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2220      	movs	r2, #32
 8000a38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	2202      	movs	r2, #2
 8000a4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	193a      	adds	r2, r7, r4
 8000a4e:	23a0      	movs	r3, #160	; 0xa0
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 fa47 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <MX_GPIO_Init+0x138>)
 8000a5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2201      	movs	r2, #1
 8000a64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <MX_GPIO_Init+0x13c>)
 8000a76:	0019      	movs	r1, r3
 8000a78:	0010      	movs	r0, r2
 8000a7a:	f001 fa35 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2201      	movs	r2, #1
 8000a88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <MX_GPIO_Init+0x140>)
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	0010      	movs	r0, r2
 8000a9e:	f001 fa23 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000aa2:	0021      	movs	r1, r4
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2208      	movs	r2, #8
 8000aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <MX_GPIO_Init+0x13c>)
 8000aba:	0019      	movs	r1, r3
 8000abc:	0010      	movs	r0, r2
 8000abe:	f001 fa13 	bl	8001ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b00b      	add	sp, #44	; 0x2c
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	00004010 	.word	0x00004010
 8000ad4:	50000400 	.word	0x50000400
 8000ad8:	50000800 	.word	0x50000800

08000adc <hardwareTestLED>:

/* USER CODE BEGIN 4 */

	/* Test LEDs are working  */
	void hardwareTestLED(void){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

		/* Lights ON */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <hardwareTestLED+0x7c>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 fb62 	bl	80021b0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000aec:	2064      	movs	r0, #100	; 0x64
 8000aee:	f000 fab9 	bl	8001064 <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	01db      	lsls	r3, r3, #7
 8000af6:	4819      	ldr	r0, [pc, #100]	; (8000b5c <hardwareTestLED+0x80>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	0019      	movs	r1, r3
 8000afc:	f001 fb58 	bl	80021b0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b00:	2064      	movs	r0, #100	; 0x64
 8000b02:	f000 faaf 	bl	8001064 <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <hardwareTestLED+0x80>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 fb4f 	bl	80021b0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f000 faa6 	bl	8001064 <HAL_Delay>

		/* Lights OFF */
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <hardwareTestLED+0x7c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 fb46 	bl	80021b0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b24:	2064      	movs	r0, #100	; 0x64
 8000b26:	f000 fa9d 	bl	8001064 <HAL_Delay>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	01db      	lsls	r3, r3, #7
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <hardwareTestLED+0x80>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	0019      	movs	r1, r3
 8000b34:	f001 fb3c 	bl	80021b0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b38:	2064      	movs	r0, #100	; 0x64
 8000b3a:	f000 fa93 	bl	8001064 <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <hardwareTestLED+0x80>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	2110      	movs	r1, #16
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 fb33 	bl	80021b0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000b4a:	2064      	movs	r0, #100	; 0x64
 8000b4c:	f000 fa8a 	bl	8001064 <HAL_Delay>
	}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	50000800 	.word	0x50000800
 8000b5c:	50000400 	.word	0x50000400

08000b60 <hardwareTestPot>:

	/* Test potentiometer is working */
	void hardwareTestPot(void){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
		/* Init variable for pot value */
		char msg[20];
		uint16_t potValue;

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <hardwareTestPot+0x50>)
 8000b68:	2105      	movs	r1, #5
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fd92 	bl	8001694 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <hardwareTestPot+0x50>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fe9a 	bl	80018ac <HAL_ADC_GetValue>
 8000b78:	0002      	movs	r2, r0
 8000b7a:	2116      	movs	r1, #22
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	801a      	strh	r2, [r3, #0]

		/* Print value */
		sprintf(msg, "potValue: %hu\r\n", potValue);
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	881a      	ldrh	r2, [r3, #0]
 8000b84:	490b      	ldr	r1, [pc, #44]	; (8000bb4 <hardwareTestPot+0x54>)
 8000b86:	003b      	movs	r3, r7
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f003 fd01 	bl	8004590 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000b8e:	003b      	movs	r3, r7
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fab7 	bl	8000104 <strlen>
 8000b96:	0003      	movs	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	425b      	negs	r3, r3
 8000b9e:	0039      	movs	r1, r7
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <hardwareTestPot+0x58>)
 8000ba2:	f002 fe45 	bl	8003830 <HAL_UART_Transmit>

	}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b006      	add	sp, #24
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	20000078 	.word	0x20000078
 8000bb4:	08004ef4 	.word	0x08004ef4
 8000bb8:	2000017c 	.word	0x2000017c

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	2201      	movs	r2, #1
 8000be0:	4013      	ands	r3, r2
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0549      	lsls	r1, r1, #21
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	055b      	lsls	r3, r3, #21
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000c02:	23c0      	movs	r3, #192	; 0xc0
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fa50 	bl	80010ac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	2414      	movs	r4, #20
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	0018      	movs	r0, r3
 8000c26:	2314      	movs	r3, #20
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f003 fcd0 	bl	80045d0 <memset>
  if(hadc->Instance==ADC1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_ADC_MspInit+0x80>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d129      	bne.n	8000c8e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_ADC_MspInit+0x84>)
 8000c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_ADC_MspInit+0x84>)
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	0349      	lsls	r1, r1, #13
 8000c44:	430a      	orrs	r2, r1
 8000c46:	641a      	str	r2, [r3, #64]	; 0x40
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_ADC_MspInit+0x84>)
 8000c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	035b      	lsls	r3, r3, #13
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_ADC_MspInit+0x84>)
 8000c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_ADC_MspInit+0x84>)
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_ADC_MspInit+0x84>)
 8000c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c66:	2201      	movs	r2, #1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	2203      	movs	r2, #3
 8000c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000c80:	193a      	adds	r2, r7, r4
 8000c82:	23a0      	movs	r3, #160	; 0xa0
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f001 f92d 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b00b      	add	sp, #44	; 0x2c
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	40012400 	.word	0x40012400
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b097      	sub	sp, #92	; 0x5c
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	2344      	movs	r3, #68	; 0x44
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	0018      	movs	r0, r3
 8000cae:	2314      	movs	r3, #20
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f003 fc8c 	bl	80045d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	2410      	movs	r4, #16
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2334      	movs	r3, #52	; 0x34
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f003 fc84 	bl	80045d0 <memset>
  if(hi2c->Instance==I2C1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a22      	ldr	r2, [pc, #136]	; (8000d58 <HAL_I2C_MspInit+0xb8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d13e      	bne.n	8000d50 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cd2:	193b      	adds	r3, r7, r4
 8000cd4:	2220      	movs	r2, #32
 8000cd6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f002 f8d1 	bl	8002e88 <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cea:	f7ff ff67 	bl	8000bbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_I2C_MspInit+0xbc>)
 8000cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_I2C_MspInit+0xbc>)
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_I2C_MspInit+0xbc>)
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	2202      	movs	r2, #2
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d06:	2144      	movs	r1, #68	; 0x44
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	22c0      	movs	r2, #192	; 0xc0
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2212      	movs	r2, #18
 8000d14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2206      	movs	r2, #6
 8000d26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_I2C_MspInit+0xc0>)
 8000d2c:	0019      	movs	r1, r3
 8000d2e:	0010      	movs	r0, r2
 8000d30:	f001 f8da 	bl	8001ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_I2C_MspInit+0xbc>)
 8000d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_I2C_MspInit+0xbc>)
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	0389      	lsls	r1, r1, #14
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_I2C_MspInit+0xbc>)
 8000d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	039b      	lsls	r3, r3, #14
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b017      	add	sp, #92	; 0x5c
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	50000400 	.word	0x50000400

08000d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d10b      	bne.n	8000d90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_TIM_Base_MspInit+0x34>)
 8000d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_TIM_Base_MspInit+0x34>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	430a      	orrs	r2, r1
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_TIM_Base_MspInit+0x34>)
 8000d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b004      	add	sp, #16
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000

08000d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b097      	sub	sp, #92	; 0x5c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	2344      	movs	r3, #68	; 0x44
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	0018      	movs	r0, r3
 8000daa:	2314      	movs	r3, #20
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f003 fc0e 	bl	80045d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db4:	2410      	movs	r4, #16
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	0018      	movs	r0, r3
 8000dba:	2334      	movs	r3, #52	; 0x34
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f003 fc06 	bl	80045d0 <memset>
  if(huart->Instance==USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <HAL_UART_MspInit+0xb8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d13e      	bne.n	8000e4c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f002 f853 	bl	8002e88 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000de6:	f7ff fee9 	bl	8000bbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	0289      	lsls	r1, r1, #10
 8000df4:	430a      	orrs	r2, r1
 8000df6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_UART_MspInit+0xbc>)
 8000e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e16:	2201      	movs	r2, #1
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000e1e:	2144      	movs	r1, #68	; 0x44
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2202      	movs	r2, #2
 8000e2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2201      	movs	r2, #1
 8000e30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	187a      	adds	r2, r7, r1
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f001 f84e 	bl	8001ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b017      	add	sp, #92	; 0x5c
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40021000 	.word	0x40021000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e80:	f000 f8d4 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	18d3      	adds	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f003 fb90 	bl	80045e0 <__errno>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	425b      	negs	r3, r3
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	18d2      	adds	r2, r2, r3
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b006      	add	sp, #24
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20009000 	.word	0x20009000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000210 	.word	0x20000210
 8000ef4:	20000360 	.word	0x20000360

08000ef8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f08:	f7ff fff6 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	; (8000f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <LoopForever+0xe>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <LoopForever+0x16>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f32:	f003 fb5b 	bl	80045ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f36:	f7ff fb83 	bl	8000640 <main>

08000f3a <LoopForever>:

LoopForever:
  b LoopForever
 8000f3a:	e7fe      	b.n	8000f3a <LoopForever>
  ldr   r0, =_estack
 8000f3c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f48:	08004fd0 	.word	0x08004fd0
  ldr r2, =_sbss
 8000f4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f50:	20000360 	.word	0x20000360

08000f54 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_COMP_IRQHandler>
	...

08000f58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x3c>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Init+0x3c>)
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	0049      	lsls	r1, r1, #1
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f810 	bl	8000f98 <HAL_InitTick>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	e001      	b.n	8000f88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fe20 	bl	8000bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	781b      	ldrb	r3, [r3, #0]
}
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b002      	add	sp, #8
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40022000 	.word	0x40022000

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_InitTick+0x88>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d02b      	beq.n	8001008 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_InitTick+0x8c>)
 8000fb2:	681c      	ldr	r4, [r3, #0]
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_InitTick+0x88>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	0019      	movs	r1, r3
 8000fba:	23fa      	movs	r3, #250	; 0xfa
 8000fbc:	0098      	lsls	r0, r3, #2
 8000fbe:	f7ff f8b3 	bl	8000128 <__udivsi3>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	0020      	movs	r0, r4
 8000fc8:	f7ff f8ae 	bl	8000128 <__udivsi3>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 ff7d 	bl	8001ece <HAL_SYSTICK_Config>
 8000fd4:	1e03      	subs	r3, r0, #0
 8000fd6:	d112      	bne.n	8000ffe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d80a      	bhi.n	8000ff4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	425b      	negs	r3, r3
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 ff5c 	bl	8001ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_InitTick+0x90>)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e00d      	b.n	8001010 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	e008      	b.n	8001010 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffe:	230f      	movs	r3, #15
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e003      	b.n	8001010 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001008:	230f      	movs	r3, #15
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001010:	230f      	movs	r3, #15
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	781b      	ldrb	r3, [r3, #0]
}
 8001016:	0018      	movs	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	b005      	add	sp, #20
 800101c:	bd90      	pop	{r4, r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	20000008 	.word	0x20000008
 8001024:	20000000 	.word	0x20000000
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_IncTick+0x1c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	001a      	movs	r2, r3
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_IncTick+0x20>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	18d2      	adds	r2, r2, r3
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_IncTick+0x20>)
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	20000008 	.word	0x20000008
 800104c:	20000214 	.word	0x20000214

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b02      	ldr	r3, [pc, #8]	; (8001060 <HAL_GetTick+0x10>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	20000214 	.word	0x20000214

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff fff0 	bl	8001050 <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	001a      	movs	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	189b      	adds	r3, r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	f7ff ffe0 	bl	8001050 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	20000008 	.word	0x20000008

080010ac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	40010000 	.word	0x40010000
 80010d4:	fffff9ff 	.word	0xfffff9ff

080010d8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b002      	add	sp, #8
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	fe3fffff 	.word	0xfe3fffff

08001100 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	23e0      	movs	r3, #224	; 0xe0
 800110e:	045b      	lsls	r3, r3, #17
 8001110:	4013      	ands	r3, r2
}
 8001112:	0018      	movs	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}

0800111a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	2104      	movs	r1, #4
 800112e:	400a      	ands	r2, r1
 8001130:	2107      	movs	r1, #7
 8001132:	4091      	lsls	r1, r2
 8001134:	000a      	movs	r2, r1
 8001136:	43d2      	mvns	r2, r2
 8001138:	401a      	ands	r2, r3
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2104      	movs	r1, #4
 800113e:	400b      	ands	r3, r1
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4099      	lsls	r1, r3
 8001144:	000b      	movs	r3, r1
 8001146:	431a      	orrs	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b004      	add	sp, #16
 8001152:	bd80      	pop	{r7, pc}

08001154 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	2104      	movs	r1, #4
 8001166:	400a      	ands	r2, r1
 8001168:	2107      	movs	r1, #7
 800116a:	4091      	lsls	r1, r2
 800116c:	000a      	movs	r2, r1
 800116e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2104      	movs	r1, #4
 8001174:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001176:	40da      	lsrs	r2, r3
 8001178:	0013      	movs	r3, r2
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}

08001182 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	23c0      	movs	r3, #192	; 0xc0
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	4013      	ands	r3, r2
 8001194:	d101      	bne.n	800119a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800119a:	2300      	movs	r3, #0
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	211f      	movs	r1, #31
 80011b8:	400a      	ands	r2, r1
 80011ba:	210f      	movs	r1, #15
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	0e9b      	lsrs	r3, r3, #26
 80011c8:	210f      	movs	r1, #15
 80011ca:	4019      	ands	r1, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	201f      	movs	r0, #31
 80011d0:	4003      	ands	r3, r0
 80011d2:	4099      	lsls	r1, r3
 80011d4:	000b      	movs	r3, r1
 80011d6:	431a      	orrs	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b004      	add	sp, #16
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	035b      	lsls	r3, r3, #13
 80011f6:	0b5b      	lsrs	r3, r3, #13
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}

08001206 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	0352      	lsls	r2, r2, #13
 8001218:	0b52      	lsrs	r2, r2, #13
 800121a:	43d2      	mvns	r2, r2
 800121c:	401a      	ands	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	b002      	add	sp, #8
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	0212      	lsls	r2, r2, #8
 8001240:	43d2      	mvns	r2, r2
 8001242:	401a      	ands	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	400b      	ands	r3, r1
 800124c:	4904      	ldr	r1, [pc, #16]	; (8001260 <LL_ADC_SetChannelSamplingTime+0x34>)
 800124e:	400b      	ands	r3, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	07ffff00 	.word	0x07ffff00

08001264 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <LL_ADC_EnableInternalRegulator+0x24>)
 8001272:	4013      	ands	r3, r2
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	0552      	lsls	r2, r2, #21
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	6fffffe8 	.word	0x6fffffe8

0800128c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	055b      	lsls	r3, r3, #21
 800129c:	401a      	ands	r2, r3
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	055b      	lsls	r3, r3, #21
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d101      	bne.n	80012aa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <LL_ADC_Enable+0x20>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	2201      	movs	r2, #1
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	7fffffe8 	.word	0x7fffffe8

080012d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2201      	movs	r2, #1
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <LL_ADC_IsEnabled+0x18>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <LL_ADC_IsEnabled+0x1a>
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <LL_ADC_REG_StartConversion+0x20>)
 800130a:	4013      	ands	r3, r2
 800130c:	2204      	movs	r2, #4
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}
 800131c:	7fffffe8 	.word	0x7fffffe8

08001320 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2204      	movs	r2, #4
 800132e:	4013      	ands	r3, r2
 8001330:	2b04      	cmp	r3, #4
 8001332:	d101      	bne.n	8001338 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001338:	2300      	movs	r3, #0
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134c:	231f      	movs	r3, #31
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e17f      	b.n	800166a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10a      	bne.n	8001388 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff fc4f 	bl	8000c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2254      	movs	r2, #84	; 0x54
 8001384:	2100      	movs	r1, #0
 8001386:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff ff7d 	bl	800128c <LL_ADC_IsInternalRegulatorEnabled>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d115      	bne.n	80013c2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff ff62 	bl	8001264 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013a0:	4bb4      	ldr	r3, [pc, #720]	; (8001674 <HAL_ADC_Init+0x330>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	49b4      	ldr	r1, [pc, #720]	; (8001678 <HAL_ADC_Init+0x334>)
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7fe febe 	bl	8000128 <__udivsi3>
 80013ac:	0003      	movs	r3, r0
 80013ae:	3301      	adds	r3, #1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013b4:	e002      	b.n	80013bc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f9      	bne.n	80013b6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff ff60 	bl	800128c <LL_ADC_IsInternalRegulatorEnabled>
 80013cc:	1e03      	subs	r3, r0, #0
 80013ce:	d10f      	bne.n	80013f0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d4:	2210      	movs	r2, #16
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e0:	2201      	movs	r2, #1
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013e8:	231f      	movs	r3, #31
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff ff93 	bl	8001320 <LL_ADC_REG_IsConversionOngoing>
 80013fa:	0003      	movs	r3, r0
 80013fc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	2210      	movs	r2, #16
 8001404:	4013      	ands	r3, r2
 8001406:	d000      	beq.n	800140a <HAL_ADC_Init+0xc6>
 8001408:	e122      	b.n	8001650 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d000      	beq.n	8001412 <HAL_ADC_Init+0xce>
 8001410:	e11e      	b.n	8001650 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	4a99      	ldr	r2, [pc, #612]	; (800167c <HAL_ADC_Init+0x338>)
 8001418:	4013      	ands	r3, r2
 800141a:	2202      	movs	r2, #2
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff ff56 	bl	80012d8 <LL_ADC_IsEnabled>
 800142c:	1e03      	subs	r3, r0, #0
 800142e:	d000      	beq.n	8001432 <HAL_ADC_Init+0xee>
 8001430:	e0ad      	b.n	800158e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7e1b      	ldrb	r3, [r3, #24]
 800143a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800143c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7e5b      	ldrb	r3, [r3, #25]
 8001442:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001444:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7e9b      	ldrb	r3, [r3, #26]
 800144a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800144c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <HAL_ADC_Init+0x118>
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	015b      	lsls	r3, r3, #5
 800145a:	e000      	b.n	800145e <HAL_ADC_Init+0x11a>
 800145c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800145e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001464:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	da04      	bge.n	8001478 <HAL_ADC_Init+0x134>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	e001      	b.n	800147c <HAL_ADC_Init+0x138>
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800147c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	212c      	movs	r1, #44	; 0x2c
 8001482:	5c5b      	ldrb	r3, [r3, r1]
 8001484:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001486:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2220      	movs	r2, #32
 8001492:	5c9b      	ldrb	r3, [r3, r2]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d115      	bne.n	80014c4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e9b      	ldrb	r3, [r3, #26]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	0252      	lsls	r2, r2, #9
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	e00b      	b.n	80014c4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	2220      	movs	r2, #32
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	2201      	movs	r2, #1
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00a      	beq.n	80014e2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d0:	23e0      	movs	r3, #224	; 0xe0
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014da:	4313      	orrs	r3, r2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4a65      	ldr	r2, [pc, #404]	; (8001680 <HAL_ADC_Init+0x33c>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	0019      	movs	r1, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	0f9b      	lsrs	r3, r3, #30
 80014fe:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001504:	4313      	orrs	r3, r2
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4313      	orrs	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	223c      	movs	r2, #60	; 0x3c
 8001510:	5c9b      	ldrb	r3, [r3, r2]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d111      	bne.n	800153a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	0f9b      	lsrs	r3, r3, #30
 800151c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001522:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001528:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800152e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	4313      	orrs	r3, r2
 8001534:	2201      	movs	r2, #1
 8001536:	4313      	orrs	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_ADC_Init+0x340>)
 8001542:	4013      	ands	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	430a      	orrs	r2, r1
 800154e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	23c0      	movs	r3, #192	; 0xc0
 8001556:	061b      	lsls	r3, r3, #24
 8001558:	429a      	cmp	r2, r3
 800155a:	d018      	beq.n	800158e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	429a      	cmp	r2, r3
 8001566:	d012      	beq.n	800158e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	061b      	lsls	r3, r3, #24
 8001570:	429a      	cmp	r2, r3
 8001572:	d00c      	beq.n	800158e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001574:	4b44      	ldr	r3, [pc, #272]	; (8001688 <HAL_ADC_Init+0x344>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a44      	ldr	r2, [pc, #272]	; (800168c <HAL_ADC_Init+0x348>)
 800157a:	4013      	ands	r3, r2
 800157c:	0019      	movs	r1, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	23f0      	movs	r3, #240	; 0xf0
 8001584:	039b      	lsls	r3, r3, #14
 8001586:	401a      	ands	r2, r3
 8001588:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <HAL_ADC_Init+0x344>)
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6818      	ldr	r0, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001596:	001a      	movs	r2, r3
 8001598:	2100      	movs	r1, #0
 800159a:	f7ff fdbe 	bl	800111a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	493a      	ldr	r1, [pc, #232]	; (8001690 <HAL_ADC_Init+0x34c>)
 80015a8:	001a      	movs	r2, r3
 80015aa:	f7ff fdb6 	bl	800111a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d109      	bne.n	80015ca <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2110      	movs	r1, #16
 80015c2:	4249      	negs	r1, r1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
 80015c8:	e018      	b.n	80015fc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	039b      	lsls	r3, r3, #14
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d112      	bne.n	80015fc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	221c      	movs	r2, #28
 80015e6:	4013      	ands	r3, r2
 80015e8:	2210      	movs	r2, #16
 80015ea:	4252      	negs	r2, r2
 80015ec:	409a      	lsls	r2, r3
 80015ee:	0011      	movs	r1, r2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2100      	movs	r1, #0
 8001602:	0018      	movs	r0, r3
 8001604:	f7ff fda6 	bl	8001154 <LL_ADC_GetSamplingTimeCommonChannels>
 8001608:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800160e:	429a      	cmp	r2, r3
 8001610:	d10b      	bne.n	800162a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	2203      	movs	r2, #3
 800161e:	4393      	bics	r3, r2
 8001620:	2201      	movs	r2, #1
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001628:	e01c      	b.n	8001664 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	2212      	movs	r2, #18
 8001630:	4393      	bics	r3, r2
 8001632:	2210      	movs	r2, #16
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2201      	movs	r2, #1
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001646:	231f      	movs	r3, #31
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800164e:	e009      	b.n	8001664 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	2210      	movs	r2, #16
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800165c:	231f      	movs	r3, #31
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001664:	231f      	movs	r3, #31
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	781b      	ldrb	r3, [r3, #0]
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b008      	add	sp, #32
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	20000000 	.word	0x20000000
 8001678:	00030d40 	.word	0x00030d40
 800167c:	fffffefd 	.word	0xfffffefd
 8001680:	ffde0201 	.word	0xffde0201
 8001684:	1ffffc02 	.word	0x1ffffc02
 8001688:	40012708 	.word	0x40012708
 800168c:	ffc3ffff 	.word	0xffc3ffff
 8001690:	07ffff04 	.word	0x07ffff04

08001694 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d102      	bne.n	80016ac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80016a6:	2308      	movs	r3, #8
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e00f      	b.n	80016cc <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	4013      	ands	r3, r2
 80016b6:	d007      	beq.n	80016c8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	2220      	movs	r2, #32
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e072      	b.n	80017ae <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80016c8:	2304      	movs	r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016cc:	f7ff fcc0 	bl	8001050 <HAL_GetTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016d4:	e01f      	b.n	8001716 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	d01c      	beq.n	8001716 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016dc:	f7ff fcb8 	bl	8001050 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d302      	bcc.n	80016f2 <HAL_ADC_PollForConversion+0x5e>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d111      	bne.n	8001716 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	d10b      	bne.n	8001716 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	2204      	movs	r2, #4
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2254      	movs	r2, #84	; 0x54
 800170e:	2100      	movs	r1, #0
 8001710:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e04b      	b.n	80017ae <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	d0d9      	beq.n	80016d6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	0092      	lsls	r2, r2, #2
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff fd24 	bl	8001182 <LL_ADC_REG_IsTriggerSourceSWStart>
 800173a:	1e03      	subs	r3, r0, #0
 800173c:	d02e      	beq.n	800179c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7e9b      	ldrb	r3, [r3, #26]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d12a      	bne.n	800179c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2208      	movs	r2, #8
 800174e:	4013      	ands	r3, r2
 8001750:	2b08      	cmp	r3, #8
 8001752:	d123      	bne.n	800179c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff fde1 	bl	8001320 <LL_ADC_REG_IsConversionOngoing>
 800175e:	1e03      	subs	r3, r0, #0
 8001760:	d110      	bne.n	8001784 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	210c      	movs	r1, #12
 800176e:	438a      	bics	r2, r1
 8001770:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_ADC_PollForConversion+0x124>)
 8001778:	4013      	ands	r3, r2
 800177a:	2201      	movs	r2, #1
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	659a      	str	r2, [r3, #88]	; 0x58
 8001782:	e00b      	b.n	800179c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	2220      	movs	r2, #32
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001794:	2201      	movs	r2, #1
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e1b      	ldrb	r3, [r3, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	220c      	movs	r2, #12
 80017aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b004      	add	sp, #16
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	fffffefe 	.word	0xfffffefe

080017bc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff fda9 	bl	8001320 <LL_ADC_REG_IsConversionOngoing>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d15f      	bne.n	8001892 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2254      	movs	r2, #84	; 0x54
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_Start_IT+0x24>
 80017dc:	2302      	movs	r3, #2
 80017de:	e05f      	b.n	80018a0 <HAL_ADC_Start_IT+0xe4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2254      	movs	r2, #84	; 0x54
 80017e4:	2101      	movs	r1, #1
 80017e6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017e8:	250f      	movs	r5, #15
 80017ea:	197c      	adds	r4, r7, r5
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 fa40 	bl	8001c74 <ADC_Enable>
 80017f4:	0003      	movs	r3, r0
 80017f6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017f8:	197b      	adds	r3, r7, r5
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d143      	bne.n	8001888 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <HAL_ADC_Start_IT+0xec>)
 8001806:	4013      	ands	r3, r2
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	0052      	lsls	r2, r2, #1
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	221c      	movs	r2, #28
 800181e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2254      	movs	r2, #84	; 0x54
 8001824:	2100      	movs	r1, #0
 8001826:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	211c      	movs	r1, #28
 8001834:	438a      	bics	r2, r1
 8001836:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d108      	bne.n	8001852 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2108      	movs	r1, #8
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
          break;
 8001850:	e008      	b.n	8001864 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2104      	movs	r1, #4
 800185e:	430a      	orrs	r2, r1
 8001860:	605a      	str	r2, [r3, #4]
          break;
 8001862:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	2b00      	cmp	r3, #0
 800186a:	d107      	bne.n	800187c <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2110      	movs	r1, #16
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff fd3b 	bl	80012fc <LL_ADC_REG_StartConversion>
 8001886:	e008      	b.n	800189a <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2254      	movs	r2, #84	; 0x54
 800188c:	2100      	movs	r1, #0
 800188e:	5499      	strb	r1, [r3, r2]
 8001890:	e003      	b.n	800189a <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001892:	230f      	movs	r3, #15
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2202      	movs	r2, #2
 8001898:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800189a:	230f      	movs	r3, #15
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	781b      	ldrb	r3, [r3, #0]
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b004      	add	sp, #16
 80018a6:	bdb0      	pop	{r4, r5, r7, pc}
 80018a8:	fffff0fe 	.word	0xfffff0fe

080018ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018ba:	0018      	movs	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	b002      	add	sp, #8
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ce:	2317      	movs	r3, #23
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2254      	movs	r2, #84	; 0x54
 80018de:	5c9b      	ldrb	r3, [r3, r2]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x24>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e1c0      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x3a6>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2254      	movs	r2, #84	; 0x54
 80018ec:	2101      	movs	r1, #1
 80018ee:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fd13 	bl	8001320 <LL_ADC_REG_IsConversionOngoing>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d000      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x3c>
 80018fe:	e1a3      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d100      	bne.n	800190a <HAL_ADC_ConfigChannel+0x46>
 8001908:	e143      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	429a      	cmp	r2, r3
 8001914:	d004      	beq.n	8001920 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800191a:	4ac1      	ldr	r2, [pc, #772]	; (8001c20 <HAL_ADC_ConfigChannel+0x35c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d108      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0019      	movs	r1, r3
 800192a:	0010      	movs	r0, r2
 800192c:	f7ff fc5a 	bl	80011e4 <LL_ADC_REG_SetSequencerChAdd>
 8001930:	e0c9      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	211f      	movs	r1, #31
 800193c:	400b      	ands	r3, r1
 800193e:	210f      	movs	r1, #15
 8001940:	4099      	lsls	r1, r3
 8001942:	000b      	movs	r3, r1
 8001944:	43db      	mvns	r3, r3
 8001946:	4013      	ands	r3, r2
 8001948:	0019      	movs	r1, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	035b      	lsls	r3, r3, #13
 8001950:	0b5b      	lsrs	r3, r3, #13
 8001952:	d105      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x9c>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0e9b      	lsrs	r3, r3, #26
 800195a:	221f      	movs	r2, #31
 800195c:	4013      	ands	r3, r2
 800195e:	e098      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4013      	ands	r3, r2
 8001968:	d000      	beq.n	800196c <HAL_ADC_ConfigChannel+0xa8>
 800196a:	e091      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x1cc>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d000      	beq.n	8001978 <HAL_ADC_ConfigChannel+0xb4>
 8001976:	e089      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x1c8>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2204      	movs	r2, #4
 800197e:	4013      	ands	r3, r2
 8001980:	d000      	beq.n	8001984 <HAL_ADC_ConfigChannel+0xc0>
 8001982:	e081      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1c4>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2208      	movs	r2, #8
 800198a:	4013      	ands	r3, r2
 800198c:	d000      	beq.n	8001990 <HAL_ADC_ConfigChannel+0xcc>
 800198e:	e079      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x1c0>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2210      	movs	r2, #16
 8001996:	4013      	ands	r3, r2
 8001998:	d000      	beq.n	800199c <HAL_ADC_ConfigChannel+0xd8>
 800199a:	e071      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1bc>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2220      	movs	r2, #32
 80019a2:	4013      	ands	r3, r2
 80019a4:	d000      	beq.n	80019a8 <HAL_ADC_ConfigChannel+0xe4>
 80019a6:	e069      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x1b8>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	4013      	ands	r3, r2
 80019b0:	d000      	beq.n	80019b4 <HAL_ADC_ConfigChannel+0xf0>
 80019b2:	e061      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x1b4>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	4013      	ands	r3, r2
 80019bc:	d000      	beq.n	80019c0 <HAL_ADC_ConfigChannel+0xfc>
 80019be:	e059      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x1b0>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	d151      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1ac>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d149      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1a8>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4013      	ands	r3, r2
 80019e2:	d141      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1a4>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4013      	ands	r3, r2
 80019ee:	d139      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1a0>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	015b      	lsls	r3, r3, #5
 80019f8:	4013      	ands	r3, r2
 80019fa:	d131      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x19c>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	019b      	lsls	r3, r3, #6
 8001a04:	4013      	ands	r3, r2
 8001a06:	d129      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x198>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	01db      	lsls	r3, r3, #7
 8001a10:	4013      	ands	r3, r2
 8001a12:	d121      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x194>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d119      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x190>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d111      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x18c>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	029b      	lsls	r3, r3, #10
 8001a34:	4013      	ands	r3, r2
 8001a36:	d109      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x188>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	02db      	lsls	r3, r3, #11
 8001a40:	4013      	ands	r3, r2
 8001a42:	d001      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0x184>
 8001a44:	2312      	movs	r3, #18
 8001a46:	e024      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e022      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a4c:	2311      	movs	r3, #17
 8001a4e:	e020      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a50:	2310      	movs	r3, #16
 8001a52:	e01e      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a54:	230f      	movs	r3, #15
 8001a56:	e01c      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a58:	230e      	movs	r3, #14
 8001a5a:	e01a      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a5c:	230d      	movs	r3, #13
 8001a5e:	e018      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a60:	230c      	movs	r3, #12
 8001a62:	e016      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a64:	230b      	movs	r3, #11
 8001a66:	e014      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a68:	230a      	movs	r3, #10
 8001a6a:	e012      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a6c:	2309      	movs	r3, #9
 8001a6e:	e010      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a70:	2308      	movs	r3, #8
 8001a72:	e00e      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a74:	2307      	movs	r3, #7
 8001a76:	e00c      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a78:	2306      	movs	r3, #6
 8001a7a:	e00a      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	e008      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a80:	2304      	movs	r3, #4
 8001a82:	e006      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a84:	2303      	movs	r3, #3
 8001a86:	e004      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1ce>
 8001a90:	2300      	movs	r3, #0
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	6852      	ldr	r2, [r2, #4]
 8001a96:	201f      	movs	r0, #31
 8001a98:	4002      	ands	r2, r0
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	000a      	movs	r2, r1
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d808      	bhi.n	8001ac6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	f7ff fb6f 	bl	80011a4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6819      	ldr	r1, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	f7ff fbaa 	bl	800122c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	db00      	blt.n	8001ae2 <HAL_ADC_ConfigChannel+0x21e>
 8001ae0:	e0bc      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ae2:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <HAL_ADC_ConfigChannel+0x360>)
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f7ff fb0b 	bl	8001100 <LL_ADC_GetCommonPathInternalCh>
 8001aea:	0003      	movs	r3, r0
 8001aec:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <HAL_ADC_ConfigChannel+0x364>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d122      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b00:	d11d      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2280      	movs	r2, #128	; 0x80
 8001b06:	0412      	lsls	r2, r2, #16
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	4a46      	ldr	r2, [pc, #280]	; (8001c24 <HAL_ADC_ConfigChannel+0x360>)
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	0010      	movs	r0, r2
 8001b10:	f7ff fae2 	bl	80010d8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b14:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <HAL_ADC_ConfigChannel+0x368>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4945      	ldr	r1, [pc, #276]	; (8001c30 <HAL_ADC_ConfigChannel+0x36c>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7fe fb04 	bl	8000128 <__udivsi3>
 8001b20:	0003      	movs	r3, r0
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	0013      	movs	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	189b      	adds	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b2e:	e002      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f9      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b3c:	e08e      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a3c      	ldr	r2, [pc, #240]	; (8001c34 <HAL_ADC_ConfigChannel+0x370>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d10e      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	045b      	lsls	r3, r3, #17
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d109      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	0452      	lsls	r2, r2, #17
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	4a32      	ldr	r2, [pc, #200]	; (8001c24 <HAL_ADC_ConfigChannel+0x360>)
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	0010      	movs	r0, r2
 8001b60:	f7ff faba 	bl	80010d8 <LL_ADC_SetCommonPathInternalCh>
 8001b64:	e07a      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a33      	ldr	r2, [pc, #204]	; (8001c38 <HAL_ADC_ConfigChannel+0x374>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d000      	beq.n	8001b72 <HAL_ADC_ConfigChannel+0x2ae>
 8001b70:	e074      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	03db      	lsls	r3, r3, #15
 8001b78:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b7a:	d000      	beq.n	8001b7e <HAL_ADC_ConfigChannel+0x2ba>
 8001b7c:	e06e      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	03d2      	lsls	r2, r2, #15
 8001b84:	4313      	orrs	r3, r2
 8001b86:	4a27      	ldr	r2, [pc, #156]	; (8001c24 <HAL_ADC_ConfigChannel+0x360>)
 8001b88:	0019      	movs	r1, r3
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	f7ff faa4 	bl	80010d8 <LL_ADC_SetCommonPathInternalCh>
 8001b90:	e064      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d004      	beq.n	8001ba8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_ADC_ConfigChannel+0x35c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d107      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	0010      	movs	r0, r2
 8001bb4:	f7ff fb27 	bl	8001206 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da4d      	bge.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_ADC_ConfigChannel+0x360>)
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f7ff fa9c 	bl	8001100 <LL_ADC_GetCommonPathInternalCh>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <HAL_ADC_ConfigChannel+0x364>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d108      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_ADC_ConfigChannel+0x378>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <HAL_ADC_ConfigChannel+0x360>)
 8001bde:	0019      	movs	r1, r3
 8001be0:	0010      	movs	r0, r2
 8001be2:	f7ff fa79 	bl	80010d8 <LL_ADC_SetCommonPathInternalCh>
 8001be6:	e039      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_ADC_ConfigChannel+0x370>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d108      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <HAL_ADC_ConfigChannel+0x37c>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_ADC_ConfigChannel+0x360>)
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	f7ff fa6b 	bl	80010d8 <LL_ADC_SetCommonPathInternalCh>
 8001c02:	e02b      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_ADC_ConfigChannel+0x374>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d126      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_ADC_ConfigChannel+0x380>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	4a03      	ldr	r2, [pc, #12]	; (8001c24 <HAL_ADC_ConfigChannel+0x360>)
 8001c16:	0019      	movs	r1, r3
 8001c18:	0010      	movs	r0, r2
 8001c1a:	f7ff fa5d 	bl	80010d8 <LL_ADC_SetCommonPathInternalCh>
 8001c1e:	e01d      	b.n	8001c5c <HAL_ADC_ConfigChannel+0x398>
 8001c20:	80000004 	.word	0x80000004
 8001c24:	40012708 	.word	0x40012708
 8001c28:	b0001000 	.word	0xb0001000
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	00030d40 	.word	0x00030d40
 8001c34:	b8004000 	.word	0xb8004000
 8001c38:	b4002000 	.word	0xb4002000
 8001c3c:	ff7fffff 	.word	0xff7fffff
 8001c40:	feffffff 	.word	0xfeffffff
 8001c44:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c54:	2317      	movs	r3, #23
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2254      	movs	r2, #84	; 0x54
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001c64:	2317      	movs	r3, #23
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b006      	add	sp, #24
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)

08001c74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff fb27 	bl	80012d8 <LL_ADC_IsEnabled>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d000      	beq.n	8001c90 <ADC_Enable+0x1c>
 8001c8e:	e069      	b.n	8001d64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	4a36      	ldr	r2, [pc, #216]	; (8001d70 <ADC_Enable+0xfc>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d00d      	beq.n	8001cb8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	2201      	movs	r2, #1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e056      	b.n	8001d66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff faf9 	bl	80012b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <ADC_Enable+0x100>)
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fa1b 	bl	8001100 <LL_ADC_GetCommonPathInternalCh>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d00f      	beq.n	8001cf4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <ADC_Enable+0x104>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4928      	ldr	r1, [pc, #160]	; (8001d7c <ADC_Enable+0x108>)
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7fe fa24 	bl	8000128 <__udivsi3>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001ce4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ce6:	e002      	b.n	8001cee <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f9      	bne.n	8001ce8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7e5b      	ldrb	r3, [r3, #25]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d033      	beq.n	8001d64 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f9a8 	bl	8001050 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d04:	e027      	b.n	8001d56 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7ff fae4 	bl	80012d8 <LL_ADC_IsEnabled>
 8001d10:	1e03      	subs	r3, r0, #0
 8001d12:	d104      	bne.n	8001d1e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff facb 	bl	80012b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d1e:	f7ff f997 	bl	8001050 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d914      	bls.n	8001d56 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2201      	movs	r2, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d00d      	beq.n	8001d56 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	2210      	movs	r2, #16
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e007      	b.n	8001d66 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d1d0      	bne.n	8001d06 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	80000017 	.word	0x80000017
 8001d74:	40012708 	.word	0x40012708
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	00030d40 	.word	0x00030d40

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	0002      	movs	r2, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	1dfb      	adds	r3, r7, #7
 8001d8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b7f      	cmp	r3, #127	; 0x7f
 8001d94:	d828      	bhi.n	8001de8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d96:	4a2f      	ldr	r2, [pc, #188]	; (8001e54 <__NVIC_SetPriority+0xd4>)
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	33c0      	adds	r3, #192	; 0xc0
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	589b      	ldr	r3, [r3, r2]
 8001da6:	1dfa      	adds	r2, r7, #7
 8001da8:	7812      	ldrb	r2, [r2, #0]
 8001daa:	0011      	movs	r1, r2
 8001dac:	2203      	movs	r2, #3
 8001dae:	400a      	ands	r2, r1
 8001db0:	00d2      	lsls	r2, r2, #3
 8001db2:	21ff      	movs	r1, #255	; 0xff
 8001db4:	4091      	lsls	r1, r2
 8001db6:	000a      	movs	r2, r1
 8001db8:	43d2      	mvns	r2, r2
 8001dba:	401a      	ands	r2, r3
 8001dbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	22ff      	movs	r2, #255	; 0xff
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	2303      	movs	r3, #3
 8001dce:	4003      	ands	r3, r0
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd4:	481f      	ldr	r0, [pc, #124]	; (8001e54 <__NVIC_SetPriority+0xd4>)
 8001dd6:	1dfb      	adds	r3, r7, #7
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	430a      	orrs	r2, r1
 8001de0:	33c0      	adds	r3, #192	; 0xc0
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001de6:	e031      	b.n	8001e4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <__NVIC_SetPriority+0xd8>)
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	0019      	movs	r1, r3
 8001df0:	230f      	movs	r3, #15
 8001df2:	400b      	ands	r3, r1
 8001df4:	3b08      	subs	r3, #8
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3306      	adds	r3, #6
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	18d3      	adds	r3, r2, r3
 8001dfe:	3304      	adds	r3, #4
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	1dfa      	adds	r2, r7, #7
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	0011      	movs	r1, r2
 8001e08:	2203      	movs	r2, #3
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	00d2      	lsls	r2, r2, #3
 8001e0e:	21ff      	movs	r1, #255	; 0xff
 8001e10:	4091      	lsls	r1, r2
 8001e12:	000a      	movs	r2, r1
 8001e14:	43d2      	mvns	r2, r2
 8001e16:	401a      	ands	r2, r3
 8001e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	019b      	lsls	r3, r3, #6
 8001e1e:	22ff      	movs	r2, #255	; 0xff
 8001e20:	401a      	ands	r2, r3
 8001e22:	1dfb      	adds	r3, r7, #7
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	0018      	movs	r0, r3
 8001e28:	2303      	movs	r3, #3
 8001e2a:	4003      	ands	r3, r0
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e30:	4809      	ldr	r0, [pc, #36]	; (8001e58 <__NVIC_SetPriority+0xd8>)
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	001c      	movs	r4, r3
 8001e38:	230f      	movs	r3, #15
 8001e3a:	4023      	ands	r3, r4
 8001e3c:	3b08      	subs	r3, #8
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	430a      	orrs	r2, r1
 8001e42:	3306      	adds	r3, #6
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	18c3      	adds	r3, r0, r3
 8001e48:	3304      	adds	r3, #4
 8001e4a:	601a      	str	r2, [r3, #0]
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b003      	add	sp, #12
 8001e52:	bd90      	pop	{r4, r7, pc}
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	045b      	lsls	r3, r3, #17
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d301      	bcc.n	8001e74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e70:	2301      	movs	r3, #1
 8001e72:	e010      	b.n	8001e96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <SysTick_Config+0x44>)
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	3a01      	subs	r2, #1
 8001e7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	425b      	negs	r3, r3
 8001e80:	2103      	movs	r1, #3
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff ff7c 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x44>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x44>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b002      	add	sp, #8
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	210f      	movs	r1, #15
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	1c02      	adds	r2, r0, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b25b      	sxtb	r3, r3
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b004      	add	sp, #16
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff ffbf 	bl	8001e5c <SysTick_Config>
 8001ede:	0003      	movs	r3, r0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef6:	e147      	b.n	8002188 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4091      	lsls	r1, r2
 8001f02:	000a      	movs	r2, r1
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d100      	bne.n	8001f10 <HAL_GPIO_Init+0x28>
 8001f0e:	e138      	b.n	8002182 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2203      	movs	r2, #3
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d005      	beq.n	8001f28 <HAL_GPIO_Init+0x40>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2203      	movs	r2, #3
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d130      	bne.n	8001f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	409a      	lsls	r2, r3
 8001f36:	0013      	movs	r3, r2
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	0013      	movs	r3, r2
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f5e:	2201      	movs	r2, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	43da      	mvns	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	2201      	movs	r2, #1
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d017      	beq.n	8001fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d123      	bne.n	800201a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	58d3      	ldr	r3, [r2, r3]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	409a      	lsls	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2107      	movs	r1, #7
 8001ffe:	400b      	ands	r3, r1
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	409a      	lsls	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	6939      	ldr	r1, [r7, #16]
 8002018:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	43da      	mvns	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2203      	movs	r2, #3
 8002038:	401a      	ands	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	23c0      	movs	r3, #192	; 0xc0
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	d100      	bne.n	800205c <HAL_GPIO_Init+0x174>
 800205a:	e092      	b.n	8002182 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800205c:	4a50      	ldr	r2, [pc, #320]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3318      	adds	r3, #24
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	589b      	ldr	r3, [r3, r2]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2203      	movs	r2, #3
 800206e:	4013      	ands	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	220f      	movs	r2, #15
 8002074:	409a      	lsls	r2, r3
 8002076:	0013      	movs	r3, r2
 8002078:	43da      	mvns	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	23a0      	movs	r3, #160	; 0xa0
 8002084:	05db      	lsls	r3, r3, #23
 8002086:	429a      	cmp	r2, r3
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x1ca>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <HAL_GPIO_Init+0x2bc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00d      	beq.n	80020ae <HAL_GPIO_Init+0x1c6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a44      	ldr	r2, [pc, #272]	; (80021a8 <HAL_GPIO_Init+0x2c0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x1c2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a43      	ldr	r2, [pc, #268]	; (80021ac <HAL_GPIO_Init+0x2c4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_GPIO_Init+0x1be>
 80020a2:	2303      	movs	r3, #3
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x1cc>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e004      	b.n	80020b4 <HAL_GPIO_Init+0x1cc>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e002      	b.n	80020b4 <HAL_GPIO_Init+0x1cc>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_GPIO_Init+0x1cc>
 80020b2:	2300      	movs	r3, #0
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	2103      	movs	r1, #3
 80020b8:	400a      	ands	r2, r1
 80020ba:	00d2      	lsls	r2, r2, #3
 80020bc:	4093      	lsls	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80020c4:	4936      	ldr	r1, [pc, #216]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	3318      	adds	r3, #24
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	43da      	mvns	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	035b      	lsls	r3, r3, #13
 80020ea:	4013      	ands	r3, r2
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	43da      	mvns	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4013      	ands	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	039b      	lsls	r3, r3, #14
 8002114:	4013      	ands	r3, r2
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002126:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 8002128:	2384      	movs	r3, #132	; 0x84
 800212a:	58d3      	ldr	r3, [r2, r3]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	43da      	mvns	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	029b      	lsls	r3, r3, #10
 8002140:	4013      	ands	r3, r2
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800214c:	4914      	ldr	r1, [pc, #80]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 800214e:	2284      	movs	r2, #132	; 0x84
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	58d3      	ldr	r3, [r2, r3]
 800215a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	43da      	mvns	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	4013      	ands	r3, r2
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800217a:	4909      	ldr	r1, [pc, #36]	; (80021a0 <HAL_GPIO_Init+0x2b8>)
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	40da      	lsrs	r2, r3
 8002190:	1e13      	subs	r3, r2, #0
 8002192:	d000      	beq.n	8002196 <HAL_GPIO_Init+0x2ae>
 8002194:	e6b0      	b.n	8001ef8 <HAL_GPIO_Init+0x10>
  }
}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b006      	add	sp, #24
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021800 	.word	0x40021800
 80021a4:	50000400 	.word	0x50000400
 80021a8:	50000800 	.word	0x50000800
 80021ac:	50000c00 	.word	0x50000c00

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	0008      	movs	r0, r1
 80021ba:	0011      	movs	r1, r2
 80021bc:	1cbb      	adds	r3, r7, #2
 80021be:	1c02      	adds	r2, r0, #0
 80021c0:	801a      	strh	r2, [r3, #0]
 80021c2:	1c7b      	adds	r3, r7, #1
 80021c4:	1c0a      	adds	r2, r1, #0
 80021c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c8:	1c7b      	adds	r3, r7, #1
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021d0:	1cbb      	adds	r3, r7, #2
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021d8:	e003      	b.n	80021e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021da:	1cbb      	adds	r3, r7, #2
 80021dc:	881a      	ldrh	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e08f      	b.n	800231e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2241      	movs	r2, #65	; 0x41
 8002202:	5c9b      	ldrb	r3, [r3, r2]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d107      	bne.n	800221a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2240      	movs	r2, #64	; 0x40
 800220e:	2100      	movs	r1, #0
 8002210:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0018      	movs	r0, r3
 8002216:	f7fe fd43 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2241      	movs	r2, #65	; 0x41
 800221e:	2124      	movs	r1, #36	; 0x24
 8002220:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	438a      	bics	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	493b      	ldr	r1, [pc, #236]	; (8002328 <HAL_I2C_Init+0x13c>)
 800223c:	400a      	ands	r2, r1
 800223e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4938      	ldr	r1, [pc, #224]	; (800232c <HAL_I2C_Init+0x140>)
 800224c:	400a      	ands	r2, r1
 800224e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d108      	bne.n	800226a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	0209      	lsls	r1, r1, #8
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e007      	b.n	800227a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2184      	movs	r1, #132	; 0x84
 8002274:	0209      	lsls	r1, r1, #8
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d109      	bne.n	8002296 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0109      	lsls	r1, r1, #4
 8002290:	430a      	orrs	r2, r1
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	e007      	b.n	80022a6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4923      	ldr	r1, [pc, #140]	; (8002330 <HAL_I2C_Init+0x144>)
 80022a2:	400a      	ands	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4920      	ldr	r1, [pc, #128]	; (8002334 <HAL_I2C_Init+0x148>)
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	491a      	ldr	r1, [pc, #104]	; (800232c <HAL_I2C_Init+0x140>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69d9      	ldr	r1, [r3, #28]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1a      	ldr	r2, [r3, #32]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2241      	movs	r2, #65	; 0x41
 800230a:	2120      	movs	r1, #32
 800230c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2242      	movs	r2, #66	; 0x42
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	f0ffffff 	.word	0xf0ffffff
 800232c:	ffff7fff 	.word	0xffff7fff
 8002330:	fffff7ff 	.word	0xfffff7ff
 8002334:	02008000 	.word	0x02008000

08002338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2241      	movs	r2, #65	; 0x41
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b20      	cmp	r3, #32
 800234c:	d138      	bne.n	80023c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2240      	movs	r2, #64	; 0x40
 8002352:	5c9b      	ldrb	r3, [r3, r2]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002358:	2302      	movs	r3, #2
 800235a:	e032      	b.n	80023c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2240      	movs	r2, #64	; 0x40
 8002360:	2101      	movs	r1, #1
 8002362:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2241      	movs	r2, #65	; 0x41
 8002368:	2124      	movs	r1, #36	; 0x24
 800236a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2101      	movs	r1, #1
 8002378:	438a      	bics	r2, r1
 800237a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4911      	ldr	r1, [pc, #68]	; (80023cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002388:	400a      	ands	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6819      	ldr	r1, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2241      	movs	r2, #65	; 0x41
 80023b0:	2120      	movs	r1, #32
 80023b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	2100      	movs	r1, #0
 80023ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e000      	b.n	80023c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023c0:	2302      	movs	r3, #2
  }
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	ffffefff 	.word	0xffffefff

080023d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2241      	movs	r2, #65	; 0x41
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d139      	bne.n	800245a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2240      	movs	r2, #64	; 0x40
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e033      	b.n	800245c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2240      	movs	r2, #64	; 0x40
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2241      	movs	r2, #65	; 0x41
 8002400:	2124      	movs	r1, #36	; 0x24
 8002402:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2101      	movs	r1, #1
 8002410:	438a      	bics	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a11      	ldr	r2, [pc, #68]	; (8002464 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2101      	movs	r1, #1
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2241      	movs	r2, #65	; 0x41
 800244a:	2120      	movs	r1, #32
 800244c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2240      	movs	r2, #64	; 0x40
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b004      	add	sp, #16
 8002462:	bd80      	pop	{r7, pc}
 8002464:	fffff0ff 	.word	0xfffff0ff

08002468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002476:	4013      	ands	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	429a      	cmp	r2, r3
 800248a:	d11f      	bne.n	80024cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	0013      	movs	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	189b      	adds	r3, r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4912      	ldr	r1, [pc, #72]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800249a:	0018      	movs	r0, r3
 800249c:	f7fd fe44 	bl	8000128 <__udivsi3>
 80024a0:	0003      	movs	r3, r0
 80024a2:	3301      	adds	r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024a6:	e008      	b.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e001      	b.n	80024ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e009      	b.n	80024ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	401a      	ands	r2, r3
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d0ed      	beq.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	0018      	movs	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b004      	add	sp, #16
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	40007000 	.word	0x40007000
 80024dc:	fffff9ff 	.word	0xfffff9ff
 80024e0:	20000000 	.word	0x20000000
 80024e4:	000f4240 	.word	0x000f4240

080024e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	23e0      	movs	r3, #224	; 0xe0
 80024f2:	01db      	lsls	r3, r3, #7
 80024f4:	4013      	ands	r3, r2
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e2fe      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
 800251a:	d100      	bne.n	800251e <HAL_RCC_OscConfig+0x1e>
 800251c:	e07c      	b.n	8002618 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251e:	4bc3      	ldr	r3, [pc, #780]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2238      	movs	r2, #56	; 0x38
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002528:	4bc0      	ldr	r3, [pc, #768]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2203      	movs	r2, #3
 800252e:	4013      	ands	r3, r2
 8002530:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b10      	cmp	r3, #16
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0x3e>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d002      	beq.n	8002544 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d10b      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	4bb9      	ldr	r3, [pc, #740]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	029b      	lsls	r3, r3, #10
 800254c:	4013      	ands	r3, r2
 800254e:	d062      	beq.n	8002616 <HAL_RCC_OscConfig+0x116>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d15e      	bne.n	8002616 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e2d9      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	429a      	cmp	r2, r3
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x78>
 8002568:	4bb0      	ldr	r3, [pc, #704]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4baf      	ldr	r3, [pc, #700]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0249      	lsls	r1, r1, #9
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e020      	b.n	80025ba <HAL_RCC_OscConfig+0xba>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	23a0      	movs	r3, #160	; 0xa0
 800257e:	02db      	lsls	r3, r3, #11
 8002580:	429a      	cmp	r2, r3
 8002582:	d10e      	bne.n	80025a2 <HAL_RCC_OscConfig+0xa2>
 8002584:	4ba9      	ldr	r3, [pc, #676]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4ba8      	ldr	r3, [pc, #672]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	02c9      	lsls	r1, r1, #11
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	4ba6      	ldr	r3, [pc, #664]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4ba5      	ldr	r3, [pc, #660]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	0249      	lsls	r1, r1, #9
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e00b      	b.n	80025ba <HAL_RCC_OscConfig+0xba>
 80025a2:	4ba2      	ldr	r3, [pc, #648]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4ba1      	ldr	r3, [pc, #644]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80025a8:	49a1      	ldr	r1, [pc, #644]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 80025aa:	400a      	ands	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	4b9f      	ldr	r3, [pc, #636]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b9e      	ldr	r3, [pc, #632]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80025b4:	499f      	ldr	r1, [pc, #636]	; (8002834 <HAL_RCC_OscConfig+0x334>)
 80025b6:	400a      	ands	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d014      	beq.n	80025ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fd45 	bl	8001050 <HAL_GetTick>
 80025c6:	0003      	movs	r3, r0
 80025c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fd40 	bl	8001050 <HAL_GetTick>
 80025d0:	0002      	movs	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e298      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025de:	4b93      	ldr	r3, [pc, #588]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	029b      	lsls	r3, r3, #10
 80025e6:	4013      	ands	r3, r2
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xcc>
 80025ea:	e015      	b.n	8002618 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fd30 	bl	8001050 <HAL_GetTick>
 80025f0:	0003      	movs	r3, r0
 80025f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f6:	f7fe fd2b 	bl	8001050 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b64      	cmp	r3, #100	; 0x64
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e283      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002608:	4b88      	ldr	r3, [pc, #544]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	029b      	lsls	r3, r3, #10
 8002610:	4013      	ands	r3, r2
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0xf6>
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002616:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2202      	movs	r2, #2
 800261e:	4013      	ands	r3, r2
 8002620:	d100      	bne.n	8002624 <HAL_RCC_OscConfig+0x124>
 8002622:	e099      	b.n	8002758 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002624:	4b81      	ldr	r3, [pc, #516]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2238      	movs	r2, #56	; 0x38
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800262e:	4b7f      	ldr	r3, [pc, #508]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2203      	movs	r2, #3
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b10      	cmp	r3, #16
 800263c:	d102      	bne.n	8002644 <HAL_RCC_OscConfig+0x144>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d002      	beq.n	800264a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d135      	bne.n	80026b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800264a:	4b78      	ldr	r3, [pc, #480]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4013      	ands	r3, r2
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x162>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e256      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4a74      	ldr	r2, [pc, #464]	; (8002838 <HAL_RCC_OscConfig+0x338>)
 8002668:	4013      	ands	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	021a      	lsls	r2, r3, #8
 8002672:	4b6e      	ldr	r3, [pc, #440]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002674:	430a      	orrs	r2, r1
 8002676:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d112      	bne.n	80026a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800267e:	4b6b      	ldr	r3, [pc, #428]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6e      	ldr	r2, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x33c>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	4b67      	ldr	r3, [pc, #412]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800268e:	430a      	orrs	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002692:	4b66      	ldr	r3, [pc, #408]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	0adb      	lsrs	r3, r3, #11
 8002698:	2207      	movs	r2, #7
 800269a:	4013      	ands	r3, r2
 800269c:	4a68      	ldr	r2, [pc, #416]	; (8002840 <HAL_RCC_OscConfig+0x340>)
 800269e:	40da      	lsrs	r2, r3
 80026a0:	4b68      	ldr	r3, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x344>)
 80026a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026a4:	4b68      	ldr	r3, [pc, #416]	; (8002848 <HAL_RCC_OscConfig+0x348>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7fe fc75 	bl	8000f98 <HAL_InitTick>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d051      	beq.n	8002756 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e22c      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d030      	beq.n	8002720 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026be:	4b5b      	ldr	r3, [pc, #364]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a5e      	ldr	r2, [pc, #376]	; (800283c <HAL_RCC_OscConfig+0x33c>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	4b57      	ldr	r3, [pc, #348]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80026d2:	4b56      	ldr	r3, [pc, #344]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b55      	ldr	r3, [pc, #340]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0049      	lsls	r1, r1, #1
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fcb6 	bl	8001050 <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ea:	f7fe fcb1 	bl	8001050 <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e209      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026fc:	4b4b      	ldr	r3, [pc, #300]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4013      	ands	r3, r2
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4b48      	ldr	r3, [pc, #288]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4a4a      	ldr	r2, [pc, #296]	; (8002838 <HAL_RCC_OscConfig+0x338>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	021a      	lsls	r2, r3, #8
 8002718:	4b44      	ldr	r3, [pc, #272]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	e01b      	b.n	8002758 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002720:	4b42      	ldr	r3, [pc, #264]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002726:	4949      	ldr	r1, [pc, #292]	; (800284c <HAL_RCC_OscConfig+0x34c>)
 8002728:	400a      	ands	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fc90 	bl	8001050 <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe fc8b 	bl	8001050 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1e3      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002748:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4013      	ands	r3, r2
 8002752:	d1f0      	bne.n	8002736 <HAL_RCC_OscConfig+0x236>
 8002754:	e000      	b.n	8002758 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002756:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2208      	movs	r2, #8
 800275e:	4013      	ands	r3, r2
 8002760:	d047      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002762:	4b32      	ldr	r3, [pc, #200]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2238      	movs	r2, #56	; 0x38
 8002768:	4013      	ands	r3, r2
 800276a:	2b18      	cmp	r3, #24
 800276c:	d10a      	bne.n	8002784 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d03c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d138      	bne.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e1c5      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d019      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 800278e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002790:	4b26      	ldr	r3, [pc, #152]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002792:	2101      	movs	r1, #1
 8002794:	430a      	orrs	r2, r1
 8002796:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fc5a 	bl	8001050 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a2:	f7fe fc55 	bl	8001050 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e1ad      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80027b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	d0f1      	beq.n	80027a2 <HAL_RCC_OscConfig+0x2a2>
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80027c0:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80027c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80027c6:	2101      	movs	r1, #1
 80027c8:	438a      	bics	r2, r1
 80027ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fc40 	bl	8001050 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d6:	f7fe fc3b 	bl	8001050 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e193      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027e8:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 80027ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ec:	2202      	movs	r2, #2
 80027ee:	4013      	ands	r3, r2
 80027f0:	d1f1      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2204      	movs	r2, #4
 80027f8:	4013      	ands	r3, r2
 80027fa:	d100      	bne.n	80027fe <HAL_RCC_OscConfig+0x2fe>
 80027fc:	e0c6      	b.n	800298c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	231f      	movs	r3, #31
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2238      	movs	r2, #56	; 0x38
 800280c:	4013      	ands	r3, r2
 800280e:	2b20      	cmp	r3, #32
 8002810:	d11e      	bne.n	8002850 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_OscConfig+0x32c>)
 8002814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d100      	bne.n	800281e <HAL_RCC_OscConfig+0x31e>
 800281c:	e0b6      	b.n	800298c <HAL_RCC_OscConfig+0x48c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d000      	beq.n	8002828 <HAL_RCC_OscConfig+0x328>
 8002826:	e0b1      	b.n	800298c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e171      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
 800282c:	40021000 	.word	0x40021000
 8002830:	fffeffff 	.word	0xfffeffff
 8002834:	fffbffff 	.word	0xfffbffff
 8002838:	ffff80ff 	.word	0xffff80ff
 800283c:	ffffc7ff 	.word	0xffffc7ff
 8002840:	00f42400 	.word	0x00f42400
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004
 800284c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002850:	4bb1      	ldr	r3, [pc, #708]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	055b      	lsls	r3, r3, #21
 8002858:	4013      	ands	r3, r2
 800285a:	d101      	bne.n	8002860 <HAL_RCC_OscConfig+0x360>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_RCC_OscConfig+0x362>
 8002860:	2300      	movs	r3, #0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d011      	beq.n	800288a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	4bac      	ldr	r3, [pc, #688]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800286a:	4bab      	ldr	r3, [pc, #684]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	0549      	lsls	r1, r1, #21
 8002870:	430a      	orrs	r2, r1
 8002872:	63da      	str	r2, [r3, #60]	; 0x3c
 8002874:	4ba8      	ldr	r3, [pc, #672]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	055b      	lsls	r3, r3, #21
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002882:	231f      	movs	r3, #31
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	2201      	movs	r2, #1
 8002888:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288a:	4ba4      	ldr	r3, [pc, #656]	; (8002b1c <HAL_RCC_OscConfig+0x61c>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4013      	ands	r3, r2
 8002894:	d11a      	bne.n	80028cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002896:	4ba1      	ldr	r3, [pc, #644]	; (8002b1c <HAL_RCC_OscConfig+0x61c>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4ba0      	ldr	r3, [pc, #640]	; (8002b1c <HAL_RCC_OscConfig+0x61c>)
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	0049      	lsls	r1, r1, #1
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80028a4:	f7fe fbd4 	bl	8001050 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe fbcf 	bl	8001050 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e127      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c0:	4b96      	ldr	r3, [pc, #600]	; (8002b1c <HAL_RCC_OscConfig+0x61c>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4013      	ands	r3, r2
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x3e2>
 80028d4:	4b90      	ldr	r3, [pc, #576]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80028d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028d8:	4b8f      	ldr	r3, [pc, #572]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80028da:	2101      	movs	r1, #1
 80028dc:	430a      	orrs	r2, r1
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x41c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x404>
 80028ea:	4b8b      	ldr	r3, [pc, #556]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80028ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028ee:	4b8a      	ldr	r3, [pc, #552]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80028f0:	2104      	movs	r1, #4
 80028f2:	430a      	orrs	r2, r1
 80028f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80028f6:	4b88      	ldr	r3, [pc, #544]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80028f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028fa:	4b87      	ldr	r3, [pc, #540]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	65da      	str	r2, [r3, #92]	; 0x5c
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x41c>
 8002904:	4b84      	ldr	r3, [pc, #528]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002906:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002908:	4b83      	ldr	r3, [pc, #524]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 800290a:	2101      	movs	r1, #1
 800290c:	438a      	bics	r2, r1
 800290e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002910:	4b81      	ldr	r3, [pc, #516]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002912:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002914:	4b80      	ldr	r3, [pc, #512]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002916:	2104      	movs	r1, #4
 8002918:	438a      	bics	r2, r1
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d014      	beq.n	800294e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fb94 	bl	8001050 <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292c:	e009      	b.n	8002942 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fb8f 	bl	8001050 <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <HAL_RCC_OscConfig+0x620>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0e6      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002942:	4b75      	ldr	r3, [pc, #468]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	2202      	movs	r2, #2
 8002948:	4013      	ands	r3, r2
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x42e>
 800294c:	e013      	b.n	8002976 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fb7f 	bl	8001050 <HAL_GetTick>
 8002952:	0003      	movs	r3, r0
 8002954:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002956:	e009      	b.n	800296c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe fb7a 	bl	8001050 <HAL_GetTick>
 800295c:	0002      	movs	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	4a6f      	ldr	r2, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x620>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0d1      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800296c:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	2202      	movs	r2, #2
 8002972:	4013      	ands	r3, r2
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002976:	231f      	movs	r3, #31
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b65      	ldr	r3, [pc, #404]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002986:	4967      	ldr	r1, [pc, #412]	; (8002b24 <HAL_RCC_OscConfig+0x624>)
 8002988:	400a      	ands	r2, r1
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d100      	bne.n	8002996 <HAL_RCC_OscConfig+0x496>
 8002994:	e0bb      	b.n	8002b0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002996:	4b60      	ldr	r3, [pc, #384]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2238      	movs	r2, #56	; 0x38
 800299c:	4013      	ands	r3, r2
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d100      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4a4>
 80029a2:	e07b      	b.n	8002a9c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d156      	bne.n	8002a5a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ac:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80029b2:	495d      	ldr	r1, [pc, #372]	; (8002b28 <HAL_RCC_OscConfig+0x628>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fb4a 	bl	8001050 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fb45 	bl	8001050 <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e09d      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	049b      	lsls	r3, r3, #18
 80029dc:	4013      	ands	r3, r2
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e0:	4b4d      	ldr	r3, [pc, #308]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a51      	ldr	r2, [pc, #324]	; (8002b2c <HAL_RCC_OscConfig+0x62c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1a      	ldr	r2, [r3, #32]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	4b42      	ldr	r3, [pc, #264]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a14:	4b40      	ldr	r3, [pc, #256]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	0449      	lsls	r1, r1, #17
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	4b3c      	ldr	r3, [pc, #240]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	0549      	lsls	r1, r1, #21
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fb0e 	bl	8001050 <HAL_GetTick>
 8002a34:	0003      	movs	r3, r0
 8002a36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe fb09 	bl	8001050 <HAL_GetTick>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e061      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	049b      	lsls	r3, r3, #18
 8002a54:	4013      	ands	r3, r2
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x53a>
 8002a58:	e059      	b.n	8002b0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a60:	4931      	ldr	r1, [pc, #196]	; (8002b28 <HAL_RCC_OscConfig+0x628>)
 8002a62:	400a      	ands	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe faf3 	bl	8001050 <HAL_GetTick>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe faee 	bl	8001050 <HAL_GetTick>
 8002a74:	0002      	movs	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e046      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a82:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	049b      	lsls	r3, r3, #18
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002a94:	4926      	ldr	r1, [pc, #152]	; (8002b30 <HAL_RCC_OscConfig+0x630>)
 8002a96:	400a      	ands	r2, r1
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e038      	b.n	8002b0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e033      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <HAL_RCC_OscConfig+0x618>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d126      	bne.n	8002b0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2270      	movs	r2, #112	; 0x70
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d11f      	bne.n	8002b0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	23fe      	movs	r3, #254	; 0xfe
 8002ace:	01db      	lsls	r3, r3, #7
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d116      	bne.n	8002b0a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	23f8      	movs	r3, #248	; 0xf8
 8002ae0:	039b      	lsls	r3, r3, #14
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d10e      	bne.n	8002b0a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	23e0      	movs	r3, #224	; 0xe0
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	401a      	ands	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	0f5b      	lsrs	r3, r3, #29
 8002b00:	075a      	lsls	r2, r3, #29
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b008      	add	sp, #32
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	00001388 	.word	0x00001388
 8002b24:	efffffff 	.word	0xefffffff
 8002b28:	feffffff 	.word	0xfeffffff
 8002b2c:	11c1808c 	.word	0x11c1808c
 8002b30:	eefefffc 	.word	0xeefefffc

08002b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0e9      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b76      	ldr	r3, [pc, #472]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	4013      	ands	r3, r2
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d91e      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	4b70      	ldr	r3, [pc, #448]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b68:	f7fe fa72 	bl	8001050 <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b70:	e009      	b.n	8002b86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b72:	f7fe fa6d 	bl	8001050 <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <HAL_RCC_ClockConfig+0x1f4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e0ca      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b86:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1ee      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d015      	beq.n	8002bca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d006      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ba8:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b5f      	ldr	r3, [pc, #380]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002bae:	21e0      	movs	r1, #224	; 0xe0
 8002bb0:	01c9      	lsls	r1, r1, #7
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb6:	4b5d      	ldr	r3, [pc, #372]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4a5d      	ldr	r2, [pc, #372]	; (8002d30 <HAL_RCC_ClockConfig+0x1fc>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d057      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bdc:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	029b      	lsls	r3, r3, #10
 8002be4:	4013      	ands	r3, r2
 8002be6:	d12b      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e097      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf4:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	049b      	lsls	r3, r3, #18
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d11f      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e08b      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0c:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4013      	ands	r3, r2
 8002c16:	d113      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e07f      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c24:	4b41      	ldr	r3, [pc, #260]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d108      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e074      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c32:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	2202      	movs	r2, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e06d      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2207      	movs	r2, #7
 8002c46:	4393      	bics	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c54:	f7fe f9fc 	bl	8001050 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5c:	e009      	b.n	8002c72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5e:	f7fe f9f7 	bl	8001050 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <HAL_RCC_ClockConfig+0x1f4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e054      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2e      	ldr	r3, [pc, #184]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2238      	movs	r2, #56	; 0x38
 8002c78:	401a      	ands	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1ec      	bne.n	8002c5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2207      	movs	r2, #7
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d21e      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2207      	movs	r2, #7
 8002c98:	4393      	bics	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe f9d4 	bl	8001050 <HAL_GetTick>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cac:	e009      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cae:	f7fe f9cf 	bl	8001050 <HAL_GetTick>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_RCC_ClockConfig+0x1f4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e02c      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	4013      	ands	r3, r2
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d1ee      	bne.n	8002cae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <HAL_RCC_ClockConfig+0x200>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002cee:	f000 f829 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8002cf2:	0001      	movs	r1, r0
 8002cf4:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_RCC_ClockConfig+0x204>)
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	58d3      	ldr	r3, [r2, r3]
 8002d04:	221f      	movs	r2, #31
 8002d06:	4013      	ands	r3, r2
 8002d08:	000a      	movs	r2, r1
 8002d0a:	40da      	lsrs	r2, r3
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_ClockConfig+0x208>)
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_ClockConfig+0x20c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7fe f93f 	bl	8000f98 <HAL_InitTick>
 8002d1a:	0003      	movs	r3, r0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40022000 	.word	0x40022000
 8002d28:	00001388 	.word	0x00001388
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	fffff0ff 	.word	0xfffff0ff
 8002d34:	ffff8fff 	.word	0xffff8fff
 8002d38:	08004f04 	.word	0x08004f04
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	20000004 	.word	0x20000004

08002d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4a:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2238      	movs	r2, #56	; 0x38
 8002d50:	4013      	ands	r3, r2
 8002d52:	d10f      	bne.n	8002d74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d54:	4b39      	ldr	r3, [pc, #228]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0adb      	lsrs	r3, r3, #11
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2201      	movs	r2, #1
 8002d60:	409a      	lsls	r2, r3
 8002d62:	0013      	movs	r3, r2
 8002d64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002d66:	6839      	ldr	r1, [r7, #0]
 8002d68:	4835      	ldr	r0, [pc, #212]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d6a:	f7fd f9dd 	bl	8000128 <__udivsi3>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	e05d      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d74:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2238      	movs	r2, #56	; 0x38
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d80:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	e054      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d86:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2238      	movs	r2, #56	; 0x38
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d138      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d92:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2203      	movs	r2, #3
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d9c:	4b27      	ldr	r3, [pc, #156]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	2207      	movs	r2, #7
 8002da4:	4013      	ands	r3, r2
 8002da6:	3301      	adds	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d10d      	bne.n	8002dcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	4824      	ldr	r0, [pc, #144]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x100>)
 8002db4:	f7fd f9b8 	bl	8000128 <__udivsi3>
 8002db8:	0003      	movs	r3, r0
 8002dba:	0019      	movs	r1, r3
 8002dbc:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	0a1b      	lsrs	r3, r3, #8
 8002dc2:	227f      	movs	r2, #127	; 0x7f
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	434b      	muls	r3, r1
 8002dc8:	617b      	str	r3, [r7, #20]
        break;
 8002dca:	e00d      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	481c      	ldr	r0, [pc, #112]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002dd0:	f7fd f9aa 	bl	8000128 <__udivsi3>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	227f      	movs	r2, #127	; 0x7f
 8002de0:	4013      	ands	r3, r2
 8002de2:	434b      	muls	r3, r1
 8002de4:	617b      	str	r3, [r7, #20]
        break;
 8002de6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0f5b      	lsrs	r3, r3, #29
 8002dee:	2207      	movs	r2, #7
 8002df0:	4013      	ands	r3, r2
 8002df2:	3301      	adds	r3, #1
 8002df4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	6978      	ldr	r0, [r7, #20]
 8002dfa:	f7fd f995 	bl	8000128 <__udivsi3>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e015      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e04:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2238      	movs	r2, #56	; 0x38
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d103      	bne.n	8002e18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2238      	movs	r2, #56	; 0x38
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b18      	cmp	r3, #24
 8002e22:	d103      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002e24:	23fa      	movs	r3, #250	; 0xfa
 8002e26:	01db      	lsls	r3, r3, #7
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	e001      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e30:	693b      	ldr	r3, [r7, #16]
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b006      	add	sp, #24
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	00f42400 	.word	0x00f42400
 8002e44:	007a1200 	.word	0x007a1200

08002e48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b02      	ldr	r3, [pc, #8]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	20000000 	.word	0x20000000

08002e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e5c:	b5b0      	push	{r4, r5, r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002e60:	f7ff fff2 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e64:	0004      	movs	r4, r0
 8002e66:	f7ff fb3f 	bl	80024e8 <LL_RCC_GetAPB1Prescaler>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	0b1a      	lsrs	r2, r3, #12
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	58d3      	ldr	r3, [r2, r3]
 8002e74:	221f      	movs	r2, #31
 8002e76:	4013      	ands	r3, r2
 8002e78:	40dc      	lsrs	r4, r3
 8002e7a:	0023      	movs	r3, r4
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bdb0      	pop	{r4, r5, r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	08004f44 	.word	0x08004f44

08002e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e90:	2313      	movs	r3, #19
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e98:	2312      	movs	r3, #18
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d100      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002eac:	e0a3      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eae:	2011      	movs	r0, #17
 8002eb0:	183b      	adds	r3, r7, r0
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4bc3      	ldr	r3, [pc, #780]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	055b      	lsls	r3, r3, #21
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d110      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4bc0      	ldr	r3, [pc, #768]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec6:	4bbf      	ldr	r3, [pc, #764]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	0549      	lsls	r1, r1, #21
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ed0:	4bbc      	ldr	r3, [pc, #752]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	055b      	lsls	r3, r3, #21
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ede:	183b      	adds	r3, r7, r0
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee4:	4bb8      	ldr	r3, [pc, #736]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4bb7      	ldr	r3, [pc, #732]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	0049      	lsls	r1, r1, #1
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe f8ad 	bl	8001050 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002efa:	e00b      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7fe f8a8 	bl	8001050 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d904      	bls.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f0a:	2313      	movs	r3, #19
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2203      	movs	r2, #3
 8002f10:	701a      	strb	r2, [r3, #0]
        break;
 8002f12:	e005      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f14:	4bac      	ldr	r3, [pc, #688]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d0ed      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002f20:	2313      	movs	r3, #19
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d154      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f2a:	4ba6      	ldr	r3, [pc, #664]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f2e:	23c0      	movs	r3, #192	; 0xc0
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4013      	ands	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d019      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d014      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f46:	4b9f      	ldr	r3, [pc, #636]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	4aa0      	ldr	r2, [pc, #640]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f50:	4b9c      	ldr	r3, [pc, #624]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f54:	4b9b      	ldr	r3, [pc, #620]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f56:	2180      	movs	r1, #128	; 0x80
 8002f58:	0249      	lsls	r1, r1, #9
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f5e:	4b99      	ldr	r3, [pc, #612]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f62:	4b98      	ldr	r3, [pc, #608]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f64:	499a      	ldr	r1, [pc, #616]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002f66:	400a      	ands	r2, r1
 8002f68:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f6a:	4b96      	ldr	r3, [pc, #600]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2201      	movs	r2, #1
 8002f74:	4013      	ands	r3, r2
 8002f76:	d016      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe f86a 	bl	8001050 <HAL_GetTick>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f80:	e00c      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fe f865 	bl	8001050 <HAL_GetTick>
 8002f86:	0002      	movs	r2, r0
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	4a91      	ldr	r2, [pc, #580]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d904      	bls.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002f92:	2313      	movs	r3, #19
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2203      	movs	r2, #3
 8002f98:	701a      	strb	r2, [r3, #0]
            break;
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9c:	4b89      	ldr	r3, [pc, #548]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d0ed      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002fa6:	2313      	movs	r3, #19
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb0:	4b84      	ldr	r3, [pc, #528]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	4a85      	ldr	r2, [pc, #532]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fbe:	4b81      	ldr	r3, [pc, #516]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fc4:	e00c      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fc6:	2312      	movs	r3, #18
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2213      	movs	r2, #19
 8002fcc:	18ba      	adds	r2, r7, r2
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e005      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	2312      	movs	r3, #18
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	2213      	movs	r2, #19
 8002fda:	18ba      	adds	r2, r7, r2
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fe0:	2311      	movs	r3, #17
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fee:	4b75      	ldr	r3, [pc, #468]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff0:	4979      	ldr	r1, [pc, #484]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d009      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003000:	4b70      	ldr	r3, [pc, #448]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	2203      	movs	r2, #3
 8003006:	4393      	bics	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003010:	430a      	orrs	r2, r1
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2202      	movs	r2, #2
 800301a:	4013      	ands	r3, r2
 800301c:	d009      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800301e:	4b69      	ldr	r3, [pc, #420]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	220c      	movs	r2, #12
 8003024:	4393      	bics	r3, r2
 8003026:	0019      	movs	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	4b65      	ldr	r3, [pc, #404]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800302e:	430a      	orrs	r2, r1
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2210      	movs	r2, #16
 8003038:	4013      	ands	r3, r2
 800303a:	d009      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800303c:	4b61      	ldr	r3, [pc, #388]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800303e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003040:	4a66      	ldr	r2, [pc, #408]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003042:	4013      	ands	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	4b5e      	ldr	r3, [pc, #376]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800304c:	430a      	orrs	r2, r1
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4013      	ands	r3, r2
 800305a:	d009      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800305c:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	4a5f      	ldr	r2, [pc, #380]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003062:	4013      	ands	r3, r2
 8003064:	0019      	movs	r1, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800306c:	430a      	orrs	r2, r1
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4013      	ands	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800307c:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	4a58      	ldr	r2, [pc, #352]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003082:	4013      	ands	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	4b4e      	ldr	r3, [pc, #312]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800308c:	430a      	orrs	r2, r1
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2220      	movs	r2, #32
 8003096:	4013      	ands	r3, r2
 8003098:	d009      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800309a:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030aa:	430a      	orrs	r2, r1
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	01db      	lsls	r3, r3, #7
 80030b6:	4013      	ands	r3, r2
 80030b8:	d015      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030ba:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	0899      	lsrs	r1, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1a      	ldr	r2, [r3, #32]
 80030c6:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c8:	430a      	orrs	r2, r1
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1a      	ldr	r2, [r3, #32]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	05db      	lsls	r3, r3, #23
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d106      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80030d8:	4b3a      	ldr	r3, [pc, #232]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4b39      	ldr	r3, [pc, #228]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	0249      	lsls	r1, r1, #9
 80030e2:	430a      	orrs	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	031b      	lsls	r3, r3, #12
 80030ee:	4013      	ands	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030f2:	4b34      	ldr	r3, [pc, #208]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	2240      	movs	r2, #64	; 0x40
 80030f8:	4393      	bics	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003100:	4b30      	ldr	r3, [pc, #192]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003102:	430a      	orrs	r2, r1
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	039b      	lsls	r3, r3, #14
 800310e:	4013      	ands	r3, r2
 8003110:	d016      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003112:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	4a35      	ldr	r2, [pc, #212]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003122:	430a      	orrs	r2, r1
 8003124:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	03db      	lsls	r3, r3, #15
 800312e:	429a      	cmp	r2, r3
 8003130:	d106      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	0449      	lsls	r1, r1, #17
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	03db      	lsls	r3, r3, #15
 8003148:	4013      	ands	r3, r2
 800314a:	d016      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800315c:	430a      	orrs	r2, r1
 800315e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	045b      	lsls	r3, r3, #17
 8003168:	429a      	cmp	r2, r3
 800316a:	d106      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003172:	2180      	movs	r1, #128	; 0x80
 8003174:	0449      	lsls	r1, r1, #17
 8003176:	430a      	orrs	r2, r1
 8003178:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	4013      	ands	r3, r2
 8003184:	d016      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800318c:	4013      	ands	r3, r2
 800318e:	0019      	movs	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003196:	430a      	orrs	r2, r1
 8003198:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	01db      	lsls	r3, r3, #7
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d106      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ac:	2180      	movs	r1, #128	; 0x80
 80031ae:	0249      	lsls	r1, r1, #9
 80031b0:	430a      	orrs	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031b4:	2312      	movs	r3, #18
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	781b      	ldrb	r3, [r3, #0]
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b006      	add	sp, #24
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40007000 	.word	0x40007000
 80031cc:	fffffcff 	.word	0xfffffcff
 80031d0:	fffeffff 	.word	0xfffeffff
 80031d4:	00001388 	.word	0x00001388
 80031d8:	efffffff 	.word	0xefffffff
 80031dc:	fffff3ff 	.word	0xfffff3ff
 80031e0:	fff3ffff 	.word	0xfff3ffff
 80031e4:	ffcfffff 	.word	0xffcfffff
 80031e8:	ffffcfff 	.word	0xffffcfff
 80031ec:	ffbfffff 	.word	0xffbfffff
 80031f0:	feffffff 	.word	0xfeffffff
 80031f4:	ffff3fff 	.word	0xffff3fff

080031f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e04a      	b.n	80032a0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	223d      	movs	r2, #61	; 0x3d
 800320e:	5c9b      	ldrb	r3, [r3, r2]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	223c      	movs	r2, #60	; 0x3c
 800321a:	2100      	movs	r1, #0
 800321c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	0018      	movs	r0, r3
 8003222:	f7fd fd9f 	bl	8000d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	223d      	movs	r2, #61	; 0x3d
 800322a:	2102      	movs	r1, #2
 800322c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	0019      	movs	r1, r3
 8003238:	0010      	movs	r0, r2
 800323a:	f000 f90b 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2248      	movs	r2, #72	; 0x48
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	223e      	movs	r2, #62	; 0x3e
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	223f      	movs	r2, #63	; 0x3f
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2240      	movs	r2, #64	; 0x40
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2241      	movs	r2, #65	; 0x41
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2242      	movs	r2, #66	; 0x42
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2243      	movs	r2, #67	; 0x43
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2244      	movs	r2, #68	; 0x44
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2245      	movs	r2, #69	; 0x45
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2246      	movs	r2, #70	; 0x46
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2247      	movs	r2, #71	; 0x47
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223d      	movs	r2, #61	; 0x3d
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b2:	230f      	movs	r3, #15
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	223c      	movs	r2, #60	; 0x3c
 80032be:	5c9b      	ldrb	r3, [r3, r2]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_TIM_ConfigClockSource+0x20>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0bc      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x19a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	223c      	movs	r2, #60	; 0x3c
 80032cc:	2101      	movs	r1, #1
 80032ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	223d      	movs	r2, #61	; 0x3d
 80032d4:	2102      	movs	r1, #2
 80032d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4a5a      	ldr	r2, [pc, #360]	; (800344c <HAL_TIM_ConfigClockSource+0x1a4>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4a59      	ldr	r2, [pc, #356]	; (8003450 <HAL_TIM_ConfigClockSource+0x1a8>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	0192      	lsls	r2, r2, #6
 8003300:	4293      	cmp	r3, r2
 8003302:	d040      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0xde>
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	0192      	lsls	r2, r2, #6
 8003308:	4293      	cmp	r3, r2
 800330a:	d900      	bls.n	800330e <HAL_TIM_ConfigClockSource+0x66>
 800330c:	e088      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x178>
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	0152      	lsls	r2, r2, #5
 8003312:	4293      	cmp	r3, r2
 8003314:	d100      	bne.n	8003318 <HAL_TIM_ConfigClockSource+0x70>
 8003316:	e088      	b.n	800342a <HAL_TIM_ConfigClockSource+0x182>
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	0152      	lsls	r2, r2, #5
 800331c:	4293      	cmp	r3, r2
 800331e:	d900      	bls.n	8003322 <HAL_TIM_ConfigClockSource+0x7a>
 8003320:	e07e      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x178>
 8003322:	2b70      	cmp	r3, #112	; 0x70
 8003324:	d018      	beq.n	8003358 <HAL_TIM_ConfigClockSource+0xb0>
 8003326:	d900      	bls.n	800332a <HAL_TIM_ConfigClockSource+0x82>
 8003328:	e07a      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x178>
 800332a:	2b60      	cmp	r3, #96	; 0x60
 800332c:	d04f      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x126>
 800332e:	d900      	bls.n	8003332 <HAL_TIM_ConfigClockSource+0x8a>
 8003330:	e076      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x178>
 8003332:	2b50      	cmp	r3, #80	; 0x50
 8003334:	d03b      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x106>
 8003336:	d900      	bls.n	800333a <HAL_TIM_ConfigClockSource+0x92>
 8003338:	e072      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x178>
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	d057      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x146>
 800333e:	d900      	bls.n	8003342 <HAL_TIM_ConfigClockSource+0x9a>
 8003340:	e06e      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x178>
 8003342:	2b30      	cmp	r3, #48	; 0x30
 8003344:	d063      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x166>
 8003346:	d86b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x178>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d060      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x166>
 800334c:	d868      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x178>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d05d      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x166>
 8003352:	2b10      	cmp	r3, #16
 8003354:	d05b      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x166>
 8003356:	e063      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003368:	f000 f97e 	bl	8003668 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2277      	movs	r2, #119	; 0x77
 8003378:	4313      	orrs	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	609a      	str	r2, [r3, #8]
      break;
 8003384:	e052      	b.n	800342c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003396:	f000 f967 	bl	8003668 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	01c9      	lsls	r1, r1, #7
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
      break;
 80033ac:	e03e      	b.n	800342c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	001a      	movs	r2, r3
 80033bc:	f000 f8d8 	bl	8003570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2150      	movs	r1, #80	; 0x50
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f932 	bl	8003630 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e02e      	b.n	800342c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	001a      	movs	r2, r3
 80033dc:	f000 f8f6 	bl	80035cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2160      	movs	r1, #96	; 0x60
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 f922 	bl	8003630 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e01e      	b.n	800342c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	001a      	movs	r2, r3
 80033fc:	f000 f8b8 	bl	8003570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2140      	movs	r1, #64	; 0x40
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f912 	bl	8003630 <TIM_ITRx_SetConfig>
      break;
 800340c:	e00e      	b.n	800342c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	0019      	movs	r1, r3
 8003418:	0010      	movs	r0, r2
 800341a:	f000 f909 	bl	8003630 <TIM_ITRx_SetConfig>
      break;
 800341e:	e005      	b.n	800342c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003420:	230f      	movs	r3, #15
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
      break;
 8003428:	e000      	b.n	800342c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800342a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	223d      	movs	r2, #61	; 0x3d
 8003430:	2101      	movs	r1, #1
 8003432:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	223c      	movs	r2, #60	; 0x3c
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]

  return status;
 800343c:	230f      	movs	r3, #15
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	781b      	ldrb	r3, [r3, #0]
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b004      	add	sp, #16
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	ffceff88 	.word	0xffceff88
 8003450:	ffff00ff 	.word	0xffff00ff

08003454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a3b      	ldr	r2, [pc, #236]	; (8003554 <TIM_Base_SetConfig+0x100>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d008      	beq.n	800347e <TIM_Base_SetConfig+0x2a>
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	05db      	lsls	r3, r3, #23
 8003472:	429a      	cmp	r2, r3
 8003474:	d003      	beq.n	800347e <TIM_Base_SetConfig+0x2a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a37      	ldr	r2, [pc, #220]	; (8003558 <TIM_Base_SetConfig+0x104>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d108      	bne.n	8003490 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2270      	movs	r2, #112	; 0x70
 8003482:	4393      	bics	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a30      	ldr	r2, [pc, #192]	; (8003554 <TIM_Base_SetConfig+0x100>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d018      	beq.n	80034ca <TIM_Base_SetConfig+0x76>
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	05db      	lsls	r3, r3, #23
 800349e:	429a      	cmp	r2, r3
 80034a0:	d013      	beq.n	80034ca <TIM_Base_SetConfig+0x76>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2c      	ldr	r2, [pc, #176]	; (8003558 <TIM_Base_SetConfig+0x104>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00f      	beq.n	80034ca <TIM_Base_SetConfig+0x76>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2b      	ldr	r2, [pc, #172]	; (800355c <TIM_Base_SetConfig+0x108>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_Base_SetConfig+0x76>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <TIM_Base_SetConfig+0x10c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0x76>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a29      	ldr	r2, [pc, #164]	; (8003564 <TIM_Base_SetConfig+0x110>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0x76>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a28      	ldr	r2, [pc, #160]	; (8003568 <TIM_Base_SetConfig+0x114>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a27      	ldr	r2, [pc, #156]	; (800356c <TIM_Base_SetConfig+0x118>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2280      	movs	r2, #128	; 0x80
 80034e0:	4393      	bics	r3, r2
 80034e2:	001a      	movs	r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a13      	ldr	r2, [pc, #76]	; (8003554 <TIM_Base_SetConfig+0x100>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00b      	beq.n	8003522 <TIM_Base_SetConfig+0xce>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <TIM_Base_SetConfig+0x10c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_Base_SetConfig+0xce>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a13      	ldr	r2, [pc, #76]	; (8003564 <TIM_Base_SetConfig+0x110>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_Base_SetConfig+0xce>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a12      	ldr	r2, [pc, #72]	; (8003568 <TIM_Base_SetConfig+0x114>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d103      	bne.n	800352a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2201      	movs	r2, #1
 8003536:	4013      	ands	r3, r2
 8003538:	2b01      	cmp	r3, #1
 800353a:	d106      	bne.n	800354a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2201      	movs	r2, #1
 8003542:	4393      	bics	r3, r2
 8003544:	001a      	movs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]
  }
}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40000400 	.word	0x40000400
 800355c:	40002000 	.word	0x40002000
 8003560:	40014000 	.word	0x40014000
 8003564:	40014400 	.word	0x40014400
 8003568:	40014800 	.word	0x40014800
 800356c:	fffffcff 	.word	0xfffffcff

08003570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	2201      	movs	r2, #1
 8003588:	4393      	bics	r3, r2
 800358a:	001a      	movs	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	22f0      	movs	r2, #240	; 0xf0
 800359a:	4393      	bics	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	220a      	movs	r2, #10
 80035ac:	4393      	bics	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	621a      	str	r2, [r3, #32]
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b006      	add	sp, #24
 80035ca:	bd80      	pop	{r7, pc}

080035cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	2210      	movs	r2, #16
 80035e4:	4393      	bics	r3, r2
 80035e6:	001a      	movs	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4a0d      	ldr	r2, [pc, #52]	; (800362c <TIM_TI2_ConfigInputStage+0x60>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	031b      	lsls	r3, r3, #12
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	22a0      	movs	r2, #160	; 0xa0
 8003608:	4393      	bics	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	b006      	add	sp, #24
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	ffff0fff 	.word	0xffff0fff

08003630 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a08      	ldr	r2, [pc, #32]	; (8003664 <TIM_ITRx_SetConfig+0x34>)
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	2207      	movs	r2, #7
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b004      	add	sp, #16
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	ffcfff8f 	.word	0xffcfff8f

08003668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <TIM_ETR_SetConfig+0x3c>)
 8003680:	4013      	ands	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	021a      	lsls	r2, r3, #8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	431a      	orrs	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4313      	orrs	r3, r2
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	609a      	str	r2, [r3, #8]
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	b006      	add	sp, #24
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	ffff00ff 	.word	0xffff00ff

080036a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223c      	movs	r2, #60	; 0x3c
 80036b6:	5c9b      	ldrb	r3, [r3, r2]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036bc:	2302      	movs	r3, #2
 80036be:	e055      	b.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	223c      	movs	r2, #60	; 0x3c
 80036c4:	2101      	movs	r1, #1
 80036c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	223d      	movs	r2, #61	; 0x3d
 80036cc:	2102      	movs	r1, #2
 80036ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a23      	ldr	r2, [pc, #140]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d108      	bne.n	80036fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a22      	ldr	r2, [pc, #136]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2270      	movs	r2, #112	; 0x70
 8003700:	4393      	bics	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a16      	ldr	r2, [pc, #88]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00f      	beq.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	05db      	lsls	r3, r3, #23
 8003728:	429a      	cmp	r2, r3
 800372a:	d009      	beq.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a11      	ldr	r2, [pc, #68]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10c      	bne.n	800375a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2280      	movs	r2, #128	; 0x80
 8003744:	4393      	bics	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	4313      	orrs	r3, r2
 8003750:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	223d      	movs	r2, #61	; 0x3d
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	223c      	movs	r2, #60	; 0x3c
 8003766:	2100      	movs	r1, #0
 8003768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012c00 	.word	0x40012c00
 8003778:	ff0fffff 	.word	0xff0fffff
 800377c:	40000400 	.word	0x40000400
 8003780:	40014000 	.word	0x40014000

08003784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e046      	b.n	8003824 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2288      	movs	r2, #136	; 0x88
 800379a:	589b      	ldr	r3, [r3, r2]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d107      	bne.n	80037b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2284      	movs	r2, #132	; 0x84
 80037a4:	2100      	movs	r1, #0
 80037a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0018      	movs	r0, r3
 80037ac:	f7fd faf6 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2288      	movs	r2, #136	; 0x88
 80037b4:	2124      	movs	r1, #36	; 0x24
 80037b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2101      	movs	r1, #1
 80037c4:	438a      	bics	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 fb8e 	bl	8003ef4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 f8cc 	bl	8003978 <UART_SetConfig>
 80037e0:	0003      	movs	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e01c      	b.n	8003824 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	490d      	ldr	r1, [pc, #52]	; (800382c <HAL_UART_Init+0xa8>)
 80037f6:	400a      	ands	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	212a      	movs	r1, #42	; 0x2a
 8003806:	438a      	bics	r2, r1
 8003808:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fc1d 	bl	800405c <UART_CheckIdleState>
 8003822:	0003      	movs	r3, r0
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	b002      	add	sp, #8
 800382a:	bd80      	pop	{r7, pc}
 800382c:	ffffb7ff 	.word	0xffffb7ff

08003830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	1dbb      	adds	r3, r7, #6
 800383e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2288      	movs	r2, #136	; 0x88
 8003844:	589b      	ldr	r3, [r3, r2]
 8003846:	2b20      	cmp	r3, #32
 8003848:	d000      	beq.n	800384c <HAL_UART_Transmit+0x1c>
 800384a:	e090      	b.n	800396e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_UART_Transmit+0x2a>
 8003852:	1dbb      	adds	r3, r7, #6
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e088      	b.n	8003970 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	015b      	lsls	r3, r3, #5
 8003866:	429a      	cmp	r2, r3
 8003868:	d109      	bne.n	800387e <HAL_UART_Transmit+0x4e>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2201      	movs	r2, #1
 8003876:	4013      	ands	r3, r2
 8003878:	d001      	beq.n	800387e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e078      	b.n	8003970 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2290      	movs	r2, #144	; 0x90
 8003882:	2100      	movs	r1, #0
 8003884:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2288      	movs	r2, #136	; 0x88
 800388a:	2121      	movs	r1, #33	; 0x21
 800388c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388e:	f7fd fbdf 	bl	8001050 <HAL_GetTick>
 8003892:	0003      	movs	r3, r0
 8003894:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1dba      	adds	r2, r7, #6
 800389a:	2154      	movs	r1, #84	; 0x54
 800389c:	8812      	ldrh	r2, [r2, #0]
 800389e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1dba      	adds	r2, r7, #6
 80038a4:	2156      	movs	r1, #86	; 0x56
 80038a6:	8812      	ldrh	r2, [r2, #0]
 80038a8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	015b      	lsls	r3, r3, #5
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d108      	bne.n	80038c8 <HAL_UART_Transmit+0x98>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e003      	b.n	80038d0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d0:	e030      	b.n	8003934 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	0013      	movs	r3, r2
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	f000 fc66 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 80038e4:	1e03      	subs	r3, r0, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2288      	movs	r2, #136	; 0x88
 80038ec:	2120      	movs	r1, #32
 80038ee:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e03d      	b.n	8003970 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	001a      	movs	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	05d2      	lsls	r2, r2, #23
 8003906:	0dd2      	lsrs	r2, r2, #23
 8003908:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3302      	adds	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e007      	b.n	8003922 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2256      	movs	r2, #86	; 0x56
 8003926:	5a9b      	ldrh	r3, [r3, r2]
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b299      	uxth	r1, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2256      	movs	r2, #86	; 0x56
 8003932:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2256      	movs	r2, #86	; 0x56
 8003938:	5a9b      	ldrh	r3, [r3, r2]
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1c8      	bne.n	80038d2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	0013      	movs	r3, r2
 800394a:	2200      	movs	r2, #0
 800394c:	2140      	movs	r1, #64	; 0x40
 800394e:	f000 fc2f 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d005      	beq.n	8003962 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2288      	movs	r2, #136	; 0x88
 800395a:	2120      	movs	r1, #32
 800395c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e006      	b.n	8003970 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2288      	movs	r2, #136	; 0x88
 8003966:	2120      	movs	r1, #32
 8003968:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b008      	add	sp, #32
 8003976:	bd80      	pop	{r7, pc}

08003978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003978:	b5b0      	push	{r4, r5, r7, lr}
 800397a:	b090      	sub	sp, #64	; 0x40
 800397c:	af00      	add	r7, sp, #0
 800397e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003980:	231a      	movs	r3, #26
 8003982:	2220      	movs	r2, #32
 8003984:	189b      	adds	r3, r3, r2
 8003986:	19db      	adds	r3, r3, r7
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4aaf      	ldr	r2, [pc, #700]	; (8003c68 <UART_SetConfig+0x2f0>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b6:	430b      	orrs	r3, r1
 80039b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4aaa      	ldr	r2, [pc, #680]	; (8003c6c <UART_SetConfig+0x2f4>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	0018      	movs	r0, r3
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	68d9      	ldr	r1, [r3, #12]
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	0003      	movs	r3, r0
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4aa4      	ldr	r2, [pc, #656]	; (8003c70 <UART_SetConfig+0x2f8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ea:	4313      	orrs	r3, r2
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a9f      	ldr	r2, [pc, #636]	; (8003c74 <UART_SetConfig+0x2fc>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	220f      	movs	r2, #15
 8003a0c:	4393      	bics	r3, r2
 8003a0e:	0018      	movs	r0, r3
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	0003      	movs	r3, r0
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a95      	ldr	r2, [pc, #596]	; (8003c78 <UART_SetConfig+0x300>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d131      	bne.n	8003a8c <UART_SetConfig+0x114>
 8003a28:	4b94      	ldr	r3, [pc, #592]	; (8003c7c <UART_SetConfig+0x304>)
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d01d      	beq.n	8003a70 <UART_SetConfig+0xf8>
 8003a34:	d823      	bhi.n	8003a7e <UART_SetConfig+0x106>
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d00c      	beq.n	8003a54 <UART_SetConfig+0xdc>
 8003a3a:	d820      	bhi.n	8003a7e <UART_SetConfig+0x106>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <UART_SetConfig+0xce>
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d00e      	beq.n	8003a62 <UART_SetConfig+0xea>
 8003a44:	e01b      	b.n	8003a7e <UART_SetConfig+0x106>
 8003a46:	231b      	movs	r3, #27
 8003a48:	2220      	movs	r2, #32
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	19db      	adds	r3, r3, r7
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e0b4      	b.n	8003bbe <UART_SetConfig+0x246>
 8003a54:	231b      	movs	r3, #27
 8003a56:	2220      	movs	r2, #32
 8003a58:	189b      	adds	r3, r3, r2
 8003a5a:	19db      	adds	r3, r3, r7
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	e0ad      	b.n	8003bbe <UART_SetConfig+0x246>
 8003a62:	231b      	movs	r3, #27
 8003a64:	2220      	movs	r2, #32
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	19db      	adds	r3, r3, r7
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e0a6      	b.n	8003bbe <UART_SetConfig+0x246>
 8003a70:	231b      	movs	r3, #27
 8003a72:	2220      	movs	r2, #32
 8003a74:	189b      	adds	r3, r3, r2
 8003a76:	19db      	adds	r3, r3, r7
 8003a78:	2208      	movs	r2, #8
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e09f      	b.n	8003bbe <UART_SetConfig+0x246>
 8003a7e:	231b      	movs	r3, #27
 8003a80:	2220      	movs	r2, #32
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	19db      	adds	r3, r3, r7
 8003a86:	2210      	movs	r2, #16
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	e098      	b.n	8003bbe <UART_SetConfig+0x246>
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7b      	ldr	r2, [pc, #492]	; (8003c80 <UART_SetConfig+0x308>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d131      	bne.n	8003afa <UART_SetConfig+0x182>
 8003a96:	4b79      	ldr	r3, [pc, #484]	; (8003c7c <UART_SetConfig+0x304>)
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b0c      	cmp	r3, #12
 8003aa0:	d01d      	beq.n	8003ade <UART_SetConfig+0x166>
 8003aa2:	d823      	bhi.n	8003aec <UART_SetConfig+0x174>
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d00c      	beq.n	8003ac2 <UART_SetConfig+0x14a>
 8003aa8:	d820      	bhi.n	8003aec <UART_SetConfig+0x174>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <UART_SetConfig+0x13c>
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d00e      	beq.n	8003ad0 <UART_SetConfig+0x158>
 8003ab2:	e01b      	b.n	8003aec <UART_SetConfig+0x174>
 8003ab4:	231b      	movs	r3, #27
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	189b      	adds	r3, r3, r2
 8003aba:	19db      	adds	r3, r3, r7
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	e07d      	b.n	8003bbe <UART_SetConfig+0x246>
 8003ac2:	231b      	movs	r3, #27
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	189b      	adds	r3, r3, r2
 8003ac8:	19db      	adds	r3, r3, r7
 8003aca:	2202      	movs	r2, #2
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e076      	b.n	8003bbe <UART_SetConfig+0x246>
 8003ad0:	231b      	movs	r3, #27
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	189b      	adds	r3, r3, r2
 8003ad6:	19db      	adds	r3, r3, r7
 8003ad8:	2204      	movs	r2, #4
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	e06f      	b.n	8003bbe <UART_SetConfig+0x246>
 8003ade:	231b      	movs	r3, #27
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	19db      	adds	r3, r3, r7
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e068      	b.n	8003bbe <UART_SetConfig+0x246>
 8003aec:	231b      	movs	r3, #27
 8003aee:	2220      	movs	r2, #32
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	2210      	movs	r2, #16
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e061      	b.n	8003bbe <UART_SetConfig+0x246>
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a61      	ldr	r2, [pc, #388]	; (8003c84 <UART_SetConfig+0x30c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d106      	bne.n	8003b12 <UART_SetConfig+0x19a>
 8003b04:	231b      	movs	r3, #27
 8003b06:	2220      	movs	r2, #32
 8003b08:	189b      	adds	r3, r3, r2
 8003b0a:	19db      	adds	r3, r3, r7
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e055      	b.n	8003bbe <UART_SetConfig+0x246>
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a5c      	ldr	r2, [pc, #368]	; (8003c88 <UART_SetConfig+0x310>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d106      	bne.n	8003b2a <UART_SetConfig+0x1b2>
 8003b1c:	231b      	movs	r3, #27
 8003b1e:	2220      	movs	r2, #32
 8003b20:	189b      	adds	r3, r3, r2
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e049      	b.n	8003bbe <UART_SetConfig+0x246>
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a50      	ldr	r2, [pc, #320]	; (8003c70 <UART_SetConfig+0x2f8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d13e      	bne.n	8003bb2 <UART_SetConfig+0x23a>
 8003b34:	4b51      	ldr	r3, [pc, #324]	; (8003c7c <UART_SetConfig+0x304>)
 8003b36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b38:	23c0      	movs	r3, #192	; 0xc0
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	22c0      	movs	r2, #192	; 0xc0
 8003b40:	0112      	lsls	r2, r2, #4
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d027      	beq.n	8003b96 <UART_SetConfig+0x21e>
 8003b46:	22c0      	movs	r2, #192	; 0xc0
 8003b48:	0112      	lsls	r2, r2, #4
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d82a      	bhi.n	8003ba4 <UART_SetConfig+0x22c>
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	0112      	lsls	r2, r2, #4
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d011      	beq.n	8003b7a <UART_SetConfig+0x202>
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	0112      	lsls	r2, r2, #4
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d822      	bhi.n	8003ba4 <UART_SetConfig+0x22c>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <UART_SetConfig+0x1f4>
 8003b62:	2280      	movs	r2, #128	; 0x80
 8003b64:	00d2      	lsls	r2, r2, #3
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <UART_SetConfig+0x210>
 8003b6a:	e01b      	b.n	8003ba4 <UART_SetConfig+0x22c>
 8003b6c:	231b      	movs	r3, #27
 8003b6e:	2220      	movs	r2, #32
 8003b70:	189b      	adds	r3, r3, r2
 8003b72:	19db      	adds	r3, r3, r7
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e021      	b.n	8003bbe <UART_SetConfig+0x246>
 8003b7a:	231b      	movs	r3, #27
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	19db      	adds	r3, r3, r7
 8003b82:	2202      	movs	r2, #2
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e01a      	b.n	8003bbe <UART_SetConfig+0x246>
 8003b88:	231b      	movs	r3, #27
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	189b      	adds	r3, r3, r2
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	2204      	movs	r2, #4
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	e013      	b.n	8003bbe <UART_SetConfig+0x246>
 8003b96:	231b      	movs	r3, #27
 8003b98:	2220      	movs	r2, #32
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	19db      	adds	r3, r3, r7
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e00c      	b.n	8003bbe <UART_SetConfig+0x246>
 8003ba4:	231b      	movs	r3, #27
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	189b      	adds	r3, r3, r2
 8003baa:	19db      	adds	r3, r3, r7
 8003bac:	2210      	movs	r2, #16
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e005      	b.n	8003bbe <UART_SetConfig+0x246>
 8003bb2:	231b      	movs	r3, #27
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	19db      	adds	r3, r3, r7
 8003bba:	2210      	movs	r2, #16
 8003bbc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2b      	ldr	r2, [pc, #172]	; (8003c70 <UART_SetConfig+0x2f8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d000      	beq.n	8003bca <UART_SetConfig+0x252>
 8003bc8:	e0a9      	b.n	8003d1e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bca:	231b      	movs	r3, #27
 8003bcc:	2220      	movs	r2, #32
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	19db      	adds	r3, r3, r7
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d015      	beq.n	8003c04 <UART_SetConfig+0x28c>
 8003bd8:	dc18      	bgt.n	8003c0c <UART_SetConfig+0x294>
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d00d      	beq.n	8003bfa <UART_SetConfig+0x282>
 8003bde:	dc15      	bgt.n	8003c0c <UART_SetConfig+0x294>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <UART_SetConfig+0x272>
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d005      	beq.n	8003bf4 <UART_SetConfig+0x27c>
 8003be8:	e010      	b.n	8003c0c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bea:	f7ff f937 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bf2:	e014      	b.n	8003c1e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <UART_SetConfig+0x314>)
 8003bf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bf8:	e011      	b.n	8003c1e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfa:	f7ff f8a3 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c02:	e00c      	b.n	8003c1e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c0a:	e008      	b.n	8003c1e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003c10:	231a      	movs	r3, #26
 8003c12:	2220      	movs	r2, #32
 8003c14:	189b      	adds	r3, r3, r2
 8003c16:	19db      	adds	r3, r3, r7
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
        break;
 8003c1c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d100      	bne.n	8003c26 <UART_SetConfig+0x2ae>
 8003c24:	e14b      	b.n	8003ebe <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <UART_SetConfig+0x318>)
 8003c2c:	0052      	lsls	r2, r2, #1
 8003c2e:	5ad3      	ldrh	r3, [r2, r3]
 8003c30:	0019      	movs	r1, r3
 8003c32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c34:	f7fc fa78 	bl	8000128 <__udivsi3>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	0013      	movs	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d305      	bcc.n	8003c58 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d91d      	bls.n	8003c94 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003c58:	231a      	movs	r3, #26
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	189b      	adds	r3, r3, r2
 8003c5e:	19db      	adds	r3, r3, r7
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	e12b      	b.n	8003ebe <UART_SetConfig+0x546>
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	cfff69f3 	.word	0xcfff69f3
 8003c6c:	ffffcfff 	.word	0xffffcfff
 8003c70:	40008000 	.word	0x40008000
 8003c74:	11fff4ff 	.word	0x11fff4ff
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40004400 	.word	0x40004400
 8003c84:	40004800 	.word	0x40004800
 8003c88:	40004c00 	.word	0x40004c00
 8003c8c:	00f42400 	.word	0x00f42400
 8003c90:	08004f64 	.word	0x08004f64
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ca0:	4b92      	ldr	r3, [pc, #584]	; (8003eec <UART_SetConfig+0x574>)
 8003ca2:	0052      	lsls	r2, r2, #1
 8003ca4:	5ad3      	ldrh	r3, [r2, r3]
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	69b8      	ldr	r0, [r7, #24]
 8003cb2:	69f9      	ldr	r1, [r7, #28]
 8003cb4:	f7fc fbae 	bl	8000414 <__aeabi_uldivmod>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	000b      	movs	r3, r1
 8003cbc:	0e11      	lsrs	r1, r2, #24
 8003cbe:	021d      	lsls	r5, r3, #8
 8003cc0:	430d      	orrs	r5, r1
 8003cc2:	0214      	lsls	r4, r2, #8
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	1900      	adds	r0, r0, r4
 8003cd6:	4169      	adcs	r1, r5
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f7fc fb95 	bl	8000414 <__aeabi_uldivmod>
 8003cea:	0002      	movs	r2, r0
 8003cec:	000b      	movs	r3, r1
 8003cee:	0013      	movs	r3, r2
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf4:	23c0      	movs	r3, #192	; 0xc0
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d309      	bcc.n	8003d10 <UART_SetConfig+0x398>
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	035b      	lsls	r3, r3, #13
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d204      	bcs.n	8003d10 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	e0d6      	b.n	8003ebe <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003d10:	231a      	movs	r3, #26
 8003d12:	2220      	movs	r2, #32
 8003d14:	189b      	adds	r3, r3, r2
 8003d16:	19db      	adds	r3, r3, r7
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e0cf      	b.n	8003ebe <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d000      	beq.n	8003d2c <UART_SetConfig+0x3b4>
 8003d2a:	e070      	b.n	8003e0e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003d2c:	231b      	movs	r3, #27
 8003d2e:	2220      	movs	r2, #32
 8003d30:	189b      	adds	r3, r3, r2
 8003d32:	19db      	adds	r3, r3, r7
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d015      	beq.n	8003d66 <UART_SetConfig+0x3ee>
 8003d3a:	dc18      	bgt.n	8003d6e <UART_SetConfig+0x3f6>
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d00d      	beq.n	8003d5c <UART_SetConfig+0x3e4>
 8003d40:	dc15      	bgt.n	8003d6e <UART_SetConfig+0x3f6>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <UART_SetConfig+0x3d4>
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d005      	beq.n	8003d56 <UART_SetConfig+0x3de>
 8003d4a:	e010      	b.n	8003d6e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7ff f886 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8003d50:	0003      	movs	r3, r0
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d54:	e014      	b.n	8003d80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d56:	4b66      	ldr	r3, [pc, #408]	; (8003ef0 <UART_SetConfig+0x578>)
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d5a:	e011      	b.n	8003d80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5c:	f7fe fff2 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8003d60:	0003      	movs	r3, r0
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d64:	e00c      	b.n	8003d80 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d6c:	e008      	b.n	8003d80 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003d72:	231a      	movs	r3, #26
 8003d74:	2220      	movs	r2, #32
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
        break;
 8003d7e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d100      	bne.n	8003d88 <UART_SetConfig+0x410>
 8003d86:	e09a      	b.n	8003ebe <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8c:	4b57      	ldr	r3, [pc, #348]	; (8003eec <UART_SetConfig+0x574>)
 8003d8e:	0052      	lsls	r2, r2, #1
 8003d90:	5ad3      	ldrh	r3, [r2, r3]
 8003d92:	0019      	movs	r1, r3
 8003d94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d96:	f7fc f9c7 	bl	8000128 <__udivsi3>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	005a      	lsls	r2, r3, #1
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	18d2      	adds	r2, r2, r3
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	0019      	movs	r1, r3
 8003dac:	0010      	movs	r0, r2
 8003dae:	f7fc f9bb 	bl	8000128 <__udivsi3>
 8003db2:	0003      	movs	r3, r0
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	2b0f      	cmp	r3, #15
 8003dba:	d921      	bls.n	8003e00 <UART_SetConfig+0x488>
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	025b      	lsls	r3, r3, #9
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d21c      	bcs.n	8003e00 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	200e      	movs	r0, #14
 8003dcc:	2420      	movs	r4, #32
 8003dce:	1903      	adds	r3, r0, r4
 8003dd0:	19db      	adds	r3, r3, r7
 8003dd2:	210f      	movs	r1, #15
 8003dd4:	438a      	bics	r2, r1
 8003dd6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	085b      	lsrs	r3, r3, #1
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2207      	movs	r2, #7
 8003de0:	4013      	ands	r3, r2
 8003de2:	b299      	uxth	r1, r3
 8003de4:	1903      	adds	r3, r0, r4
 8003de6:	19db      	adds	r3, r3, r7
 8003de8:	1902      	adds	r2, r0, r4
 8003dea:	19d2      	adds	r2, r2, r7
 8003dec:	8812      	ldrh	r2, [r2, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1902      	adds	r2, r0, r4
 8003df8:	19d2      	adds	r2, r2, r7
 8003dfa:	8812      	ldrh	r2, [r2, #0]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	e05e      	b.n	8003ebe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003e00:	231a      	movs	r3, #26
 8003e02:	2220      	movs	r2, #32
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	19db      	adds	r3, r3, r7
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	e057      	b.n	8003ebe <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e0e:	231b      	movs	r3, #27
 8003e10:	2220      	movs	r2, #32
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	19db      	adds	r3, r3, r7
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d015      	beq.n	8003e48 <UART_SetConfig+0x4d0>
 8003e1c:	dc18      	bgt.n	8003e50 <UART_SetConfig+0x4d8>
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d00d      	beq.n	8003e3e <UART_SetConfig+0x4c6>
 8003e22:	dc15      	bgt.n	8003e50 <UART_SetConfig+0x4d8>
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <UART_SetConfig+0x4b6>
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d005      	beq.n	8003e38 <UART_SetConfig+0x4c0>
 8003e2c:	e010      	b.n	8003e50 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e2e:	f7ff f815 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8003e32:	0003      	movs	r3, r0
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e36:	e014      	b.n	8003e62 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e38:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <UART_SetConfig+0x578>)
 8003e3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e3c:	e011      	b.n	8003e62 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3e:	f7fe ff81 	bl	8002d44 <HAL_RCC_GetSysClockFreq>
 8003e42:	0003      	movs	r3, r0
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e46:	e00c      	b.n	8003e62 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e4e:	e008      	b.n	8003e62 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003e54:	231a      	movs	r3, #26
 8003e56:	2220      	movs	r2, #32
 8003e58:	189b      	adds	r3, r3, r2
 8003e5a:	19db      	adds	r3, r3, r7
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]
        break;
 8003e60:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d02a      	beq.n	8003ebe <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6c:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <UART_SetConfig+0x574>)
 8003e6e:	0052      	lsls	r2, r2, #1
 8003e70:	5ad3      	ldrh	r3, [r2, r3]
 8003e72:	0019      	movs	r1, r3
 8003e74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e76:	f7fc f957 	bl	8000128 <__udivsi3>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	001a      	movs	r2, r3
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	18d2      	adds	r2, r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	0010      	movs	r0, r2
 8003e8e:	f7fc f94b 	bl	8000128 <__udivsi3>
 8003e92:	0003      	movs	r3, r0
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	2b0f      	cmp	r3, #15
 8003e9a:	d90a      	bls.n	8003eb2 <UART_SetConfig+0x53a>
 8003e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e9e:	2380      	movs	r3, #128	; 0x80
 8003ea0:	025b      	lsls	r3, r3, #9
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d205      	bcs.n	8003eb2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	e005      	b.n	8003ebe <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb2:	231a      	movs	r3, #26
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	189b      	adds	r3, r3, r2
 8003eb8:	19db      	adds	r3, r3, r7
 8003eba:	2201      	movs	r2, #1
 8003ebc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	226a      	movs	r2, #106	; 0x6a
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	2268      	movs	r2, #104	; 0x68
 8003eca:	2101      	movs	r1, #1
 8003ecc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003eda:	231a      	movs	r3, #26
 8003edc:	2220      	movs	r2, #32
 8003ede:	189b      	adds	r3, r3, r2
 8003ee0:	19db      	adds	r3, r3, r7
 8003ee2:	781b      	ldrb	r3, [r3, #0]
}
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b010      	add	sp, #64	; 0x40
 8003eea:	bdb0      	pop	{r4, r5, r7, pc}
 8003eec:	08004f64 	.word	0x08004f64
 8003ef0:	00f42400 	.word	0x00f42400

08003ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	2208      	movs	r2, #8
 8003f02:	4013      	ands	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a4a      	ldr	r2, [pc, #296]	; (8004038 <UART_AdvFeatureConfig+0x144>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	2201      	movs	r2, #1
 8003f24:	4013      	ands	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a43      	ldr	r2, [pc, #268]	; (800403c <UART_AdvFeatureConfig+0x148>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	0019      	movs	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	2202      	movs	r2, #2
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a3b      	ldr	r2, [pc, #236]	; (8004040 <UART_AdvFeatureConfig+0x14c>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	2204      	movs	r2, #4
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a34      	ldr	r2, [pc, #208]	; (8004044 <UART_AdvFeatureConfig+0x150>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	2210      	movs	r2, #16
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d00b      	beq.n	8003fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a2c      	ldr	r2, [pc, #176]	; (8004048 <UART_AdvFeatureConfig+0x154>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	0019      	movs	r1, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	2220      	movs	r2, #32
 8003fac:	4013      	ands	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	4a25      	ldr	r2, [pc, #148]	; (800404c <UART_AdvFeatureConfig+0x158>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	0019      	movs	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	2240      	movs	r2, #64	; 0x40
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d01d      	beq.n	800400e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4a1d      	ldr	r2, [pc, #116]	; (8004050 <UART_AdvFeatureConfig+0x15c>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	0019      	movs	r1, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fee:	2380      	movs	r3, #128	; 0x80
 8003ff0:	035b      	lsls	r3, r3, #13
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d10b      	bne.n	800400e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4a15      	ldr	r2, [pc, #84]	; (8004054 <UART_AdvFeatureConfig+0x160>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	4013      	ands	r3, r2
 8004016:	d00b      	beq.n	8004030 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4a0e      	ldr	r2, [pc, #56]	; (8004058 <UART_AdvFeatureConfig+0x164>)
 8004020:	4013      	ands	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}
 8004038:	ffff7fff 	.word	0xffff7fff
 800403c:	fffdffff 	.word	0xfffdffff
 8004040:	fffeffff 	.word	0xfffeffff
 8004044:	fffbffff 	.word	0xfffbffff
 8004048:	ffffefff 	.word	0xffffefff
 800404c:	ffffdfff 	.word	0xffffdfff
 8004050:	ffefffff 	.word	0xffefffff
 8004054:	ff9fffff 	.word	0xff9fffff
 8004058:	fff7ffff 	.word	0xfff7ffff

0800405c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b092      	sub	sp, #72	; 0x48
 8004060:	af02      	add	r7, sp, #8
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2290      	movs	r2, #144	; 0x90
 8004068:	2100      	movs	r1, #0
 800406a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800406c:	f7fc fff0 	bl	8001050 <HAL_GetTick>
 8004070:	0003      	movs	r3, r0
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2208      	movs	r2, #8
 800407c:	4013      	ands	r3, r2
 800407e:	2b08      	cmp	r3, #8
 8004080:	d12d      	bne.n	80040de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	0391      	lsls	r1, r2, #14
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4a47      	ldr	r2, [pc, #284]	; (80041a8 <UART_CheckIdleState+0x14c>)
 800408c:	9200      	str	r2, [sp, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	f000 f88e 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 8004094:	1e03      	subs	r3, r0, #0
 8004096:	d022      	beq.n	80040de <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004098:	f3ef 8310 	mrs	r3, PRIMASK
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040a2:	2301      	movs	r3, #1
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	f383 8810 	msr	PRIMASK, r3
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2180      	movs	r1, #128	; 0x80
 80040ba:	438a      	bics	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	f383 8810 	msr	PRIMASK, r3
}
 80040c8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2288      	movs	r2, #136	; 0x88
 80040ce:	2120      	movs	r1, #32
 80040d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2284      	movs	r2, #132	; 0x84
 80040d6:	2100      	movs	r1, #0
 80040d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e060      	b.n	80041a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2204      	movs	r2, #4
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d146      	bne.n	800417a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	03d1      	lsls	r1, r2, #15
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <UART_CheckIdleState+0x14c>)
 80040f6:	9200      	str	r2, [sp, #0]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f000 f859 	bl	80041b0 <UART_WaitOnFlagUntilTimeout>
 80040fe:	1e03      	subs	r3, r0, #0
 8004100:	d03b      	beq.n	800417a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004102:	f3ef 8310 	mrs	r3, PRIMASK
 8004106:	60fb      	str	r3, [r7, #12]
  return(result);
 8004108:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
 800410c:	2301      	movs	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f383 8810 	msr	PRIMASK, r3
}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4922      	ldr	r1, [pc, #136]	; (80041ac <UART_CheckIdleState+0x150>)
 8004124:	400a      	ands	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f383 8810 	msr	PRIMASK, r3
}
 8004132:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004134:	f3ef 8310 	mrs	r3, PRIMASK
 8004138:	61bb      	str	r3, [r7, #24]
  return(result);
 800413a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
 800413e:	2301      	movs	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f383 8810 	msr	PRIMASK, r3
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2101      	movs	r1, #1
 8004156:	438a      	bics	r2, r1
 8004158:	609a      	str	r2, [r3, #8]
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f383 8810 	msr	PRIMASK, r3
}
 8004164:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	228c      	movs	r2, #140	; 0x8c
 800416a:	2120      	movs	r1, #32
 800416c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2284      	movs	r2, #132	; 0x84
 8004172:	2100      	movs	r1, #0
 8004174:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e012      	b.n	80041a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2288      	movs	r2, #136	; 0x88
 800417e:	2120      	movs	r1, #32
 8004180:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	228c      	movs	r2, #140	; 0x8c
 8004186:	2120      	movs	r1, #32
 8004188:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2284      	movs	r2, #132	; 0x84
 800419a:	2100      	movs	r1, #0
 800419c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	0018      	movs	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b010      	add	sp, #64	; 0x40
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	01ffffff 	.word	0x01ffffff
 80041ac:	fffffedf 	.word	0xfffffedf

080041b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	1dfb      	adds	r3, r7, #7
 80041be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c0:	e051      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	3301      	adds	r3, #1
 80041c6:	d04e      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c8:	f7fc ff42 	bl	8001050 <HAL_GetTick>
 80041cc:	0002      	movs	r2, r0
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <UART_WaitOnFlagUntilTimeout+0x2e>
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e051      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2204      	movs	r2, #4
 80041ea:	4013      	ands	r3, r2
 80041ec:	d03b      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb6>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d038      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb6>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d035      	beq.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	2208      	movs	r2, #8
 8004202:	4013      	ands	r3, r2
 8004204:	2b08      	cmp	r3, #8
 8004206:	d111      	bne.n	800422c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2208      	movs	r2, #8
 800420e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	0018      	movs	r0, r3
 8004214:	f000 f83c 	bl	8004290 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2290      	movs	r2, #144	; 0x90
 800421c:	2108      	movs	r1, #8
 800421e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2284      	movs	r2, #132	; 0x84
 8004224:	2100      	movs	r1, #0
 8004226:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e02c      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	401a      	ands	r2, r3
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	429a      	cmp	r2, r3
 800423e:	d112      	bne.n	8004266 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2280      	movs	r2, #128	; 0x80
 8004246:	0112      	lsls	r2, r2, #4
 8004248:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	0018      	movs	r0, r3
 800424e:	f000 f81f 	bl	8004290 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2290      	movs	r2, #144	; 0x90
 8004256:	2120      	movs	r1, #32
 8004258:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2284      	movs	r2, #132	; 0x84
 800425e:	2100      	movs	r1, #0
 8004260:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e00f      	b.n	8004286 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	425a      	negs	r2, r3
 8004276:	4153      	adcs	r3, r2
 8004278:	b2db      	uxtb	r3, r3
 800427a:	001a      	movs	r2, r3
 800427c:	1dfb      	adds	r3, r7, #7
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d09e      	beq.n	80041c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b004      	add	sp, #16
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08e      	sub	sp, #56	; 0x38
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004298:	f3ef 8310 	mrs	r3, PRIMASK
 800429c:	617b      	str	r3, [r7, #20]
  return(result);
 800429e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
 80042a2:	2301      	movs	r3, #1
 80042a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f383 8810 	msr	PRIMASK, r3
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4926      	ldr	r1, [pc, #152]	; (8004354 <UART_EndRxTransfer+0xc4>)
 80042ba:	400a      	ands	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f383 8810 	msr	PRIMASK, r3
}
 80042c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ca:	f3ef 8310 	mrs	r3, PRIMASK
 80042ce:	623b      	str	r3, [r7, #32]
  return(result);
 80042d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
 80042d4:	2301      	movs	r3, #1
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	f383 8810 	msr	PRIMASK, r3
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	491b      	ldr	r1, [pc, #108]	; (8004358 <UART_EndRxTransfer+0xc8>)
 80042ec:	400a      	ands	r2, r1
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004300:	2b01      	cmp	r3, #1
 8004302:	d118      	bne.n	8004336 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004304:	f3ef 8310 	mrs	r3, PRIMASK
 8004308:	60bb      	str	r3, [r7, #8]
  return(result);
 800430a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430e:	2301      	movs	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f383 8810 	msr	PRIMASK, r3
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2110      	movs	r1, #16
 8004326:	438a      	bics	r2, r1
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	228c      	movs	r2, #140	; 0x8c
 800433a:	2120      	movs	r1, #32
 800433c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	675a      	str	r2, [r3, #116]	; 0x74
}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	46bd      	mov	sp, r7
 800434e:	b00e      	add	sp, #56	; 0x38
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	fffffedf 	.word	0xfffffedf
 8004358:	effffffe 	.word	0xeffffffe

0800435c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2284      	movs	r2, #132	; 0x84
 8004368:	5c9b      	ldrb	r3, [r3, r2]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_UARTEx_DisableFifoMode+0x16>
 800436e:	2302      	movs	r3, #2
 8004370:	e027      	b.n	80043c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2284      	movs	r2, #132	; 0x84
 8004376:	2101      	movs	r1, #1
 8004378:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2288      	movs	r2, #136	; 0x88
 800437e:	2124      	movs	r1, #36	; 0x24
 8004380:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2101      	movs	r1, #1
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <HAL_UARTEx_DisableFifoMode+0x70>)
 800439e:	4013      	ands	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2288      	movs	r2, #136	; 0x88
 80043b4:	2120      	movs	r1, #32
 80043b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2284      	movs	r2, #132	; 0x84
 80043bc:	2100      	movs	r1, #0
 80043be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	0018      	movs	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b004      	add	sp, #16
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	dfffffff 	.word	0xdfffffff

080043d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2284      	movs	r2, #132	; 0x84
 80043de:	5c9b      	ldrb	r3, [r3, r2]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e02e      	b.n	8004446 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2284      	movs	r2, #132	; 0x84
 80043ec:	2101      	movs	r1, #1
 80043ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2288      	movs	r2, #136	; 0x88
 80043f4:	2124      	movs	r1, #36	; 0x24
 80043f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2101      	movs	r1, #1
 800440c:	438a      	bics	r2, r1
 800440e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	08d9      	lsrs	r1, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	0018      	movs	r0, r3
 8004428:	f000 f854 	bl	80044d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2288      	movs	r2, #136	; 0x88
 8004438:	2120      	movs	r1, #32
 800443a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2284      	movs	r2, #132	; 0x84
 8004440:	2100      	movs	r1, #0
 8004442:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2284      	movs	r2, #132	; 0x84
 800445e:	5c9b      	ldrb	r3, [r3, r2]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004464:	2302      	movs	r3, #2
 8004466:	e02f      	b.n	80044c8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2284      	movs	r2, #132	; 0x84
 800446c:	2101      	movs	r1, #1
 800446e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2288      	movs	r2, #136	; 0x88
 8004474:	2124      	movs	r1, #36	; 0x24
 8004476:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2101      	movs	r1, #1
 800448c:	438a      	bics	r2, r1
 800448e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004498:	4013      	ands	r3, r2
 800449a:	0019      	movs	r1, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 f813 	bl	80044d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2288      	movs	r2, #136	; 0x88
 80044ba:	2120      	movs	r1, #32
 80044bc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2284      	movs	r2, #132	; 0x84
 80044c2:	2100      	movs	r1, #0
 80044c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b004      	add	sp, #16
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	f1ffffff 	.word	0xf1ffffff

080044d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d108      	bne.n	80044f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	226a      	movs	r2, #106	; 0x6a
 80044e8:	2101      	movs	r1, #1
 80044ea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2268      	movs	r2, #104	; 0x68
 80044f0:	2101      	movs	r1, #1
 80044f2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044f4:	e043      	b.n	800457e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044f6:	260f      	movs	r6, #15
 80044f8:	19bb      	adds	r3, r7, r6
 80044fa:	2208      	movs	r2, #8
 80044fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044fe:	200e      	movs	r0, #14
 8004500:	183b      	adds	r3, r7, r0
 8004502:	2208      	movs	r2, #8
 8004504:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	0e5b      	lsrs	r3, r3, #25
 800450e:	b2da      	uxtb	r2, r3
 8004510:	240d      	movs	r4, #13
 8004512:	193b      	adds	r3, r7, r4
 8004514:	2107      	movs	r1, #7
 8004516:	400a      	ands	r2, r1
 8004518:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	0f5b      	lsrs	r3, r3, #29
 8004522:	b2da      	uxtb	r2, r3
 8004524:	250c      	movs	r5, #12
 8004526:	197b      	adds	r3, r7, r5
 8004528:	2107      	movs	r1, #7
 800452a:	400a      	ands	r2, r1
 800452c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800452e:	183b      	adds	r3, r7, r0
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	197a      	adds	r2, r7, r5
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	4914      	ldr	r1, [pc, #80]	; (8004588 <UARTEx_SetNbDataToProcess+0xb4>)
 8004538:	5c8a      	ldrb	r2, [r1, r2]
 800453a:	435a      	muls	r2, r3
 800453c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800453e:	197b      	adds	r3, r7, r5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <UARTEx_SetNbDataToProcess+0xb8>)
 8004544:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004546:	0019      	movs	r1, r3
 8004548:	f7fb fe78 	bl	800023c <__divsi3>
 800454c:	0003      	movs	r3, r0
 800454e:	b299      	uxth	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	226a      	movs	r2, #106	; 0x6a
 8004554:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004556:	19bb      	adds	r3, r7, r6
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	193a      	adds	r2, r7, r4
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	490a      	ldr	r1, [pc, #40]	; (8004588 <UARTEx_SetNbDataToProcess+0xb4>)
 8004560:	5c8a      	ldrb	r2, [r1, r2]
 8004562:	435a      	muls	r2, r3
 8004564:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004566:	193b      	adds	r3, r7, r4
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	4a08      	ldr	r2, [pc, #32]	; (800458c <UARTEx_SetNbDataToProcess+0xb8>)
 800456c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800456e:	0019      	movs	r1, r3
 8004570:	f7fb fe64 	bl	800023c <__divsi3>
 8004574:	0003      	movs	r3, r0
 8004576:	b299      	uxth	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2268      	movs	r2, #104	; 0x68
 800457c:	5299      	strh	r1, [r3, r2]
}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	46bd      	mov	sp, r7
 8004582:	b005      	add	sp, #20
 8004584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	08004f7c 	.word	0x08004f7c
 800458c:	08004f84 	.word	0x08004f84

08004590 <siprintf>:
 8004590:	b40e      	push	{r1, r2, r3}
 8004592:	b500      	push	{lr}
 8004594:	490b      	ldr	r1, [pc, #44]	; (80045c4 <siprintf+0x34>)
 8004596:	b09c      	sub	sp, #112	; 0x70
 8004598:	ab1d      	add	r3, sp, #116	; 0x74
 800459a:	9002      	str	r0, [sp, #8]
 800459c:	9006      	str	r0, [sp, #24]
 800459e:	9107      	str	r1, [sp, #28]
 80045a0:	9104      	str	r1, [sp, #16]
 80045a2:	4809      	ldr	r0, [pc, #36]	; (80045c8 <siprintf+0x38>)
 80045a4:	4909      	ldr	r1, [pc, #36]	; (80045cc <siprintf+0x3c>)
 80045a6:	cb04      	ldmia	r3!, {r2}
 80045a8:	9105      	str	r1, [sp, #20]
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	a902      	add	r1, sp, #8
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	f000 f9a2 	bl	80048f8 <_svfiprintf_r>
 80045b4:	2200      	movs	r2, #0
 80045b6:	9b02      	ldr	r3, [sp, #8]
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	b01c      	add	sp, #112	; 0x70
 80045bc:	bc08      	pop	{r3}
 80045be:	b003      	add	sp, #12
 80045c0:	4718      	bx	r3
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	7fffffff 	.word	0x7fffffff
 80045c8:	20000058 	.word	0x20000058
 80045cc:	ffff0208 	.word	0xffff0208

080045d0 <memset>:
 80045d0:	0003      	movs	r3, r0
 80045d2:	1882      	adds	r2, r0, r2
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d100      	bne.n	80045da <memset+0xa>
 80045d8:	4770      	bx	lr
 80045da:	7019      	strb	r1, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	e7f9      	b.n	80045d4 <memset+0x4>

080045e0 <__errno>:
 80045e0:	4b01      	ldr	r3, [pc, #4]	; (80045e8 <__errno+0x8>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	4770      	bx	lr
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	20000058 	.word	0x20000058

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	2600      	movs	r6, #0
 80045f0:	4c0c      	ldr	r4, [pc, #48]	; (8004624 <__libc_init_array+0x38>)
 80045f2:	4d0d      	ldr	r5, [pc, #52]	; (8004628 <__libc_init_array+0x3c>)
 80045f4:	1b64      	subs	r4, r4, r5
 80045f6:	10a4      	asrs	r4, r4, #2
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	2600      	movs	r6, #0
 80045fe:	f000 fc6d 	bl	8004edc <_init>
 8004602:	4c0a      	ldr	r4, [pc, #40]	; (800462c <__libc_init_array+0x40>)
 8004604:	4d0a      	ldr	r5, [pc, #40]	; (8004630 <__libc_init_array+0x44>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	00b3      	lsls	r3, r6, #2
 8004612:	58eb      	ldr	r3, [r5, r3]
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	00b3      	lsls	r3, r6, #2
 800461c:	58eb      	ldr	r3, [r5, r3]
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	08004fc8 	.word	0x08004fc8
 8004628:	08004fc8 	.word	0x08004fc8
 800462c:	08004fcc 	.word	0x08004fcc
 8004630:	08004fc8 	.word	0x08004fc8

08004634 <__retarget_lock_acquire_recursive>:
 8004634:	4770      	bx	lr

08004636 <__retarget_lock_release_recursive>:
 8004636:	4770      	bx	lr

08004638 <_free_r>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	0005      	movs	r5, r0
 800463c:	2900      	cmp	r1, #0
 800463e:	d010      	beq.n	8004662 <_free_r+0x2a>
 8004640:	1f0c      	subs	r4, r1, #4
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	da00      	bge.n	800464a <_free_r+0x12>
 8004648:	18e4      	adds	r4, r4, r3
 800464a:	0028      	movs	r0, r5
 800464c:	f000 f8e2 	bl	8004814 <__malloc_lock>
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <_free_r+0x90>)
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <_free_r+0x2c>
 8004658:	6063      	str	r3, [r4, #4]
 800465a:	6014      	str	r4, [r2, #0]
 800465c:	0028      	movs	r0, r5
 800465e:	f000 f8e1 	bl	8004824 <__malloc_unlock>
 8004662:	bd70      	pop	{r4, r5, r6, pc}
 8004664:	42a3      	cmp	r3, r4
 8004666:	d908      	bls.n	800467a <_free_r+0x42>
 8004668:	6820      	ldr	r0, [r4, #0]
 800466a:	1821      	adds	r1, r4, r0
 800466c:	428b      	cmp	r3, r1
 800466e:	d1f3      	bne.n	8004658 <_free_r+0x20>
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	1809      	adds	r1, r1, r0
 8004676:	6021      	str	r1, [r4, #0]
 8004678:	e7ee      	b.n	8004658 <_free_r+0x20>
 800467a:	001a      	movs	r2, r3
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <_free_r+0x4e>
 8004682:	42a3      	cmp	r3, r4
 8004684:	d9f9      	bls.n	800467a <_free_r+0x42>
 8004686:	6811      	ldr	r1, [r2, #0]
 8004688:	1850      	adds	r0, r2, r1
 800468a:	42a0      	cmp	r0, r4
 800468c:	d10b      	bne.n	80046a6 <_free_r+0x6e>
 800468e:	6820      	ldr	r0, [r4, #0]
 8004690:	1809      	adds	r1, r1, r0
 8004692:	1850      	adds	r0, r2, r1
 8004694:	6011      	str	r1, [r2, #0]
 8004696:	4283      	cmp	r3, r0
 8004698:	d1e0      	bne.n	800465c <_free_r+0x24>
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	1841      	adds	r1, r0, r1
 80046a0:	6011      	str	r1, [r2, #0]
 80046a2:	6053      	str	r3, [r2, #4]
 80046a4:	e7da      	b.n	800465c <_free_r+0x24>
 80046a6:	42a0      	cmp	r0, r4
 80046a8:	d902      	bls.n	80046b0 <_free_r+0x78>
 80046aa:	230c      	movs	r3, #12
 80046ac:	602b      	str	r3, [r5, #0]
 80046ae:	e7d5      	b.n	800465c <_free_r+0x24>
 80046b0:	6820      	ldr	r0, [r4, #0]
 80046b2:	1821      	adds	r1, r4, r0
 80046b4:	428b      	cmp	r3, r1
 80046b6:	d103      	bne.n	80046c0 <_free_r+0x88>
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	1809      	adds	r1, r1, r0
 80046be:	6021      	str	r1, [r4, #0]
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	6054      	str	r4, [r2, #4]
 80046c4:	e7ca      	b.n	800465c <_free_r+0x24>
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	20000358 	.word	0x20000358

080046cc <sbrk_aligned>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4e0f      	ldr	r6, [pc, #60]	; (800470c <sbrk_aligned+0x40>)
 80046d0:	000d      	movs	r5, r1
 80046d2:	6831      	ldr	r1, [r6, #0]
 80046d4:	0004      	movs	r4, r0
 80046d6:	2900      	cmp	r1, #0
 80046d8:	d102      	bne.n	80046e0 <sbrk_aligned+0x14>
 80046da:	f000 fba1 	bl	8004e20 <_sbrk_r>
 80046de:	6030      	str	r0, [r6, #0]
 80046e0:	0029      	movs	r1, r5
 80046e2:	0020      	movs	r0, r4
 80046e4:	f000 fb9c 	bl	8004e20 <_sbrk_r>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d00a      	beq.n	8004702 <sbrk_aligned+0x36>
 80046ec:	2303      	movs	r3, #3
 80046ee:	1cc5      	adds	r5, r0, #3
 80046f0:	439d      	bics	r5, r3
 80046f2:	42a8      	cmp	r0, r5
 80046f4:	d007      	beq.n	8004706 <sbrk_aligned+0x3a>
 80046f6:	1a29      	subs	r1, r5, r0
 80046f8:	0020      	movs	r0, r4
 80046fa:	f000 fb91 	bl	8004e20 <_sbrk_r>
 80046fe:	3001      	adds	r0, #1
 8004700:	d101      	bne.n	8004706 <sbrk_aligned+0x3a>
 8004702:	2501      	movs	r5, #1
 8004704:	426d      	negs	r5, r5
 8004706:	0028      	movs	r0, r5
 8004708:	bd70      	pop	{r4, r5, r6, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	2000035c 	.word	0x2000035c

08004710 <_malloc_r>:
 8004710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004712:	2203      	movs	r2, #3
 8004714:	1ccb      	adds	r3, r1, #3
 8004716:	4393      	bics	r3, r2
 8004718:	3308      	adds	r3, #8
 800471a:	0006      	movs	r6, r0
 800471c:	001f      	movs	r7, r3
 800471e:	2b0c      	cmp	r3, #12
 8004720:	d238      	bcs.n	8004794 <_malloc_r+0x84>
 8004722:	270c      	movs	r7, #12
 8004724:	42b9      	cmp	r1, r7
 8004726:	d837      	bhi.n	8004798 <_malloc_r+0x88>
 8004728:	0030      	movs	r0, r6
 800472a:	f000 f873 	bl	8004814 <__malloc_lock>
 800472e:	4b38      	ldr	r3, [pc, #224]	; (8004810 <_malloc_r+0x100>)
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	001c      	movs	r4, r3
 8004736:	2c00      	cmp	r4, #0
 8004738:	d133      	bne.n	80047a2 <_malloc_r+0x92>
 800473a:	0039      	movs	r1, r7
 800473c:	0030      	movs	r0, r6
 800473e:	f7ff ffc5 	bl	80046cc <sbrk_aligned>
 8004742:	0004      	movs	r4, r0
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d15e      	bne.n	8004806 <_malloc_r+0xf6>
 8004748:	9b00      	ldr	r3, [sp, #0]
 800474a:	681c      	ldr	r4, [r3, #0]
 800474c:	0025      	movs	r5, r4
 800474e:	2d00      	cmp	r5, #0
 8004750:	d14e      	bne.n	80047f0 <_malloc_r+0xe0>
 8004752:	2c00      	cmp	r4, #0
 8004754:	d051      	beq.n	80047fa <_malloc_r+0xea>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	0029      	movs	r1, r5
 800475a:	18e3      	adds	r3, r4, r3
 800475c:	0030      	movs	r0, r6
 800475e:	9301      	str	r3, [sp, #4]
 8004760:	f000 fb5e 	bl	8004e20 <_sbrk_r>
 8004764:	9b01      	ldr	r3, [sp, #4]
 8004766:	4283      	cmp	r3, r0
 8004768:	d147      	bne.n	80047fa <_malloc_r+0xea>
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	0030      	movs	r0, r6
 800476e:	1aff      	subs	r7, r7, r3
 8004770:	0039      	movs	r1, r7
 8004772:	f7ff ffab 	bl	80046cc <sbrk_aligned>
 8004776:	3001      	adds	r0, #1
 8004778:	d03f      	beq.n	80047fa <_malloc_r+0xea>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	19db      	adds	r3, r3, r7
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	9b00      	ldr	r3, [sp, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d040      	beq.n	800480a <_malloc_r+0xfa>
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	42a2      	cmp	r2, r4
 800478c:	d133      	bne.n	80047f6 <_malloc_r+0xe6>
 800478e:	2200      	movs	r2, #0
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	e014      	b.n	80047be <_malloc_r+0xae>
 8004794:	2b00      	cmp	r3, #0
 8004796:	dac5      	bge.n	8004724 <_malloc_r+0x14>
 8004798:	230c      	movs	r3, #12
 800479a:	2500      	movs	r5, #0
 800479c:	6033      	str	r3, [r6, #0]
 800479e:	0028      	movs	r0, r5
 80047a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047a2:	6821      	ldr	r1, [r4, #0]
 80047a4:	1bc9      	subs	r1, r1, r7
 80047a6:	d420      	bmi.n	80047ea <_malloc_r+0xda>
 80047a8:	290b      	cmp	r1, #11
 80047aa:	d918      	bls.n	80047de <_malloc_r+0xce>
 80047ac:	19e2      	adds	r2, r4, r7
 80047ae:	6027      	str	r7, [r4, #0]
 80047b0:	42a3      	cmp	r3, r4
 80047b2:	d112      	bne.n	80047da <_malloc_r+0xca>
 80047b4:	9b00      	ldr	r3, [sp, #0]
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	6863      	ldr	r3, [r4, #4]
 80047ba:	6011      	str	r1, [r2, #0]
 80047bc:	6053      	str	r3, [r2, #4]
 80047be:	0030      	movs	r0, r6
 80047c0:	0025      	movs	r5, r4
 80047c2:	f000 f82f 	bl	8004824 <__malloc_unlock>
 80047c6:	2207      	movs	r2, #7
 80047c8:	350b      	adds	r5, #11
 80047ca:	1d23      	adds	r3, r4, #4
 80047cc:	4395      	bics	r5, r2
 80047ce:	1aea      	subs	r2, r5, r3
 80047d0:	429d      	cmp	r5, r3
 80047d2:	d0e4      	beq.n	800479e <_malloc_r+0x8e>
 80047d4:	1b5b      	subs	r3, r3, r5
 80047d6:	50a3      	str	r3, [r4, r2]
 80047d8:	e7e1      	b.n	800479e <_malloc_r+0x8e>
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	e7ec      	b.n	80047b8 <_malloc_r+0xa8>
 80047de:	6862      	ldr	r2, [r4, #4]
 80047e0:	42a3      	cmp	r3, r4
 80047e2:	d1d5      	bne.n	8004790 <_malloc_r+0x80>
 80047e4:	9b00      	ldr	r3, [sp, #0]
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e7e9      	b.n	80047be <_malloc_r+0xae>
 80047ea:	0023      	movs	r3, r4
 80047ec:	6864      	ldr	r4, [r4, #4]
 80047ee:	e7a2      	b.n	8004736 <_malloc_r+0x26>
 80047f0:	002c      	movs	r4, r5
 80047f2:	686d      	ldr	r5, [r5, #4]
 80047f4:	e7ab      	b.n	800474e <_malloc_r+0x3e>
 80047f6:	0013      	movs	r3, r2
 80047f8:	e7c4      	b.n	8004784 <_malloc_r+0x74>
 80047fa:	230c      	movs	r3, #12
 80047fc:	0030      	movs	r0, r6
 80047fe:	6033      	str	r3, [r6, #0]
 8004800:	f000 f810 	bl	8004824 <__malloc_unlock>
 8004804:	e7cb      	b.n	800479e <_malloc_r+0x8e>
 8004806:	6027      	str	r7, [r4, #0]
 8004808:	e7d9      	b.n	80047be <_malloc_r+0xae>
 800480a:	605b      	str	r3, [r3, #4]
 800480c:	deff      	udf	#255	; 0xff
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	20000358 	.word	0x20000358

08004814 <__malloc_lock>:
 8004814:	b510      	push	{r4, lr}
 8004816:	4802      	ldr	r0, [pc, #8]	; (8004820 <__malloc_lock+0xc>)
 8004818:	f7ff ff0c 	bl	8004634 <__retarget_lock_acquire_recursive>
 800481c:	bd10      	pop	{r4, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	20000354 	.word	0x20000354

08004824 <__malloc_unlock>:
 8004824:	b510      	push	{r4, lr}
 8004826:	4802      	ldr	r0, [pc, #8]	; (8004830 <__malloc_unlock+0xc>)
 8004828:	f7ff ff05 	bl	8004636 <__retarget_lock_release_recursive>
 800482c:	bd10      	pop	{r4, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	20000354 	.word	0x20000354

08004834 <__ssputs_r>:
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004836:	b085      	sub	sp, #20
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	9203      	str	r2, [sp, #12]
 800483c:	688e      	ldr	r6, [r1, #8]
 800483e:	9a01      	ldr	r2, [sp, #4]
 8004840:	0007      	movs	r7, r0
 8004842:	000c      	movs	r4, r1
 8004844:	680b      	ldr	r3, [r1, #0]
 8004846:	4296      	cmp	r6, r2
 8004848:	d831      	bhi.n	80048ae <__ssputs_r+0x7a>
 800484a:	898a      	ldrh	r2, [r1, #12]
 800484c:	2190      	movs	r1, #144	; 0x90
 800484e:	00c9      	lsls	r1, r1, #3
 8004850:	420a      	tst	r2, r1
 8004852:	d029      	beq.n	80048a8 <__ssputs_r+0x74>
 8004854:	2003      	movs	r0, #3
 8004856:	6921      	ldr	r1, [r4, #16]
 8004858:	1a5b      	subs	r3, r3, r1
 800485a:	9302      	str	r3, [sp, #8]
 800485c:	6963      	ldr	r3, [r4, #20]
 800485e:	4343      	muls	r3, r0
 8004860:	0fdd      	lsrs	r5, r3, #31
 8004862:	18ed      	adds	r5, r5, r3
 8004864:	9b01      	ldr	r3, [sp, #4]
 8004866:	9802      	ldr	r0, [sp, #8]
 8004868:	3301      	adds	r3, #1
 800486a:	181b      	adds	r3, r3, r0
 800486c:	106d      	asrs	r5, r5, #1
 800486e:	42ab      	cmp	r3, r5
 8004870:	d900      	bls.n	8004874 <__ssputs_r+0x40>
 8004872:	001d      	movs	r5, r3
 8004874:	0552      	lsls	r2, r2, #21
 8004876:	d529      	bpl.n	80048cc <__ssputs_r+0x98>
 8004878:	0029      	movs	r1, r5
 800487a:	0038      	movs	r0, r7
 800487c:	f7ff ff48 	bl	8004710 <_malloc_r>
 8004880:	1e06      	subs	r6, r0, #0
 8004882:	d02d      	beq.n	80048e0 <__ssputs_r+0xac>
 8004884:	9a02      	ldr	r2, [sp, #8]
 8004886:	6921      	ldr	r1, [r4, #16]
 8004888:	f000 fae7 	bl	8004e5a <memcpy>
 800488c:	89a2      	ldrh	r2, [r4, #12]
 800488e:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <__ssputs_r+0xc0>)
 8004890:	401a      	ands	r2, r3
 8004892:	2380      	movs	r3, #128	; 0x80
 8004894:	4313      	orrs	r3, r2
 8004896:	81a3      	strh	r3, [r4, #12]
 8004898:	9b02      	ldr	r3, [sp, #8]
 800489a:	6126      	str	r6, [r4, #16]
 800489c:	18f6      	adds	r6, r6, r3
 800489e:	6026      	str	r6, [r4, #0]
 80048a0:	6165      	str	r5, [r4, #20]
 80048a2:	9e01      	ldr	r6, [sp, #4]
 80048a4:	1aed      	subs	r5, r5, r3
 80048a6:	60a5      	str	r5, [r4, #8]
 80048a8:	9b01      	ldr	r3, [sp, #4]
 80048aa:	429e      	cmp	r6, r3
 80048ac:	d900      	bls.n	80048b0 <__ssputs_r+0x7c>
 80048ae:	9e01      	ldr	r6, [sp, #4]
 80048b0:	0032      	movs	r2, r6
 80048b2:	9903      	ldr	r1, [sp, #12]
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	f000 fa9f 	bl	8004df8 <memmove>
 80048ba:	2000      	movs	r0, #0
 80048bc:	68a3      	ldr	r3, [r4, #8]
 80048be:	1b9b      	subs	r3, r3, r6
 80048c0:	60a3      	str	r3, [r4, #8]
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	199b      	adds	r3, r3, r6
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	b005      	add	sp, #20
 80048ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048cc:	002a      	movs	r2, r5
 80048ce:	0038      	movs	r0, r7
 80048d0:	f000 facc 	bl	8004e6c <_realloc_r>
 80048d4:	1e06      	subs	r6, r0, #0
 80048d6:	d1df      	bne.n	8004898 <__ssputs_r+0x64>
 80048d8:	0038      	movs	r0, r7
 80048da:	6921      	ldr	r1, [r4, #16]
 80048dc:	f7ff feac 	bl	8004638 <_free_r>
 80048e0:	230c      	movs	r3, #12
 80048e2:	2001      	movs	r0, #1
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	89a2      	ldrh	r2, [r4, #12]
 80048e8:	3334      	adds	r3, #52	; 0x34
 80048ea:	4313      	orrs	r3, r2
 80048ec:	81a3      	strh	r3, [r4, #12]
 80048ee:	4240      	negs	r0, r0
 80048f0:	e7ea      	b.n	80048c8 <__ssputs_r+0x94>
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	fffffb7f 	.word	0xfffffb7f

080048f8 <_svfiprintf_r>:
 80048f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048fa:	b0a1      	sub	sp, #132	; 0x84
 80048fc:	9003      	str	r0, [sp, #12]
 80048fe:	001d      	movs	r5, r3
 8004900:	898b      	ldrh	r3, [r1, #12]
 8004902:	000f      	movs	r7, r1
 8004904:	0016      	movs	r6, r2
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	d511      	bpl.n	800492e <_svfiprintf_r+0x36>
 800490a:	690b      	ldr	r3, [r1, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10e      	bne.n	800492e <_svfiprintf_r+0x36>
 8004910:	2140      	movs	r1, #64	; 0x40
 8004912:	f7ff fefd 	bl	8004710 <_malloc_r>
 8004916:	6038      	str	r0, [r7, #0]
 8004918:	6138      	str	r0, [r7, #16]
 800491a:	2800      	cmp	r0, #0
 800491c:	d105      	bne.n	800492a <_svfiprintf_r+0x32>
 800491e:	230c      	movs	r3, #12
 8004920:	9a03      	ldr	r2, [sp, #12]
 8004922:	3801      	subs	r0, #1
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	b021      	add	sp, #132	; 0x84
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492a:	2340      	movs	r3, #64	; 0x40
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	2300      	movs	r3, #0
 8004930:	ac08      	add	r4, sp, #32
 8004932:	6163      	str	r3, [r4, #20]
 8004934:	3320      	adds	r3, #32
 8004936:	7663      	strb	r3, [r4, #25]
 8004938:	3310      	adds	r3, #16
 800493a:	76a3      	strb	r3, [r4, #26]
 800493c:	9507      	str	r5, [sp, #28]
 800493e:	0035      	movs	r5, r6
 8004940:	782b      	ldrb	r3, [r5, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <_svfiprintf_r+0x52>
 8004946:	2b25      	cmp	r3, #37	; 0x25
 8004948:	d148      	bne.n	80049dc <_svfiprintf_r+0xe4>
 800494a:	1bab      	subs	r3, r5, r6
 800494c:	9305      	str	r3, [sp, #20]
 800494e:	42b5      	cmp	r5, r6
 8004950:	d00b      	beq.n	800496a <_svfiprintf_r+0x72>
 8004952:	0032      	movs	r2, r6
 8004954:	0039      	movs	r1, r7
 8004956:	9803      	ldr	r0, [sp, #12]
 8004958:	f7ff ff6c 	bl	8004834 <__ssputs_r>
 800495c:	3001      	adds	r0, #1
 800495e:	d100      	bne.n	8004962 <_svfiprintf_r+0x6a>
 8004960:	e0af      	b.n	8004ac2 <_svfiprintf_r+0x1ca>
 8004962:	6963      	ldr	r3, [r4, #20]
 8004964:	9a05      	ldr	r2, [sp, #20]
 8004966:	189b      	adds	r3, r3, r2
 8004968:	6163      	str	r3, [r4, #20]
 800496a:	782b      	ldrb	r3, [r5, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d100      	bne.n	8004972 <_svfiprintf_r+0x7a>
 8004970:	e0a7      	b.n	8004ac2 <_svfiprintf_r+0x1ca>
 8004972:	2201      	movs	r2, #1
 8004974:	2300      	movs	r3, #0
 8004976:	4252      	negs	r2, r2
 8004978:	6062      	str	r2, [r4, #4]
 800497a:	a904      	add	r1, sp, #16
 800497c:	3254      	adds	r2, #84	; 0x54
 800497e:	1852      	adds	r2, r2, r1
 8004980:	1c6e      	adds	r6, r5, #1
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	60e3      	str	r3, [r4, #12]
 8004986:	60a3      	str	r3, [r4, #8]
 8004988:	7013      	strb	r3, [r2, #0]
 800498a:	65a3      	str	r3, [r4, #88]	; 0x58
 800498c:	4b55      	ldr	r3, [pc, #340]	; (8004ae4 <_svfiprintf_r+0x1ec>)
 800498e:	2205      	movs	r2, #5
 8004990:	0018      	movs	r0, r3
 8004992:	7831      	ldrb	r1, [r6, #0]
 8004994:	9305      	str	r3, [sp, #20]
 8004996:	f000 fa55 	bl	8004e44 <memchr>
 800499a:	1c75      	adds	r5, r6, #1
 800499c:	2800      	cmp	r0, #0
 800499e:	d11f      	bne.n	80049e0 <_svfiprintf_r+0xe8>
 80049a0:	6822      	ldr	r2, [r4, #0]
 80049a2:	06d3      	lsls	r3, r2, #27
 80049a4:	d504      	bpl.n	80049b0 <_svfiprintf_r+0xb8>
 80049a6:	2353      	movs	r3, #83	; 0x53
 80049a8:	a904      	add	r1, sp, #16
 80049aa:	185b      	adds	r3, r3, r1
 80049ac:	2120      	movs	r1, #32
 80049ae:	7019      	strb	r1, [r3, #0]
 80049b0:	0713      	lsls	r3, r2, #28
 80049b2:	d504      	bpl.n	80049be <_svfiprintf_r+0xc6>
 80049b4:	2353      	movs	r3, #83	; 0x53
 80049b6:	a904      	add	r1, sp, #16
 80049b8:	185b      	adds	r3, r3, r1
 80049ba:	212b      	movs	r1, #43	; 0x2b
 80049bc:	7019      	strb	r1, [r3, #0]
 80049be:	7833      	ldrb	r3, [r6, #0]
 80049c0:	2b2a      	cmp	r3, #42	; 0x2a
 80049c2:	d016      	beq.n	80049f2 <_svfiprintf_r+0xfa>
 80049c4:	0035      	movs	r5, r6
 80049c6:	2100      	movs	r1, #0
 80049c8:	200a      	movs	r0, #10
 80049ca:	68e3      	ldr	r3, [r4, #12]
 80049cc:	782a      	ldrb	r2, [r5, #0]
 80049ce:	1c6e      	adds	r6, r5, #1
 80049d0:	3a30      	subs	r2, #48	; 0x30
 80049d2:	2a09      	cmp	r2, #9
 80049d4:	d94e      	bls.n	8004a74 <_svfiprintf_r+0x17c>
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d111      	bne.n	80049fe <_svfiprintf_r+0x106>
 80049da:	e017      	b.n	8004a0c <_svfiprintf_r+0x114>
 80049dc:	3501      	adds	r5, #1
 80049de:	e7af      	b.n	8004940 <_svfiprintf_r+0x48>
 80049e0:	9b05      	ldr	r3, [sp, #20]
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	1ac0      	subs	r0, r0, r3
 80049e6:	2301      	movs	r3, #1
 80049e8:	4083      	lsls	r3, r0
 80049ea:	4313      	orrs	r3, r2
 80049ec:	002e      	movs	r6, r5
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	e7cc      	b.n	800498c <_svfiprintf_r+0x94>
 80049f2:	9b07      	ldr	r3, [sp, #28]
 80049f4:	1d19      	adds	r1, r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	9107      	str	r1, [sp, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	db01      	blt.n	8004a02 <_svfiprintf_r+0x10a>
 80049fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a00:	e004      	b.n	8004a0c <_svfiprintf_r+0x114>
 8004a02:	425b      	negs	r3, r3
 8004a04:	60e3      	str	r3, [r4, #12]
 8004a06:	2302      	movs	r3, #2
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	782b      	ldrb	r3, [r5, #0]
 8004a0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a10:	d10a      	bne.n	8004a28 <_svfiprintf_r+0x130>
 8004a12:	786b      	ldrb	r3, [r5, #1]
 8004a14:	2b2a      	cmp	r3, #42	; 0x2a
 8004a16:	d135      	bne.n	8004a84 <_svfiprintf_r+0x18c>
 8004a18:	9b07      	ldr	r3, [sp, #28]
 8004a1a:	3502      	adds	r5, #2
 8004a1c:	1d1a      	adds	r2, r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	9207      	str	r2, [sp, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	db2b      	blt.n	8004a7e <_svfiprintf_r+0x186>
 8004a26:	9309      	str	r3, [sp, #36]	; 0x24
 8004a28:	4e2f      	ldr	r6, [pc, #188]	; (8004ae8 <_svfiprintf_r+0x1f0>)
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	0030      	movs	r0, r6
 8004a2e:	7829      	ldrb	r1, [r5, #0]
 8004a30:	f000 fa08 	bl	8004e44 <memchr>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d006      	beq.n	8004a46 <_svfiprintf_r+0x14e>
 8004a38:	2340      	movs	r3, #64	; 0x40
 8004a3a:	1b80      	subs	r0, r0, r6
 8004a3c:	4083      	lsls	r3, r0
 8004a3e:	6822      	ldr	r2, [r4, #0]
 8004a40:	3501      	adds	r5, #1
 8004a42:	4313      	orrs	r3, r2
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	7829      	ldrb	r1, [r5, #0]
 8004a48:	2206      	movs	r2, #6
 8004a4a:	4828      	ldr	r0, [pc, #160]	; (8004aec <_svfiprintf_r+0x1f4>)
 8004a4c:	1c6e      	adds	r6, r5, #1
 8004a4e:	7621      	strb	r1, [r4, #24]
 8004a50:	f000 f9f8 	bl	8004e44 <memchr>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d03c      	beq.n	8004ad2 <_svfiprintf_r+0x1da>
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <_svfiprintf_r+0x1f8>)
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d125      	bne.n	8004aaa <_svfiprintf_r+0x1b2>
 8004a5e:	2207      	movs	r2, #7
 8004a60:	9b07      	ldr	r3, [sp, #28]
 8004a62:	3307      	adds	r3, #7
 8004a64:	4393      	bics	r3, r2
 8004a66:	3308      	adds	r3, #8
 8004a68:	9307      	str	r3, [sp, #28]
 8004a6a:	6963      	ldr	r3, [r4, #20]
 8004a6c:	9a04      	ldr	r2, [sp, #16]
 8004a6e:	189b      	adds	r3, r3, r2
 8004a70:	6163      	str	r3, [r4, #20]
 8004a72:	e764      	b.n	800493e <_svfiprintf_r+0x46>
 8004a74:	4343      	muls	r3, r0
 8004a76:	0035      	movs	r5, r6
 8004a78:	2101      	movs	r1, #1
 8004a7a:	189b      	adds	r3, r3, r2
 8004a7c:	e7a6      	b.n	80049cc <_svfiprintf_r+0xd4>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	425b      	negs	r3, r3
 8004a82:	e7d0      	b.n	8004a26 <_svfiprintf_r+0x12e>
 8004a84:	2300      	movs	r3, #0
 8004a86:	200a      	movs	r0, #10
 8004a88:	001a      	movs	r2, r3
 8004a8a:	3501      	adds	r5, #1
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	7829      	ldrb	r1, [r5, #0]
 8004a90:	1c6e      	adds	r6, r5, #1
 8004a92:	3930      	subs	r1, #48	; 0x30
 8004a94:	2909      	cmp	r1, #9
 8004a96:	d903      	bls.n	8004aa0 <_svfiprintf_r+0x1a8>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0c5      	beq.n	8004a28 <_svfiprintf_r+0x130>
 8004a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a9e:	e7c3      	b.n	8004a28 <_svfiprintf_r+0x130>
 8004aa0:	4342      	muls	r2, r0
 8004aa2:	0035      	movs	r5, r6
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	1852      	adds	r2, r2, r1
 8004aa8:	e7f1      	b.n	8004a8e <_svfiprintf_r+0x196>
 8004aaa:	aa07      	add	r2, sp, #28
 8004aac:	9200      	str	r2, [sp, #0]
 8004aae:	0021      	movs	r1, r4
 8004ab0:	003a      	movs	r2, r7
 8004ab2:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <_svfiprintf_r+0x1fc>)
 8004ab4:	9803      	ldr	r0, [sp, #12]
 8004ab6:	e000      	b.n	8004aba <_svfiprintf_r+0x1c2>
 8004ab8:	bf00      	nop
 8004aba:	9004      	str	r0, [sp, #16]
 8004abc:	9b04      	ldr	r3, [sp, #16]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	d1d3      	bne.n	8004a6a <_svfiprintf_r+0x172>
 8004ac2:	89bb      	ldrh	r3, [r7, #12]
 8004ac4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ac6:	065b      	lsls	r3, r3, #25
 8004ac8:	d400      	bmi.n	8004acc <_svfiprintf_r+0x1d4>
 8004aca:	e72c      	b.n	8004926 <_svfiprintf_r+0x2e>
 8004acc:	2001      	movs	r0, #1
 8004ace:	4240      	negs	r0, r0
 8004ad0:	e729      	b.n	8004926 <_svfiprintf_r+0x2e>
 8004ad2:	aa07      	add	r2, sp, #28
 8004ad4:	9200      	str	r2, [sp, #0]
 8004ad6:	0021      	movs	r1, r4
 8004ad8:	003a      	movs	r2, r7
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <_svfiprintf_r+0x1fc>)
 8004adc:	9803      	ldr	r0, [sp, #12]
 8004ade:	f000 f87b 	bl	8004bd8 <_printf_i>
 8004ae2:	e7ea      	b.n	8004aba <_svfiprintf_r+0x1c2>
 8004ae4:	08004f8c 	.word	0x08004f8c
 8004ae8:	08004f92 	.word	0x08004f92
 8004aec:	08004f96 	.word	0x08004f96
 8004af0:	00000000 	.word	0x00000000
 8004af4:	08004835 	.word	0x08004835

08004af8 <_printf_common>:
 8004af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004afa:	0016      	movs	r6, r2
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	688a      	ldr	r2, [r1, #8]
 8004b00:	690b      	ldr	r3, [r1, #16]
 8004b02:	000c      	movs	r4, r1
 8004b04:	9000      	str	r0, [sp, #0]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	da00      	bge.n	8004b0c <_printf_common+0x14>
 8004b0a:	0013      	movs	r3, r2
 8004b0c:	0022      	movs	r2, r4
 8004b0e:	6033      	str	r3, [r6, #0]
 8004b10:	3243      	adds	r2, #67	; 0x43
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	d001      	beq.n	8004b1c <_printf_common+0x24>
 8004b18:	3301      	adds	r3, #1
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	069b      	lsls	r3, r3, #26
 8004b20:	d502      	bpl.n	8004b28 <_printf_common+0x30>
 8004b22:	6833      	ldr	r3, [r6, #0]
 8004b24:	3302      	adds	r3, #2
 8004b26:	6033      	str	r3, [r6, #0]
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	2306      	movs	r3, #6
 8004b2c:	0015      	movs	r5, r2
 8004b2e:	401d      	ands	r5, r3
 8004b30:	421a      	tst	r2, r3
 8004b32:	d027      	beq.n	8004b84 <_printf_common+0x8c>
 8004b34:	0023      	movs	r3, r4
 8004b36:	3343      	adds	r3, #67	; 0x43
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	1e5a      	subs	r2, r3, #1
 8004b3c:	4193      	sbcs	r3, r2
 8004b3e:	6822      	ldr	r2, [r4, #0]
 8004b40:	0692      	lsls	r2, r2, #26
 8004b42:	d430      	bmi.n	8004ba6 <_printf_common+0xae>
 8004b44:	0022      	movs	r2, r4
 8004b46:	9901      	ldr	r1, [sp, #4]
 8004b48:	9800      	ldr	r0, [sp, #0]
 8004b4a:	9d08      	ldr	r5, [sp, #32]
 8004b4c:	3243      	adds	r2, #67	; 0x43
 8004b4e:	47a8      	blx	r5
 8004b50:	3001      	adds	r0, #1
 8004b52:	d025      	beq.n	8004ba0 <_printf_common+0xa8>
 8004b54:	2206      	movs	r2, #6
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	2500      	movs	r5, #0
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d105      	bne.n	8004b6c <_printf_common+0x74>
 8004b60:	6833      	ldr	r3, [r6, #0]
 8004b62:	68e5      	ldr	r5, [r4, #12]
 8004b64:	1aed      	subs	r5, r5, r3
 8004b66:	43eb      	mvns	r3, r5
 8004b68:	17db      	asrs	r3, r3, #31
 8004b6a:	401d      	ands	r5, r3
 8004b6c:	68a3      	ldr	r3, [r4, #8]
 8004b6e:	6922      	ldr	r2, [r4, #16]
 8004b70:	4293      	cmp	r3, r2
 8004b72:	dd01      	ble.n	8004b78 <_printf_common+0x80>
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	18ed      	adds	r5, r5, r3
 8004b78:	2600      	movs	r6, #0
 8004b7a:	42b5      	cmp	r5, r6
 8004b7c:	d120      	bne.n	8004bc0 <_printf_common+0xc8>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e010      	b.n	8004ba4 <_printf_common+0xac>
 8004b82:	3501      	adds	r5, #1
 8004b84:	68e3      	ldr	r3, [r4, #12]
 8004b86:	6832      	ldr	r2, [r6, #0]
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	42ab      	cmp	r3, r5
 8004b8c:	ddd2      	ble.n	8004b34 <_printf_common+0x3c>
 8004b8e:	0022      	movs	r2, r4
 8004b90:	2301      	movs	r3, #1
 8004b92:	9901      	ldr	r1, [sp, #4]
 8004b94:	9800      	ldr	r0, [sp, #0]
 8004b96:	9f08      	ldr	r7, [sp, #32]
 8004b98:	3219      	adds	r2, #25
 8004b9a:	47b8      	blx	r7
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d1f0      	bne.n	8004b82 <_printf_common+0x8a>
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	4240      	negs	r0, r0
 8004ba4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ba6:	2030      	movs	r0, #48	; 0x30
 8004ba8:	18e1      	adds	r1, r4, r3
 8004baa:	3143      	adds	r1, #67	; 0x43
 8004bac:	7008      	strb	r0, [r1, #0]
 8004bae:	0021      	movs	r1, r4
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	3145      	adds	r1, #69	; 0x45
 8004bb4:	7809      	ldrb	r1, [r1, #0]
 8004bb6:	18a2      	adds	r2, r4, r2
 8004bb8:	3243      	adds	r2, #67	; 0x43
 8004bba:	3302      	adds	r3, #2
 8004bbc:	7011      	strb	r1, [r2, #0]
 8004bbe:	e7c1      	b.n	8004b44 <_printf_common+0x4c>
 8004bc0:	0022      	movs	r2, r4
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	9901      	ldr	r1, [sp, #4]
 8004bc6:	9800      	ldr	r0, [sp, #0]
 8004bc8:	9f08      	ldr	r7, [sp, #32]
 8004bca:	321a      	adds	r2, #26
 8004bcc:	47b8      	blx	r7
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d0e6      	beq.n	8004ba0 <_printf_common+0xa8>
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7d1      	b.n	8004b7a <_printf_common+0x82>
	...

08004bd8 <_printf_i>:
 8004bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bda:	b08b      	sub	sp, #44	; 0x2c
 8004bdc:	9206      	str	r2, [sp, #24]
 8004bde:	000a      	movs	r2, r1
 8004be0:	3243      	adds	r2, #67	; 0x43
 8004be2:	9307      	str	r3, [sp, #28]
 8004be4:	9005      	str	r0, [sp, #20]
 8004be6:	9204      	str	r2, [sp, #16]
 8004be8:	7e0a      	ldrb	r2, [r1, #24]
 8004bea:	000c      	movs	r4, r1
 8004bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bee:	2a78      	cmp	r2, #120	; 0x78
 8004bf0:	d809      	bhi.n	8004c06 <_printf_i+0x2e>
 8004bf2:	2a62      	cmp	r2, #98	; 0x62
 8004bf4:	d80b      	bhi.n	8004c0e <_printf_i+0x36>
 8004bf6:	2a00      	cmp	r2, #0
 8004bf8:	d100      	bne.n	8004bfc <_printf_i+0x24>
 8004bfa:	e0be      	b.n	8004d7a <_printf_i+0x1a2>
 8004bfc:	497c      	ldr	r1, [pc, #496]	; (8004df0 <_printf_i+0x218>)
 8004bfe:	9103      	str	r1, [sp, #12]
 8004c00:	2a58      	cmp	r2, #88	; 0x58
 8004c02:	d100      	bne.n	8004c06 <_printf_i+0x2e>
 8004c04:	e093      	b.n	8004d2e <_printf_i+0x156>
 8004c06:	0026      	movs	r6, r4
 8004c08:	3642      	adds	r6, #66	; 0x42
 8004c0a:	7032      	strb	r2, [r6, #0]
 8004c0c:	e022      	b.n	8004c54 <_printf_i+0x7c>
 8004c0e:	0010      	movs	r0, r2
 8004c10:	3863      	subs	r0, #99	; 0x63
 8004c12:	2815      	cmp	r0, #21
 8004c14:	d8f7      	bhi.n	8004c06 <_printf_i+0x2e>
 8004c16:	f7fb fa7d 	bl	8000114 <__gnu_thumb1_case_shi>
 8004c1a:	0016      	.short	0x0016
 8004c1c:	fff6001f 	.word	0xfff6001f
 8004c20:	fff6fff6 	.word	0xfff6fff6
 8004c24:	001ffff6 	.word	0x001ffff6
 8004c28:	fff6fff6 	.word	0xfff6fff6
 8004c2c:	fff6fff6 	.word	0xfff6fff6
 8004c30:	003600a3 	.word	0x003600a3
 8004c34:	fff60083 	.word	0xfff60083
 8004c38:	00b4fff6 	.word	0x00b4fff6
 8004c3c:	0036fff6 	.word	0x0036fff6
 8004c40:	fff6fff6 	.word	0xfff6fff6
 8004c44:	0087      	.short	0x0087
 8004c46:	0026      	movs	r6, r4
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	3642      	adds	r6, #66	; 0x42
 8004c4c:	1d11      	adds	r1, r2, #4
 8004c4e:	6019      	str	r1, [r3, #0]
 8004c50:	6813      	ldr	r3, [r2, #0]
 8004c52:	7033      	strb	r3, [r6, #0]
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0a2      	b.n	8004d9e <_printf_i+0x1c6>
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	6809      	ldr	r1, [r1, #0]
 8004c5c:	1d02      	adds	r2, r0, #4
 8004c5e:	060d      	lsls	r5, r1, #24
 8004c60:	d50b      	bpl.n	8004c7a <_printf_i+0xa2>
 8004c62:	6805      	ldr	r5, [r0, #0]
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	2d00      	cmp	r5, #0
 8004c68:	da03      	bge.n	8004c72 <_printf_i+0x9a>
 8004c6a:	232d      	movs	r3, #45	; 0x2d
 8004c6c:	9a04      	ldr	r2, [sp, #16]
 8004c6e:	426d      	negs	r5, r5
 8004c70:	7013      	strb	r3, [r2, #0]
 8004c72:	4b5f      	ldr	r3, [pc, #380]	; (8004df0 <_printf_i+0x218>)
 8004c74:	270a      	movs	r7, #10
 8004c76:	9303      	str	r3, [sp, #12]
 8004c78:	e01b      	b.n	8004cb2 <_printf_i+0xda>
 8004c7a:	6805      	ldr	r5, [r0, #0]
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	0649      	lsls	r1, r1, #25
 8004c80:	d5f1      	bpl.n	8004c66 <_printf_i+0x8e>
 8004c82:	b22d      	sxth	r5, r5
 8004c84:	e7ef      	b.n	8004c66 <_printf_i+0x8e>
 8004c86:	680d      	ldr	r5, [r1, #0]
 8004c88:	6819      	ldr	r1, [r3, #0]
 8004c8a:	1d08      	adds	r0, r1, #4
 8004c8c:	6018      	str	r0, [r3, #0]
 8004c8e:	062e      	lsls	r6, r5, #24
 8004c90:	d501      	bpl.n	8004c96 <_printf_i+0xbe>
 8004c92:	680d      	ldr	r5, [r1, #0]
 8004c94:	e003      	b.n	8004c9e <_printf_i+0xc6>
 8004c96:	066d      	lsls	r5, r5, #25
 8004c98:	d5fb      	bpl.n	8004c92 <_printf_i+0xba>
 8004c9a:	680d      	ldr	r5, [r1, #0]
 8004c9c:	b2ad      	uxth	r5, r5
 8004c9e:	4b54      	ldr	r3, [pc, #336]	; (8004df0 <_printf_i+0x218>)
 8004ca0:	2708      	movs	r7, #8
 8004ca2:	9303      	str	r3, [sp, #12]
 8004ca4:	2a6f      	cmp	r2, #111	; 0x6f
 8004ca6:	d000      	beq.n	8004caa <_printf_i+0xd2>
 8004ca8:	3702      	adds	r7, #2
 8004caa:	0023      	movs	r3, r4
 8004cac:	2200      	movs	r2, #0
 8004cae:	3343      	adds	r3, #67	; 0x43
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	6863      	ldr	r3, [r4, #4]
 8004cb4:	60a3      	str	r3, [r4, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	db03      	blt.n	8004cc2 <_printf_i+0xea>
 8004cba:	2104      	movs	r1, #4
 8004cbc:	6822      	ldr	r2, [r4, #0]
 8004cbe:	438a      	bics	r2, r1
 8004cc0:	6022      	str	r2, [r4, #0]
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	d102      	bne.n	8004ccc <_printf_i+0xf4>
 8004cc6:	9e04      	ldr	r6, [sp, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00c      	beq.n	8004ce6 <_printf_i+0x10e>
 8004ccc:	9e04      	ldr	r6, [sp, #16]
 8004cce:	0028      	movs	r0, r5
 8004cd0:	0039      	movs	r1, r7
 8004cd2:	f7fb faaf 	bl	8000234 <__aeabi_uidivmod>
 8004cd6:	9b03      	ldr	r3, [sp, #12]
 8004cd8:	3e01      	subs	r6, #1
 8004cda:	5c5b      	ldrb	r3, [r3, r1]
 8004cdc:	7033      	strb	r3, [r6, #0]
 8004cde:	002b      	movs	r3, r5
 8004ce0:	0005      	movs	r5, r0
 8004ce2:	429f      	cmp	r7, r3
 8004ce4:	d9f3      	bls.n	8004cce <_printf_i+0xf6>
 8004ce6:	2f08      	cmp	r7, #8
 8004ce8:	d109      	bne.n	8004cfe <_printf_i+0x126>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	07db      	lsls	r3, r3, #31
 8004cee:	d506      	bpl.n	8004cfe <_printf_i+0x126>
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	dc02      	bgt.n	8004cfe <_printf_i+0x126>
 8004cf8:	2330      	movs	r3, #48	; 0x30
 8004cfa:	3e01      	subs	r6, #1
 8004cfc:	7033      	strb	r3, [r6, #0]
 8004cfe:	9b04      	ldr	r3, [sp, #16]
 8004d00:	1b9b      	subs	r3, r3, r6
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	9b07      	ldr	r3, [sp, #28]
 8004d06:	0021      	movs	r1, r4
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	9805      	ldr	r0, [sp, #20]
 8004d0c:	9b06      	ldr	r3, [sp, #24]
 8004d0e:	aa09      	add	r2, sp, #36	; 0x24
 8004d10:	f7ff fef2 	bl	8004af8 <_printf_common>
 8004d14:	3001      	adds	r0, #1
 8004d16:	d147      	bne.n	8004da8 <_printf_i+0x1d0>
 8004d18:	2001      	movs	r0, #1
 8004d1a:	4240      	negs	r0, r0
 8004d1c:	b00b      	add	sp, #44	; 0x2c
 8004d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d20:	2220      	movs	r2, #32
 8004d22:	6809      	ldr	r1, [r1, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	6022      	str	r2, [r4, #0]
 8004d28:	2278      	movs	r2, #120	; 0x78
 8004d2a:	4932      	ldr	r1, [pc, #200]	; (8004df4 <_printf_i+0x21c>)
 8004d2c:	9103      	str	r1, [sp, #12]
 8004d2e:	0021      	movs	r1, r4
 8004d30:	3145      	adds	r1, #69	; 0x45
 8004d32:	700a      	strb	r2, [r1, #0]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	6822      	ldr	r2, [r4, #0]
 8004d38:	c920      	ldmia	r1!, {r5}
 8004d3a:	0610      	lsls	r0, r2, #24
 8004d3c:	d402      	bmi.n	8004d44 <_printf_i+0x16c>
 8004d3e:	0650      	lsls	r0, r2, #25
 8004d40:	d500      	bpl.n	8004d44 <_printf_i+0x16c>
 8004d42:	b2ad      	uxth	r5, r5
 8004d44:	6019      	str	r1, [r3, #0]
 8004d46:	07d3      	lsls	r3, r2, #31
 8004d48:	d502      	bpl.n	8004d50 <_printf_i+0x178>
 8004d4a:	2320      	movs	r3, #32
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	6023      	str	r3, [r4, #0]
 8004d50:	2710      	movs	r7, #16
 8004d52:	2d00      	cmp	r5, #0
 8004d54:	d1a9      	bne.n	8004caa <_printf_i+0xd2>
 8004d56:	2220      	movs	r2, #32
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	4393      	bics	r3, r2
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	e7a4      	b.n	8004caa <_printf_i+0xd2>
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	680d      	ldr	r5, [r1, #0]
 8004d64:	1d10      	adds	r0, r2, #4
 8004d66:	6949      	ldr	r1, [r1, #20]
 8004d68:	6018      	str	r0, [r3, #0]
 8004d6a:	6813      	ldr	r3, [r2, #0]
 8004d6c:	062e      	lsls	r6, r5, #24
 8004d6e:	d501      	bpl.n	8004d74 <_printf_i+0x19c>
 8004d70:	6019      	str	r1, [r3, #0]
 8004d72:	e002      	b.n	8004d7a <_printf_i+0x1a2>
 8004d74:	066d      	lsls	r5, r5, #25
 8004d76:	d5fb      	bpl.n	8004d70 <_printf_i+0x198>
 8004d78:	8019      	strh	r1, [r3, #0]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9e04      	ldr	r6, [sp, #16]
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	e7c0      	b.n	8004d04 <_printf_i+0x12c>
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	1d11      	adds	r1, r2, #4
 8004d86:	6019      	str	r1, [r3, #0]
 8004d88:	6816      	ldr	r6, [r2, #0]
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	0030      	movs	r0, r6
 8004d8e:	6862      	ldr	r2, [r4, #4]
 8004d90:	f000 f858 	bl	8004e44 <memchr>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d001      	beq.n	8004d9c <_printf_i+0x1c4>
 8004d98:	1b80      	subs	r0, r0, r6
 8004d9a:	6060      	str	r0, [r4, #4]
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	6123      	str	r3, [r4, #16]
 8004da0:	2300      	movs	r3, #0
 8004da2:	9a04      	ldr	r2, [sp, #16]
 8004da4:	7013      	strb	r3, [r2, #0]
 8004da6:	e7ad      	b.n	8004d04 <_printf_i+0x12c>
 8004da8:	0032      	movs	r2, r6
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	9906      	ldr	r1, [sp, #24]
 8004dae:	9805      	ldr	r0, [sp, #20]
 8004db0:	9d07      	ldr	r5, [sp, #28]
 8004db2:	47a8      	blx	r5
 8004db4:	3001      	adds	r0, #1
 8004db6:	d0af      	beq.n	8004d18 <_printf_i+0x140>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	079b      	lsls	r3, r3, #30
 8004dbc:	d415      	bmi.n	8004dea <_printf_i+0x212>
 8004dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dc0:	68e0      	ldr	r0, [r4, #12]
 8004dc2:	4298      	cmp	r0, r3
 8004dc4:	daaa      	bge.n	8004d1c <_printf_i+0x144>
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	e7a8      	b.n	8004d1c <_printf_i+0x144>
 8004dca:	0022      	movs	r2, r4
 8004dcc:	2301      	movs	r3, #1
 8004dce:	9906      	ldr	r1, [sp, #24]
 8004dd0:	9805      	ldr	r0, [sp, #20]
 8004dd2:	9e07      	ldr	r6, [sp, #28]
 8004dd4:	3219      	adds	r2, #25
 8004dd6:	47b0      	blx	r6
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d09d      	beq.n	8004d18 <_printf_i+0x140>
 8004ddc:	3501      	adds	r5, #1
 8004dde:	68e3      	ldr	r3, [r4, #12]
 8004de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	dcf0      	bgt.n	8004dca <_printf_i+0x1f2>
 8004de8:	e7e9      	b.n	8004dbe <_printf_i+0x1e6>
 8004dea:	2500      	movs	r5, #0
 8004dec:	e7f7      	b.n	8004dde <_printf_i+0x206>
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	08004f9d 	.word	0x08004f9d
 8004df4:	08004fae 	.word	0x08004fae

08004df8 <memmove>:
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	4288      	cmp	r0, r1
 8004dfc:	d902      	bls.n	8004e04 <memmove+0xc>
 8004dfe:	188b      	adds	r3, r1, r2
 8004e00:	4298      	cmp	r0, r3
 8004e02:	d303      	bcc.n	8004e0c <memmove+0x14>
 8004e04:	2300      	movs	r3, #0
 8004e06:	e007      	b.n	8004e18 <memmove+0x20>
 8004e08:	5c8b      	ldrb	r3, [r1, r2]
 8004e0a:	5483      	strb	r3, [r0, r2]
 8004e0c:	3a01      	subs	r2, #1
 8004e0e:	d2fb      	bcs.n	8004e08 <memmove+0x10>
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	5ccc      	ldrb	r4, [r1, r3]
 8004e14:	54c4      	strb	r4, [r0, r3]
 8004e16:	3301      	adds	r3, #1
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d1fa      	bne.n	8004e12 <memmove+0x1a>
 8004e1c:	e7f8      	b.n	8004e10 <memmove+0x18>
	...

08004e20 <_sbrk_r>:
 8004e20:	2300      	movs	r3, #0
 8004e22:	b570      	push	{r4, r5, r6, lr}
 8004e24:	4d06      	ldr	r5, [pc, #24]	; (8004e40 <_sbrk_r+0x20>)
 8004e26:	0004      	movs	r4, r0
 8004e28:	0008      	movs	r0, r1
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	f7fc f82e 	bl	8000e8c <_sbrk>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d103      	bne.n	8004e3c <_sbrk_r+0x1c>
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d000      	beq.n	8004e3c <_sbrk_r+0x1c>
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	20000350 	.word	0x20000350

08004e44 <memchr>:
 8004e44:	b2c9      	uxtb	r1, r1
 8004e46:	1882      	adds	r2, r0, r2
 8004e48:	4290      	cmp	r0, r2
 8004e4a:	d101      	bne.n	8004e50 <memchr+0xc>
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	4770      	bx	lr
 8004e50:	7803      	ldrb	r3, [r0, #0]
 8004e52:	428b      	cmp	r3, r1
 8004e54:	d0fb      	beq.n	8004e4e <memchr+0xa>
 8004e56:	3001      	adds	r0, #1
 8004e58:	e7f6      	b.n	8004e48 <memchr+0x4>

08004e5a <memcpy>:
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d100      	bne.n	8004e64 <memcpy+0xa>
 8004e62:	bd10      	pop	{r4, pc}
 8004e64:	5ccc      	ldrb	r4, [r1, r3]
 8004e66:	54c4      	strb	r4, [r0, r3]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	e7f8      	b.n	8004e5e <memcpy+0x4>

08004e6c <_realloc_r>:
 8004e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e6e:	0007      	movs	r7, r0
 8004e70:	000e      	movs	r6, r1
 8004e72:	0014      	movs	r4, r2
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d105      	bne.n	8004e84 <_realloc_r+0x18>
 8004e78:	0011      	movs	r1, r2
 8004e7a:	f7ff fc49 	bl	8004710 <_malloc_r>
 8004e7e:	0005      	movs	r5, r0
 8004e80:	0028      	movs	r0, r5
 8004e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	d103      	bne.n	8004e90 <_realloc_r+0x24>
 8004e88:	f7ff fbd6 	bl	8004638 <_free_r>
 8004e8c:	0025      	movs	r5, r4
 8004e8e:	e7f7      	b.n	8004e80 <_realloc_r+0x14>
 8004e90:	f000 f81b 	bl	8004eca <_malloc_usable_size_r>
 8004e94:	9001      	str	r0, [sp, #4]
 8004e96:	4284      	cmp	r4, r0
 8004e98:	d803      	bhi.n	8004ea2 <_realloc_r+0x36>
 8004e9a:	0035      	movs	r5, r6
 8004e9c:	0843      	lsrs	r3, r0, #1
 8004e9e:	42a3      	cmp	r3, r4
 8004ea0:	d3ee      	bcc.n	8004e80 <_realloc_r+0x14>
 8004ea2:	0021      	movs	r1, r4
 8004ea4:	0038      	movs	r0, r7
 8004ea6:	f7ff fc33 	bl	8004710 <_malloc_r>
 8004eaa:	1e05      	subs	r5, r0, #0
 8004eac:	d0e8      	beq.n	8004e80 <_realloc_r+0x14>
 8004eae:	9b01      	ldr	r3, [sp, #4]
 8004eb0:	0022      	movs	r2, r4
 8004eb2:	429c      	cmp	r4, r3
 8004eb4:	d900      	bls.n	8004eb8 <_realloc_r+0x4c>
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	0031      	movs	r1, r6
 8004eba:	0028      	movs	r0, r5
 8004ebc:	f7ff ffcd 	bl	8004e5a <memcpy>
 8004ec0:	0031      	movs	r1, r6
 8004ec2:	0038      	movs	r0, r7
 8004ec4:	f7ff fbb8 	bl	8004638 <_free_r>
 8004ec8:	e7da      	b.n	8004e80 <_realloc_r+0x14>

08004eca <_malloc_usable_size_r>:
 8004eca:	1f0b      	subs	r3, r1, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	1f18      	subs	r0, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	da01      	bge.n	8004ed8 <_malloc_usable_size_r+0xe>
 8004ed4:	580b      	ldr	r3, [r1, r0]
 8004ed6:	18c0      	adds	r0, r0, r3
 8004ed8:	4770      	bx	lr
	...

08004edc <_init>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr

08004ee8 <_fini>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr
