
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009140  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080091fc  080091fc  000191fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094cc  080094cc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080094cc  080094cc  000194cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094d4  080094d4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094d4  080094d4  000194d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080094dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  2000006c  08009548  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08009548  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ccb  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f84  00000000  00000000  00037da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b3  00000000  00000000  0003c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b179  00000000  00000000  0003d31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0dd  00000000  00000000  00058494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aef35  00000000  00000000  00072571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005300  00000000  00000000  001214a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001267a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080091e4 	.word	0x080091e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	080091e4 	.word	0x080091e4

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_uldivmod>:
 8000428:	2b00      	cmp	r3, #0
 800042a:	d111      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 800042c:	2a00      	cmp	r2, #0
 800042e:	d10f      	bne.n	8000450 <__aeabi_uldivmod+0x28>
 8000430:	2900      	cmp	r1, #0
 8000432:	d100      	bne.n	8000436 <__aeabi_uldivmod+0xe>
 8000434:	2800      	cmp	r0, #0
 8000436:	d002      	beq.n	800043e <__aeabi_uldivmod+0x16>
 8000438:	2100      	movs	r1, #0
 800043a:	43c9      	mvns	r1, r1
 800043c:	0008      	movs	r0, r1
 800043e:	b407      	push	{r0, r1, r2}
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <__aeabi_uldivmod+0x24>)
 8000442:	a102      	add	r1, pc, #8	; (adr r1, 800044c <__aeabi_uldivmod+0x24>)
 8000444:	1840      	adds	r0, r0, r1
 8000446:	9002      	str	r0, [sp, #8]
 8000448:	bd03      	pop	{r0, r1, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	ffffffd9 	.word	0xffffffd9
 8000450:	b403      	push	{r0, r1}
 8000452:	4668      	mov	r0, sp
 8000454:	b501      	push	{r0, lr}
 8000456:	9802      	ldr	r0, [sp, #8]
 8000458:	f000 f806 	bl	8000468 <__udivmoddi4>
 800045c:	9b01      	ldr	r3, [sp, #4]
 800045e:	469e      	mov	lr, r3
 8000460:	b002      	add	sp, #8
 8000462:	bc0c      	pop	{r2, r3}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__udivmoddi4>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	b5e0      	push	{r5, r6, r7, lr}
 8000474:	0004      	movs	r4, r0
 8000476:	000d      	movs	r5, r1
 8000478:	4692      	mov	sl, r2
 800047a:	4699      	mov	r9, r3
 800047c:	b083      	sub	sp, #12
 800047e:	428b      	cmp	r3, r1
 8000480:	d830      	bhi.n	80004e4 <__udivmoddi4+0x7c>
 8000482:	d02d      	beq.n	80004e0 <__udivmoddi4+0x78>
 8000484:	4649      	mov	r1, r9
 8000486:	4650      	mov	r0, sl
 8000488:	f000 f8ba 	bl	8000600 <__clzdi2>
 800048c:	0029      	movs	r1, r5
 800048e:	0006      	movs	r6, r0
 8000490:	0020      	movs	r0, r4
 8000492:	f000 f8b5 	bl	8000600 <__clzdi2>
 8000496:	1a33      	subs	r3, r6, r0
 8000498:	4698      	mov	r8, r3
 800049a:	3b20      	subs	r3, #32
 800049c:	d434      	bmi.n	8000508 <__udivmoddi4+0xa0>
 800049e:	469b      	mov	fp, r3
 80004a0:	4653      	mov	r3, sl
 80004a2:	465a      	mov	r2, fp
 80004a4:	4093      	lsls	r3, r2
 80004a6:	4642      	mov	r2, r8
 80004a8:	001f      	movs	r7, r3
 80004aa:	4653      	mov	r3, sl
 80004ac:	4093      	lsls	r3, r2
 80004ae:	001e      	movs	r6, r3
 80004b0:	42af      	cmp	r7, r5
 80004b2:	d83b      	bhi.n	800052c <__udivmoddi4+0xc4>
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d100      	bne.n	80004ba <__udivmoddi4+0x52>
 80004b8:	e079      	b.n	80005ae <__udivmoddi4+0x146>
 80004ba:	465b      	mov	r3, fp
 80004bc:	1ba4      	subs	r4, r4, r6
 80004be:	41bd      	sbcs	r5, r7
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	da00      	bge.n	80004c6 <__udivmoddi4+0x5e>
 80004c4:	e076      	b.n	80005b4 <__udivmoddi4+0x14c>
 80004c6:	2200      	movs	r2, #0
 80004c8:	2300      	movs	r3, #0
 80004ca:	9200      	str	r2, [sp, #0]
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2301      	movs	r3, #1
 80004d0:	465a      	mov	r2, fp
 80004d2:	4093      	lsls	r3, r2
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	2301      	movs	r3, #1
 80004d8:	4642      	mov	r2, r8
 80004da:	4093      	lsls	r3, r2
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	e029      	b.n	8000534 <__udivmoddi4+0xcc>
 80004e0:	4282      	cmp	r2, r0
 80004e2:	d9cf      	bls.n	8000484 <__udivmoddi4+0x1c>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2300      	movs	r3, #0
 80004e8:	9200      	str	r2, [sp, #0]
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <__udivmoddi4+0x8e>
 80004f2:	601c      	str	r4, [r3, #0]
 80004f4:	605d      	str	r5, [r3, #4]
 80004f6:	9800      	ldr	r0, [sp, #0]
 80004f8:	9901      	ldr	r1, [sp, #4]
 80004fa:	b003      	add	sp, #12
 80004fc:	bcf0      	pop	{r4, r5, r6, r7}
 80004fe:	46bb      	mov	fp, r7
 8000500:	46b2      	mov	sl, r6
 8000502:	46a9      	mov	r9, r5
 8000504:	46a0      	mov	r8, r4
 8000506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000508:	4642      	mov	r2, r8
 800050a:	469b      	mov	fp, r3
 800050c:	2320      	movs	r3, #32
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	4652      	mov	r2, sl
 8000512:	40da      	lsrs	r2, r3
 8000514:	4641      	mov	r1, r8
 8000516:	0013      	movs	r3, r2
 8000518:	464a      	mov	r2, r9
 800051a:	408a      	lsls	r2, r1
 800051c:	0017      	movs	r7, r2
 800051e:	4642      	mov	r2, r8
 8000520:	431f      	orrs	r7, r3
 8000522:	4653      	mov	r3, sl
 8000524:	4093      	lsls	r3, r2
 8000526:	001e      	movs	r6, r3
 8000528:	42af      	cmp	r7, r5
 800052a:	d9c3      	bls.n	80004b4 <__udivmoddi4+0x4c>
 800052c:	2200      	movs	r2, #0
 800052e:	2300      	movs	r3, #0
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	4643      	mov	r3, r8
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0d8      	beq.n	80004ec <__udivmoddi4+0x84>
 800053a:	07fb      	lsls	r3, r7, #31
 800053c:	0872      	lsrs	r2, r6, #1
 800053e:	431a      	orrs	r2, r3
 8000540:	4646      	mov	r6, r8
 8000542:	087b      	lsrs	r3, r7, #1
 8000544:	e00e      	b.n	8000564 <__udivmoddi4+0xfc>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d101      	bne.n	800054e <__udivmoddi4+0xe6>
 800054a:	42a2      	cmp	r2, r4
 800054c:	d80c      	bhi.n	8000568 <__udivmoddi4+0x100>
 800054e:	1aa4      	subs	r4, r4, r2
 8000550:	419d      	sbcs	r5, r3
 8000552:	2001      	movs	r0, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2100      	movs	r1, #0
 800055a:	3e01      	subs	r6, #1
 800055c:	1824      	adds	r4, r4, r0
 800055e:	414d      	adcs	r5, r1
 8000560:	2e00      	cmp	r6, #0
 8000562:	d006      	beq.n	8000572 <__udivmoddi4+0x10a>
 8000564:	42ab      	cmp	r3, r5
 8000566:	d9ee      	bls.n	8000546 <__udivmoddi4+0xde>
 8000568:	3e01      	subs	r6, #1
 800056a:	1924      	adds	r4, r4, r4
 800056c:	416d      	adcs	r5, r5
 800056e:	2e00      	cmp	r6, #0
 8000570:	d1f8      	bne.n	8000564 <__udivmoddi4+0xfc>
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	465b      	mov	r3, fp
 8000578:	1900      	adds	r0, r0, r4
 800057a:	4169      	adcs	r1, r5
 800057c:	2b00      	cmp	r3, #0
 800057e:	db24      	blt.n	80005ca <__udivmoddi4+0x162>
 8000580:	002b      	movs	r3, r5
 8000582:	465a      	mov	r2, fp
 8000584:	4644      	mov	r4, r8
 8000586:	40d3      	lsrs	r3, r2
 8000588:	002a      	movs	r2, r5
 800058a:	40e2      	lsrs	r2, r4
 800058c:	001c      	movs	r4, r3
 800058e:	465b      	mov	r3, fp
 8000590:	0015      	movs	r5, r2
 8000592:	2b00      	cmp	r3, #0
 8000594:	db2a      	blt.n	80005ec <__udivmoddi4+0x184>
 8000596:	0026      	movs	r6, r4
 8000598:	409e      	lsls	r6, r3
 800059a:	0033      	movs	r3, r6
 800059c:	0026      	movs	r6, r4
 800059e:	4647      	mov	r7, r8
 80005a0:	40be      	lsls	r6, r7
 80005a2:	0032      	movs	r2, r6
 80005a4:	1a80      	subs	r0, r0, r2
 80005a6:	4199      	sbcs	r1, r3
 80005a8:	9000      	str	r0, [sp, #0]
 80005aa:	9101      	str	r1, [sp, #4]
 80005ac:	e79e      	b.n	80004ec <__udivmoddi4+0x84>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d8bc      	bhi.n	800052c <__udivmoddi4+0xc4>
 80005b2:	e782      	b.n	80004ba <__udivmoddi4+0x52>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	2100      	movs	r1, #0
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	2200      	movs	r2, #0
 80005be:	9100      	str	r1, [sp, #0]
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	2201      	movs	r2, #1
 80005c4:	40da      	lsrs	r2, r3
 80005c6:	9201      	str	r2, [sp, #4]
 80005c8:	e785      	b.n	80004d6 <__udivmoddi4+0x6e>
 80005ca:	4642      	mov	r2, r8
 80005cc:	2320      	movs	r3, #32
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	002a      	movs	r2, r5
 80005d2:	4646      	mov	r6, r8
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0023      	movs	r3, r4
 80005d8:	40f3      	lsrs	r3, r6
 80005da:	4644      	mov	r4, r8
 80005dc:	4313      	orrs	r3, r2
 80005de:	002a      	movs	r2, r5
 80005e0:	40e2      	lsrs	r2, r4
 80005e2:	001c      	movs	r4, r3
 80005e4:	465b      	mov	r3, fp
 80005e6:	0015      	movs	r5, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	dad4      	bge.n	8000596 <__udivmoddi4+0x12e>
 80005ec:	4642      	mov	r2, r8
 80005ee:	002f      	movs	r7, r5
 80005f0:	2320      	movs	r3, #32
 80005f2:	0026      	movs	r6, r4
 80005f4:	4097      	lsls	r7, r2
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	40de      	lsrs	r6, r3
 80005fa:	003b      	movs	r3, r7
 80005fc:	4333      	orrs	r3, r6
 80005fe:	e7cd      	b.n	800059c <__udivmoddi4+0x134>

08000600 <__clzdi2>:
 8000600:	b510      	push	{r4, lr}
 8000602:	2900      	cmp	r1, #0
 8000604:	d103      	bne.n	800060e <__clzdi2+0xe>
 8000606:	f000 f807 	bl	8000618 <__clzsi2>
 800060a:	3020      	adds	r0, #32
 800060c:	e002      	b.n	8000614 <__clzdi2+0x14>
 800060e:	0008      	movs	r0, r1
 8000610:	f000 f802 	bl	8000618 <__clzsi2>
 8000614:	bd10      	pop	{r4, pc}
 8000616:	46c0      	nop			; (mov r8, r8)

08000618 <__clzsi2>:
 8000618:	211c      	movs	r1, #28
 800061a:	2301      	movs	r3, #1
 800061c:	041b      	lsls	r3, r3, #16
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0xe>
 8000622:	0c00      	lsrs	r0, r0, #16
 8000624:	3910      	subs	r1, #16
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	4298      	cmp	r0, r3
 800062a:	d301      	bcc.n	8000630 <__clzsi2+0x18>
 800062c:	0a00      	lsrs	r0, r0, #8
 800062e:	3908      	subs	r1, #8
 8000630:	091b      	lsrs	r3, r3, #4
 8000632:	4298      	cmp	r0, r3
 8000634:	d301      	bcc.n	800063a <__clzsi2+0x22>
 8000636:	0900      	lsrs	r0, r0, #4
 8000638:	3904      	subs	r1, #4
 800063a:	a202      	add	r2, pc, #8	; (adr r2, 8000644 <__clzsi2+0x2c>)
 800063c:	5c10      	ldrb	r0, [r2, r0]
 800063e:	1840      	adds	r0, r0, r1
 8000640:	4770      	bx	lr
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	02020304 	.word	0x02020304
 8000648:	01010101 	.word	0x01010101
	...

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f001 fbc3 	bl	8001de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f8e9 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 fbc1 	bl	8000de8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 fb71 	bl	8000d4c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800066a:	f000 f92b 	bl	80008c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800066e:	f000 f98f 	bl	8000990 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000672:	f000 f9cd 	bl	8000a10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000676:	f000 fa1f 	bl	8000ab8 <MX_TIM3_Init>
  MX_TIM6_Init();
 800067a:	f000 fa9f 	bl	8000bbc <MX_TIM6_Init>
  MX_TIM7_Init();
 800067e:	f000 fad9 	bl	8000c34 <MX_TIM7_Init>
  MX_TIM14_Init();
 8000682:	f000 fb13 	bl	8000cac <MX_TIM14_Init>
  MX_TIM17_Init();
 8000686:	f000 fb39 	bl	8000cfc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 800068a:	4b5b      	ldr	r3, [pc, #364]	; (80007f8 <main+0x1a4>)
 800068c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068e:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <main+0x1a4>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	63da      	str	r2, [r3, #60]	; 0x3c
 8000696:	4b58      	ldr	r3, [pc, #352]	; (80007f8 <main+0x1a4>)
 8000698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	697b      	ldr	r3, [r7, #20]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006a2:	4b55      	ldr	r3, [pc, #340]	; (80007f8 <main+0x1a4>)
 80006a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a6:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <main+0x1a4>)
 80006a8:	2110      	movs	r1, #16
 80006aa:	430a      	orrs	r2, r1
 80006ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ae:	4b52      	ldr	r3, [pc, #328]	; (80007f8 <main+0x1a4>)
 80006b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006b2:	2210      	movs	r2, #16
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 80006ba:	4b4f      	ldr	r3, [pc, #316]	; (80007f8 <main+0x1a4>)
 80006bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006be:	4b4e      	ldr	r3, [pc, #312]	; (80007f8 <main+0x1a4>)
 80006c0:	2120      	movs	r1, #32
 80006c2:	430a      	orrs	r2, r1
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c6:	4b4c      	ldr	r3, [pc, #304]	; (80007f8 <main+0x1a4>)
 80006c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ca:	2220      	movs	r2, #32
 80006cc:	4013      	ands	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]

  // Enable the TIM14 peripheral
   __HAL_RCC_TIM14_CLK_ENABLE();
 80006d2:	4b49      	ldr	r3, [pc, #292]	; (80007f8 <main+0x1a4>)
 80006d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d6:	4b48      	ldr	r3, [pc, #288]	; (80007f8 <main+0x1a4>)
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0209      	lsls	r1, r1, #8
 80006dc:	430a      	orrs	r2, r1
 80006de:	641a      	str	r2, [r3, #64]	; 0x40
 80006e0:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <main+0x1a4>)
 80006e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	4013      	ands	r3, r2
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]

  // Enable the TIM17 peripheral
  __HAL_RCC_TIM17_CLK_ENABLE();
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <main+0x1a4>)
 80006f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f2:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <main+0x1a4>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	02c9      	lsls	r1, r1, #11
 80006f8:	430a      	orrs	r2, r1
 80006fa:	641a      	str	r2, [r3, #64]	; 0x40
 80006fc:	4b3e      	ldr	r3, [pc, #248]	; (80007f8 <main+0x1a4>)
 80006fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	02db      	lsls	r3, r3, #11
 8000704:	4013      	ands	r3, r2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	200f      	movs	r0, #15
 8000710:	f002 fb4a 	bl	8002da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000714:	200f      	movs	r0, #15
 8000716:	f002 fb5c 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2011      	movs	r0, #17
 8000720:	f002 fb42 	bl	8002da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000724:	2011      	movs	r0, #17
 8000726:	f002 fb54 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2012      	movs	r0, #18
 8000730:	f002 fb3a 	bl	8002da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8000734:	2012      	movs	r0, #18
 8000736:	f002 fb4c 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM14
  HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	2013      	movs	r0, #19
 8000740:	f002 fb32 	bl	8002da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000744:	2013      	movs	r0, #19
 8000746:	f002 fb44 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM17
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2016      	movs	r0, #22
 8000750:	f002 fb2a 	bl	8002da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000754:	2016      	movs	r0, #22
 8000756:	f002 fb3c 	bl	8002dd2 <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 800075a:	4b28      	ldr	r3, [pc, #160]	; (80007fc <main+0x1a8>)
 800075c:	0018      	movs	r0, r3
 800075e:	f004 fafb 	bl	8004d58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <main+0x1ac>)
 8000764:	0018      	movs	r0, r3
 8000766:	f004 faf7 	bl	8004d58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <main+0x1b0>)
 800076c:	0018      	movs	r0, r3
 800076e:	f004 faf3 	bl	8004d58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <main+0x1b4>)
 8000774:	0018      	movs	r0, r3
 8000776:	f004 faef 	bl	8004d58 <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <main+0x1b8>)
 800077c:	2100      	movs	r1, #0
 800077e:	0018      	movs	r0, r3
 8000780:	f004 fba6 	bl	8004ed0 <HAL_TIM_PWM_Start>

  // I2C Display
  hardwareTestLCD();
 8000784:	f000 fc10 	bl	8000fa8 <hardwareTestLCD>

  // Variables
  int servoAngle;
  int adcValue;
  stateTracker = 1;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <main+0x1bc>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check UART Transmissions
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 800078e:	4921      	ldr	r1, [pc, #132]	; (8000814 <main+0x1c0>)
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <main+0x1c4>)
 8000792:	2201      	movs	r2, #1
 8000794:	0018      	movs	r0, r3
 8000796:	f005 fd55 	bl	8006244 <HAL_UART_Receive_IT>

	  // Get potentiometer value
	  HAL_ADC_Start_IT(&hadc1);
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <main+0x1c8>)
 800079c:	0018      	movs	r0, r3
 800079e:	f001 ff53 	bl	8002648 <HAL_ADC_Start_IT>
	  getPotValue();
 80007a2:	f000 fbd3 	bl	8000f4c <getPotValue>

	  // State Machine
	  stateMachineDecider();
 80007a6:	f000 fcd7 	bl	8001158 <stateMachineDecider>
	  stateMachineController(stateTracker);
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <main+0x1bc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fc80 	bl	80010b4 <stateMachineController>

	  // Monitor LEDs
	  if (ledOneFlag == 0 ){
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <main+0x1cc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d106      	bne.n	80007ca <main+0x176>
		  HAL_GPIO_WritePin(LED_1_GPIO_Port,LED_1_Pin,GPIO_PIN_RESET);
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <main+0x1d0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fe4f 	bl	8003466 <HAL_GPIO_WritePin>
 80007c8:	e7e1      	b.n	800078e <main+0x13a>
	  } else if (ledTwoFlag == 0){
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <main+0x1d4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d107      	bne.n	80007e2 <main+0x18e>
		  HAL_GPIO_WritePin(LED_2_GPIO_Port,LED_2_Pin,GPIO_PIN_RESET);
 80007d2:	2380      	movs	r3, #128	; 0x80
 80007d4:	01db      	lsls	r3, r3, #7
 80007d6:	4815      	ldr	r0, [pc, #84]	; (800082c <main+0x1d8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	0019      	movs	r1, r3
 80007dc:	f002 fe43 	bl	8003466 <HAL_GPIO_WritePin>
 80007e0:	e7d5      	b.n	800078e <main+0x13a>
	  } else if (ledThreeFlag == 0){
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <main+0x1dc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1d1      	bne.n	800078e <main+0x13a>
		  HAL_GPIO_WritePin(LED_3_GPIO_Port,LED_3_Pin,GPIO_PIN_RESET);
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <main+0x1d8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	2110      	movs	r1, #16
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fe38 	bl	8003466 <HAL_GPIO_WritePin>
	  HAL_UART_Receive_IT(&huart2, msgRx, 1);
 80007f6:	e7ca      	b.n	800078e <main+0x13a>
 80007f8:	40021000 	.word	0x40021000
 80007fc:	20000140 	.word	0x20000140
 8000800:	200001d8 	.word	0x200001d8
 8000804:	20000224 	.word	0x20000224
 8000808:	20000270 	.word	0x20000270
 800080c:	2000018c 	.word	0x2000018c
 8000810:	200003f8 	.word	0x200003f8
 8000814:	200003f0 	.word	0x200003f0
 8000818:	20000308 	.word	0x20000308
 800081c:	20000088 	.word	0x20000088
 8000820:	20000004 	.word	0x20000004
 8000824:	50000800 	.word	0x50000800
 8000828:	20000008 	.word	0x20000008
 800082c:	50000400 	.word	0x50000400
 8000830:	2000000c 	.word	0x2000000c

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b093      	sub	sp, #76	; 0x4c
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	2410      	movs	r4, #16
 800083c:	193b      	adds	r3, r7, r4
 800083e:	0018      	movs	r0, r3
 8000840:	2338      	movs	r3, #56	; 0x38
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f008 f847 	bl	80088d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084a:	003b      	movs	r3, r7
 800084c:	0018      	movs	r0, r3
 800084e:	2310      	movs	r3, #16
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f008 f840 	bl	80088d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	0018      	movs	r0, r3
 800085e:	f003 fae1 	bl	8003e24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2202      	movs	r2, #2
 8000866:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	193b      	adds	r3, r7, r4
 8000884:	0018      	movs	r0, r3
 8000886:	f003 fb19 	bl	8003ebc <HAL_RCC_OscConfig>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800088e:	f000 ff9d 	bl	80017cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	003b      	movs	r3, r7
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000898:	003b      	movs	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	003b      	movs	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008aa:	003b      	movs	r3, r7
 80008ac:	2100      	movs	r1, #0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f003 fe1e 	bl	80044f0 <HAL_RCC_ClockConfig>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80008b8:	f000 ff88 	bl	80017cc <Error_Handler>
  }
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b013      	add	sp, #76	; 0x4c
 80008c2:	bd90      	pop	{r4, r7, pc}

080008c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	0018      	movs	r0, r3
 80008ce:	230c      	movs	r3, #12
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f008 f800 	bl	80088d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008da:	4a2c      	ldr	r2, [pc, #176]	; (800098c <MX_ADC1_Init+0xc8>)
 80008dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	05d2      	lsls	r2, r2, #23
 80008e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008e6:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <MX_ADC1_Init+0xc4>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008fe:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000906:	2200      	movs	r2, #0
 8000908:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_ADC1_Init+0xc4>)
 800090c:	2201      	movs	r2, #1
 800090e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000912:	2201      	movs	r2, #1
 8000914:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_ADC1_Init+0xc4>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000924:	222c      	movs	r2, #44	; 0x2c
 8000926:	2100      	movs	r1, #0
 8000928:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_ADC1_Init+0xc4>)
 800092c:	2200      	movs	r2, #0
 800092e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000932:	2200      	movs	r2, #0
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000938:	2200      	movs	r2, #0
 800093a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_ADC1_Init+0xc4>)
 800093e:	223c      	movs	r2, #60	; 0x3c
 8000940:	2100      	movs	r1, #0
 8000942:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000946:	2200      	movs	r2, #0
 8000948:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_ADC1_Init+0xc4>)
 800094c:	0018      	movs	r0, r3
 800094e:	f001 fc3f 	bl	80021d0 <HAL_ADC_Init>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000956:	f000 ff39 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	1d3a      	adds	r2, r7, #4
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_ADC1_Init+0xc4>)
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f001 feec 	bl	8002750 <HAL_ADC_ConfigChannel>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 800097c:	f000 ff26 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b004      	add	sp, #16
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000088 	.word	0x20000088
 800098c:	40012400 	.word	0x40012400

08000990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_I2C1_Init+0x74>)
 8000996:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <MX_I2C1_Init+0x78>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_I2C1_Init+0x74>)
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <MX_I2C1_Init+0x7c>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f002 fd83 	bl	80034d8 <HAL_I2C_Init>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009d6:	f000 fef9 	bl	80017cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009dc:	2100      	movs	r1, #0
 80009de:	0018      	movs	r0, r3
 80009e0:	f003 f988 	bl	8003cf4 <HAL_I2CEx_ConfigAnalogFilter>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009e8:	f000 fef0 	bl	80017cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MX_I2C1_Init+0x74>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f003 f9cb 	bl	8003d8c <HAL_I2CEx_ConfigDigitalFilter>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009fa:	f000 fee7 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200000ec 	.word	0x200000ec
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	00303d5b 	.word	0x00303d5b

08000a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	2310      	movs	r3, #16
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f007 ff59 	bl	80088d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f007 ff52 	bl	80088d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	05d2      	lsls	r2, r2, #23
 8000a3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	; (8000ab4 <MX_TIM2_Init+0xa4>)
 8000a40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <MX_TIM2_Init+0xa4>)
 8000a4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f004 f8a9 	bl	8004bb4 <HAL_TIM_Base_Init>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000a66:	f000 feb1 	bl	80017cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	0152      	lsls	r2, r2, #5
 8000a72:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a74:	187a      	adds	r2, r7, r1
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f004 fd1a 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000a84:	f000 fea2 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a94:	1d3a      	adds	r2, r7, #4
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_TIM2_Init+0xa0>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f005 fa12 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000aa4:	f000 fe92 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b008      	add	sp, #32
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000140 	.word	0x20000140
 8000ab4:	000003e7 	.word	0x000003e7

08000ab8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	; 0x38
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	2328      	movs	r3, #40	; 0x28
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f007 ff05 	bl	80088d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	231c      	movs	r3, #28
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f007 fefd 	bl	80088d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ade:	003b      	movs	r3, r7
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	231c      	movs	r3, #28
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f007 fef6 	bl	80088d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aec:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000aee:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <MX_TIM3_Init+0xfc>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000af4:	2240      	movs	r2, #64	; 0x40
 8000af6:	32ff      	adds	r2, #255	; 0xff
 8000af8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b00:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000b02:	4a2d      	ldr	r2, [pc, #180]	; (8000bb8 <MX_TIM3_Init+0x100>)
 8000b04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f004 f84d 	bl	8004bb4 <HAL_TIM_Base_Init>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 fe55 	bl	80017cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b22:	2128      	movs	r1, #40	; 0x28
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	0152      	lsls	r2, r2, #5
 8000b2a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b2c:	187a      	adds	r2, r7, r1
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f004 fcbe 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000b3c:	f000 fe46 	bl	80017cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f004 f964 	bl	8004e10 <HAL_TIM_PWM_Init>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b4c:	f000 fe3e 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b50:	211c      	movs	r1, #28
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5e:	187a      	adds	r2, r7, r1
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f005 f9ad 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000b6e:	f000 fe2d 	bl	80017cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2260      	movs	r2, #96	; 0x60
 8000b76:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b84:	003b      	movs	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8a:	0039      	movs	r1, r7
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	0018      	movs	r0, r3
 8000b92:	f004 fb8f 	bl	80052b4 <HAL_TIM_PWM_ConfigChannel>
 8000b96:	1e03      	subs	r3, r0, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000b9a:	f000 fe17 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <MX_TIM3_Init+0xf8>)
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 ff93 	bl	8001acc <HAL_TIM_MspPostInit>

}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b00e      	add	sp, #56	; 0x38
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	2000018c 	.word	0x2000018c
 8000bb4:	40000400 	.word	0x40000400
 8000bb8:	000003e7 	.word	0x000003e7

08000bbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f007 fe84 	bl	80088d8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <MX_TIM6_Init+0x70>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bd8:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <MX_TIM6_Init+0x74>)
 8000bda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <MX_TIM6_Init+0x74>)
 8000be6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f003 ffdf 	bl	8004bb4 <HAL_TIM_Base_Init>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000bfa:	f000 fde7 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c0a:	1d3a      	adds	r2, r7, #4
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f005 f957 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000c1a:	f000 fdd7 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	200001d8 	.word	0x200001d8
 8000c2c:	40001000 	.word	0x40001000
 8000c30:	000003e7 	.word	0x000003e7

08000c34 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	230c      	movs	r3, #12
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f007 fe48 	bl	80088d8 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_TIM7_Init+0x6c>)
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <MX_TIM7_Init+0x70>)
 8000c4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_TIM7_Init+0x6c>)
 8000c50:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <MX_TIM7_Init+0x74>)
 8000c52:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_TIM7_Init+0x6c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_TIM7_Init+0x6c>)
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <MX_TIM7_Init+0x74>)
 8000c5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_TIM7_Init+0x6c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_TIM7_Init+0x6c>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f003 ffa3 	bl	8004bb4 <HAL_TIM_Base_Init>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000c72:	f000 fdab 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c82:	1d3a      	adds	r2, r7, #4
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_TIM7_Init+0x6c>)
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f005 f91b 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000c92:	f000 fd9b 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	20000224 	.word	0x20000224
 8000ca4:	40001400 	.word	0x40001400
 8000ca8:	000003e7 	.word	0x000003e7

08000cac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_TIM14_Init+0x40>)
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <MX_TIM14_Init+0x44>)
 8000cb4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7999;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <MX_TIM14_Init+0x40>)
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <MX_TIM14_Init+0x48>)
 8000cba:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_TIM14_Init+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <MX_TIM14_Init+0x40>)
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <MX_TIM14_Init+0x4c>)
 8000cc6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_TIM14_Init+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <MX_TIM14_Init+0x40>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <MX_TIM14_Init+0x40>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f003 ff6c 	bl	8004bb4 <HAL_TIM_Base_Init>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000ce0:	f000 fd74 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	20000270 	.word	0x20000270
 8000cf0:	40002000 	.word	0x40002000
 8000cf4:	00001f3f 	.word	0x00001f3f
 8000cf8:	000003e7 	.word	0x000003e7

08000cfc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_TIM17_Init+0x44>)
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <MX_TIM17_Init+0x48>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_TIM17_Init+0x44>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_TIM17_Init+0x44>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_TIM17_Init+0x44>)
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <MX_TIM17_Init+0x4c>)
 8000d16:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_TIM17_Init+0x44>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_TIM17_Init+0x44>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_TIM17_Init+0x44>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <MX_TIM17_Init+0x44>)
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f003 ff41 	bl	8004bb4 <HAL_TIM_Base_Init>
 8000d32:	1e03      	subs	r3, r0, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000d36:	f000 fd49 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200002bc 	.word	0x200002bc
 8000d44:	40014800 	.word	0x40014800
 8000d48:	000003e7 	.word	0x000003e7

08000d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d52:	4a24      	ldr	r2, [pc, #144]	; (8000de4 <MX_USART2_UART_Init+0x98>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d58:	22e1      	movs	r2, #225	; 0xe1
 8000d5a:	0252      	lsls	r2, r2, #9
 8000d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000d96:	0018      	movs	r0, r3
 8000d98:	f005 f91a 	bl	8005fd0 <HAL_UART_Init>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 fd14 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	0018      	movs	r0, r3
 8000daa:	f007 f9a7 	bl	80080fc <HAL_UARTEx_SetTxFifoThreshold>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000db2:	f000 fd0b 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f007 f9de 	bl	800817c <HAL_UARTEx_SetRxFifoThreshold>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc4:	f000 fd02 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <MX_USART2_UART_Init+0x94>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f007 f95c 	bl	8008088 <HAL_UARTEx_DisableFifoMode>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f000 fcfa 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	20000308 	.word	0x20000308
 8000de4:	40004400 	.word	0x40004400

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b08b      	sub	sp, #44	; 0x2c
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	2414      	movs	r4, #20
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	0018      	movs	r0, r3
 8000df4:	2314      	movs	r3, #20
 8000df6:	001a      	movs	r2, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f007 fd6d 	bl	80088d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b4f      	ldr	r3, [pc, #316]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e02:	4b4e      	ldr	r3, [pc, #312]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e04:	2104      	movs	r1, #4
 8000e06:	430a      	orrs	r2, r1
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0e:	2204      	movs	r2, #4
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e1a:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	635a      	str	r2, [r3, #52]	; 0x34
 8000e22:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	2220      	movs	r2, #32
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e32:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	430a      	orrs	r2, r1
 8000e38:	635a      	str	r2, [r3, #52]	; 0x34
 8000e3a:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4a:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
 8000e52:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <MX_GPIO_Init+0x154>)
 8000e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e56:	2202      	movs	r2, #2
 8000e58:	4013      	ands	r3, r2
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2200      	movs	r2, #0
 8000e64:	2120      	movs	r1, #32
 8000e66:	0018      	movs	r0, r3
 8000e68:	f002 fafd 	bl	8003466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000e6c:	4934      	ldr	r1, [pc, #208]	; (8000f40 <MX_GPIO_Init+0x158>)
 8000e6e:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <MX_GPIO_Init+0x15c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	0018      	movs	r0, r3
 8000e74:	f002 faf7 	bl	8003466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000e78:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <MX_GPIO_Init+0x160>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f002 faf1 	bl	8003466 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_INPUT_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_2_Pin;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	0192      	lsls	r2, r2, #6
 8000e8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2201      	movs	r2, #1
 8000e96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_2_GPIO_Port, &GPIO_InitStruct);
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	4a2b      	ldr	r2, [pc, #172]	; (8000f48 <MX_GPIO_Init+0x160>)
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	f002 f890 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2201      	movs	r2, #1
 8000eae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	2202      	movs	r2, #2
 8000eba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	193a      	adds	r2, r7, r4
 8000ebe:	23a0      	movs	r3, #160	; 0xa0
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f002 f87d 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_GPIO_Init+0x158>)
 8000ece:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <MX_GPIO_Init+0x15c>)
 8000ee6:	0019      	movs	r1, r3
 8000ee8:	0010      	movs	r0, r2
 8000eea:	f002 f86b 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <MX_GPIO_Init+0x160>)
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	0010      	movs	r0, r2
 8000f0e:	f002 f859 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000f12:	0021      	movs	r1, r4
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2208      	movs	r2, #8
 8000f18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <MX_GPIO_Init+0x15c>)
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	0010      	movs	r0, r2
 8000f2e:	f002 f849 	bl	8002fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b00b      	add	sp, #44	; 0x2c
 8000f38:	bd90      	pop	{r4, r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	00004010 	.word	0x00004010
 8000f44:	50000400 	.word	0x50000400
 8000f48:	50000800 	.word	0x50000800

08000f4c <getPotValue>:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
	}

	/* Get ADC value from potentiometer */
	void getPotValue(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <getPotValue+0x24>)
 8000f52:	2105      	movs	r1, #5
 8000f54:	0018      	movs	r0, r3
 8000f56:	f001 fae3 	bl	8002520 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <getPotValue+0x24>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f001 fbeb 	bl	8002738 <HAL_ADC_GetValue>
 8000f62:	0003      	movs	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <getPotValue+0x28>)
 8000f68:	801a      	strh	r2, [r3, #0]

		/* Debug */
		//sprintf(msg, "potValue: %hu\r\n", potValue);
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000088 	.word	0x20000088
 8000f74:	200003f6 	.word	0x200003f6

08000f78 <getAdcFromPot>:

	/* getADC from Pot */
	int getAdcFromPot(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
		/* Get pot value */
		uint16_t potValue;
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <getAdcFromPot+0x2c>)
 8000f80:	2105      	movs	r1, #5
 8000f82:	0018      	movs	r0, r3
 8000f84:	f001 facc 	bl	8002520 <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <getAdcFromPot+0x2c>)
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f001 fbd4 	bl	8002738 <HAL_ADC_GetValue>
 8000f90:	0002      	movs	r2, r0
 8000f92:	1dbb      	adds	r3, r7, #6
 8000f94:	801a      	strh	r2, [r3, #0]
		return potValue;
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	881b      	ldrh	r3, [r3, #0]
	}
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20000088 	.word	0x20000088

08000fa8 <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f007 faa7 	bl	8008500 <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f007 fbb2 	bl	8008720 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Hardware Test");
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <hardwareTestLCD+0x38>)
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f007 fbfd 	bl	80087c0 <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f007 fba8 	bl	8008720 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Meow");
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <hardwareTestLCD+0x3c>)
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f007 fbf3 	bl	80087c0 <I2C_LCD_WriteString>
	}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	08009224 	.word	0x08009224
 8000fe4:	08009234 	.word	0x08009234

08000fe8 <motorControl>:

	/* Motor control */
	void motorControl(int adcValue){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, adcValue); // Interpolate pot values to PWM range
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <motorControl+0x18>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000018c 	.word	0x2000018c

08001004 <ledFreqControl>:

	/* LED Frequency control */
	void ledFreqControl(int adcValue){
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

		// Calculate timer parameters
		uint16_t prescaler = adcValue;
 800100c:	240e      	movs	r4, #14
 800100e:	193b      	adds	r3, r7, r4
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	801a      	strh	r2, [r3, #0]

		// Stop the Timer
		HAL_TIM_Base_Stop(&htim2);
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <ledFreqControl+0x68>)
 8001016:	0018      	movs	r0, r3
 8001018:	f003 fe78 	bl	8004d0c <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim6);
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <ledFreqControl+0x6c>)
 800101e:	0018      	movs	r0, r3
 8001020:	f003 fe74 	bl	8004d0c <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim7);
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <ledFreqControl+0x70>)
 8001026:	0018      	movs	r0, r3
 8001028:	f003 fe70 	bl	8004d0c <HAL_TIM_Base_Stop>

		// Update Prescaler
		htim2.Instance->PSC = prescaler;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <ledFreqControl+0x68>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	193a      	adds	r2, r7, r4
 8001032:	8812      	ldrh	r2, [r2, #0]
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
		htim6.Instance->PSC = prescaler;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <ledFreqControl+0x6c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	193a      	adds	r2, r7, r4
 800103c:	8812      	ldrh	r2, [r2, #0]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
		htim7.Instance->PSC = prescaler;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <ledFreqControl+0x70>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	193a      	adds	r2, r7, r4
 8001046:	8812      	ldrh	r2, [r2, #0]
 8001048:	629a      	str	r2, [r3, #40]	; 0x28

		// Restart Timer
		HAL_TIM_Base_Start(&htim2);
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <ledFreqControl+0x68>)
 800104c:	0018      	movs	r0, r3
 800104e:	f003 fe09 	bl	8004c64 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim6);
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <ledFreqControl+0x6c>)
 8001054:	0018      	movs	r0, r3
 8001056:	f003 fe05 	bl	8004c64 <HAL_TIM_Base_Start>
		HAL_TIM_Base_Start(&htim7);
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <ledFreqControl+0x70>)
 800105c:	0018      	movs	r0, r3
 800105e:	f003 fe01 	bl	8004c64 <HAL_TIM_Base_Start>
	}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b005      	add	sp, #20
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	20000140 	.word	0x20000140
 8001070:	200001d8 	.word	0x200001d8
 8001074:	20000224 	.word	0x20000224

08001078 <myMap>:


	/* Mapping function */
	 int myMap(int x, int in_min, int in_max, int out_min, int out_max){
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
		 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	69b9      	ldr	r1, [r7, #24]
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	1a8a      	subs	r2, r1, r2
 8001092:	435a      	muls	r2, r3
 8001094:	0010      	movs	r0, r2
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	0019      	movs	r1, r3
 800109e:	f7ff f8d7 	bl	8000250 <__divsi3>
 80010a2:	0003      	movs	r3, r0
 80010a4:	001a      	movs	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	18d3      	adds	r3, r2, r3
	 }
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <stateMachineController>:

	 /* State Machine Controller */
	 // Description: Determines which state the program will execute.
	 //  Input:		 Integer corresponding to state (1 = A, 2 = B, 3 = C)
	 void stateMachineController(int state){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]

		 switch(state){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d01b      	beq.n	80010fa <stateMachineController+0x46>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	dc36      	bgt.n	8001136 <stateMachineController+0x82>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d003      	beq.n	80010d6 <stateMachineController+0x22>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d00c      	beq.n	80010ee <stateMachineController+0x3a>
				 ledThreeFlag = 1;

				 stateHandlerC();
				 break;
		 }
	 }
 80010d4:	e02f      	b.n	8001136 <stateMachineController+0x82>
				 ledOneFlag = 1;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <stateMachineController+0x8c>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <stateMachineController+0x90>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
				 ledThreeFlag = 1;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <stateMachineController+0x94>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
				 stateHandlerA();
 80010e8:	f000 f8b6 	bl	8001258 <stateHandlerA>
				 break;
 80010ec:	e023      	b.n	8001136 <stateMachineController+0x82>
				 ledThreeFlag = 1;
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <stateMachineController+0x94>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
				 stateHandlerB();
 80010f4:	f000 f8f0 	bl	80012d8 <stateHandlerB>
				 break;
 80010f8:	e01d      	b.n	8001136 <stateMachineController+0x82>
				 sprintf(msg, "Executing C.\n\r");
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <stateMachineController+0x98>)
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <stateMachineController+0x9c>)
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f007 fbc9 	bl	8008898 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <stateMachineController+0x9c>)
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff f805 	bl	8000118 <strlen>
 800110e:	0003      	movs	r3, r0
 8001110:	b29a      	uxth	r2, r3
 8001112:	2301      	movs	r3, #1
 8001114:	425b      	negs	r3, r3
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <stateMachineController+0x9c>)
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <stateMachineController+0xa0>)
 800111a:	f004 ffef 	bl	80060fc <HAL_UART_Transmit>
				 ledOneFlag = 1;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <stateMachineController+0x8c>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <stateMachineController+0x90>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
				 ledThreeFlag = 1;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <stateMachineController+0x94>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]
				 stateHandlerC();
 8001130:	f000 f98a 	bl	8001448 <stateHandlerC>
				 break;
 8001134:	46c0      	nop			; (mov r8, r8)
	 }
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	20000004 	.word	0x20000004
 8001144:	20000008 	.word	0x20000008
 8001148:	2000000c 	.word	0x2000000c
 800114c:	0800923c 	.word	0x0800923c
 8001150:	2000039c 	.word	0x2000039c
 8001154:	20000308 	.word	0x20000308

08001158 <stateMachineDecider>:

	 /* State Machine Controller */
	 // Description: Monitors button pushes to update current state value.
	 void stateMachineDecider(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
		 // Go to State B if it is State A
		 if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 1){
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <stateMachineDecider+0xe0>)
 800115e:	2108      	movs	r1, #8
 8001160:	0018      	movs	r0, r3
 8001162:	f002 f963 	bl	800342c <HAL_GPIO_ReadPin>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d01c      	beq.n	80011a4 <stateMachineDecider+0x4c>
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <stateMachineDecider+0xe4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d118      	bne.n	80011a4 <stateMachineDecider+0x4c>

			 // Debug message
			 sprintf(msg, "Going to State B.\n\r");
 8001172:	4a33      	ldr	r2, [pc, #204]	; (8001240 <stateMachineDecider+0xe8>)
 8001174:	4b33      	ldr	r3, [pc, #204]	; (8001244 <stateMachineDecider+0xec>)
 8001176:	0011      	movs	r1, r2
 8001178:	0018      	movs	r0, r3
 800117a:	f007 fb8d 	bl	8008898 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <stateMachineDecider+0xec>)
 8001180:	0018      	movs	r0, r3
 8001182:	f7fe ffc9 	bl	8000118 <strlen>
 8001186:	0003      	movs	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	2301      	movs	r3, #1
 800118c:	425b      	negs	r3, r3
 800118e:	492d      	ldr	r1, [pc, #180]	; (8001244 <stateMachineDecider+0xec>)
 8001190:	482d      	ldr	r0, [pc, #180]	; (8001248 <stateMachineDecider+0xf0>)
 8001192:	f004 ffb3 	bl	80060fc <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 8001196:	2000      	movs	r0, #0
 8001198:	f007 fa7e 	bl	8008698 <I2C_LCD_Clear>

			 // Go to State B
			 stateTracker = 2;
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <stateMachineDecider+0xe4>)
 800119e:	2202      	movs	r2, #2
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e046      	b.n	8001232 <stateMachineDecider+0xda>

		 // Go to State A if it is State B
		 } else if (HAL_GPIO_ReadPin(BUTTON_INPUT_GPIO_Port, BUTTON_INPUT_Pin) && stateTracker == 2){
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <stateMachineDecider+0xe0>)
 80011a6:	2108      	movs	r1, #8
 80011a8:	0018      	movs	r0, r3
 80011aa:	f002 f93f 	bl	800342c <HAL_GPIO_ReadPin>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d01c      	beq.n	80011ec <stateMachineDecider+0x94>
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <stateMachineDecider+0xe4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d118      	bne.n	80011ec <stateMachineDecider+0x94>

			 // Debug message
			 sprintf(msg, "Going to State A.\n\r");
 80011ba:	4a24      	ldr	r2, [pc, #144]	; (800124c <stateMachineDecider+0xf4>)
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <stateMachineDecider+0xec>)
 80011be:	0011      	movs	r1, r2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f007 fb69 	bl	8008898 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <stateMachineDecider+0xec>)
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7fe ffa5 	bl	8000118 <strlen>
 80011ce:	0003      	movs	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	2301      	movs	r3, #1
 80011d4:	425b      	negs	r3, r3
 80011d6:	491b      	ldr	r1, [pc, #108]	; (8001244 <stateMachineDecider+0xec>)
 80011d8:	481b      	ldr	r0, [pc, #108]	; (8001248 <stateMachineDecider+0xf0>)
 80011da:	f004 ff8f 	bl	80060fc <HAL_UART_Transmit>

			 // Clear LCD
			 I2C_LCD_Clear(MyI2C_LCD);
 80011de:	2000      	movs	r0, #0
 80011e0:	f007 fa5a 	bl	8008698 <I2C_LCD_Clear>

			 // Stay in State A
			 stateTracker = 1;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <stateMachineDecider+0xe4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e022      	b.n	8001232 <stateMachineDecider+0xda>

		// Button 2 pressed (State C)
		 } else if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin) && stateTracker == 1){
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	019b      	lsls	r3, r3, #6
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <stateMachineDecider+0xf8>)
 80011f2:	0019      	movs	r1, r3
 80011f4:	0010      	movs	r0, r2
 80011f6:	f002 f919 	bl	800342c <HAL_GPIO_ReadPin>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d119      	bne.n	8001232 <stateMachineDecider+0xda>
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <stateMachineDecider+0xe4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d115      	bne.n	8001232 <stateMachineDecider+0xda>

			 // Debug message
			 sprintf(msg, "Going to State C.\n\r");
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <stateMachineDecider+0xfc>)
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <stateMachineDecider+0xec>)
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f007 fb43 	bl	8008898 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <stateMachineDecider+0xec>)
 8001214:	0018      	movs	r0, r3
 8001216:	f7fe ff7f 	bl	8000118 <strlen>
 800121a:	0003      	movs	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	2301      	movs	r3, #1
 8001220:	425b      	negs	r3, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <stateMachineDecider+0xec>)
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <stateMachineDecider+0xf0>)
 8001226:	f004 ff69 	bl	80060fc <HAL_UART_Transmit>

			 // Go to State C
			 stateTracker = 3;
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <stateMachineDecider+0xe4>)
 800122c:	2203      	movs	r2, #3
 800122e:	601a      	str	r2, [r3, #0]
		 }
	 }
 8001230:	e7ff      	b.n	8001232 <stateMachineDecider+0xda>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	50000400 	.word	0x50000400
 800123c:	200003f8 	.word	0x200003f8
 8001240:	0800924c 	.word	0x0800924c
 8001244:	2000039c 	.word	0x2000039c
 8001248:	20000308 	.word	0x20000308
 800124c:	08009260 	.word	0x08009260
 8001250:	50000800 	.word	0x50000800
 8001254:	08009274 	.word	0x08009274

08001258 <stateHandlerA>:

	 /* State Handler A */
	 void stateHandlerA(void){
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af02      	add	r7, sp, #8
		 // LCD Control
		 I2C_LCD_Display(MyI2C_LCD);
 800125e:	2000      	movs	r0, #0
 8001260:	f007 faca 	bl	80087f8 <I2C_LCD_Display>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2000      	movs	r0, #0
 800126a:	f007 fa59 	bl	8008720 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <stateHandlerA+0x6c>)
 8001270:	0019      	movs	r1, r3
 8001272:	2000      	movs	r0, #0
 8001274:	f007 faa4 	bl	80087c0 <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001278:	2201      	movs	r2, #1
 800127a:	2100      	movs	r1, #0
 800127c:	2000      	movs	r0, #0
 800127e:	f007 fa4f 	bl	8008720 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <stateHandlerA+0x70>)
 8001284:	0019      	movs	r1, r3
 8001286:	2000      	movs	r0, #0
 8001288:	f007 fa9a 	bl	80087c0 <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <stateHandlerA+0x74>)
 800128e:	0018      	movs	r0, r3
 8001290:	f001 f9da 	bl	8002648 <HAL_ADC_Start_IT>
		 getPotValue();
 8001294:	f7ff fe5a 	bl	8000f4c <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 8001298:	f7ff fe6e 	bl	8000f78 <getAdcFromPot>
 800129c:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <stateHandlerA+0x78>)
 800129e:	23b4      	movs	r3, #180	; 0xb4
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	213c      	movs	r1, #60	; 0x3c
 80012a6:	f7ff fee7 	bl	8001078 <myMap>
 80012aa:	0003      	movs	r3, r0
 80012ac:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff fe99 	bl	8000fe8 <motorControl>

		 // No button pushes - Stay in State A
		 stateTracker = 1;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <stateHandlerA+0x7c>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
	 }
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	08009288 	.word	0x08009288
 80012c8:	08009298 	.word	0x08009298
 80012cc:	20000088 	.word	0x20000088
 80012d0:	00000fff 	.word	0x00000fff
 80012d4:	200003f8 	.word	0x200003f8

080012d8 <stateHandlerB>:

	 /* State Handler B */
	 void stateHandlerB(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af02      	add	r7, sp, #8

		 // When State B is initially called, let alone one of the LEDs (in question) on
		 if (ledOneFlag == 1 && ledTwoFlag == 1){
 80012de:	4b4b      	ldr	r3, [pc, #300]	; (800140c <stateHandlerB+0x134>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d109      	bne.n	80012fa <stateHandlerB+0x22>
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <stateHandlerB+0x138>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <stateHandlerB+0x22>
			 ledOneFlag = 1;
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <stateHandlerB+0x134>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
			 ledTwoFlag = 0;
 80012f4:	4b46      	ldr	r3, [pc, #280]	; (8001410 <stateHandlerB+0x138>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
		 }

		 // LCD Control
		 I2C_LCD_Display(MyI2C_LCD);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f007 fa7c 	bl	80087f8 <I2C_LCD_Display>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2000      	movs	r0, #0
 8001306:	f007 fa0b 	bl	8008720 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "ADC: ");
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <stateHandlerB+0x13c>)
 800130c:	0019      	movs	r1, r3
 800130e:	2000      	movs	r0, #0
 8001310:	f007 fa56 	bl	80087c0 <I2C_LCD_WriteString>
		 sprintf(msg2, "%hu", potValue);
 8001314:	4b40      	ldr	r3, [pc, #256]	; (8001418 <stateHandlerB+0x140>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	001a      	movs	r2, r3
 800131a:	4940      	ldr	r1, [pc, #256]	; (800141c <stateHandlerB+0x144>)
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <stateHandlerB+0x148>)
 800131e:	0018      	movs	r0, r3
 8001320:	f007 faba 	bl	8008898 <siprintf>
		 I2C_LCD_WriteString(MyI2C_LCD, msg2);
 8001324:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <stateHandlerB+0x148>)
 8001326:	0019      	movs	r1, r3
 8001328:	2000      	movs	r0, #0
 800132a:	f007 fa49 	bl	80087c0 <I2C_LCD_WriteString>
		 I2C_LCD_WriteString(MyI2C_LCD, " State B");
 800132e:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <stateHandlerB+0x14c>)
 8001330:	0019      	movs	r1, r3
 8001332:	2000      	movs	r0, #0
 8001334:	f007 fa44 	bl	80087c0 <I2C_LCD_WriteString>
		 I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f007 f9ef 	bl	8008720 <I2C_LCD_SetCursor>
		 I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8001342:	4b39      	ldr	r3, [pc, #228]	; (8001428 <stateHandlerB+0x150>)
 8001344:	0019      	movs	r1, r3
 8001346:	2000      	movs	r0, #0
 8001348:	f007 fa3a 	bl	80087c0 <I2C_LCD_WriteString>

		 // Get potentiometer value
		 HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <stateHandlerB+0x154>)
 800134e:	0018      	movs	r0, r3
 8001350:	f001 f97a 	bl	8002648 <HAL_ADC_Start_IT>
		 getPotValue();
 8001354:	f7ff fdfa 	bl	8000f4c <getPotValue>

		 // Motor control
		 int servoAngle = myMap(getAdcFromPot(), 60, 4095, 0, 180);
 8001358:	f7ff fe0e 	bl	8000f78 <getAdcFromPot>
 800135c:	4a34      	ldr	r2, [pc, #208]	; (8001430 <stateHandlerB+0x158>)
 800135e:	23b4      	movs	r3, #180	; 0xb4
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	213c      	movs	r1, #60	; 0x3c
 8001366:	f7ff fe87 	bl	8001078 <myMap>
 800136a:	0003      	movs	r3, r0
 800136c:	607b      	str	r3, [r7, #4]
		 motorControl(servoAngle);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff fe39 	bl	8000fe8 <motorControl>

		 // LED frequency control
		 int blinkSpeed = myMap(getAdcFromPot(), 60, 4095, 16000, 0.244140625);
 8001376:	f7ff fdff 	bl	8000f78 <getAdcFromPot>
 800137a:	23fa      	movs	r3, #250	; 0xfa
 800137c:	019b      	lsls	r3, r3, #6
 800137e:	492c      	ldr	r1, [pc, #176]	; (8001430 <stateHandlerB+0x158>)
 8001380:	2200      	movs	r2, #0
 8001382:	9200      	str	r2, [sp, #0]
 8001384:	000a      	movs	r2, r1
 8001386:	213c      	movs	r1, #60	; 0x3c
 8001388:	f7ff fe76 	bl	8001078 <myMap>
 800138c:	0003      	movs	r3, r0
 800138e:	603b      	str	r3, [r7, #0]
		 ledFreqControl(blinkSpeed);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff fe36 	bl	8001004 <ledFreqControl>

		 // LED1 and LED2 toggle
		 // B1 pressed = Turn off
		 // B1 not pressed = Turn on, blink at 1 Hz (Modify PSC)
		 if (!HAL_GPIO_ReadPin(BUTTON_INPUT_2_GPIO_Port, BUTTON_INPUT_2_Pin)){
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	019b      	lsls	r3, r3, #6
 800139c:	4a25      	ldr	r2, [pc, #148]	; (8001434 <stateHandlerB+0x15c>)
 800139e:	0019      	movs	r1, r3
 80013a0:	0010      	movs	r0, r2
 80013a2:	f002 f843 	bl	800342c <HAL_GPIO_ReadPin>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d128      	bne.n	80013fc <stateHandlerB+0x124>

			 // Testing millis - time since program start
			 sprintf(msg2, "Time since program start (ms): %u\r\n", millisProgStart);
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <stateHandlerB+0x160>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	001a      	movs	r2, r3
 80013b0:	4922      	ldr	r1, [pc, #136]	; (800143c <stateHandlerB+0x164>)
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <stateHandlerB+0x148>)
 80013b4:	0018      	movs	r0, r3
 80013b6:	f007 fa6f 	bl	8008898 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <stateHandlerB+0x148>)
 80013bc:	0018      	movs	r0, r3
 80013be:	f7fe feab 	bl	8000118 <strlen>
 80013c2:	0003      	movs	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	2301      	movs	r3, #1
 80013c8:	425b      	negs	r3, r3
 80013ca:	4915      	ldr	r1, [pc, #84]	; (8001420 <stateHandlerB+0x148>)
 80013cc:	481c      	ldr	r0, [pc, #112]	; (8001440 <stateHandlerB+0x168>)
 80013ce:	f004 fe95 	bl	80060fc <HAL_UART_Transmit>

			 // If LED1 is on, swap with LED2
			 if (ledOneFlag == 1){
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <stateHandlerB+0x134>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d106      	bne.n	80013e8 <stateHandlerB+0x110>
				 ledOneFlag = 0;
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <stateHandlerB+0x134>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
				 ledTwoFlag = 1;
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <stateHandlerB+0x138>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e009      	b.n	80013fc <stateHandlerB+0x124>

			// If LED2 is on, swap with LED1
			 } else if (ledTwoFlag == 1){
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <stateHandlerB+0x138>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d105      	bne.n	80013fc <stateHandlerB+0x124>
				 ledTwoFlag = 0;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <stateHandlerB+0x138>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
				 ledOneFlag = 1;
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <stateHandlerB+0x134>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
			 }
		 }

		 // No button pushes - Stay in State B
		 stateTracker = 2;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <stateHandlerB+0x16c>)
 80013fe:	2202      	movs	r2, #2
 8001400:	601a      	str	r2, [r3, #0]
	 }
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	20000004 	.word	0x20000004
 8001410:	20000008 	.word	0x20000008
 8001414:	080092a8 	.word	0x080092a8
 8001418:	200003f6 	.word	0x200003f6
 800141c:	080092b0 	.word	0x080092b0
 8001420:	200003b4 	.word	0x200003b4
 8001424:	080092b4 	.word	0x080092b4
 8001428:	08009298 	.word	0x08009298
 800142c:	20000088 	.word	0x20000088
 8001430:	00000fff 	.word	0x00000fff
 8001434:	50000800 	.word	0x50000800
 8001438:	200003fc 	.word	0x200003fc
 800143c:	080092c0 	.word	0x080092c0
 8001440:	20000308 	.word	0x20000308
 8001444:	200003f8 	.word	0x200003f8

08001448 <stateHandlerC>:

	 /* State Handler C */
	 void stateHandlerC(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

		 // Turn off LCD
		 I2C_LCD_NoDisplay(MyI2C_LCD);
 800144e:	2000      	movs	r0, #0
 8001450:	f007 f9fa 	bl	8008848 <I2C_LCD_NoDisplay>

		 // Turn off LED1, LED2, LED3
		 ledOneFlag = 0;
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <stateHandlerC+0xbc>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
		 ledTwoFlag = 0;
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <stateHandlerC+0xc0>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
		 ledThreeFlag = 0;
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <stateHandlerC+0xc4>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
		 HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <stateHandlerC+0xc8>)
 8001468:	2200      	movs	r2, #0
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0018      	movs	r0, r3
 800146e:	f001 fffa 	bl	8003466 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	01db      	lsls	r3, r3, #7
 8001476:	4827      	ldr	r0, [pc, #156]	; (8001514 <stateHandlerC+0xcc>)
 8001478:	2200      	movs	r2, #0
 800147a:	0019      	movs	r1, r3
 800147c:	f001 fff3 	bl	8003466 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <stateHandlerC+0xcc>)
 8001482:	2200      	movs	r2, #0
 8001484:	2110      	movs	r1, #16
 8001486:	0018      	movs	r0, r3
 8001488:	f001 ffed 	bl	8003466 <HAL_GPIO_WritePin>

		 // Debug Message
		 sprintf(msg, "State C.\n\r");
 800148c:	4a22      	ldr	r2, [pc, #136]	; (8001518 <stateHandlerC+0xd0>)
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <stateHandlerC+0xd4>)
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f007 fa00 	bl	8008898 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <stateHandlerC+0xd4>)
 800149a:	0018      	movs	r0, r3
 800149c:	f7fe fe3c 	bl	8000118 <strlen>
 80014a0:	0003      	movs	r3, r0
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	2301      	movs	r3, #1
 80014a6:	425b      	negs	r3, r3
 80014a8:	491c      	ldr	r1, [pc, #112]	; (800151c <stateHandlerC+0xd4>)
 80014aa:	481d      	ldr	r0, [pc, #116]	; (8001520 <stateHandlerC+0xd8>)
 80014ac:	f004 fe26 	bl	80060fc <HAL_UART_Transmit>

		 // Turn off UART transmissions
		 HAL_UART_DeInit(&huart2);
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <stateHandlerC+0xd8>)
 80014b2:	0018      	movs	r0, r3
 80014b4:	f004 fde2 	bl	800607c <HAL_UART_DeInit>

		 // Configure GPIO pin : PA2 (UART TX) to GPIO
		 turnUartIntoGPIO();
 80014b8:	f000 f836 	bl	8001528 <turnUartIntoGPIO>

		 // Set pin to toggle output based on TIM with frequency 1 Hz for 3 seconds
		 for (int i = 0; i < 6; i++){
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	e00d      	b.n	80014de <stateHandlerC+0x96>
			 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80014c2:	23a0      	movs	r3, #160	; 0xa0
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	2104      	movs	r1, #4
 80014c8:	0018      	movs	r0, r3
 80014ca:	f001 ffe9 	bl	80034a0 <HAL_GPIO_TogglePin>
			 HAL_Delay(500);	// 500 ms = 1 Hz
 80014ce:	23fa      	movs	r3, #250	; 0xfa
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	0018      	movs	r0, r3
 80014d4:	f000 fd0c 	bl	8001ef0 <HAL_Delay>
		 for (int i = 0; i < 6; i++){
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3301      	adds	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	ddee      	ble.n	80014c2 <stateHandlerC+0x7a>
		 }

		 // De-init GPIO PA2
		 HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80014e4:	23a0      	movs	r3, #160	; 0xa0
 80014e6:	05db      	lsls	r3, r3, #23
 80014e8:	2104      	movs	r1, #4
 80014ea:	0018      	movs	r0, r3
 80014ec:	f001 fece 	bl	800328c <HAL_GPIO_DeInit>

		 // Turn back into UART (Tx)
		 MX_USART2_UART_Init();
 80014f0:	f7ff fc2c 	bl	8000d4c <MX_USART2_UART_Init>

		 // Return to State A
		 stateTracker = 1;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <stateHandlerC+0xdc>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
	 }
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	20000004 	.word	0x20000004
 8001508:	20000008 	.word	0x20000008
 800150c:	2000000c 	.word	0x2000000c
 8001510:	50000800 	.word	0x50000800
 8001514:	50000400 	.word	0x50000400
 8001518:	080092e4 	.word	0x080092e4
 800151c:	2000039c 	.word	0x2000039c
 8001520:	20000308 	.word	0x20000308
 8001524:	200003f8 	.word	0x200003f8

08001528 <turnUartIntoGPIO>:

	 /* turn UART into GPIO */
	 void turnUartIntoGPIO(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
		 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	0018      	movs	r0, r3
 8001532:	2314      	movs	r3, #20
 8001534:	001a      	movs	r2, r3
 8001536:	2100      	movs	r1, #0
 8001538:	f007 f9ce 	bl	80088d8 <memset>

		 __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <turnUartIntoGPIO+0x68>)
 800153e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <turnUartIntoGPIO+0x68>)
 8001542:	2101      	movs	r1, #1
 8001544:	430a      	orrs	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	; 0x34
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <turnUartIntoGPIO+0x68>)
 800154a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154c:	2201      	movs	r2, #1
 800154e:	4013      	ands	r3, r2
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]

		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Configure GPIO pin Output Level
 8001554:	23a0      	movs	r3, #160	; 0xa0
 8001556:	05db      	lsls	r3, r3, #23
 8001558:	2200      	movs	r2, #0
 800155a:	2104      	movs	r1, #4
 800155c:	0018      	movs	r0, r3
 800155e:	f001 ff82 	bl	8003466 <HAL_GPIO_WritePin>

		 GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2204      	movs	r2, #4
 8001566:	601a      	str	r2, [r3, #0]
		 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2201      	movs	r2, #1
 800156c:	605a      	str	r2, [r3, #4]
		 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
		 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2202      	movs	r2, #2
 8001578:	60da      	str	r2, [r3, #12]
		 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	1d3a      	adds	r2, r7, #4
 800157c:	23a0      	movs	r3, #160	; 0xa0
 800157e:	05db      	lsls	r3, r3, #23
 8001580:	0011      	movs	r1, r2
 8001582:	0018      	movs	r0, r3
 8001584:	f001 fd1e 	bl	8002fc4 <HAL_GPIO_Init>
	 }
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b006      	add	sp, #24
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_TIM_PeriodElapsedCallback>:

	 /* Controller Function for LED1, LED2 and LED3*/
	 // Description: Frequency currently determined by each timer's PSC value.
	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

		 // TIM2 controls LED1
		 if(htim->Instance == TIM2){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	05db      	lsls	r3, r3, #23
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d109      	bne.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x28>
			 if (ledOneFlag == 1){
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d152      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
				 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80015b0:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015b2:	2180      	movs	r1, #128	; 0x80
 80015b4:	0018      	movs	r0, r3
 80015b6:	f001 ff73 	bl	80034a0 <HAL_GPIO_TogglePin>
		 }
		 // TIM17 counts up to 1 ms
		 else if(htim->Instance == TIM17){
			 millisProgStart+=1;
		 }
	 }
 80015ba:	e04c      	b.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
		 } else if(htim->Instance == TIM6){
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a29      	ldr	r2, [pc, #164]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d10b      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0x4a>
			 if (ledTwoFlag == 1) {
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d143      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
				 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	01db      	lsls	r3, r3, #7
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015d4:	0019      	movs	r1, r3
 80015d6:	0010      	movs	r0, r2
 80015d8:	f001 ff62 	bl	80034a0 <HAL_GPIO_TogglePin>
	 }
 80015dc:	e03b      	b.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
		 } else if(htim->Instance == TIM7){
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d109      	bne.n	80015fc <HAL_TIM_PeriodElapsedCallback+0x68>
			 if (ledThreeFlag == 1){
 80015e8:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d132      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
				 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015f2:	2110      	movs	r1, #16
 80015f4:	0018      	movs	r0, r3
 80015f6:	f001 ff53 	bl	80034a0 <HAL_GPIO_TogglePin>
	 }
 80015fa:	e02c      	b.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
		 } else if(htim->Instance == TIM14){
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d11c      	bne.n	8001640 <HAL_TIM_PeriodElapsedCallback+0xac>
			 if (stateTracker == 1){
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d123      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
				 if (uartFlag == 1){
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d11f      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
					 sprintf(msg2, "Autumn2024 MX1 SID: 24429298, ADC Reading: %hu\r\n", potValue);
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	001a      	movs	r2, r3
 800161c:	491b      	ldr	r1, [pc, #108]	; (800168c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001620:	0018      	movs	r0, r3
 8001622:	f007 f939 	bl	8008898 <siprintf>
					 HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg2), HAL_MAX_DELAY);
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001628:	0018      	movs	r0, r3
 800162a:	f7fe fd75 	bl	8000118 <strlen>
 800162e:	0003      	movs	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	2301      	movs	r3, #1
 8001634:	425b      	negs	r3, r3
 8001636:	4916      	ldr	r1, [pc, #88]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001638:	4816      	ldr	r0, [pc, #88]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800163a:	f004 fd5f 	bl	80060fc <HAL_UART_Transmit>
	 }
 800163e:	e00a      	b.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
		 else if(htim->Instance == TIM17){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d105      	bne.n	8001656 <HAL_TIM_PeriodElapsedCallback+0xc2>
			 millisProgStart+=1;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x108>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001654:	801a      	strh	r2, [r3, #0]
	 }
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	20000004 	.word	0x20000004
 8001664:	50000800 	.word	0x50000800
 8001668:	40001000 	.word	0x40001000
 800166c:	20000008 	.word	0x20000008
 8001670:	50000400 	.word	0x50000400
 8001674:	40001400 	.word	0x40001400
 8001678:	2000000c 	.word	0x2000000c
 800167c:	40002000 	.word	0x40002000
 8001680:	200003f8 	.word	0x200003f8
 8001684:	20000000 	.word	0x20000000
 8001688:	200003f6 	.word	0x200003f6
 800168c:	080092f0 	.word	0x080092f0
 8001690:	200003b4 	.word	0x200003b4
 8001694:	20000308 	.word	0x20000308
 8001698:	40014800 	.word	0x40014800
 800169c:	200003fc 	.word	0x200003fc

080016a0 <HAL_UART_RxCpltCallback>:

	 /* UART Receive Interrupt Handler */
	 // Handles receiving of bytes
	 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

		 sprintf(msg, "Value Received: %s\r\n", msgRx);
 80016a8:	4a3d      	ldr	r2, [pc, #244]	; (80017a0 <HAL_UART_RxCpltCallback+0x100>)
 80016aa:	493e      	ldr	r1, [pc, #248]	; (80017a4 <HAL_UART_RxCpltCallback+0x104>)
 80016ac:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f007 f8f2 	bl	8008898 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80016b4:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 80016b6:	0018      	movs	r0, r3
 80016b8:	f7fe fd2e 	bl	8000118 <strlen>
 80016bc:	0003      	movs	r3, r0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	2301      	movs	r3, #1
 80016c2:	425b      	negs	r3, r3
 80016c4:	4938      	ldr	r1, [pc, #224]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 80016c6:	4839      	ldr	r0, [pc, #228]	; (80017ac <HAL_UART_RxCpltCallback+0x10c>)
 80016c8:	f004 fd18 	bl	80060fc <HAL_UART_Transmit>

		 if (strcmp(msgRx,"j") == 0) {
 80016cc:	4a38      	ldr	r2, [pc, #224]	; (80017b0 <HAL_UART_RxCpltCallback+0x110>)
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <HAL_UART_RxCpltCallback+0x100>)
 80016d0:	0011      	movs	r1, r2
 80016d2:	0018      	movs	r0, r3
 80016d4:	f7fe fd16 	bl	8000104 <strcmp>
 80016d8:	1e03      	subs	r3, r0, #0
 80016da:	d14a      	bne.n	8001772 <HAL_UART_RxCpltCallback+0xd2>
			 if (stateTracker == 1){
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_UART_RxCpltCallback+0x114>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d133      	bne.n	800174c <HAL_UART_RxCpltCallback+0xac>

				if (uartFlag == 0){
 80016e4:	4b34      	ldr	r3, [pc, #208]	; (80017b8 <HAL_UART_RxCpltCallback+0x118>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d115      	bne.n	8001718 <HAL_UART_RxCpltCallback+0x78>
					sprintf(msg, "Turning ON UART.\r\n");
 80016ec:	4a33      	ldr	r2, [pc, #204]	; (80017bc <HAL_UART_RxCpltCallback+0x11c>)
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 80016f0:	0011      	movs	r1, r2
 80016f2:	0018      	movs	r0, r3
 80016f4:	f007 f8d0 	bl	8008898 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7fe fd0c 	bl	8000118 <strlen>
 8001700:	0003      	movs	r3, r0
 8001702:	b29a      	uxth	r2, r3
 8001704:	2301      	movs	r3, #1
 8001706:	425b      	negs	r3, r3
 8001708:	4927      	ldr	r1, [pc, #156]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 800170a:	4828      	ldr	r0, [pc, #160]	; (80017ac <HAL_UART_RxCpltCallback+0x10c>)
 800170c:	f004 fcf6 	bl	80060fc <HAL_UART_Transmit>
					uartFlag = 1;
 8001710:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_UART_RxCpltCallback+0x118>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]
			 }
		 } else {
			 sprintf(msg, "Incorrect key.\r\n");
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
		 }
	 }
 8001716:	e03e      	b.n	8001796 <HAL_UART_RxCpltCallback+0xf6>
				} else if (uartFlag == 1) {
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <HAL_UART_RxCpltCallback+0x118>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d13a      	bne.n	8001796 <HAL_UART_RxCpltCallback+0xf6>
					sprintf(msg, "Turning OFF UART.\r\n");
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_UART_RxCpltCallback+0x120>)
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 8001724:	0011      	movs	r1, r2
 8001726:	0018      	movs	r0, r3
 8001728:	f007 f8b6 	bl	8008898 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 800172e:	0018      	movs	r0, r3
 8001730:	f7fe fcf2 	bl	8000118 <strlen>
 8001734:	0003      	movs	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	2301      	movs	r3, #1
 800173a:	425b      	negs	r3, r3
 800173c:	491a      	ldr	r1, [pc, #104]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 800173e:	481b      	ldr	r0, [pc, #108]	; (80017ac <HAL_UART_RxCpltCallback+0x10c>)
 8001740:	f004 fcdc 	bl	80060fc <HAL_UART_Transmit>
					uartFlag = 0;
 8001744:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <HAL_UART_RxCpltCallback+0x118>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
	 }
 800174a:	e024      	b.n	8001796 <HAL_UART_RxCpltCallback+0xf6>
				 sprintf(msg, "Cannot disable, not in State A.\r\n");
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_UART_RxCpltCallback+0x124>)
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 8001750:	0011      	movs	r1, r2
 8001752:	0018      	movs	r0, r3
 8001754:	f007 f8a0 	bl	8008898 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 800175a:	0018      	movs	r0, r3
 800175c:	f7fe fcdc 	bl	8000118 <strlen>
 8001760:	0003      	movs	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	2301      	movs	r3, #1
 8001766:	425b      	negs	r3, r3
 8001768:	490f      	ldr	r1, [pc, #60]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 800176a:	4810      	ldr	r0, [pc, #64]	; (80017ac <HAL_UART_RxCpltCallback+0x10c>)
 800176c:	f004 fcc6 	bl	80060fc <HAL_UART_Transmit>
	 }
 8001770:	e011      	b.n	8001796 <HAL_UART_RxCpltCallback+0xf6>
			 sprintf(msg, "Incorrect key.\r\n");
 8001772:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <HAL_UART_RxCpltCallback+0x128>)
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 8001776:	0011      	movs	r1, r2
 8001778:	0018      	movs	r0, r3
 800177a:	f007 f88d 	bl	8008898 <siprintf>
			 HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 8001780:	0018      	movs	r0, r3
 8001782:	f7fe fcc9 	bl	8000118 <strlen>
 8001786:	0003      	movs	r3, r0
 8001788:	b29a      	uxth	r2, r3
 800178a:	2301      	movs	r3, #1
 800178c:	425b      	negs	r3, r3
 800178e:	4906      	ldr	r1, [pc, #24]	; (80017a8 <HAL_UART_RxCpltCallback+0x108>)
 8001790:	4806      	ldr	r0, [pc, #24]	; (80017ac <HAL_UART_RxCpltCallback+0x10c>)
 8001792:	f004 fcb3 	bl	80060fc <HAL_UART_Transmit>
	 }
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b002      	add	sp, #8
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	200003f0 	.word	0x200003f0
 80017a4:	08009324 	.word	0x08009324
 80017a8:	2000039c 	.word	0x2000039c
 80017ac:	20000308 	.word	0x20000308
 80017b0:	0800933c 	.word	0x0800933c
 80017b4:	200003f8 	.word	0x200003f8
 80017b8:	20000000 	.word	0x20000000
 80017bc:	08009340 	.word	0x08009340
 80017c0:	08009354 	.word	0x08009354
 80017c4:	08009368 	.word	0x08009368
 80017c8:	0800938c 	.word	0x0800938c

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <Error_Handler+0x8>
	...

080017d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_MspInit+0x4c>)
 80017e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_MspInit+0x4c>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_MspInit+0x4c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2201      	movs	r2, #1
 80017f0:	4013      	ands	r3, r2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_MspInit+0x4c>)
 80017f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_MspInit+0x4c>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0549      	lsls	r1, r1, #21
 8001800:	430a      	orrs	r2, r1
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_MspInit+0x4c>)
 8001806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	055b      	lsls	r3, r3, #21
 800180c:	4013      	ands	r3, r2
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	0018      	movs	r0, r3
 8001818:	f000 fb8e 	bl	8001f38 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b002      	add	sp, #8
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b08b      	sub	sp, #44	; 0x2c
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	2414      	movs	r4, #20
 8001832:	193b      	adds	r3, r7, r4
 8001834:	0018      	movs	r0, r3
 8001836:	2314      	movs	r3, #20
 8001838:	001a      	movs	r2, r3
 800183a:	2100      	movs	r1, #0
 800183c:	f007 f84c 	bl	80088d8 <memset>
  if(hadc->Instance==ADC1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <HAL_ADC_MspInit+0x80>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d129      	bne.n	800189e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_ADC_MspInit+0x84>)
 800184c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_ADC_MspInit+0x84>)
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0349      	lsls	r1, r1, #13
 8001854:	430a      	orrs	r2, r1
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_ADC_MspInit+0x84>)
 800185a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	035b      	lsls	r3, r3, #13
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_ADC_MspInit+0x84>)
 8001868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_ADC_MspInit+0x84>)
 800186c:	2101      	movs	r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_ADC_MspInit+0x84>)
 8001874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 800187e:	193b      	adds	r3, r7, r4
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001884:	193b      	adds	r3, r7, r4
 8001886:	2203      	movs	r2, #3
 8001888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	193b      	adds	r3, r7, r4
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001890:	193a      	adds	r2, r7, r4
 8001892:	23a0      	movs	r3, #160	; 0xa0
 8001894:	05db      	lsls	r3, r3, #23
 8001896:	0011      	movs	r1, r2
 8001898:	0018      	movs	r0, r3
 800189a:	f001 fb93 	bl	8002fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b00b      	add	sp, #44	; 0x2c
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40012400 	.word	0x40012400
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b097      	sub	sp, #92	; 0x5c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	2344      	movs	r3, #68	; 0x44
 80018ba:	18fb      	adds	r3, r7, r3
 80018bc:	0018      	movs	r0, r3
 80018be:	2314      	movs	r3, #20
 80018c0:	001a      	movs	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	f007 f808 	bl	80088d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c8:	2410      	movs	r4, #16
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	0018      	movs	r0, r3
 80018ce:	2334      	movs	r3, #52	; 0x34
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f007 f800 	bl	80088d8 <memset>
  if(hi2c->Instance==I2C1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a22      	ldr	r2, [pc, #136]	; (8001968 <HAL_I2C_MspInit+0xb8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d13e      	bne.n	8001960 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	2220      	movs	r2, #32
 80018e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	0018      	movs	r0, r3
 80018f2:	f002 ffa7 	bl	8004844 <HAL_RCCEx_PeriphCLKConfig>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018fa:	f7ff ff67 	bl	80017cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_I2C_MspInit+0xbc>)
 8001900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_I2C_MspInit+0xbc>)
 8001904:	2102      	movs	r1, #2
 8001906:	430a      	orrs	r2, r1
 8001908:	635a      	str	r2, [r3, #52]	; 0x34
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_I2C_MspInit+0xbc>)
 800190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190e:	2202      	movs	r2, #2
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001916:	2144      	movs	r1, #68	; 0x44
 8001918:	187b      	adds	r3, r7, r1
 800191a:	22c0      	movs	r2, #192	; 0xc0
 800191c:	0092      	lsls	r2, r2, #2
 800191e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2212      	movs	r2, #18
 8001924:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	187b      	adds	r3, r7, r1
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	187b      	adds	r3, r7, r1
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001932:	187b      	adds	r3, r7, r1
 8001934:	2206      	movs	r2, #6
 8001936:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	187b      	adds	r3, r7, r1
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_I2C_MspInit+0xc0>)
 800193c:	0019      	movs	r1, r3
 800193e:	0010      	movs	r0, r2
 8001940:	f001 fb40 	bl	8002fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_I2C_MspInit+0xbc>)
 8001946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_I2C_MspInit+0xbc>)
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	0389      	lsls	r1, r1, #14
 800194e:	430a      	orrs	r2, r1
 8001950:	63da      	str	r2, [r3, #60]	; 0x3c
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_I2C_MspInit+0xbc>)
 8001954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	039b      	lsls	r3, r3, #14
 800195a:	4013      	ands	r3, r2
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b017      	add	sp, #92	; 0x5c
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	40005400 	.word	0x40005400
 800196c:	40021000 	.word	0x40021000
 8001970:	50000400 	.word	0x50000400

08001974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	05db      	lsls	r3, r3, #23
 8001984:	429a      	cmp	r2, r3
 8001986:	d114      	bne.n	80019b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001988:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 800198a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	63da      	str	r2, [r3, #60]	; 0x3c
 8001994:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	200f      	movs	r0, #15
 80019a6:	f001 f9ff 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f001 fa11 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80019b0:	e07c      	b.n	8001aac <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM3)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a40      	ldr	r2, [pc, #256]	; (8001ab8 <HAL_TIM_Base_MspInit+0x144>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d10c      	bne.n	80019d6 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019bc:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 80019be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019c0:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 80019c2:	2102      	movs	r1, #2
 80019c4:	430a      	orrs	r2, r1
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80019c8:	4b3a      	ldr	r3, [pc, #232]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	69bb      	ldr	r3, [r7, #24]
}
 80019d4:	e06a      	b.n	8001aac <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM6)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a38      	ldr	r2, [pc, #224]	; (8001abc <HAL_TIM_Base_MspInit+0x148>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d114      	bne.n	8001a0a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 80019e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019e4:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 80019e6:	2110      	movs	r1, #16
 80019e8:	430a      	orrs	r2, r1
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80019ec:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 80019ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f0:	2210      	movs	r2, #16
 80019f2:	4013      	ands	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	2011      	movs	r0, #17
 80019fe:	f001 f9d3 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8001a02:	2011      	movs	r0, #17
 8001a04:	f001 f9e5 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 8001a08:	e050      	b.n	8001aac <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM7)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a2c      	ldr	r2, [pc, #176]	; (8001ac0 <HAL_TIM_Base_MspInit+0x14c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d114      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a18:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	2220      	movs	r2, #32
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2012      	movs	r0, #18
 8001a32:	f001 f9b9 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8001a36:	2012      	movs	r0, #18
 8001a38:	f001 f9cb 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 8001a3c:	e036      	b.n	8001aac <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM14)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <HAL_TIM_Base_MspInit+0x150>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d116      	bne.n	8001a76 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	0209      	lsls	r1, r1, #8
 8001a52:	430a      	orrs	r2, r1
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	2013      	movs	r0, #19
 8001a6a:	f001 f99d 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001a6e:	2013      	movs	r0, #19
 8001a70:	f001 f9af 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 8001a74:	e01a      	b.n	8001aac <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM17)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <HAL_TIM_Base_MspInit+0x154>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d115      	bne.n	8001aac <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	02c9      	lsls	r1, r1, #11
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_TIM_Base_MspInit+0x140>)
 8001a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	02db      	lsls	r3, r3, #11
 8001a96:	4013      	ands	r3, r2
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2016      	movs	r0, #22
 8001aa2:	f001 f981 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001aa6:	2016      	movs	r0, #22
 8001aa8:	f001 f993 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b008      	add	sp, #32
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40001000 	.word	0x40001000
 8001ac0:	40001400 	.word	0x40001400
 8001ac4:	40002000 	.word	0x40002000
 8001ac8:	40014800 	.word	0x40014800

08001acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	240c      	movs	r4, #12
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	0018      	movs	r0, r3
 8001ada:	2314      	movs	r3, #20
 8001adc:	001a      	movs	r2, r3
 8001ade:	2100      	movs	r1, #0
 8001ae0:	f006 fefa 	bl	80088d8 <memset>
  if(htim->Instance==TIM3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_TIM_MspPostInit+0x70>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d122      	bne.n	8001b34 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <HAL_TIM_MspPostInit+0x74>)
 8001af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_TIM_MspPostInit+0x74>)
 8001af4:	2101      	movs	r1, #1
 8001af6:	430a      	orrs	r2, r1
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_TIM_MspPostInit+0x74>)
 8001afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b06:	0021      	movs	r1, r4
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2202      	movs	r2, #2
 8001b12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2201      	movs	r2, #1
 8001b24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	187a      	adds	r2, r7, r1
 8001b28:	23a0      	movs	r3, #160	; 0xa0
 8001b2a:	05db      	lsls	r3, r3, #23
 8001b2c:	0011      	movs	r1, r2
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f001 fa48 	bl	8002fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b009      	add	sp, #36	; 0x24
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b097      	sub	sp, #92	; 0x5c
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	2344      	movs	r3, #68	; 0x44
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	0018      	movs	r0, r3
 8001b52:	2314      	movs	r3, #20
 8001b54:	001a      	movs	r2, r3
 8001b56:	2100      	movs	r1, #0
 8001b58:	f006 febe 	bl	80088d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	2410      	movs	r4, #16
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	0018      	movs	r0, r3
 8001b62:	2334      	movs	r3, #52	; 0x34
 8001b64:	001a      	movs	r2, r3
 8001b66:	2100      	movs	r1, #0
 8001b68:	f006 feb6 	bl	80088d8 <memset>
  if(huart->Instance==USART2)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_UART_MspInit+0xc8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d146      	bne.n	8001c04 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	2202      	movs	r2, #2
 8001b7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	0018      	movs	r0, r3
 8001b86:	f002 fe5d 	bl	8004844 <HAL_RCCEx_PeriphCLKConfig>
 8001b8a:	1e03      	subs	r3, r0, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b8e:	f7ff fe1d 	bl	80017cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <HAL_UART_MspInit+0xcc>)
 8001b94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_UART_MspInit+0xcc>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0289      	lsls	r1, r1, #10
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_UART_MspInit+0xcc>)
 8001ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	029b      	lsls	r3, r3, #10
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_UART_MspInit+0xcc>)
 8001bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_UART_MspInit+0xcc>)
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_UART_MspInit+0xcc>)
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001bc6:	2144      	movs	r1, #68	; 0x44
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	2201      	movs	r2, #1
 8001be4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	187a      	adds	r2, r7, r1
 8001be8:	23a0      	movs	r3, #160	; 0xa0
 8001bea:	05db      	lsls	r3, r3, #23
 8001bec:	0011      	movs	r1, r2
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f001 f9e8 	bl	8002fc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	201c      	movs	r0, #28
 8001bfa:	f001 f8d5 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bfe:	201c      	movs	r0, #28
 8001c00:	f001 f8e7 	bl	8002dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b017      	add	sp, #92	; 0x5c
 8001c0a:	bd90      	pop	{r4, r7, pc}
 8001c0c:	40004400 	.word	0x40004400
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_UART_MspDeInit+0x38>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10e      	bne.n	8001c44 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_UART_MspDeInit+0x3c>)
 8001c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_UART_MspDeInit+0x3c>)
 8001c2c:	4909      	ldr	r1, [pc, #36]	; (8001c54 <HAL_UART_MspDeInit+0x40>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART2_TX_Pin|USART2_RX_Pin);
 8001c32:	23a0      	movs	r3, #160	; 0xa0
 8001c34:	05db      	lsls	r3, r3, #23
 8001c36:	210c      	movs	r1, #12
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f001 fb27 	bl	800328c <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001c3e:	201c      	movs	r0, #28
 8001c40:	f001 f8d7 	bl	8002df2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40004400 	.word	0x40004400
 8001c50:	40021000 	.word	0x40021000
 8001c54:	fffdffff 	.word	0xfffdffff

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c5c:	e7fe      	b.n	8001c5c <NMI_Handler+0x4>

08001c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <HardFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f000 f91c 	bl	8001eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <TIM2_IRQHandler+0x14>)
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f003 fa08 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	20000140 	.word	0x20000140

08001ca0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f003 f9fc 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	200001d8 	.word	0x200001d8

08001cb8 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <TIM7_LPTIM2_IRQHandler+0x14>)
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f003 f9f0 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	20000224 	.word	0x20000224

08001cd0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <TIM14_IRQHandler+0x14>)
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f003 f9e4 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000270 	.word	0x20000270

08001ce8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <TIM17_IRQHandler+0x14>)
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f003 f9d8 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	200002bc 	.word	0x200002bc

08001d00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <USART2_IRQHandler+0x14>)
 8001d06:	0018      	movs	r0, r3
 8001d08:	f004 fafa 	bl	8006300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	20000308 	.word	0x20000308

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f006 fdce 	bl	80088e8 <__errno>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	220c      	movs	r2, #12
 8001d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	425b      	negs	r3, r3
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	18d2      	adds	r2, r2, r3
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <_sbrk+0x64>)
 8001d68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b006      	add	sp, #24
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20009000 	.word	0x20009000
 8001d78:	00000400 	.word	0x00000400
 8001d7c:	20000400 	.word	0x20000400
 8001d80:	20000558 	.word	0x20000558

08001d84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d94:	f7ff fff6 	bl	8001d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d9a:	490d      	ldr	r1, [pc, #52]	; (8001dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <LoopForever+0xe>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db0:	4c0a      	ldr	r4, [pc, #40]	; (8001ddc <LoopForever+0x16>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dbe:	f006 fd99 	bl	80088f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001dc2:	f7fe fc47 	bl	8000654 <main>

08001dc6 <LoopForever>:

LoopForever:
  b LoopForever
 8001dc6:	e7fe      	b.n	8001dc6 <LoopForever>
  ldr   r0, =_estack
 8001dc8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001dd4:	080094dc 	.word	0x080094dc
  ldr r2, =_sbss
 8001dd8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001ddc:	20000554 	.word	0x20000554

08001de0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC1_COMP_IRQHandler>
	...

08001de4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_Init+0x3c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_Init+0x3c>)
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	0049      	lsls	r1, r1, #1
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f000 f810 	bl	8001e24 <HAL_InitTick>
 8001e04:	1e03      	subs	r3, r0, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e001      	b.n	8001e14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fce2 	bl	80017d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e14:	1dfb      	adds	r3, r7, #7
 8001e16:	781b      	ldrb	r3, [r3, #0]
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40022000 	.word	0x40022000

08001e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_InitTick+0x88>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d02b      	beq.n	8001e94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e3c:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_InitTick+0x8c>)
 8001e3e:	681c      	ldr	r4, [r3, #0]
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_InitTick+0x88>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	0019      	movs	r1, r3
 8001e46:	23fa      	movs	r3, #250	; 0xfa
 8001e48:	0098      	lsls	r0, r3, #2
 8001e4a:	f7fe f977 	bl	800013c <__udivsi3>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	0019      	movs	r1, r3
 8001e52:	0020      	movs	r0, r4
 8001e54:	f7fe f972 	bl	800013c <__udivsi3>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 ffd9 	bl	8002e12 <HAL_SYSTICK_Config>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d112      	bne.n	8001e8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d80a      	bhi.n	8001e80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	425b      	negs	r3, r3
 8001e70:	2200      	movs	r2, #0
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 ff98 	bl	8002da8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_InitTick+0x90>)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e00d      	b.n	8001e9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e80:	230f      	movs	r3, #15
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	e008      	b.n	8001e9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	e003      	b.n	8001e9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e94:	230f      	movs	r3, #15
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b005      	add	sp, #20
 8001ea8:	bd90      	pop	{r4, r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	20000018 	.word	0x20000018
 8001eb0:	20000010 	.word	0x20000010
 8001eb4:	20000014 	.word	0x20000014

08001eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_IncTick+0x1c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_IncTick+0x20>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	18d2      	adds	r2, r2, r3
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_IncTick+0x20>)
 8001eca:	601a      	str	r2, [r3, #0]
}
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000018 	.word	0x20000018
 8001ed8:	20000404 	.word	0x20000404

08001edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b02      	ldr	r3, [pc, #8]	; (8001eec <HAL_GetTick+0x10>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	20000404 	.word	0x20000404

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff fff0 	bl	8001edc <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	001a      	movs	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	189b      	adds	r3, r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	f7ff ffe0 	bl	8001edc <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	20000018 	.word	0x20000018

08001f38 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	fffff9ff 	.word	0xfffff9ff

08001f64 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001f74:	401a      	ands	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	601a      	str	r2, [r3, #0]
}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b002      	add	sp, #8
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	fe3fffff 	.word	0xfe3fffff

08001f8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	23e0      	movs	r3, #224	; 0xe0
 8001f9a:	045b      	lsls	r3, r3, #17
 8001f9c:	4013      	ands	r3, r2
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	2104      	movs	r1, #4
 8001fba:	400a      	ands	r2, r1
 8001fbc:	2107      	movs	r1, #7
 8001fbe:	4091      	lsls	r1, r2
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	43d2      	mvns	r2, r2
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2104      	movs	r1, #4
 8001fca:	400b      	ands	r3, r1
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4099      	lsls	r1, r3
 8001fd0:	000b      	movs	r3, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	2107      	movs	r1, #7
 8001ff6:	4091      	lsls	r1, r2
 8001ff8:	000a      	movs	r2, r1
 8001ffa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2104      	movs	r1, #4
 8002000:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002002:	40da      	lsrs	r2, r3
 8002004:	0013      	movs	r3, r2
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}

0800200e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	23c0      	movs	r3, #192	; 0xc0
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	4013      	ands	r3, r2
 8002020:	d101      	bne.n	8002026 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002026:	2300      	movs	r3, #0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}

08002030 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	211f      	movs	r1, #31
 8002044:	400a      	ands	r2, r1
 8002046:	210f      	movs	r1, #15
 8002048:	4091      	lsls	r1, r2
 800204a:	000a      	movs	r2, r1
 800204c:	43d2      	mvns	r2, r2
 800204e:	401a      	ands	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	0e9b      	lsrs	r3, r3, #26
 8002054:	210f      	movs	r1, #15
 8002056:	4019      	ands	r1, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	201f      	movs	r0, #31
 800205c:	4003      	ands	r3, r0
 800205e:	4099      	lsls	r1, r3
 8002060:	000b      	movs	r3, r1
 8002062:	431a      	orrs	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b004      	add	sp, #16
 800206e:	bd80      	pop	{r7, pc}

08002070 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	035b      	lsls	r3, r3, #13
 8002082:	0b5b      	lsrs	r3, r3, #13
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b002      	add	sp, #8
 8002090:	bd80      	pop	{r7, pc}

08002092 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	0352      	lsls	r2, r2, #13
 80020a4:	0b52      	lsrs	r2, r2, #13
 80020a6:	43d2      	mvns	r2, r2
 80020a8:	401a      	ands	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	0212      	lsls	r2, r2, #8
 80020cc:	43d2      	mvns	r2, r2
 80020ce:	401a      	ands	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	400b      	ands	r3, r1
 80020d8:	4904      	ldr	r1, [pc, #16]	; (80020ec <LL_ADC_SetChannelSamplingTime+0x34>)
 80020da:	400b      	ands	r3, r1
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b004      	add	sp, #16
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	07ffff00 	.word	0x07ffff00

080020f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a05      	ldr	r2, [pc, #20]	; (8002114 <LL_ADC_EnableInternalRegulator+0x24>)
 80020fe:	4013      	ands	r3, r2
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	0552      	lsls	r2, r2, #21
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	6fffffe8 	.word	0x6fffffe8

08002118 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	055b      	lsls	r3, r3, #21
 8002128:	401a      	ands	r2, r3
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	055b      	lsls	r3, r3, #21
 800212e:	429a      	cmp	r2, r3
 8002130:	d101      	bne.n	8002136 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002136:	2300      	movs	r3, #0
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}

08002140 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <LL_ADC_Enable+0x20>)
 800214e:	4013      	ands	r3, r2
 8002150:	2201      	movs	r2, #1
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002158:	46c0      	nop			; (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}
 8002160:	7fffffe8 	.word	0x7fffffe8

08002164 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2201      	movs	r2, #1
 8002172:	4013      	ands	r3, r2
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <LL_ADC_IsEnabled+0x18>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <LL_ADC_IsEnabled+0x1a>
 800217c:	2300      	movs	r3, #0
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b002      	add	sp, #8
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <LL_ADC_REG_StartConversion+0x20>)
 8002196:	4013      	ands	r3, r2
 8002198:	2204      	movs	r2, #4
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	7fffffe8 	.word	0x7fffffe8

080021ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2204      	movs	r2, #4
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d101      	bne.n	80021c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d8:	231f      	movs	r3, #31
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e17f      	b.n	80024f6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10a      	bne.n	8002214 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	0018      	movs	r0, r3
 8002202:	f7ff fb11 	bl	8001828 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2254      	movs	r2, #84	; 0x54
 8002210:	2100      	movs	r1, #0
 8002212:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0018      	movs	r0, r3
 800221a:	f7ff ff7d 	bl	8002118 <LL_ADC_IsInternalRegulatorEnabled>
 800221e:	1e03      	subs	r3, r0, #0
 8002220:	d115      	bne.n	800224e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff ff62 	bl	80020f0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800222c:	4bb4      	ldr	r3, [pc, #720]	; (8002500 <HAL_ADC_Init+0x330>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	49b4      	ldr	r1, [pc, #720]	; (8002504 <HAL_ADC_Init+0x334>)
 8002232:	0018      	movs	r0, r3
 8002234:	f7fd ff82 	bl	800013c <__udivsi3>
 8002238:	0003      	movs	r3, r0
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002240:	e002      	b.n	8002248 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3b01      	subs	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f9      	bne.n	8002242 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff ff60 	bl	8002118 <LL_ADC_IsInternalRegulatorEnabled>
 8002258:	1e03      	subs	r3, r0, #0
 800225a:	d10f      	bne.n	800227c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	2210      	movs	r2, #16
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	2201      	movs	r2, #1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002274:	231f      	movs	r3, #31
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff ff93 	bl	80021ac <LL_ADC_REG_IsConversionOngoing>
 8002286:	0003      	movs	r3, r0
 8002288:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	2210      	movs	r2, #16
 8002290:	4013      	ands	r3, r2
 8002292:	d000      	beq.n	8002296 <HAL_ADC_Init+0xc6>
 8002294:	e122      	b.n	80024dc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d000      	beq.n	800229e <HAL_ADC_Init+0xce>
 800229c:	e11e      	b.n	80024dc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4a99      	ldr	r2, [pc, #612]	; (8002508 <HAL_ADC_Init+0x338>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	2202      	movs	r2, #2
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f7ff ff56 	bl	8002164 <LL_ADC_IsEnabled>
 80022b8:	1e03      	subs	r3, r0, #0
 80022ba:	d000      	beq.n	80022be <HAL_ADC_Init+0xee>
 80022bc:	e0ad      	b.n	800241a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7e1b      	ldrb	r3, [r3, #24]
 80022c6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80022c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7e5b      	ldrb	r3, [r3, #25]
 80022ce:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022d0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7e9b      	ldrb	r3, [r3, #26]
 80022d6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022d8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_ADC_Init+0x118>
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	015b      	lsls	r3, r3, #5
 80022e6:	e000      	b.n	80022ea <HAL_ADC_Init+0x11a>
 80022e8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022ea:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022f0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da04      	bge.n	8002304 <HAL_ADC_Init+0x134>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	e001      	b.n	8002308 <HAL_ADC_Init+0x138>
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8002308:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	5c5b      	ldrb	r3, [r3, r1]
 8002310:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002312:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d115      	bne.n	8002350 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7e9b      	ldrb	r3, [r3, #26]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	0252      	lsls	r2, r2, #9
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	e00b      	b.n	8002350 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	2220      	movs	r2, #32
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2201      	movs	r2, #1
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235c:	23e0      	movs	r3, #224	; 0xe0
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002366:	4313      	orrs	r3, r2
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a65      	ldr	r2, [pc, #404]	; (800250c <HAL_ADC_Init+0x33c>)
 8002376:	4013      	ands	r3, r2
 8002378:	0019      	movs	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	430a      	orrs	r2, r1
 8002382:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0f9b      	lsrs	r3, r3, #30
 800238a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002390:	4313      	orrs	r3, r2
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	223c      	movs	r2, #60	; 0x3c
 800239c:	5c9b      	ldrb	r3, [r3, r2]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d111      	bne.n	80023c6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	0f9b      	lsrs	r3, r3, #30
 80023a8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023ae:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80023b4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80023ba:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	2201      	movs	r2, #1
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	4a50      	ldr	r2, [pc, #320]	; (8002510 <HAL_ADC_Init+0x340>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	430a      	orrs	r2, r1
 80023da:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	23c0      	movs	r3, #192	; 0xc0
 80023e2:	061b      	lsls	r3, r3, #24
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d018      	beq.n	800241a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	05db      	lsls	r3, r3, #23
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d012      	beq.n	800241a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d00c      	beq.n	800241a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002400:	4b44      	ldr	r3, [pc, #272]	; (8002514 <HAL_ADC_Init+0x344>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a44      	ldr	r2, [pc, #272]	; (8002518 <HAL_ADC_Init+0x348>)
 8002406:	4013      	ands	r3, r2
 8002408:	0019      	movs	r1, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	23f0      	movs	r3, #240	; 0xf0
 8002410:	039b      	lsls	r3, r3, #14
 8002412:	401a      	ands	r2, r3
 8002414:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_ADC_Init+0x344>)
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	001a      	movs	r2, r3
 8002424:	2100      	movs	r1, #0
 8002426:	f7ff fdbe 	bl	8001fa6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	493a      	ldr	r1, [pc, #232]	; (800251c <HAL_ADC_Init+0x34c>)
 8002434:	001a      	movs	r2, r3
 8002436:	f7ff fdb6 	bl	8001fa6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2110      	movs	r1, #16
 800244e:	4249      	negs	r1, r1
 8002450:	430a      	orrs	r2, r1
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
 8002454:	e018      	b.n	8002488 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	039b      	lsls	r3, r3, #14
 800245e:	429a      	cmp	r2, r3
 8002460:	d112      	bne.n	8002488 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	3b01      	subs	r3, #1
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	221c      	movs	r2, #28
 8002472:	4013      	ands	r3, r2
 8002474:	2210      	movs	r2, #16
 8002476:	4252      	negs	r2, r2
 8002478:	409a      	lsls	r2, r3
 800247a:	0011      	movs	r1, r2
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2100      	movs	r1, #0
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff fda6 	bl	8001fe0 <LL_ADC_GetSamplingTimeCommonChannels>
 8002494:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800249a:	429a      	cmp	r2, r3
 800249c:	d10b      	bne.n	80024b6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	2203      	movs	r2, #3
 80024aa:	4393      	bics	r3, r2
 80024ac:	2201      	movs	r2, #1
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024b4:	e01c      	b.n	80024f0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	2212      	movs	r2, #18
 80024bc:	4393      	bics	r3, r2
 80024be:	2210      	movs	r2, #16
 80024c0:	431a      	orrs	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ca:	2201      	movs	r2, #1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80024d2:	231f      	movs	r3, #31
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024da:	e009      	b.n	80024f0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	2210      	movs	r2, #16
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024e8:	231f      	movs	r3, #31
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80024f0:	231f      	movs	r3, #31
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	781b      	ldrb	r3, [r3, #0]
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b008      	add	sp, #32
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	20000010 	.word	0x20000010
 8002504:	00030d40 	.word	0x00030d40
 8002508:	fffffefd 	.word	0xfffffefd
 800250c:	ffde0201 	.word	0xffde0201
 8002510:	1ffffc02 	.word	0x1ffffc02
 8002514:	40012708 	.word	0x40012708
 8002518:	ffc3ffff 	.word	0xffc3ffff
 800251c:	07ffff04 	.word	0x07ffff04

08002520 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d102      	bne.n	8002538 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002532:	2308      	movs	r3, #8
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e00f      	b.n	8002558 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	4013      	ands	r3, r2
 8002542:	d007      	beq.n	8002554 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	2220      	movs	r2, #32
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e072      	b.n	800263a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002554:	2304      	movs	r3, #4
 8002556:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002558:	f7ff fcc0 	bl	8001edc <HAL_GetTick>
 800255c:	0003      	movs	r3, r0
 800255e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002560:	e01f      	b.n	80025a2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	d01c      	beq.n	80025a2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002568:	f7ff fcb8 	bl	8001edc <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d302      	bcc.n	800257e <HAL_ADC_PollForConversion+0x5e>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d111      	bne.n	80025a2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	d10b      	bne.n	80025a2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	2204      	movs	r2, #4
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2254      	movs	r2, #84	; 0x54
 800259a:	2100      	movs	r1, #0
 800259c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e04b      	b.n	800263a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	d0d9      	beq.n	8002562 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	0092      	lsls	r2, r2, #2
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f7ff fd24 	bl	800200e <LL_ADC_REG_IsTriggerSourceSWStart>
 80025c6:	1e03      	subs	r3, r0, #0
 80025c8:	d02e      	beq.n	8002628 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7e9b      	ldrb	r3, [r3, #26]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d12a      	bne.n	8002628 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2208      	movs	r2, #8
 80025da:	4013      	ands	r3, r2
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d123      	bne.n	8002628 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff fde1 	bl	80021ac <LL_ADC_REG_IsConversionOngoing>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d110      	bne.n	8002610 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	210c      	movs	r1, #12
 80025fa:	438a      	bics	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_ADC_PollForConversion+0x124>)
 8002604:	4013      	ands	r3, r2
 8002606:	2201      	movs	r2, #1
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	659a      	str	r2, [r3, #88]	; 0x58
 800260e:	e00b      	b.n	8002628 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	2220      	movs	r2, #32
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	2201      	movs	r2, #1
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	7e1b      	ldrb	r3, [r3, #24]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d103      	bne.n	8002638 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	220c      	movs	r2, #12
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	fffffefe 	.word	0xfffffefe

08002648 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff fda9 	bl	80021ac <LL_ADC_REG_IsConversionOngoing>
 800265a:	1e03      	subs	r3, r0, #0
 800265c:	d15f      	bne.n	800271e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2254      	movs	r2, #84	; 0x54
 8002662:	5c9b      	ldrb	r3, [r3, r2]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_ADC_Start_IT+0x24>
 8002668:	2302      	movs	r3, #2
 800266a:	e05f      	b.n	800272c <HAL_ADC_Start_IT+0xe4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2254      	movs	r2, #84	; 0x54
 8002670:	2101      	movs	r1, #1
 8002672:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002674:	250f      	movs	r5, #15
 8002676:	197c      	adds	r4, r7, r5
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 fa40 	bl	8002b00 <ADC_Enable>
 8002680:	0003      	movs	r3, r0
 8002682:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002684:	197b      	adds	r3, r7, r5
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d143      	bne.n	8002714 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	4a28      	ldr	r2, [pc, #160]	; (8002734 <HAL_ADC_Start_IT+0xec>)
 8002692:	4013      	ands	r3, r2
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	0052      	lsls	r2, r2, #1
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	221c      	movs	r2, #28
 80026aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2254      	movs	r2, #84	; 0x54
 80026b0:	2100      	movs	r1, #0
 80026b2:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	211c      	movs	r1, #28
 80026c0:	438a      	bics	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d108      	bne.n	80026de <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2108      	movs	r1, #8
 80026d8:	430a      	orrs	r2, r1
 80026da:	605a      	str	r2, [r3, #4]
          break;
 80026dc:	e008      	b.n	80026f0 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2104      	movs	r1, #4
 80026ea:	430a      	orrs	r2, r1
 80026ec:	605a      	str	r2, [r3, #4]
          break;
 80026ee:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d107      	bne.n	8002708 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2110      	movs	r1, #16
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff fd3b 	bl	8002188 <LL_ADC_REG_StartConversion>
 8002712:	e008      	b.n	8002726 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2254      	movs	r2, #84	; 0x54
 8002718:	2100      	movs	r1, #0
 800271a:	5499      	strb	r1, [r3, r2]
 800271c:	e003      	b.n	8002726 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800271e:	230f      	movs	r3, #15
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002726:	230f      	movs	r3, #15
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b004      	add	sp, #16
 8002732:	bdb0      	pop	{r4, r5, r7, pc}
 8002734:	fffff0fe 	.word	0xfffff0fe

08002738 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002746:	0018      	movs	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	b002      	add	sp, #8
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275a:	2317      	movs	r3, #23
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2254      	movs	r2, #84	; 0x54
 800276a:	5c9b      	ldrb	r3, [r3, r2]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x24>
 8002770:	2302      	movs	r3, #2
 8002772:	e1c0      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x3a6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2254      	movs	r2, #84	; 0x54
 8002778:	2101      	movs	r1, #1
 800277a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff fd13 	bl	80021ac <LL_ADC_REG_IsConversionOngoing>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d000      	beq.n	800278c <HAL_ADC_ConfigChannel+0x3c>
 800278a:	e1a3      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d100      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x46>
 8002794:	e143      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	429a      	cmp	r2, r3
 80027a0:	d004      	beq.n	80027ac <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027a6:	4ac1      	ldr	r2, [pc, #772]	; (8002aac <HAL_ADC_ConfigChannel+0x35c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d108      	bne.n	80027be <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0019      	movs	r1, r3
 80027b6:	0010      	movs	r0, r2
 80027b8:	f7ff fc5a 	bl	8002070 <LL_ADC_REG_SetSequencerChAdd>
 80027bc:	e0c9      	b.n	8002952 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	211f      	movs	r1, #31
 80027c8:	400b      	ands	r3, r1
 80027ca:	210f      	movs	r1, #15
 80027cc:	4099      	lsls	r1, r3
 80027ce:	000b      	movs	r3, r1
 80027d0:	43db      	mvns	r3, r3
 80027d2:	4013      	ands	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	035b      	lsls	r3, r3, #13
 80027dc:	0b5b      	lsrs	r3, r3, #13
 80027de:	d105      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x9c>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	221f      	movs	r2, #31
 80027e8:	4013      	ands	r3, r2
 80027ea:	e098      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	d000      	beq.n	80027f8 <HAL_ADC_ConfigChannel+0xa8>
 80027f6:	e091      	b.n	800291c <HAL_ADC_ConfigChannel+0x1cc>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2202      	movs	r2, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d000      	beq.n	8002804 <HAL_ADC_ConfigChannel+0xb4>
 8002802:	e089      	b.n	8002918 <HAL_ADC_ConfigChannel+0x1c8>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2204      	movs	r2, #4
 800280a:	4013      	ands	r3, r2
 800280c:	d000      	beq.n	8002810 <HAL_ADC_ConfigChannel+0xc0>
 800280e:	e081      	b.n	8002914 <HAL_ADC_ConfigChannel+0x1c4>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2208      	movs	r2, #8
 8002816:	4013      	ands	r3, r2
 8002818:	d000      	beq.n	800281c <HAL_ADC_ConfigChannel+0xcc>
 800281a:	e079      	b.n	8002910 <HAL_ADC_ConfigChannel+0x1c0>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2210      	movs	r2, #16
 8002822:	4013      	ands	r3, r2
 8002824:	d000      	beq.n	8002828 <HAL_ADC_ConfigChannel+0xd8>
 8002826:	e071      	b.n	800290c <HAL_ADC_ConfigChannel+0x1bc>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2220      	movs	r2, #32
 800282e:	4013      	ands	r3, r2
 8002830:	d000      	beq.n	8002834 <HAL_ADC_ConfigChannel+0xe4>
 8002832:	e069      	b.n	8002908 <HAL_ADC_ConfigChannel+0x1b8>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2240      	movs	r2, #64	; 0x40
 800283a:	4013      	ands	r3, r2
 800283c:	d000      	beq.n	8002840 <HAL_ADC_ConfigChannel+0xf0>
 800283e:	e061      	b.n	8002904 <HAL_ADC_ConfigChannel+0x1b4>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	4013      	ands	r3, r2
 8002848:	d000      	beq.n	800284c <HAL_ADC_ConfigChannel+0xfc>
 800284a:	e059      	b.n	8002900 <HAL_ADC_ConfigChannel+0x1b0>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4013      	ands	r3, r2
 8002856:	d151      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1ac>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4013      	ands	r3, r2
 8002862:	d149      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1a8>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4013      	ands	r3, r2
 800286e:	d141      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x1a4>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	4013      	ands	r3, r2
 800287a:	d139      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1a0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	015b      	lsls	r3, r3, #5
 8002884:	4013      	ands	r3, r2
 8002886:	d131      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x19c>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	019b      	lsls	r3, r3, #6
 8002890:	4013      	ands	r3, r2
 8002892:	d129      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x198>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	01db      	lsls	r3, r3, #7
 800289c:	4013      	ands	r3, r2
 800289e:	d121      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x194>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	4013      	ands	r3, r2
 80028aa:	d119      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x190>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	025b      	lsls	r3, r3, #9
 80028b4:	4013      	ands	r3, r2
 80028b6:	d111      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x18c>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	029b      	lsls	r3, r3, #10
 80028c0:	4013      	ands	r3, r2
 80028c2:	d109      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x188>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	02db      	lsls	r3, r3, #11
 80028cc:	4013      	ands	r3, r2
 80028ce:	d001      	beq.n	80028d4 <HAL_ADC_ConfigChannel+0x184>
 80028d0:	2312      	movs	r3, #18
 80028d2:	e024      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028d4:	2300      	movs	r3, #0
 80028d6:	e022      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028d8:	2311      	movs	r3, #17
 80028da:	e020      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028dc:	2310      	movs	r3, #16
 80028de:	e01e      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028e0:	230f      	movs	r3, #15
 80028e2:	e01c      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028e4:	230e      	movs	r3, #14
 80028e6:	e01a      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028e8:	230d      	movs	r3, #13
 80028ea:	e018      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028ec:	230c      	movs	r3, #12
 80028ee:	e016      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028f0:	230b      	movs	r3, #11
 80028f2:	e014      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028f4:	230a      	movs	r3, #10
 80028f6:	e012      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028f8:	2309      	movs	r3, #9
 80028fa:	e010      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 80028fc:	2308      	movs	r3, #8
 80028fe:	e00e      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 8002900:	2307      	movs	r3, #7
 8002902:	e00c      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 8002904:	2306      	movs	r3, #6
 8002906:	e00a      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 8002908:	2305      	movs	r3, #5
 800290a:	e008      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 800290c:	2304      	movs	r3, #4
 800290e:	e006      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 8002910:	2303      	movs	r3, #3
 8002912:	e004      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 8002914:	2302      	movs	r3, #2
 8002916:	e002      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ce>
 800291c:	2300      	movs	r3, #0
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	6852      	ldr	r2, [r2, #4]
 8002922:	201f      	movs	r0, #31
 8002924:	4002      	ands	r2, r0
 8002926:	4093      	lsls	r3, r2
 8002928:	000a      	movs	r2, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	429a      	cmp	r2, r3
 800293e:	d808      	bhi.n	8002952 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	001a      	movs	r2, r3
 800294e:	f7ff fb6f 	bl	8002030 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	001a      	movs	r2, r3
 8002960:	f7ff fbaa 	bl	80020b8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db00      	blt.n	800296e <HAL_ADC_ConfigChannel+0x21e>
 800296c:	e0bc      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800296e:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_ADC_ConfigChannel+0x360>)
 8002970:	0018      	movs	r0, r3
 8002972:	f7ff fb0b 	bl	8001f8c <LL_ADC_GetCommonPathInternalCh>
 8002976:	0003      	movs	r3, r0
 8002978:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a4d      	ldr	r2, [pc, #308]	; (8002ab4 <HAL_ADC_ConfigChannel+0x364>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d122      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800298c:	d11d      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	0412      	lsls	r2, r2, #16
 8002994:	4313      	orrs	r3, r2
 8002996:	4a46      	ldr	r2, [pc, #280]	; (8002ab0 <HAL_ADC_ConfigChannel+0x360>)
 8002998:	0019      	movs	r1, r3
 800299a:	0010      	movs	r0, r2
 800299c:	f7ff fae2 	bl	8001f64 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a0:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <HAL_ADC_ConfigChannel+0x368>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4945      	ldr	r1, [pc, #276]	; (8002abc <HAL_ADC_ConfigChannel+0x36c>)
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7fd fbc8 	bl	800013c <__udivsi3>
 80029ac:	0003      	movs	r3, r0
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	0013      	movs	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	189b      	adds	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ba:	e002      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3b01      	subs	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f9      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029c8:	e08e      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a3c      	ldr	r2, [pc, #240]	; (8002ac0 <HAL_ADC_ConfigChannel+0x370>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d10e      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	045b      	lsls	r3, r3, #17
 80029da:	4013      	ands	r3, r2
 80029dc:	d109      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	0452      	lsls	r2, r2, #17
 80029e4:	4313      	orrs	r3, r2
 80029e6:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <HAL_ADC_ConfigChannel+0x360>)
 80029e8:	0019      	movs	r1, r3
 80029ea:	0010      	movs	r0, r2
 80029ec:	f7ff faba 	bl	8001f64 <LL_ADC_SetCommonPathInternalCh>
 80029f0:	e07a      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <HAL_ADC_ConfigChannel+0x374>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d000      	beq.n	80029fe <HAL_ADC_ConfigChannel+0x2ae>
 80029fc:	e074      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	03db      	lsls	r3, r3, #15
 8002a04:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a06:	d000      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0x2ba>
 8002a08:	e06e      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2280      	movs	r2, #128	; 0x80
 8002a0e:	03d2      	lsls	r2, r2, #15
 8002a10:	4313      	orrs	r3, r2
 8002a12:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <HAL_ADC_ConfigChannel+0x360>)
 8002a14:	0019      	movs	r1, r3
 8002a16:	0010      	movs	r0, r2
 8002a18:	f7ff faa4 	bl	8001f64 <LL_ADC_SetCommonPathInternalCh>
 8002a1c:	e064      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d004      	beq.n	8002a34 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <HAL_ADC_ConfigChannel+0x35c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d107      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	0010      	movs	r0, r2
 8002a40:	f7ff fb27 	bl	8002092 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da4d      	bge.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_ADC_ConfigChannel+0x360>)
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7ff fa9c 	bl	8001f8c <LL_ADC_GetCommonPathInternalCh>
 8002a54:	0003      	movs	r3, r0
 8002a56:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <HAL_ADC_ConfigChannel+0x364>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_ADC_ConfigChannel+0x378>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <HAL_ADC_ConfigChannel+0x360>)
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	0010      	movs	r0, r2
 8002a6e:	f7ff fa79 	bl	8001f64 <LL_ADC_SetCommonPathInternalCh>
 8002a72:	e039      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <HAL_ADC_ConfigChannel+0x370>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d108      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <HAL_ADC_ConfigChannel+0x37c>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <HAL_ADC_ConfigChannel+0x360>)
 8002a86:	0019      	movs	r1, r3
 8002a88:	0010      	movs	r0, r2
 8002a8a:	f7ff fa6b 	bl	8001f64 <LL_ADC_SetCommonPathInternalCh>
 8002a8e:	e02b      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0b      	ldr	r2, [pc, #44]	; (8002ac4 <HAL_ADC_ConfigChannel+0x374>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d126      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <HAL_ADC_ConfigChannel+0x380>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <HAL_ADC_ConfigChannel+0x360>)
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	0010      	movs	r0, r2
 8002aa6:	f7ff fa5d 	bl	8001f64 <LL_ADC_SetCommonPathInternalCh>
 8002aaa:	e01d      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x398>
 8002aac:	80000004 	.word	0x80000004
 8002ab0:	40012708 	.word	0x40012708
 8002ab4:	b0001000 	.word	0xb0001000
 8002ab8:	20000010 	.word	0x20000010
 8002abc:	00030d40 	.word	0x00030d40
 8002ac0:	b8004000 	.word	0xb8004000
 8002ac4:	b4002000 	.word	0xb4002000
 8002ac8:	ff7fffff 	.word	0xff7fffff
 8002acc:	feffffff 	.word	0xfeffffff
 8002ad0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	2220      	movs	r2, #32
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ae0:	2317      	movs	r3, #23
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2254      	movs	r2, #84	; 0x54
 8002aec:	2100      	movs	r1, #0
 8002aee:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002af0:	2317      	movs	r3, #23
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	781b      	ldrb	r3, [r3, #0]
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b006      	add	sp, #24
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)

08002b00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff fb27 	bl	8002164 <LL_ADC_IsEnabled>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d000      	beq.n	8002b1c <ADC_Enable+0x1c>
 8002b1a:	e069      	b.n	8002bf0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4a36      	ldr	r2, [pc, #216]	; (8002bfc <ADC_Enable+0xfc>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	d00d      	beq.n	8002b44 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	2201      	movs	r2, #1
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e056      	b.n	8002bf2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7ff faf9 	bl	8002140 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002b4e:	4b2c      	ldr	r3, [pc, #176]	; (8002c00 <ADC_Enable+0x100>)
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7ff fa1b 	bl	8001f8c <LL_ADC_GetCommonPathInternalCh>
 8002b56:	0002      	movs	r2, r0
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d00f      	beq.n	8002b80 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <ADC_Enable+0x104>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4928      	ldr	r1, [pc, #160]	; (8002c08 <ADC_Enable+0x108>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7fd fae8 	bl	800013c <__udivsi3>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002b70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b72:	e002      	b.n	8002b7a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f9      	bne.n	8002b74 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7e5b      	ldrb	r3, [r3, #25]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d033      	beq.n	8002bf0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002b88:	f7ff f9a8 	bl	8001edc <HAL_GetTick>
 8002b8c:	0003      	movs	r3, r0
 8002b8e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b90:	e027      	b.n	8002be2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7ff fae4 	bl	8002164 <LL_ADC_IsEnabled>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d104      	bne.n	8002baa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7ff facb 	bl	8002140 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002baa:	f7ff f997 	bl	8001edc <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d914      	bls.n	8002be2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d00d      	beq.n	8002be2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	2210      	movs	r2, #16
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e007      	b.n	8002bf2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d1d0      	bne.n	8002b92 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	80000017 	.word	0x80000017
 8002c00:	40012708 	.word	0x40012708
 8002c04:	20000010 	.word	0x20000010
 8002c08:	00030d40 	.word	0x00030d40

08002c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	0002      	movs	r2, r0
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c18:	1dfb      	adds	r3, r7, #7
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c1e:	d809      	bhi.n	8002c34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	001a      	movs	r2, r3
 8002c26:	231f      	movs	r3, #31
 8002c28:	401a      	ands	r2, r3
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <__NVIC_EnableIRQ+0x30>)
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	4091      	lsls	r1, r2
 8002c30:	000a      	movs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	e000e100 	.word	0xe000e100

08002c40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	0002      	movs	r2, r0
 8002c48:	1dfb      	adds	r3, r7, #7
 8002c4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b7f      	cmp	r3, #127	; 0x7f
 8002c52:	d810      	bhi.n	8002c76 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c54:	1dfb      	adds	r3, r7, #7
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	001a      	movs	r2, r3
 8002c5a:	231f      	movs	r3, #31
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <__NVIC_DisableIRQ+0x40>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	409a      	lsls	r2, r3
 8002c64:	0013      	movs	r3, r2
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c6a:	f3bf 8f4f 	dsb	sy
}
 8002c6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002c70:	f3bf 8f6f 	isb	sy
}
 8002c74:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	e000e100 	.word	0xe000e100

08002c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	6039      	str	r1, [r7, #0]
 8002c8e:	1dfb      	adds	r3, r7, #7
 8002c90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b7f      	cmp	r3, #127	; 0x7f
 8002c98:	d828      	bhi.n	8002cec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c9a:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <__NVIC_SetPriority+0xd4>)
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	b25b      	sxtb	r3, r3
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	33c0      	adds	r3, #192	; 0xc0
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	589b      	ldr	r3, [r3, r2]
 8002caa:	1dfa      	adds	r2, r7, #7
 8002cac:	7812      	ldrb	r2, [r2, #0]
 8002cae:	0011      	movs	r1, r2
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	00d2      	lsls	r2, r2, #3
 8002cb6:	21ff      	movs	r1, #255	; 0xff
 8002cb8:	4091      	lsls	r1, r2
 8002cba:	000a      	movs	r2, r1
 8002cbc:	43d2      	mvns	r2, r2
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	019b      	lsls	r3, r3, #6
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	401a      	ands	r2, r3
 8002cca:	1dfb      	adds	r3, r7, #7
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	4003      	ands	r3, r0
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd8:	481f      	ldr	r0, [pc, #124]	; (8002d58 <__NVIC_SetPriority+0xd4>)
 8002cda:	1dfb      	adds	r3, r7, #7
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	33c0      	adds	r3, #192	; 0xc0
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002cea:	e031      	b.n	8002d50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <__NVIC_SetPriority+0xd8>)
 8002cee:	1dfb      	adds	r3, r7, #7
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	400b      	ands	r3, r1
 8002cf8:	3b08      	subs	r3, #8
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3306      	adds	r3, #6
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	18d3      	adds	r3, r2, r3
 8002d02:	3304      	adds	r3, #4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	1dfa      	adds	r2, r7, #7
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	0011      	movs	r1, r2
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	400a      	ands	r2, r1
 8002d10:	00d2      	lsls	r2, r2, #3
 8002d12:	21ff      	movs	r1, #255	; 0xff
 8002d14:	4091      	lsls	r1, r2
 8002d16:	000a      	movs	r2, r1
 8002d18:	43d2      	mvns	r2, r2
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	22ff      	movs	r2, #255	; 0xff
 8002d24:	401a      	ands	r2, r3
 8002d26:	1dfb      	adds	r3, r7, #7
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	4003      	ands	r3, r0
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d34:	4809      	ldr	r0, [pc, #36]	; (8002d5c <__NVIC_SetPriority+0xd8>)
 8002d36:	1dfb      	adds	r3, r7, #7
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	001c      	movs	r4, r3
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	4023      	ands	r3, r4
 8002d40:	3b08      	subs	r3, #8
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	430a      	orrs	r2, r1
 8002d46:	3306      	adds	r3, #6
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	18c3      	adds	r3, r0, r3
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	601a      	str	r2, [r3, #0]
}
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b003      	add	sp, #12
 8002d56:	bd90      	pop	{r4, r7, pc}
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	1e5a      	subs	r2, r3, #1
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	045b      	lsls	r3, r3, #17
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d301      	bcc.n	8002d78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d74:	2301      	movs	r3, #1
 8002d76:	e010      	b.n	8002d9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <SysTick_Config+0x44>)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	3a01      	subs	r2, #1
 8002d7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d80:	2301      	movs	r3, #1
 8002d82:	425b      	negs	r3, r3
 8002d84:	2103      	movs	r1, #3
 8002d86:	0018      	movs	r0, r3
 8002d88:	f7ff ff7c 	bl	8002c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <SysTick_Config+0x44>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <SysTick_Config+0x44>)
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	e000e010 	.word	0xe000e010

08002da8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	210f      	movs	r1, #15
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	1c02      	adds	r2, r0, #0
 8002db8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	0011      	movs	r1, r2
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff ff5d 	bl	8002c84 <__NVIC_SetPriority>
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	0002      	movs	r2, r0
 8002dda:	1dfb      	adds	r3, r7, #7
 8002ddc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7ff ff11 	bl	8002c0c <__NVIC_EnableIRQ>
}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b002      	add	sp, #8
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	0002      	movs	r2, r0
 8002dfa:	1dfb      	adds	r3, r7, #7
 8002dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dfe:	1dfb      	adds	r3, r7, #7
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b25b      	sxtb	r3, r3
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7ff ff1b 	bl	8002c40 <__NVIC_DisableIRQ>
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7ff ff9f 	bl	8002d60 <SysTick_Config>
 8002e22:	0003      	movs	r3, r0
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e050      	b.n	8002ee0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2225      	movs	r2, #37	; 0x25
 8002e42:	5c9b      	ldrb	r3, [r3, r2]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d008      	beq.n	8002e5c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e041      	b.n	8002ee0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	210e      	movs	r1, #14
 8002e68:	438a      	bics	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	491c      	ldr	r1, [pc, #112]	; (8002ee8 <HAL_DMA_Abort+0xbc>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2101      	movs	r1, #1
 8002e88:	438a      	bics	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <HAL_DMA_Abort+0xc0>)
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	221c      	movs	r2, #28
 8002e96:	4013      	ands	r3, r2
 8002e98:	2201      	movs	r2, #1
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_DMA_Abort+0xc0>)
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002eaa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	490a      	ldr	r1, [pc, #40]	; (8002ee8 <HAL_DMA_Abort+0xbc>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ecc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2225      	movs	r2, #37	; 0x25
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2224      	movs	r2, #36	; 0x24
 8002eda:	2100      	movs	r1, #0
 8002edc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	fffffeff 	.word	0xfffffeff
 8002eec:	40020000 	.word	0x40020000

08002ef0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	210f      	movs	r1, #15
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2225      	movs	r2, #37	; 0x25
 8002f04:	5c9b      	ldrb	r3, [r3, r2]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d006      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f12:	187b      	adds	r3, r7, r1
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e049      	b.n	8002fae <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	210e      	movs	r1, #14
 8002f26:	438a      	bics	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2101      	movs	r1, #1
 8002f36:	438a      	bics	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	491d      	ldr	r1, [pc, #116]	; (8002fbc <HAL_DMA_Abort_IT+0xcc>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_DMA_Abort_IT+0xd0>)
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	221c      	movs	r2, #28
 8002f54:	4013      	ands	r3, r2
 8002f56:	2201      	movs	r2, #1
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_DMA_Abort_IT+0xd0>)
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f68:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7c:	490f      	ldr	r1, [pc, #60]	; (8002fbc <HAL_DMA_Abort_IT+0xcc>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2225      	movs	r2, #37	; 0x25
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	; 0x24
 8002f98:	2100      	movs	r1, #0
 8002f9a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	0010      	movs	r0, r2
 8002fac:	4798      	blx	r3
    }
  }
  return status;
 8002fae:	230f      	movs	r3, #15
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	781b      	ldrb	r3, [r3, #0]
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b004      	add	sp, #16
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	fffffeff 	.word	0xfffffeff
 8002fc0:	40020000 	.word	0x40020000

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fd2:	e147      	b.n	8003264 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2101      	movs	r1, #1
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4091      	lsls	r1, r2
 8002fde:	000a      	movs	r2, r1
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d100      	bne.n	8002fec <HAL_GPIO_Init+0x28>
 8002fea:	e138      	b.n	800325e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d005      	beq.n	8003004 <HAL_GPIO_Init+0x40>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d130      	bne.n	8003066 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	409a      	lsls	r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	43da      	mvns	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	409a      	lsls	r2, r3
 8003026:	0013      	movs	r3, r2
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800303a:	2201      	movs	r2, #1
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	409a      	lsls	r2, r3
 8003040:	0013      	movs	r3, r2
 8003042:	43da      	mvns	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	2201      	movs	r2, #1
 8003052:	401a      	ands	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	409a      	lsls	r2, r3
 8003058:	0013      	movs	r3, r2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2203      	movs	r2, #3
 800306c:	4013      	ands	r3, r2
 800306e:	2b03      	cmp	r3, #3
 8003070:	d017      	beq.n	80030a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	2203      	movs	r2, #3
 800307e:	409a      	lsls	r2, r3
 8003080:	0013      	movs	r3, r2
 8003082:	43da      	mvns	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	409a      	lsls	r2, r3
 8003094:	0013      	movs	r3, r2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2203      	movs	r2, #3
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d123      	bne.n	80030f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	08da      	lsrs	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3208      	adds	r2, #8
 80030b6:	0092      	lsls	r2, r2, #2
 80030b8:	58d3      	ldr	r3, [r2, r3]
 80030ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2207      	movs	r2, #7
 80030c0:	4013      	ands	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	409a      	lsls	r2, r3
 80030c8:	0013      	movs	r3, r2
 80030ca:	43da      	mvns	r2, r3
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2107      	movs	r1, #7
 80030da:	400b      	ands	r3, r1
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	409a      	lsls	r2, r3
 80030e0:	0013      	movs	r3, r2
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	08da      	lsrs	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3208      	adds	r2, #8
 80030f0:	0092      	lsls	r2, r2, #2
 80030f2:	6939      	ldr	r1, [r7, #16]
 80030f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2203      	movs	r2, #3
 8003102:	409a      	lsls	r2, r3
 8003104:	0013      	movs	r3, r2
 8003106:	43da      	mvns	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2203      	movs	r2, #3
 8003114:	401a      	ands	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	409a      	lsls	r2, r3
 800311c:	0013      	movs	r3, r2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	23c0      	movs	r3, #192	; 0xc0
 8003130:	029b      	lsls	r3, r3, #10
 8003132:	4013      	ands	r3, r2
 8003134:	d100      	bne.n	8003138 <HAL_GPIO_Init+0x174>
 8003136:	e092      	b.n	800325e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003138:	4a50      	ldr	r2, [pc, #320]	; (800327c <HAL_GPIO_Init+0x2b8>)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	3318      	adds	r3, #24
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	589b      	ldr	r3, [r3, r2]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2203      	movs	r2, #3
 800314a:	4013      	ands	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	220f      	movs	r2, #15
 8003150:	409a      	lsls	r2, r3
 8003152:	0013      	movs	r3, r2
 8003154:	43da      	mvns	r2, r3
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	23a0      	movs	r3, #160	; 0xa0
 8003160:	05db      	lsls	r3, r3, #23
 8003162:	429a      	cmp	r2, r3
 8003164:	d013      	beq.n	800318e <HAL_GPIO_Init+0x1ca>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a45      	ldr	r2, [pc, #276]	; (8003280 <HAL_GPIO_Init+0x2bc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00d      	beq.n	800318a <HAL_GPIO_Init+0x1c6>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a44      	ldr	r2, [pc, #272]	; (8003284 <HAL_GPIO_Init+0x2c0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <HAL_GPIO_Init+0x1c2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a43      	ldr	r2, [pc, #268]	; (8003288 <HAL_GPIO_Init+0x2c4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <HAL_GPIO_Init+0x1be>
 800317e:	2303      	movs	r3, #3
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x1cc>
 8003182:	2305      	movs	r3, #5
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x1cc>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x1cc>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x1cc>
 800318e:	2300      	movs	r3, #0
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	2103      	movs	r1, #3
 8003194:	400a      	ands	r2, r1
 8003196:	00d2      	lsls	r2, r2, #3
 8003198:	4093      	lsls	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80031a0:	4936      	ldr	r1, [pc, #216]	; (800327c <HAL_GPIO_Init+0x2b8>)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3318      	adds	r3, #24
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ae:	4b33      	ldr	r3, [pc, #204]	; (800327c <HAL_GPIO_Init+0x2b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	035b      	lsls	r3, r3, #13
 80031c6:	4013      	ands	r3, r2
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031d2:	4b2a      	ldr	r3, [pc, #168]	; (800327c <HAL_GPIO_Init+0x2b8>)
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80031d8:	4b28      	ldr	r3, [pc, #160]	; (800327c <HAL_GPIO_Init+0x2b8>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43da      	mvns	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	2380      	movs	r3, #128	; 0x80
 80031ee:	039b      	lsls	r3, r3, #14
 80031f0:	4013      	ands	r3, r2
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <HAL_GPIO_Init+0x2b8>)
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_GPIO_Init+0x2b8>)
 8003204:	2384      	movs	r3, #132	; 0x84
 8003206:	58d3      	ldr	r3, [r2, r3]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	43da      	mvns	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	029b      	lsls	r3, r3, #10
 800321c:	4013      	ands	r3, r2
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003228:	4914      	ldr	r1, [pc, #80]	; (800327c <HAL_GPIO_Init+0x2b8>)
 800322a:	2284      	movs	r2, #132	; 0x84
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003230:	4a12      	ldr	r2, [pc, #72]	; (800327c <HAL_GPIO_Init+0x2b8>)
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	58d3      	ldr	r3, [r2, r3]
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	43da      	mvns	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	025b      	lsls	r3, r3, #9
 800324a:	4013      	ands	r3, r2
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003256:	4909      	ldr	r1, [pc, #36]	; (800327c <HAL_GPIO_Init+0x2b8>)
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	40da      	lsrs	r2, r3
 800326c:	1e13      	subs	r3, r2, #0
 800326e:	d000      	beq.n	8003272 <HAL_GPIO_Init+0x2ae>
 8003270:	e6b0      	b.n	8002fd4 <HAL_GPIO_Init+0x10>
  }
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b006      	add	sp, #24
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021800 	.word	0x40021800
 8003280:	50000400 	.word	0x50000400
 8003284:	50000800 	.word	0x50000800
 8003288:	50000c00 	.word	0x50000c00

0800328c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800329a:	e0b4      	b.n	8003406 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800329c:	2201      	movs	r2, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	409a      	lsls	r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d100      	bne.n	80032b0 <HAL_GPIO_DeInit+0x24>
 80032ae:	e0a7      	b.n	8003400 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80032b0:	4a5a      	ldr	r2, [pc, #360]	; (800341c <HAL_GPIO_DeInit+0x190>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3318      	adds	r3, #24
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	589b      	ldr	r3, [r3, r2]
 80032bc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2203      	movs	r2, #3
 80032c2:	4013      	ands	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	220f      	movs	r2, #15
 80032c8:	409a      	lsls	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	23a0      	movs	r3, #160	; 0xa0
 80032d4:	05db      	lsls	r3, r3, #23
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d013      	beq.n	8003302 <HAL_GPIO_DeInit+0x76>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a50      	ldr	r2, [pc, #320]	; (8003420 <HAL_GPIO_DeInit+0x194>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d00d      	beq.n	80032fe <HAL_GPIO_DeInit+0x72>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4f      	ldr	r2, [pc, #316]	; (8003424 <HAL_GPIO_DeInit+0x198>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d007      	beq.n	80032fa <HAL_GPIO_DeInit+0x6e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4e      	ldr	r2, [pc, #312]	; (8003428 <HAL_GPIO_DeInit+0x19c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_GPIO_DeInit+0x6a>
 80032f2:	2303      	movs	r3, #3
 80032f4:	e006      	b.n	8003304 <HAL_GPIO_DeInit+0x78>
 80032f6:	2305      	movs	r3, #5
 80032f8:	e004      	b.n	8003304 <HAL_GPIO_DeInit+0x78>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e002      	b.n	8003304 <HAL_GPIO_DeInit+0x78>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_GPIO_DeInit+0x78>
 8003302:	2300      	movs	r3, #0
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	2103      	movs	r1, #3
 8003308:	400a      	ands	r2, r1
 800330a:	00d2      	lsls	r2, r2, #3
 800330c:	4093      	lsls	r3, r2
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	429a      	cmp	r2, r3
 8003312:	d136      	bne.n	8003382 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003314:	4a41      	ldr	r2, [pc, #260]	; (800341c <HAL_GPIO_DeInit+0x190>)
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	58d3      	ldr	r3, [r2, r3]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	43d2      	mvns	r2, r2
 800331e:	493f      	ldr	r1, [pc, #252]	; (800341c <HAL_GPIO_DeInit+0x190>)
 8003320:	4013      	ands	r3, r2
 8003322:	2280      	movs	r2, #128	; 0x80
 8003324:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003326:	4a3d      	ldr	r2, [pc, #244]	; (800341c <HAL_GPIO_DeInit+0x190>)
 8003328:	2384      	movs	r3, #132	; 0x84
 800332a:	58d3      	ldr	r3, [r2, r3]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	43d2      	mvns	r2, r2
 8003330:	493a      	ldr	r1, [pc, #232]	; (800341c <HAL_GPIO_DeInit+0x190>)
 8003332:	4013      	ands	r3, r2
 8003334:	2284      	movs	r2, #132	; 0x84
 8003336:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003338:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_GPIO_DeInit+0x190>)
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	43d9      	mvns	r1, r3
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_GPIO_DeInit+0x190>)
 8003342:	400a      	ands	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003346:	4b35      	ldr	r3, [pc, #212]	; (800341c <HAL_GPIO_DeInit+0x190>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43d9      	mvns	r1, r3
 800334e:	4b33      	ldr	r3, [pc, #204]	; (800341c <HAL_GPIO_DeInit+0x190>)
 8003350:	400a      	ands	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2203      	movs	r2, #3
 8003358:	4013      	ands	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	220f      	movs	r2, #15
 800335e:	409a      	lsls	r2, r3
 8003360:	0013      	movs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003364:	4a2d      	ldr	r2, [pc, #180]	; (800341c <HAL_GPIO_DeInit+0x190>)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	3318      	adds	r3, #24
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	589a      	ldr	r2, [r3, r2]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43d9      	mvns	r1, r3
 8003374:	4829      	ldr	r0, [pc, #164]	; (800341c <HAL_GPIO_DeInit+0x190>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	400a      	ands	r2, r1
 800337c:	3318      	adds	r3, #24
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2103      	movs	r1, #3
 800338c:	4099      	lsls	r1, r3
 800338e:	000b      	movs	r3, r1
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	58d3      	ldr	r3, [r2, r3]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	2107      	movs	r1, #7
 80033a6:	400a      	ands	r2, r1
 80033a8:	0092      	lsls	r2, r2, #2
 80033aa:	210f      	movs	r1, #15
 80033ac:	4091      	lsls	r1, r2
 80033ae:	000a      	movs	r2, r1
 80033b0:	43d1      	mvns	r1, r2
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	08d2      	lsrs	r2, r2, #3
 80033b6:	4019      	ands	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3208      	adds	r2, #8
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	0052      	lsls	r2, r2, #1
 80033c8:	2103      	movs	r1, #3
 80033ca:	4091      	lsls	r1, r2
 80033cc:	000a      	movs	r2, r1
 80033ce:	43d2      	mvns	r2, r2
 80033d0:	401a      	ands	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2101      	movs	r1, #1
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4091      	lsls	r1, r2
 80033e0:	000a      	movs	r2, r1
 80033e2:	43d2      	mvns	r2, r2
 80033e4:	401a      	ands	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	0052      	lsls	r2, r2, #1
 80033f2:	2103      	movs	r1, #3
 80033f4:	4091      	lsls	r1, r2
 80033f6:	000a      	movs	r2, r1
 80033f8:	43d2      	mvns	r2, r2
 80033fa:	401a      	ands	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3301      	adds	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	40da      	lsrs	r2, r3
 800340c:	1e13      	subs	r3, r2, #0
 800340e:	d000      	beq.n	8003412 <HAL_GPIO_DeInit+0x186>
 8003410:	e744      	b.n	800329c <HAL_GPIO_DeInit+0x10>
  }
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46c0      	nop			; (mov r8, r8)
 8003416:	46bd      	mov	sp, r7
 8003418:	b006      	add	sp, #24
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021800 	.word	0x40021800
 8003420:	50000400 	.word	0x50000400
 8003424:	50000800 	.word	0x50000800
 8003428:	50000c00 	.word	0x50000c00

0800342c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	000a      	movs	r2, r1
 8003436:	1cbb      	adds	r3, r7, #2
 8003438:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	1cba      	adds	r2, r7, #2
 8003440:	8812      	ldrh	r2, [r2, #0]
 8003442:	4013      	ands	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003446:	230f      	movs	r3, #15
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e003      	b.n	8003458 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003450:	230f      	movs	r3, #15
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003458:	230f      	movs	r3, #15
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	0008      	movs	r0, r1
 8003470:	0011      	movs	r1, r2
 8003472:	1cbb      	adds	r3, r7, #2
 8003474:	1c02      	adds	r2, r0, #0
 8003476:	801a      	strh	r2, [r3, #0]
 8003478:	1c7b      	adds	r3, r7, #1
 800347a:	1c0a      	adds	r2, r1, #0
 800347c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800347e:	1c7b      	adds	r3, r7, #1
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003486:	1cbb      	adds	r3, r7, #2
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800348e:	e003      	b.n	8003498 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003490:	1cbb      	adds	r3, r7, #2
 8003492:	881a      	ldrh	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003498:	46c0      	nop			; (mov r8, r8)
 800349a:	46bd      	mov	sp, r7
 800349c:	b002      	add	sp, #8
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	000a      	movs	r2, r1
 80034aa:	1cbb      	adds	r3, r7, #2
 80034ac:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034b4:	1cbb      	adds	r3, r7, #2
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	041a      	lsls	r2, r3, #16
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	1cb9      	adds	r1, r7, #2
 80034c4:	8809      	ldrh	r1, [r1, #0]
 80034c6:	400b      	ands	r3, r1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	619a      	str	r2, [r3, #24]
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b004      	add	sp, #16
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08f      	b.n	800360a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2241      	movs	r2, #65	; 0x41
 80034ee:	5c9b      	ldrb	r3, [r3, r2]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	2100      	movs	r1, #0
 80034fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	0018      	movs	r0, r3
 8003502:	f7fe f9d5 	bl	80018b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2241      	movs	r2, #65	; 0x41
 800350a:	2124      	movs	r1, #36	; 0x24
 800350c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2101      	movs	r1, #1
 800351a:	438a      	bics	r2, r1
 800351c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	493b      	ldr	r1, [pc, #236]	; (8003614 <HAL_I2C_Init+0x13c>)
 8003528:	400a      	ands	r2, r1
 800352a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4938      	ldr	r1, [pc, #224]	; (8003618 <HAL_I2C_Init+0x140>)
 8003538:	400a      	ands	r2, r1
 800353a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d108      	bne.n	8003556 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2180      	movs	r1, #128	; 0x80
 800354e:	0209      	lsls	r1, r1, #8
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	e007      	b.n	8003566 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2184      	movs	r1, #132	; 0x84
 8003560:	0209      	lsls	r1, r1, #8
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d109      	bne.n	8003582 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	0109      	lsls	r1, r1, #4
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	e007      	b.n	8003592 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4923      	ldr	r1, [pc, #140]	; (800361c <HAL_I2C_Init+0x144>)
 800358e:	400a      	ands	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4920      	ldr	r1, [pc, #128]	; (8003620 <HAL_I2C_Init+0x148>)
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	491a      	ldr	r1, [pc, #104]	; (8003618 <HAL_I2C_Init+0x140>)
 80035ae:	400a      	ands	r2, r1
 80035b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69d9      	ldr	r1, [r3, #28]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2241      	movs	r2, #65	; 0x41
 80035f6:	2120      	movs	r1, #32
 80035f8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2242      	movs	r2, #66	; 0x42
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b002      	add	sp, #8
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	f0ffffff 	.word	0xf0ffffff
 8003618:	ffff7fff 	.word	0xffff7fff
 800361c:	fffff7ff 	.word	0xfffff7ff
 8003620:	02008000 	.word	0x02008000

08003624 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	0008      	movs	r0, r1
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	0019      	movs	r1, r3
 8003632:	230a      	movs	r3, #10
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	1c02      	adds	r2, r0, #0
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	2308      	movs	r3, #8
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	1c0a      	adds	r2, r1, #0
 8003640:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2241      	movs	r2, #65	; 0x41
 8003646:	5c9b      	ldrb	r3, [r3, r2]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b20      	cmp	r3, #32
 800364c:	d000      	beq.n	8003650 <HAL_I2C_Master_Transmit+0x2c>
 800364e:	e10a      	b.n	8003866 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2240      	movs	r2, #64	; 0x40
 8003654:	5c9b      	ldrb	r3, [r3, r2]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_I2C_Master_Transmit+0x3a>
 800365a:	2302      	movs	r3, #2
 800365c:	e104      	b.n	8003868 <HAL_I2C_Master_Transmit+0x244>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003666:	f7fe fc39 	bl	8001edc <HAL_GetTick>
 800366a:	0003      	movs	r3, r0
 800366c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	0219      	lsls	r1, r3, #8
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2319      	movs	r3, #25
 800367a:	2201      	movs	r2, #1
 800367c:	f000 f91e 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0ef      	b.n	8003868 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2241      	movs	r2, #65	; 0x41
 800368c:	2121      	movs	r1, #33	; 0x21
 800368e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2242      	movs	r2, #66	; 0x42
 8003694:	2110      	movs	r1, #16
 8003696:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2208      	movs	r2, #8
 80036a8:	18ba      	adds	r2, r7, r2
 80036aa:	8812      	ldrh	r2, [r2, #0]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2bff      	cmp	r3, #255	; 0xff
 80036bc:	d906      	bls.n	80036cc <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	22ff      	movs	r2, #255	; 0xff
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	045b      	lsls	r3, r3, #17
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e007      	b.n	80036dc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	049b      	lsls	r3, r3, #18
 80036da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d027      	beq.n	8003734 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	b2db      	uxtb	r3, r3
 800371a:	3301      	adds	r3, #1
 800371c:	b2da      	uxtb	r2, r3
 800371e:	697c      	ldr	r4, [r7, #20]
 8003720:	230a      	movs	r3, #10
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	8819      	ldrh	r1, [r3, #0]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	4b51      	ldr	r3, [pc, #324]	; (8003870 <HAL_I2C_Master_Transmit+0x24c>)
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	0023      	movs	r3, r4
 800372e:	f000 faa7 	bl	8003c80 <I2C_TransferConfig>
 8003732:	e06f      	b.n	8003814 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	b2da      	uxtb	r2, r3
 800373a:	697c      	ldr	r4, [r7, #20]
 800373c:	230a      	movs	r3, #10
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	8819      	ldrh	r1, [r3, #0]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_I2C_Master_Transmit+0x24c>)
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	0023      	movs	r3, r4
 800374a:	f000 fa99 	bl	8003c80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800374e:	e061      	b.n	8003814 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	0018      	movs	r0, r3
 8003758:	f000 f908 	bl	800396c <I2C_WaitOnTXISFlagUntilTimeout>
 800375c:	1e03      	subs	r3, r0, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e081      	b.n	8003868 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d03a      	beq.n	8003814 <HAL_I2C_Master_Transmit+0x1f0>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d136      	bne.n	8003814 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	0013      	movs	r3, r2
 80037b0:	2200      	movs	r2, #0
 80037b2:	2180      	movs	r1, #128	; 0x80
 80037b4:	f000 f882 	bl	80038bc <I2C_WaitOnFlagUntilTimeout>
 80037b8:	1e03      	subs	r3, r0, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e053      	b.n	8003868 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2bff      	cmp	r3, #255	; 0xff
 80037c8:	d911      	bls.n	80037ee <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	045c      	lsls	r4, r3, #17
 80037da:	230a      	movs	r3, #10
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	8819      	ldrh	r1, [r3, #0]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	2300      	movs	r3, #0
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	0023      	movs	r3, r4
 80037e8:	f000 fa4a 	bl	8003c80 <I2C_TransferConfig>
 80037ec:	e012      	b.n	8003814 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	049c      	lsls	r4, r3, #18
 8003802:	230a      	movs	r3, #10
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	8819      	ldrh	r1, [r3, #0]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	0023      	movs	r3, r4
 8003810:	f000 fa36 	bl	8003c80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d198      	bne.n	8003750 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	0018      	movs	r0, r3
 8003826:	f000 f8e7 	bl	80039f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e01a      	b.n	8003868 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2220      	movs	r2, #32
 8003838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	490b      	ldr	r1, [pc, #44]	; (8003874 <HAL_I2C_Master_Transmit+0x250>)
 8003846:	400a      	ands	r2, r1
 8003848:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2241      	movs	r2, #65	; 0x41
 800384e:	2120      	movs	r1, #32
 8003850:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2242      	movs	r2, #66	; 0x42
 8003856:	2100      	movs	r1, #0
 8003858:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2240      	movs	r2, #64	; 0x40
 800385e:	2100      	movs	r1, #0
 8003860:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b007      	add	sp, #28
 800386e:	bd90      	pop	{r4, r7, pc}
 8003870:	80002000 	.word	0x80002000
 8003874:	fe00e800 	.word	0xfe00e800

08003878 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2202      	movs	r2, #2
 8003888:	4013      	ands	r3, r2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d103      	bne.n	8003896 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2200      	movs	r2, #0
 8003894:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2201      	movs	r2, #1
 800389e:	4013      	ands	r3, r2
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d007      	beq.n	80038b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	430a      	orrs	r2, r1
 80038b2:	619a      	str	r2, [r3, #24]
  }
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b002      	add	sp, #8
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	1dfb      	adds	r3, r7, #7
 80038ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038cc:	e03a      	b.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	6839      	ldr	r1, [r7, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f8d3 	bl	8003a80 <I2C_IsErrorOccurred>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e040      	b.n	8003964 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	d02d      	beq.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e8:	f7fe faf8 	bl	8001edc <HAL_GetTick>
 80038ec:	0002      	movs	r2, r0
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d302      	bcc.n	80038fe <I2C_WaitOnFlagUntilTimeout+0x42>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d122      	bne.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	4013      	ands	r3, r2
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	425a      	negs	r2, r3
 800390e:	4153      	adcs	r3, r2
 8003910:	b2db      	uxtb	r3, r3
 8003912:	001a      	movs	r2, r3
 8003914:	1dfb      	adds	r3, r7, #7
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d113      	bne.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	2220      	movs	r2, #32
 8003922:	431a      	orrs	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2241      	movs	r2, #65	; 0x41
 800392c:	2120      	movs	r1, #32
 800392e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2242      	movs	r2, #66	; 0x42
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	2100      	movs	r1, #0
 800393e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e00f      	b.n	8003964 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	425a      	negs	r2, r3
 8003954:	4153      	adcs	r3, r2
 8003956:	b2db      	uxtb	r3, r3
 8003958:	001a      	movs	r2, r3
 800395a:	1dfb      	adds	r3, r7, #7
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d0b5      	beq.n	80038ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b004      	add	sp, #16
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003978:	e032      	b.n	80039e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0018      	movs	r0, r3
 8003982:	f000 f87d 	bl	8003a80 <I2C_IsErrorOccurred>
 8003986:	1e03      	subs	r3, r0, #0
 8003988:	d001      	beq.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e030      	b.n	80039f0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3301      	adds	r3, #1
 8003992:	d025      	beq.n	80039e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003994:	f7fe faa2 	bl	8001edc <HAL_GetTick>
 8003998:	0002      	movs	r2, r0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11a      	bne.n	80039e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2202      	movs	r2, #2
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d013      	beq.n	80039e0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	2220      	movs	r2, #32
 80039be:	431a      	orrs	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2241      	movs	r2, #65	; 0x41
 80039c8:	2120      	movs	r1, #32
 80039ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2242      	movs	r2, #66	; 0x42
 80039d0:	2100      	movs	r1, #0
 80039d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	2100      	movs	r1, #0
 80039da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e007      	b.n	80039f0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2202      	movs	r2, #2
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d1c5      	bne.n	800397a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a04:	e02f      	b.n	8003a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 f837 	bl	8003a80 <I2C_IsErrorOccurred>
 8003a12:	1e03      	subs	r3, r0, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e02d      	b.n	8003a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a1a:	f7fe fa5f 	bl	8001edc <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d11a      	bne.n	8003a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2220      	movs	r2, #32
 8003a38:	4013      	ands	r3, r2
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d013      	beq.n	8003a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	2220      	movs	r2, #32
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2241      	movs	r2, #65	; 0x41
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2242      	movs	r2, #66	; 0x42
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2240      	movs	r2, #64	; 0x40
 8003a5e:	2100      	movs	r1, #0
 8003a60:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e007      	b.n	8003a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d1c8      	bne.n	8003a06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	0018      	movs	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b004      	add	sp, #16
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b08b      	sub	sp, #44	; 0x2c
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8c:	2327      	movs	r3, #39	; 0x27
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d100      	bne.n	8003aae <I2C_IsErrorOccurred+0x2e>
 8003aac:	e082      	b.n	8003bb4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ab6:	e060      	b.n	8003b7a <I2C_IsErrorOccurred+0xfa>
 8003ab8:	2427      	movs	r4, #39	; 0x27
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	193a      	adds	r2, r7, r4
 8003abe:	7812      	ldrb	r2, [r2, #0]
 8003ac0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	d058      	beq.n	8003b7a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ac8:	f7fe fa08 	bl	8001edc <HAL_GetTick>
 8003acc:	0002      	movs	r2, r0
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d306      	bcc.n	8003ae6 <I2C_IsErrorOccurred+0x66>
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	193a      	adds	r2, r7, r4
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d149      	bne.n	8003b7a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	01db      	lsls	r3, r3, #7
 8003af0:	4013      	ands	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003af4:	2013      	movs	r0, #19
 8003af6:	183b      	adds	r3, r7, r0
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	2142      	movs	r1, #66	; 0x42
 8003afc:	5c52      	ldrb	r2, [r2, r1]
 8003afe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	2380      	movs	r3, #128	; 0x80
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d126      	bne.n	8003b62 <I2C_IsErrorOccurred+0xe2>
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	01db      	lsls	r3, r3, #7
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d021      	beq.n	8003b62 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003b1e:	183b      	adds	r3, r7, r0
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d01d      	beq.n	8003b62 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	01c9      	lsls	r1, r1, #7
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b38:	f7fe f9d0 	bl	8001edc <HAL_GetTick>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b40:	e00f      	b.n	8003b62 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b42:	f7fe f9cb 	bl	8001edc <HAL_GetTick>
 8003b46:	0002      	movs	r2, r0
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b19      	cmp	r3, #25
 8003b4e:	d908      	bls.n	8003b62 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	2220      	movs	r2, #32
 8003b54:	4313      	orrs	r3, r2
 8003b56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b58:	2327      	movs	r3, #39	; 0x27
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]

              break;
 8003b60:	e00b      	b.n	8003b7a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2127      	movs	r1, #39	; 0x27
 8003b6e:	187a      	adds	r2, r7, r1
 8003b70:	1879      	adds	r1, r7, r1
 8003b72:	7809      	ldrb	r1, [r1, #0]
 8003b74:	7011      	strb	r1, [r2, #0]
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d1e3      	bne.n	8003b42 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2220      	movs	r2, #32
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d004      	beq.n	8003b92 <I2C_IsErrorOccurred+0x112>
 8003b88:	2327      	movs	r3, #39	; 0x27
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d092      	beq.n	8003ab8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b92:	2327      	movs	r3, #39	; 0x27
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003bac:	2327      	movs	r3, #39	; 0x27
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d00c      	beq.n	8003be0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2280      	movs	r2, #128	; 0x80
 8003bd4:	0052      	lsls	r2, r2, #1
 8003bd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bd8:	2327      	movs	r3, #39	; 0x27
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4013      	ands	r3, r2
 8003be8:	d00c      	beq.n	8003c04 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2208      	movs	r2, #8
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	00d2      	lsls	r2, r2, #3
 8003bfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bfc:	2327      	movs	r3, #39	; 0x27
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2201      	movs	r2, #1
 8003c02:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d00c      	beq.n	8003c28 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	2202      	movs	r2, #2
 8003c12:	4313      	orrs	r3, r2
 8003c14:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	0092      	lsls	r2, r2, #2
 8003c1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c20:	2327      	movs	r3, #39	; 0x27
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003c28:	2327      	movs	r3, #39	; 0x27
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01d      	beq.n	8003c6e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7ff fe1f 	bl	8003878 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	490d      	ldr	r1, [pc, #52]	; (8003c7c <I2C_IsErrorOccurred+0x1fc>)
 8003c46:	400a      	ands	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2241      	movs	r2, #65	; 0x41
 8003c5a:	2120      	movs	r1, #32
 8003c5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2242      	movs	r2, #66	; 0x42
 8003c62:	2100      	movs	r1, #0
 8003c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2240      	movs	r2, #64	; 0x40
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003c6e:	2327      	movs	r3, #39	; 0x27
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b00b      	add	sp, #44	; 0x2c
 8003c7a:	bd90      	pop	{r4, r7, pc}
 8003c7c:	fe00e800 	.word	0xfe00e800

08003c80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	0008      	movs	r0, r1
 8003c8a:	0011      	movs	r1, r2
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	240a      	movs	r4, #10
 8003c90:	193b      	adds	r3, r7, r4
 8003c92:	1c02      	adds	r2, r0, #0
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	2009      	movs	r0, #9
 8003c98:	183b      	adds	r3, r7, r0
 8003c9a:	1c0a      	adds	r2, r1, #0
 8003c9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c9e:	193b      	adds	r3, r7, r4
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	059b      	lsls	r3, r3, #22
 8003ca4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ca6:	183b      	adds	r3, r7, r0
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	0419      	lsls	r1, r3, #16
 8003cac:	23ff      	movs	r3, #255	; 0xff
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cb2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cca:	0d51      	lsrs	r1, r2, #21
 8003ccc:	2280      	movs	r2, #128	; 0x80
 8003cce:	00d2      	lsls	r2, r2, #3
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	4907      	ldr	r1, [pc, #28]	; (8003cf0 <I2C_TransferConfig+0x70>)
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	43d2      	mvns	r2, r2
 8003cd8:	401a      	ands	r2, r3
 8003cda:	0011      	movs	r1, r2
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b007      	add	sp, #28
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	03ff63ff 	.word	0x03ff63ff

08003cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2241      	movs	r2, #65	; 0x41
 8003d02:	5c9b      	ldrb	r3, [r3, r2]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d138      	bne.n	8003d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	5c9b      	ldrb	r3, [r3, r2]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e032      	b.n	8003d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2240      	movs	r2, #64	; 0x40
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2241      	movs	r2, #65	; 0x41
 8003d24:	2124      	movs	r1, #36	; 0x24
 8003d26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2101      	movs	r1, #1
 8003d34:	438a      	bics	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4911      	ldr	r1, [pc, #68]	; (8003d88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d44:	400a      	ands	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	430a      	orrs	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2241      	movs	r2, #65	; 0x41
 8003d6c:	2120      	movs	r1, #32
 8003d6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	2100      	movs	r1, #0
 8003d76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e000      	b.n	8003d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
  }
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b002      	add	sp, #8
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	ffffefff 	.word	0xffffefff

08003d8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2241      	movs	r2, #65	; 0x41
 8003d9a:	5c9b      	ldrb	r3, [r3, r2]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d139      	bne.n	8003e16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2240      	movs	r2, #64	; 0x40
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e033      	b.n	8003e18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2240      	movs	r2, #64	; 0x40
 8003db4:	2101      	movs	r1, #1
 8003db6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2241      	movs	r2, #65	; 0x41
 8003dbc:	2124      	movs	r1, #36	; 0x24
 8003dbe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2101      	movs	r1, #1
 8003dcc:	438a      	bics	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2241      	movs	r2, #65	; 0x41
 8003e06:	2120      	movs	r1, #32
 8003e08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
  }
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	fffff0ff 	.word	0xfffff0ff

08003e24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d11f      	bne.n	8003e88 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	0013      	movs	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	189b      	adds	r3, r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4912      	ldr	r1, [pc, #72]	; (8003ea0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fc f970 	bl	800013c <__udivsi3>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e62:	e008      	b.n	8003e76 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e001      	b.n	8003e76 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e009      	b.n	8003e8a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	401a      	ands	r2, r3
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d0ed      	beq.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	40007000 	.word	0x40007000
 8003e98:	fffff9ff 	.word	0xfffff9ff
 8003e9c:	20000010 	.word	0x20000010
 8003ea0:	000f4240 	.word	0x000f4240

08003ea4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	23e0      	movs	r3, #224	; 0xe0
 8003eae:	01db      	lsls	r3, r3, #7
 8003eb0:	4013      	ands	r3, r2
}
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021000 	.word	0x40021000

08003ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e2fe      	b.n	80044cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d100      	bne.n	8003eda <HAL_RCC_OscConfig+0x1e>
 8003ed8:	e07c      	b.n	8003fd4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eda:	4bc3      	ldr	r3, [pc, #780]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2238      	movs	r2, #56	; 0x38
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee4:	4bc0      	ldr	r3, [pc, #768]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2203      	movs	r2, #3
 8003eea:	4013      	ands	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d102      	bne.n	8003efa <HAL_RCC_OscConfig+0x3e>
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d002      	beq.n	8003f00 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d10b      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f00:	4bb9      	ldr	r3, [pc, #740]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	029b      	lsls	r3, r3, #10
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d062      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x116>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d15e      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e2d9      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	025b      	lsls	r3, r3, #9
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d107      	bne.n	8003f34 <HAL_RCC_OscConfig+0x78>
 8003f24:	4bb0      	ldr	r3, [pc, #704]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4baf      	ldr	r3, [pc, #700]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	0249      	lsls	r1, r1, #9
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e020      	b.n	8003f76 <HAL_RCC_OscConfig+0xba>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	23a0      	movs	r3, #160	; 0xa0
 8003f3a:	02db      	lsls	r3, r3, #11
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d10e      	bne.n	8003f5e <HAL_RCC_OscConfig+0xa2>
 8003f40:	4ba9      	ldr	r3, [pc, #676]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4ba8      	ldr	r3, [pc, #672]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f46:	2180      	movs	r1, #128	; 0x80
 8003f48:	02c9      	lsls	r1, r1, #11
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	4ba6      	ldr	r3, [pc, #664]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4ba5      	ldr	r3, [pc, #660]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	0249      	lsls	r1, r1, #9
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e00b      	b.n	8003f76 <HAL_RCC_OscConfig+0xba>
 8003f5e:	4ba2      	ldr	r3, [pc, #648]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	4ba1      	ldr	r3, [pc, #644]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f64:	49a1      	ldr	r1, [pc, #644]	; (80041ec <HAL_RCC_OscConfig+0x330>)
 8003f66:	400a      	ands	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	4b9f      	ldr	r3, [pc, #636]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b9e      	ldr	r3, [pc, #632]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f70:	499f      	ldr	r1, [pc, #636]	; (80041f0 <HAL_RCC_OscConfig+0x334>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fd ffad 	bl	8001edc <HAL_GetTick>
 8003f82:	0003      	movs	r3, r0
 8003f84:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fd ffa8 	bl	8001edc <HAL_GetTick>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e298      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9a:	4b93      	ldr	r3, [pc, #588]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	029b      	lsls	r3, r3, #10
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xcc>
 8003fa6:	e015      	b.n	8003fd4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd ff98 	bl	8001edc <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fb0:	e008      	b.n	8003fc4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb2:	f7fd ff93 	bl	8001edc <HAL_GetTick>
 8003fb6:	0002      	movs	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b64      	cmp	r3, #100	; 0x64
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e283      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fc4:	4b88      	ldr	r3, [pc, #544]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	029b      	lsls	r3, r3, #10
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d1f0      	bne.n	8003fb2 <HAL_RCC_OscConfig+0xf6>
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d100      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x124>
 8003fde:	e099      	b.n	8004114 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe0:	4b81      	ldr	r3, [pc, #516]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2238      	movs	r2, #56	; 0x38
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fea:	4b7f      	ldr	r3, [pc, #508]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2203      	movs	r2, #3
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d102      	bne.n	8004000 <HAL_RCC_OscConfig+0x144>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d002      	beq.n	8004006 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d135      	bne.n	8004072 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004006:	4b78      	ldr	r3, [pc, #480]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4013      	ands	r3, r2
 8004010:	d005      	beq.n	800401e <HAL_RCC_OscConfig+0x162>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e256      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4a74      	ldr	r2, [pc, #464]	; (80041f4 <HAL_RCC_OscConfig+0x338>)
 8004024:	4013      	ands	r3, r2
 8004026:	0019      	movs	r1, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	021a      	lsls	r2, r3, #8
 800402e:	4b6e      	ldr	r3, [pc, #440]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d112      	bne.n	8004060 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800403a:	4b6b      	ldr	r3, [pc, #428]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a6e      	ldr	r2, [pc, #440]	; (80041f8 <HAL_RCC_OscConfig+0x33c>)
 8004040:	4013      	ands	r3, r2
 8004042:	0019      	movs	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	4b67      	ldr	r3, [pc, #412]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 800404a:	430a      	orrs	r2, r1
 800404c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800404e:	4b66      	ldr	r3, [pc, #408]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	0adb      	lsrs	r3, r3, #11
 8004054:	2207      	movs	r2, #7
 8004056:	4013      	ands	r3, r2
 8004058:	4a68      	ldr	r2, [pc, #416]	; (80041fc <HAL_RCC_OscConfig+0x340>)
 800405a:	40da      	lsrs	r2, r3
 800405c:	4b68      	ldr	r3, [pc, #416]	; (8004200 <HAL_RCC_OscConfig+0x344>)
 800405e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004060:	4b68      	ldr	r3, [pc, #416]	; (8004204 <HAL_RCC_OscConfig+0x348>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0018      	movs	r0, r3
 8004066:	f7fd fedd 	bl	8001e24 <HAL_InitTick>
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d051      	beq.n	8004112 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e22c      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d030      	beq.n	80040dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800407a:	4b5b      	ldr	r3, [pc, #364]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a5e      	ldr	r2, [pc, #376]	; (80041f8 <HAL_RCC_OscConfig+0x33c>)
 8004080:	4013      	ands	r3, r2
 8004082:	0019      	movs	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	4b57      	ldr	r3, [pc, #348]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800408e:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b55      	ldr	r3, [pc, #340]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	0049      	lsls	r1, r1, #1
 8004098:	430a      	orrs	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd ff1e 	bl	8001edc <HAL_GetTick>
 80040a0:	0003      	movs	r3, r0
 80040a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a6:	f7fd ff19 	bl	8001edc <HAL_GetTick>
 80040aa:	0002      	movs	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e209      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b8:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4013      	ands	r3, r2
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c4:	4b48      	ldr	r3, [pc, #288]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a4a      	ldr	r2, [pc, #296]	; (80041f4 <HAL_RCC_OscConfig+0x338>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	4b44      	ldr	r3, [pc, #272]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	e01b      	b.n	8004114 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80040dc:	4b42      	ldr	r3, [pc, #264]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b41      	ldr	r3, [pc, #260]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 80040e2:	4949      	ldr	r1, [pc, #292]	; (8004208 <HAL_RCC_OscConfig+0x34c>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd fef8 	bl	8001edc <HAL_GetTick>
 80040ec:	0003      	movs	r3, r0
 80040ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fd fef3 	bl	8001edc <HAL_GetTick>
 80040f6:	0002      	movs	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e1e3      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004104:	4b38      	ldr	r3, [pc, #224]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4013      	ands	r3, r2
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x236>
 8004110:	e000      	b.n	8004114 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004112:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2208      	movs	r2, #8
 800411a:	4013      	ands	r3, r2
 800411c:	d047      	beq.n	80041ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800411e:	4b32      	ldr	r3, [pc, #200]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2238      	movs	r2, #56	; 0x38
 8004124:	4013      	ands	r3, r2
 8004126:	2b18      	cmp	r3, #24
 8004128:	d10a      	bne.n	8004140 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800412a:	4b2f      	ldr	r3, [pc, #188]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 800412c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412e:	2202      	movs	r2, #2
 8004130:	4013      	ands	r3, r2
 8004132:	d03c      	beq.n	80041ae <HAL_RCC_OscConfig+0x2f2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d138      	bne.n	80041ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e1c5      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d019      	beq.n	800417c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 800414a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800414c:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 800414e:	2101      	movs	r1, #1
 8004150:	430a      	orrs	r2, r1
 8004152:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd fec2 	bl	8001edc <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415e:	f7fd febd 	bl	8001edc <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1ad      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004170:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004174:	2202      	movs	r2, #2
 8004176:	4013      	ands	r3, r2
 8004178:	d0f1      	beq.n	800415e <HAL_RCC_OscConfig+0x2a2>
 800417a:	e018      	b.n	80041ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 800417e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 8004182:	2101      	movs	r1, #1
 8004184:	438a      	bics	r2, r1
 8004186:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fd fea8 	bl	8001edc <HAL_GetTick>
 800418c:	0003      	movs	r3, r0
 800418e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7fd fea3 	bl	8001edc <HAL_GetTick>
 8004196:	0002      	movs	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e193      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 80041a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a8:	2202      	movs	r2, #2
 80041aa:	4013      	ands	r3, r2
 80041ac:	d1f1      	bne.n	8004192 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2204      	movs	r2, #4
 80041b4:	4013      	ands	r3, r2
 80041b6:	d100      	bne.n	80041ba <HAL_RCC_OscConfig+0x2fe>
 80041b8:	e0c6      	b.n	8004348 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	231f      	movs	r3, #31
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2238      	movs	r2, #56	; 0x38
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d11e      	bne.n	800420c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_RCC_OscConfig+0x32c>)
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	2202      	movs	r2, #2
 80041d4:	4013      	ands	r3, r2
 80041d6:	d100      	bne.n	80041da <HAL_RCC_OscConfig+0x31e>
 80041d8:	e0b6      	b.n	8004348 <HAL_RCC_OscConfig+0x48c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d000      	beq.n	80041e4 <HAL_RCC_OscConfig+0x328>
 80041e2:	e0b1      	b.n	8004348 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e171      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
 80041e8:	40021000 	.word	0x40021000
 80041ec:	fffeffff 	.word	0xfffeffff
 80041f0:	fffbffff 	.word	0xfffbffff
 80041f4:	ffff80ff 	.word	0xffff80ff
 80041f8:	ffffc7ff 	.word	0xffffc7ff
 80041fc:	00f42400 	.word	0x00f42400
 8004200:	20000010 	.word	0x20000010
 8004204:	20000014 	.word	0x20000014
 8004208:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800420c:	4bb1      	ldr	r3, [pc, #708]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 800420e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	055b      	lsls	r3, r3, #21
 8004214:	4013      	ands	r3, r2
 8004216:	d101      	bne.n	800421c <HAL_RCC_OscConfig+0x360>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x362>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d011      	beq.n	8004246 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	4bac      	ldr	r3, [pc, #688]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004226:	4bab      	ldr	r3, [pc, #684]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	0549      	lsls	r1, r1, #21
 800422c:	430a      	orrs	r2, r1
 800422e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004230:	4ba8      	ldr	r3, [pc, #672]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	055b      	lsls	r3, r3, #21
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800423e:	231f      	movs	r3, #31
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	2201      	movs	r2, #1
 8004244:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004246:	4ba4      	ldr	r3, [pc, #656]	; (80044d8 <HAL_RCC_OscConfig+0x61c>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4013      	ands	r3, r2
 8004250:	d11a      	bne.n	8004288 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004252:	4ba1      	ldr	r3, [pc, #644]	; (80044d8 <HAL_RCC_OscConfig+0x61c>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4ba0      	ldr	r3, [pc, #640]	; (80044d8 <HAL_RCC_OscConfig+0x61c>)
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	0049      	lsls	r1, r1, #1
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004260:	f7fd fe3c 	bl	8001edc <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7fd fe37 	bl	8001edc <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e127      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427c:	4b96      	ldr	r3, [pc, #600]	; (80044d8 <HAL_RCC_OscConfig+0x61c>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4013      	ands	r3, r2
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x3e2>
 8004290:	4b90      	ldr	r3, [pc, #576]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004294:	4b8f      	ldr	r3, [pc, #572]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004296:	2101      	movs	r1, #1
 8004298:	430a      	orrs	r2, r1
 800429a:	65da      	str	r2, [r3, #92]	; 0x5c
 800429c:	e01c      	b.n	80042d8 <HAL_RCC_OscConfig+0x41c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x404>
 80042a6:	4b8b      	ldr	r3, [pc, #556]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80042a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042aa:	4b8a      	ldr	r3, [pc, #552]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80042ac:	2104      	movs	r1, #4
 80042ae:	430a      	orrs	r2, r1
 80042b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80042b2:	4b88      	ldr	r3, [pc, #544]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80042b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042b6:	4b87      	ldr	r3, [pc, #540]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80042b8:	2101      	movs	r1, #1
 80042ba:	430a      	orrs	r2, r1
 80042bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0x41c>
 80042c0:	4b84      	ldr	r3, [pc, #528]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80042c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042c4:	4b83      	ldr	r3, [pc, #524]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80042c6:	2101      	movs	r1, #1
 80042c8:	438a      	bics	r2, r1
 80042ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80042cc:	4b81      	ldr	r3, [pc, #516]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80042ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042d0:	4b80      	ldr	r3, [pc, #512]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80042d2:	2104      	movs	r1, #4
 80042d4:	438a      	bics	r2, r1
 80042d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d014      	beq.n	800430a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fd fdfc 	bl	8001edc <HAL_GetTick>
 80042e4:	0003      	movs	r3, r0
 80042e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e8:	e009      	b.n	80042fe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fd fdf7 	bl	8001edc <HAL_GetTick>
 80042ee:	0002      	movs	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	4a79      	ldr	r2, [pc, #484]	; (80044dc <HAL_RCC_OscConfig+0x620>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e0e6      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fe:	4b75      	ldr	r3, [pc, #468]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	2202      	movs	r2, #2
 8004304:	4013      	ands	r3, r2
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x42e>
 8004308:	e013      	b.n	8004332 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fd fde7 	bl	8001edc <HAL_GetTick>
 800430e:	0003      	movs	r3, r0
 8004310:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004312:	e009      	b.n	8004328 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004314:	f7fd fde2 	bl	8001edc <HAL_GetTick>
 8004318:	0002      	movs	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	4a6f      	ldr	r2, [pc, #444]	; (80044dc <HAL_RCC_OscConfig+0x620>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e0d1      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004328:	4b6a      	ldr	r3, [pc, #424]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 800432a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432c:	2202      	movs	r2, #2
 800432e:	4013      	ands	r3, r2
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004332:	231f      	movs	r3, #31
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800433c:	4b65      	ldr	r3, [pc, #404]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 800433e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004340:	4b64      	ldr	r3, [pc, #400]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004342:	4967      	ldr	r1, [pc, #412]	; (80044e0 <HAL_RCC_OscConfig+0x624>)
 8004344:	400a      	ands	r2, r1
 8004346:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d100      	bne.n	8004352 <HAL_RCC_OscConfig+0x496>
 8004350:	e0bb      	b.n	80044ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004352:	4b60      	ldr	r3, [pc, #384]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2238      	movs	r2, #56	; 0x38
 8004358:	4013      	ands	r3, r2
 800435a:	2b10      	cmp	r3, #16
 800435c:	d100      	bne.n	8004360 <HAL_RCC_OscConfig+0x4a4>
 800435e:	e07b      	b.n	8004458 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d156      	bne.n	8004416 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004368:	4b5a      	ldr	r3, [pc, #360]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 800436e:	495d      	ldr	r1, [pc, #372]	; (80044e4 <HAL_RCC_OscConfig+0x628>)
 8004370:	400a      	ands	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd fdb2 	bl	8001edc <HAL_GetTick>
 8004378:	0003      	movs	r3, r0
 800437a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437e:	f7fd fdad 	bl	8001edc <HAL_GetTick>
 8004382:	0002      	movs	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e09d      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	049b      	lsls	r3, r3, #18
 8004398:	4013      	ands	r3, r2
 800439a:	d1f0      	bne.n	800437e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800439c:	4b4d      	ldr	r3, [pc, #308]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a51      	ldr	r2, [pc, #324]	; (80044e8 <HAL_RCC_OscConfig+0x62c>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	431a      	orrs	r2, r3
 80043ca:	4b42      	ldr	r3, [pc, #264]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d0:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	0449      	lsls	r1, r1, #17
 80043da:	430a      	orrs	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80043de:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	4b3c      	ldr	r3, [pc, #240]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 80043e4:	2180      	movs	r1, #128	; 0x80
 80043e6:	0549      	lsls	r1, r1, #21
 80043e8:	430a      	orrs	r2, r1
 80043ea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd fd76 	bl	8001edc <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f6:	f7fd fd71 	bl	8001edc <HAL_GetTick>
 80043fa:	0002      	movs	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e061      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004408:	4b32      	ldr	r3, [pc, #200]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	049b      	lsls	r3, r3, #18
 8004410:	4013      	ands	r3, r2
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x53a>
 8004414:	e059      	b.n	80044ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004416:	4b2f      	ldr	r3, [pc, #188]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 800441c:	4931      	ldr	r1, [pc, #196]	; (80044e4 <HAL_RCC_OscConfig+0x628>)
 800441e:	400a      	ands	r2, r1
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fd fd5b 	bl	8001edc <HAL_GetTick>
 8004426:	0003      	movs	r3, r0
 8004428:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442c:	f7fd fd56 	bl	8001edc <HAL_GetTick>
 8004430:	0002      	movs	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e046      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443e:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	049b      	lsls	r3, r3, #18
 8004446:	4013      	ands	r3, r2
 8004448:	d1f0      	bne.n	800442c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800444a:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004450:	4926      	ldr	r1, [pc, #152]	; (80044ec <HAL_RCC_OscConfig+0x630>)
 8004452:	400a      	ands	r2, r1
 8004454:	60da      	str	r2, [r3, #12]
 8004456:	e038      	b.n	80044ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e033      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_RCC_OscConfig+0x618>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2203      	movs	r2, #3
 800446e:	401a      	ands	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	429a      	cmp	r2, r3
 8004476:	d126      	bne.n	80044c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2270      	movs	r2, #112	; 0x70
 800447c:	401a      	ands	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d11f      	bne.n	80044c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	23fe      	movs	r3, #254	; 0xfe
 800448a:	01db      	lsls	r3, r3, #7
 800448c:	401a      	ands	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d116      	bne.n	80044c6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	23f8      	movs	r3, #248	; 0xf8
 800449c:	039b      	lsls	r3, r3, #14
 800449e:	401a      	ands	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d10e      	bne.n	80044c6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	23e0      	movs	r3, #224	; 0xe0
 80044ac:	051b      	lsls	r3, r3, #20
 80044ae:	401a      	ands	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d106      	bne.n	80044c6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	0f5b      	lsrs	r3, r3, #29
 80044bc:	075a      	lsls	r2, r3, #29
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d001      	beq.n	80044ca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	0018      	movs	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	b008      	add	sp, #32
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40021000 	.word	0x40021000
 80044d8:	40007000 	.word	0x40007000
 80044dc:	00001388 	.word	0x00001388
 80044e0:	efffffff 	.word	0xefffffff
 80044e4:	feffffff 	.word	0xfeffffff
 80044e8:	11c1808c 	.word	0x11c1808c
 80044ec:	eefefffc 	.word	0xeefefffc

080044f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0e9      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004504:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2207      	movs	r2, #7
 800450a:	4013      	ands	r3, r2
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d91e      	bls.n	8004550 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b73      	ldr	r3, [pc, #460]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2207      	movs	r2, #7
 8004518:	4393      	bics	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	4b70      	ldr	r3, [pc, #448]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004524:	f7fd fcda 	bl	8001edc <HAL_GetTick>
 8004528:	0003      	movs	r3, r0
 800452a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800452c:	e009      	b.n	8004542 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452e:	f7fd fcd5 	bl	8001edc <HAL_GetTick>
 8004532:	0002      	movs	r2, r0
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	4a6a      	ldr	r2, [pc, #424]	; (80046e4 <HAL_RCC_ClockConfig+0x1f4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0ca      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004542:	4b67      	ldr	r3, [pc, #412]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2207      	movs	r2, #7
 8004548:	4013      	ands	r3, r2
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d1ee      	bne.n	800452e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2202      	movs	r2, #2
 8004556:	4013      	ands	r3, r2
 8004558:	d015      	beq.n	8004586 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2204      	movs	r2, #4
 8004560:	4013      	ands	r3, r2
 8004562:	d006      	beq.n	8004572 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004564:	4b60      	ldr	r3, [pc, #384]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	4b5f      	ldr	r3, [pc, #380]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 800456a:	21e0      	movs	r1, #224	; 0xe0
 800456c:	01c9      	lsls	r1, r1, #7
 800456e:	430a      	orrs	r2, r1
 8004570:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004572:	4b5d      	ldr	r3, [pc, #372]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	4a5d      	ldr	r2, [pc, #372]	; (80046ec <HAL_RCC_ClockConfig+0x1fc>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	4013      	ands	r3, r2
 800458e:	d057      	beq.n	8004640 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d107      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004598:	4b53      	ldr	r3, [pc, #332]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	029b      	lsls	r3, r3, #10
 80045a0:	4013      	ands	r3, r2
 80045a2:	d12b      	bne.n	80045fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e097      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d107      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b0:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	049b      	lsls	r3, r3, #18
 80045b8:	4013      	ands	r3, r2
 80045ba:	d11f      	bne.n	80045fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e08b      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d107      	bne.n	80045d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c8:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4013      	ands	r3, r2
 80045d2:	d113      	bne.n	80045fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e07f      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d106      	bne.n	80045ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045e0:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 80045e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e4:	2202      	movs	r2, #2
 80045e6:	4013      	ands	r3, r2
 80045e8:	d108      	bne.n	80045fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e074      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ee:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 80045f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f2:	2202      	movs	r2, #2
 80045f4:	4013      	ands	r3, r2
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e06d      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045fc:	4b3a      	ldr	r3, [pc, #232]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2207      	movs	r2, #7
 8004602:	4393      	bics	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 800460c:	430a      	orrs	r2, r1
 800460e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004610:	f7fd fc64 	bl	8001edc <HAL_GetTick>
 8004614:	0003      	movs	r3, r0
 8004616:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004618:	e009      	b.n	800462e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461a:	f7fd fc5f 	bl	8001edc <HAL_GetTick>
 800461e:	0002      	movs	r2, r0
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	4a2f      	ldr	r2, [pc, #188]	; (80046e4 <HAL_RCC_ClockConfig+0x1f4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e054      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2238      	movs	r2, #56	; 0x38
 8004634:	401a      	ands	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	429a      	cmp	r2, r3
 800463e:	d1ec      	bne.n	800461a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2207      	movs	r2, #7
 8004646:	4013      	ands	r3, r2
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d21e      	bcs.n	800468c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2207      	movs	r2, #7
 8004654:	4393      	bics	r3, r2
 8004656:	0019      	movs	r1, r3
 8004658:	4b21      	ldr	r3, [pc, #132]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004660:	f7fd fc3c 	bl	8001edc <HAL_GetTick>
 8004664:	0003      	movs	r3, r0
 8004666:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004668:	e009      	b.n	800467e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466a:	f7fd fc37 	bl	8001edc <HAL_GetTick>
 800466e:	0002      	movs	r2, r0
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	4a1b      	ldr	r2, [pc, #108]	; (80046e4 <HAL_RCC_ClockConfig+0x1f4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e02c      	b.n	80046d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2207      	movs	r2, #7
 8004684:	4013      	ands	r3, r2
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d1ee      	bne.n	800466a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2204      	movs	r2, #4
 8004692:	4013      	ands	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <HAL_RCC_ClockConfig+0x200>)
 800469c:	4013      	ands	r3, r2
 800469e:	0019      	movs	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 80046a6:	430a      	orrs	r2, r1
 80046a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80046aa:	f000 f829 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046ae:	0001      	movs	r1, r0
 80046b0:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	0a1b      	lsrs	r3, r3, #8
 80046b6:	220f      	movs	r2, #15
 80046b8:	401a      	ands	r2, r3
 80046ba:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <HAL_RCC_ClockConfig+0x204>)
 80046bc:	0092      	lsls	r2, r2, #2
 80046be:	58d3      	ldr	r3, [r2, r3]
 80046c0:	221f      	movs	r2, #31
 80046c2:	4013      	ands	r3, r2
 80046c4:	000a      	movs	r2, r1
 80046c6:	40da      	lsrs	r2, r3
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_RCC_ClockConfig+0x208>)
 80046ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_RCC_ClockConfig+0x20c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fd fba7 	bl	8001e24 <HAL_InitTick>
 80046d6:	0003      	movs	r3, r0
}
 80046d8:	0018      	movs	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	b004      	add	sp, #16
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40022000 	.word	0x40022000
 80046e4:	00001388 	.word	0x00001388
 80046e8:	40021000 	.word	0x40021000
 80046ec:	fffff0ff 	.word	0xfffff0ff
 80046f0:	ffff8fff 	.word	0xffff8fff
 80046f4:	080093b0 	.word	0x080093b0
 80046f8:	20000010 	.word	0x20000010
 80046fc:	20000014 	.word	0x20000014

08004700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004706:	4b3c      	ldr	r3, [pc, #240]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2238      	movs	r2, #56	; 0x38
 800470c:	4013      	ands	r3, r2
 800470e:	d10f      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004710:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	0adb      	lsrs	r3, r3, #11
 8004716:	2207      	movs	r2, #7
 8004718:	4013      	ands	r3, r2
 800471a:	2201      	movs	r2, #1
 800471c:	409a      	lsls	r2, r3
 800471e:	0013      	movs	r3, r2
 8004720:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004722:	6839      	ldr	r1, [r7, #0]
 8004724:	4835      	ldr	r0, [pc, #212]	; (80047fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004726:	f7fb fd09 	bl	800013c <__udivsi3>
 800472a:	0003      	movs	r3, r0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e05d      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004730:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2238      	movs	r2, #56	; 0x38
 8004736:	4013      	ands	r3, r2
 8004738:	2b08      	cmp	r3, #8
 800473a:	d102      	bne.n	8004742 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800473c:	4b30      	ldr	r3, [pc, #192]	; (8004800 <HAL_RCC_GetSysClockFreq+0x100>)
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	e054      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004742:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2238      	movs	r2, #56	; 0x38
 8004748:	4013      	ands	r3, r2
 800474a:	2b10      	cmp	r3, #16
 800474c:	d138      	bne.n	80047c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800474e:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2203      	movs	r2, #3
 8004754:	4013      	ands	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	2207      	movs	r2, #7
 8004760:	4013      	ands	r3, r2
 8004762:	3301      	adds	r3, #1
 8004764:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d10d      	bne.n	8004788 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	4824      	ldr	r0, [pc, #144]	; (8004800 <HAL_RCC_GetSysClockFreq+0x100>)
 8004770:	f7fb fce4 	bl	800013c <__udivsi3>
 8004774:	0003      	movs	r3, r0
 8004776:	0019      	movs	r1, r3
 8004778:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	227f      	movs	r2, #127	; 0x7f
 8004780:	4013      	ands	r3, r2
 8004782:	434b      	muls	r3, r1
 8004784:	617b      	str	r3, [r7, #20]
        break;
 8004786:	e00d      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	481c      	ldr	r0, [pc, #112]	; (80047fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800478c:	f7fb fcd6 	bl	800013c <__udivsi3>
 8004790:	0003      	movs	r3, r0
 8004792:	0019      	movs	r1, r3
 8004794:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	227f      	movs	r2, #127	; 0x7f
 800479c:	4013      	ands	r3, r2
 800479e:	434b      	muls	r3, r1
 80047a0:	617b      	str	r3, [r7, #20]
        break;
 80047a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	0f5b      	lsrs	r3, r3, #29
 80047aa:	2207      	movs	r2, #7
 80047ac:	4013      	ands	r3, r2
 80047ae:	3301      	adds	r3, #1
 80047b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f7fb fcc1 	bl	800013c <__udivsi3>
 80047ba:	0003      	movs	r3, r0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	e015      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047c0:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2238      	movs	r2, #56	; 0x38
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d103      	bne.n	80047d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	e00b      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80047d4:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2238      	movs	r2, #56	; 0x38
 80047da:	4013      	ands	r3, r2
 80047dc:	2b18      	cmp	r3, #24
 80047de:	d103      	bne.n	80047e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80047e0:	23fa      	movs	r3, #250	; 0xfa
 80047e2:	01db      	lsls	r3, r3, #7
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	e001      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047ec:	693b      	ldr	r3, [r7, #16]
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b006      	add	sp, #24
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	40021000 	.word	0x40021000
 80047fc:	00f42400 	.word	0x00f42400
 8004800:	007a1200 	.word	0x007a1200

08004804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <HAL_RCC_GetHCLKFreq+0x10>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	20000010 	.word	0x20000010

08004818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800481c:	f7ff fff2 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004820:	0004      	movs	r4, r0
 8004822:	f7ff fb3f 	bl	8003ea4 <LL_RCC_GetAPB1Prescaler>
 8004826:	0003      	movs	r3, r0
 8004828:	0b1a      	lsrs	r2, r3, #12
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x28>)
 800482c:	0092      	lsls	r2, r2, #2
 800482e:	58d3      	ldr	r3, [r2, r3]
 8004830:	221f      	movs	r2, #31
 8004832:	4013      	ands	r3, r2
 8004834:	40dc      	lsrs	r4, r3
 8004836:	0023      	movs	r3, r4
}
 8004838:	0018      	movs	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	bdb0      	pop	{r4, r5, r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	080093f0 	.word	0x080093f0

08004844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800484c:	2313      	movs	r3, #19
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004854:	2312      	movs	r3, #18
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	4013      	ands	r3, r2
 8004866:	d100      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004868:	e0a3      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486a:	2011      	movs	r0, #17
 800486c:	183b      	adds	r3, r7, r0
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004872:	4bc3      	ldr	r3, [pc, #780]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	055b      	lsls	r3, r3, #21
 800487a:	4013      	ands	r3, r2
 800487c:	d110      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	4bc0      	ldr	r3, [pc, #768]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004882:	4bbf      	ldr	r3, [pc, #764]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004884:	2180      	movs	r1, #128	; 0x80
 8004886:	0549      	lsls	r1, r1, #21
 8004888:	430a      	orrs	r2, r1
 800488a:	63da      	str	r2, [r3, #60]	; 0x3c
 800488c:	4bbc      	ldr	r3, [pc, #752]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800488e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004890:	2380      	movs	r3, #128	; 0x80
 8004892:	055b      	lsls	r3, r3, #21
 8004894:	4013      	ands	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800489a:	183b      	adds	r3, r7, r0
 800489c:	2201      	movs	r2, #1
 800489e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a0:	4bb8      	ldr	r3, [pc, #736]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4bb7      	ldr	r3, [pc, #732]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80048a6:	2180      	movs	r1, #128	; 0x80
 80048a8:	0049      	lsls	r1, r1, #1
 80048aa:	430a      	orrs	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ae:	f7fd fb15 	bl	8001edc <HAL_GetTick>
 80048b2:	0003      	movs	r3, r0
 80048b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048b6:	e00b      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fd fb10 	bl	8001edc <HAL_GetTick>
 80048bc:	0002      	movs	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d904      	bls.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80048c6:	2313      	movs	r3, #19
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	2203      	movs	r2, #3
 80048cc:	701a      	strb	r2, [r3, #0]
        break;
 80048ce:	e005      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048d0:	4bac      	ldr	r3, [pc, #688]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4013      	ands	r3, r2
 80048da:	d0ed      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80048dc:	2313      	movs	r3, #19
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d154      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048e6:	4ba6      	ldr	r3, [pc, #664]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80048e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048ea:	23c0      	movs	r3, #192	; 0xc0
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4013      	ands	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d019      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d014      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004902:	4b9f      	ldr	r3, [pc, #636]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004906:	4aa0      	ldr	r2, [pc, #640]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004908:	4013      	ands	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800490c:	4b9c      	ldr	r3, [pc, #624]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800490e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004910:	4b9b      	ldr	r3, [pc, #620]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004912:	2180      	movs	r1, #128	; 0x80
 8004914:	0249      	lsls	r1, r1, #9
 8004916:	430a      	orrs	r2, r1
 8004918:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800491a:	4b99      	ldr	r3, [pc, #612]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800491c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800491e:	4b98      	ldr	r3, [pc, #608]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004920:	499a      	ldr	r1, [pc, #616]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004922:	400a      	ands	r2, r1
 8004924:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004926:	4b96      	ldr	r3, [pc, #600]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2201      	movs	r2, #1
 8004930:	4013      	ands	r3, r2
 8004932:	d016      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fd fad2 	bl	8001edc <HAL_GetTick>
 8004938:	0003      	movs	r3, r0
 800493a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800493c:	e00c      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f7fd facd 	bl	8001edc <HAL_GetTick>
 8004942:	0002      	movs	r2, r0
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	4a91      	ldr	r2, [pc, #580]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d904      	bls.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800494e:	2313      	movs	r3, #19
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	2203      	movs	r2, #3
 8004954:	701a      	strb	r2, [r3, #0]
            break;
 8004956:	e004      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004958:	4b89      	ldr	r3, [pc, #548]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800495a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495c:	2202      	movs	r2, #2
 800495e:	4013      	ands	r3, r2
 8004960:	d0ed      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004962:	2313      	movs	r3, #19
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800496c:	4b84      	ldr	r3, [pc, #528]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800496e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004970:	4a85      	ldr	r2, [pc, #532]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004972:	4013      	ands	r3, r2
 8004974:	0019      	movs	r1, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497a:	4b81      	ldr	r3, [pc, #516]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800497c:	430a      	orrs	r2, r1
 800497e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004980:	e00c      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004982:	2312      	movs	r3, #18
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	2213      	movs	r2, #19
 8004988:	18ba      	adds	r2, r7, r2
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e005      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	2312      	movs	r3, #18
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	2213      	movs	r2, #19
 8004996:	18ba      	adds	r2, r7, r2
 8004998:	7812      	ldrb	r2, [r2, #0]
 800499a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800499c:	2311      	movs	r3, #17
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4b76      	ldr	r3, [pc, #472]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049aa:	4b75      	ldr	r3, [pc, #468]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ac:	4979      	ldr	r1, [pc, #484]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80049ae:	400a      	ands	r2, r1
 80049b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2201      	movs	r2, #1
 80049b8:	4013      	ands	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049bc:	4b70      	ldr	r3, [pc, #448]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	2203      	movs	r2, #3
 80049c2:	4393      	bics	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	4b6d      	ldr	r3, [pc, #436]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049cc:	430a      	orrs	r2, r1
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2202      	movs	r2, #2
 80049d6:	4013      	ands	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049da:	4b69      	ldr	r3, [pc, #420]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	220c      	movs	r2, #12
 80049e0:	4393      	bics	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049ea:	430a      	orrs	r2, r1
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2210      	movs	r2, #16
 80049f4:	4013      	ands	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049f8:	4b61      	ldr	r3, [pc, #388]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	4a66      	ldr	r2, [pc, #408]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	4b5e      	ldr	r3, [pc, #376]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4013      	ands	r3, r2
 8004a16:	d009      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a18:	4b59      	ldr	r3, [pc, #356]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	4a5f      	ldr	r2, [pc, #380]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	0019      	movs	r1, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	4b56      	ldr	r3, [pc, #344]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4013      	ands	r3, r2
 8004a36:	d009      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a38:	4b51      	ldr	r3, [pc, #324]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	4a58      	ldr	r2, [pc, #352]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a3e:	4013      	ands	r3, r2
 8004a40:	0019      	movs	r1, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69da      	ldr	r2, [r3, #28]
 8004a46:	4b4e      	ldr	r3, [pc, #312]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2220      	movs	r2, #32
 8004a52:	4013      	ands	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a56:	4b4a      	ldr	r3, [pc, #296]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	4a52      	ldr	r2, [pc, #328]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	4b46      	ldr	r3, [pc, #280]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a66:	430a      	orrs	r2, r1
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	01db      	lsls	r3, r3, #7
 8004a72:	4013      	ands	r3, r2
 8004a74:	d015      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a76:	4b42      	ldr	r3, [pc, #264]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	0899      	lsrs	r1, r3, #2
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a84:	430a      	orrs	r2, r1
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1a      	ldr	r2, [r3, #32]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	05db      	lsls	r3, r3, #23
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a94:	4b3a      	ldr	r3, [pc, #232]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	4b39      	ldr	r3, [pc, #228]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004a9a:	2180      	movs	r1, #128	; 0x80
 8004a9c:	0249      	lsls	r1, r1, #9
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	031b      	lsls	r3, r3, #12
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004aae:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	2240      	movs	r2, #64	; 0x40
 8004ab4:	4393      	bics	r3, r2
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004abc:	4b30      	ldr	r3, [pc, #192]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	039b      	lsls	r3, r3, #14
 8004aca:	4013      	ands	r3, r2
 8004acc:	d016      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ace:	4b2c      	ldr	r3, [pc, #176]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	4a35      	ldr	r2, [pc, #212]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004adc:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	03db      	lsls	r3, r3, #15
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d106      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004aee:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004af4:	2180      	movs	r1, #128	; 0x80
 8004af6:	0449      	lsls	r1, r1, #17
 8004af8:	430a      	orrs	r2, r1
 8004afa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	03db      	lsls	r3, r3, #15
 8004b04:	4013      	ands	r3, r2
 8004b06:	d016      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0c:	4a27      	ldr	r2, [pc, #156]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b16:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	045b      	lsls	r3, r3, #17
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d106      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	0449      	lsls	r1, r1, #17
 8004b32:	430a      	orrs	r2, r1
 8004b34:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d016      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004b42:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	4a1a      	ldr	r2, [pc, #104]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b52:	430a      	orrs	r2, r1
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	01db      	lsls	r3, r3, #7
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d106      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b62:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004b68:	2180      	movs	r1, #128	; 0x80
 8004b6a:	0249      	lsls	r1, r1, #9
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004b70:	2312      	movs	r3, #18
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	781b      	ldrb	r3, [r3, #0]
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b006      	add	sp, #24
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40007000 	.word	0x40007000
 8004b88:	fffffcff 	.word	0xfffffcff
 8004b8c:	fffeffff 	.word	0xfffeffff
 8004b90:	00001388 	.word	0x00001388
 8004b94:	efffffff 	.word	0xefffffff
 8004b98:	fffff3ff 	.word	0xfffff3ff
 8004b9c:	fff3ffff 	.word	0xfff3ffff
 8004ba0:	ffcfffff 	.word	0xffcfffff
 8004ba4:	ffffcfff 	.word	0xffffcfff
 8004ba8:	ffbfffff 	.word	0xffbfffff
 8004bac:	feffffff 	.word	0xfeffffff
 8004bb0:	ffff3fff 	.word	0xffff3fff

08004bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e04a      	b.n	8004c5c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	223d      	movs	r2, #61	; 0x3d
 8004bca:	5c9b      	ldrb	r3, [r3, r2]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d107      	bne.n	8004be2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	223c      	movs	r2, #60	; 0x3c
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fc fec9 	bl	8001974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	223d      	movs	r2, #61	; 0x3d
 8004be6:	2102      	movs	r1, #2
 8004be8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	0019      	movs	r1, r3
 8004bf4:	0010      	movs	r0, r2
 8004bf6:	f000 fd53 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2248      	movs	r2, #72	; 0x48
 8004bfe:	2101      	movs	r1, #1
 8004c00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	223e      	movs	r2, #62	; 0x3e
 8004c06:	2101      	movs	r1, #1
 8004c08:	5499      	strb	r1, [r3, r2]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	223f      	movs	r2, #63	; 0x3f
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2240      	movs	r2, #64	; 0x40
 8004c16:	2101      	movs	r1, #1
 8004c18:	5499      	strb	r1, [r3, r2]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2241      	movs	r2, #65	; 0x41
 8004c1e:	2101      	movs	r1, #1
 8004c20:	5499      	strb	r1, [r3, r2]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2242      	movs	r2, #66	; 0x42
 8004c26:	2101      	movs	r1, #1
 8004c28:	5499      	strb	r1, [r3, r2]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2243      	movs	r2, #67	; 0x43
 8004c2e:	2101      	movs	r1, #1
 8004c30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2244      	movs	r2, #68	; 0x44
 8004c36:	2101      	movs	r1, #1
 8004c38:	5499      	strb	r1, [r3, r2]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2245      	movs	r2, #69	; 0x45
 8004c3e:	2101      	movs	r1, #1
 8004c40:	5499      	strb	r1, [r3, r2]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2246      	movs	r2, #70	; 0x46
 8004c46:	2101      	movs	r1, #1
 8004c48:	5499      	strb	r1, [r3, r2]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2247      	movs	r2, #71	; 0x47
 8004c4e:	2101      	movs	r1, #1
 8004c50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	223d      	movs	r2, #61	; 0x3d
 8004c56:	2101      	movs	r1, #1
 8004c58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b002      	add	sp, #8
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	223d      	movs	r2, #61	; 0x3d
 8004c70:	5c9b      	ldrb	r3, [r3, r2]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d001      	beq.n	8004c7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e03a      	b.n	8004cf2 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	223d      	movs	r2, #61	; 0x3d
 8004c80:	2102      	movs	r1, #2
 8004c82:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <HAL_TIM_Base_Start+0x98>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <HAL_TIM_Base_Start+0x4a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	05db      	lsls	r3, r3, #23
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d009      	beq.n	8004cae <HAL_TIM_Base_Start+0x4a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <HAL_TIM_Base_Start+0x9c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d004      	beq.n	8004cae <HAL_TIM_Base_Start+0x4a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <HAL_TIM_Base_Start+0xa0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d116      	bne.n	8004cdc <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <HAL_TIM_Base_Start+0xa4>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b06      	cmp	r3, #6
 8004cbe:	d016      	beq.n	8004cee <HAL_TIM_Base_Start+0x8a>
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	025b      	lsls	r3, r3, #9
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d011      	beq.n	8004cee <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cda:	e008      	b.n	8004cee <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	e000      	b.n	8004cf0 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b004      	add	sp, #16
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	00010007 	.word	0x00010007

08004d0c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <HAL_TIM_Base_Stop+0x44>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d10d      	bne.n	8004d3c <HAL_TIM_Base_Stop+0x30>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <HAL_TIM_Base_Stop+0x48>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_Base_Stop+0x30>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2101      	movs	r1, #1
 8004d38:	438a      	bics	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	223d      	movs	r2, #61	; 0x3d
 8004d40:	2101      	movs	r1, #1
 8004d42:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	0018      	movs	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b002      	add	sp, #8
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	00001111 	.word	0x00001111
 8004d54:	00000444 	.word	0x00000444

08004d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	223d      	movs	r2, #61	; 0x3d
 8004d64:	5c9b      	ldrb	r3, [r3, r2]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d001      	beq.n	8004d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e042      	b.n	8004df6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	223d      	movs	r2, #61	; 0x3d
 8004d74:	2102      	movs	r1, #2
 8004d76:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2101      	movs	r1, #1
 8004d84:	430a      	orrs	r2, r1
 8004d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1c      	ldr	r2, [pc, #112]	; (8004e00 <HAL_TIM_Base_Start_IT+0xa8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00f      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x5a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	05db      	lsls	r3, r3, #23
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x5a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a18      	ldr	r2, [pc, #96]	; (8004e04 <HAL_TIM_Base_Start_IT+0xac>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIM_Base_Start_IT+0x5a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a16      	ldr	r2, [pc, #88]	; (8004e08 <HAL_TIM_Base_Start_IT+0xb0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d116      	bne.n	8004de0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <HAL_TIM_Base_Start_IT+0xb4>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b06      	cmp	r3, #6
 8004dc2:	d016      	beq.n	8004df2 <HAL_TIM_Base_Start_IT+0x9a>
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	2380      	movs	r3, #128	; 0x80
 8004dc8:	025b      	lsls	r3, r3, #9
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d011      	beq.n	8004df2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2101      	movs	r1, #1
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	e008      	b.n	8004df2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2101      	movs	r1, #1
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e000      	b.n	8004df4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b004      	add	sp, #16
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	00010007 	.word	0x00010007

08004e10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e04a      	b.n	8004eb8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	223d      	movs	r2, #61	; 0x3d
 8004e26:	5c9b      	ldrb	r3, [r3, r2]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	223c      	movs	r2, #60	; 0x3c
 8004e32:	2100      	movs	r1, #0
 8004e34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f000 f841 	bl	8004ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	223d      	movs	r2, #61	; 0x3d
 8004e42:	2102      	movs	r1, #2
 8004e44:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	0019      	movs	r1, r3
 8004e50:	0010      	movs	r0, r2
 8004e52:	f000 fc25 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2248      	movs	r2, #72	; 0x48
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	223e      	movs	r2, #62	; 0x3e
 8004e62:	2101      	movs	r1, #1
 8004e64:	5499      	strb	r1, [r3, r2]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	223f      	movs	r2, #63	; 0x3f
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	5499      	strb	r1, [r3, r2]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2240      	movs	r2, #64	; 0x40
 8004e72:	2101      	movs	r1, #1
 8004e74:	5499      	strb	r1, [r3, r2]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2241      	movs	r2, #65	; 0x41
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	5499      	strb	r1, [r3, r2]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2242      	movs	r2, #66	; 0x42
 8004e82:	2101      	movs	r1, #1
 8004e84:	5499      	strb	r1, [r3, r2]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2243      	movs	r2, #67	; 0x43
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2244      	movs	r2, #68	; 0x44
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2245      	movs	r2, #69	; 0x45
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2246      	movs	r2, #70	; 0x46
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2247      	movs	r2, #71	; 0x47
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	223d      	movs	r2, #61	; 0x3d
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b002      	add	sp, #8
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <HAL_TIM_PWM_Start+0x22>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	223e      	movs	r2, #62	; 0x3e
 8004ee4:	5c9b      	ldrb	r3, [r3, r2]
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	1e5a      	subs	r2, r3, #1
 8004eec:	4193      	sbcs	r3, r2
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	e037      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d108      	bne.n	8004f0a <HAL_TIM_PWM_Start+0x3a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	223f      	movs	r2, #63	; 0x3f
 8004efc:	5c9b      	ldrb	r3, [r3, r2]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	1e5a      	subs	r2, r3, #1
 8004f04:	4193      	sbcs	r3, r2
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	e02b      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d108      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x52>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2240      	movs	r2, #64	; 0x40
 8004f14:	5c9b      	ldrb	r3, [r3, r2]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	1e5a      	subs	r2, r3, #1
 8004f1c:	4193      	sbcs	r3, r2
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	e01f      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d108      	bne.n	8004f3a <HAL_TIM_PWM_Start+0x6a>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2241      	movs	r2, #65	; 0x41
 8004f2c:	5c9b      	ldrb	r3, [r3, r2]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	1e5a      	subs	r2, r3, #1
 8004f34:	4193      	sbcs	r3, r2
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	e013      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d108      	bne.n	8004f52 <HAL_TIM_PWM_Start+0x82>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2242      	movs	r2, #66	; 0x42
 8004f44:	5c9b      	ldrb	r3, [r3, r2]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	1e5a      	subs	r2, r3, #1
 8004f4c:	4193      	sbcs	r3, r2
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	e007      	b.n	8004f62 <HAL_TIM_PWM_Start+0x92>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2243      	movs	r2, #67	; 0x43
 8004f56:	5c9b      	ldrb	r3, [r3, r2]
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	4193      	sbcs	r3, r2
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e08b      	b.n	8005082 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_PWM_Start+0xaa>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	223e      	movs	r2, #62	; 0x3e
 8004f74:	2102      	movs	r1, #2
 8004f76:	5499      	strb	r1, [r3, r2]
 8004f78:	e023      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0xba>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	223f      	movs	r2, #63	; 0x3f
 8004f84:	2102      	movs	r1, #2
 8004f86:	5499      	strb	r1, [r3, r2]
 8004f88:	e01b      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xca>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2240      	movs	r2, #64	; 0x40
 8004f94:	2102      	movs	r1, #2
 8004f96:	5499      	strb	r1, [r3, r2]
 8004f98:	e013      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b0c      	cmp	r3, #12
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0xda>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2241      	movs	r2, #65	; 0x41
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	5499      	strb	r1, [r3, r2]
 8004fa8:	e00b      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xea>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2242      	movs	r2, #66	; 0x42
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	5499      	strb	r1, [r3, r2]
 8004fb8:	e003      	b.n	8004fc2 <HAL_TIM_PWM_Start+0xf2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2243      	movs	r2, #67	; 0x43
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 ff56 	bl	8005e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <HAL_TIM_PWM_Start+0x1bc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0x128>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <HAL_TIM_PWM_Start+0x1c0>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0x128>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <HAL_TIM_PWM_Start+0x1c4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0x128>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a29      	ldr	r2, [pc, #164]	; (8005098 <HAL_TIM_PWM_Start+0x1c8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d101      	bne.n	8004ffc <HAL_TIM_PWM_Start+0x12c>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_TIM_PWM_Start+0x12e>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2180      	movs	r1, #128	; 0x80
 800500e:	0209      	lsls	r1, r1, #8
 8005010:	430a      	orrs	r2, r1
 8005012:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1c      	ldr	r2, [pc, #112]	; (800508c <HAL_TIM_PWM_Start+0x1bc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00f      	beq.n	800503e <HAL_TIM_PWM_Start+0x16e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	05db      	lsls	r3, r3, #23
 8005026:	429a      	cmp	r2, r3
 8005028:	d009      	beq.n	800503e <HAL_TIM_PWM_Start+0x16e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1b      	ldr	r2, [pc, #108]	; (800509c <HAL_TIM_PWM_Start+0x1cc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIM_PWM_Start+0x16e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a15      	ldr	r2, [pc, #84]	; (8005090 <HAL_TIM_PWM_Start+0x1c0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d116      	bne.n	800506c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <HAL_TIM_PWM_Start+0x1d0>)
 8005046:	4013      	ands	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b06      	cmp	r3, #6
 800504e:	d016      	beq.n	800507e <HAL_TIM_PWM_Start+0x1ae>
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	025b      	lsls	r3, r3, #9
 8005056:	429a      	cmp	r2, r3
 8005058:	d011      	beq.n	800507e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2101      	movs	r1, #1
 8005066:	430a      	orrs	r2, r1
 8005068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506a:	e008      	b.n	800507e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2101      	movs	r1, #1
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e000      	b.n	8005080 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b004      	add	sp, #16
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800
 800509c:	40000400 	.word	0x40000400
 80050a0:	00010007 	.word	0x00010007

080050a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	d021      	beq.n	8005108 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2202      	movs	r2, #2
 80050c8:	4013      	ands	r3, r2
 80050ca:	d01d      	beq.n	8005108 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2203      	movs	r2, #3
 80050d2:	4252      	negs	r2, r2
 80050d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2203      	movs	r2, #3
 80050e4:	4013      	ands	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 fac0 	bl	8005670 <HAL_TIM_IC_CaptureCallback>
 80050f0:	e007      	b.n	8005102 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f000 fab3 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f000 fabf 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2204      	movs	r2, #4
 800510c:	4013      	ands	r3, r2
 800510e:	d022      	beq.n	8005156 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2204      	movs	r2, #4
 8005114:	4013      	ands	r3, r2
 8005116:	d01e      	beq.n	8005156 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2205      	movs	r2, #5
 800511e:	4252      	negs	r2, r2
 8005120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	23c0      	movs	r3, #192	; 0xc0
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4013      	ands	r3, r2
 8005134:	d004      	beq.n	8005140 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	0018      	movs	r0, r3
 800513a:	f000 fa99 	bl	8005670 <HAL_TIM_IC_CaptureCallback>
 800513e:	e007      	b.n	8005150 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	0018      	movs	r0, r3
 8005144:	f000 fa8c 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	0018      	movs	r0, r3
 800514c:	f000 fa98 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2208      	movs	r2, #8
 800515a:	4013      	ands	r3, r2
 800515c:	d021      	beq.n	80051a2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2208      	movs	r2, #8
 8005162:	4013      	ands	r3, r2
 8005164:	d01d      	beq.n	80051a2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2209      	movs	r2, #9
 800516c:	4252      	negs	r2, r2
 800516e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2204      	movs	r2, #4
 8005174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	2203      	movs	r2, #3
 800517e:	4013      	ands	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	0018      	movs	r0, r3
 8005186:	f000 fa73 	bl	8005670 <HAL_TIM_IC_CaptureCallback>
 800518a:	e007      	b.n	800519c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	0018      	movs	r0, r3
 8005190:	f000 fa66 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	0018      	movs	r0, r3
 8005198:	f000 fa72 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2210      	movs	r2, #16
 80051a6:	4013      	ands	r3, r2
 80051a8:	d022      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2210      	movs	r2, #16
 80051ae:	4013      	ands	r3, r2
 80051b0:	d01e      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2211      	movs	r2, #17
 80051b8:	4252      	negs	r2, r2
 80051ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2208      	movs	r2, #8
 80051c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	23c0      	movs	r3, #192	; 0xc0
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4013      	ands	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f000 fa4c 	bl	8005670 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e007      	b.n	80051ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	0018      	movs	r0, r3
 80051de:	f000 fa3f 	bl	8005660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 fa4b 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2201      	movs	r2, #1
 80051f4:	4013      	ands	r3, r2
 80051f6:	d00c      	beq.n	8005212 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	4013      	ands	r3, r2
 80051fe:	d008      	beq.n	8005212 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2202      	movs	r2, #2
 8005206:	4252      	negs	r2, r2
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0018      	movs	r0, r3
 800520e:	f7fc f9c1 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2280      	movs	r2, #128	; 0x80
 8005216:	4013      	ands	r3, r2
 8005218:	d104      	bne.n	8005224 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	019b      	lsls	r3, r3, #6
 8005220:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005222:	d00b      	beq.n	800523c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2280      	movs	r2, #128	; 0x80
 8005228:	4013      	ands	r3, r2
 800522a:	d007      	beq.n	800523c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1e      	ldr	r2, [pc, #120]	; (80052ac <HAL_TIM_IRQHandler+0x208>)
 8005232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0018      	movs	r0, r3
 8005238:	f000 feba 	bl	8005fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4013      	ands	r3, r2
 8005244:	d00b      	beq.n	800525e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2280      	movs	r2, #128	; 0x80
 800524a:	4013      	ands	r3, r2
 800524c:	d007      	beq.n	800525e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <HAL_TIM_IRQHandler+0x20c>)
 8005254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0018      	movs	r0, r3
 800525a:	f000 feb1 	bl	8005fc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2240      	movs	r2, #64	; 0x40
 8005262:	4013      	ands	r3, r2
 8005264:	d00c      	beq.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2240      	movs	r2, #64	; 0x40
 800526a:	4013      	ands	r3, r2
 800526c:	d008      	beq.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2241      	movs	r2, #65	; 0x41
 8005274:	4252      	negs	r2, r2
 8005276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	0018      	movs	r0, r3
 800527c:	f000 fa08 	bl	8005690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2220      	movs	r2, #32
 8005284:	4013      	ands	r3, r2
 8005286:	d00c      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	4013      	ands	r3, r2
 800528e:	d008      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2221      	movs	r2, #33	; 0x21
 8005296:	4252      	negs	r2, r2
 8005298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fe7f 	bl	8005fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	ffffdf7f 	.word	0xffffdf7f
 80052b0:	fffffeff 	.word	0xfffffeff

080052b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c0:	2317      	movs	r3, #23
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	223c      	movs	r2, #60	; 0x3c
 80052cc:	5c9b      	ldrb	r3, [r3, r2]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e0e5      	b.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	223c      	movs	r2, #60	; 0x3c
 80052da:	2101      	movs	r1, #1
 80052dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b14      	cmp	r3, #20
 80052e2:	d900      	bls.n	80052e6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80052e4:	e0d1      	b.n	800548a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	009a      	lsls	r2, r3, #2
 80052ea:	4b70      	ldr	r3, [pc, #448]	; (80054ac <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80052ec:	18d3      	adds	r3, r2, r3
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	0011      	movs	r1, r2
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 fa5e 	bl	80057bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2108      	movs	r1, #8
 800530c:	430a      	orrs	r2, r1
 800530e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2104      	movs	r1, #4
 800531c:	438a      	bics	r2, r1
 800531e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6999      	ldr	r1, [r3, #24]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	619a      	str	r2, [r3, #24]
      break;
 8005332:	e0af      	b.n	8005494 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	0011      	movs	r1, r2
 800533c:	0018      	movs	r0, r3
 800533e:	f000 fac7 	bl	80058d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2180      	movs	r1, #128	; 0x80
 800534e:	0109      	lsls	r1, r1, #4
 8005350:	430a      	orrs	r2, r1
 8005352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4954      	ldr	r1, [pc, #336]	; (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005360:	400a      	ands	r2, r1
 8005362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6999      	ldr	r1, [r3, #24]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	021a      	lsls	r2, r3, #8
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	619a      	str	r2, [r3, #24]
      break;
 8005378:	e08c      	b.n	8005494 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	0011      	movs	r1, r2
 8005382:	0018      	movs	r0, r3
 8005384:	f000 fb28 	bl	80059d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69da      	ldr	r2, [r3, #28]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2108      	movs	r1, #8
 8005394:	430a      	orrs	r2, r1
 8005396:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2104      	movs	r1, #4
 80053a4:	438a      	bics	r2, r1
 80053a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69d9      	ldr	r1, [r3, #28]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	61da      	str	r2, [r3, #28]
      break;
 80053ba:	e06b      	b.n	8005494 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	0011      	movs	r1, r2
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 fb8f 	bl	8005ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2180      	movs	r1, #128	; 0x80
 80053d6:	0109      	lsls	r1, r1, #4
 80053d8:	430a      	orrs	r2, r1
 80053da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4932      	ldr	r1, [pc, #200]	; (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053e8:	400a      	ands	r2, r1
 80053ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69d9      	ldr	r1, [r3, #28]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	61da      	str	r2, [r3, #28]
      break;
 8005400:	e048      	b.n	8005494 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	0011      	movs	r1, r2
 800540a:	0018      	movs	r0, r3
 800540c:	f000 fbd6 	bl	8005bbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2108      	movs	r1, #8
 800541c:	430a      	orrs	r2, r1
 800541e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2104      	movs	r1, #4
 800542c:	438a      	bics	r2, r1
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005442:	e027      	b.n	8005494 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	0011      	movs	r1, r2
 800544c:	0018      	movs	r0, r3
 800544e:	f000 fc15 	bl	8005c7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2180      	movs	r1, #128	; 0x80
 800545e:	0109      	lsls	r1, r1, #4
 8005460:	430a      	orrs	r2, r1
 8005462:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4910      	ldr	r1, [pc, #64]	; (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005470:	400a      	ands	r2, r1
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005488:	e004      	b.n	8005494 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800548a:	2317      	movs	r3, #23
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2201      	movs	r2, #1
 8005490:	701a      	strb	r2, [r3, #0]
      break;
 8005492:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	223c      	movs	r2, #60	; 0x3c
 8005498:	2100      	movs	r1, #0
 800549a:	5499      	strb	r1, [r3, r2]

  return status;
 800549c:	2317      	movs	r3, #23
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	781b      	ldrb	r3, [r3, #0]
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b006      	add	sp, #24
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	08009410 	.word	0x08009410
 80054b0:	fffffbff 	.word	0xfffffbff

080054b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	230f      	movs	r3, #15
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	223c      	movs	r2, #60	; 0x3c
 80054ca:	5c9b      	ldrb	r3, [r3, r2]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIM_ConfigClockSource+0x20>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e0bc      	b.n	800564e <HAL_TIM_ConfigClockSource+0x19a>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	223c      	movs	r2, #60	; 0x3c
 80054d8:	2101      	movs	r1, #1
 80054da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	223d      	movs	r2, #61	; 0x3d
 80054e0:	2102      	movs	r1, #2
 80054e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a5a      	ldr	r2, [pc, #360]	; (8005658 <HAL_TIM_ConfigClockSource+0x1a4>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a59      	ldr	r2, [pc, #356]	; (800565c <HAL_TIM_ConfigClockSource+0x1a8>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	0192      	lsls	r2, r2, #6
 800550c:	4293      	cmp	r3, r2
 800550e:	d040      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0xde>
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	0192      	lsls	r2, r2, #6
 8005514:	4293      	cmp	r3, r2
 8005516:	d900      	bls.n	800551a <HAL_TIM_ConfigClockSource+0x66>
 8005518:	e088      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	0152      	lsls	r2, r2, #5
 800551e:	4293      	cmp	r3, r2
 8005520:	d100      	bne.n	8005524 <HAL_TIM_ConfigClockSource+0x70>
 8005522:	e088      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x182>
 8005524:	2280      	movs	r2, #128	; 0x80
 8005526:	0152      	lsls	r2, r2, #5
 8005528:	4293      	cmp	r3, r2
 800552a:	d900      	bls.n	800552e <HAL_TIM_ConfigClockSource+0x7a>
 800552c:	e07e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
 800552e:	2b70      	cmp	r3, #112	; 0x70
 8005530:	d018      	beq.n	8005564 <HAL_TIM_ConfigClockSource+0xb0>
 8005532:	d900      	bls.n	8005536 <HAL_TIM_ConfigClockSource+0x82>
 8005534:	e07a      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
 8005536:	2b60      	cmp	r3, #96	; 0x60
 8005538:	d04f      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x126>
 800553a:	d900      	bls.n	800553e <HAL_TIM_ConfigClockSource+0x8a>
 800553c:	e076      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
 800553e:	2b50      	cmp	r3, #80	; 0x50
 8005540:	d03b      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x106>
 8005542:	d900      	bls.n	8005546 <HAL_TIM_ConfigClockSource+0x92>
 8005544:	e072      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
 8005546:	2b40      	cmp	r3, #64	; 0x40
 8005548:	d057      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x146>
 800554a:	d900      	bls.n	800554e <HAL_TIM_ConfigClockSource+0x9a>
 800554c:	e06e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
 800554e:	2b30      	cmp	r3, #48	; 0x30
 8005550:	d063      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x166>
 8005552:	d86b      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x178>
 8005554:	2b20      	cmp	r3, #32
 8005556:	d060      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x166>
 8005558:	d868      	bhi.n	800562c <HAL_TIM_ConfigClockSource+0x178>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d05d      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x166>
 800555e:	2b10      	cmp	r3, #16
 8005560:	d05b      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x166>
 8005562:	e063      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005574:	f000 fc62 	bl	8005e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2277      	movs	r2, #119	; 0x77
 8005584:	4313      	orrs	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	609a      	str	r2, [r3, #8]
      break;
 8005590:	e052      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055a2:	f000 fc4b 	bl	8005e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	01c9      	lsls	r1, r1, #7
 80055b4:	430a      	orrs	r2, r1
 80055b6:	609a      	str	r2, [r3, #8]
      break;
 80055b8:	e03e      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c6:	001a      	movs	r2, r3
 80055c8:	f000 fbbc 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2150      	movs	r1, #80	; 0x50
 80055d2:	0018      	movs	r0, r3
 80055d4:	f000 fc16 	bl	8005e04 <TIM_ITRx_SetConfig>
      break;
 80055d8:	e02e      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e6:	001a      	movs	r2, r3
 80055e8:	f000 fbda 	bl	8005da0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2160      	movs	r1, #96	; 0x60
 80055f2:	0018      	movs	r0, r3
 80055f4:	f000 fc06 	bl	8005e04 <TIM_ITRx_SetConfig>
      break;
 80055f8:	e01e      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005606:	001a      	movs	r2, r3
 8005608:	f000 fb9c 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2140      	movs	r1, #64	; 0x40
 8005612:	0018      	movs	r0, r3
 8005614:	f000 fbf6 	bl	8005e04 <TIM_ITRx_SetConfig>
      break;
 8005618:	e00e      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	0019      	movs	r1, r3
 8005624:	0010      	movs	r0, r2
 8005626:	f000 fbed 	bl	8005e04 <TIM_ITRx_SetConfig>
      break;
 800562a:	e005      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800562c:	230f      	movs	r3, #15
 800562e:	18fb      	adds	r3, r7, r3
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
      break;
 8005634:	e000      	b.n	8005638 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005636:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	223d      	movs	r2, #61	; 0x3d
 800563c:	2101      	movs	r1, #1
 800563e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	223c      	movs	r2, #60	; 0x3c
 8005644:	2100      	movs	r1, #0
 8005646:	5499      	strb	r1, [r3, r2]

  return status;
 8005648:	230f      	movs	r3, #15
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	781b      	ldrb	r3, [r3, #0]
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b004      	add	sp, #16
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	ffceff88 	.word	0xffceff88
 800565c:	ffff00ff 	.word	0xffff00ff

08005660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b002      	add	sp, #8
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	b002      	add	sp, #8
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005688:	46c0      	nop			; (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	b002      	add	sp, #8
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005698:	46c0      	nop			; (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}

080056a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3b      	ldr	r2, [pc, #236]	; (80057a0 <TIM_Base_SetConfig+0x100>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d008      	beq.n	80056ca <TIM_Base_SetConfig+0x2a>
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	2380      	movs	r3, #128	; 0x80
 80056bc:	05db      	lsls	r3, r3, #23
 80056be:	429a      	cmp	r2, r3
 80056c0:	d003      	beq.n	80056ca <TIM_Base_SetConfig+0x2a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <TIM_Base_SetConfig+0x104>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d108      	bne.n	80056dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2270      	movs	r2, #112	; 0x70
 80056ce:	4393      	bics	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a30      	ldr	r2, [pc, #192]	; (80057a0 <TIM_Base_SetConfig+0x100>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d018      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	05db      	lsls	r3, r3, #23
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d013      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2c      	ldr	r2, [pc, #176]	; (80057a4 <TIM_Base_SetConfig+0x104>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a2b      	ldr	r2, [pc, #172]	; (80057a8 <TIM_Base_SetConfig+0x108>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <TIM_Base_SetConfig+0x10c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a29      	ldr	r2, [pc, #164]	; (80057b0 <TIM_Base_SetConfig+0x110>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0x76>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a28      	ldr	r2, [pc, #160]	; (80057b4 <TIM_Base_SetConfig+0x114>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d108      	bne.n	8005728 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a27      	ldr	r2, [pc, #156]	; (80057b8 <TIM_Base_SetConfig+0x118>)
 800571a:	4013      	ands	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2280      	movs	r2, #128	; 0x80
 800572c:	4393      	bics	r3, r2
 800572e:	001a      	movs	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <TIM_Base_SetConfig+0x100>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_Base_SetConfig+0xce>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a14      	ldr	r2, [pc, #80]	; (80057ac <TIM_Base_SetConfig+0x10c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_Base_SetConfig+0xce>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <TIM_Base_SetConfig+0x110>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_Base_SetConfig+0xce>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a12      	ldr	r2, [pc, #72]	; (80057b4 <TIM_Base_SetConfig+0x114>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d103      	bne.n	8005776 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2201      	movs	r2, #1
 8005782:	4013      	ands	r3, r2
 8005784:	2b01      	cmp	r3, #1
 8005786:	d106      	bne.n	8005796 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2201      	movs	r2, #1
 800578e:	4393      	bics	r3, r2
 8005790:	001a      	movs	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	611a      	str	r2, [r3, #16]
  }
}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	46bd      	mov	sp, r7
 800579a:	b004      	add	sp, #16
 800579c:	bd80      	pop	{r7, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40002000 	.word	0x40002000
 80057ac:	40014000 	.word	0x40014000
 80057b0:	40014400 	.word	0x40014400
 80057b4:	40014800 	.word	0x40014800
 80057b8:	fffffcff 	.word	0xfffffcff

080057bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	2201      	movs	r2, #1
 80057d2:	4393      	bics	r3, r2
 80057d4:	001a      	movs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4a32      	ldr	r2, [pc, #200]	; (80058b4 <TIM_OC1_SetConfig+0xf8>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2203      	movs	r2, #3
 80057f2:	4393      	bics	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2202      	movs	r2, #2
 8005804:	4393      	bics	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a28      	ldr	r2, [pc, #160]	; (80058b8 <TIM_OC1_SetConfig+0xfc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_OC1_SetConfig+0x76>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a27      	ldr	r2, [pc, #156]	; (80058bc <TIM_OC1_SetConfig+0x100>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_OC1_SetConfig+0x76>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a26      	ldr	r2, [pc, #152]	; (80058c0 <TIM_OC1_SetConfig+0x104>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_OC1_SetConfig+0x76>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a25      	ldr	r2, [pc, #148]	; (80058c4 <TIM_OC1_SetConfig+0x108>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d10c      	bne.n	800584c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2208      	movs	r2, #8
 8005836:	4393      	bics	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2204      	movs	r2, #4
 8005848:	4393      	bics	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a1a      	ldr	r2, [pc, #104]	; (80058b8 <TIM_OC1_SetConfig+0xfc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00b      	beq.n	800586c <TIM_OC1_SetConfig+0xb0>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a19      	ldr	r2, [pc, #100]	; (80058bc <TIM_OC1_SetConfig+0x100>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d007      	beq.n	800586c <TIM_OC1_SetConfig+0xb0>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <TIM_OC1_SetConfig+0x104>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_OC1_SetConfig+0xb0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a17      	ldr	r2, [pc, #92]	; (80058c4 <TIM_OC1_SetConfig+0x108>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d111      	bne.n	8005890 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4a16      	ldr	r2, [pc, #88]	; (80058c8 <TIM_OC1_SetConfig+0x10c>)
 8005870:	4013      	ands	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4a15      	ldr	r2, [pc, #84]	; (80058cc <TIM_OC1_SetConfig+0x110>)
 8005878:	4013      	ands	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b006      	add	sp, #24
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	fffeff8f 	.word	0xfffeff8f
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40014000 	.word	0x40014000
 80058c0:	40014400 	.word	0x40014400
 80058c4:	40014800 	.word	0x40014800
 80058c8:	fffffeff 	.word	0xfffffeff
 80058cc:	fffffdff 	.word	0xfffffdff

080058d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	2210      	movs	r2, #16
 80058e6:	4393      	bics	r3, r2
 80058e8:	001a      	movs	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4a2e      	ldr	r2, [pc, #184]	; (80059b8 <TIM_OC2_SetConfig+0xe8>)
 80058fe:	4013      	ands	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a2d      	ldr	r2, [pc, #180]	; (80059bc <TIM_OC2_SetConfig+0xec>)
 8005906:	4013      	ands	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2220      	movs	r2, #32
 800591a:	4393      	bics	r3, r2
 800591c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a24      	ldr	r2, [pc, #144]	; (80059c0 <TIM_OC2_SetConfig+0xf0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d10d      	bne.n	800594e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2280      	movs	r2, #128	; 0x80
 8005936:	4393      	bics	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2240      	movs	r2, #64	; 0x40
 800594a:	4393      	bics	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <TIM_OC2_SetConfig+0xf0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_OC2_SetConfig+0x9e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1a      	ldr	r2, [pc, #104]	; (80059c4 <TIM_OC2_SetConfig+0xf4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_OC2_SetConfig+0x9e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <TIM_OC2_SetConfig+0xf8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_OC2_SetConfig+0x9e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <TIM_OC2_SetConfig+0xfc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d113      	bne.n	8005996 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <TIM_OC2_SetConfig+0x100>)
 8005972:	4013      	ands	r3, r2
 8005974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <TIM_OC2_SetConfig+0x104>)
 800597a:	4013      	ands	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	621a      	str	r2, [r3, #32]
}
 80059b0:	46c0      	nop			; (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b006      	add	sp, #24
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	feff8fff 	.word	0xfeff8fff
 80059bc:	fffffcff 	.word	0xfffffcff
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800
 80059d0:	fffffbff 	.word	0xfffffbff
 80059d4:	fffff7ff 	.word	0xfffff7ff

080059d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	4a33      	ldr	r2, [pc, #204]	; (8005abc <TIM_OC3_SetConfig+0xe4>)
 80059ee:	401a      	ands	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <TIM_OC3_SetConfig+0xe8>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	4393      	bics	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4a29      	ldr	r2, [pc, #164]	; (8005ac4 <TIM_OC3_SetConfig+0xec>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a25      	ldr	r2, [pc, #148]	; (8005ac8 <TIM_OC3_SetConfig+0xf0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d10d      	bne.n	8005a52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	4a24      	ldr	r2, [pc, #144]	; (8005acc <TIM_OC3_SetConfig+0xf4>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4a20      	ldr	r2, [pc, #128]	; (8005ad0 <TIM_OC3_SetConfig+0xf8>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <TIM_OC3_SetConfig+0xf0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00b      	beq.n	8005a72 <TIM_OC3_SetConfig+0x9a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ad4 <TIM_OC3_SetConfig+0xfc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d007      	beq.n	8005a72 <TIM_OC3_SetConfig+0x9a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1c      	ldr	r2, [pc, #112]	; (8005ad8 <TIM_OC3_SetConfig+0x100>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <TIM_OC3_SetConfig+0x9a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a1b      	ldr	r2, [pc, #108]	; (8005adc <TIM_OC3_SetConfig+0x104>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d113      	bne.n	8005a9a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4a1a      	ldr	r2, [pc, #104]	; (8005ae0 <TIM_OC3_SetConfig+0x108>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <TIM_OC3_SetConfig+0x10c>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b006      	add	sp, #24
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	fffffeff 	.word	0xfffffeff
 8005ac0:	fffeff8f 	.word	0xfffeff8f
 8005ac4:	fffffdff 	.word	0xfffffdff
 8005ac8:	40012c00 	.word	0x40012c00
 8005acc:	fffff7ff 	.word	0xfffff7ff
 8005ad0:	fffffbff 	.word	0xfffffbff
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40014400 	.word	0x40014400
 8005adc:	40014800 	.word	0x40014800
 8005ae0:	ffffefff 	.word	0xffffefff
 8005ae4:	ffffdfff 	.word	0xffffdfff

08005ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <TIM_OC4_SetConfig+0xb0>)
 8005afe:	401a      	ands	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <TIM_OC4_SetConfig+0xb4>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <TIM_OC4_SetConfig+0xb8>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ba4 <TIM_OC4_SetConfig+0xbc>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	031b      	lsls	r3, r3, #12
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <TIM_OC4_SetConfig+0xc0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00b      	beq.n	8005b60 <TIM_OC4_SetConfig+0x78>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a18      	ldr	r2, [pc, #96]	; (8005bac <TIM_OC4_SetConfig+0xc4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d007      	beq.n	8005b60 <TIM_OC4_SetConfig+0x78>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a17      	ldr	r2, [pc, #92]	; (8005bb0 <TIM_OC4_SetConfig+0xc8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d003      	beq.n	8005b60 <TIM_OC4_SetConfig+0x78>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <TIM_OC4_SetConfig+0xcc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d109      	bne.n	8005b74 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <TIM_OC4_SetConfig+0xd0>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b006      	add	sp, #24
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	ffffefff 	.word	0xffffefff
 8005b9c:	feff8fff 	.word	0xfeff8fff
 8005ba0:	fffffcff 	.word	0xfffffcff
 8005ba4:	ffffdfff 	.word	0xffffdfff
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40014000 	.word	0x40014000
 8005bb0:	40014400 	.word	0x40014400
 8005bb4:	40014800 	.word	0x40014800
 8005bb8:	ffffbfff 	.word	0xffffbfff

08005bbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <TIM_OC5_SetConfig+0xa4>)
 8005bd2:	401a      	ands	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4a1f      	ldr	r2, [pc, #124]	; (8005c64 <TIM_OC5_SetConfig+0xa8>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4a1b      	ldr	r2, [pc, #108]	; (8005c68 <TIM_OC5_SetConfig+0xac>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <TIM_OC5_SetConfig+0xb0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <TIM_OC5_SetConfig+0x6e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <TIM_OC5_SetConfig+0xb4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <TIM_OC5_SetConfig+0x6e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <TIM_OC5_SetConfig+0xb8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_OC5_SetConfig+0x6e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <TIM_OC5_SetConfig+0xbc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d109      	bne.n	8005c3e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <TIM_OC5_SetConfig+0xa4>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	46c0      	nop			; (mov r8, r8)
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b006      	add	sp, #24
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	fffeffff 	.word	0xfffeffff
 8005c64:	fffeff8f 	.word	0xfffeff8f
 8005c68:	fffdffff 	.word	0xfffdffff
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800

08005c7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	4a24      	ldr	r2, [pc, #144]	; (8005d24 <TIM_OC6_SetConfig+0xa8>)
 8005c92:	401a      	ands	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <TIM_OC6_SetConfig+0xac>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	021b      	lsls	r3, r3, #8
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <TIM_OC6_SetConfig+0xb0>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	051b      	lsls	r3, r3, #20
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a18      	ldr	r2, [pc, #96]	; (8005d30 <TIM_OC6_SetConfig+0xb4>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <TIM_OC6_SetConfig+0x70>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <TIM_OC6_SetConfig+0xb8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_OC6_SetConfig+0x70>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a16      	ldr	r2, [pc, #88]	; (8005d38 <TIM_OC6_SetConfig+0xbc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC6_SetConfig+0x70>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <TIM_OC6_SetConfig+0xc0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d109      	bne.n	8005d00 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <TIM_OC6_SetConfig+0xc4>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	029b      	lsls	r3, r3, #10
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b006      	add	sp, #24
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	ffefffff 	.word	0xffefffff
 8005d28:	feff8fff 	.word	0xfeff8fff
 8005d2c:	ffdfffff 	.word	0xffdfffff
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800
 8005d40:	fffbffff 	.word	0xfffbffff

08005d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4393      	bics	r3, r2
 8005d5e:	001a      	movs	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	22f0      	movs	r2, #240	; 0xf0
 8005d6e:	4393      	bics	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	220a      	movs	r2, #10
 8005d80:	4393      	bics	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	621a      	str	r2, [r3, #32]
}
 8005d98:	46c0      	nop			; (mov r8, r8)
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b006      	add	sp, #24
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	2210      	movs	r2, #16
 8005db8:	4393      	bics	r3, r2
 8005dba:	001a      	movs	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <TIM_TI2_ConfigInputStage+0x60>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	031b      	lsls	r3, r3, #12
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	22a0      	movs	r2, #160	; 0xa0
 8005ddc:	4393      	bics	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b006      	add	sp, #24
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	ffff0fff 	.word	0xffff0fff

08005e04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <TIM_ITRx_SetConfig+0x34>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	2207      	movs	r2, #7
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	609a      	str	r2, [r3, #8]
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b004      	add	sp, #16
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	ffcfff8f 	.word	0xffcfff8f

08005e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <TIM_ETR_SetConfig+0x3c>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	609a      	str	r2, [r3, #8]
}
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b006      	add	sp, #24
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	ffff00ff 	.word	0xffff00ff

08005e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	221f      	movs	r2, #31
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	2201      	movs	r2, #1
 8005e90:	409a      	lsls	r2, r3
 8005e92:	0013      	movs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	43d2      	mvns	r2, r2
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1a      	ldr	r2, [r3, #32]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	211f      	movs	r1, #31
 8005eac:	400b      	ands	r3, r1
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4099      	lsls	r1, r3
 8005eb2:	000b      	movs	r3, r1
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b006      	add	sp, #24
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	223c      	movs	r2, #60	; 0x3c
 8005ed2:	5c9b      	ldrb	r3, [r3, r2]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e055      	b.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	223c      	movs	r2, #60	; 0x3c
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	223d      	movs	r2, #61	; 0x3d
 8005ee8:	2102      	movs	r1, #2
 8005eea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a23      	ldr	r2, [pc, #140]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d108      	bne.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a22      	ldr	r2, [pc, #136]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2270      	movs	r2, #112	; 0x70
 8005f1c:	4393      	bics	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a16      	ldr	r2, [pc, #88]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00f      	beq.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	05db      	lsls	r3, r3, #23
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d009      	beq.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a12      	ldr	r2, [pc, #72]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d004      	beq.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a11      	ldr	r2, [pc, #68]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d10c      	bne.n	8005f76 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2280      	movs	r2, #128	; 0x80
 8005f60:	4393      	bics	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	223d      	movs	r2, #61	; 0x3d
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	223c      	movs	r2, #60	; 0x3c
 8005f82:	2100      	movs	r1, #0
 8005f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	0018      	movs	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	b004      	add	sp, #16
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	ff0fffff 	.word	0xff0fffff
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40014000 	.word	0x40014000

08005fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b002      	add	sp, #8
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fb8:	46c0      	nop			; (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fc8:	46c0      	nop			; (mov r8, r8)
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b002      	add	sp, #8
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e046      	b.n	8006070 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2288      	movs	r2, #136	; 0x88
 8005fe6:	589b      	ldr	r3, [r3, r2]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d107      	bne.n	8005ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2284      	movs	r2, #132	; 0x84
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f7fb fda4 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2288      	movs	r2, #136	; 0x88
 8006000:	2124      	movs	r1, #36	; 0x24
 8006002:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2101      	movs	r1, #1
 8006010:	438a      	bics	r2, r1
 8006012:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	0018      	movs	r0, r3
 8006020:	f000 ff6e 	bl	8006f00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	0018      	movs	r0, r3
 8006028:	f000 fcac 	bl	8006984 <UART_SetConfig>
 800602c:	0003      	movs	r3, r0
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e01c      	b.n	8006070 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	490d      	ldr	r1, [pc, #52]	; (8006078 <HAL_UART_Init+0xa8>)
 8006042:	400a      	ands	r2, r1
 8006044:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	212a      	movs	r1, #42	; 0x2a
 8006052:	438a      	bics	r2, r1
 8006054:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2101      	movs	r1, #1
 8006062:	430a      	orrs	r2, r1
 8006064:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 fffd 	bl	8007068 <UART_CheckIdleState>
 800606e:	0003      	movs	r3, r0
}
 8006070:	0018      	movs	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	b002      	add	sp, #8
 8006076:	bd80      	pop	{r7, pc}
 8006078:	ffffb7ff 	.word	0xffffb7ff

0800607c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e032      	b.n	80060f4 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2288      	movs	r2, #136	; 0x88
 8006092:	2124      	movs	r1, #36	; 0x24
 8006094:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2101      	movs	r1, #1
 80060a2:	438a      	bics	r2, r1
 80060a4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2200      	movs	r2, #0
 80060b4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2200      	movs	r2, #0
 80060bc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	0018      	movs	r0, r3
 80060c2:	f7fb fda7 	bl	8001c14 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2290      	movs	r2, #144	; 0x90
 80060ca:	2100      	movs	r1, #0
 80060cc:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2288      	movs	r2, #136	; 0x88
 80060d2:	2100      	movs	r1, #0
 80060d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	228c      	movs	r2, #140	; 0x8c
 80060da:	2100      	movs	r1, #0
 80060dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2284      	movs	r2, #132	; 0x84
 80060ee:	2100      	movs	r1, #0
 80060f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	0018      	movs	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b002      	add	sp, #8
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08a      	sub	sp, #40	; 0x28
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	1dbb      	adds	r3, r7, #6
 800610a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2288      	movs	r2, #136	; 0x88
 8006110:	589b      	ldr	r3, [r3, r2]
 8006112:	2b20      	cmp	r3, #32
 8006114:	d000      	beq.n	8006118 <HAL_UART_Transmit+0x1c>
 8006116:	e090      	b.n	800623a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_UART_Transmit+0x2a>
 800611e:	1dbb      	adds	r3, r7, #6
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e088      	b.n	800623c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	015b      	lsls	r3, r3, #5
 8006132:	429a      	cmp	r2, r3
 8006134:	d109      	bne.n	800614a <HAL_UART_Transmit+0x4e>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d105      	bne.n	800614a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2201      	movs	r2, #1
 8006142:	4013      	ands	r3, r2
 8006144:	d001      	beq.n	800614a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e078      	b.n	800623c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2290      	movs	r2, #144	; 0x90
 800614e:	2100      	movs	r1, #0
 8006150:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2288      	movs	r2, #136	; 0x88
 8006156:	2121      	movs	r1, #33	; 0x21
 8006158:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800615a:	f7fb febf 	bl	8001edc <HAL_GetTick>
 800615e:	0003      	movs	r3, r0
 8006160:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1dba      	adds	r2, r7, #6
 8006166:	2154      	movs	r1, #84	; 0x54
 8006168:	8812      	ldrh	r2, [r2, #0]
 800616a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1dba      	adds	r2, r7, #6
 8006170:	2156      	movs	r1, #86	; 0x56
 8006172:	8812      	ldrh	r2, [r2, #0]
 8006174:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	015b      	lsls	r3, r3, #5
 800617e:	429a      	cmp	r2, r3
 8006180:	d108      	bne.n	8006194 <HAL_UART_Transmit+0x98>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d104      	bne.n	8006194 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	e003      	b.n	800619c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800619c:	e030      	b.n	8006200 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	0013      	movs	r3, r2
 80061a8:	2200      	movs	r2, #0
 80061aa:	2180      	movs	r1, #128	; 0x80
 80061ac:	f001 f806 	bl	80071bc <UART_WaitOnFlagUntilTimeout>
 80061b0:	1e03      	subs	r3, r0, #0
 80061b2:	d005      	beq.n	80061c0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2288      	movs	r2, #136	; 0x88
 80061b8:	2120      	movs	r1, #32
 80061ba:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e03d      	b.n	800623c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10b      	bne.n	80061de <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	001a      	movs	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	05d2      	lsls	r2, r2, #23
 80061d2:	0dd2      	lsrs	r2, r2, #23
 80061d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	3302      	adds	r3, #2
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	e007      	b.n	80061ee <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	3301      	adds	r3, #1
 80061ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2256      	movs	r2, #86	; 0x56
 80061f2:	5a9b      	ldrh	r3, [r3, r2]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b299      	uxth	r1, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2256      	movs	r2, #86	; 0x56
 80061fe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2256      	movs	r2, #86	; 0x56
 8006204:	5a9b      	ldrh	r3, [r3, r2]
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1c8      	bne.n	800619e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	0013      	movs	r3, r2
 8006216:	2200      	movs	r2, #0
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	f000 ffcf 	bl	80071bc <UART_WaitOnFlagUntilTimeout>
 800621e:	1e03      	subs	r3, r0, #0
 8006220:	d005      	beq.n	800622e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2288      	movs	r2, #136	; 0x88
 8006226:	2120      	movs	r1, #32
 8006228:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e006      	b.n	800623c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2288      	movs	r2, #136	; 0x88
 8006232:	2120      	movs	r1, #32
 8006234:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	e000      	b.n	800623c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800623a:	2302      	movs	r3, #2
  }
}
 800623c:	0018      	movs	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	b008      	add	sp, #32
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	1dbb      	adds	r3, r7, #6
 8006250:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	228c      	movs	r2, #140	; 0x8c
 8006256:	589b      	ldr	r3, [r3, r2]
 8006258:	2b20      	cmp	r3, #32
 800625a:	d14a      	bne.n	80062f2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_UART_Receive_IT+0x26>
 8006262:	1dbb      	adds	r3, r7, #6
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e042      	b.n	80062f4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	015b      	lsls	r3, r3, #5
 8006276:	429a      	cmp	r2, r3
 8006278:	d109      	bne.n	800628e <HAL_UART_Receive_IT+0x4a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2201      	movs	r2, #1
 8006286:	4013      	ands	r3, r2
 8006288:	d001      	beq.n	800628e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e032      	b.n	80062f4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a18      	ldr	r2, [pc, #96]	; (80062fc <HAL_UART_Receive_IT+0xb8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d020      	beq.n	80062e0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	2380      	movs	r3, #128	; 0x80
 80062a6:	041b      	lsls	r3, r3, #16
 80062a8:	4013      	ands	r3, r2
 80062aa:	d019      	beq.n	80062e0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ac:	f3ef 8310 	mrs	r3, PRIMASK
 80062b0:	613b      	str	r3, [r7, #16]
  return(result);
 80062b2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062b4:	61fb      	str	r3, [r7, #28]
 80062b6:	2301      	movs	r3, #1
 80062b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f383 8810 	msr	PRIMASK, r3
}
 80062c0:	46c0      	nop			; (mov r8, r8)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2180      	movs	r1, #128	; 0x80
 80062ce:	04c9      	lsls	r1, r1, #19
 80062d0:	430a      	orrs	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f383 8810 	msr	PRIMASK, r3
}
 80062de:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062e0:	1dbb      	adds	r3, r7, #6
 80062e2:	881a      	ldrh	r2, [r3, #0]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 ffd7 	bl	800729c <UART_Start_Receive_IT>
 80062ee:	0003      	movs	r3, r0
 80062f0:	e000      	b.n	80062f4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80062f2:	2302      	movs	r3, #2
  }
}
 80062f4:	0018      	movs	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b008      	add	sp, #32
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40008000 	.word	0x40008000

08006300 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006300:	b5b0      	push	{r4, r5, r7, lr}
 8006302:	b0aa      	sub	sp, #168	; 0xa8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	22a4      	movs	r2, #164	; 0xa4
 8006310:	18b9      	adds	r1, r7, r2
 8006312:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	20a0      	movs	r0, #160	; 0xa0
 800631c:	1839      	adds	r1, r7, r0
 800631e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	249c      	movs	r4, #156	; 0x9c
 8006328:	1939      	adds	r1, r7, r4
 800632a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800632c:	0011      	movs	r1, r2
 800632e:	18bb      	adds	r3, r7, r2
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4aa2      	ldr	r2, [pc, #648]	; (80065bc <HAL_UART_IRQHandler+0x2bc>)
 8006334:	4013      	ands	r3, r2
 8006336:	2298      	movs	r2, #152	; 0x98
 8006338:	18bd      	adds	r5, r7, r2
 800633a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800633c:	18bb      	adds	r3, r7, r2
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d11a      	bne.n	800637a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006344:	187b      	adds	r3, r7, r1
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2220      	movs	r2, #32
 800634a:	4013      	ands	r3, r2
 800634c:	d015      	beq.n	800637a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800634e:	183b      	adds	r3, r7, r0
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2220      	movs	r2, #32
 8006354:	4013      	ands	r3, r2
 8006356:	d105      	bne.n	8006364 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006358:	193b      	adds	r3, r7, r4
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	2380      	movs	r3, #128	; 0x80
 800635e:	055b      	lsls	r3, r3, #21
 8006360:	4013      	ands	r3, r2
 8006362:	d00a      	beq.n	800637a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006368:	2b00      	cmp	r3, #0
 800636a:	d100      	bne.n	800636e <HAL_UART_IRQHandler+0x6e>
 800636c:	e2dc      	b.n	8006928 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	0010      	movs	r0, r2
 8006376:	4798      	blx	r3
      }
      return;
 8006378:	e2d6      	b.n	8006928 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800637a:	2398      	movs	r3, #152	; 0x98
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d100      	bne.n	8006386 <HAL_UART_IRQHandler+0x86>
 8006384:	e122      	b.n	80065cc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006386:	239c      	movs	r3, #156	; 0x9c
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a8c      	ldr	r2, [pc, #560]	; (80065c0 <HAL_UART_IRQHandler+0x2c0>)
 800638e:	4013      	ands	r3, r2
 8006390:	d106      	bne.n	80063a0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006392:	23a0      	movs	r3, #160	; 0xa0
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a8a      	ldr	r2, [pc, #552]	; (80065c4 <HAL_UART_IRQHandler+0x2c4>)
 800639a:	4013      	ands	r3, r2
 800639c:	d100      	bne.n	80063a0 <HAL_UART_IRQHandler+0xa0>
 800639e:	e115      	b.n	80065cc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063a0:	23a4      	movs	r3, #164	; 0xa4
 80063a2:	18fb      	adds	r3, r7, r3
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2201      	movs	r2, #1
 80063a8:	4013      	ands	r3, r2
 80063aa:	d012      	beq.n	80063d2 <HAL_UART_IRQHandler+0xd2>
 80063ac:	23a0      	movs	r3, #160	; 0xa0
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	2380      	movs	r3, #128	; 0x80
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4013      	ands	r3, r2
 80063b8:	d00b      	beq.n	80063d2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2201      	movs	r2, #1
 80063c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2290      	movs	r2, #144	; 0x90
 80063c6:	589b      	ldr	r3, [r3, r2]
 80063c8:	2201      	movs	r2, #1
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2190      	movs	r1, #144	; 0x90
 80063d0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063d2:	23a4      	movs	r3, #164	; 0xa4
 80063d4:	18fb      	adds	r3, r7, r3
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2202      	movs	r2, #2
 80063da:	4013      	ands	r3, r2
 80063dc:	d011      	beq.n	8006402 <HAL_UART_IRQHandler+0x102>
 80063de:	239c      	movs	r3, #156	; 0x9c
 80063e0:	18fb      	adds	r3, r7, r3
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	4013      	ands	r3, r2
 80063e8:	d00b      	beq.n	8006402 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2202      	movs	r2, #2
 80063f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2290      	movs	r2, #144	; 0x90
 80063f6:	589b      	ldr	r3, [r3, r2]
 80063f8:	2204      	movs	r2, #4
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2190      	movs	r1, #144	; 0x90
 8006400:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006402:	23a4      	movs	r3, #164	; 0xa4
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2204      	movs	r2, #4
 800640a:	4013      	ands	r3, r2
 800640c:	d011      	beq.n	8006432 <HAL_UART_IRQHandler+0x132>
 800640e:	239c      	movs	r3, #156	; 0x9c
 8006410:	18fb      	adds	r3, r7, r3
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2201      	movs	r2, #1
 8006416:	4013      	ands	r3, r2
 8006418:	d00b      	beq.n	8006432 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2204      	movs	r2, #4
 8006420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2290      	movs	r2, #144	; 0x90
 8006426:	589b      	ldr	r3, [r3, r2]
 8006428:	2202      	movs	r2, #2
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2190      	movs	r1, #144	; 0x90
 8006430:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006432:	23a4      	movs	r3, #164	; 0xa4
 8006434:	18fb      	adds	r3, r7, r3
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2208      	movs	r2, #8
 800643a:	4013      	ands	r3, r2
 800643c:	d017      	beq.n	800646e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800643e:	23a0      	movs	r3, #160	; 0xa0
 8006440:	18fb      	adds	r3, r7, r3
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2220      	movs	r2, #32
 8006446:	4013      	ands	r3, r2
 8006448:	d105      	bne.n	8006456 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800644a:	239c      	movs	r3, #156	; 0x9c
 800644c:	18fb      	adds	r3, r7, r3
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5b      	ldr	r2, [pc, #364]	; (80065c0 <HAL_UART_IRQHandler+0x2c0>)
 8006452:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006454:	d00b      	beq.n	800646e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2208      	movs	r2, #8
 800645c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2290      	movs	r2, #144	; 0x90
 8006462:	589b      	ldr	r3, [r3, r2]
 8006464:	2208      	movs	r2, #8
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2190      	movs	r1, #144	; 0x90
 800646c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800646e:	23a4      	movs	r3, #164	; 0xa4
 8006470:	18fb      	adds	r3, r7, r3
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	4013      	ands	r3, r2
 800647a:	d013      	beq.n	80064a4 <HAL_UART_IRQHandler+0x1a4>
 800647c:	23a0      	movs	r3, #160	; 0xa0
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	2380      	movs	r3, #128	; 0x80
 8006484:	04db      	lsls	r3, r3, #19
 8006486:	4013      	ands	r3, r2
 8006488:	d00c      	beq.n	80064a4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2280      	movs	r2, #128	; 0x80
 8006490:	0112      	lsls	r2, r2, #4
 8006492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2290      	movs	r2, #144	; 0x90
 8006498:	589b      	ldr	r3, [r3, r2]
 800649a:	2220      	movs	r2, #32
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2190      	movs	r1, #144	; 0x90
 80064a2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2290      	movs	r2, #144	; 0x90
 80064a8:	589b      	ldr	r3, [r3, r2]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d100      	bne.n	80064b0 <HAL_UART_IRQHandler+0x1b0>
 80064ae:	e23d      	b.n	800692c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064b0:	23a4      	movs	r3, #164	; 0xa4
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2220      	movs	r2, #32
 80064b8:	4013      	ands	r3, r2
 80064ba:	d015      	beq.n	80064e8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064bc:	23a0      	movs	r3, #160	; 0xa0
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2220      	movs	r2, #32
 80064c4:	4013      	ands	r3, r2
 80064c6:	d106      	bne.n	80064d6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064c8:	239c      	movs	r3, #156	; 0x9c
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	2380      	movs	r3, #128	; 0x80
 80064d0:	055b      	lsls	r3, r3, #21
 80064d2:	4013      	ands	r3, r2
 80064d4:	d008      	beq.n	80064e8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	0010      	movs	r0, r2
 80064e6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2290      	movs	r2, #144	; 0x90
 80064ec:	589b      	ldr	r3, [r3, r2]
 80064ee:	2194      	movs	r1, #148	; 0x94
 80064f0:	187a      	adds	r2, r7, r1
 80064f2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2240      	movs	r2, #64	; 0x40
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d004      	beq.n	800650c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006502:	187b      	adds	r3, r7, r1
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2228      	movs	r2, #40	; 0x28
 8006508:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800650a:	d04c      	beq.n	80065a6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	0018      	movs	r0, r3
 8006510:	f000 ffe8 	bl	80074e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2240      	movs	r2, #64	; 0x40
 800651c:	4013      	ands	r3, r2
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d13c      	bne.n	800659c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006522:	f3ef 8310 	mrs	r3, PRIMASK
 8006526:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006528:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800652a:	2090      	movs	r0, #144	; 0x90
 800652c:	183a      	adds	r2, r7, r0
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	2301      	movs	r3, #1
 8006532:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006536:	f383 8810 	msr	PRIMASK, r3
}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2140      	movs	r1, #64	; 0x40
 8006548:	438a      	bics	r2, r1
 800654a:	609a      	str	r2, [r3, #8]
 800654c:	183b      	adds	r3, r7, r0
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006554:	f383 8810 	msr	PRIMASK, r3
}
 8006558:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2280      	movs	r2, #128	; 0x80
 800655e:	589b      	ldr	r3, [r3, r2]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d016      	beq.n	8006592 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2280      	movs	r2, #128	; 0x80
 8006568:	589b      	ldr	r3, [r3, r2]
 800656a:	4a17      	ldr	r2, [pc, #92]	; (80065c8 <HAL_UART_IRQHandler+0x2c8>)
 800656c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2280      	movs	r2, #128	; 0x80
 8006572:	589b      	ldr	r3, [r3, r2]
 8006574:	0018      	movs	r0, r3
 8006576:	f7fc fcbb 	bl	8002ef0 <HAL_DMA_Abort_IT>
 800657a:	1e03      	subs	r3, r0, #0
 800657c:	d01c      	beq.n	80065b8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2280      	movs	r2, #128	; 0x80
 8006582:	589b      	ldr	r3, [r3, r2]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	2180      	movs	r1, #128	; 0x80
 800658a:	5852      	ldr	r2, [r2, r1]
 800658c:	0010      	movs	r0, r2
 800658e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	e012      	b.n	80065b8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	0018      	movs	r0, r3
 8006596:	f000 f9e1 	bl	800695c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659a:	e00d      	b.n	80065b8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	0018      	movs	r0, r3
 80065a0:	f000 f9dc 	bl	800695c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a4:	e008      	b.n	80065b8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	0018      	movs	r0, r3
 80065aa:	f000 f9d7 	bl	800695c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2290      	movs	r2, #144	; 0x90
 80065b2:	2100      	movs	r1, #0
 80065b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80065b6:	e1b9      	b.n	800692c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b8:	46c0      	nop			; (mov r8, r8)
    return;
 80065ba:	e1b7      	b.n	800692c <HAL_UART_IRQHandler+0x62c>
 80065bc:	0000080f 	.word	0x0000080f
 80065c0:	10000001 	.word	0x10000001
 80065c4:	04000120 	.word	0x04000120
 80065c8:	080075b1 	.word	0x080075b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d000      	beq.n	80065d6 <HAL_UART_IRQHandler+0x2d6>
 80065d4:	e13e      	b.n	8006854 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065d6:	23a4      	movs	r3, #164	; 0xa4
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2210      	movs	r2, #16
 80065de:	4013      	ands	r3, r2
 80065e0:	d100      	bne.n	80065e4 <HAL_UART_IRQHandler+0x2e4>
 80065e2:	e137      	b.n	8006854 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065e4:	23a0      	movs	r3, #160	; 0xa0
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2210      	movs	r2, #16
 80065ec:	4013      	ands	r3, r2
 80065ee:	d100      	bne.n	80065f2 <HAL_UART_IRQHandler+0x2f2>
 80065f0:	e130      	b.n	8006854 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2210      	movs	r2, #16
 80065f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2240      	movs	r2, #64	; 0x40
 8006602:	4013      	ands	r3, r2
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	d000      	beq.n	800660a <HAL_UART_IRQHandler+0x30a>
 8006608:	e0a4      	b.n	8006754 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	589b      	ldr	r3, [r3, r2]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	217e      	movs	r1, #126	; 0x7e
 8006616:	187b      	adds	r3, r7, r1
 8006618:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800661a:	187b      	adds	r3, r7, r1
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d100      	bne.n	8006624 <HAL_UART_IRQHandler+0x324>
 8006622:	e185      	b.n	8006930 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	225c      	movs	r2, #92	; 0x5c
 8006628:	5a9b      	ldrh	r3, [r3, r2]
 800662a:	187a      	adds	r2, r7, r1
 800662c:	8812      	ldrh	r2, [r2, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d300      	bcc.n	8006634 <HAL_UART_IRQHandler+0x334>
 8006632:	e17d      	b.n	8006930 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	187a      	adds	r2, r7, r1
 8006638:	215e      	movs	r1, #94	; 0x5e
 800663a:	8812      	ldrh	r2, [r2, #0]
 800663c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2280      	movs	r2, #128	; 0x80
 8006642:	589b      	ldr	r3, [r3, r2]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2220      	movs	r2, #32
 800664a:	4013      	ands	r3, r2
 800664c:	d170      	bne.n	8006730 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664e:	f3ef 8310 	mrs	r3, PRIMASK
 8006652:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006656:	67bb      	str	r3, [r7, #120]	; 0x78
 8006658:	2301      	movs	r3, #1
 800665a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	f383 8810 	msr	PRIMASK, r3
}
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	49b4      	ldr	r1, [pc, #720]	; (8006940 <HAL_UART_IRQHandler+0x640>)
 8006670:	400a      	ands	r2, r1
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006676:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	f383 8810 	msr	PRIMASK, r3
}
 800667e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006680:	f3ef 8310 	mrs	r3, PRIMASK
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006688:	677b      	str	r3, [r7, #116]	; 0x74
 800668a:	2301      	movs	r3, #1
 800668c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006690:	f383 8810 	msr	PRIMASK, r3
}
 8006694:	46c0      	nop			; (mov r8, r8)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2101      	movs	r1, #1
 80066a2:	438a      	bics	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]
 80066a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ac:	f383 8810 	msr	PRIMASK, r3
}
 80066b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066b2:	f3ef 8310 	mrs	r3, PRIMASK
 80066b6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80066b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ba:	673b      	str	r3, [r7, #112]	; 0x70
 80066bc:	2301      	movs	r3, #1
 80066be:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c2:	f383 8810 	msr	PRIMASK, r3
}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2140      	movs	r1, #64	; 0x40
 80066d4:	438a      	bics	r2, r1
 80066d6:	609a      	str	r2, [r3, #8]
 80066d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066da:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066de:	f383 8810 	msr	PRIMASK, r3
}
 80066e2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	228c      	movs	r2, #140	; 0x8c
 80066e8:	2120      	movs	r1, #32
 80066ea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f2:	f3ef 8310 	mrs	r3, PRIMASK
 80066f6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80066f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066fc:	2301      	movs	r3, #1
 80066fe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2110      	movs	r1, #16
 8006714:	438a      	bics	r2, r1
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800671e:	f383 8810 	msr	PRIMASK, r3
}
 8006722:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2280      	movs	r2, #128	; 0x80
 8006728:	589b      	ldr	r3, [r3, r2]
 800672a:	0018      	movs	r0, r3
 800672c:	f7fc fb7e 	bl	8002e2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	225c      	movs	r2, #92	; 0x5c
 800673a:	5a9a      	ldrh	r2, [r3, r2]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	215e      	movs	r1, #94	; 0x5e
 8006740:	5a5b      	ldrh	r3, [r3, r1]
 8006742:	b29b      	uxth	r3, r3
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	b29a      	uxth	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	0011      	movs	r1, r2
 800674c:	0018      	movs	r0, r3
 800674e:	f000 f90d 	bl	800696c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006752:	e0ed      	b.n	8006930 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	225c      	movs	r2, #92	; 0x5c
 8006758:	5a99      	ldrh	r1, [r3, r2]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	225e      	movs	r2, #94	; 0x5e
 800675e:	5a9b      	ldrh	r3, [r3, r2]
 8006760:	b29a      	uxth	r2, r3
 8006762:	208e      	movs	r0, #142	; 0x8e
 8006764:	183b      	adds	r3, r7, r0
 8006766:	1a8a      	subs	r2, r1, r2
 8006768:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	225e      	movs	r2, #94	; 0x5e
 800676e:	5a9b      	ldrh	r3, [r3, r2]
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d100      	bne.n	8006778 <HAL_UART_IRQHandler+0x478>
 8006776:	e0dd      	b.n	8006934 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006778:	183b      	adds	r3, r7, r0
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d100      	bne.n	8006782 <HAL_UART_IRQHandler+0x482>
 8006780:	e0d8      	b.n	8006934 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006782:	f3ef 8310 	mrs	r3, PRIMASK
 8006786:	60fb      	str	r3, [r7, #12]
  return(result);
 8006788:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800678a:	2488      	movs	r4, #136	; 0x88
 800678c:	193a      	adds	r2, r7, r4
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	2301      	movs	r3, #1
 8006792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f383 8810 	msr	PRIMASK, r3
}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4967      	ldr	r1, [pc, #412]	; (8006944 <HAL_UART_IRQHandler+0x644>)
 80067a8:	400a      	ands	r2, r1
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	193b      	adds	r3, r7, r4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f383 8810 	msr	PRIMASK, r3
}
 80067b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ba:	f3ef 8310 	mrs	r3, PRIMASK
 80067be:	61bb      	str	r3, [r7, #24]
  return(result);
 80067c0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067c2:	2484      	movs	r4, #132	; 0x84
 80067c4:	193a      	adds	r2, r7, r4
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	2301      	movs	r3, #1
 80067ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f383 8810 	msr	PRIMASK, r3
}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	495a      	ldr	r1, [pc, #360]	; (8006948 <HAL_UART_IRQHandler+0x648>)
 80067e0:	400a      	ands	r2, r1
 80067e2:	609a      	str	r2, [r3, #8]
 80067e4:	193b      	adds	r3, r7, r4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	f383 8810 	msr	PRIMASK, r3
}
 80067f0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	228c      	movs	r2, #140	; 0x8c
 80067f6:	2120      	movs	r1, #32
 80067f8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006806:	f3ef 8310 	mrs	r3, PRIMASK
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680e:	2480      	movs	r4, #128	; 0x80
 8006810:	193a      	adds	r2, r7, r4
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	2301      	movs	r3, #1
 8006816:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	f383 8810 	msr	PRIMASK, r3
}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2110      	movs	r1, #16
 800682c:	438a      	bics	r2, r1
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	193b      	adds	r3, r7, r4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	f383 8810 	msr	PRIMASK, r3
}
 800683c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006844:	183b      	adds	r3, r7, r0
 8006846:	881a      	ldrh	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	0011      	movs	r1, r2
 800684c:	0018      	movs	r0, r3
 800684e:	f000 f88d 	bl	800696c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006852:	e06f      	b.n	8006934 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006854:	23a4      	movs	r3, #164	; 0xa4
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	2380      	movs	r3, #128	; 0x80
 800685c:	035b      	lsls	r3, r3, #13
 800685e:	4013      	ands	r3, r2
 8006860:	d010      	beq.n	8006884 <HAL_UART_IRQHandler+0x584>
 8006862:	239c      	movs	r3, #156	; 0x9c
 8006864:	18fb      	adds	r3, r7, r3
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	2380      	movs	r3, #128	; 0x80
 800686a:	03db      	lsls	r3, r3, #15
 800686c:	4013      	ands	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2280      	movs	r2, #128	; 0x80
 8006876:	0352      	lsls	r2, r2, #13
 8006878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0018      	movs	r0, r3
 800687e:	f001 fbeb 	bl	8008058 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006882:	e05a      	b.n	800693a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006884:	23a4      	movs	r3, #164	; 0xa4
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	4013      	ands	r3, r2
 800688e:	d016      	beq.n	80068be <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006890:	23a0      	movs	r3, #160	; 0xa0
 8006892:	18fb      	adds	r3, r7, r3
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2280      	movs	r2, #128	; 0x80
 8006898:	4013      	ands	r3, r2
 800689a:	d106      	bne.n	80068aa <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800689c:	239c      	movs	r3, #156	; 0x9c
 800689e:	18fb      	adds	r3, r7, r3
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	041b      	lsls	r3, r3, #16
 80068a6:	4013      	ands	r3, r2
 80068a8:	d009      	beq.n	80068be <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d042      	beq.n	8006938 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	0010      	movs	r0, r2
 80068ba:	4798      	blx	r3
    }
    return;
 80068bc:	e03c      	b.n	8006938 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068be:	23a4      	movs	r3, #164	; 0xa4
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2240      	movs	r2, #64	; 0x40
 80068c6:	4013      	ands	r3, r2
 80068c8:	d00a      	beq.n	80068e0 <HAL_UART_IRQHandler+0x5e0>
 80068ca:	23a0      	movs	r3, #160	; 0xa0
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2240      	movs	r2, #64	; 0x40
 80068d2:	4013      	ands	r3, r2
 80068d4:	d004      	beq.n	80068e0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	0018      	movs	r0, r3
 80068da:	f000 fe80 	bl	80075de <UART_EndTransmit_IT>
    return;
 80068de:	e02c      	b.n	800693a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068e0:	23a4      	movs	r3, #164	; 0xa4
 80068e2:	18fb      	adds	r3, r7, r3
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	2380      	movs	r3, #128	; 0x80
 80068e8:	041b      	lsls	r3, r3, #16
 80068ea:	4013      	ands	r3, r2
 80068ec:	d00b      	beq.n	8006906 <HAL_UART_IRQHandler+0x606>
 80068ee:	23a0      	movs	r3, #160	; 0xa0
 80068f0:	18fb      	adds	r3, r7, r3
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	2380      	movs	r3, #128	; 0x80
 80068f6:	05db      	lsls	r3, r3, #23
 80068f8:	4013      	ands	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	0018      	movs	r0, r3
 8006900:	f001 fbba 	bl	8008078 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006904:	e019      	b.n	800693a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006906:	23a4      	movs	r3, #164	; 0xa4
 8006908:	18fb      	adds	r3, r7, r3
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	2380      	movs	r3, #128	; 0x80
 800690e:	045b      	lsls	r3, r3, #17
 8006910:	4013      	ands	r3, r2
 8006912:	d012      	beq.n	800693a <HAL_UART_IRQHandler+0x63a>
 8006914:	23a0      	movs	r3, #160	; 0xa0
 8006916:	18fb      	adds	r3, r7, r3
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	da0d      	bge.n	800693a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	0018      	movs	r0, r3
 8006922:	f001 fba1 	bl	8008068 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006926:	e008      	b.n	800693a <HAL_UART_IRQHandler+0x63a>
      return;
 8006928:	46c0      	nop			; (mov r8, r8)
 800692a:	e006      	b.n	800693a <HAL_UART_IRQHandler+0x63a>
    return;
 800692c:	46c0      	nop			; (mov r8, r8)
 800692e:	e004      	b.n	800693a <HAL_UART_IRQHandler+0x63a>
      return;
 8006930:	46c0      	nop			; (mov r8, r8)
 8006932:	e002      	b.n	800693a <HAL_UART_IRQHandler+0x63a>
      return;
 8006934:	46c0      	nop			; (mov r8, r8)
 8006936:	e000      	b.n	800693a <HAL_UART_IRQHandler+0x63a>
    return;
 8006938:	46c0      	nop			; (mov r8, r8)
  }
}
 800693a:	46bd      	mov	sp, r7
 800693c:	b02a      	add	sp, #168	; 0xa8
 800693e:	bdb0      	pop	{r4, r5, r7, pc}
 8006940:	fffffeff 	.word	0xfffffeff
 8006944:	fffffedf 	.word	0xfffffedf
 8006948:	effffffe 	.word	0xeffffffe

0800694c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006954:	46c0      	nop			; (mov r8, r8)
 8006956:	46bd      	mov	sp, r7
 8006958:	b002      	add	sp, #8
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006964:	46c0      	nop			; (mov r8, r8)
 8006966:	46bd      	mov	sp, r7
 8006968:	b002      	add	sp, #8
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	000a      	movs	r2, r1
 8006976:	1cbb      	adds	r3, r7, #2
 8006978:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	46bd      	mov	sp, r7
 800697e:	b002      	add	sp, #8
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006984:	b5b0      	push	{r4, r5, r7, lr}
 8006986:	b090      	sub	sp, #64	; 0x40
 8006988:	af00      	add	r7, sp, #0
 800698a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800698c:	231a      	movs	r3, #26
 800698e:	2220      	movs	r2, #32
 8006990:	189b      	adds	r3, r3, r2
 8006992:	19db      	adds	r3, r3, r7
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	431a      	orrs	r2, r3
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	431a      	orrs	r2, r3
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4aaf      	ldr	r2, [pc, #700]	; (8006c74 <UART_SetConfig+0x2f0>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	0019      	movs	r1, r3
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c2:	430b      	orrs	r3, r1
 80069c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4aaa      	ldr	r2, [pc, #680]	; (8006c78 <UART_SetConfig+0x2f4>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	0018      	movs	r0, r3
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	68d9      	ldr	r1, [r3, #12]
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	0003      	movs	r3, r0
 80069dc:	430b      	orrs	r3, r1
 80069de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4aa4      	ldr	r2, [pc, #656]	; (8006c7c <UART_SetConfig+0x2f8>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069f6:	4313      	orrs	r3, r2
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4a9f      	ldr	r2, [pc, #636]	; (8006c80 <UART_SetConfig+0x2fc>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	0019      	movs	r1, r3
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	220f      	movs	r2, #15
 8006a18:	4393      	bics	r3, r2
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	0003      	movs	r3, r0
 8006a26:	430b      	orrs	r3, r1
 8006a28:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a95      	ldr	r2, [pc, #596]	; (8006c84 <UART_SetConfig+0x300>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d131      	bne.n	8006a98 <UART_SetConfig+0x114>
 8006a34:	4b94      	ldr	r3, [pc, #592]	; (8006c88 <UART_SetConfig+0x304>)
 8006a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a38:	2203      	movs	r2, #3
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d01d      	beq.n	8006a7c <UART_SetConfig+0xf8>
 8006a40:	d823      	bhi.n	8006a8a <UART_SetConfig+0x106>
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d00c      	beq.n	8006a60 <UART_SetConfig+0xdc>
 8006a46:	d820      	bhi.n	8006a8a <UART_SetConfig+0x106>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <UART_SetConfig+0xce>
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d00e      	beq.n	8006a6e <UART_SetConfig+0xea>
 8006a50:	e01b      	b.n	8006a8a <UART_SetConfig+0x106>
 8006a52:	231b      	movs	r3, #27
 8006a54:	2220      	movs	r2, #32
 8006a56:	189b      	adds	r3, r3, r2
 8006a58:	19db      	adds	r3, r3, r7
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e0b4      	b.n	8006bca <UART_SetConfig+0x246>
 8006a60:	231b      	movs	r3, #27
 8006a62:	2220      	movs	r2, #32
 8006a64:	189b      	adds	r3, r3, r2
 8006a66:	19db      	adds	r3, r3, r7
 8006a68:	2202      	movs	r2, #2
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	e0ad      	b.n	8006bca <UART_SetConfig+0x246>
 8006a6e:	231b      	movs	r3, #27
 8006a70:	2220      	movs	r2, #32
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	19db      	adds	r3, r3, r7
 8006a76:	2204      	movs	r2, #4
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	e0a6      	b.n	8006bca <UART_SetConfig+0x246>
 8006a7c:	231b      	movs	r3, #27
 8006a7e:	2220      	movs	r2, #32
 8006a80:	189b      	adds	r3, r3, r2
 8006a82:	19db      	adds	r3, r3, r7
 8006a84:	2208      	movs	r2, #8
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	e09f      	b.n	8006bca <UART_SetConfig+0x246>
 8006a8a:	231b      	movs	r3, #27
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	189b      	adds	r3, r3, r2
 8006a90:	19db      	adds	r3, r3, r7
 8006a92:	2210      	movs	r2, #16
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e098      	b.n	8006bca <UART_SetConfig+0x246>
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a7b      	ldr	r2, [pc, #492]	; (8006c8c <UART_SetConfig+0x308>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d131      	bne.n	8006b06 <UART_SetConfig+0x182>
 8006aa2:	4b79      	ldr	r3, [pc, #484]	; (8006c88 <UART_SetConfig+0x304>)
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	220c      	movs	r2, #12
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b0c      	cmp	r3, #12
 8006aac:	d01d      	beq.n	8006aea <UART_SetConfig+0x166>
 8006aae:	d823      	bhi.n	8006af8 <UART_SetConfig+0x174>
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d00c      	beq.n	8006ace <UART_SetConfig+0x14a>
 8006ab4:	d820      	bhi.n	8006af8 <UART_SetConfig+0x174>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <UART_SetConfig+0x13c>
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d00e      	beq.n	8006adc <UART_SetConfig+0x158>
 8006abe:	e01b      	b.n	8006af8 <UART_SetConfig+0x174>
 8006ac0:	231b      	movs	r3, #27
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	189b      	adds	r3, r3, r2
 8006ac6:	19db      	adds	r3, r3, r7
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e07d      	b.n	8006bca <UART_SetConfig+0x246>
 8006ace:	231b      	movs	r3, #27
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	189b      	adds	r3, r3, r2
 8006ad4:	19db      	adds	r3, r3, r7
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	e076      	b.n	8006bca <UART_SetConfig+0x246>
 8006adc:	231b      	movs	r3, #27
 8006ade:	2220      	movs	r2, #32
 8006ae0:	189b      	adds	r3, r3, r2
 8006ae2:	19db      	adds	r3, r3, r7
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e06f      	b.n	8006bca <UART_SetConfig+0x246>
 8006aea:	231b      	movs	r3, #27
 8006aec:	2220      	movs	r2, #32
 8006aee:	189b      	adds	r3, r3, r2
 8006af0:	19db      	adds	r3, r3, r7
 8006af2:	2208      	movs	r2, #8
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e068      	b.n	8006bca <UART_SetConfig+0x246>
 8006af8:	231b      	movs	r3, #27
 8006afa:	2220      	movs	r2, #32
 8006afc:	189b      	adds	r3, r3, r2
 8006afe:	19db      	adds	r3, r3, r7
 8006b00:	2210      	movs	r2, #16
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	e061      	b.n	8006bca <UART_SetConfig+0x246>
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a61      	ldr	r2, [pc, #388]	; (8006c90 <UART_SetConfig+0x30c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d106      	bne.n	8006b1e <UART_SetConfig+0x19a>
 8006b10:	231b      	movs	r3, #27
 8006b12:	2220      	movs	r2, #32
 8006b14:	189b      	adds	r3, r3, r2
 8006b16:	19db      	adds	r3, r3, r7
 8006b18:	2200      	movs	r2, #0
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	e055      	b.n	8006bca <UART_SetConfig+0x246>
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a5c      	ldr	r2, [pc, #368]	; (8006c94 <UART_SetConfig+0x310>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d106      	bne.n	8006b36 <UART_SetConfig+0x1b2>
 8006b28:	231b      	movs	r3, #27
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	189b      	adds	r3, r3, r2
 8006b2e:	19db      	adds	r3, r3, r7
 8006b30:	2200      	movs	r2, #0
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e049      	b.n	8006bca <UART_SetConfig+0x246>
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a50      	ldr	r2, [pc, #320]	; (8006c7c <UART_SetConfig+0x2f8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d13e      	bne.n	8006bbe <UART_SetConfig+0x23a>
 8006b40:	4b51      	ldr	r3, [pc, #324]	; (8006c88 <UART_SetConfig+0x304>)
 8006b42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b44:	23c0      	movs	r3, #192	; 0xc0
 8006b46:	011b      	lsls	r3, r3, #4
 8006b48:	4013      	ands	r3, r2
 8006b4a:	22c0      	movs	r2, #192	; 0xc0
 8006b4c:	0112      	lsls	r2, r2, #4
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d027      	beq.n	8006ba2 <UART_SetConfig+0x21e>
 8006b52:	22c0      	movs	r2, #192	; 0xc0
 8006b54:	0112      	lsls	r2, r2, #4
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d82a      	bhi.n	8006bb0 <UART_SetConfig+0x22c>
 8006b5a:	2280      	movs	r2, #128	; 0x80
 8006b5c:	0112      	lsls	r2, r2, #4
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d011      	beq.n	8006b86 <UART_SetConfig+0x202>
 8006b62:	2280      	movs	r2, #128	; 0x80
 8006b64:	0112      	lsls	r2, r2, #4
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d822      	bhi.n	8006bb0 <UART_SetConfig+0x22c>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <UART_SetConfig+0x1f4>
 8006b6e:	2280      	movs	r2, #128	; 0x80
 8006b70:	00d2      	lsls	r2, r2, #3
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00e      	beq.n	8006b94 <UART_SetConfig+0x210>
 8006b76:	e01b      	b.n	8006bb0 <UART_SetConfig+0x22c>
 8006b78:	231b      	movs	r3, #27
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	189b      	adds	r3, r3, r2
 8006b7e:	19db      	adds	r3, r3, r7
 8006b80:	2200      	movs	r2, #0
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	e021      	b.n	8006bca <UART_SetConfig+0x246>
 8006b86:	231b      	movs	r3, #27
 8006b88:	2220      	movs	r2, #32
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	19db      	adds	r3, r3, r7
 8006b8e:	2202      	movs	r2, #2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e01a      	b.n	8006bca <UART_SetConfig+0x246>
 8006b94:	231b      	movs	r3, #27
 8006b96:	2220      	movs	r2, #32
 8006b98:	189b      	adds	r3, r3, r2
 8006b9a:	19db      	adds	r3, r3, r7
 8006b9c:	2204      	movs	r2, #4
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	e013      	b.n	8006bca <UART_SetConfig+0x246>
 8006ba2:	231b      	movs	r3, #27
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	189b      	adds	r3, r3, r2
 8006ba8:	19db      	adds	r3, r3, r7
 8006baa:	2208      	movs	r2, #8
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e00c      	b.n	8006bca <UART_SetConfig+0x246>
 8006bb0:	231b      	movs	r3, #27
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	189b      	adds	r3, r3, r2
 8006bb6:	19db      	adds	r3, r3, r7
 8006bb8:	2210      	movs	r2, #16
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	e005      	b.n	8006bca <UART_SetConfig+0x246>
 8006bbe:	231b      	movs	r3, #27
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	19db      	adds	r3, r3, r7
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2b      	ldr	r2, [pc, #172]	; (8006c7c <UART_SetConfig+0x2f8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d000      	beq.n	8006bd6 <UART_SetConfig+0x252>
 8006bd4:	e0a9      	b.n	8006d2a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bd6:	231b      	movs	r3, #27
 8006bd8:	2220      	movs	r2, #32
 8006bda:	189b      	adds	r3, r3, r2
 8006bdc:	19db      	adds	r3, r3, r7
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d015      	beq.n	8006c10 <UART_SetConfig+0x28c>
 8006be4:	dc18      	bgt.n	8006c18 <UART_SetConfig+0x294>
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	d00d      	beq.n	8006c06 <UART_SetConfig+0x282>
 8006bea:	dc15      	bgt.n	8006c18 <UART_SetConfig+0x294>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <UART_SetConfig+0x272>
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d005      	beq.n	8006c00 <UART_SetConfig+0x27c>
 8006bf4:	e010      	b.n	8006c18 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf6:	f7fd fe0f 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 8006bfa:	0003      	movs	r3, r0
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bfe:	e014      	b.n	8006c2a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c00:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <UART_SetConfig+0x314>)
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c04:	e011      	b.n	8006c2a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c06:	f7fd fd7b 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 8006c0a:	0003      	movs	r3, r0
 8006c0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c0e:	e00c      	b.n	8006c2a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c10:	2380      	movs	r3, #128	; 0x80
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c16:	e008      	b.n	8006c2a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006c1c:	231a      	movs	r3, #26
 8006c1e:	2220      	movs	r2, #32
 8006c20:	189b      	adds	r3, r3, r2
 8006c22:	19db      	adds	r3, r3, r7
 8006c24:	2201      	movs	r2, #1
 8006c26:	701a      	strb	r2, [r3, #0]
        break;
 8006c28:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d100      	bne.n	8006c32 <UART_SetConfig+0x2ae>
 8006c30:	e14b      	b.n	8006eca <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c36:	4b19      	ldr	r3, [pc, #100]	; (8006c9c <UART_SetConfig+0x318>)
 8006c38:	0052      	lsls	r2, r2, #1
 8006c3a:	5ad3      	ldrh	r3, [r2, r3]
 8006c3c:	0019      	movs	r1, r3
 8006c3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006c40:	f7f9 fa7c 	bl	800013c <__udivsi3>
 8006c44:	0003      	movs	r3, r0
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	0013      	movs	r3, r2
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	189b      	adds	r3, r3, r2
 8006c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d305      	bcc.n	8006c64 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d91d      	bls.n	8006ca0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006c64:	231a      	movs	r3, #26
 8006c66:	2220      	movs	r2, #32
 8006c68:	189b      	adds	r3, r3, r2
 8006c6a:	19db      	adds	r3, r3, r7
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	701a      	strb	r2, [r3, #0]
 8006c70:	e12b      	b.n	8006eca <UART_SetConfig+0x546>
 8006c72:	46c0      	nop			; (mov r8, r8)
 8006c74:	cfff69f3 	.word	0xcfff69f3
 8006c78:	ffffcfff 	.word	0xffffcfff
 8006c7c:	40008000 	.word	0x40008000
 8006c80:	11fff4ff 	.word	0x11fff4ff
 8006c84:	40013800 	.word	0x40013800
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	40004400 	.word	0x40004400
 8006c90:	40004800 	.word	0x40004800
 8006c94:	40004c00 	.word	0x40004c00
 8006c98:	00f42400 	.word	0x00f42400
 8006c9c:	08009464 	.word	0x08009464
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cac:	4b92      	ldr	r3, [pc, #584]	; (8006ef8 <UART_SetConfig+0x574>)
 8006cae:	0052      	lsls	r2, r2, #1
 8006cb0:	5ad3      	ldrh	r3, [r2, r3]
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	69b8      	ldr	r0, [r7, #24]
 8006cbe:	69f9      	ldr	r1, [r7, #28]
 8006cc0:	f7f9 fbb2 	bl	8000428 <__aeabi_uldivmod>
 8006cc4:	0002      	movs	r2, r0
 8006cc6:	000b      	movs	r3, r1
 8006cc8:	0e11      	lsrs	r1, r2, #24
 8006cca:	021d      	lsls	r5, r3, #8
 8006ccc:	430d      	orrs	r5, r1
 8006cce:	0214      	lsls	r4, r2, #8
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	60bb      	str	r3, [r7, #8]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	68b8      	ldr	r0, [r7, #8]
 8006cde:	68f9      	ldr	r1, [r7, #12]
 8006ce0:	1900      	adds	r0, r0, r4
 8006ce2:	4169      	adcs	r1, r5
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	2300      	movs	r3, #0
 8006cec:	607b      	str	r3, [r7, #4]
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f7f9 fb99 	bl	8000428 <__aeabi_uldivmod>
 8006cf6:	0002      	movs	r2, r0
 8006cf8:	000b      	movs	r3, r1
 8006cfa:	0013      	movs	r3, r2
 8006cfc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d00:	23c0      	movs	r3, #192	; 0xc0
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d309      	bcc.n	8006d1c <UART_SetConfig+0x398>
 8006d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0a:	2380      	movs	r3, #128	; 0x80
 8006d0c:	035b      	lsls	r3, r3, #13
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d204      	bcs.n	8006d1c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	e0d6      	b.n	8006eca <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006d1c:	231a      	movs	r3, #26
 8006d1e:	2220      	movs	r2, #32
 8006d20:	189b      	adds	r3, r3, r2
 8006d22:	19db      	adds	r3, r3, r7
 8006d24:	2201      	movs	r2, #1
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e0cf      	b.n	8006eca <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	2380      	movs	r3, #128	; 0x80
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d000      	beq.n	8006d38 <UART_SetConfig+0x3b4>
 8006d36:	e070      	b.n	8006e1a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006d38:	231b      	movs	r3, #27
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	189b      	adds	r3, r3, r2
 8006d3e:	19db      	adds	r3, r3, r7
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	d015      	beq.n	8006d72 <UART_SetConfig+0x3ee>
 8006d46:	dc18      	bgt.n	8006d7a <UART_SetConfig+0x3f6>
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d00d      	beq.n	8006d68 <UART_SetConfig+0x3e4>
 8006d4c:	dc15      	bgt.n	8006d7a <UART_SetConfig+0x3f6>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <UART_SetConfig+0x3d4>
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d005      	beq.n	8006d62 <UART_SetConfig+0x3de>
 8006d56:	e010      	b.n	8006d7a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d58:	f7fd fd5e 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 8006d5c:	0003      	movs	r3, r0
 8006d5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d60:	e014      	b.n	8006d8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d62:	4b66      	ldr	r3, [pc, #408]	; (8006efc <UART_SetConfig+0x578>)
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d66:	e011      	b.n	8006d8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d68:	f7fd fcca 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 8006d6c:	0003      	movs	r3, r0
 8006d6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d70:	e00c      	b.n	8006d8c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d72:	2380      	movs	r3, #128	; 0x80
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d78:	e008      	b.n	8006d8c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006d7e:	231a      	movs	r3, #26
 8006d80:	2220      	movs	r2, #32
 8006d82:	189b      	adds	r3, r3, r2
 8006d84:	19db      	adds	r3, r3, r7
 8006d86:	2201      	movs	r2, #1
 8006d88:	701a      	strb	r2, [r3, #0]
        break;
 8006d8a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d100      	bne.n	8006d94 <UART_SetConfig+0x410>
 8006d92:	e09a      	b.n	8006eca <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d98:	4b57      	ldr	r3, [pc, #348]	; (8006ef8 <UART_SetConfig+0x574>)
 8006d9a:	0052      	lsls	r2, r2, #1
 8006d9c:	5ad3      	ldrh	r3, [r2, r3]
 8006d9e:	0019      	movs	r1, r3
 8006da0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006da2:	f7f9 f9cb 	bl	800013c <__udivsi3>
 8006da6:	0003      	movs	r3, r0
 8006da8:	005a      	lsls	r2, r3, #1
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	18d2      	adds	r2, r2, r3
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	0019      	movs	r1, r3
 8006db8:	0010      	movs	r0, r2
 8006dba:	f7f9 f9bf 	bl	800013c <__udivsi3>
 8006dbe:	0003      	movs	r3, r0
 8006dc0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	2b0f      	cmp	r3, #15
 8006dc6:	d921      	bls.n	8006e0c <UART_SetConfig+0x488>
 8006dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	025b      	lsls	r3, r3, #9
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d21c      	bcs.n	8006e0c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	200e      	movs	r0, #14
 8006dd8:	2420      	movs	r4, #32
 8006dda:	1903      	adds	r3, r0, r4
 8006ddc:	19db      	adds	r3, r3, r7
 8006dde:	210f      	movs	r1, #15
 8006de0:	438a      	bics	r2, r1
 8006de2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2207      	movs	r2, #7
 8006dec:	4013      	ands	r3, r2
 8006dee:	b299      	uxth	r1, r3
 8006df0:	1903      	adds	r3, r0, r4
 8006df2:	19db      	adds	r3, r3, r7
 8006df4:	1902      	adds	r2, r0, r4
 8006df6:	19d2      	adds	r2, r2, r7
 8006df8:	8812      	ldrh	r2, [r2, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	1902      	adds	r2, r0, r4
 8006e04:	19d2      	adds	r2, r2, r7
 8006e06:	8812      	ldrh	r2, [r2, #0]
 8006e08:	60da      	str	r2, [r3, #12]
 8006e0a:	e05e      	b.n	8006eca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006e0c:	231a      	movs	r3, #26
 8006e0e:	2220      	movs	r2, #32
 8006e10:	189b      	adds	r3, r3, r2
 8006e12:	19db      	adds	r3, r3, r7
 8006e14:	2201      	movs	r2, #1
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e057      	b.n	8006eca <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e1a:	231b      	movs	r3, #27
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	189b      	adds	r3, r3, r2
 8006e20:	19db      	adds	r3, r3, r7
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d015      	beq.n	8006e54 <UART_SetConfig+0x4d0>
 8006e28:	dc18      	bgt.n	8006e5c <UART_SetConfig+0x4d8>
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d00d      	beq.n	8006e4a <UART_SetConfig+0x4c6>
 8006e2e:	dc15      	bgt.n	8006e5c <UART_SetConfig+0x4d8>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <UART_SetConfig+0x4b6>
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d005      	beq.n	8006e44 <UART_SetConfig+0x4c0>
 8006e38:	e010      	b.n	8006e5c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e3a:	f7fd fced 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 8006e3e:	0003      	movs	r3, r0
 8006e40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e42:	e014      	b.n	8006e6e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e44:	4b2d      	ldr	r3, [pc, #180]	; (8006efc <UART_SetConfig+0x578>)
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e48:	e011      	b.n	8006e6e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e4a:	f7fd fc59 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 8006e4e:	0003      	movs	r3, r0
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e52:	e00c      	b.n	8006e6e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e54:	2380      	movs	r3, #128	; 0x80
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e5a:	e008      	b.n	8006e6e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006e60:	231a      	movs	r3, #26
 8006e62:	2220      	movs	r2, #32
 8006e64:	189b      	adds	r3, r3, r2
 8006e66:	19db      	adds	r3, r3, r7
 8006e68:	2201      	movs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
        break;
 8006e6c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d02a      	beq.n	8006eca <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e78:	4b1f      	ldr	r3, [pc, #124]	; (8006ef8 <UART_SetConfig+0x574>)
 8006e7a:	0052      	lsls	r2, r2, #1
 8006e7c:	5ad3      	ldrh	r3, [r2, r3]
 8006e7e:	0019      	movs	r1, r3
 8006e80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e82:	f7f9 f95b 	bl	800013c <__udivsi3>
 8006e86:	0003      	movs	r3, r0
 8006e88:	001a      	movs	r2, r3
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	18d2      	adds	r2, r2, r3
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	0019      	movs	r1, r3
 8006e98:	0010      	movs	r0, r2
 8006e9a:	f7f9 f94f 	bl	800013c <__udivsi3>
 8006e9e:	0003      	movs	r3, r0
 8006ea0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	2b0f      	cmp	r3, #15
 8006ea6:	d90a      	bls.n	8006ebe <UART_SetConfig+0x53a>
 8006ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eaa:	2380      	movs	r3, #128	; 0x80
 8006eac:	025b      	lsls	r3, r3, #9
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d205      	bcs.n	8006ebe <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60da      	str	r2, [r3, #12]
 8006ebc:	e005      	b.n	8006eca <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006ebe:	231a      	movs	r3, #26
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	189b      	adds	r3, r3, r2
 8006ec4:	19db      	adds	r3, r3, r7
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	226a      	movs	r2, #106	; 0x6a
 8006ece:	2101      	movs	r1, #1
 8006ed0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	2268      	movs	r2, #104	; 0x68
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	2200      	movs	r2, #0
 8006ede:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006ee6:	231a      	movs	r3, #26
 8006ee8:	2220      	movs	r2, #32
 8006eea:	189b      	adds	r3, r3, r2
 8006eec:	19db      	adds	r3, r3, r7
 8006eee:	781b      	ldrb	r3, [r3, #0]
}
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b010      	add	sp, #64	; 0x40
 8006ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8006ef8:	08009464 	.word	0x08009464
 8006efc:	00f42400 	.word	0x00f42400

08006f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d00b      	beq.n	8006f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	4a4a      	ldr	r2, [pc, #296]	; (8007044 <UART_AdvFeatureConfig+0x144>)
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	0019      	movs	r1, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4013      	ands	r3, r2
 8006f32:	d00b      	beq.n	8006f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	4a43      	ldr	r2, [pc, #268]	; (8007048 <UART_AdvFeatureConfig+0x148>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	0019      	movs	r1, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	2202      	movs	r2, #2
 8006f52:	4013      	ands	r3, r2
 8006f54:	d00b      	beq.n	8006f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	4a3b      	ldr	r2, [pc, #236]	; (800704c <UART_AdvFeatureConfig+0x14c>)
 8006f5e:	4013      	ands	r3, r2
 8006f60:	0019      	movs	r1, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	2204      	movs	r2, #4
 8006f74:	4013      	ands	r3, r2
 8006f76:	d00b      	beq.n	8006f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	4a34      	ldr	r2, [pc, #208]	; (8007050 <UART_AdvFeatureConfig+0x150>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	0019      	movs	r1, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	2210      	movs	r2, #16
 8006f96:	4013      	ands	r3, r2
 8006f98:	d00b      	beq.n	8006fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	4a2c      	ldr	r2, [pc, #176]	; (8007054 <UART_AdvFeatureConfig+0x154>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	0019      	movs	r1, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	4013      	ands	r3, r2
 8006fba:	d00b      	beq.n	8006fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	4a25      	ldr	r2, [pc, #148]	; (8007058 <UART_AdvFeatureConfig+0x158>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	0019      	movs	r1, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	2240      	movs	r2, #64	; 0x40
 8006fda:	4013      	ands	r3, r2
 8006fdc:	d01d      	beq.n	800701a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4a1d      	ldr	r2, [pc, #116]	; (800705c <UART_AdvFeatureConfig+0x15c>)
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	0019      	movs	r1, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	035b      	lsls	r3, r3, #13
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d10b      	bne.n	800701a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4a15      	ldr	r2, [pc, #84]	; (8007060 <UART_AdvFeatureConfig+0x160>)
 800700a:	4013      	ands	r3, r2
 800700c:	0019      	movs	r1, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	4013      	ands	r3, r2
 8007022:	d00b      	beq.n	800703c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4a0e      	ldr	r2, [pc, #56]	; (8007064 <UART_AdvFeatureConfig+0x164>)
 800702c:	4013      	ands	r3, r2
 800702e:	0019      	movs	r1, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }
}
 800703c:	46c0      	nop			; (mov r8, r8)
 800703e:	46bd      	mov	sp, r7
 8007040:	b002      	add	sp, #8
 8007042:	bd80      	pop	{r7, pc}
 8007044:	ffff7fff 	.word	0xffff7fff
 8007048:	fffdffff 	.word	0xfffdffff
 800704c:	fffeffff 	.word	0xfffeffff
 8007050:	fffbffff 	.word	0xfffbffff
 8007054:	ffffefff 	.word	0xffffefff
 8007058:	ffffdfff 	.word	0xffffdfff
 800705c:	ffefffff 	.word	0xffefffff
 8007060:	ff9fffff 	.word	0xff9fffff
 8007064:	fff7ffff 	.word	0xfff7ffff

08007068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b092      	sub	sp, #72	; 0x48
 800706c:	af02      	add	r7, sp, #8
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2290      	movs	r2, #144	; 0x90
 8007074:	2100      	movs	r1, #0
 8007076:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007078:	f7fa ff30 	bl	8001edc <HAL_GetTick>
 800707c:	0003      	movs	r3, r0
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2208      	movs	r2, #8
 8007088:	4013      	ands	r3, r2
 800708a:	2b08      	cmp	r3, #8
 800708c:	d12d      	bne.n	80070ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800708e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007090:	2280      	movs	r2, #128	; 0x80
 8007092:	0391      	lsls	r1, r2, #14
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4a47      	ldr	r2, [pc, #284]	; (80071b4 <UART_CheckIdleState+0x14c>)
 8007098:	9200      	str	r2, [sp, #0]
 800709a:	2200      	movs	r2, #0
 800709c:	f000 f88e 	bl	80071bc <UART_WaitOnFlagUntilTimeout>
 80070a0:	1e03      	subs	r3, r0, #0
 80070a2:	d022      	beq.n	80070ea <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a4:	f3ef 8310 	mrs	r3, PRIMASK
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80070ae:	2301      	movs	r3, #1
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	f383 8810 	msr	PRIMASK, r3
}
 80070b8:	46c0      	nop			; (mov r8, r8)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2180      	movs	r1, #128	; 0x80
 80070c6:	438a      	bics	r2, r1
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	f383 8810 	msr	PRIMASK, r3
}
 80070d4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2288      	movs	r2, #136	; 0x88
 80070da:	2120      	movs	r1, #32
 80070dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2284      	movs	r2, #132	; 0x84
 80070e2:	2100      	movs	r1, #0
 80070e4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e060      	b.n	80071ac <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2204      	movs	r2, #4
 80070f2:	4013      	ands	r3, r2
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	d146      	bne.n	8007186 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fa:	2280      	movs	r2, #128	; 0x80
 80070fc:	03d1      	lsls	r1, r2, #15
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4a2c      	ldr	r2, [pc, #176]	; (80071b4 <UART_CheckIdleState+0x14c>)
 8007102:	9200      	str	r2, [sp, #0]
 8007104:	2200      	movs	r2, #0
 8007106:	f000 f859 	bl	80071bc <UART_WaitOnFlagUntilTimeout>
 800710a:	1e03      	subs	r3, r0, #0
 800710c:	d03b      	beq.n	8007186 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800710e:	f3ef 8310 	mrs	r3, PRIMASK
 8007112:	60fb      	str	r3, [r7, #12]
  return(result);
 8007114:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007116:	637b      	str	r3, [r7, #52]	; 0x34
 8007118:	2301      	movs	r3, #1
 800711a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f383 8810 	msr	PRIMASK, r3
}
 8007122:	46c0      	nop			; (mov r8, r8)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4922      	ldr	r1, [pc, #136]	; (80071b8 <UART_CheckIdleState+0x150>)
 8007130:	400a      	ands	r2, r1
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f383 8810 	msr	PRIMASK, r3
}
 800713e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007140:	f3ef 8310 	mrs	r3, PRIMASK
 8007144:	61bb      	str	r3, [r7, #24]
  return(result);
 8007146:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007148:	633b      	str	r3, [r7, #48]	; 0x30
 800714a:	2301      	movs	r3, #1
 800714c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2101      	movs	r1, #1
 8007162:	438a      	bics	r2, r1
 8007164:	609a      	str	r2, [r3, #8]
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	f383 8810 	msr	PRIMASK, r3
}
 8007170:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	228c      	movs	r2, #140	; 0x8c
 8007176:	2120      	movs	r1, #32
 8007178:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2284      	movs	r2, #132	; 0x84
 800717e:	2100      	movs	r1, #0
 8007180:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e012      	b.n	80071ac <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2288      	movs	r2, #136	; 0x88
 800718a:	2120      	movs	r1, #32
 800718c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	228c      	movs	r2, #140	; 0x8c
 8007192:	2120      	movs	r1, #32
 8007194:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2284      	movs	r2, #132	; 0x84
 80071a6:	2100      	movs	r1, #0
 80071a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	0018      	movs	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	b010      	add	sp, #64	; 0x40
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	01ffffff 	.word	0x01ffffff
 80071b8:	fffffedf 	.word	0xfffffedf

080071bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	1dfb      	adds	r3, r7, #7
 80071ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071cc:	e051      	b.n	8007272 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	3301      	adds	r3, #1
 80071d2:	d04e      	beq.n	8007272 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d4:	f7fa fe82 	bl	8001edc <HAL_GetTick>
 80071d8:	0002      	movs	r2, r0
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d302      	bcc.n	80071ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e051      	b.n	8007292 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2204      	movs	r2, #4
 80071f6:	4013      	ands	r3, r2
 80071f8:	d03b      	beq.n	8007272 <UART_WaitOnFlagUntilTimeout+0xb6>
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b80      	cmp	r3, #128	; 0x80
 80071fe:	d038      	beq.n	8007272 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d035      	beq.n	8007272 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	2208      	movs	r2, #8
 800720e:	4013      	ands	r3, r2
 8007210:	2b08      	cmp	r3, #8
 8007212:	d111      	bne.n	8007238 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2208      	movs	r2, #8
 800721a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	0018      	movs	r0, r3
 8007220:	f000 f960 	bl	80074e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2290      	movs	r2, #144	; 0x90
 8007228:	2108      	movs	r1, #8
 800722a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2284      	movs	r2, #132	; 0x84
 8007230:	2100      	movs	r1, #0
 8007232:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e02c      	b.n	8007292 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69da      	ldr	r2, [r3, #28]
 800723e:	2380      	movs	r3, #128	; 0x80
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	401a      	ands	r2, r3
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	429a      	cmp	r2, r3
 800724a:	d112      	bne.n	8007272 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2280      	movs	r2, #128	; 0x80
 8007252:	0112      	lsls	r2, r2, #4
 8007254:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	0018      	movs	r0, r3
 800725a:	f000 f943 	bl	80074e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2290      	movs	r2, #144	; 0x90
 8007262:	2120      	movs	r1, #32
 8007264:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2284      	movs	r2, #132	; 0x84
 800726a:	2100      	movs	r1, #0
 800726c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e00f      	b.n	8007292 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	4013      	ands	r3, r2
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	425a      	negs	r2, r3
 8007282:	4153      	adcs	r3, r2
 8007284:	b2db      	uxtb	r3, r3
 8007286:	001a      	movs	r2, r3
 8007288:	1dfb      	adds	r3, r7, #7
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d09e      	beq.n	80071ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	0018      	movs	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	b004      	add	sp, #16
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b098      	sub	sp, #96	; 0x60
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	1dbb      	adds	r3, r7, #6
 80072a8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	1dba      	adds	r2, r7, #6
 80072b4:	215c      	movs	r1, #92	; 0x5c
 80072b6:	8812      	ldrh	r2, [r2, #0]
 80072b8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1dba      	adds	r2, r7, #6
 80072be:	215e      	movs	r1, #94	; 0x5e
 80072c0:	8812      	ldrh	r2, [r2, #0]
 80072c2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	2380      	movs	r3, #128	; 0x80
 80072d0:	015b      	lsls	r3, r3, #5
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d10d      	bne.n	80072f2 <UART_Start_Receive_IT+0x56>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <UART_Start_Receive_IT+0x4c>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2260      	movs	r2, #96	; 0x60
 80072e2:	497b      	ldr	r1, [pc, #492]	; (80074d0 <UART_Start_Receive_IT+0x234>)
 80072e4:	5299      	strh	r1, [r3, r2]
 80072e6:	e02e      	b.n	8007346 <UART_Start_Receive_IT+0xaa>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2260      	movs	r2, #96	; 0x60
 80072ec:	21ff      	movs	r1, #255	; 0xff
 80072ee:	5299      	strh	r1, [r3, r2]
 80072f0:	e029      	b.n	8007346 <UART_Start_Receive_IT+0xaa>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10d      	bne.n	8007316 <UART_Start_Receive_IT+0x7a>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d104      	bne.n	800730c <UART_Start_Receive_IT+0x70>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2260      	movs	r2, #96	; 0x60
 8007306:	21ff      	movs	r1, #255	; 0xff
 8007308:	5299      	strh	r1, [r3, r2]
 800730a:	e01c      	b.n	8007346 <UART_Start_Receive_IT+0xaa>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2260      	movs	r2, #96	; 0x60
 8007310:	217f      	movs	r1, #127	; 0x7f
 8007312:	5299      	strh	r1, [r3, r2]
 8007314:	e017      	b.n	8007346 <UART_Start_Receive_IT+0xaa>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	2380      	movs	r3, #128	; 0x80
 800731c:	055b      	lsls	r3, r3, #21
 800731e:	429a      	cmp	r2, r3
 8007320:	d10d      	bne.n	800733e <UART_Start_Receive_IT+0xa2>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d104      	bne.n	8007334 <UART_Start_Receive_IT+0x98>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2260      	movs	r2, #96	; 0x60
 800732e:	217f      	movs	r1, #127	; 0x7f
 8007330:	5299      	strh	r1, [r3, r2]
 8007332:	e008      	b.n	8007346 <UART_Start_Receive_IT+0xaa>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2260      	movs	r2, #96	; 0x60
 8007338:	213f      	movs	r1, #63	; 0x3f
 800733a:	5299      	strh	r1, [r3, r2]
 800733c:	e003      	b.n	8007346 <UART_Start_Receive_IT+0xaa>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2260      	movs	r2, #96	; 0x60
 8007342:	2100      	movs	r1, #0
 8007344:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2290      	movs	r2, #144	; 0x90
 800734a:	2100      	movs	r1, #0
 800734c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	228c      	movs	r2, #140	; 0x8c
 8007352:	2122      	movs	r1, #34	; 0x22
 8007354:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007356:	f3ef 8310 	mrs	r3, PRIMASK
 800735a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800735c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007360:	2301      	movs	r3, #1
 8007362:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007366:	f383 8810 	msr	PRIMASK, r3
}
 800736a:	46c0      	nop			; (mov r8, r8)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2101      	movs	r1, #1
 8007378:	430a      	orrs	r2, r1
 800737a:	609a      	str	r2, [r3, #8]
 800737c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800737e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007382:	f383 8810 	msr	PRIMASK, r3
}
 8007386:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800738c:	2380      	movs	r3, #128	; 0x80
 800738e:	059b      	lsls	r3, r3, #22
 8007390:	429a      	cmp	r2, r3
 8007392:	d150      	bne.n	8007436 <UART_Start_Receive_IT+0x19a>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2268      	movs	r2, #104	; 0x68
 8007398:	5a9b      	ldrh	r3, [r3, r2]
 800739a:	1dba      	adds	r2, r7, #6
 800739c:	8812      	ldrh	r2, [r2, #0]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d349      	bcc.n	8007436 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	2380      	movs	r3, #128	; 0x80
 80073a8:	015b      	lsls	r3, r3, #5
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d107      	bne.n	80073be <UART_Start_Receive_IT+0x122>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d103      	bne.n	80073be <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4a46      	ldr	r2, [pc, #280]	; (80074d4 <UART_Start_Receive_IT+0x238>)
 80073ba:	675a      	str	r2, [r3, #116]	; 0x74
 80073bc:	e002      	b.n	80073c4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a45      	ldr	r2, [pc, #276]	; (80074d8 <UART_Start_Receive_IT+0x23c>)
 80073c2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d019      	beq.n	8007400 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073cc:	f3ef 8310 	mrs	r3, PRIMASK
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80073d6:	2301      	movs	r3, #1
 80073d8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	f383 8810 	msr	PRIMASK, r3
}
 80073e0:	46c0      	nop			; (mov r8, r8)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2180      	movs	r1, #128	; 0x80
 80073ee:	0049      	lsls	r1, r1, #1
 80073f0:	430a      	orrs	r2, r1
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fa:	f383 8810 	msr	PRIMASK, r3
}
 80073fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007400:	f3ef 8310 	mrs	r3, PRIMASK
 8007404:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007408:	657b      	str	r3, [r7, #84]	; 0x54
 800740a:	2301      	movs	r3, #1
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	f383 8810 	msr	PRIMASK, r3
}
 8007414:	46c0      	nop			; (mov r8, r8)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2180      	movs	r1, #128	; 0x80
 8007422:	0549      	lsls	r1, r1, #21
 8007424:	430a      	orrs	r2, r1
 8007426:	609a      	str	r2, [r3, #8]
 8007428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800742a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	f383 8810 	msr	PRIMASK, r3
}
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	e047      	b.n	80074c6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	2380      	movs	r3, #128	; 0x80
 800743c:	015b      	lsls	r3, r3, #5
 800743e:	429a      	cmp	r2, r3
 8007440:	d107      	bne.n	8007452 <UART_Start_Receive_IT+0x1b6>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4a23      	ldr	r2, [pc, #140]	; (80074dc <UART_Start_Receive_IT+0x240>)
 800744e:	675a      	str	r2, [r3, #116]	; 0x74
 8007450:	e002      	b.n	8007458 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4a22      	ldr	r2, [pc, #136]	; (80074e0 <UART_Start_Receive_IT+0x244>)
 8007456:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d019      	beq.n	8007494 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007460:	f3ef 8310 	mrs	r3, PRIMASK
 8007464:	61fb      	str	r3, [r7, #28]
  return(result);
 8007466:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007468:	64fb      	str	r3, [r7, #76]	; 0x4c
 800746a:	2301      	movs	r3, #1
 800746c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	f383 8810 	msr	PRIMASK, r3
}
 8007474:	46c0      	nop			; (mov r8, r8)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2190      	movs	r1, #144	; 0x90
 8007482:	0049      	lsls	r1, r1, #1
 8007484:	430a      	orrs	r2, r1
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	f383 8810 	msr	PRIMASK, r3
}
 8007492:	e018      	b.n	80074c6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007494:	f3ef 8310 	mrs	r3, PRIMASK
 8007498:	613b      	str	r3, [r7, #16]
  return(result);
 800749a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800749c:	653b      	str	r3, [r7, #80]	; 0x50
 800749e:	2301      	movs	r3, #1
 80074a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f383 8810 	msr	PRIMASK, r3
}
 80074a8:	46c0      	nop			; (mov r8, r8)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2120      	movs	r1, #32
 80074b6:	430a      	orrs	r2, r1
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	f383 8810 	msr	PRIMASK, r3
}
 80074c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	0018      	movs	r0, r3
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b018      	add	sp, #96	; 0x60
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	000001ff 	.word	0x000001ff
 80074d4:	08007d01 	.word	0x08007d01
 80074d8:	080079c1 	.word	0x080079c1
 80074dc:	080077fd 	.word	0x080077fd
 80074e0:	08007639 	.word	0x08007639

080074e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	; 0x38
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ec:	f3ef 8310 	mrs	r3, PRIMASK
 80074f0:	617b      	str	r3, [r7, #20]
  return(result);
 80074f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074f4:	637b      	str	r3, [r7, #52]	; 0x34
 80074f6:	2301      	movs	r3, #1
 80074f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	f383 8810 	msr	PRIMASK, r3
}
 8007500:	46c0      	nop			; (mov r8, r8)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4926      	ldr	r1, [pc, #152]	; (80075a8 <UART_EndRxTransfer+0xc4>)
 800750e:	400a      	ands	r2, r1
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	f383 8810 	msr	PRIMASK, r3
}
 800751c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751e:	f3ef 8310 	mrs	r3, PRIMASK
 8007522:	623b      	str	r3, [r7, #32]
  return(result);
 8007524:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007526:	633b      	str	r3, [r7, #48]	; 0x30
 8007528:	2301      	movs	r3, #1
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	f383 8810 	msr	PRIMASK, r3
}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	491b      	ldr	r1, [pc, #108]	; (80075ac <UART_EndRxTransfer+0xc8>)
 8007540:	400a      	ands	r2, r1
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	f383 8810 	msr	PRIMASK, r3
}
 800754e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007554:	2b01      	cmp	r3, #1
 8007556:	d118      	bne.n	800758a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007558:	f3ef 8310 	mrs	r3, PRIMASK
 800755c:	60bb      	str	r3, [r7, #8]
  return(result);
 800755e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007562:	2301      	movs	r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f383 8810 	msr	PRIMASK, r3
}
 800756c:	46c0      	nop			; (mov r8, r8)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2110      	movs	r1, #16
 800757a:	438a      	bics	r2, r1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f383 8810 	msr	PRIMASK, r3
}
 8007588:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	228c      	movs	r2, #140	; 0x8c
 800758e:	2120      	movs	r1, #32
 8007590:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800759e:	46c0      	nop			; (mov r8, r8)
 80075a0:	46bd      	mov	sp, r7
 80075a2:	b00e      	add	sp, #56	; 0x38
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	fffffedf 	.word	0xfffffedf
 80075ac:	effffffe 	.word	0xeffffffe

080075b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	225e      	movs	r2, #94	; 0x5e
 80075c2:	2100      	movs	r1, #0
 80075c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2256      	movs	r2, #86	; 0x56
 80075ca:	2100      	movs	r1, #0
 80075cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f7ff f9c3 	bl	800695c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	46bd      	mov	sp, r7
 80075da:	b004      	add	sp, #16
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075e6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80075ec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	2301      	movs	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f383 8810 	msr	PRIMASK, r3
}
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2140      	movs	r1, #64	; 0x40
 8007608:	438a      	bics	r2, r1
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f383 8810 	msr	PRIMASK, r3
}
 8007616:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2288      	movs	r2, #136	; 0x88
 800761c:	2120      	movs	r1, #32
 800761e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	0018      	movs	r0, r3
 800762a:	f7ff f98f 	bl	800694c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	46bd      	mov	sp, r7
 8007632:	b006      	add	sp, #24
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b094      	sub	sp, #80	; 0x50
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007640:	204e      	movs	r0, #78	; 0x4e
 8007642:	183b      	adds	r3, r7, r0
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	2160      	movs	r1, #96	; 0x60
 8007648:	5a52      	ldrh	r2, [r2, r1]
 800764a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	228c      	movs	r2, #140	; 0x8c
 8007650:	589b      	ldr	r3, [r3, r2]
 8007652:	2b22      	cmp	r3, #34	; 0x22
 8007654:	d000      	beq.n	8007658 <UART_RxISR_8BIT+0x20>
 8007656:	e0bf      	b.n	80077d8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800765e:	214c      	movs	r1, #76	; 0x4c
 8007660:	187b      	adds	r3, r7, r1
 8007662:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007664:	187b      	adds	r3, r7, r1
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b2da      	uxtb	r2, r3
 800766a:	183b      	adds	r3, r7, r0
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b2d9      	uxtb	r1, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007674:	400a      	ands	r2, r1
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	225e      	movs	r2, #94	; 0x5e
 8007688:	5a9b      	ldrh	r3, [r3, r2]
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b299      	uxth	r1, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	225e      	movs	r2, #94	; 0x5e
 8007694:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	225e      	movs	r2, #94	; 0x5e
 800769a:	5a9b      	ldrh	r3, [r3, r2]
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d000      	beq.n	80076a4 <UART_RxISR_8BIT+0x6c>
 80076a2:	e0a1      	b.n	80077e8 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a4:	f3ef 8310 	mrs	r3, PRIMASK
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ae:	2301      	movs	r3, #1
 80076b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	f383 8810 	msr	PRIMASK, r3
}
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	494a      	ldr	r1, [pc, #296]	; (80077f0 <UART_RxISR_8BIT+0x1b8>)
 80076c6:	400a      	ands	r2, r1
 80076c8:	601a      	str	r2, [r3, #0]
 80076ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	f383 8810 	msr	PRIMASK, r3
}
 80076d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d6:	f3ef 8310 	mrs	r3, PRIMASK
 80076da:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076de:	647b      	str	r3, [r7, #68]	; 0x44
 80076e0:	2301      	movs	r3, #1
 80076e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e6:	f383 8810 	msr	PRIMASK, r3
}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2101      	movs	r1, #1
 80076f8:	438a      	bics	r2, r1
 80076fa:	609a      	str	r2, [r3, #8]
 80076fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	f383 8810 	msr	PRIMASK, r3
}
 8007706:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	228c      	movs	r2, #140	; 0x8c
 800770c:	2120      	movs	r1, #32
 800770e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a34      	ldr	r2, [pc, #208]	; (80077f4 <UART_RxISR_8BIT+0x1bc>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01f      	beq.n	8007766 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	2380      	movs	r3, #128	; 0x80
 800772e:	041b      	lsls	r3, r3, #16
 8007730:	4013      	ands	r3, r2
 8007732:	d018      	beq.n	8007766 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007734:	f3ef 8310 	mrs	r3, PRIMASK
 8007738:	61bb      	str	r3, [r7, #24]
  return(result);
 800773a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800773c:	643b      	str	r3, [r7, #64]	; 0x40
 800773e:	2301      	movs	r3, #1
 8007740:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	f383 8810 	msr	PRIMASK, r3
}
 8007748:	46c0      	nop			; (mov r8, r8)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4928      	ldr	r1, [pc, #160]	; (80077f8 <UART_RxISR_8BIT+0x1c0>)
 8007756:	400a      	ands	r2, r1
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800775c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	f383 8810 	msr	PRIMASK, r3
}
 8007764:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800776a:	2b01      	cmp	r3, #1
 800776c:	d12f      	bne.n	80077ce <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007774:	f3ef 8310 	mrs	r3, PRIMASK
 8007778:	60fb      	str	r3, [r7, #12]
  return(result);
 800777a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800777e:	2301      	movs	r3, #1
 8007780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f383 8810 	msr	PRIMASK, r3
}
 8007788:	46c0      	nop			; (mov r8, r8)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2110      	movs	r1, #16
 8007796:	438a      	bics	r2, r1
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f383 8810 	msr	PRIMASK, r3
}
 80077a4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	2210      	movs	r2, #16
 80077ae:	4013      	ands	r3, r2
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d103      	bne.n	80077bc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2210      	movs	r2, #16
 80077ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	225c      	movs	r2, #92	; 0x5c
 80077c0:	5a9a      	ldrh	r2, [r3, r2]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	0011      	movs	r1, r2
 80077c6:	0018      	movs	r0, r3
 80077c8:	f7ff f8d0 	bl	800696c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077cc:	e00c      	b.n	80077e8 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	0018      	movs	r0, r3
 80077d2:	f7f9 ff65 	bl	80016a0 <HAL_UART_RxCpltCallback>
}
 80077d6:	e007      	b.n	80077e8 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2108      	movs	r1, #8
 80077e4:	430a      	orrs	r2, r1
 80077e6:	619a      	str	r2, [r3, #24]
}
 80077e8:	46c0      	nop			; (mov r8, r8)
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b014      	add	sp, #80	; 0x50
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	fffffedf 	.word	0xfffffedf
 80077f4:	40008000 	.word	0x40008000
 80077f8:	fbffffff 	.word	0xfbffffff

080077fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b094      	sub	sp, #80	; 0x50
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007804:	204e      	movs	r0, #78	; 0x4e
 8007806:	183b      	adds	r3, r7, r0
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	2160      	movs	r1, #96	; 0x60
 800780c:	5a52      	ldrh	r2, [r2, r1]
 800780e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	228c      	movs	r2, #140	; 0x8c
 8007814:	589b      	ldr	r3, [r3, r2]
 8007816:	2b22      	cmp	r3, #34	; 0x22
 8007818:	d000      	beq.n	800781c <UART_RxISR_16BIT+0x20>
 800781a:	e0bf      	b.n	800799c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007822:	214c      	movs	r1, #76	; 0x4c
 8007824:	187b      	adds	r3, r7, r1
 8007826:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800782e:	187b      	adds	r3, r7, r1
 8007830:	183a      	adds	r2, r7, r0
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	8812      	ldrh	r2, [r2, #0]
 8007836:	4013      	ands	r3, r2
 8007838:	b29a      	uxth	r2, r3
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007842:	1c9a      	adds	r2, r3, #2
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	225e      	movs	r2, #94	; 0x5e
 800784c:	5a9b      	ldrh	r3, [r3, r2]
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b299      	uxth	r1, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	225e      	movs	r2, #94	; 0x5e
 8007858:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	225e      	movs	r2, #94	; 0x5e
 800785e:	5a9b      	ldrh	r3, [r3, r2]
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d000      	beq.n	8007868 <UART_RxISR_16BIT+0x6c>
 8007866:	e0a1      	b.n	80079ac <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007868:	f3ef 8310 	mrs	r3, PRIMASK
 800786c:	623b      	str	r3, [r7, #32]
  return(result);
 800786e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007870:	647b      	str	r3, [r7, #68]	; 0x44
 8007872:	2301      	movs	r3, #1
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	f383 8810 	msr	PRIMASK, r3
}
 800787c:	46c0      	nop			; (mov r8, r8)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	494a      	ldr	r1, [pc, #296]	; (80079b4 <UART_RxISR_16BIT+0x1b8>)
 800788a:	400a      	ands	r2, r1
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007890:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	f383 8810 	msr	PRIMASK, r3
}
 8007898:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800789a:	f3ef 8310 	mrs	r3, PRIMASK
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a2:	643b      	str	r3, [r7, #64]	; 0x40
 80078a4:	2301      	movs	r3, #1
 80078a6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	f383 8810 	msr	PRIMASK, r3
}
 80078ae:	46c0      	nop			; (mov r8, r8)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2101      	movs	r1, #1
 80078bc:	438a      	bics	r2, r1
 80078be:	609a      	str	r2, [r3, #8]
 80078c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c6:	f383 8810 	msr	PRIMASK, r3
}
 80078ca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	228c      	movs	r2, #140	; 0x8c
 80078d0:	2120      	movs	r1, #32
 80078d2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a34      	ldr	r2, [pc, #208]	; (80079b8 <UART_RxISR_16BIT+0x1bc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d01f      	beq.n	800792a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	2380      	movs	r3, #128	; 0x80
 80078f2:	041b      	lsls	r3, r3, #16
 80078f4:	4013      	ands	r3, r2
 80078f6:	d018      	beq.n	800792a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f8:	f3ef 8310 	mrs	r3, PRIMASK
 80078fc:	617b      	str	r3, [r7, #20]
  return(result);
 80078fe:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007902:	2301      	movs	r3, #1
 8007904:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f383 8810 	msr	PRIMASK, r3
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4928      	ldr	r1, [pc, #160]	; (80079bc <UART_RxISR_16BIT+0x1c0>)
 800791a:	400a      	ands	r2, r1
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	f383 8810 	msr	PRIMASK, r3
}
 8007928:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792e:	2b01      	cmp	r3, #1
 8007930:	d12f      	bne.n	8007992 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007938:	f3ef 8310 	mrs	r3, PRIMASK
 800793c:	60bb      	str	r3, [r7, #8]
  return(result);
 800793e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007940:	63bb      	str	r3, [r7, #56]	; 0x38
 8007942:	2301      	movs	r3, #1
 8007944:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f383 8810 	msr	PRIMASK, r3
}
 800794c:	46c0      	nop			; (mov r8, r8)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2110      	movs	r1, #16
 800795a:	438a      	bics	r2, r1
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f383 8810 	msr	PRIMASK, r3
}
 8007968:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	2210      	movs	r2, #16
 8007972:	4013      	ands	r3, r2
 8007974:	2b10      	cmp	r3, #16
 8007976:	d103      	bne.n	8007980 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2210      	movs	r2, #16
 800797e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	225c      	movs	r2, #92	; 0x5c
 8007984:	5a9a      	ldrh	r2, [r3, r2]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	0011      	movs	r1, r2
 800798a:	0018      	movs	r0, r3
 800798c:	f7fe ffee 	bl	800696c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007990:	e00c      	b.n	80079ac <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	0018      	movs	r0, r3
 8007996:	f7f9 fe83 	bl	80016a0 <HAL_UART_RxCpltCallback>
}
 800799a:	e007      	b.n	80079ac <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2108      	movs	r1, #8
 80079a8:	430a      	orrs	r2, r1
 80079aa:	619a      	str	r2, [r3, #24]
}
 80079ac:	46c0      	nop			; (mov r8, r8)
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b014      	add	sp, #80	; 0x50
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	fffffedf 	.word	0xfffffedf
 80079b8:	40008000 	.word	0x40008000
 80079bc:	fbffffff 	.word	0xfbffffff

080079c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b0a0      	sub	sp, #128	; 0x80
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80079c8:	237a      	movs	r3, #122	; 0x7a
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	2160      	movs	r1, #96	; 0x60
 80079d0:	5a52      	ldrh	r2, [r2, r1]
 80079d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	228c      	movs	r2, #140	; 0x8c
 80079f0:	589b      	ldr	r3, [r3, r2]
 80079f2:	2b22      	cmp	r3, #34	; 0x22
 80079f4:	d000      	beq.n	80079f8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80079f6:	e16a      	b.n	8007cce <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079f8:	236e      	movs	r3, #110	; 0x6e
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	2168      	movs	r1, #104	; 0x68
 8007a00:	5a52      	ldrh	r2, [r2, r1]
 8007a02:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a04:	e111      	b.n	8007c2a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a0c:	216c      	movs	r1, #108	; 0x6c
 8007a0e:	187b      	adds	r3, r7, r1
 8007a10:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a12:	187b      	adds	r3, r7, r1
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	237a      	movs	r3, #122	; 0x7a
 8007a1a:	18fb      	adds	r3, r7, r3
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b2d9      	uxtb	r1, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a24:	400a      	ands	r2, r1
 8007a26:	b2d2      	uxtb	r2, r2
 8007a28:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	225e      	movs	r2, #94	; 0x5e
 8007a38:	5a9b      	ldrh	r3, [r3, r2]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b299      	uxth	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	225e      	movs	r2, #94	; 0x5e
 8007a44:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a50:	2207      	movs	r2, #7
 8007a52:	4013      	ands	r3, r2
 8007a54:	d049      	beq.n	8007aea <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a58:	2201      	movs	r2, #1
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	d010      	beq.n	8007a80 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007a5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a60:	2380      	movs	r3, #128	; 0x80
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	4013      	ands	r3, r2
 8007a66:	d00b      	beq.n	8007a80 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2290      	movs	r2, #144	; 0x90
 8007a74:	589b      	ldr	r3, [r3, r2]
 8007a76:	2201      	movs	r2, #1
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2190      	movs	r1, #144	; 0x90
 8007a7e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a82:	2202      	movs	r2, #2
 8007a84:	4013      	ands	r3, r2
 8007a86:	d00f      	beq.n	8007aa8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	d00b      	beq.n	8007aa8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2202      	movs	r2, #2
 8007a96:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2290      	movs	r2, #144	; 0x90
 8007a9c:	589b      	ldr	r3, [r3, r2]
 8007a9e:	2204      	movs	r2, #4
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2190      	movs	r1, #144	; 0x90
 8007aa6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007aaa:	2204      	movs	r2, #4
 8007aac:	4013      	ands	r3, r2
 8007aae:	d00f      	beq.n	8007ad0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	d00b      	beq.n	8007ad0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2204      	movs	r2, #4
 8007abe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2290      	movs	r2, #144	; 0x90
 8007ac4:	589b      	ldr	r3, [r3, r2]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2190      	movs	r1, #144	; 0x90
 8007ace:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2290      	movs	r2, #144	; 0x90
 8007ad4:	589b      	ldr	r3, [r3, r2]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d007      	beq.n	8007aea <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	0018      	movs	r0, r3
 8007ade:	f7fe ff3d 	bl	800695c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2290      	movs	r2, #144	; 0x90
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	225e      	movs	r2, #94	; 0x5e
 8007aee:	5a9b      	ldrh	r3, [r3, r2]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d000      	beq.n	8007af8 <UART_RxISR_8BIT_FIFOEN+0x138>
 8007af6:	e098      	b.n	8007c2a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007af8:	f3ef 8310 	mrs	r3, PRIMASK
 8007afc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b02:	2301      	movs	r3, #1
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b08:	f383 8810 	msr	PRIMASK, r3
}
 8007b0c:	46c0      	nop			; (mov r8, r8)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4973      	ldr	r1, [pc, #460]	; (8007ce8 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8007b1a:	400a      	ands	r2, r1
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b20:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b24:	f383 8810 	msr	PRIMASK, r3
}
 8007b28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b2e:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8007b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b32:	667b      	str	r3, [r7, #100]	; 0x64
 8007b34:	2301      	movs	r3, #1
 8007b36:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b3a:	f383 8810 	msr	PRIMASK, r3
}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4968      	ldr	r1, [pc, #416]	; (8007cec <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8007b4c:	400a      	ands	r2, r1
 8007b4e:	609a      	str	r2, [r3, #8]
 8007b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b56:	f383 8810 	msr	PRIMASK, r3
}
 8007b5a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	228c      	movs	r2, #140	; 0x8c
 8007b60:	2120      	movs	r1, #32
 8007b62:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a5e      	ldr	r2, [pc, #376]	; (8007cf0 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d01f      	beq.n	8007bba <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	2380      	movs	r3, #128	; 0x80
 8007b82:	041b      	lsls	r3, r3, #16
 8007b84:	4013      	ands	r3, r2
 8007b86:	d018      	beq.n	8007bba <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b88:	f3ef 8310 	mrs	r3, PRIMASK
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b90:	663b      	str	r3, [r7, #96]	; 0x60
 8007b92:	2301      	movs	r3, #1
 8007b94:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	f383 8810 	msr	PRIMASK, r3
}
 8007b9c:	46c0      	nop			; (mov r8, r8)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4952      	ldr	r1, [pc, #328]	; (8007cf4 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8007baa:	400a      	ands	r2, r1
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	f383 8810 	msr	PRIMASK, r3
}
 8007bb8:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d12f      	bne.n	8007c22 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bcc:	623b      	str	r3, [r7, #32]
  return(result);
 8007bce:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	f383 8810 	msr	PRIMASK, r3
}
 8007bdc:	46c0      	nop			; (mov r8, r8)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2110      	movs	r1, #16
 8007bea:	438a      	bics	r2, r1
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	f383 8810 	msr	PRIMASK, r3
}
 8007bf8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	2210      	movs	r2, #16
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b10      	cmp	r3, #16
 8007c06:	d103      	bne.n	8007c10 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2210      	movs	r2, #16
 8007c0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	225c      	movs	r2, #92	; 0x5c
 8007c14:	5a9a      	ldrh	r2, [r3, r2]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	0011      	movs	r1, r2
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	f7fe fea6 	bl	800696c <HAL_UARTEx_RxEventCallback>
 8007c20:	e003      	b.n	8007c2a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	0018      	movs	r0, r3
 8007c26:	f7f9 fd3b 	bl	80016a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c2a:	236e      	movs	r3, #110	; 0x6e
 8007c2c:	18fb      	adds	r3, r7, r3
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d004      	beq.n	8007c3e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007c34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c36:	2220      	movs	r2, #32
 8007c38:	4013      	ands	r3, r2
 8007c3a:	d000      	beq.n	8007c3e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007c3c:	e6e3      	b.n	8007a06 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c3e:	205a      	movs	r0, #90	; 0x5a
 8007c40:	183b      	adds	r3, r7, r0
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	215e      	movs	r1, #94	; 0x5e
 8007c46:	5a52      	ldrh	r2, [r2, r1]
 8007c48:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c4a:	0001      	movs	r1, r0
 8007c4c:	187b      	adds	r3, r7, r1
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d044      	beq.n	8007cde <UART_RxISR_8BIT_FIFOEN+0x31e>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2268      	movs	r2, #104	; 0x68
 8007c58:	5a9b      	ldrh	r3, [r3, r2]
 8007c5a:	187a      	adds	r2, r7, r1
 8007c5c:	8812      	ldrh	r2, [r2, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d23d      	bcs.n	8007cde <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c62:	f3ef 8310 	mrs	r3, PRIMASK
 8007c66:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c68:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f383 8810 	msr	PRIMASK, r3
}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	491d      	ldr	r1, [pc, #116]	; (8007cf8 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8007c84:	400a      	ands	r2, r1
 8007c86:	609a      	str	r2, [r3, #8]
 8007c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f383 8810 	msr	PRIMASK, r3
}
 8007c92:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8007c98:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c9e:	617b      	str	r3, [r7, #20]
  return(result);
 8007ca0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f383 8810 	msr	PRIMASK, r3
}
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2120      	movs	r1, #32
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f383 8810 	msr	PRIMASK, r3
}
 8007cca:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ccc:	e007      	b.n	8007cde <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2108      	movs	r1, #8
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	619a      	str	r2, [r3, #24]
}
 8007cde:	46c0      	nop			; (mov r8, r8)
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	b020      	add	sp, #128	; 0x80
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	fffffeff 	.word	0xfffffeff
 8007cec:	effffffe 	.word	0xeffffffe
 8007cf0:	40008000 	.word	0x40008000
 8007cf4:	fbffffff 	.word	0xfbffffff
 8007cf8:	efffffff 	.word	0xefffffff
 8007cfc:	08007639 	.word	0x08007639

08007d00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b0a2      	sub	sp, #136	; 0x88
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007d08:	2382      	movs	r3, #130	; 0x82
 8007d0a:	18fb      	adds	r3, r7, r3
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	2160      	movs	r1, #96	; 0x60
 8007d10:	5a52      	ldrh	r2, [r2, r1]
 8007d12:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	2284      	movs	r2, #132	; 0x84
 8007d1c:	18ba      	adds	r2, r7, r2
 8007d1e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	228c      	movs	r2, #140	; 0x8c
 8007d34:	589b      	ldr	r3, [r3, r2]
 8007d36:	2b22      	cmp	r3, #34	; 0x22
 8007d38:	d000      	beq.n	8007d3c <UART_RxISR_16BIT_FIFOEN+0x3c>
 8007d3a:	e174      	b.n	8008026 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d3c:	2376      	movs	r3, #118	; 0x76
 8007d3e:	18fb      	adds	r3, r7, r3
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	2168      	movs	r1, #104	; 0x68
 8007d44:	5a52      	ldrh	r2, [r2, r1]
 8007d46:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d48:	e119      	b.n	8007f7e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d50:	2174      	movs	r1, #116	; 0x74
 8007d52:	187b      	adds	r3, r7, r1
 8007d54:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5a:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8007d5c:	187b      	adds	r3, r7, r1
 8007d5e:	2282      	movs	r2, #130	; 0x82
 8007d60:	18ba      	adds	r2, r7, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	8812      	ldrh	r2, [r2, #0]
 8007d66:	4013      	ands	r3, r2
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d72:	1c9a      	adds	r2, r3, #2
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	225e      	movs	r2, #94	; 0x5e
 8007d7c:	5a9b      	ldrh	r3, [r3, r2]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b299      	uxth	r1, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	225e      	movs	r2, #94	; 0x5e
 8007d88:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	2184      	movs	r1, #132	; 0x84
 8007d92:	187a      	adds	r2, r7, r1
 8007d94:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d96:	187b      	adds	r3, r7, r1
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2207      	movs	r2, #7
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	d04e      	beq.n	8007e3e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007da0:	187b      	adds	r3, r7, r1
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2201      	movs	r2, #1
 8007da6:	4013      	ands	r3, r2
 8007da8:	d010      	beq.n	8007dcc <UART_RxISR_16BIT_FIFOEN+0xcc>
 8007daa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007dac:	2380      	movs	r3, #128	; 0x80
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	4013      	ands	r3, r2
 8007db2:	d00b      	beq.n	8007dcc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2201      	movs	r2, #1
 8007dba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2290      	movs	r2, #144	; 0x90
 8007dc0:	589b      	ldr	r3, [r3, r2]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2190      	movs	r1, #144	; 0x90
 8007dca:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dcc:	2384      	movs	r3, #132	; 0x84
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	d00f      	beq.n	8007df8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8007dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dda:	2201      	movs	r2, #1
 8007ddc:	4013      	ands	r3, r2
 8007dde:	d00b      	beq.n	8007df8 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2202      	movs	r2, #2
 8007de6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2290      	movs	r2, #144	; 0x90
 8007dec:	589b      	ldr	r3, [r3, r2]
 8007dee:	2204      	movs	r2, #4
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2190      	movs	r1, #144	; 0x90
 8007df6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007df8:	2384      	movs	r3, #132	; 0x84
 8007dfa:	18fb      	adds	r3, r7, r3
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2204      	movs	r2, #4
 8007e00:	4013      	ands	r3, r2
 8007e02:	d00f      	beq.n	8007e24 <UART_RxISR_16BIT_FIFOEN+0x124>
 8007e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e06:	2201      	movs	r2, #1
 8007e08:	4013      	ands	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2204      	movs	r2, #4
 8007e12:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2290      	movs	r2, #144	; 0x90
 8007e18:	589b      	ldr	r3, [r3, r2]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2190      	movs	r1, #144	; 0x90
 8007e22:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2290      	movs	r2, #144	; 0x90
 8007e28:	589b      	ldr	r3, [r3, r2]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d007      	beq.n	8007e3e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	0018      	movs	r0, r3
 8007e32:	f7fe fd93 	bl	800695c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2290      	movs	r2, #144	; 0x90
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	225e      	movs	r2, #94	; 0x5e
 8007e42:	5a9b      	ldrh	r3, [r3, r2]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d000      	beq.n	8007e4c <UART_RxISR_16BIT_FIFOEN+0x14c>
 8007e4a:	e098      	b.n	8007f7e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e56:	2301      	movs	r3, #1
 8007e58:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e5c:	f383 8810 	msr	PRIMASK, r3
}
 8007e60:	46c0      	nop			; (mov r8, r8)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4974      	ldr	r1, [pc, #464]	; (8008040 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8007e6e:	400a      	ands	r2, r1
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e74:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e78:	f383 8810 	msr	PRIMASK, r3
}
 8007e7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007e82:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e86:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e88:	2301      	movs	r3, #1
 8007e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8e:	f383 8810 	msr	PRIMASK, r3
}
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689a      	ldr	r2, [r3, #8]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4969      	ldr	r1, [pc, #420]	; (8008044 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8007ea0:	400a      	ands	r2, r1
 8007ea2:	609a      	str	r2, [r3, #8]
 8007ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ea6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eaa:	f383 8810 	msr	PRIMASK, r3
}
 8007eae:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	228c      	movs	r2, #140	; 0x8c
 8007eb4:	2120      	movs	r1, #32
 8007eb6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a5f      	ldr	r2, [pc, #380]	; (8008048 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d01f      	beq.n	8007f0e <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	2380      	movs	r3, #128	; 0x80
 8007ed6:	041b      	lsls	r3, r3, #16
 8007ed8:	4013      	ands	r3, r2
 8007eda:	d018      	beq.n	8007f0e <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007edc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ee0:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eec:	f383 8810 	msr	PRIMASK, r3
}
 8007ef0:	46c0      	nop			; (mov r8, r8)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4953      	ldr	r1, [pc, #332]	; (800804c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8007efe:	400a      	ands	r2, r1
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f04:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	f383 8810 	msr	PRIMASK, r3
}
 8007f0c:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d12f      	bne.n	8007f76 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f24:	663b      	str	r3, [r7, #96]	; 0x60
 8007f26:	2301      	movs	r3, #1
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	f383 8810 	msr	PRIMASK, r3
}
 8007f30:	46c0      	nop			; (mov r8, r8)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2110      	movs	r1, #16
 8007f3e:	438a      	bics	r2, r1
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	f383 8810 	msr	PRIMASK, r3
}
 8007f4c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	2210      	movs	r2, #16
 8007f56:	4013      	ands	r3, r2
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d103      	bne.n	8007f64 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2210      	movs	r2, #16
 8007f62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	225c      	movs	r2, #92	; 0x5c
 8007f68:	5a9a      	ldrh	r2, [r3, r2]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	0011      	movs	r1, r2
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f7fe fcfc 	bl	800696c <HAL_UARTEx_RxEventCallback>
 8007f74:	e003      	b.n	8007f7e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f7f9 fb91 	bl	80016a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f7e:	2376      	movs	r3, #118	; 0x76
 8007f80:	18fb      	adds	r3, r7, r3
 8007f82:	881b      	ldrh	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d006      	beq.n	8007f96 <UART_RxISR_16BIT_FIFOEN+0x296>
 8007f88:	2384      	movs	r3, #132	; 0x84
 8007f8a:	18fb      	adds	r3, r7, r3
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	4013      	ands	r3, r2
 8007f92:	d000      	beq.n	8007f96 <UART_RxISR_16BIT_FIFOEN+0x296>
 8007f94:	e6d9      	b.n	8007d4a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f96:	205e      	movs	r0, #94	; 0x5e
 8007f98:	183b      	adds	r3, r7, r0
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	215e      	movs	r1, #94	; 0x5e
 8007f9e:	5a52      	ldrh	r2, [r2, r1]
 8007fa0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fa2:	0001      	movs	r1, r0
 8007fa4:	187b      	adds	r3, r7, r1
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d044      	beq.n	8008036 <UART_RxISR_16BIT_FIFOEN+0x336>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2268      	movs	r2, #104	; 0x68
 8007fb0:	5a9b      	ldrh	r3, [r3, r2]
 8007fb2:	187a      	adds	r2, r7, r1
 8007fb4:	8812      	ldrh	r2, [r2, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d23d      	bcs.n	8008036 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fba:	f3ef 8310 	mrs	r3, PRIMASK
 8007fbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f383 8810 	msr	PRIMASK, r3
}
 8007fce:	46c0      	nop			; (mov r8, r8)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	491d      	ldr	r1, [pc, #116]	; (8008050 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8007fdc:	400a      	ands	r2, r1
 8007fde:	609a      	str	r2, [r3, #8]
 8007fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fe2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f383 8810 	msr	PRIMASK, r3
}
 8007fea:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a19      	ldr	r2, [pc, #100]	; (8008054 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8007ff0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ff8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ffa:	657b      	str	r3, [r7, #84]	; 0x54
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f383 8810 	msr	PRIMASK, r3
}
 8008006:	46c0      	nop			; (mov r8, r8)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2120      	movs	r1, #32
 8008014:	430a      	orrs	r2, r1
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800801a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	f383 8810 	msr	PRIMASK, r3
}
 8008022:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008024:	e007      	b.n	8008036 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	699a      	ldr	r2, [r3, #24]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2108      	movs	r1, #8
 8008032:	430a      	orrs	r2, r1
 8008034:	619a      	str	r2, [r3, #24]
}
 8008036:	46c0      	nop			; (mov r8, r8)
 8008038:	46bd      	mov	sp, r7
 800803a:	b022      	add	sp, #136	; 0x88
 800803c:	bd80      	pop	{r7, pc}
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	fffffeff 	.word	0xfffffeff
 8008044:	effffffe 	.word	0xeffffffe
 8008048:	40008000 	.word	0x40008000
 800804c:	fbffffff 	.word	0xfbffffff
 8008050:	efffffff 	.word	0xefffffff
 8008054:	080077fd 	.word	0x080077fd

08008058 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008060:	46c0      	nop			; (mov r8, r8)
 8008062:	46bd      	mov	sp, r7
 8008064:	b002      	add	sp, #8
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008070:	46c0      	nop			; (mov r8, r8)
 8008072:	46bd      	mov	sp, r7
 8008074:	b002      	add	sp, #8
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008080:	46c0      	nop			; (mov r8, r8)
 8008082:	46bd      	mov	sp, r7
 8008084:	b002      	add	sp, #8
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2284      	movs	r2, #132	; 0x84
 8008094:	5c9b      	ldrb	r3, [r3, r2]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d101      	bne.n	800809e <HAL_UARTEx_DisableFifoMode+0x16>
 800809a:	2302      	movs	r3, #2
 800809c:	e027      	b.n	80080ee <HAL_UARTEx_DisableFifoMode+0x66>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2284      	movs	r2, #132	; 0x84
 80080a2:	2101      	movs	r1, #1
 80080a4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2288      	movs	r2, #136	; 0x88
 80080aa:	2124      	movs	r1, #36	; 0x24
 80080ac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2101      	movs	r1, #1
 80080c2:	438a      	bics	r2, r1
 80080c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4a0b      	ldr	r2, [pc, #44]	; (80080f8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80080ca:	4013      	ands	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2288      	movs	r2, #136	; 0x88
 80080e0:	2120      	movs	r1, #32
 80080e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2284      	movs	r2, #132	; 0x84
 80080e8:	2100      	movs	r1, #0
 80080ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	0018      	movs	r0, r3
 80080f0:	46bd      	mov	sp, r7
 80080f2:	b004      	add	sp, #16
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	dfffffff 	.word	0xdfffffff

080080fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2284      	movs	r2, #132	; 0x84
 800810a:	5c9b      	ldrb	r3, [r3, r2]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d101      	bne.n	8008114 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008110:	2302      	movs	r3, #2
 8008112:	e02e      	b.n	8008172 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2284      	movs	r2, #132	; 0x84
 8008118:	2101      	movs	r1, #1
 800811a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2288      	movs	r2, #136	; 0x88
 8008120:	2124      	movs	r1, #36	; 0x24
 8008122:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2101      	movs	r1, #1
 8008138:	438a      	bics	r2, r1
 800813a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	08d9      	lsrs	r1, r3, #3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	0018      	movs	r0, r3
 8008154:	f000 f854 	bl	8008200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2288      	movs	r2, #136	; 0x88
 8008164:	2120      	movs	r1, #32
 8008166:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2284      	movs	r2, #132	; 0x84
 800816c:	2100      	movs	r1, #0
 800816e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	0018      	movs	r0, r3
 8008174:	46bd      	mov	sp, r7
 8008176:	b004      	add	sp, #16
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2284      	movs	r2, #132	; 0x84
 800818a:	5c9b      	ldrb	r3, [r3, r2]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008190:	2302      	movs	r3, #2
 8008192:	e02f      	b.n	80081f4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2284      	movs	r2, #132	; 0x84
 8008198:	2101      	movs	r1, #1
 800819a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2288      	movs	r2, #136	; 0x88
 80081a0:	2124      	movs	r1, #36	; 0x24
 80081a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2101      	movs	r1, #1
 80081b8:	438a      	bics	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4a0e      	ldr	r2, [pc, #56]	; (80081fc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	0019      	movs	r1, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	0018      	movs	r0, r3
 80081d6:	f000 f813 	bl	8008200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2288      	movs	r2, #136	; 0x88
 80081e6:	2120      	movs	r1, #32
 80081e8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2284      	movs	r2, #132	; 0x84
 80081ee:	2100      	movs	r1, #0
 80081f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	0018      	movs	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b004      	add	sp, #16
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	f1ffffff 	.word	0xf1ffffff

08008200 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800820c:	2b00      	cmp	r3, #0
 800820e:	d108      	bne.n	8008222 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	226a      	movs	r2, #106	; 0x6a
 8008214:	2101      	movs	r1, #1
 8008216:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2268      	movs	r2, #104	; 0x68
 800821c:	2101      	movs	r1, #1
 800821e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008220:	e043      	b.n	80082aa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008222:	260f      	movs	r6, #15
 8008224:	19bb      	adds	r3, r7, r6
 8008226:	2208      	movs	r2, #8
 8008228:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800822a:	200e      	movs	r0, #14
 800822c:	183b      	adds	r3, r7, r0
 800822e:	2208      	movs	r2, #8
 8008230:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	0e5b      	lsrs	r3, r3, #25
 800823a:	b2da      	uxtb	r2, r3
 800823c:	240d      	movs	r4, #13
 800823e:	193b      	adds	r3, r7, r4
 8008240:	2107      	movs	r1, #7
 8008242:	400a      	ands	r2, r1
 8008244:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	0f5b      	lsrs	r3, r3, #29
 800824e:	b2da      	uxtb	r2, r3
 8008250:	250c      	movs	r5, #12
 8008252:	197b      	adds	r3, r7, r5
 8008254:	2107      	movs	r1, #7
 8008256:	400a      	ands	r2, r1
 8008258:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800825a:	183b      	adds	r3, r7, r0
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	197a      	adds	r2, r7, r5
 8008260:	7812      	ldrb	r2, [r2, #0]
 8008262:	4914      	ldr	r1, [pc, #80]	; (80082b4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008264:	5c8a      	ldrb	r2, [r1, r2]
 8008266:	435a      	muls	r2, r3
 8008268:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800826a:	197b      	adds	r3, r7, r5
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	4a12      	ldr	r2, [pc, #72]	; (80082b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008270:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008272:	0019      	movs	r1, r3
 8008274:	f7f7 ffec 	bl	8000250 <__divsi3>
 8008278:	0003      	movs	r3, r0
 800827a:	b299      	uxth	r1, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	226a      	movs	r2, #106	; 0x6a
 8008280:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008282:	19bb      	adds	r3, r7, r6
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	193a      	adds	r2, r7, r4
 8008288:	7812      	ldrb	r2, [r2, #0]
 800828a:	490a      	ldr	r1, [pc, #40]	; (80082b4 <UARTEx_SetNbDataToProcess+0xb4>)
 800828c:	5c8a      	ldrb	r2, [r1, r2]
 800828e:	435a      	muls	r2, r3
 8008290:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008292:	193b      	adds	r3, r7, r4
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	4a08      	ldr	r2, [pc, #32]	; (80082b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008298:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800829a:	0019      	movs	r1, r3
 800829c:	f7f7 ffd8 	bl	8000250 <__divsi3>
 80082a0:	0003      	movs	r3, r0
 80082a2:	b299      	uxth	r1, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2268      	movs	r2, #104	; 0x68
 80082a8:	5299      	strh	r1, [r3, r2]
}
 80082aa:	46c0      	nop			; (mov r8, r8)
 80082ac:	46bd      	mov	sp, r7
 80082ae:	b005      	add	sp, #20
 80082b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	0800947c 	.word	0x0800947c
 80082b8:	08009484 	.word	0x08009484

080082bc <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80082bc:	b590      	push	{r4, r7, lr}
 80082be:	b087      	sub	sp, #28
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	0002      	movs	r2, r0
 80082c4:	1dfb      	adds	r3, r7, #7
 80082c6:	701a      	strb	r2, [r3, #0]
 80082c8:	1dbb      	adds	r3, r7, #6
 80082ca:	1c0a      	adds	r2, r1, #0
 80082cc:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 80082ce:	1dfb      	adds	r3, r7, #7
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	4a16      	ldr	r2, [pc, #88]	; (800832c <I2C_LCD_ExpanderWrite+0x70>)
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	18d3      	adds	r3, r2, r3
 80082d8:	3301      	adds	r3, #1
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	1dbb      	adds	r3, r7, #6
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	240f      	movs	r4, #15
 80082e6:	193b      	adds	r3, r7, r4
 80082e8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 80082ea:	1dfb      	adds	r3, r7, #7
 80082ec:	781a      	ldrb	r2, [r3, #0]
 80082ee:	4910      	ldr	r1, [pc, #64]	; (8008330 <I2C_LCD_ExpanderWrite+0x74>)
 80082f0:	0013      	movs	r3, r2
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	189b      	adds	r3, r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	18cb      	adds	r3, r1, r3
 80082fa:	3304      	adds	r3, #4
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	1dfb      	adds	r3, r7, #7
 8008300:	781a      	ldrb	r2, [r3, #0]
 8008302:	490b      	ldr	r1, [pc, #44]	; (8008330 <I2C_LCD_ExpanderWrite+0x74>)
 8008304:	0013      	movs	r3, r2
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	189b      	adds	r3, r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	18cb      	adds	r3, r1, r3
 800830e:	3308      	adds	r3, #8
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	18db      	adds	r3, r3, r3
 8008316:	b299      	uxth	r1, r3
 8008318:	193a      	adds	r2, r7, r4
 800831a:	2364      	movs	r3, #100	; 0x64
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2301      	movs	r3, #1
 8008320:	f7fb f980 	bl	8003624 <HAL_I2C_Master_Transmit>
}
 8008324:	46c0      	nop			; (mov r8, r8)
 8008326:	46bd      	mov	sp, r7
 8008328:	b005      	add	sp, #20
 800832a:	bd90      	pop	{r4, r7, pc}
 800832c:	20000408 	.word	0x20000408
 8008330:	0800948c 	.word	0x0800948c

08008334 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8008334:	b590      	push	{r4, r7, lr}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	0002      	movs	r2, r0
 800833c:	1dfb      	adds	r3, r7, #7
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	1dbb      	adds	r3, r7, #6
 8008342:	1c0a      	adds	r2, r1, #0
 8008344:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8008346:	1dbb      	adds	r3, r7, #6
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2204      	movs	r2, #4
 800834c:	4313      	orrs	r3, r2
 800834e:	b2da      	uxtb	r2, r3
 8008350:	1dfb      	adds	r3, r7, #7
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	0011      	movs	r1, r2
 8008356:	0018      	movs	r0, r3
 8008358:	f7ff ffb0 	bl	80082bc <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 800835c:	4b25      	ldr	r3, [pc, #148]	; (80083f4 <I2C_LCD_EnPulse+0xc0>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	4b25      	ldr	r3, [pc, #148]	; (80083f8 <I2C_LCD_EnPulse+0xc4>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4925      	ldr	r1, [pc, #148]	; (80083fc <I2C_LCD_EnPulse+0xc8>)
 8008368:	0018      	movs	r0, r3
 800836a:	f7f7 fee7 	bl	800013c <__udivsi3>
 800836e:	0003      	movs	r3, r0
 8008370:	005c      	lsls	r4, r3, #1
 8008372:	4b21      	ldr	r3, [pc, #132]	; (80083f8 <I2C_LCD_EnPulse+0xc4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4921      	ldr	r1, [pc, #132]	; (80083fc <I2C_LCD_EnPulse+0xc8>)
 8008378:	0018      	movs	r0, r3
 800837a:	f7f7 fedf 	bl	800013c <__udivsi3>
 800837e:	0003      	movs	r3, r0
 8008380:	085b      	lsrs	r3, r3, #1
 8008382:	1ae3      	subs	r3, r4, r3
 8008384:	613b      	str	r3, [r7, #16]
 8008386:	4b1b      	ldr	r3, [pc, #108]	; (80083f4 <I2C_LCD_EnPulse+0xc0>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	429a      	cmp	r2, r3
 8008392:	d8f8      	bhi.n	8008386 <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8008394:	1dbb      	adds	r3, r7, #6
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2204      	movs	r2, #4
 800839a:	4393      	bics	r3, r2
 800839c:	b2da      	uxtb	r2, r3
 800839e:	1dfb      	adds	r3, r7, #7
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	0011      	movs	r1, r2
 80083a4:	0018      	movs	r0, r3
 80083a6:	f7ff ff89 	bl	80082bc <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 80083aa:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <I2C_LCD_EnPulse+0xc0>)
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <I2C_LCD_EnPulse+0xc4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4911      	ldr	r1, [pc, #68]	; (80083fc <I2C_LCD_EnPulse+0xc8>)
 80083b6:	0018      	movs	r0, r3
 80083b8:	f7f7 fec0 	bl	800013c <__udivsi3>
 80083bc:	0003      	movs	r3, r0
 80083be:	001a      	movs	r2, r3
 80083c0:	2332      	movs	r3, #50	; 0x32
 80083c2:	4353      	muls	r3, r2
 80083c4:	001c      	movs	r4, r3
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <I2C_LCD_EnPulse+0xc4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	490c      	ldr	r1, [pc, #48]	; (80083fc <I2C_LCD_EnPulse+0xc8>)
 80083cc:	0018      	movs	r0, r3
 80083ce:	f7f7 feb5 	bl	800013c <__udivsi3>
 80083d2:	0003      	movs	r3, r0
 80083d4:	085b      	lsrs	r3, r3, #1
 80083d6:	1ae3      	subs	r3, r4, r3
 80083d8:	60bb      	str	r3, [r7, #8]
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <I2C_LCD_EnPulse+0xc0>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d8f8      	bhi.n	80083da <I2C_LCD_EnPulse+0xa6>
}
 80083e8:	46c0      	nop			; (mov r8, r8)
 80083ea:	46c0      	nop			; (mov r8, r8)
 80083ec:	46bd      	mov	sp, r7
 80083ee:	b007      	add	sp, #28
 80083f0:	bd90      	pop	{r4, r7, pc}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	e000e010 	.word	0xe000e010
 80083f8:	20000010 	.word	0x20000010
 80083fc:	000f4240 	.word	0x000f4240

08008400 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	0002      	movs	r2, r0
 8008408:	1dfb      	adds	r3, r7, #7
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	1dbb      	adds	r3, r7, #6
 800840e:	1c0a      	adds	r2, r1, #0
 8008410:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8008412:	1dbb      	adds	r3, r7, #6
 8008414:	781a      	ldrb	r2, [r3, #0]
 8008416:	1dfb      	adds	r3, r7, #7
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	0011      	movs	r1, r2
 800841c:	0018      	movs	r0, r3
 800841e:	f7ff ff4d 	bl	80082bc <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8008422:	1dbb      	adds	r3, r7, #6
 8008424:	781a      	ldrb	r2, [r3, #0]
 8008426:	1dfb      	adds	r3, r7, #7
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	0011      	movs	r1, r2
 800842c:	0018      	movs	r0, r3
 800842e:	f7ff ff81 	bl	8008334 <I2C_LCD_EnPulse>
}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	46bd      	mov	sp, r7
 8008436:	b002      	add	sp, #8
 8008438:	bd80      	pop	{r7, pc}

0800843a <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 800843a:	b590      	push	{r4, r7, lr}
 800843c:	b085      	sub	sp, #20
 800843e:	af00      	add	r7, sp, #0
 8008440:	0004      	movs	r4, r0
 8008442:	0008      	movs	r0, r1
 8008444:	0011      	movs	r1, r2
 8008446:	1dfb      	adds	r3, r7, #7
 8008448:	1c22      	adds	r2, r4, #0
 800844a:	701a      	strb	r2, [r3, #0]
 800844c:	1dbb      	adds	r3, r7, #6
 800844e:	1c02      	adds	r2, r0, #0
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	1d7b      	adds	r3, r7, #5
 8008454:	1c0a      	adds	r2, r1, #0
 8008456:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8008458:	200f      	movs	r0, #15
 800845a:	183b      	adds	r3, r7, r0
 800845c:	1dba      	adds	r2, r7, #6
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	210f      	movs	r1, #15
 8008462:	438a      	bics	r2, r1
 8008464:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8008466:	1dbb      	adds	r3, r7, #6
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	011a      	lsls	r2, r3, #4
 800846c:	240e      	movs	r4, #14
 800846e:	193b      	adds	r3, r7, r4
 8008470:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8008472:	183a      	adds	r2, r7, r0
 8008474:	1d7b      	adds	r3, r7, #5
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	4313      	orrs	r3, r2
 800847c:	b2da      	uxtb	r2, r3
 800847e:	1dfb      	adds	r3, r7, #7
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	0011      	movs	r1, r2
 8008484:	0018      	movs	r0, r3
 8008486:	f7ff ffbb 	bl	8008400 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800848a:	193a      	adds	r2, r7, r4
 800848c:	1d7b      	adds	r3, r7, #5
 800848e:	7812      	ldrb	r2, [r2, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	4313      	orrs	r3, r2
 8008494:	b2da      	uxtb	r2, r3
 8008496:	1dfb      	adds	r3, r7, #7
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	0011      	movs	r1, r2
 800849c:	0018      	movs	r0, r3
 800849e:	f7ff ffaf 	bl	8008400 <I2C_LCD_Write4Bits>
}
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	46bd      	mov	sp, r7
 80084a6:	b005      	add	sp, #20
 80084a8:	bd90      	pop	{r4, r7, pc}

080084aa <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	0002      	movs	r2, r0
 80084b2:	1dfb      	adds	r3, r7, #7
 80084b4:	701a      	strb	r2, [r3, #0]
 80084b6:	1dbb      	adds	r3, r7, #6
 80084b8:	1c0a      	adds	r2, r1, #0
 80084ba:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80084bc:	1dbb      	adds	r3, r7, #6
 80084be:	7819      	ldrb	r1, [r3, #0]
 80084c0:	1dfb      	adds	r3, r7, #7
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2200      	movs	r2, #0
 80084c6:	0018      	movs	r0, r3
 80084c8:	f7ff ffb7 	bl	800843a <I2C_LCD_Send>
}
 80084cc:	46c0      	nop			; (mov r8, r8)
 80084ce:	46bd      	mov	sp, r7
 80084d0:	b002      	add	sp, #8
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	0002      	movs	r2, r0
 80084dc:	1dfb      	adds	r3, r7, #7
 80084de:	701a      	strb	r2, [r3, #0]
 80084e0:	1dbb      	adds	r3, r7, #6
 80084e2:	1c0a      	adds	r2, r1, #0
 80084e4:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80084e6:	1dbb      	adds	r3, r7, #6
 80084e8:	7819      	ldrb	r1, [r3, #0]
 80084ea:	1dfb      	adds	r3, r7, #7
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2201      	movs	r2, #1
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7ff ffa2 	bl	800843a <I2C_LCD_Send>
}
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b002      	add	sp, #8
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8008500:	b590      	push	{r4, r7, lr}
 8008502:	b08b      	sub	sp, #44	; 0x2c
 8008504:	af00      	add	r7, sp, #0
 8008506:	0002      	movs	r2, r0
 8008508:	1dfb      	adds	r3, r7, #7
 800850a:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800850c:	46c0      	nop			; (mov r8, r8)
 800850e:	f7f9 fce5 	bl	8001edc <HAL_GetTick>
 8008512:	0003      	movs	r3, r0
 8008514:	2b31      	cmp	r3, #49	; 0x31
 8008516:	d9fa      	bls.n	800850e <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8008518:	1dfb      	adds	r3, r7, #7
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2130      	movs	r1, #48	; 0x30
 800851e:	0018      	movs	r0, r3
 8008520:	f7ff ffc3 	bl	80084aa <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8008524:	2300      	movs	r3, #0
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
 8008528:	e025      	b.n	8008576 <I2C_LCD_Init+0x76>
 800852a:	4b57      	ldr	r3, [pc, #348]	; (8008688 <I2C_LCD_Init+0x188>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	4b56      	ldr	r3, [pc, #344]	; (800868c <I2C_LCD_Init+0x18c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4956      	ldr	r1, [pc, #344]	; (8008690 <I2C_LCD_Init+0x190>)
 8008536:	0018      	movs	r0, r3
 8008538:	f7f7 fe00 	bl	800013c <__udivsi3>
 800853c:	0003      	movs	r3, r0
 800853e:	001a      	movs	r2, r3
 8008540:	0013      	movs	r3, r2
 8008542:	015b      	lsls	r3, r3, #5
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	189b      	adds	r3, r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	001c      	movs	r4, r3
 800854e:	4b4f      	ldr	r3, [pc, #316]	; (800868c <I2C_LCD_Init+0x18c>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	494f      	ldr	r1, [pc, #316]	; (8008690 <I2C_LCD_Init+0x190>)
 8008554:	0018      	movs	r0, r3
 8008556:	f7f7 fdf1 	bl	800013c <__udivsi3>
 800855a:	0003      	movs	r3, r0
 800855c:	085b      	lsrs	r3, r3, #1
 800855e:	1ae3      	subs	r3, r4, r3
 8008560:	60bb      	str	r3, [r7, #8]
 8008562:	4b49      	ldr	r3, [pc, #292]	; (8008688 <I2C_LCD_Init+0x188>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	429a      	cmp	r2, r3
 800856e:	d8f8      	bhi.n	8008562 <I2C_LCD_Init+0x62>
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	3301      	adds	r3, #1
 8008574:	627b      	str	r3, [r7, #36]	; 0x24
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	2b04      	cmp	r3, #4
 800857a:	d9d6      	bls.n	800852a <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800857c:	1dfb      	adds	r3, r7, #7
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2130      	movs	r1, #48	; 0x30
 8008582:	0018      	movs	r0, r3
 8008584:	f7ff ff91 	bl	80084aa <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8008588:	2300      	movs	r3, #0
 800858a:	623b      	str	r3, [r7, #32]
 800858c:	e025      	b.n	80085da <I2C_LCD_Init+0xda>
 800858e:	4b3e      	ldr	r3, [pc, #248]	; (8008688 <I2C_LCD_Init+0x188>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	4b3d      	ldr	r3, [pc, #244]	; (800868c <I2C_LCD_Init+0x18c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	493d      	ldr	r1, [pc, #244]	; (8008690 <I2C_LCD_Init+0x190>)
 800859a:	0018      	movs	r0, r3
 800859c:	f7f7 fdce 	bl	800013c <__udivsi3>
 80085a0:	0003      	movs	r3, r0
 80085a2:	001a      	movs	r2, r3
 80085a4:	0013      	movs	r3, r2
 80085a6:	015b      	lsls	r3, r3, #5
 80085a8:	1a9b      	subs	r3, r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	189b      	adds	r3, r3, r2
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	001c      	movs	r4, r3
 80085b2:	4b36      	ldr	r3, [pc, #216]	; (800868c <I2C_LCD_Init+0x18c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4936      	ldr	r1, [pc, #216]	; (8008690 <I2C_LCD_Init+0x190>)
 80085b8:	0018      	movs	r0, r3
 80085ba:	f7f7 fdbf 	bl	800013c <__udivsi3>
 80085be:	0003      	movs	r3, r0
 80085c0:	085b      	lsrs	r3, r3, #1
 80085c2:	1ae3      	subs	r3, r4, r3
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	4b30      	ldr	r3, [pc, #192]	; (8008688 <I2C_LCD_Init+0x188>)
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d8f8      	bhi.n	80085c6 <I2C_LCD_Init+0xc6>
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	3301      	adds	r3, #1
 80085d8:	623b      	str	r3, [r7, #32]
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d9d6      	bls.n	800858e <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80085e0:	1dfb      	adds	r3, r7, #7
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2130      	movs	r1, #48	; 0x30
 80085e6:	0018      	movs	r0, r3
 80085e8:	f7ff ff5f 	bl	80084aa <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80085ec:	4b26      	ldr	r3, [pc, #152]	; (8008688 <I2C_LCD_Init+0x188>)
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	4b26      	ldr	r3, [pc, #152]	; (800868c <I2C_LCD_Init+0x18c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4926      	ldr	r1, [pc, #152]	; (8008690 <I2C_LCD_Init+0x190>)
 80085f8:	0018      	movs	r0, r3
 80085fa:	f7f7 fd9f 	bl	800013c <__udivsi3>
 80085fe:	0003      	movs	r3, r0
 8008600:	001a      	movs	r2, r3
 8008602:	2396      	movs	r3, #150	; 0x96
 8008604:	4353      	muls	r3, r2
 8008606:	001c      	movs	r4, r3
 8008608:	4b20      	ldr	r3, [pc, #128]	; (800868c <I2C_LCD_Init+0x18c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4920      	ldr	r1, [pc, #128]	; (8008690 <I2C_LCD_Init+0x190>)
 800860e:	0018      	movs	r0, r3
 8008610:	f7f7 fd94 	bl	800013c <__udivsi3>
 8008614:	0003      	movs	r3, r0
 8008616:	085b      	lsrs	r3, r3, #1
 8008618:	1ae3      	subs	r3, r4, r3
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	4b1a      	ldr	r3, [pc, #104]	; (8008688 <I2C_LCD_Init+0x188>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	69fa      	ldr	r2, [r7, #28]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	429a      	cmp	r2, r3
 8008628:	d8f8      	bhi.n	800861c <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 800862a:	1dfb      	adds	r3, r7, #7
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2102      	movs	r1, #2
 8008630:	0018      	movs	r0, r3
 8008632:	f7ff ff3a 	bl	80084aa <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8008636:	1dfb      	adds	r3, r7, #7
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2128      	movs	r1, #40	; 0x28
 800863c:	0018      	movs	r0, r3
 800863e:	f7ff ff34 	bl	80084aa <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8008642:	1dfb      	adds	r3, r7, #7
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	210c      	movs	r1, #12
 8008648:	0018      	movs	r0, r3
 800864a:	f7ff ff2e 	bl	80084aa <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 800864e:	1dfb      	adds	r3, r7, #7
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2106      	movs	r1, #6
 8008654:	0018      	movs	r0, r3
 8008656:	f7ff ff28 	bl	80084aa <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800865a:	1dfb      	adds	r3, r7, #7
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <I2C_LCD_Init+0x194>)
 8008660:	0052      	lsls	r2, r2, #1
 8008662:	2104      	movs	r1, #4
 8008664:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8008666:	1dfb      	adds	r3, r7, #7
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	4a0a      	ldr	r2, [pc, #40]	; (8008694 <I2C_LCD_Init+0x194>)
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	18d3      	adds	r3, r2, r3
 8008670:	3301      	adds	r3, #1
 8008672:	2208      	movs	r2, #8
 8008674:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8008676:	1dfb      	adds	r3, r7, #7
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	0018      	movs	r0, r3
 800867c:	f000 f80c 	bl	8008698 <I2C_LCD_Clear>
}
 8008680:	46c0      	nop			; (mov r8, r8)
 8008682:	46bd      	mov	sp, r7
 8008684:	b00b      	add	sp, #44	; 0x2c
 8008686:	bd90      	pop	{r4, r7, pc}
 8008688:	e000e010 	.word	0xe000e010
 800868c:	20000010 	.word	0x20000010
 8008690:	000f4240 	.word	0x000f4240
 8008694:	20000408 	.word	0x20000408

08008698 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8008698:	b590      	push	{r4, r7, lr}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	0002      	movs	r2, r0
 80086a0:	1dfb      	adds	r3, r7, #7
 80086a2:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 80086a4:	1dfb      	adds	r3, r7, #7
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2101      	movs	r1, #1
 80086aa:	0018      	movs	r0, r3
 80086ac:	f7ff fefd 	bl	80084aa <I2C_LCD_Cmd>
    DELAY_MS(2);
 80086b0:	2300      	movs	r3, #0
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e025      	b.n	8008702 <I2C_LCD_Clear+0x6a>
 80086b6:	4b17      	ldr	r3, [pc, #92]	; (8008714 <I2C_LCD_Clear+0x7c>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	4b16      	ldr	r3, [pc, #88]	; (8008718 <I2C_LCD_Clear+0x80>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4916      	ldr	r1, [pc, #88]	; (800871c <I2C_LCD_Clear+0x84>)
 80086c2:	0018      	movs	r0, r3
 80086c4:	f7f7 fd3a 	bl	800013c <__udivsi3>
 80086c8:	0003      	movs	r3, r0
 80086ca:	001a      	movs	r2, r3
 80086cc:	0013      	movs	r3, r2
 80086ce:	015b      	lsls	r3, r3, #5
 80086d0:	1a9b      	subs	r3, r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	189b      	adds	r3, r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	001c      	movs	r4, r3
 80086da:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <I2C_LCD_Clear+0x80>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	490f      	ldr	r1, [pc, #60]	; (800871c <I2C_LCD_Clear+0x84>)
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7f7 fd2b 	bl	800013c <__udivsi3>
 80086e6:	0003      	movs	r3, r0
 80086e8:	085b      	lsrs	r3, r3, #1
 80086ea:	1ae3      	subs	r3, r4, r3
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <I2C_LCD_Clear+0x7c>)
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d8f8      	bhi.n	80086ee <I2C_LCD_Clear+0x56>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	3301      	adds	r3, #1
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d9d6      	bls.n	80086b6 <I2C_LCD_Clear+0x1e>
}
 8008708:	46c0      	nop			; (mov r8, r8)
 800870a:	46c0      	nop			; (mov r8, r8)
 800870c:	46bd      	mov	sp, r7
 800870e:	b007      	add	sp, #28
 8008710:	bd90      	pop	{r4, r7, pc}
 8008712:	46c0      	nop			; (mov r8, r8)
 8008714:	e000e010 	.word	0xe000e010
 8008718:	20000010 	.word	0x20000010
 800871c:	000f4240 	.word	0x000f4240

08008720 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8008720:	b590      	push	{r4, r7, lr}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	0004      	movs	r4, r0
 8008728:	0008      	movs	r0, r1
 800872a:	0011      	movs	r1, r2
 800872c:	1dfb      	adds	r3, r7, #7
 800872e:	1c22      	adds	r2, r4, #0
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	1dbb      	adds	r3, r7, #6
 8008734:	1c02      	adds	r2, r0, #0
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	1d7b      	adds	r3, r7, #5
 800873a:	1c0a      	adds	r2, r1, #0
 800873c:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800873e:	2308      	movs	r3, #8
 8008740:	18fb      	adds	r3, r7, r3
 8008742:	4a1d      	ldr	r2, [pc, #116]	; (80087b8 <I2C_LCD_SetCursor+0x98>)
 8008744:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008746:	c313      	stmia	r3!, {r0, r1, r4}
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800874c:	1dfb      	adds	r3, r7, #7
 800874e:	781a      	ldrb	r2, [r3, #0]
 8008750:	491a      	ldr	r1, [pc, #104]	; (80087bc <I2C_LCD_SetCursor+0x9c>)
 8008752:	0013      	movs	r3, r2
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	189b      	adds	r3, r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	18cb      	adds	r3, r1, r3
 800875c:	330a      	adds	r3, #10
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	1d7a      	adds	r2, r7, #5
 8008762:	7812      	ldrb	r2, [r2, #0]
 8008764:	429a      	cmp	r2, r3
 8008766:	d90c      	bls.n	8008782 <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8008768:	1dfb      	adds	r3, r7, #7
 800876a:	781a      	ldrb	r2, [r3, #0]
 800876c:	4913      	ldr	r1, [pc, #76]	; (80087bc <I2C_LCD_SetCursor+0x9c>)
 800876e:	0013      	movs	r3, r2
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	189b      	adds	r3, r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	18cb      	adds	r3, r1, r3
 8008778:	330a      	adds	r3, #10
 800877a:	781a      	ldrb	r2, [r3, #0]
 800877c:	1d7b      	adds	r3, r7, #5
 800877e:	3a01      	subs	r2, #1
 8008780:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8008782:	1d7b      	adds	r3, r7, #5
 8008784:	781a      	ldrb	r2, [r3, #0]
 8008786:	2308      	movs	r3, #8
 8008788:	18fb      	adds	r3, r7, r3
 800878a:	0092      	lsls	r2, r2, #2
 800878c:	58d3      	ldr	r3, [r2, r3]
 800878e:	b2da      	uxtb	r2, r3
 8008790:	1dbb      	adds	r3, r7, #6
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	18d3      	adds	r3, r2, r3
 8008796:	b2db      	uxtb	r3, r3
 8008798:	b25b      	sxtb	r3, r3
 800879a:	2280      	movs	r2, #128	; 0x80
 800879c:	4252      	negs	r2, r2
 800879e:	4313      	orrs	r3, r2
 80087a0:	b25b      	sxtb	r3, r3
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	1dfb      	adds	r3, r7, #7
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	0011      	movs	r1, r2
 80087aa:	0018      	movs	r0, r3
 80087ac:	f7ff fe7d 	bl	80084aa <I2C_LCD_Cmd>
}
 80087b0:	46c0      	nop			; (mov r8, r8)
 80087b2:	46bd      	mov	sp, r7
 80087b4:	b007      	add	sp, #28
 80087b6:	bd90      	pop	{r4, r7, pc}
 80087b8:	080093a0 	.word	0x080093a0
 80087bc:	0800948c 	.word	0x0800948c

080087c0 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	0002      	movs	r2, r0
 80087c8:	6039      	str	r1, [r7, #0]
 80087ca:	1dfb      	adds	r3, r7, #7
 80087cc:	701a      	strb	r2, [r3, #0]
    while (*Str)
 80087ce:	e009      	b.n	80087e4 <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	603a      	str	r2, [r7, #0]
 80087d6:	781a      	ldrb	r2, [r3, #0]
 80087d8:	1dfb      	adds	r3, r7, #7
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	0011      	movs	r1, r2
 80087de:	0018      	movs	r0, r3
 80087e0:	f7ff fe78 	bl	80084d4 <I2C_LCD_Data>
    while (*Str)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1f1      	bne.n	80087d0 <I2C_LCD_WriteString+0x10>
    }
}
 80087ec:	46c0      	nop			; (mov r8, r8)
 80087ee:	46c0      	nop			; (mov r8, r8)
 80087f0:	46bd      	mov	sp, r7
 80087f2:	b002      	add	sp, #8
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <I2C_LCD_Display>:
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_NOBACKLIGHT;
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
}

void I2C_LCD_Display(uint8_t I2C_LCD_InstanceIndex)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	0002      	movs	r2, r0
 8008800:	1dfb      	adds	r3, r7, #7
 8008802:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_DISPLAYON;
 8008804:	1dfb      	adds	r3, r7, #7
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <I2C_LCD_Display+0x4c>)
 800880a:	0052      	lsls	r2, r2, #1
 800880c:	5cd3      	ldrb	r3, [r2, r3]
 800880e:	1dfa      	adds	r2, r7, #7
 8008810:	7812      	ldrb	r2, [r2, #0]
 8008812:	2104      	movs	r1, #4
 8008814:	430b      	orrs	r3, r1
 8008816:	b2d9      	uxtb	r1, r3
 8008818:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <I2C_LCD_Display+0x4c>)
 800881a:	0052      	lsls	r2, r2, #1
 800881c:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 800881e:	1dfb      	adds	r3, r7, #7
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	4b08      	ldr	r3, [pc, #32]	; (8008844 <I2C_LCD_Display+0x4c>)
 8008824:	0052      	lsls	r2, r2, #1
 8008826:	5cd3      	ldrb	r3, [r2, r3]
 8008828:	2208      	movs	r2, #8
 800882a:	4313      	orrs	r3, r2
 800882c:	b2da      	uxtb	r2, r3
 800882e:	1dfb      	adds	r3, r7, #7
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	0011      	movs	r1, r2
 8008834:	0018      	movs	r0, r3
 8008836:	f7ff fe38 	bl	80084aa <I2C_LCD_Cmd>
}
 800883a:	46c0      	nop			; (mov r8, r8)
 800883c:	46bd      	mov	sp, r7
 800883e:	b002      	add	sp, #8
 8008840:	bd80      	pop	{r7, pc}
 8008842:	46c0      	nop			; (mov r8, r8)
 8008844:	20000408 	.word	0x20000408

08008848 <I2C_LCD_NoDisplay>:

void I2C_LCD_NoDisplay(uint8_t I2C_LCD_InstanceIndex)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	0002      	movs	r2, r0
 8008850:	1dfb      	adds	r3, r7, #7
 8008852:	701a      	strb	r2, [r3, #0]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl &= ~LCD_DISPLAYON;
 8008854:	1dfb      	adds	r3, r7, #7
 8008856:	781a      	ldrb	r2, [r3, #0]
 8008858:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <I2C_LCD_NoDisplay+0x4c>)
 800885a:	0052      	lsls	r2, r2, #1
 800885c:	5cd3      	ldrb	r3, [r2, r3]
 800885e:	1dfa      	adds	r2, r7, #7
 8008860:	7812      	ldrb	r2, [r2, #0]
 8008862:	2104      	movs	r1, #4
 8008864:	438b      	bics	r3, r1
 8008866:	b2d9      	uxtb	r1, r3
 8008868:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <I2C_LCD_NoDisplay+0x4c>)
 800886a:	0052      	lsls	r2, r2, #1
 800886c:	54d1      	strb	r1, [r2, r3]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 800886e:	1dfb      	adds	r3, r7, #7
 8008870:	781a      	ldrb	r2, [r3, #0]
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <I2C_LCD_NoDisplay+0x4c>)
 8008874:	0052      	lsls	r2, r2, #1
 8008876:	5cd3      	ldrb	r3, [r2, r3]
 8008878:	2208      	movs	r2, #8
 800887a:	4313      	orrs	r3, r2
 800887c:	b2da      	uxtb	r2, r3
 800887e:	1dfb      	adds	r3, r7, #7
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	0011      	movs	r1, r2
 8008884:	0018      	movs	r0, r3
 8008886:	f7ff fe10 	bl	80084aa <I2C_LCD_Cmd>
}
 800888a:	46c0      	nop			; (mov r8, r8)
 800888c:	46bd      	mov	sp, r7
 800888e:	b002      	add	sp, #8
 8008890:	bd80      	pop	{r7, pc}
 8008892:	46c0      	nop			; (mov r8, r8)
 8008894:	20000408 	.word	0x20000408

08008898 <siprintf>:
 8008898:	b40e      	push	{r1, r2, r3}
 800889a:	b500      	push	{lr}
 800889c:	490b      	ldr	r1, [pc, #44]	; (80088cc <siprintf+0x34>)
 800889e:	b09c      	sub	sp, #112	; 0x70
 80088a0:	ab1d      	add	r3, sp, #116	; 0x74
 80088a2:	9002      	str	r0, [sp, #8]
 80088a4:	9006      	str	r0, [sp, #24]
 80088a6:	9107      	str	r1, [sp, #28]
 80088a8:	9104      	str	r1, [sp, #16]
 80088aa:	4809      	ldr	r0, [pc, #36]	; (80088d0 <siprintf+0x38>)
 80088ac:	4909      	ldr	r1, [pc, #36]	; (80088d4 <siprintf+0x3c>)
 80088ae:	cb04      	ldmia	r3!, {r2}
 80088b0:	9105      	str	r1, [sp, #20]
 80088b2:	6800      	ldr	r0, [r0, #0]
 80088b4:	a902      	add	r1, sp, #8
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	f000 f9a2 	bl	8008c00 <_svfiprintf_r>
 80088bc:	2200      	movs	r2, #0
 80088be:	9b02      	ldr	r3, [sp, #8]
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	b01c      	add	sp, #112	; 0x70
 80088c4:	bc08      	pop	{r3}
 80088c6:	b003      	add	sp, #12
 80088c8:	4718      	bx	r3
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	7fffffff 	.word	0x7fffffff
 80088d0:	20000068 	.word	0x20000068
 80088d4:	ffff0208 	.word	0xffff0208

080088d8 <memset>:
 80088d8:	0003      	movs	r3, r0
 80088da:	1882      	adds	r2, r0, r2
 80088dc:	4293      	cmp	r3, r2
 80088de:	d100      	bne.n	80088e2 <memset+0xa>
 80088e0:	4770      	bx	lr
 80088e2:	7019      	strb	r1, [r3, #0]
 80088e4:	3301      	adds	r3, #1
 80088e6:	e7f9      	b.n	80088dc <memset+0x4>

080088e8 <__errno>:
 80088e8:	4b01      	ldr	r3, [pc, #4]	; (80088f0 <__errno+0x8>)
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	4770      	bx	lr
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	20000068 	.word	0x20000068

080088f4 <__libc_init_array>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	2600      	movs	r6, #0
 80088f8:	4c0c      	ldr	r4, [pc, #48]	; (800892c <__libc_init_array+0x38>)
 80088fa:	4d0d      	ldr	r5, [pc, #52]	; (8008930 <__libc_init_array+0x3c>)
 80088fc:	1b64      	subs	r4, r4, r5
 80088fe:	10a4      	asrs	r4, r4, #2
 8008900:	42a6      	cmp	r6, r4
 8008902:	d109      	bne.n	8008918 <__libc_init_array+0x24>
 8008904:	2600      	movs	r6, #0
 8008906:	f000 fc6d 	bl	80091e4 <_init>
 800890a:	4c0a      	ldr	r4, [pc, #40]	; (8008934 <__libc_init_array+0x40>)
 800890c:	4d0a      	ldr	r5, [pc, #40]	; (8008938 <__libc_init_array+0x44>)
 800890e:	1b64      	subs	r4, r4, r5
 8008910:	10a4      	asrs	r4, r4, #2
 8008912:	42a6      	cmp	r6, r4
 8008914:	d105      	bne.n	8008922 <__libc_init_array+0x2e>
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	00b3      	lsls	r3, r6, #2
 800891a:	58eb      	ldr	r3, [r5, r3]
 800891c:	4798      	blx	r3
 800891e:	3601      	adds	r6, #1
 8008920:	e7ee      	b.n	8008900 <__libc_init_array+0xc>
 8008922:	00b3      	lsls	r3, r6, #2
 8008924:	58eb      	ldr	r3, [r5, r3]
 8008926:	4798      	blx	r3
 8008928:	3601      	adds	r6, #1
 800892a:	e7f2      	b.n	8008912 <__libc_init_array+0x1e>
 800892c:	080094d4 	.word	0x080094d4
 8008930:	080094d4 	.word	0x080094d4
 8008934:	080094d8 	.word	0x080094d8
 8008938:	080094d4 	.word	0x080094d4

0800893c <__retarget_lock_acquire_recursive>:
 800893c:	4770      	bx	lr

0800893e <__retarget_lock_release_recursive>:
 800893e:	4770      	bx	lr

08008940 <_free_r>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	0005      	movs	r5, r0
 8008944:	2900      	cmp	r1, #0
 8008946:	d010      	beq.n	800896a <_free_r+0x2a>
 8008948:	1f0c      	subs	r4, r1, #4
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	da00      	bge.n	8008952 <_free_r+0x12>
 8008950:	18e4      	adds	r4, r4, r3
 8008952:	0028      	movs	r0, r5
 8008954:	f000 f8e2 	bl	8008b1c <__malloc_lock>
 8008958:	4a1d      	ldr	r2, [pc, #116]	; (80089d0 <_free_r+0x90>)
 800895a:	6813      	ldr	r3, [r2, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d105      	bne.n	800896c <_free_r+0x2c>
 8008960:	6063      	str	r3, [r4, #4]
 8008962:	6014      	str	r4, [r2, #0]
 8008964:	0028      	movs	r0, r5
 8008966:	f000 f8e1 	bl	8008b2c <__malloc_unlock>
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	42a3      	cmp	r3, r4
 800896e:	d908      	bls.n	8008982 <_free_r+0x42>
 8008970:	6820      	ldr	r0, [r4, #0]
 8008972:	1821      	adds	r1, r4, r0
 8008974:	428b      	cmp	r3, r1
 8008976:	d1f3      	bne.n	8008960 <_free_r+0x20>
 8008978:	6819      	ldr	r1, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	1809      	adds	r1, r1, r0
 800897e:	6021      	str	r1, [r4, #0]
 8008980:	e7ee      	b.n	8008960 <_free_r+0x20>
 8008982:	001a      	movs	r2, r3
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <_free_r+0x4e>
 800898a:	42a3      	cmp	r3, r4
 800898c:	d9f9      	bls.n	8008982 <_free_r+0x42>
 800898e:	6811      	ldr	r1, [r2, #0]
 8008990:	1850      	adds	r0, r2, r1
 8008992:	42a0      	cmp	r0, r4
 8008994:	d10b      	bne.n	80089ae <_free_r+0x6e>
 8008996:	6820      	ldr	r0, [r4, #0]
 8008998:	1809      	adds	r1, r1, r0
 800899a:	1850      	adds	r0, r2, r1
 800899c:	6011      	str	r1, [r2, #0]
 800899e:	4283      	cmp	r3, r0
 80089a0:	d1e0      	bne.n	8008964 <_free_r+0x24>
 80089a2:	6818      	ldr	r0, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	1841      	adds	r1, r0, r1
 80089a8:	6011      	str	r1, [r2, #0]
 80089aa:	6053      	str	r3, [r2, #4]
 80089ac:	e7da      	b.n	8008964 <_free_r+0x24>
 80089ae:	42a0      	cmp	r0, r4
 80089b0:	d902      	bls.n	80089b8 <_free_r+0x78>
 80089b2:	230c      	movs	r3, #12
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	e7d5      	b.n	8008964 <_free_r+0x24>
 80089b8:	6820      	ldr	r0, [r4, #0]
 80089ba:	1821      	adds	r1, r4, r0
 80089bc:	428b      	cmp	r3, r1
 80089be:	d103      	bne.n	80089c8 <_free_r+0x88>
 80089c0:	6819      	ldr	r1, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	1809      	adds	r1, r1, r0
 80089c6:	6021      	str	r1, [r4, #0]
 80089c8:	6063      	str	r3, [r4, #4]
 80089ca:	6054      	str	r4, [r2, #4]
 80089cc:	e7ca      	b.n	8008964 <_free_r+0x24>
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	2000054c 	.word	0x2000054c

080089d4 <sbrk_aligned>:
 80089d4:	b570      	push	{r4, r5, r6, lr}
 80089d6:	4e0f      	ldr	r6, [pc, #60]	; (8008a14 <sbrk_aligned+0x40>)
 80089d8:	000d      	movs	r5, r1
 80089da:	6831      	ldr	r1, [r6, #0]
 80089dc:	0004      	movs	r4, r0
 80089de:	2900      	cmp	r1, #0
 80089e0:	d102      	bne.n	80089e8 <sbrk_aligned+0x14>
 80089e2:	f000 fba1 	bl	8009128 <_sbrk_r>
 80089e6:	6030      	str	r0, [r6, #0]
 80089e8:	0029      	movs	r1, r5
 80089ea:	0020      	movs	r0, r4
 80089ec:	f000 fb9c 	bl	8009128 <_sbrk_r>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d00a      	beq.n	8008a0a <sbrk_aligned+0x36>
 80089f4:	2303      	movs	r3, #3
 80089f6:	1cc5      	adds	r5, r0, #3
 80089f8:	439d      	bics	r5, r3
 80089fa:	42a8      	cmp	r0, r5
 80089fc:	d007      	beq.n	8008a0e <sbrk_aligned+0x3a>
 80089fe:	1a29      	subs	r1, r5, r0
 8008a00:	0020      	movs	r0, r4
 8008a02:	f000 fb91 	bl	8009128 <_sbrk_r>
 8008a06:	3001      	adds	r0, #1
 8008a08:	d101      	bne.n	8008a0e <sbrk_aligned+0x3a>
 8008a0a:	2501      	movs	r5, #1
 8008a0c:	426d      	negs	r5, r5
 8008a0e:	0028      	movs	r0, r5
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	20000550 	.word	0x20000550

08008a18 <_malloc_r>:
 8008a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a1a:	2203      	movs	r2, #3
 8008a1c:	1ccb      	adds	r3, r1, #3
 8008a1e:	4393      	bics	r3, r2
 8008a20:	3308      	adds	r3, #8
 8008a22:	0006      	movs	r6, r0
 8008a24:	001f      	movs	r7, r3
 8008a26:	2b0c      	cmp	r3, #12
 8008a28:	d238      	bcs.n	8008a9c <_malloc_r+0x84>
 8008a2a:	270c      	movs	r7, #12
 8008a2c:	42b9      	cmp	r1, r7
 8008a2e:	d837      	bhi.n	8008aa0 <_malloc_r+0x88>
 8008a30:	0030      	movs	r0, r6
 8008a32:	f000 f873 	bl	8008b1c <__malloc_lock>
 8008a36:	4b38      	ldr	r3, [pc, #224]	; (8008b18 <_malloc_r+0x100>)
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	001c      	movs	r4, r3
 8008a3e:	2c00      	cmp	r4, #0
 8008a40:	d133      	bne.n	8008aaa <_malloc_r+0x92>
 8008a42:	0039      	movs	r1, r7
 8008a44:	0030      	movs	r0, r6
 8008a46:	f7ff ffc5 	bl	80089d4 <sbrk_aligned>
 8008a4a:	0004      	movs	r4, r0
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	d15e      	bne.n	8008b0e <_malloc_r+0xf6>
 8008a50:	9b00      	ldr	r3, [sp, #0]
 8008a52:	681c      	ldr	r4, [r3, #0]
 8008a54:	0025      	movs	r5, r4
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	d14e      	bne.n	8008af8 <_malloc_r+0xe0>
 8008a5a:	2c00      	cmp	r4, #0
 8008a5c:	d051      	beq.n	8008b02 <_malloc_r+0xea>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	0029      	movs	r1, r5
 8008a62:	18e3      	adds	r3, r4, r3
 8008a64:	0030      	movs	r0, r6
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	f000 fb5e 	bl	8009128 <_sbrk_r>
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	4283      	cmp	r3, r0
 8008a70:	d147      	bne.n	8008b02 <_malloc_r+0xea>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	0030      	movs	r0, r6
 8008a76:	1aff      	subs	r7, r7, r3
 8008a78:	0039      	movs	r1, r7
 8008a7a:	f7ff ffab 	bl	80089d4 <sbrk_aligned>
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d03f      	beq.n	8008b02 <_malloc_r+0xea>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	19db      	adds	r3, r3, r7
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	9b00      	ldr	r3, [sp, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d040      	beq.n	8008b12 <_malloc_r+0xfa>
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	42a2      	cmp	r2, r4
 8008a94:	d133      	bne.n	8008afe <_malloc_r+0xe6>
 8008a96:	2200      	movs	r2, #0
 8008a98:	605a      	str	r2, [r3, #4]
 8008a9a:	e014      	b.n	8008ac6 <_malloc_r+0xae>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dac5      	bge.n	8008a2c <_malloc_r+0x14>
 8008aa0:	230c      	movs	r3, #12
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	6033      	str	r3, [r6, #0]
 8008aa6:	0028      	movs	r0, r5
 8008aa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008aaa:	6821      	ldr	r1, [r4, #0]
 8008aac:	1bc9      	subs	r1, r1, r7
 8008aae:	d420      	bmi.n	8008af2 <_malloc_r+0xda>
 8008ab0:	290b      	cmp	r1, #11
 8008ab2:	d918      	bls.n	8008ae6 <_malloc_r+0xce>
 8008ab4:	19e2      	adds	r2, r4, r7
 8008ab6:	6027      	str	r7, [r4, #0]
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d112      	bne.n	8008ae2 <_malloc_r+0xca>
 8008abc:	9b00      	ldr	r3, [sp, #0]
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	6863      	ldr	r3, [r4, #4]
 8008ac2:	6011      	str	r1, [r2, #0]
 8008ac4:	6053      	str	r3, [r2, #4]
 8008ac6:	0030      	movs	r0, r6
 8008ac8:	0025      	movs	r5, r4
 8008aca:	f000 f82f 	bl	8008b2c <__malloc_unlock>
 8008ace:	2207      	movs	r2, #7
 8008ad0:	350b      	adds	r5, #11
 8008ad2:	1d23      	adds	r3, r4, #4
 8008ad4:	4395      	bics	r5, r2
 8008ad6:	1aea      	subs	r2, r5, r3
 8008ad8:	429d      	cmp	r5, r3
 8008ada:	d0e4      	beq.n	8008aa6 <_malloc_r+0x8e>
 8008adc:	1b5b      	subs	r3, r3, r5
 8008ade:	50a3      	str	r3, [r4, r2]
 8008ae0:	e7e1      	b.n	8008aa6 <_malloc_r+0x8e>
 8008ae2:	605a      	str	r2, [r3, #4]
 8008ae4:	e7ec      	b.n	8008ac0 <_malloc_r+0xa8>
 8008ae6:	6862      	ldr	r2, [r4, #4]
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	d1d5      	bne.n	8008a98 <_malloc_r+0x80>
 8008aec:	9b00      	ldr	r3, [sp, #0]
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	e7e9      	b.n	8008ac6 <_malloc_r+0xae>
 8008af2:	0023      	movs	r3, r4
 8008af4:	6864      	ldr	r4, [r4, #4]
 8008af6:	e7a2      	b.n	8008a3e <_malloc_r+0x26>
 8008af8:	002c      	movs	r4, r5
 8008afa:	686d      	ldr	r5, [r5, #4]
 8008afc:	e7ab      	b.n	8008a56 <_malloc_r+0x3e>
 8008afe:	0013      	movs	r3, r2
 8008b00:	e7c4      	b.n	8008a8c <_malloc_r+0x74>
 8008b02:	230c      	movs	r3, #12
 8008b04:	0030      	movs	r0, r6
 8008b06:	6033      	str	r3, [r6, #0]
 8008b08:	f000 f810 	bl	8008b2c <__malloc_unlock>
 8008b0c:	e7cb      	b.n	8008aa6 <_malloc_r+0x8e>
 8008b0e:	6027      	str	r7, [r4, #0]
 8008b10:	e7d9      	b.n	8008ac6 <_malloc_r+0xae>
 8008b12:	605b      	str	r3, [r3, #4]
 8008b14:	deff      	udf	#255	; 0xff
 8008b16:	46c0      	nop			; (mov r8, r8)
 8008b18:	2000054c 	.word	0x2000054c

08008b1c <__malloc_lock>:
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	4802      	ldr	r0, [pc, #8]	; (8008b28 <__malloc_lock+0xc>)
 8008b20:	f7ff ff0c 	bl	800893c <__retarget_lock_acquire_recursive>
 8008b24:	bd10      	pop	{r4, pc}
 8008b26:	46c0      	nop			; (mov r8, r8)
 8008b28:	20000548 	.word	0x20000548

08008b2c <__malloc_unlock>:
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	4802      	ldr	r0, [pc, #8]	; (8008b38 <__malloc_unlock+0xc>)
 8008b30:	f7ff ff05 	bl	800893e <__retarget_lock_release_recursive>
 8008b34:	bd10      	pop	{r4, pc}
 8008b36:	46c0      	nop			; (mov r8, r8)
 8008b38:	20000548 	.word	0x20000548

08008b3c <__ssputs_r>:
 8008b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	9203      	str	r2, [sp, #12]
 8008b44:	688e      	ldr	r6, [r1, #8]
 8008b46:	9a01      	ldr	r2, [sp, #4]
 8008b48:	0007      	movs	r7, r0
 8008b4a:	000c      	movs	r4, r1
 8008b4c:	680b      	ldr	r3, [r1, #0]
 8008b4e:	4296      	cmp	r6, r2
 8008b50:	d831      	bhi.n	8008bb6 <__ssputs_r+0x7a>
 8008b52:	898a      	ldrh	r2, [r1, #12]
 8008b54:	2190      	movs	r1, #144	; 0x90
 8008b56:	00c9      	lsls	r1, r1, #3
 8008b58:	420a      	tst	r2, r1
 8008b5a:	d029      	beq.n	8008bb0 <__ssputs_r+0x74>
 8008b5c:	2003      	movs	r0, #3
 8008b5e:	6921      	ldr	r1, [r4, #16]
 8008b60:	1a5b      	subs	r3, r3, r1
 8008b62:	9302      	str	r3, [sp, #8]
 8008b64:	6963      	ldr	r3, [r4, #20]
 8008b66:	4343      	muls	r3, r0
 8008b68:	0fdd      	lsrs	r5, r3, #31
 8008b6a:	18ed      	adds	r5, r5, r3
 8008b6c:	9b01      	ldr	r3, [sp, #4]
 8008b6e:	9802      	ldr	r0, [sp, #8]
 8008b70:	3301      	adds	r3, #1
 8008b72:	181b      	adds	r3, r3, r0
 8008b74:	106d      	asrs	r5, r5, #1
 8008b76:	42ab      	cmp	r3, r5
 8008b78:	d900      	bls.n	8008b7c <__ssputs_r+0x40>
 8008b7a:	001d      	movs	r5, r3
 8008b7c:	0552      	lsls	r2, r2, #21
 8008b7e:	d529      	bpl.n	8008bd4 <__ssputs_r+0x98>
 8008b80:	0029      	movs	r1, r5
 8008b82:	0038      	movs	r0, r7
 8008b84:	f7ff ff48 	bl	8008a18 <_malloc_r>
 8008b88:	1e06      	subs	r6, r0, #0
 8008b8a:	d02d      	beq.n	8008be8 <__ssputs_r+0xac>
 8008b8c:	9a02      	ldr	r2, [sp, #8]
 8008b8e:	6921      	ldr	r1, [r4, #16]
 8008b90:	f000 fae7 	bl	8009162 <memcpy>
 8008b94:	89a2      	ldrh	r2, [r4, #12]
 8008b96:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <__ssputs_r+0xc0>)
 8008b98:	401a      	ands	r2, r3
 8008b9a:	2380      	movs	r3, #128	; 0x80
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	81a3      	strh	r3, [r4, #12]
 8008ba0:	9b02      	ldr	r3, [sp, #8]
 8008ba2:	6126      	str	r6, [r4, #16]
 8008ba4:	18f6      	adds	r6, r6, r3
 8008ba6:	6026      	str	r6, [r4, #0]
 8008ba8:	6165      	str	r5, [r4, #20]
 8008baa:	9e01      	ldr	r6, [sp, #4]
 8008bac:	1aed      	subs	r5, r5, r3
 8008bae:	60a5      	str	r5, [r4, #8]
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	429e      	cmp	r6, r3
 8008bb4:	d900      	bls.n	8008bb8 <__ssputs_r+0x7c>
 8008bb6:	9e01      	ldr	r6, [sp, #4]
 8008bb8:	0032      	movs	r2, r6
 8008bba:	9903      	ldr	r1, [sp, #12]
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	f000 fa9f 	bl	8009100 <memmove>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	68a3      	ldr	r3, [r4, #8]
 8008bc6:	1b9b      	subs	r3, r3, r6
 8008bc8:	60a3      	str	r3, [r4, #8]
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	199b      	adds	r3, r3, r6
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	b005      	add	sp, #20
 8008bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bd4:	002a      	movs	r2, r5
 8008bd6:	0038      	movs	r0, r7
 8008bd8:	f000 facc 	bl	8009174 <_realloc_r>
 8008bdc:	1e06      	subs	r6, r0, #0
 8008bde:	d1df      	bne.n	8008ba0 <__ssputs_r+0x64>
 8008be0:	0038      	movs	r0, r7
 8008be2:	6921      	ldr	r1, [r4, #16]
 8008be4:	f7ff feac 	bl	8008940 <_free_r>
 8008be8:	230c      	movs	r3, #12
 8008bea:	2001      	movs	r0, #1
 8008bec:	603b      	str	r3, [r7, #0]
 8008bee:	89a2      	ldrh	r2, [r4, #12]
 8008bf0:	3334      	adds	r3, #52	; 0x34
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	4240      	negs	r0, r0
 8008bf8:	e7ea      	b.n	8008bd0 <__ssputs_r+0x94>
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	fffffb7f 	.word	0xfffffb7f

08008c00 <_svfiprintf_r>:
 8008c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c02:	b0a1      	sub	sp, #132	; 0x84
 8008c04:	9003      	str	r0, [sp, #12]
 8008c06:	001d      	movs	r5, r3
 8008c08:	898b      	ldrh	r3, [r1, #12]
 8008c0a:	000f      	movs	r7, r1
 8008c0c:	0016      	movs	r6, r2
 8008c0e:	061b      	lsls	r3, r3, #24
 8008c10:	d511      	bpl.n	8008c36 <_svfiprintf_r+0x36>
 8008c12:	690b      	ldr	r3, [r1, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10e      	bne.n	8008c36 <_svfiprintf_r+0x36>
 8008c18:	2140      	movs	r1, #64	; 0x40
 8008c1a:	f7ff fefd 	bl	8008a18 <_malloc_r>
 8008c1e:	6038      	str	r0, [r7, #0]
 8008c20:	6138      	str	r0, [r7, #16]
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d105      	bne.n	8008c32 <_svfiprintf_r+0x32>
 8008c26:	230c      	movs	r3, #12
 8008c28:	9a03      	ldr	r2, [sp, #12]
 8008c2a:	3801      	subs	r0, #1
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	b021      	add	sp, #132	; 0x84
 8008c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c32:	2340      	movs	r3, #64	; 0x40
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	2300      	movs	r3, #0
 8008c38:	ac08      	add	r4, sp, #32
 8008c3a:	6163      	str	r3, [r4, #20]
 8008c3c:	3320      	adds	r3, #32
 8008c3e:	7663      	strb	r3, [r4, #25]
 8008c40:	3310      	adds	r3, #16
 8008c42:	76a3      	strb	r3, [r4, #26]
 8008c44:	9507      	str	r5, [sp, #28]
 8008c46:	0035      	movs	r5, r6
 8008c48:	782b      	ldrb	r3, [r5, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <_svfiprintf_r+0x52>
 8008c4e:	2b25      	cmp	r3, #37	; 0x25
 8008c50:	d148      	bne.n	8008ce4 <_svfiprintf_r+0xe4>
 8008c52:	1bab      	subs	r3, r5, r6
 8008c54:	9305      	str	r3, [sp, #20]
 8008c56:	42b5      	cmp	r5, r6
 8008c58:	d00b      	beq.n	8008c72 <_svfiprintf_r+0x72>
 8008c5a:	0032      	movs	r2, r6
 8008c5c:	0039      	movs	r1, r7
 8008c5e:	9803      	ldr	r0, [sp, #12]
 8008c60:	f7ff ff6c 	bl	8008b3c <__ssputs_r>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d100      	bne.n	8008c6a <_svfiprintf_r+0x6a>
 8008c68:	e0af      	b.n	8008dca <_svfiprintf_r+0x1ca>
 8008c6a:	6963      	ldr	r3, [r4, #20]
 8008c6c:	9a05      	ldr	r2, [sp, #20]
 8008c6e:	189b      	adds	r3, r3, r2
 8008c70:	6163      	str	r3, [r4, #20]
 8008c72:	782b      	ldrb	r3, [r5, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d100      	bne.n	8008c7a <_svfiprintf_r+0x7a>
 8008c78:	e0a7      	b.n	8008dca <_svfiprintf_r+0x1ca>
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4252      	negs	r2, r2
 8008c80:	6062      	str	r2, [r4, #4]
 8008c82:	a904      	add	r1, sp, #16
 8008c84:	3254      	adds	r2, #84	; 0x54
 8008c86:	1852      	adds	r2, r2, r1
 8008c88:	1c6e      	adds	r6, r5, #1
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	60e3      	str	r3, [r4, #12]
 8008c8e:	60a3      	str	r3, [r4, #8]
 8008c90:	7013      	strb	r3, [r2, #0]
 8008c92:	65a3      	str	r3, [r4, #88]	; 0x58
 8008c94:	4b55      	ldr	r3, [pc, #340]	; (8008dec <_svfiprintf_r+0x1ec>)
 8008c96:	2205      	movs	r2, #5
 8008c98:	0018      	movs	r0, r3
 8008c9a:	7831      	ldrb	r1, [r6, #0]
 8008c9c:	9305      	str	r3, [sp, #20]
 8008c9e:	f000 fa55 	bl	800914c <memchr>
 8008ca2:	1c75      	adds	r5, r6, #1
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d11f      	bne.n	8008ce8 <_svfiprintf_r+0xe8>
 8008ca8:	6822      	ldr	r2, [r4, #0]
 8008caa:	06d3      	lsls	r3, r2, #27
 8008cac:	d504      	bpl.n	8008cb8 <_svfiprintf_r+0xb8>
 8008cae:	2353      	movs	r3, #83	; 0x53
 8008cb0:	a904      	add	r1, sp, #16
 8008cb2:	185b      	adds	r3, r3, r1
 8008cb4:	2120      	movs	r1, #32
 8008cb6:	7019      	strb	r1, [r3, #0]
 8008cb8:	0713      	lsls	r3, r2, #28
 8008cba:	d504      	bpl.n	8008cc6 <_svfiprintf_r+0xc6>
 8008cbc:	2353      	movs	r3, #83	; 0x53
 8008cbe:	a904      	add	r1, sp, #16
 8008cc0:	185b      	adds	r3, r3, r1
 8008cc2:	212b      	movs	r1, #43	; 0x2b
 8008cc4:	7019      	strb	r1, [r3, #0]
 8008cc6:	7833      	ldrb	r3, [r6, #0]
 8008cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cca:	d016      	beq.n	8008cfa <_svfiprintf_r+0xfa>
 8008ccc:	0035      	movs	r5, r6
 8008cce:	2100      	movs	r1, #0
 8008cd0:	200a      	movs	r0, #10
 8008cd2:	68e3      	ldr	r3, [r4, #12]
 8008cd4:	782a      	ldrb	r2, [r5, #0]
 8008cd6:	1c6e      	adds	r6, r5, #1
 8008cd8:	3a30      	subs	r2, #48	; 0x30
 8008cda:	2a09      	cmp	r2, #9
 8008cdc:	d94e      	bls.n	8008d7c <_svfiprintf_r+0x17c>
 8008cde:	2900      	cmp	r1, #0
 8008ce0:	d111      	bne.n	8008d06 <_svfiprintf_r+0x106>
 8008ce2:	e017      	b.n	8008d14 <_svfiprintf_r+0x114>
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	e7af      	b.n	8008c48 <_svfiprintf_r+0x48>
 8008ce8:	9b05      	ldr	r3, [sp, #20]
 8008cea:	6822      	ldr	r2, [r4, #0]
 8008cec:	1ac0      	subs	r0, r0, r3
 8008cee:	2301      	movs	r3, #1
 8008cf0:	4083      	lsls	r3, r0
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	002e      	movs	r6, r5
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	e7cc      	b.n	8008c94 <_svfiprintf_r+0x94>
 8008cfa:	9b07      	ldr	r3, [sp, #28]
 8008cfc:	1d19      	adds	r1, r3, #4
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	9107      	str	r1, [sp, #28]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	db01      	blt.n	8008d0a <_svfiprintf_r+0x10a>
 8008d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d08:	e004      	b.n	8008d14 <_svfiprintf_r+0x114>
 8008d0a:	425b      	negs	r3, r3
 8008d0c:	60e3      	str	r3, [r4, #12]
 8008d0e:	2302      	movs	r3, #2
 8008d10:	4313      	orrs	r3, r2
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	782b      	ldrb	r3, [r5, #0]
 8008d16:	2b2e      	cmp	r3, #46	; 0x2e
 8008d18:	d10a      	bne.n	8008d30 <_svfiprintf_r+0x130>
 8008d1a:	786b      	ldrb	r3, [r5, #1]
 8008d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d1e:	d135      	bne.n	8008d8c <_svfiprintf_r+0x18c>
 8008d20:	9b07      	ldr	r3, [sp, #28]
 8008d22:	3502      	adds	r5, #2
 8008d24:	1d1a      	adds	r2, r3, #4
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	9207      	str	r2, [sp, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	db2b      	blt.n	8008d86 <_svfiprintf_r+0x186>
 8008d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d30:	4e2f      	ldr	r6, [pc, #188]	; (8008df0 <_svfiprintf_r+0x1f0>)
 8008d32:	2203      	movs	r2, #3
 8008d34:	0030      	movs	r0, r6
 8008d36:	7829      	ldrb	r1, [r5, #0]
 8008d38:	f000 fa08 	bl	800914c <memchr>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d006      	beq.n	8008d4e <_svfiprintf_r+0x14e>
 8008d40:	2340      	movs	r3, #64	; 0x40
 8008d42:	1b80      	subs	r0, r0, r6
 8008d44:	4083      	lsls	r3, r0
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	3501      	adds	r5, #1
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	7829      	ldrb	r1, [r5, #0]
 8008d50:	2206      	movs	r2, #6
 8008d52:	4828      	ldr	r0, [pc, #160]	; (8008df4 <_svfiprintf_r+0x1f4>)
 8008d54:	1c6e      	adds	r6, r5, #1
 8008d56:	7621      	strb	r1, [r4, #24]
 8008d58:	f000 f9f8 	bl	800914c <memchr>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d03c      	beq.n	8008dda <_svfiprintf_r+0x1da>
 8008d60:	4b25      	ldr	r3, [pc, #148]	; (8008df8 <_svfiprintf_r+0x1f8>)
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d125      	bne.n	8008db2 <_svfiprintf_r+0x1b2>
 8008d66:	2207      	movs	r2, #7
 8008d68:	9b07      	ldr	r3, [sp, #28]
 8008d6a:	3307      	adds	r3, #7
 8008d6c:	4393      	bics	r3, r2
 8008d6e:	3308      	adds	r3, #8
 8008d70:	9307      	str	r3, [sp, #28]
 8008d72:	6963      	ldr	r3, [r4, #20]
 8008d74:	9a04      	ldr	r2, [sp, #16]
 8008d76:	189b      	adds	r3, r3, r2
 8008d78:	6163      	str	r3, [r4, #20]
 8008d7a:	e764      	b.n	8008c46 <_svfiprintf_r+0x46>
 8008d7c:	4343      	muls	r3, r0
 8008d7e:	0035      	movs	r5, r6
 8008d80:	2101      	movs	r1, #1
 8008d82:	189b      	adds	r3, r3, r2
 8008d84:	e7a6      	b.n	8008cd4 <_svfiprintf_r+0xd4>
 8008d86:	2301      	movs	r3, #1
 8008d88:	425b      	negs	r3, r3
 8008d8a:	e7d0      	b.n	8008d2e <_svfiprintf_r+0x12e>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	200a      	movs	r0, #10
 8008d90:	001a      	movs	r2, r3
 8008d92:	3501      	adds	r5, #1
 8008d94:	6063      	str	r3, [r4, #4]
 8008d96:	7829      	ldrb	r1, [r5, #0]
 8008d98:	1c6e      	adds	r6, r5, #1
 8008d9a:	3930      	subs	r1, #48	; 0x30
 8008d9c:	2909      	cmp	r1, #9
 8008d9e:	d903      	bls.n	8008da8 <_svfiprintf_r+0x1a8>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0c5      	beq.n	8008d30 <_svfiprintf_r+0x130>
 8008da4:	9209      	str	r2, [sp, #36]	; 0x24
 8008da6:	e7c3      	b.n	8008d30 <_svfiprintf_r+0x130>
 8008da8:	4342      	muls	r2, r0
 8008daa:	0035      	movs	r5, r6
 8008dac:	2301      	movs	r3, #1
 8008dae:	1852      	adds	r2, r2, r1
 8008db0:	e7f1      	b.n	8008d96 <_svfiprintf_r+0x196>
 8008db2:	aa07      	add	r2, sp, #28
 8008db4:	9200      	str	r2, [sp, #0]
 8008db6:	0021      	movs	r1, r4
 8008db8:	003a      	movs	r2, r7
 8008dba:	4b10      	ldr	r3, [pc, #64]	; (8008dfc <_svfiprintf_r+0x1fc>)
 8008dbc:	9803      	ldr	r0, [sp, #12]
 8008dbe:	e000      	b.n	8008dc2 <_svfiprintf_r+0x1c2>
 8008dc0:	bf00      	nop
 8008dc2:	9004      	str	r0, [sp, #16]
 8008dc4:	9b04      	ldr	r3, [sp, #16]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	d1d3      	bne.n	8008d72 <_svfiprintf_r+0x172>
 8008dca:	89bb      	ldrh	r3, [r7, #12]
 8008dcc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008dce:	065b      	lsls	r3, r3, #25
 8008dd0:	d400      	bmi.n	8008dd4 <_svfiprintf_r+0x1d4>
 8008dd2:	e72c      	b.n	8008c2e <_svfiprintf_r+0x2e>
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	4240      	negs	r0, r0
 8008dd8:	e729      	b.n	8008c2e <_svfiprintf_r+0x2e>
 8008dda:	aa07      	add	r2, sp, #28
 8008ddc:	9200      	str	r2, [sp, #0]
 8008dde:	0021      	movs	r1, r4
 8008de0:	003a      	movs	r2, r7
 8008de2:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <_svfiprintf_r+0x1fc>)
 8008de4:	9803      	ldr	r0, [sp, #12]
 8008de6:	f000 f87b 	bl	8008ee0 <_printf_i>
 8008dea:	e7ea      	b.n	8008dc2 <_svfiprintf_r+0x1c2>
 8008dec:	08009498 	.word	0x08009498
 8008df0:	0800949e 	.word	0x0800949e
 8008df4:	080094a2 	.word	0x080094a2
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	08008b3d 	.word	0x08008b3d

08008e00 <_printf_common>:
 8008e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e02:	0016      	movs	r6, r2
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	688a      	ldr	r2, [r1, #8]
 8008e08:	690b      	ldr	r3, [r1, #16]
 8008e0a:	000c      	movs	r4, r1
 8008e0c:	9000      	str	r0, [sp, #0]
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	da00      	bge.n	8008e14 <_printf_common+0x14>
 8008e12:	0013      	movs	r3, r2
 8008e14:	0022      	movs	r2, r4
 8008e16:	6033      	str	r3, [r6, #0]
 8008e18:	3243      	adds	r2, #67	; 0x43
 8008e1a:	7812      	ldrb	r2, [r2, #0]
 8008e1c:	2a00      	cmp	r2, #0
 8008e1e:	d001      	beq.n	8008e24 <_printf_common+0x24>
 8008e20:	3301      	adds	r3, #1
 8008e22:	6033      	str	r3, [r6, #0]
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	069b      	lsls	r3, r3, #26
 8008e28:	d502      	bpl.n	8008e30 <_printf_common+0x30>
 8008e2a:	6833      	ldr	r3, [r6, #0]
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	6033      	str	r3, [r6, #0]
 8008e30:	6822      	ldr	r2, [r4, #0]
 8008e32:	2306      	movs	r3, #6
 8008e34:	0015      	movs	r5, r2
 8008e36:	401d      	ands	r5, r3
 8008e38:	421a      	tst	r2, r3
 8008e3a:	d027      	beq.n	8008e8c <_printf_common+0x8c>
 8008e3c:	0023      	movs	r3, r4
 8008e3e:	3343      	adds	r3, #67	; 0x43
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	1e5a      	subs	r2, r3, #1
 8008e44:	4193      	sbcs	r3, r2
 8008e46:	6822      	ldr	r2, [r4, #0]
 8008e48:	0692      	lsls	r2, r2, #26
 8008e4a:	d430      	bmi.n	8008eae <_printf_common+0xae>
 8008e4c:	0022      	movs	r2, r4
 8008e4e:	9901      	ldr	r1, [sp, #4]
 8008e50:	9800      	ldr	r0, [sp, #0]
 8008e52:	9d08      	ldr	r5, [sp, #32]
 8008e54:	3243      	adds	r2, #67	; 0x43
 8008e56:	47a8      	blx	r5
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d025      	beq.n	8008ea8 <_printf_common+0xa8>
 8008e5c:	2206      	movs	r2, #6
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	2500      	movs	r5, #0
 8008e62:	4013      	ands	r3, r2
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d105      	bne.n	8008e74 <_printf_common+0x74>
 8008e68:	6833      	ldr	r3, [r6, #0]
 8008e6a:	68e5      	ldr	r5, [r4, #12]
 8008e6c:	1aed      	subs	r5, r5, r3
 8008e6e:	43eb      	mvns	r3, r5
 8008e70:	17db      	asrs	r3, r3, #31
 8008e72:	401d      	ands	r5, r3
 8008e74:	68a3      	ldr	r3, [r4, #8]
 8008e76:	6922      	ldr	r2, [r4, #16]
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	dd01      	ble.n	8008e80 <_printf_common+0x80>
 8008e7c:	1a9b      	subs	r3, r3, r2
 8008e7e:	18ed      	adds	r5, r5, r3
 8008e80:	2600      	movs	r6, #0
 8008e82:	42b5      	cmp	r5, r6
 8008e84:	d120      	bne.n	8008ec8 <_printf_common+0xc8>
 8008e86:	2000      	movs	r0, #0
 8008e88:	e010      	b.n	8008eac <_printf_common+0xac>
 8008e8a:	3501      	adds	r5, #1
 8008e8c:	68e3      	ldr	r3, [r4, #12]
 8008e8e:	6832      	ldr	r2, [r6, #0]
 8008e90:	1a9b      	subs	r3, r3, r2
 8008e92:	42ab      	cmp	r3, r5
 8008e94:	ddd2      	ble.n	8008e3c <_printf_common+0x3c>
 8008e96:	0022      	movs	r2, r4
 8008e98:	2301      	movs	r3, #1
 8008e9a:	9901      	ldr	r1, [sp, #4]
 8008e9c:	9800      	ldr	r0, [sp, #0]
 8008e9e:	9f08      	ldr	r7, [sp, #32]
 8008ea0:	3219      	adds	r2, #25
 8008ea2:	47b8      	blx	r7
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d1f0      	bne.n	8008e8a <_printf_common+0x8a>
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	4240      	negs	r0, r0
 8008eac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008eae:	2030      	movs	r0, #48	; 0x30
 8008eb0:	18e1      	adds	r1, r4, r3
 8008eb2:	3143      	adds	r1, #67	; 0x43
 8008eb4:	7008      	strb	r0, [r1, #0]
 8008eb6:	0021      	movs	r1, r4
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	3145      	adds	r1, #69	; 0x45
 8008ebc:	7809      	ldrb	r1, [r1, #0]
 8008ebe:	18a2      	adds	r2, r4, r2
 8008ec0:	3243      	adds	r2, #67	; 0x43
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	7011      	strb	r1, [r2, #0]
 8008ec6:	e7c1      	b.n	8008e4c <_printf_common+0x4c>
 8008ec8:	0022      	movs	r2, r4
 8008eca:	2301      	movs	r3, #1
 8008ecc:	9901      	ldr	r1, [sp, #4]
 8008ece:	9800      	ldr	r0, [sp, #0]
 8008ed0:	9f08      	ldr	r7, [sp, #32]
 8008ed2:	321a      	adds	r2, #26
 8008ed4:	47b8      	blx	r7
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	d0e6      	beq.n	8008ea8 <_printf_common+0xa8>
 8008eda:	3601      	adds	r6, #1
 8008edc:	e7d1      	b.n	8008e82 <_printf_common+0x82>
	...

08008ee0 <_printf_i>:
 8008ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ee2:	b08b      	sub	sp, #44	; 0x2c
 8008ee4:	9206      	str	r2, [sp, #24]
 8008ee6:	000a      	movs	r2, r1
 8008ee8:	3243      	adds	r2, #67	; 0x43
 8008eea:	9307      	str	r3, [sp, #28]
 8008eec:	9005      	str	r0, [sp, #20]
 8008eee:	9204      	str	r2, [sp, #16]
 8008ef0:	7e0a      	ldrb	r2, [r1, #24]
 8008ef2:	000c      	movs	r4, r1
 8008ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ef6:	2a78      	cmp	r2, #120	; 0x78
 8008ef8:	d809      	bhi.n	8008f0e <_printf_i+0x2e>
 8008efa:	2a62      	cmp	r2, #98	; 0x62
 8008efc:	d80b      	bhi.n	8008f16 <_printf_i+0x36>
 8008efe:	2a00      	cmp	r2, #0
 8008f00:	d100      	bne.n	8008f04 <_printf_i+0x24>
 8008f02:	e0be      	b.n	8009082 <_printf_i+0x1a2>
 8008f04:	497c      	ldr	r1, [pc, #496]	; (80090f8 <_printf_i+0x218>)
 8008f06:	9103      	str	r1, [sp, #12]
 8008f08:	2a58      	cmp	r2, #88	; 0x58
 8008f0a:	d100      	bne.n	8008f0e <_printf_i+0x2e>
 8008f0c:	e093      	b.n	8009036 <_printf_i+0x156>
 8008f0e:	0026      	movs	r6, r4
 8008f10:	3642      	adds	r6, #66	; 0x42
 8008f12:	7032      	strb	r2, [r6, #0]
 8008f14:	e022      	b.n	8008f5c <_printf_i+0x7c>
 8008f16:	0010      	movs	r0, r2
 8008f18:	3863      	subs	r0, #99	; 0x63
 8008f1a:	2815      	cmp	r0, #21
 8008f1c:	d8f7      	bhi.n	8008f0e <_printf_i+0x2e>
 8008f1e:	f7f7 f903 	bl	8000128 <__gnu_thumb1_case_shi>
 8008f22:	0016      	.short	0x0016
 8008f24:	fff6001f 	.word	0xfff6001f
 8008f28:	fff6fff6 	.word	0xfff6fff6
 8008f2c:	001ffff6 	.word	0x001ffff6
 8008f30:	fff6fff6 	.word	0xfff6fff6
 8008f34:	fff6fff6 	.word	0xfff6fff6
 8008f38:	003600a3 	.word	0x003600a3
 8008f3c:	fff60083 	.word	0xfff60083
 8008f40:	00b4fff6 	.word	0x00b4fff6
 8008f44:	0036fff6 	.word	0x0036fff6
 8008f48:	fff6fff6 	.word	0xfff6fff6
 8008f4c:	0087      	.short	0x0087
 8008f4e:	0026      	movs	r6, r4
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	3642      	adds	r6, #66	; 0x42
 8008f54:	1d11      	adds	r1, r2, #4
 8008f56:	6019      	str	r1, [r3, #0]
 8008f58:	6813      	ldr	r3, [r2, #0]
 8008f5a:	7033      	strb	r3, [r6, #0]
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e0a2      	b.n	80090a6 <_printf_i+0x1c6>
 8008f60:	6818      	ldr	r0, [r3, #0]
 8008f62:	6809      	ldr	r1, [r1, #0]
 8008f64:	1d02      	adds	r2, r0, #4
 8008f66:	060d      	lsls	r5, r1, #24
 8008f68:	d50b      	bpl.n	8008f82 <_printf_i+0xa2>
 8008f6a:	6805      	ldr	r5, [r0, #0]
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	2d00      	cmp	r5, #0
 8008f70:	da03      	bge.n	8008f7a <_printf_i+0x9a>
 8008f72:	232d      	movs	r3, #45	; 0x2d
 8008f74:	9a04      	ldr	r2, [sp, #16]
 8008f76:	426d      	negs	r5, r5
 8008f78:	7013      	strb	r3, [r2, #0]
 8008f7a:	4b5f      	ldr	r3, [pc, #380]	; (80090f8 <_printf_i+0x218>)
 8008f7c:	270a      	movs	r7, #10
 8008f7e:	9303      	str	r3, [sp, #12]
 8008f80:	e01b      	b.n	8008fba <_printf_i+0xda>
 8008f82:	6805      	ldr	r5, [r0, #0]
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	0649      	lsls	r1, r1, #25
 8008f88:	d5f1      	bpl.n	8008f6e <_printf_i+0x8e>
 8008f8a:	b22d      	sxth	r5, r5
 8008f8c:	e7ef      	b.n	8008f6e <_printf_i+0x8e>
 8008f8e:	680d      	ldr	r5, [r1, #0]
 8008f90:	6819      	ldr	r1, [r3, #0]
 8008f92:	1d08      	adds	r0, r1, #4
 8008f94:	6018      	str	r0, [r3, #0]
 8008f96:	062e      	lsls	r6, r5, #24
 8008f98:	d501      	bpl.n	8008f9e <_printf_i+0xbe>
 8008f9a:	680d      	ldr	r5, [r1, #0]
 8008f9c:	e003      	b.n	8008fa6 <_printf_i+0xc6>
 8008f9e:	066d      	lsls	r5, r5, #25
 8008fa0:	d5fb      	bpl.n	8008f9a <_printf_i+0xba>
 8008fa2:	680d      	ldr	r5, [r1, #0]
 8008fa4:	b2ad      	uxth	r5, r5
 8008fa6:	4b54      	ldr	r3, [pc, #336]	; (80090f8 <_printf_i+0x218>)
 8008fa8:	2708      	movs	r7, #8
 8008faa:	9303      	str	r3, [sp, #12]
 8008fac:	2a6f      	cmp	r2, #111	; 0x6f
 8008fae:	d000      	beq.n	8008fb2 <_printf_i+0xd2>
 8008fb0:	3702      	adds	r7, #2
 8008fb2:	0023      	movs	r3, r4
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	3343      	adds	r3, #67	; 0x43
 8008fb8:	701a      	strb	r2, [r3, #0]
 8008fba:	6863      	ldr	r3, [r4, #4]
 8008fbc:	60a3      	str	r3, [r4, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	db03      	blt.n	8008fca <_printf_i+0xea>
 8008fc2:	2104      	movs	r1, #4
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	438a      	bics	r2, r1
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	2d00      	cmp	r5, #0
 8008fcc:	d102      	bne.n	8008fd4 <_printf_i+0xf4>
 8008fce:	9e04      	ldr	r6, [sp, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00c      	beq.n	8008fee <_printf_i+0x10e>
 8008fd4:	9e04      	ldr	r6, [sp, #16]
 8008fd6:	0028      	movs	r0, r5
 8008fd8:	0039      	movs	r1, r7
 8008fda:	f7f7 f935 	bl	8000248 <__aeabi_uidivmod>
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	3e01      	subs	r6, #1
 8008fe2:	5c5b      	ldrb	r3, [r3, r1]
 8008fe4:	7033      	strb	r3, [r6, #0]
 8008fe6:	002b      	movs	r3, r5
 8008fe8:	0005      	movs	r5, r0
 8008fea:	429f      	cmp	r7, r3
 8008fec:	d9f3      	bls.n	8008fd6 <_printf_i+0xf6>
 8008fee:	2f08      	cmp	r7, #8
 8008ff0:	d109      	bne.n	8009006 <_printf_i+0x126>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	07db      	lsls	r3, r3, #31
 8008ff6:	d506      	bpl.n	8009006 <_printf_i+0x126>
 8008ff8:	6862      	ldr	r2, [r4, #4]
 8008ffa:	6923      	ldr	r3, [r4, #16]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	dc02      	bgt.n	8009006 <_printf_i+0x126>
 8009000:	2330      	movs	r3, #48	; 0x30
 8009002:	3e01      	subs	r6, #1
 8009004:	7033      	strb	r3, [r6, #0]
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	1b9b      	subs	r3, r3, r6
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	9b07      	ldr	r3, [sp, #28]
 800900e:	0021      	movs	r1, r4
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	9805      	ldr	r0, [sp, #20]
 8009014:	9b06      	ldr	r3, [sp, #24]
 8009016:	aa09      	add	r2, sp, #36	; 0x24
 8009018:	f7ff fef2 	bl	8008e00 <_printf_common>
 800901c:	3001      	adds	r0, #1
 800901e:	d147      	bne.n	80090b0 <_printf_i+0x1d0>
 8009020:	2001      	movs	r0, #1
 8009022:	4240      	negs	r0, r0
 8009024:	b00b      	add	sp, #44	; 0x2c
 8009026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009028:	2220      	movs	r2, #32
 800902a:	6809      	ldr	r1, [r1, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	6022      	str	r2, [r4, #0]
 8009030:	2278      	movs	r2, #120	; 0x78
 8009032:	4932      	ldr	r1, [pc, #200]	; (80090fc <_printf_i+0x21c>)
 8009034:	9103      	str	r1, [sp, #12]
 8009036:	0021      	movs	r1, r4
 8009038:	3145      	adds	r1, #69	; 0x45
 800903a:	700a      	strb	r2, [r1, #0]
 800903c:	6819      	ldr	r1, [r3, #0]
 800903e:	6822      	ldr	r2, [r4, #0]
 8009040:	c920      	ldmia	r1!, {r5}
 8009042:	0610      	lsls	r0, r2, #24
 8009044:	d402      	bmi.n	800904c <_printf_i+0x16c>
 8009046:	0650      	lsls	r0, r2, #25
 8009048:	d500      	bpl.n	800904c <_printf_i+0x16c>
 800904a:	b2ad      	uxth	r5, r5
 800904c:	6019      	str	r1, [r3, #0]
 800904e:	07d3      	lsls	r3, r2, #31
 8009050:	d502      	bpl.n	8009058 <_printf_i+0x178>
 8009052:	2320      	movs	r3, #32
 8009054:	4313      	orrs	r3, r2
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	2710      	movs	r7, #16
 800905a:	2d00      	cmp	r5, #0
 800905c:	d1a9      	bne.n	8008fb2 <_printf_i+0xd2>
 800905e:	2220      	movs	r2, #32
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	4393      	bics	r3, r2
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	e7a4      	b.n	8008fb2 <_printf_i+0xd2>
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	680d      	ldr	r5, [r1, #0]
 800906c:	1d10      	adds	r0, r2, #4
 800906e:	6949      	ldr	r1, [r1, #20]
 8009070:	6018      	str	r0, [r3, #0]
 8009072:	6813      	ldr	r3, [r2, #0]
 8009074:	062e      	lsls	r6, r5, #24
 8009076:	d501      	bpl.n	800907c <_printf_i+0x19c>
 8009078:	6019      	str	r1, [r3, #0]
 800907a:	e002      	b.n	8009082 <_printf_i+0x1a2>
 800907c:	066d      	lsls	r5, r5, #25
 800907e:	d5fb      	bpl.n	8009078 <_printf_i+0x198>
 8009080:	8019      	strh	r1, [r3, #0]
 8009082:	2300      	movs	r3, #0
 8009084:	9e04      	ldr	r6, [sp, #16]
 8009086:	6123      	str	r3, [r4, #16]
 8009088:	e7c0      	b.n	800900c <_printf_i+0x12c>
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	1d11      	adds	r1, r2, #4
 800908e:	6019      	str	r1, [r3, #0]
 8009090:	6816      	ldr	r6, [r2, #0]
 8009092:	2100      	movs	r1, #0
 8009094:	0030      	movs	r0, r6
 8009096:	6862      	ldr	r2, [r4, #4]
 8009098:	f000 f858 	bl	800914c <memchr>
 800909c:	2800      	cmp	r0, #0
 800909e:	d001      	beq.n	80090a4 <_printf_i+0x1c4>
 80090a0:	1b80      	subs	r0, r0, r6
 80090a2:	6060      	str	r0, [r4, #4]
 80090a4:	6863      	ldr	r3, [r4, #4]
 80090a6:	6123      	str	r3, [r4, #16]
 80090a8:	2300      	movs	r3, #0
 80090aa:	9a04      	ldr	r2, [sp, #16]
 80090ac:	7013      	strb	r3, [r2, #0]
 80090ae:	e7ad      	b.n	800900c <_printf_i+0x12c>
 80090b0:	0032      	movs	r2, r6
 80090b2:	6923      	ldr	r3, [r4, #16]
 80090b4:	9906      	ldr	r1, [sp, #24]
 80090b6:	9805      	ldr	r0, [sp, #20]
 80090b8:	9d07      	ldr	r5, [sp, #28]
 80090ba:	47a8      	blx	r5
 80090bc:	3001      	adds	r0, #1
 80090be:	d0af      	beq.n	8009020 <_printf_i+0x140>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	079b      	lsls	r3, r3, #30
 80090c4:	d415      	bmi.n	80090f2 <_printf_i+0x212>
 80090c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c8:	68e0      	ldr	r0, [r4, #12]
 80090ca:	4298      	cmp	r0, r3
 80090cc:	daaa      	bge.n	8009024 <_printf_i+0x144>
 80090ce:	0018      	movs	r0, r3
 80090d0:	e7a8      	b.n	8009024 <_printf_i+0x144>
 80090d2:	0022      	movs	r2, r4
 80090d4:	2301      	movs	r3, #1
 80090d6:	9906      	ldr	r1, [sp, #24]
 80090d8:	9805      	ldr	r0, [sp, #20]
 80090da:	9e07      	ldr	r6, [sp, #28]
 80090dc:	3219      	adds	r2, #25
 80090de:	47b0      	blx	r6
 80090e0:	3001      	adds	r0, #1
 80090e2:	d09d      	beq.n	8009020 <_printf_i+0x140>
 80090e4:	3501      	adds	r5, #1
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	42ab      	cmp	r3, r5
 80090ee:	dcf0      	bgt.n	80090d2 <_printf_i+0x1f2>
 80090f0:	e7e9      	b.n	80090c6 <_printf_i+0x1e6>
 80090f2:	2500      	movs	r5, #0
 80090f4:	e7f7      	b.n	80090e6 <_printf_i+0x206>
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	080094a9 	.word	0x080094a9
 80090fc:	080094ba 	.word	0x080094ba

08009100 <memmove>:
 8009100:	b510      	push	{r4, lr}
 8009102:	4288      	cmp	r0, r1
 8009104:	d902      	bls.n	800910c <memmove+0xc>
 8009106:	188b      	adds	r3, r1, r2
 8009108:	4298      	cmp	r0, r3
 800910a:	d303      	bcc.n	8009114 <memmove+0x14>
 800910c:	2300      	movs	r3, #0
 800910e:	e007      	b.n	8009120 <memmove+0x20>
 8009110:	5c8b      	ldrb	r3, [r1, r2]
 8009112:	5483      	strb	r3, [r0, r2]
 8009114:	3a01      	subs	r2, #1
 8009116:	d2fb      	bcs.n	8009110 <memmove+0x10>
 8009118:	bd10      	pop	{r4, pc}
 800911a:	5ccc      	ldrb	r4, [r1, r3]
 800911c:	54c4      	strb	r4, [r0, r3]
 800911e:	3301      	adds	r3, #1
 8009120:	429a      	cmp	r2, r3
 8009122:	d1fa      	bne.n	800911a <memmove+0x1a>
 8009124:	e7f8      	b.n	8009118 <memmove+0x18>
	...

08009128 <_sbrk_r>:
 8009128:	2300      	movs	r3, #0
 800912a:	b570      	push	{r4, r5, r6, lr}
 800912c:	4d06      	ldr	r5, [pc, #24]	; (8009148 <_sbrk_r+0x20>)
 800912e:	0004      	movs	r4, r0
 8009130:	0008      	movs	r0, r1
 8009132:	602b      	str	r3, [r5, #0]
 8009134:	f7f8 fdf0 	bl	8001d18 <_sbrk>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	d103      	bne.n	8009144 <_sbrk_r+0x1c>
 800913c:	682b      	ldr	r3, [r5, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d000      	beq.n	8009144 <_sbrk_r+0x1c>
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	bd70      	pop	{r4, r5, r6, pc}
 8009146:	46c0      	nop			; (mov r8, r8)
 8009148:	20000544 	.word	0x20000544

0800914c <memchr>:
 800914c:	b2c9      	uxtb	r1, r1
 800914e:	1882      	adds	r2, r0, r2
 8009150:	4290      	cmp	r0, r2
 8009152:	d101      	bne.n	8009158 <memchr+0xc>
 8009154:	2000      	movs	r0, #0
 8009156:	4770      	bx	lr
 8009158:	7803      	ldrb	r3, [r0, #0]
 800915a:	428b      	cmp	r3, r1
 800915c:	d0fb      	beq.n	8009156 <memchr+0xa>
 800915e:	3001      	adds	r0, #1
 8009160:	e7f6      	b.n	8009150 <memchr+0x4>

08009162 <memcpy>:
 8009162:	2300      	movs	r3, #0
 8009164:	b510      	push	{r4, lr}
 8009166:	429a      	cmp	r2, r3
 8009168:	d100      	bne.n	800916c <memcpy+0xa>
 800916a:	bd10      	pop	{r4, pc}
 800916c:	5ccc      	ldrb	r4, [r1, r3]
 800916e:	54c4      	strb	r4, [r0, r3]
 8009170:	3301      	adds	r3, #1
 8009172:	e7f8      	b.n	8009166 <memcpy+0x4>

08009174 <_realloc_r>:
 8009174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009176:	0007      	movs	r7, r0
 8009178:	000e      	movs	r6, r1
 800917a:	0014      	movs	r4, r2
 800917c:	2900      	cmp	r1, #0
 800917e:	d105      	bne.n	800918c <_realloc_r+0x18>
 8009180:	0011      	movs	r1, r2
 8009182:	f7ff fc49 	bl	8008a18 <_malloc_r>
 8009186:	0005      	movs	r5, r0
 8009188:	0028      	movs	r0, r5
 800918a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800918c:	2a00      	cmp	r2, #0
 800918e:	d103      	bne.n	8009198 <_realloc_r+0x24>
 8009190:	f7ff fbd6 	bl	8008940 <_free_r>
 8009194:	0025      	movs	r5, r4
 8009196:	e7f7      	b.n	8009188 <_realloc_r+0x14>
 8009198:	f000 f81b 	bl	80091d2 <_malloc_usable_size_r>
 800919c:	9001      	str	r0, [sp, #4]
 800919e:	4284      	cmp	r4, r0
 80091a0:	d803      	bhi.n	80091aa <_realloc_r+0x36>
 80091a2:	0035      	movs	r5, r6
 80091a4:	0843      	lsrs	r3, r0, #1
 80091a6:	42a3      	cmp	r3, r4
 80091a8:	d3ee      	bcc.n	8009188 <_realloc_r+0x14>
 80091aa:	0021      	movs	r1, r4
 80091ac:	0038      	movs	r0, r7
 80091ae:	f7ff fc33 	bl	8008a18 <_malloc_r>
 80091b2:	1e05      	subs	r5, r0, #0
 80091b4:	d0e8      	beq.n	8009188 <_realloc_r+0x14>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	0022      	movs	r2, r4
 80091ba:	429c      	cmp	r4, r3
 80091bc:	d900      	bls.n	80091c0 <_realloc_r+0x4c>
 80091be:	001a      	movs	r2, r3
 80091c0:	0031      	movs	r1, r6
 80091c2:	0028      	movs	r0, r5
 80091c4:	f7ff ffcd 	bl	8009162 <memcpy>
 80091c8:	0031      	movs	r1, r6
 80091ca:	0038      	movs	r0, r7
 80091cc:	f7ff fbb8 	bl	8008940 <_free_r>
 80091d0:	e7da      	b.n	8009188 <_realloc_r+0x14>

080091d2 <_malloc_usable_size_r>:
 80091d2:	1f0b      	subs	r3, r1, #4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	1f18      	subs	r0, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	da01      	bge.n	80091e0 <_malloc_usable_size_r+0xe>
 80091dc:	580b      	ldr	r3, [r1, r0]
 80091de:	18c0      	adds	r0, r0, r3
 80091e0:	4770      	bx	lr
	...

080091e4 <_init>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	46c0      	nop			; (mov r8, r8)
 80091e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ea:	bc08      	pop	{r3}
 80091ec:	469e      	mov	lr, r3
 80091ee:	4770      	bx	lr

080091f0 <_fini>:
 80091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f6:	bc08      	pop	{r3}
 80091f8:	469e      	mov	lr, r3
 80091fa:	4770      	bx	lr
