
mcu-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007068  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d8  080072d8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072e0  080072e0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072e4  080072e4  000172e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080072e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  2000005c  08007344  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08007344  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016dc7  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d36  00000000  00000000  00036e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  00039bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff3  00000000  00000000  0003b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af4d  00000000  00000000  0003c00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f15  00000000  00000000  00056f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aeb86  00000000  00000000  0006fe6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f90  00000000  00000000  0011e9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00123984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800710c 	.word	0x0800710c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	0800710c 	.word	0x0800710c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 ff8b 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f889 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fb15 	bl	8000c7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 fac5 	bl	8000be0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000656:	f000 f8cb 	bl	80007f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800065a:	f000 f92f 	bl	80008bc <MX_I2C1_Init>
  MX_TIM2_Init();
 800065e:	f000 f96d 	bl	800093c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000662:	f000 f9c1 	bl	80009e8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000666:	f000 fa41 	bl	8000aec <MX_TIM6_Init>
  MX_TIM7_Init();
 800066a:	f000 fa7b 	bl	8000b64 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Enable the TIM2 peripheral
  __HAL_RCC_TIM2_CLK_ENABLE();
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <main+0x104>)
 8000670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000672:	4b34      	ldr	r3, [pc, #208]	; (8000744 <main+0x104>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	63da      	str	r2, [r3, #60]	; 0x3c
 800067a:	4b32      	ldr	r3, [pc, #200]	; (8000744 <main+0x104>)
 800067c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]

  // Enable the TIM6 peripheral
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <main+0x104>)
 8000688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <main+0x104>)
 800068c:	2110      	movs	r1, #16
 800068e:	430a      	orrs	r2, r1
 8000690:	63da      	str	r2, [r3, #60]	; 0x3c
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <main+0x104>)
 8000694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000696:	2210      	movs	r2, #16
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]

  // Enable the TIM7 peripheral
  __HAL_RCC_TIM7_CLK_ENABLE();
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <main+0x104>)
 80006a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <main+0x104>)
 80006a4:	2120      	movs	r1, #32
 80006a6:	430a      	orrs	r2, r1
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <main+0x104>)
 80006ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ae:	2220      	movs	r2, #32
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  // Enable the peripheral IRQ for TIM2
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	200f      	movs	r0, #15
 80006bc:	f001 ff10 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006c0:	200f      	movs	r0, #15
 80006c2:	f001 ff22 	bl	800250a <HAL_NVIC_EnableIRQ>

  // Enable the peripheral IRQ for TIM6
  HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2011      	movs	r0, #17
 80006cc:	f001 ff08 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80006d0:	2011      	movs	r0, #17
 80006d2:	f001 ff1a 	bl	800250a <HAL_NVIC_EnableIRQ>


  // Enable the peripheral IRQ for TIM7
  HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2012      	movs	r0, #18
 80006dc:	f001 ff00 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 80006e0:	2012      	movs	r0, #18
 80006e2:	f001 ff12 	bl	800250a <HAL_NVIC_EnableIRQ>

  // Start the timers
  HAL_TIM_Base_Start_IT(&htim2);
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <main+0x108>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f003 fd89 	bl	8004200 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <main+0x10c>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 fd85 	bl	8004200 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <main+0x110>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f003 fd81 	bl	8004200 <HAL_TIM_Base_Start_IT>

  // Enable PWM on TIM3 (for motor control)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <main+0x114>)
 8000700:	2100      	movs	r1, #0
 8000702:	0018      	movs	r0, r3
 8000704:	f003 fe38 	bl	8004378 <HAL_TIM_PWM_Start>

  // Scan I2C addresses on startup
  i2cScanner();
 8000708:	f000 fbce 	bl	8000ea8 <i2cScanner>

  // I2C Display
  hardwareTestLCD();
 800070c:	f000 fb9e 	bl	8000e4c <hardwareTestLCD>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Get potentiometer value
	HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <main+0x118>)
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fb56 	bl	8001dc4 <HAL_ADC_Start_IT>
	hardwareTestPot();
 8000718:	f000 fb52 	bl	8000dc0 <hardwareTestPot>

	// Motor control
	adcValue = getAdcFromPot();
 800071c:	f000 fb7e 	bl	8000e1c <getAdcFromPot>
 8000720:	0003      	movs	r3, r0
 8000722:	617b      	str	r3, [r7, #20]
	servoAngle = myMap(adcValue, 60, 4095, 0, 180);
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <main+0x11c>)
 8000726:	6978      	ldr	r0, [r7, #20]
 8000728:	23b4      	movs	r3, #180	; 0xb4
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	213c      	movs	r1, #60	; 0x3c
 8000730:	f000 fc42 	bl	8000fb8 <myMap>
 8000734:	0003      	movs	r3, r0
 8000736:	613b      	str	r3, [r7, #16]
	motorControl(servoAngle);
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fba6 	bl	8000e8c <motorControl>
	HAL_ADC_Start_IT(&hadc1);	// Start conversion after each ADC cycle
 8000740:	e7e6      	b.n	8000710 <main+0xd0>
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000
 8000748:	20000130 	.word	0x20000130
 800074c:	200001c8 	.word	0x200001c8
 8000750:	20000214 	.word	0x20000214
 8000754:	2000017c 	.word	0x2000017c
 8000758:	20000078 	.word	0x20000078
 800075c:	00000fff 	.word	0x00000fff

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b093      	sub	sp, #76	; 0x4c
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	2410      	movs	r4, #16
 8000768:	193b      	adds	r3, r7, r4
 800076a:	0018      	movs	r0, r3
 800076c:	2338      	movs	r3, #56	; 0x38
 800076e:	001a      	movs	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f006 f845 	bl	8006800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000776:	003b      	movs	r3, r7
 8000778:	0018      	movs	r0, r3
 800077a:	2310      	movs	r3, #16
 800077c:	001a      	movs	r2, r3
 800077e:	2100      	movs	r1, #0
 8000780:	f006 f83e 	bl	8006800 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	0018      	movs	r0, r3
 800078a:	f002 fe19 	bl	80033c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2202      	movs	r2, #2
 8000792:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	0052      	lsls	r2, r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2240      	movs	r2, #64	; 0x40
 80007a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fe51 	bl	8003458 <HAL_RCC_OscConfig>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007ba:	f000 fc4f 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	003b      	movs	r3, r7
 80007c0:	2207      	movs	r2, #7
 80007c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c4:	003b      	movs	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	003b      	movs	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d6:	003b      	movs	r3, r7
 80007d8:	2100      	movs	r1, #0
 80007da:	0018      	movs	r0, r3
 80007dc:	f003 f956 	bl	8003a8c <HAL_RCC_ClockConfig>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007e4:	f000 fc3a 	bl	800105c <Error_Handler>
  }
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b013      	add	sp, #76	; 0x4c
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	0018      	movs	r0, r3
 80007fa:	230c      	movs	r3, #12
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f005 fffe 	bl	8006800 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000806:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <MX_ADC1_Init+0xc8>)
 8000808:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <MX_ADC1_Init+0xc4>)
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	05d2      	lsls	r2, r2, #23
 8000810:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_ADC1_Init+0xc4>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000826:	2204      	movs	r2, #4
 8000828:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_ADC1_Init+0xc4>)
 800082c:	2200      	movs	r2, #0
 800082e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000832:	2200      	movs	r2, #0
 8000834:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000838:	2201      	movs	r2, #1
 800083a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800083c:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_ADC1_Init+0xc4>)
 800083e:	2201      	movs	r2, #1
 8000840:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_ADC1_Init+0xc4>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000850:	222c      	movs	r2, #44	; 0x2c
 8000852:	2100      	movs	r1, #0
 8000854:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000858:	2200      	movs	r2, #0
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_ADC1_Init+0xc4>)
 800085e:	2200      	movs	r2, #0
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000864:	2200      	movs	r2, #0
 8000866:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_ADC1_Init+0xc4>)
 800086a:	223c      	movs	r2, #60	; 0x3c
 800086c:	2100      	movs	r1, #0
 800086e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000872:	2200      	movs	r2, #0
 8000874:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_ADC1_Init+0xc4>)
 8000878:	0018      	movs	r0, r3
 800087a:	f001 f867 	bl	800194c <HAL_ADC_Init>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000882:	f000 fbeb 	bl	800105c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2201      	movs	r2, #1
 800088a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000898:	1d3a      	adds	r2, r7, #4
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_ADC1_Init+0xc4>)
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fb14 	bl	8001ecc <HAL_ADC_ConfigChannel>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80008a8:	f000 fbd8 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b004      	add	sp, #16
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000078 	.word	0x20000078
 80008b8:	40012400 	.word	0x40012400

080008bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_I2C1_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_I2C1_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_I2C1_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <MX_I2C1_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_I2C1_Init+0x74>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_I2C1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_I2C1_Init+0x74>)
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 ffbf 	bl	800287c <HAL_I2C_Init>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000902:	f000 fbab 	bl	800105c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_I2C1_Init+0x74>)
 8000908:	2100      	movs	r1, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f002 fcc0 	bl	8003290 <HAL_I2CEx_ConfigAnalogFilter>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000914:	f000 fba2 	bl	800105c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <MX_I2C1_Init+0x74>)
 800091a:	2100      	movs	r1, #0
 800091c:	0018      	movs	r0, r3
 800091e:	f002 fd03 	bl	8003328 <HAL_I2CEx_ConfigDigitalFilter>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 fb99 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000dc 	.word	0x200000dc
 8000934:	40005400 	.word	0x40005400
 8000938:	00303d5b 	.word	0x00303d5b

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	2310      	movs	r3, #16
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	0018      	movs	r0, r3
 8000948:	2310      	movs	r3, #16
 800094a:	001a      	movs	r2, r3
 800094c:	2100      	movs	r1, #0
 800094e:	f005 ff57 	bl	8006800 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	0018      	movs	r0, r3
 8000956:	230c      	movs	r3, #12
 8000958:	001a      	movs	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	f005 ff50 	bl	8006800 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_TIM2_Init+0xa4>)
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	05d2      	lsls	r2, r2, #23
 8000966:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 499;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM2_Init+0xa4>)
 800096a:	22f4      	movs	r2, #244	; 0xf4
 800096c:	32ff      	adds	r2, #255	; 0xff
 800096e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_TIM2_Init+0xa4>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM2_Init+0xa4>)
 8000978:	4a1a      	ldr	r2, [pc, #104]	; (80009e4 <MX_TIM2_Init+0xa8>)
 800097a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_TIM2_Init+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_TIM2_Init+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM2_Init+0xa4>)
 800098a:	0018      	movs	r0, r3
 800098c:	f003 fbe0 	bl	8004150 <HAL_TIM_Base_Init>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 fb62 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000998:	2110      	movs	r1, #16
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	0152      	lsls	r2, r2, #5
 80009a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a2:	187a      	adds	r2, r7, r1
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_TIM2_Init+0xa4>)
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f003 ffd7 	bl	800495c <HAL_TIM_ConfigClockSource>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80009b2:	f000 fb53 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c2:	1d3a      	adds	r2, r7, #4
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_TIM2_Init+0xa4>)
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f004 fccf 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009d2:	f000 fb43 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b008      	add	sp, #32
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	20000130 	.word	0x20000130
 80009e4:	000003e7 	.word	0x000003e7

080009e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08e      	sub	sp, #56	; 0x38
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	2328      	movs	r3, #40	; 0x28
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	0018      	movs	r0, r3
 80009f4:	2310      	movs	r3, #16
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f005 ff01 	bl	8006800 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	231c      	movs	r3, #28
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	230c      	movs	r3, #12
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f005 fef9 	bl	8006800 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0e:	003b      	movs	r3, r7
 8000a10:	0018      	movs	r0, r3
 8000a12:	231c      	movs	r3, #28
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f005 fef2 	bl	8006800 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a1e:	4a31      	ldr	r2, [pc, #196]	; (8000ae4 <MX_TIM3_Init+0xfc>)
 8000a20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 319;
 8000a22:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a24:	2240      	movs	r2, #64	; 0x40
 8000a26:	32ff      	adds	r2, #255	; 0xff
 8000a28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a32:	4a2d      	ldr	r2, [pc, #180]	; (8000ae8 <MX_TIM3_Init+0x100>)
 8000a34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a42:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f003 fb83 	bl	8004150 <HAL_TIM_Base_Init>
 8000a4a:	1e03      	subs	r3, r0, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 fb05 	bl	800105c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	2128      	movs	r1, #40	; 0x28
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	0152      	lsls	r2, r2, #5
 8000a5a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a5c:	187a      	adds	r2, r7, r1
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f003 ff7a 	bl	800495c <HAL_TIM_ConfigClockSource>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a6c:	f000 faf6 	bl	800105c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f003 fc20 	bl	80042b8 <HAL_TIM_PWM_Init>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a7c:	f000 faee 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	211c      	movs	r1, #28
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a8e:	187a      	adds	r2, r7, r1
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f004 fc69 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000a9e:	f000 fadd 	bl	800105c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	2260      	movs	r2, #96	; 0x60
 8000aa6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aba:	0039      	movs	r1, r7
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f003 fe4b 	bl	800475c <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000aca:	f000 fac7 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <MX_TIM3_Init+0xf8>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fc07 	bl	80012e4 <HAL_TIM_MspPostInit>

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b00e      	add	sp, #56	; 0x38
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	2000017c 	.word	0x2000017c
 8000ae4:	40000400 	.word	0x40000400
 8000ae8:	000003e7 	.word	0x000003e7

08000aec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	0018      	movs	r0, r3
 8000af6:	230c      	movs	r3, #12
 8000af8:	001a      	movs	r2, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	f005 fe80 	bl	8006800 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_TIM6_Init+0x6c>)
 8000b02:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <MX_TIM6_Init+0x70>)
 8000b04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_TIM6_Init+0x6c>)
 8000b08:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <MX_TIM6_Init+0x74>)
 8000b0a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_TIM6_Init+0x6c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_TIM6_Init+0x6c>)
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_TIM6_Init+0x74>)
 8000b16:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_TIM6_Init+0x6c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_TIM6_Init+0x6c>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f003 fb15 	bl	8004150 <HAL_TIM_Base_Init>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b2a:	f000 fa97 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b3a:	1d3a      	adds	r2, r7, #4
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_TIM6_Init+0x6c>)
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f004 fc13 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b4a:	f000 fa87 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	200001c8 	.word	0x200001c8
 8000b5c:	40001000 	.word	0x40001000
 8000b60:	000003e7 	.word	0x000003e7

08000b64 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	230c      	movs	r3, #12
 8000b70:	001a      	movs	r2, r3
 8000b72:	2100      	movs	r1, #0
 8000b74:	f005 fe44 	bl	8006800 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_TIM7_Init+0x6c>)
 8000b7a:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <MX_TIM7_Init+0x70>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1537;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_TIM7_Init+0x6c>)
 8000b80:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MX_TIM7_Init+0x74>)
 8000b82:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_TIM7_Init+0x6c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_TIM7_Init+0x6c>)
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <MX_TIM7_Init+0x78>)
 8000b8e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_TIM7_Init+0x6c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_TIM7_Init+0x6c>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f003 fad9 	bl	8004150 <HAL_TIM_Base_Init>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000ba2:	f000 fa5b 	bl	800105c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bb2:	1d3a      	adds	r2, r7, #4
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_TIM7_Init+0x6c>)
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f004 fbd7 	bl	800536c <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	1e03      	subs	r3, r0, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000bc2:	f000 fa4b 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	20000214 	.word	0x20000214
 8000bd4:	40001400 	.word	0x40001400
 8000bd8:	00000601 	.word	0x00000601
 8000bdc:	000003e7 	.word	0x000003e7

08000be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be4:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000be6:	4a24      	ldr	r2, [pc, #144]	; (8000c78 <MX_USART2_UART_Init+0x98>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000bec:	22e1      	movs	r2, #225	; 0xe1
 8000bee:	0252      	lsls	r2, r2, #9
 8000bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f004 fc24 	bl	8005478 <HAL_UART_Init>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c34:	f000 fa12 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f005 fa41 	bl	80060c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c46:	f000 fa09 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f005 fa78 	bl	8006144 <HAL_UARTEx_SetRxFifoThreshold>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c58:	f000 fa00 	bl	800105c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <MX_USART2_UART_Init+0x94>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f005 f9f6 	bl	8006050 <HAL_UARTEx_DisableFifoMode>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c68:	f000 f9f8 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	20000260 	.word	0x20000260
 8000c78:	40004400 	.word	0x40004400

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b08b      	sub	sp, #44	; 0x2c
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	2414      	movs	r4, #20
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	0018      	movs	r0, r3
 8000c88:	2314      	movs	r3, #20
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f005 fdb7 	bl	8006800 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c96:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000c98:	2104      	movs	r1, #4
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c9e:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000caa:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cae:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb6:	4b3e      	ldr	r3, [pc, #248]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cba:	2220      	movs	r2, #32
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cc6:	4b3a      	ldr	r3, [pc, #232]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce6:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <MX_GPIO_Init+0x134>)
 8000ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cea:	2202      	movs	r2, #2
 8000cec:	4013      	ands	r3, r2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000cf2:	23a0      	movs	r3, #160	; 0xa0
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f001 fd86 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000d00:	492c      	ldr	r1, [pc, #176]	; (8000db4 <MX_GPIO_Init+0x138>)
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <MX_GPIO_Init+0x13c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	0018      	movs	r0, r3
 8000d08:	f001 fd80 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <MX_GPIO_Init+0x140>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	0018      	movs	r0, r3
 8000d14:	f001 fd7a 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	2201      	movs	r2, #1
 8000d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d30:	193a      	adds	r2, r7, r4
 8000d32:	23a0      	movs	r3, #160	; 0xa0
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 fc03 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <MX_GPIO_Init+0x138>)
 8000d42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2201      	movs	r2, #1
 8000d48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <MX_GPIO_Init+0x13c>)
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	0010      	movs	r0, r2
 8000d5e:	f001 fbf1 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <MX_GPIO_Init+0x140>)
 8000d7e:	0019      	movs	r1, r3
 8000d80:	0010      	movs	r0, r2
 8000d82:	f001 fbdf 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_INPUT_Pin */
  GPIO_InitStruct.Pin = BUTTON_INPUT_Pin;
 8000d86:	0021      	movs	r1, r4
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <MX_GPIO_Init+0x13c>)
 8000d9e:	0019      	movs	r1, r3
 8000da0:	0010      	movs	r0, r2
 8000da2:	f001 fbcf 	bl	8002544 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b00b      	add	sp, #44	; 0x2c
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	40021000 	.word	0x40021000
 8000db4:	00004010 	.word	0x00004010
 8000db8:	50000400 	.word	0x50000400
 8000dbc:	50000800 	.word	0x50000800

08000dc0 <hardwareTestPot>:
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
	}

	/* Test potentiometer is working */
	void hardwareTestPot(void){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
		/* Init variable for pot value */
		char msg[20];
		uint16_t potValue;

		/* Get pot value */
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <hardwareTestPot+0x50>)
 8000dc8:	2105      	movs	r1, #5
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 ff66 	bl	8001c9c <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <hardwareTestPot+0x50>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f001 f86e 	bl	8001eb4 <HAL_ADC_GetValue>
 8000dd8:	0002      	movs	r2, r0
 8000dda:	2116      	movs	r1, #22
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	801a      	strh	r2, [r3, #0]

		/* Print value */
		sprintf(msg, "potValue: %hu\r\n", potValue);
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	881a      	ldrh	r2, [r3, #0]
 8000de4:	490b      	ldr	r1, [pc, #44]	; (8000e14 <hardwareTestPot+0x54>)
 8000de6:	003b      	movs	r3, r7
 8000de8:	0018      	movs	r0, r3
 8000dea:	f005 fce9 	bl	80067c0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000dee:	003b      	movs	r3, r7
 8000df0:	0018      	movs	r0, r3
 8000df2:	f7ff f987 	bl	8000104 <strlen>
 8000df6:	0003      	movs	r3, r0
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	425b      	negs	r3, r3
 8000dfe:	0039      	movs	r1, r7
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <hardwareTestPot+0x58>)
 8000e02:	f004 fb8f 	bl	8005524 <HAL_UART_Transmit>

	}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b006      	add	sp, #24
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	20000078 	.word	0x20000078
 8000e14:	08007124 	.word	0x08007124
 8000e18:	20000260 	.word	0x20000260

08000e1c <getAdcFromPot>:

	/* getADC from Pot */
	int getAdcFromPot(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
		/* Get pot value */
		uint16_t potValue;
		HAL_ADC_PollForConversion(&hadc1, 5);
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <getAdcFromPot+0x2c>)
 8000e24:	2105      	movs	r1, #5
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 ff38 	bl	8001c9c <HAL_ADC_PollForConversion>
		potValue = HAL_ADC_GetValue(&hadc1);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <getAdcFromPot+0x2c>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f001 f840 	bl	8001eb4 <HAL_ADC_GetValue>
 8000e34:	0002      	movs	r2, r0
 8000e36:	1dbb      	adds	r3, r7, #6
 8000e38:	801a      	strh	r2, [r3, #0]
		return potValue;
 8000e3a:	1dbb      	adds	r3, r7, #6
 8000e3c:	881b      	ldrh	r3, [r3, #0]
	}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000078 	.word	0x20000078

08000e4c <hardwareTestLCD>:
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	 	}
	}

	/* Test LCD is working */
	void hardwareTestLCD(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
		I2C_LCD_Init(MyI2C_LCD);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f005 fb39 	bl	80064c8 <I2C_LCD_Init>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f005 fc44 	bl	80066e8 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "SID: 24429298");
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <hardwareTestLCD+0x38>)
 8000e62:	0019      	movs	r1, r3
 8000e64:	2000      	movs	r0, #0
 8000e66:	f005 fc8f 	bl	8006788 <I2C_LCD_WriteString>
		I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f005 fc3a 	bl	80066e8 <I2C_LCD_SetCursor>
		I2C_LCD_WriteString(MyI2C_LCD, "Mechatronics 1");
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <hardwareTestLCD+0x3c>)
 8000e76:	0019      	movs	r1, r3
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f005 fc85 	bl	8006788 <I2C_LCD_WriteString>
	}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0800715c 	.word	0x0800715c
 8000e88:	0800716c 	.word	0x0800716c

08000e8c <motorControl>:

	/* Motor control */
	void motorControl(int adcValue){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, adcValue); // Interpolate pot values to PWM range
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <motorControl+0x18>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34

	}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000017c 	.word	0x2000017c

08000ea8 <i2cScanner>:

	/* I2C Scanner Script */
	/* Author:     Khaled Magdy */
	/* Source: 	   www.DeepBlueMbedded.com */
	void i2cScanner(void){
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b092      	sub	sp, #72	; 0x48
 8000eac:	af00      	add	r7, sp, #0
		uint8_t Buffer[25] = {0};
 8000eae:	232c      	movs	r3, #44	; 0x2c
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	2215      	movs	r2, #21
 8000eba:	2100      	movs	r1, #0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f005 fc9f 	bl	8006800 <memset>
		uint8_t Space[] = " - ";
 8000ec2:	2328      	movs	r3, #40	; 0x28
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <i2cScanner+0xf4>)
 8000ec8:	601a      	str	r2, [r3, #0]
		uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000eca:	250c      	movs	r5, #12
 8000ecc:	197b      	adds	r3, r7, r5
 8000ece:	4a34      	ldr	r2, [pc, #208]	; (8000fa0 <i2cScanner+0xf8>)
 8000ed0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ed2:	c313      	stmia	r3!, {r0, r1, r4}
 8000ed4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ed6:	c313      	stmia	r3!, {r0, r1, r4}
 8000ed8:	8812      	ldrh	r2, [r2, #0]
 8000eda:	801a      	strh	r2, [r3, #0]
		uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000edc:	003b      	movs	r3, r7
 8000ede:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <i2cScanner+0xfc>)
 8000ee0:	ca03      	ldmia	r2!, {r0, r1}
 8000ee2:	c303      	stmia	r3!, {r0, r1}
 8000ee4:	8811      	ldrh	r1, [r2, #0]
 8000ee6:	8019      	strh	r1, [r3, #0]
 8000ee8:	7892      	ldrb	r2, [r2, #2]
 8000eea:	709a      	strb	r2, [r3, #2]

		uint8_t i = 0, ret;
 8000eec:	2447      	movs	r4, #71	; 0x47
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1000);
 8000ef4:	23fa      	movs	r3, #250	; 0xfa
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f000 fbb7 	bl	800166c <HAL_Delay>

		/*-[ I2C Bus Scanning ]-*/
		HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <i2cScanner+0x100>)
 8000f00:	1979      	adds	r1, r7, r5
 8000f02:	482a      	ldr	r0, [pc, #168]	; (8000fac <i2cScanner+0x104>)
 8000f04:	221a      	movs	r2, #26
 8000f06:	f004 fb0d 	bl	8005524 <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e034      	b.n	8000f7c <i2cScanner+0xd4>
		{
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000f12:	2347      	movs	r3, #71	; 0x47
 8000f14:	18fb      	adds	r3, r7, r3
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	18db      	adds	r3, r3, r3
 8000f1c:	b299      	uxth	r1, r3
 8000f1e:	2546      	movs	r5, #70	; 0x46
 8000f20:	197c      	adds	r4, r7, r5
 8000f22:	4823      	ldr	r0, [pc, #140]	; (8000fb0 <i2cScanner+0x108>)
 8000f24:	2305      	movs	r3, #5
 8000f26:	2203      	movs	r2, #3
 8000f28:	f001 fe78 	bl	8002c1c <HAL_I2C_IsDeviceReady>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK) /* No ACK Received At That Address */
 8000f30:	197b      	adds	r3, r7, r5
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <i2cScanner+0xa0>
			{
				HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <i2cScanner+0x100>)
 8000f3a:	2228      	movs	r2, #40	; 0x28
 8000f3c:	18b9      	adds	r1, r7, r2
 8000f3e:	481b      	ldr	r0, [pc, #108]	; (8000fac <i2cScanner+0x104>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	f004 faef 	bl	8005524 <HAL_UART_Transmit>
 8000f46:	e013      	b.n	8000f70 <i2cScanner+0xc8>
			}
			else if(ret == HAL_OK)
 8000f48:	2346      	movs	r3, #70	; 0x46
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10e      	bne.n	8000f70 <i2cScanner+0xc8>
			{
				sprintf(Buffer, "0x%X", i);
 8000f52:	2347      	movs	r3, #71	; 0x47
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	4916      	ldr	r1, [pc, #88]	; (8000fb4 <i2cScanner+0x10c>)
 8000f5a:	242c      	movs	r4, #44	; 0x2c
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f005 fc2e 	bl	80067c0 <siprintf>
				HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <i2cScanner+0x100>)
 8000f66:	1939      	adds	r1, r7, r4
 8000f68:	4810      	ldr	r0, [pc, #64]	; (8000fac <i2cScanner+0x104>)
 8000f6a:	2219      	movs	r2, #25
 8000f6c:	f004 fada 	bl	8005524 <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000f70:	2147      	movs	r1, #71	; 0x47
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	3201      	adds	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	2347      	movs	r3, #71	; 0x47
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	dac4      	bge.n	8000f12 <i2cScanner+0x6a>
			}
		}
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <i2cScanner+0x100>)
 8000f8a:	0039      	movs	r1, r7
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <i2cScanner+0x104>)
 8000f8e:	220b      	movs	r2, #11
 8000f90:	f004 fac8 	bl	8005524 <HAL_UART_Transmit>
		/*--[ Scanning Done ]--*/
	}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b012      	add	sp, #72	; 0x48
 8000f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9c:	00202d20 	.word	0x00202d20
 8000fa0:	08007184 	.word	0x08007184
 8000fa4:	080071a0 	.word	0x080071a0
 8000fa8:	00002710 	.word	0x00002710
 8000fac:	20000260 	.word	0x20000260
 8000fb0:	200000dc 	.word	0x200000dc
 8000fb4:	0800717c 	.word	0x0800717c

08000fb8 <myMap>:

	/* Mapping function */
	 int myMap(int x, int in_min, int in_max, int out_min, int out_max){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
		 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	69b9      	ldr	r1, [r7, #24]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	435a      	muls	r2, r3
 8000fd4:	0010      	movs	r0, r2
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	0019      	movs	r1, r3
 8000fde:	f7ff f92d 	bl	800023c <__divsi3>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	001a      	movs	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	18d3      	adds	r3, r2, r3
	 }
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b004      	add	sp, #16
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

	 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
		 // This callback is automatically called by the HAL on the UEV event
		 if(htim->Instance == TIM2){
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	429a      	cmp	r2, r3
 8001006:	d105      	bne.n	8001014 <HAL_TIM_PeriodElapsedCallback+0x20>
			 HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0018      	movs	r0, r3
 800100e:	f001 fc1a 	bl	8002846 <HAL_GPIO_TogglePin>
		 } else if(htim->Instance == TIM6){
			 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
		 } else if(htim->Instance == TIM7){
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
		 }
	 }
 8001012:	e016      	b.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x4e>
		 } else if(htim->Instance == TIM6){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d107      	bne.n	800102e <HAL_TIM_PeriodElapsedCallback+0x3a>
			 HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	01db      	lsls	r3, r3, #7
 8001022:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001024:	0019      	movs	r1, r3
 8001026:	0010      	movs	r0, r2
 8001028:	f001 fc0d 	bl	8002846 <HAL_GPIO_TogglePin>
	 }
 800102c:	e009      	b.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x4e>
		 } else if(htim->Instance == TIM7){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d104      	bne.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x4e>
			 HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800103a:	2110      	movs	r1, #16
 800103c:	0018      	movs	r0, r3
 800103e:	f001 fc02 	bl	8002846 <HAL_GPIO_TogglePin>
	 }
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	50000800 	.word	0x50000800
 8001050:	40001000 	.word	0x40001000
 8001054:	50000400 	.word	0x50000400
 8001058:	40001400 	.word	0x40001400

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_MspInit+0x4c>)
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_MspInit+0x4c>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2201      	movs	r2, #1
 8001080:	4013      	ands	r3, r2
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_MspInit+0x4c>)
 8001088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_MspInit+0x4c>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	0549      	lsls	r1, r1, #21
 8001090:	430a      	orrs	r2, r1
 8001092:	63da      	str	r2, [r3, #60]	; 0x3c
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <HAL_MspInit+0x4c>)
 8001096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	055b      	lsls	r3, r3, #21
 800109c:	4013      	ands	r3, r2
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80010a2:	23c0      	movs	r3, #192	; 0xc0
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 fb04 	bl	80016b4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b08b      	sub	sp, #44	; 0x2c
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	2414      	movs	r4, #20
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	0018      	movs	r0, r3
 80010c6:	2314      	movs	r3, #20
 80010c8:	001a      	movs	r2, r3
 80010ca:	2100      	movs	r1, #0
 80010cc:	f005 fb98 	bl	8006800 <memset>
  if(hadc->Instance==ADC1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <HAL_ADC_MspInit+0x80>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d129      	bne.n	800112e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_ADC_MspInit+0x84>)
 80010dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_ADC_MspInit+0x84>)
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	0349      	lsls	r1, r1, #13
 80010e4:	430a      	orrs	r2, r1
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_ADC_MspInit+0x84>)
 80010ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	035b      	lsls	r3, r3, #13
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <HAL_ADC_MspInit+0x84>)
 80010f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_ADC_MspInit+0x84>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	430a      	orrs	r2, r1
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_ADC_MspInit+0x84>)
 8001104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001106:	2201      	movs	r2, #1
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_INPUT_Pin;
 800110e:	193b      	adds	r3, r7, r4
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001114:	193b      	adds	r3, r7, r4
 8001116:	2203      	movs	r2, #3
 8001118:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	193b      	adds	r3, r7, r4
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(POT_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001120:	193a      	adds	r2, r7, r4
 8001122:	23a0      	movs	r3, #160	; 0xa0
 8001124:	05db      	lsls	r3, r3, #23
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f001 fa0b 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b00b      	add	sp, #44	; 0x2c
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40012400 	.word	0x40012400
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b097      	sub	sp, #92	; 0x5c
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	2344      	movs	r3, #68	; 0x44
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	0018      	movs	r0, r3
 800114e:	2314      	movs	r3, #20
 8001150:	001a      	movs	r2, r3
 8001152:	2100      	movs	r1, #0
 8001154:	f005 fb54 	bl	8006800 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	2410      	movs	r4, #16
 800115a:	193b      	adds	r3, r7, r4
 800115c:	0018      	movs	r0, r3
 800115e:	2334      	movs	r3, #52	; 0x34
 8001160:	001a      	movs	r2, r3
 8001162:	2100      	movs	r1, #0
 8001164:	f005 fb4c 	bl	8006800 <memset>
  if(hi2c->Instance==I2C1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_I2C_MspInit+0xb8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d13e      	bne.n	80011f0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001172:	193b      	adds	r3, r7, r4
 8001174:	2220      	movs	r2, #32
 8001176:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001178:	193b      	adds	r3, r7, r4
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	193b      	adds	r3, r7, r4
 8001180:	0018      	movs	r0, r3
 8001182:	f002 fe2d 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800118a:	f7ff ff67 	bl	800105c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_I2C_MspInit+0xbc>)
 8001190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_I2C_MspInit+0xbc>)
 8001194:	2102      	movs	r1, #2
 8001196:	430a      	orrs	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_I2C_MspInit+0xbc>)
 800119c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011a6:	2144      	movs	r1, #68	; 0x44
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	22c0      	movs	r2, #192	; 0xc0
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2212      	movs	r2, #18
 80011b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2206      	movs	r2, #6
 80011c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_I2C_MspInit+0xc0>)
 80011cc:	0019      	movs	r1, r3
 80011ce:	0010      	movs	r0, r2
 80011d0:	f001 f9b8 	bl	8002544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_I2C_MspInit+0xbc>)
 80011d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_I2C_MspInit+0xbc>)
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	0389      	lsls	r1, r1, #14
 80011de:	430a      	orrs	r2, r1
 80011e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_I2C_MspInit+0xbc>)
 80011e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	039b      	lsls	r3, r3, #14
 80011ea:	4013      	ands	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b017      	add	sp, #92	; 0x5c
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	40005400 	.word	0x40005400
 80011fc:	40021000 	.word	0x40021000
 8001200:	50000400 	.word	0x50000400

08001204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	05db      	lsls	r3, r3, #23
 8001214:	429a      	cmp	r2, r3
 8001216:	d114      	bne.n	8001242 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001218:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 800121a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 800121e:	2101      	movs	r1, #1
 8001220:	430a      	orrs	r2, r1
 8001222:	63da      	str	r2, [r3, #60]	; 0x3c
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001228:	2201      	movs	r2, #1
 800122a:	4013      	ands	r3, r2
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	200f      	movs	r0, #15
 8001236:	f001 f953 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800123a:	200f      	movs	r0, #15
 800123c:	f001 f965 	bl	800250a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001240:	e044      	b.n	80012cc <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM3)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d10c      	bne.n	8001266 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 800124e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001252:	2102      	movs	r1, #2
 8001254:	430a      	orrs	r2, r1
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 800125a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
}
 8001264:	e032      	b.n	80012cc <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM6)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_TIM_Base_MspInit+0xd8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d114      	bne.n	800129a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001276:	2110      	movs	r1, #16
 8001278:	430a      	orrs	r2, r1
 800127a:	63da      	str	r2, [r3, #60]	; 0x3c
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 800127e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001280:	2210      	movs	r2, #16
 8001282:	4013      	ands	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2011      	movs	r0, #17
 800128e:	f001 f927 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8001292:	2011      	movs	r0, #17
 8001294:	f001 f939 	bl	800250a <HAL_NVIC_EnableIRQ>
}
 8001298:	e018      	b.n	80012cc <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM7)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_TIM_Base_MspInit+0xdc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d113      	bne.n	80012cc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 80012a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 80012aa:	2120      	movs	r1, #32
 80012ac:	430a      	orrs	r2, r1
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_TIM_Base_MspInit+0xd0>)
 80012b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b4:	2220      	movs	r2, #32
 80012b6:	4013      	ands	r3, r2
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2012      	movs	r0, #18
 80012c2:	f001 f90d 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 80012c6:	2012      	movs	r0, #18
 80012c8:	f001 f91f 	bl	800250a <HAL_NVIC_EnableIRQ>
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b006      	add	sp, #24
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40000400 	.word	0x40000400
 80012dc:	40001000 	.word	0x40001000
 80012e0:	40001400 	.word	0x40001400

080012e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	240c      	movs	r4, #12
 80012ee:	193b      	adds	r3, r7, r4
 80012f0:	0018      	movs	r0, r3
 80012f2:	2314      	movs	r3, #20
 80012f4:	001a      	movs	r2, r3
 80012f6:	2100      	movs	r1, #0
 80012f8:	f005 fa82 	bl	8006800 <memset>
  if(htim->Instance==TIM3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <HAL_TIM_MspPostInit+0x70>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d122      	bne.n	800134c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <HAL_TIM_MspPostInit+0x74>)
 8001308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_TIM_MspPostInit+0x74>)
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_TIM_MspPostInit+0x74>)
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001316:	2201      	movs	r2, #1
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800131e:	0021      	movs	r1, r4
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2240      	movs	r2, #64	; 0x40
 8001324:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2202      	movs	r2, #2
 800132a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2201      	movs	r2, #1
 800133c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	187a      	adds	r2, r7, r1
 8001340:	23a0      	movs	r3, #160	; 0xa0
 8001342:	05db      	lsls	r3, r3, #23
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f001 f8fc 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b009      	add	sp, #36	; 0x24
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	40000400 	.word	0x40000400
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b097      	sub	sp, #92	; 0x5c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	2344      	movs	r3, #68	; 0x44
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	0018      	movs	r0, r3
 800136a:	2314      	movs	r3, #20
 800136c:	001a      	movs	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	f005 fa46 	bl	8006800 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	2410      	movs	r4, #16
 8001376:	193b      	adds	r3, r7, r4
 8001378:	0018      	movs	r0, r3
 800137a:	2334      	movs	r3, #52	; 0x34
 800137c:	001a      	movs	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	f005 fa3e 	bl	8006800 <memset>
  if(huart->Instance==USART2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <HAL_UART_MspInit+0xb8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d13e      	bne.n	800140c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800138e:	193b      	adds	r3, r7, r4
 8001390:	2202      	movs	r2, #2
 8001392:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001394:	193b      	adds	r3, r7, r4
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139a:	193b      	adds	r3, r7, r4
 800139c:	0018      	movs	r0, r3
 800139e:	f002 fd1f 	bl	8003de0 <HAL_RCCEx_PeriphCLKConfig>
 80013a2:	1e03      	subs	r3, r0, #0
 80013a4:	d001      	beq.n	80013aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013a6:	f7ff fe59 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_UART_MspInit+0xbc>)
 80013ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_UART_MspInit+0xbc>)
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	0289      	lsls	r1, r1, #10
 80013b4:	430a      	orrs	r2, r1
 80013b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_UART_MspInit+0xbc>)
 80013ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_UART_MspInit+0xbc>)
 80013c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_UART_MspInit+0xbc>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_UART_MspInit+0xbc>)
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d6:	2201      	movs	r2, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80013de:	2144      	movs	r1, #68	; 0x44
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2202      	movs	r2, #2
 80013ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2201      	movs	r2, #1
 80013f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2201      	movs	r2, #1
 80013fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	187a      	adds	r2, r7, r1
 8001400:	23a0      	movs	r3, #160	; 0xa0
 8001402:	05db      	lsls	r3, r3, #23
 8001404:	0011      	movs	r1, r2
 8001406:	0018      	movs	r0, r3
 8001408:	f001 f89c 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b017      	add	sp, #92	; 0x5c
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	40004400 	.word	0x40004400
 8001418:	40021000 	.word	0x40021000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f8f8 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <TIM2_IRQHandler+0x14>)
 8001452:	0018      	movs	r0, r3
 8001454:	f003 f87a 	bl	800454c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	20000130 	.word	0x20000130

08001464 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800146a:	0018      	movs	r0, r3
 800146c:	f003 f86e 	bl	800454c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	200001c8 	.word	0x200001c8

0800147c <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <TIM7_LPTIM2_IRQHandler+0x14>)
 8001482:	0018      	movs	r0, r3
 8001484:	f003 f862 	bl	800454c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	20000214 	.word	0x20000214

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	18d3      	adds	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f005 f9a4 	bl	8006810 <__errno>
 80014c8:	0003      	movs	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	425b      	negs	r3, r3
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	18d2      	adds	r2, r2, r3
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <_sbrk+0x64>)
 80014e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b006      	add	sp, #24
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20009000 	.word	0x20009000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	200002f4 	.word	0x200002f4
 80014fc:	20000448 	.word	0x20000448

08001500 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800150e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001510:	f7ff fff6 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <LoopForever+0x6>)
  ldr r1, =_edata
 8001516:	490d      	ldr	r1, [pc, #52]	; (800154c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <LoopForever+0xe>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800152c:	4c0a      	ldr	r4, [pc, #40]	; (8001558 <LoopForever+0x16>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800153a:	f005 f96f 	bl	800681c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800153e:	f7ff f87f 	bl	8000640 <main>

08001542 <LoopForever>:

LoopForever:
  b LoopForever
 8001542:	e7fe      	b.n	8001542 <LoopForever>
  ldr   r0, =_estack
 8001544:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001550:	080072e8 	.word	0x080072e8
  ldr r2, =_sbss
 8001554:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001558:	20000448 	.word	0x20000448

0800155c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_COMP_IRQHandler>
	...

08001560 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_Init+0x3c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_Init+0x3c>)
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	0049      	lsls	r1, r1, #1
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f810 	bl	80015a0 <HAL_InitTick>
 8001580:	1e03      	subs	r3, r0, #0
 8001582:	d003      	beq.n	800158c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e001      	b.n	8001590 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800158c:	f7ff fd6c 	bl	8001068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001590:	1dfb      	adds	r3, r7, #7
 8001592:	781b      	ldrb	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40022000 	.word	0x40022000

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_InitTick+0x88>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d02b      	beq.n	8001610 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_InitTick+0x8c>)
 80015ba:	681c      	ldr	r4, [r3, #0]
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_InitTick+0x88>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	0019      	movs	r1, r3
 80015c2:	23fa      	movs	r3, #250	; 0xfa
 80015c4:	0098      	lsls	r0, r3, #2
 80015c6:	f7fe fdaf 	bl	8000128 <__udivsi3>
 80015ca:	0003      	movs	r3, r0
 80015cc:	0019      	movs	r1, r3
 80015ce:	0020      	movs	r0, r4
 80015d0:	f7fe fdaa 	bl	8000128 <__udivsi3>
 80015d4:	0003      	movs	r3, r0
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 ffa7 	bl	800252a <HAL_SYSTICK_Config>
 80015dc:	1e03      	subs	r3, r0, #0
 80015de:	d112      	bne.n	8001606 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d80a      	bhi.n	80015fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	2301      	movs	r3, #1
 80015ea:	425b      	negs	r3, r3
 80015ec:	2200      	movs	r2, #0
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 ff76 	bl	80024e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_InitTick+0x90>)
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e00d      	b.n	8001618 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80015fc:	230f      	movs	r3, #15
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e008      	b.n	8001618 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001606:	230f      	movs	r3, #15
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e003      	b.n	8001618 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001618:	230f      	movs	r3, #15
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	781b      	ldrb	r3, [r3, #0]
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b005      	add	sp, #20
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	20000008 	.word	0x20000008
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_IncTick+0x1c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	001a      	movs	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_IncTick+0x20>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	18d2      	adds	r2, r2, r3
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_IncTick+0x20>)
 8001646:	601a      	str	r2, [r3, #0]
}
 8001648:	46c0      	nop			; (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	20000008 	.word	0x20000008
 8001654:	200002f8 	.word	0x200002f8

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_GetTick+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	200002f8 	.word	0x200002f8

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff fff0 	bl	8001658 <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3301      	adds	r3, #1
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	001a      	movs	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	189b      	adds	r3, r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	f7ff ffe0 	bl	8001658 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b004      	add	sp, #16
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	20000008 	.word	0x20000008

080016b4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	40010000 	.word	0x40010000
 80016dc:	fffff9ff 	.word	0xfffff9ff

080016e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a05      	ldr	r2, [pc, #20]	; (8001704 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80016f0:	401a      	ands	r2, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	fe3fffff 	.word	0xfe3fffff

08001708 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	23e0      	movs	r3, #224	; 0xe0
 8001716:	045b      	lsls	r3, r3, #17
 8001718:	4013      	ands	r3, r2
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}

08001722 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	2104      	movs	r1, #4
 8001736:	400a      	ands	r2, r1
 8001738:	2107      	movs	r1, #7
 800173a:	4091      	lsls	r1, r2
 800173c:	000a      	movs	r2, r1
 800173e:	43d2      	mvns	r2, r2
 8001740:	401a      	ands	r2, r3
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2104      	movs	r1, #4
 8001746:	400b      	ands	r3, r1
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4099      	lsls	r1, r3
 800174c:	000b      	movs	r3, r1
 800174e:	431a      	orrs	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b004      	add	sp, #16
 800175a:	bd80      	pop	{r7, pc}

0800175c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	2104      	movs	r1, #4
 800176e:	400a      	ands	r2, r1
 8001770:	2107      	movs	r1, #7
 8001772:	4091      	lsls	r1, r2
 8001774:	000a      	movs	r2, r1
 8001776:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2104      	movs	r1, #4
 800177c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800177e:	40da      	lsrs	r2, r3
 8001780:	0013      	movs	r3, r2
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}

0800178a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	23c0      	movs	r3, #192	; 0xc0
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4013      	ands	r3, r2
 800179c:	d101      	bne.n	80017a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	211f      	movs	r1, #31
 80017c0:	400a      	ands	r2, r1
 80017c2:	210f      	movs	r1, #15
 80017c4:	4091      	lsls	r1, r2
 80017c6:	000a      	movs	r2, r1
 80017c8:	43d2      	mvns	r2, r2
 80017ca:	401a      	ands	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	0e9b      	lsrs	r3, r3, #26
 80017d0:	210f      	movs	r1, #15
 80017d2:	4019      	ands	r1, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	201f      	movs	r0, #31
 80017d8:	4003      	ands	r3, r0
 80017da:	4099      	lsls	r1, r3
 80017dc:	000b      	movs	r3, r1
 80017de:	431a      	orrs	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b004      	add	sp, #16
 80017ea:	bd80      	pop	{r7, pc}

080017ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	035b      	lsls	r3, r3, #13
 80017fe:	0b5b      	lsrs	r3, r3, #13
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}

0800180e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	0352      	lsls	r2, r2, #13
 8001820:	0b52      	lsrs	r2, r2, #13
 8001822:	43d2      	mvns	r2, r2
 8001824:	401a      	ands	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	0212      	lsls	r2, r2, #8
 8001848:	43d2      	mvns	r2, r2
 800184a:	401a      	ands	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	400b      	ands	r3, r1
 8001854:	4904      	ldr	r1, [pc, #16]	; (8001868 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001856:	400b      	ands	r3, r1
 8001858:	431a      	orrs	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	b004      	add	sp, #16
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	07ffff00 	.word	0x07ffff00

0800186c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a05      	ldr	r2, [pc, #20]	; (8001890 <LL_ADC_EnableInternalRegulator+0x24>)
 800187a:	4013      	ands	r3, r2
 800187c:	2280      	movs	r2, #128	; 0x80
 800187e:	0552      	lsls	r2, r2, #21
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	6fffffe8 	.word	0x6fffffe8

08001894 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	055b      	lsls	r3, r3, #21
 80018a4:	401a      	ands	r2, r3
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	055b      	lsls	r3, r3, #21
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d101      	bne.n	80018b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}

080018bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <LL_ADC_Enable+0x20>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	2201      	movs	r2, #1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	7fffffe8 	.word	0x7fffffe8

080018e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <LL_ADC_IsEnabled+0x18>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <LL_ADC_IsEnabled+0x1a>
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <LL_ADC_REG_StartConversion+0x20>)
 8001912:	4013      	ands	r3, r2
 8001914:	2204      	movs	r2, #4
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}
 8001924:	7fffffe8 	.word	0x7fffffe8

08001928 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2204      	movs	r2, #4
 8001936:	4013      	ands	r3, r2
 8001938:	2b04      	cmp	r3, #4
 800193a:	d101      	bne.n	8001940 <LL_ADC_REG_IsConversionOngoing+0x18>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001940:	2300      	movs	r3, #0
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b002      	add	sp, #8
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001954:	231f      	movs	r3, #31
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e17f      	b.n	8001c72 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10a      	bne.n	8001990 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff fb9b 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2254      	movs	r2, #84	; 0x54
 800198c:	2100      	movs	r1, #0
 800198e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff ff7d 	bl	8001894 <LL_ADC_IsInternalRegulatorEnabled>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d115      	bne.n	80019ca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7ff ff62 	bl	800186c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019a8:	4bb4      	ldr	r3, [pc, #720]	; (8001c7c <HAL_ADC_Init+0x330>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	49b4      	ldr	r1, [pc, #720]	; (8001c80 <HAL_ADC_Init+0x334>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7fe fbba 	bl	8000128 <__udivsi3>
 80019b4:	0003      	movs	r3, r0
 80019b6:	3301      	adds	r3, #1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019bc:	e002      	b.n	80019c4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f9      	bne.n	80019be <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0018      	movs	r0, r3
 80019d0:	f7ff ff60 	bl	8001894 <LL_ADC_IsInternalRegulatorEnabled>
 80019d4:	1e03      	subs	r3, r0, #0
 80019d6:	d10f      	bne.n	80019f8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	2210      	movs	r2, #16
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2201      	movs	r2, #1
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80019f0:	231f      	movs	r3, #31
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff ff93 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d000      	beq.n	8001a12 <HAL_ADC_Init+0xc6>
 8001a10:	e122      	b.n	8001c58 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d000      	beq.n	8001a1a <HAL_ADC_Init+0xce>
 8001a18:	e11e      	b.n	8001c58 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a99      	ldr	r2, [pc, #612]	; (8001c84 <HAL_ADC_Init+0x338>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	2202      	movs	r2, #2
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7ff ff56 	bl	80018e0 <LL_ADC_IsEnabled>
 8001a34:	1e03      	subs	r3, r0, #0
 8001a36:	d000      	beq.n	8001a3a <HAL_ADC_Init+0xee>
 8001a38:	e0ad      	b.n	8001b96 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7e1b      	ldrb	r3, [r3, #24]
 8001a42:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a44:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7e5b      	ldrb	r3, [r3, #25]
 8001a4a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a4c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7e9b      	ldrb	r3, [r3, #26]
 8001a52:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a54:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_ADC_Init+0x118>
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	015b      	lsls	r3, r3, #5
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_Init+0x11a>
 8001a64:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a66:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a6c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da04      	bge.n	8001a80 <HAL_ADC_Init+0x134>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	085b      	lsrs	r3, r3, #1
 8001a7e:	e001      	b.n	8001a84 <HAL_ADC_Init+0x138>
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001a84:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	212c      	movs	r1, #44	; 0x2c
 8001a8a:	5c5b      	ldrb	r3, [r3, r1]
 8001a8c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a8e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d115      	bne.n	8001acc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7e9b      	ldrb	r3, [r3, #26]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	0252      	lsls	r2, r2, #9
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	e00b      	b.n	8001acc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	2220      	movs	r2, #32
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00a      	beq.n	8001aea <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad8:	23e0      	movs	r3, #224	; 0xe0
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_ADC_Init+0x33c>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0f9b      	lsrs	r3, r3, #30
 8001b06:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	223c      	movs	r2, #60	; 0x3c
 8001b18:	5c9b      	ldrb	r3, [r3, r2]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d111      	bne.n	8001b42 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0f9b      	lsrs	r3, r3, #30
 8001b24:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b2a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001b30:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001b36:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	4a50      	ldr	r2, [pc, #320]	; (8001c8c <HAL_ADC_Init+0x340>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	061b      	lsls	r3, r3, #24
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d018      	beq.n	8001b96 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	05db      	lsls	r3, r3, #23
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d012      	beq.n	8001b96 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	061b      	lsls	r3, r3, #24
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d00c      	beq.n	8001b96 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001b7c:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <HAL_ADC_Init+0x344>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <HAL_ADC_Init+0x348>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	23f0      	movs	r3, #240	; 0xf0
 8001b8c:	039b      	lsls	r3, r3, #14
 8001b8e:	401a      	ands	r2, r3
 8001b90:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <HAL_ADC_Init+0x344>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	f7ff fdbe 	bl	8001722 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	493a      	ldr	r1, [pc, #232]	; (8001c98 <HAL_ADC_Init+0x34c>)
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	f7ff fdb6 	bl	8001722 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2110      	movs	r1, #16
 8001bca:	4249      	negs	r1, r1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
 8001bd0:	e018      	b.n	8001c04 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	039b      	lsls	r3, r3, #14
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d112      	bne.n	8001c04 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	221c      	movs	r2, #28
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	4252      	negs	r2, r2
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2100      	movs	r1, #0
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7ff fda6 	bl	800175c <LL_ADC_GetSamplingTimeCommonChannels>
 8001c10:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d10b      	bne.n	8001c32 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	2203      	movs	r2, #3
 8001c26:	4393      	bics	r3, r2
 8001c28:	2201      	movs	r2, #1
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c30:	e01c      	b.n	8001c6c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	2212      	movs	r2, #18
 8001c38:	4393      	bics	r3, r2
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c46:	2201      	movs	r2, #1
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001c4e:	231f      	movs	r3, #31
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c56:	e009      	b.n	8001c6c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c64:	231f      	movs	r3, #31
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001c6c:	231f      	movs	r3, #31
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b008      	add	sp, #32
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	00030d40 	.word	0x00030d40
 8001c84:	fffffefd 	.word	0xfffffefd
 8001c88:	ffde0201 	.word	0xffde0201
 8001c8c:	1ffffc02 	.word	0x1ffffc02
 8001c90:	40012708 	.word	0x40012708
 8001c94:	ffc3ffff 	.word	0xffc3ffff
 8001c98:	07ffff04 	.word	0x07ffff04

08001c9c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d102      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e00f      	b.n	8001cd4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e072      	b.n	8001db6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cd4:	f7ff fcc0 	bl	8001658 <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001cdc:	e01f      	b.n	8001d1e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	d01c      	beq.n	8001d1e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ce4:	f7ff fcb8 	bl	8001658 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d302      	bcc.n	8001cfa <HAL_ADC_PollForConversion+0x5e>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d111      	bne.n	8001d1e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4013      	ands	r3, r2
 8001d04:	d10b      	bne.n	8001d1e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2254      	movs	r2, #84	; 0x54
 8001d16:	2100      	movs	r1, #0
 8001d18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e04b      	b.n	8001db6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4013      	ands	r3, r2
 8001d28:	d0d9      	beq.n	8001cde <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7ff fd24 	bl	800178a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d42:	1e03      	subs	r3, r0, #0
 8001d44:	d02e      	beq.n	8001da4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7e9b      	ldrb	r3, [r3, #26]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d12a      	bne.n	8001da4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2208      	movs	r2, #8
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d123      	bne.n	8001da4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff fde1 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 8001d66:	1e03      	subs	r3, r0, #0
 8001d68:	d110      	bne.n	8001d8c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	210c      	movs	r1, #12
 8001d76:	438a      	bics	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <HAL_ADC_PollForConversion+0x124>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	2201      	movs	r2, #1
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	659a      	str	r2, [r3, #88]	; 0x58
 8001d8a:	e00b      	b.n	8001da4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	2220      	movs	r2, #32
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7e1b      	ldrb	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	220c      	movs	r2, #12
 8001db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b004      	add	sp, #16
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	fffffefe 	.word	0xfffffefe

08001dc4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff fda9 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d15f      	bne.n	8001e9a <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2254      	movs	r2, #84	; 0x54
 8001dde:	5c9b      	ldrb	r3, [r3, r2]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_Start_IT+0x24>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e05f      	b.n	8001ea8 <HAL_ADC_Start_IT+0xe4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2254      	movs	r2, #84	; 0x54
 8001dec:	2101      	movs	r1, #1
 8001dee:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001df0:	250f      	movs	r5, #15
 8001df2:	197c      	adds	r4, r7, r5
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 fa40 	bl	800227c <ADC_Enable>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e00:	197b      	adds	r3, r7, r5
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d143      	bne.n	8001e90 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <HAL_ADC_Start_IT+0xec>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2280      	movs	r2, #128	; 0x80
 8001e12:	0052      	lsls	r2, r2, #1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	221c      	movs	r2, #28
 8001e26:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2254      	movs	r2, #84	; 0x54
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	211c      	movs	r1, #28
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d108      	bne.n	8001e5a <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2108      	movs	r1, #8
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
          break;
 8001e58:	e008      	b.n	8001e6c <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2104      	movs	r1, #4
 8001e66:	430a      	orrs	r2, r1
 8001e68:	605a      	str	r2, [r3, #4]
          break;
 8001e6a:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d107      	bne.n	8001e84 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2110      	movs	r1, #16
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff fd3b 	bl	8001904 <LL_ADC_REG_StartConversion>
 8001e8e:	e008      	b.n	8001ea2 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2254      	movs	r2, #84	; 0x54
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]
 8001e98:	e003      	b.n	8001ea2 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	781b      	ldrb	r3, [r3, #0]
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb0:	fffff0fe 	.word	0xfffff0fe

08001eb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed6:	2317      	movs	r3, #23
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2254      	movs	r2, #84	; 0x54
 8001ee6:	5c9b      	ldrb	r3, [r3, r2]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x24>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e1c0      	b.n	8002272 <HAL_ADC_ConfigChannel+0x3a6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2254      	movs	r2, #84	; 0x54
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff fd13 	bl	8001928 <LL_ADC_REG_IsConversionOngoing>
 8001f02:	1e03      	subs	r3, r0, #0
 8001f04:	d000      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x3c>
 8001f06:	e1a3      	b.n	8002250 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d100      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x46>
 8001f10:	e143      	b.n	800219a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d004      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f22:	4ac1      	ldr	r2, [pc, #772]	; (8002228 <HAL_ADC_ConfigChannel+0x35c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d108      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0019      	movs	r1, r3
 8001f32:	0010      	movs	r0, r2
 8001f34:	f7ff fc5a 	bl	80017ec <LL_ADC_REG_SetSequencerChAdd>
 8001f38:	e0c9      	b.n	80020ce <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	211f      	movs	r1, #31
 8001f44:	400b      	ands	r3, r1
 8001f46:	210f      	movs	r1, #15
 8001f48:	4099      	lsls	r1, r3
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4013      	ands	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	035b      	lsls	r3, r3, #13
 8001f58:	0b5b      	lsrs	r3, r3, #13
 8001f5a:	d105      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x9c>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	221f      	movs	r2, #31
 8001f64:	4013      	ands	r3, r2
 8001f66:	e098      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d000      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0xa8>
 8001f72:	e091      	b.n	8002098 <HAL_ADC_ConfigChannel+0x1cc>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d000      	beq.n	8001f80 <HAL_ADC_ConfigChannel+0xb4>
 8001f7e:	e089      	b.n	8002094 <HAL_ADC_ConfigChannel+0x1c8>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2204      	movs	r2, #4
 8001f86:	4013      	ands	r3, r2
 8001f88:	d000      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0xc0>
 8001f8a:	e081      	b.n	8002090 <HAL_ADC_ConfigChannel+0x1c4>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2208      	movs	r2, #8
 8001f92:	4013      	ands	r3, r2
 8001f94:	d000      	beq.n	8001f98 <HAL_ADC_ConfigChannel+0xcc>
 8001f96:	e079      	b.n	800208c <HAL_ADC_ConfigChannel+0x1c0>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d000      	beq.n	8001fa4 <HAL_ADC_ConfigChannel+0xd8>
 8001fa2:	e071      	b.n	8002088 <HAL_ADC_ConfigChannel+0x1bc>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	4013      	ands	r3, r2
 8001fac:	d000      	beq.n	8001fb0 <HAL_ADC_ConfigChannel+0xe4>
 8001fae:	e069      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1b8>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d000      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0xf0>
 8001fba:	e061      	b.n	8002080 <HAL_ADC_ConfigChannel+0x1b4>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d000      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0xfc>
 8001fc6:	e059      	b.n	800207c <HAL_ADC_ConfigChannel+0x1b0>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d151      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1ac>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d149      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x1a8>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d141      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1a4>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d139      	bne.n	800206c <HAL_ADC_ConfigChannel+0x1a0>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	015b      	lsls	r3, r3, #5
 8002000:	4013      	ands	r3, r2
 8002002:	d131      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x19c>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	019b      	lsls	r3, r3, #6
 800200c:	4013      	ands	r3, r2
 800200e:	d129      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x198>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	01db      	lsls	r3, r3, #7
 8002018:	4013      	ands	r3, r2
 800201a:	d121      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x194>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	4013      	ands	r3, r2
 8002026:	d119      	bne.n	800205c <HAL_ADC_ConfigChannel+0x190>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	025b      	lsls	r3, r3, #9
 8002030:	4013      	ands	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x18c>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	029b      	lsls	r3, r3, #10
 800203c:	4013      	ands	r3, r2
 800203e:	d109      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x188>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	02db      	lsls	r3, r3, #11
 8002048:	4013      	ands	r3, r2
 800204a:	d001      	beq.n	8002050 <HAL_ADC_ConfigChannel+0x184>
 800204c:	2312      	movs	r3, #18
 800204e:	e024      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002050:	2300      	movs	r3, #0
 8002052:	e022      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002054:	2311      	movs	r3, #17
 8002056:	e020      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002058:	2310      	movs	r3, #16
 800205a:	e01e      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 800205c:	230f      	movs	r3, #15
 800205e:	e01c      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002060:	230e      	movs	r3, #14
 8002062:	e01a      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002064:	230d      	movs	r3, #13
 8002066:	e018      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002068:	230c      	movs	r3, #12
 800206a:	e016      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 800206c:	230b      	movs	r3, #11
 800206e:	e014      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002070:	230a      	movs	r3, #10
 8002072:	e012      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002074:	2309      	movs	r3, #9
 8002076:	e010      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002078:	2308      	movs	r3, #8
 800207a:	e00e      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 800207c:	2307      	movs	r3, #7
 800207e:	e00c      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002080:	2306      	movs	r3, #6
 8002082:	e00a      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002084:	2305      	movs	r3, #5
 8002086:	e008      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002088:	2304      	movs	r3, #4
 800208a:	e006      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 800208c:	2303      	movs	r3, #3
 800208e:	e004      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_ADC_ConfigChannel+0x1ce>
 8002098:	2300      	movs	r3, #0
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	6852      	ldr	r2, [r2, #4]
 800209e:	201f      	movs	r0, #31
 80020a0:	4002      	ands	r2, r0
 80020a2:	4093      	lsls	r3, r2
 80020a4:	000a      	movs	r2, r1
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d808      	bhi.n	80020ce <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	001a      	movs	r2, r3
 80020ca:	f7ff fb6f 	bl	80017ac <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6819      	ldr	r1, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	001a      	movs	r2, r3
 80020dc:	f7ff fbaa 	bl	8001834 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db00      	blt.n	80020ea <HAL_ADC_ConfigChannel+0x21e>
 80020e8:	e0bc      	b.n	8002264 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ea:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_ADC_ConfigChannel+0x360>)
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff fb0b 	bl	8001708 <LL_ADC_GetCommonPathInternalCh>
 80020f2:	0003      	movs	r3, r0
 80020f4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_ADC_ConfigChannel+0x364>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d122      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002108:	d11d      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	0412      	lsls	r2, r2, #16
 8002110:	4313      	orrs	r3, r2
 8002112:	4a46      	ldr	r2, [pc, #280]	; (800222c <HAL_ADC_ConfigChannel+0x360>)
 8002114:	0019      	movs	r1, r3
 8002116:	0010      	movs	r0, r2
 8002118:	f7ff fae2 	bl	80016e0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800211c:	4b45      	ldr	r3, [pc, #276]	; (8002234 <HAL_ADC_ConfigChannel+0x368>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4945      	ldr	r1, [pc, #276]	; (8002238 <HAL_ADC_ConfigChannel+0x36c>)
 8002122:	0018      	movs	r0, r3
 8002124:	f7fe f800 	bl	8000128 <__udivsi3>
 8002128:	0003      	movs	r3, r0
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	0013      	movs	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	189b      	adds	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002136:	e002      	b.n	800213e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3b01      	subs	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f9      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002144:	e08e      	b.n	8002264 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <HAL_ADC_ConfigChannel+0x370>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d10e      	bne.n	800216e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	045b      	lsls	r3, r3, #17
 8002156:	4013      	ands	r3, r2
 8002158:	d109      	bne.n	800216e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	0452      	lsls	r2, r2, #17
 8002160:	4313      	orrs	r3, r2
 8002162:	4a32      	ldr	r2, [pc, #200]	; (800222c <HAL_ADC_ConfigChannel+0x360>)
 8002164:	0019      	movs	r1, r3
 8002166:	0010      	movs	r0, r2
 8002168:	f7ff faba 	bl	80016e0 <LL_ADC_SetCommonPathInternalCh>
 800216c:	e07a      	b.n	8002264 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a33      	ldr	r2, [pc, #204]	; (8002240 <HAL_ADC_ConfigChannel+0x374>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d000      	beq.n	800217a <HAL_ADC_ConfigChannel+0x2ae>
 8002178:	e074      	b.n	8002264 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	03db      	lsls	r3, r3, #15
 8002180:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002182:	d000      	beq.n	8002186 <HAL_ADC_ConfigChannel+0x2ba>
 8002184:	e06e      	b.n	8002264 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	03d2      	lsls	r2, r2, #15
 800218c:	4313      	orrs	r3, r2
 800218e:	4a27      	ldr	r2, [pc, #156]	; (800222c <HAL_ADC_ConfigChannel+0x360>)
 8002190:	0019      	movs	r1, r3
 8002192:	0010      	movs	r0, r2
 8002194:	f7ff faa4 	bl	80016e0 <LL_ADC_SetCommonPathInternalCh>
 8002198:	e064      	b.n	8002264 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <HAL_ADC_ConfigChannel+0x35c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d107      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0019      	movs	r1, r3
 80021ba:	0010      	movs	r0, r2
 80021bc:	f7ff fb27 	bl	800180e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da4d      	bge.n	8002264 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_ADC_ConfigChannel+0x360>)
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7ff fa9c 	bl	8001708 <LL_ADC_GetCommonPathInternalCh>
 80021d0:	0003      	movs	r3, r0
 80021d2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HAL_ADC_ConfigChannel+0x364>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d108      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_ADC_ConfigChannel+0x378>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x360>)
 80021e6:	0019      	movs	r1, r3
 80021e8:	0010      	movs	r0, r2
 80021ea:	f7ff fa79 	bl	80016e0 <LL_ADC_SetCommonPathInternalCh>
 80021ee:	e039      	b.n	8002264 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_ADC_ConfigChannel+0x370>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4a12      	ldr	r2, [pc, #72]	; (8002248 <HAL_ADC_ConfigChannel+0x37c>)
 80021fe:	4013      	ands	r3, r2
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_ADC_ConfigChannel+0x360>)
 8002202:	0019      	movs	r1, r3
 8002204:	0010      	movs	r0, r2
 8002206:	f7ff fa6b 	bl	80016e0 <LL_ADC_SetCommonPathInternalCh>
 800220a:	e02b      	b.n	8002264 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_ADC_ConfigChannel+0x374>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d126      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4a0c      	ldr	r2, [pc, #48]	; (800224c <HAL_ADC_ConfigChannel+0x380>)
 800221a:	4013      	ands	r3, r2
 800221c:	4a03      	ldr	r2, [pc, #12]	; (800222c <HAL_ADC_ConfigChannel+0x360>)
 800221e:	0019      	movs	r1, r3
 8002220:	0010      	movs	r0, r2
 8002222:	f7ff fa5d 	bl	80016e0 <LL_ADC_SetCommonPathInternalCh>
 8002226:	e01d      	b.n	8002264 <HAL_ADC_ConfigChannel+0x398>
 8002228:	80000004 	.word	0x80000004
 800222c:	40012708 	.word	0x40012708
 8002230:	b0001000 	.word	0xb0001000
 8002234:	20000000 	.word	0x20000000
 8002238:	00030d40 	.word	0x00030d40
 800223c:	b8004000 	.word	0xb8004000
 8002240:	b4002000 	.word	0xb4002000
 8002244:	ff7fffff 	.word	0xff7fffff
 8002248:	feffffff 	.word	0xfeffffff
 800224c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	2220      	movs	r2, #32
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800225c:	2317      	movs	r3, #23
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2254      	movs	r2, #84	; 0x54
 8002268:	2100      	movs	r1, #0
 800226a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800226c:	2317      	movs	r3, #23
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b006      	add	sp, #24
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)

0800227c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff fb27 	bl	80018e0 <LL_ADC_IsEnabled>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d000      	beq.n	8002298 <ADC_Enable+0x1c>
 8002296:	e069      	b.n	800236c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4a36      	ldr	r2, [pc, #216]	; (8002378 <ADC_Enable+0xfc>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	2210      	movs	r2, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b4:	2201      	movs	r2, #1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e056      	b.n	800236e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f7ff faf9 	bl	80018bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <ADC_Enable+0x100>)
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fa1b 	bl	8001708 <LL_ADC_GetCommonPathInternalCh>
 80022d2:	0002      	movs	r2, r0
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	4013      	ands	r3, r2
 80022da:	d00f      	beq.n	80022fc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <ADC_Enable+0x104>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4928      	ldr	r1, [pc, #160]	; (8002384 <ADC_Enable+0x108>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7fd ff20 	bl	8000128 <__udivsi3>
 80022e8:	0003      	movs	r3, r0
 80022ea:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80022ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022ee:	e002      	b.n	80022f6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f9      	bne.n	80022f0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7e5b      	ldrb	r3, [r3, #25]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d033      	beq.n	800236c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002304:	f7ff f9a8 	bl	8001658 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800230c:	e027      	b.n	800235e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff fae4 	bl	80018e0 <LL_ADC_IsEnabled>
 8002318:	1e03      	subs	r3, r0, #0
 800231a:	d104      	bne.n	8002326 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff facb 	bl	80018bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002326:	f7ff f997 	bl	8001658 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d914      	bls.n	800235e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	2b01      	cmp	r3, #1
 8002340:	d00d      	beq.n	800235e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	2210      	movs	r2, #16
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2201      	movs	r2, #1
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e007      	b.n	800236e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	2b01      	cmp	r3, #1
 800236a:	d1d0      	bne.n	800230e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	0018      	movs	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	80000017 	.word	0x80000017
 800237c:	40012708 	.word	0x40012708
 8002380:	20000000 	.word	0x20000000
 8002384:	00030d40 	.word	0x00030d40

08002388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	0002      	movs	r2, r0
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002394:	1dfb      	adds	r3, r7, #7
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b7f      	cmp	r3, #127	; 0x7f
 800239a:	d809      	bhi.n	80023b0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	001a      	movs	r2, r3
 80023a2:	231f      	movs	r3, #31
 80023a4:	401a      	ands	r2, r3
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <__NVIC_EnableIRQ+0x30>)
 80023a8:	2101      	movs	r1, #1
 80023aa:	4091      	lsls	r1, r2
 80023ac:	000a      	movs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80023b0:	46c0      	nop			; (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	e000e100 	.word	0xe000e100

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	0002      	movs	r2, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b7f      	cmp	r3, #127	; 0x7f
 80023d0:	d828      	bhi.n	8002424 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023d2:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <__NVIC_SetPriority+0xd4>)
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	33c0      	adds	r3, #192	; 0xc0
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	589b      	ldr	r3, [r3, r2]
 80023e2:	1dfa      	adds	r2, r7, #7
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	0011      	movs	r1, r2
 80023e8:	2203      	movs	r2, #3
 80023ea:	400a      	ands	r2, r1
 80023ec:	00d2      	lsls	r2, r2, #3
 80023ee:	21ff      	movs	r1, #255	; 0xff
 80023f0:	4091      	lsls	r1, r2
 80023f2:	000a      	movs	r2, r1
 80023f4:	43d2      	mvns	r2, r2
 80023f6:	401a      	ands	r2, r3
 80023f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	22ff      	movs	r2, #255	; 0xff
 8002400:	401a      	ands	r2, r3
 8002402:	1dfb      	adds	r3, r7, #7
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	0018      	movs	r0, r3
 8002408:	2303      	movs	r3, #3
 800240a:	4003      	ands	r3, r0
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002410:	481f      	ldr	r0, [pc, #124]	; (8002490 <__NVIC_SetPriority+0xd4>)
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b25b      	sxtb	r3, r3
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	430a      	orrs	r2, r1
 800241c:	33c0      	adds	r3, #192	; 0xc0
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002422:	e031      	b.n	8002488 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <__NVIC_SetPriority+0xd8>)
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	0019      	movs	r1, r3
 800242c:	230f      	movs	r3, #15
 800242e:	400b      	ands	r3, r1
 8002430:	3b08      	subs	r3, #8
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3306      	adds	r3, #6
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	3304      	adds	r3, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	1dfa      	adds	r2, r7, #7
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	0011      	movs	r1, r2
 8002444:	2203      	movs	r2, #3
 8002446:	400a      	ands	r2, r1
 8002448:	00d2      	lsls	r2, r2, #3
 800244a:	21ff      	movs	r1, #255	; 0xff
 800244c:	4091      	lsls	r1, r2
 800244e:	000a      	movs	r2, r1
 8002450:	43d2      	mvns	r2, r2
 8002452:	401a      	ands	r2, r3
 8002454:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	22ff      	movs	r2, #255	; 0xff
 800245c:	401a      	ands	r2, r3
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	0018      	movs	r0, r3
 8002464:	2303      	movs	r3, #3
 8002466:	4003      	ands	r3, r0
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800246c:	4809      	ldr	r0, [pc, #36]	; (8002494 <__NVIC_SetPriority+0xd8>)
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	001c      	movs	r4, r3
 8002474:	230f      	movs	r3, #15
 8002476:	4023      	ands	r3, r4
 8002478:	3b08      	subs	r3, #8
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	430a      	orrs	r2, r1
 800247e:	3306      	adds	r3, #6
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	18c3      	adds	r3, r0, r3
 8002484:	3304      	adds	r3, #4
 8002486:	601a      	str	r2, [r3, #0]
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b003      	add	sp, #12
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	e000e100 	.word	0xe000e100
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	1e5a      	subs	r2, r3, #1
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	045b      	lsls	r3, r3, #17
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d301      	bcc.n	80024b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ac:	2301      	movs	r3, #1
 80024ae:	e010      	b.n	80024d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <SysTick_Config+0x44>)
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	3a01      	subs	r2, #1
 80024b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b8:	2301      	movs	r3, #1
 80024ba:	425b      	negs	r3, r3
 80024bc:	2103      	movs	r1, #3
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff ff7c 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <SysTick_Config+0x44>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	; (80024dc <SysTick_Config+0x44>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	210f      	movs	r1, #15
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	1c02      	adds	r2, r0, #0
 80024f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	0011      	movs	r1, r2
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7ff ff5d 	bl	80023bc <__NVIC_SetPriority>
}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b004      	add	sp, #16
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	0002      	movs	r2, r0
 8002512:	1dfb      	adds	r3, r7, #7
 8002514:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002516:	1dfb      	adds	r3, r7, #7
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	b25b      	sxtb	r3, r3
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff ff33 	bl	8002388 <__NVIC_EnableIRQ>
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b002      	add	sp, #8
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff ffaf 	bl	8002498 <SysTick_Config>
 800253a:	0003      	movs	r3, r0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b002      	add	sp, #8
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002552:	e147      	b.n	80027e4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4091      	lsls	r1, r2
 800255e:	000a      	movs	r2, r1
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d100      	bne.n	800256c <HAL_GPIO_Init+0x28>
 800256a:	e138      	b.n	80027de <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2203      	movs	r2, #3
 8002572:	4013      	ands	r3, r2
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <HAL_GPIO_Init+0x40>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2203      	movs	r2, #3
 800257e:	4013      	ands	r3, r2
 8002580:	2b02      	cmp	r3, #2
 8002582:	d130      	bne.n	80025e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	409a      	lsls	r2, r3
 8002592:	0013      	movs	r3, r2
 8002594:	43da      	mvns	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	409a      	lsls	r2, r3
 80025a6:	0013      	movs	r3, r2
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ba:	2201      	movs	r2, #1
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	43da      	mvns	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	2201      	movs	r2, #1
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2203      	movs	r2, #3
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d017      	beq.n	8002622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	409a      	lsls	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	43da      	mvns	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	0013      	movs	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2203      	movs	r2, #3
 8002628:	4013      	ands	r3, r2
 800262a:	2b02      	cmp	r3, #2
 800262c:	d123      	bne.n	8002676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	0092      	lsls	r2, r2, #2
 8002638:	58d3      	ldr	r3, [r2, r3]
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2207      	movs	r2, #7
 8002640:	4013      	ands	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	409a      	lsls	r2, r3
 8002648:	0013      	movs	r3, r2
 800264a:	43da      	mvns	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2107      	movs	r1, #7
 800265a:	400b      	ands	r3, r1
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	6939      	ldr	r1, [r7, #16]
 8002674:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2203      	movs	r2, #3
 8002682:	409a      	lsls	r2, r3
 8002684:	0013      	movs	r3, r2
 8002686:	43da      	mvns	r2, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	401a      	ands	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	409a      	lsls	r2, r3
 800269c:	0013      	movs	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	23c0      	movs	r3, #192	; 0xc0
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	4013      	ands	r3, r2
 80026b4:	d100      	bne.n	80026b8 <HAL_GPIO_Init+0x174>
 80026b6:	e092      	b.n	80027de <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80026b8:	4a50      	ldr	r2, [pc, #320]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3318      	adds	r3, #24
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	589b      	ldr	r3, [r3, r2]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2203      	movs	r2, #3
 80026ca:	4013      	ands	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	220f      	movs	r2, #15
 80026d0:	409a      	lsls	r2, r3
 80026d2:	0013      	movs	r3, r2
 80026d4:	43da      	mvns	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	23a0      	movs	r3, #160	; 0xa0
 80026e0:	05db      	lsls	r3, r3, #23
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x1ca>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a45      	ldr	r2, [pc, #276]	; (8002800 <HAL_GPIO_Init+0x2bc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x1c6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a44      	ldr	r2, [pc, #272]	; (8002804 <HAL_GPIO_Init+0x2c0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x1c2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a43      	ldr	r2, [pc, #268]	; (8002808 <HAL_GPIO_Init+0x2c4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x1be>
 80026fe:	2303      	movs	r3, #3
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x1cc>
 8002702:	2305      	movs	r3, #5
 8002704:	e004      	b.n	8002710 <HAL_GPIO_Init+0x1cc>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <HAL_GPIO_Init+0x1cc>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x1cc>
 800270e:	2300      	movs	r3, #0
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	2103      	movs	r1, #3
 8002714:	400a      	ands	r2, r1
 8002716:	00d2      	lsls	r2, r2, #3
 8002718:	4093      	lsls	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002720:	4936      	ldr	r1, [pc, #216]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3318      	adds	r3, #24
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800272e:	4b33      	ldr	r3, [pc, #204]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	43da      	mvns	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	035b      	lsls	r3, r3, #13
 8002746:	4013      	ands	r3, r2
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002758:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43da      	mvns	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	039b      	lsls	r3, r3, #14
 8002770:	4013      	ands	r3, r2
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800277c:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 8002784:	2384      	movs	r3, #132	; 0x84
 8002786:	58d3      	ldr	r3, [r2, r3]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43da      	mvns	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	029b      	lsls	r3, r3, #10
 800279c:	4013      	ands	r3, r2
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027a8:	4914      	ldr	r1, [pc, #80]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80027aa:	2284      	movs	r2, #132	; 0x84
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	58d3      	ldr	r3, [r2, r3]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	025b      	lsls	r3, r3, #9
 80027ca:	4013      	ands	r3, r2
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027d6:	4909      	ldr	r1, [pc, #36]	; (80027fc <HAL_GPIO_Init+0x2b8>)
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	40da      	lsrs	r2, r3
 80027ec:	1e13      	subs	r3, r2, #0
 80027ee:	d000      	beq.n	80027f2 <HAL_GPIO_Init+0x2ae>
 80027f0:	e6b0      	b.n	8002554 <HAL_GPIO_Init+0x10>
  }
}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b006      	add	sp, #24
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021800 	.word	0x40021800
 8002800:	50000400 	.word	0x50000400
 8002804:	50000800 	.word	0x50000800
 8002808:	50000c00 	.word	0x50000c00

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	0008      	movs	r0, r1
 8002816:	0011      	movs	r1, r2
 8002818:	1cbb      	adds	r3, r7, #2
 800281a:	1c02      	adds	r2, r0, #0
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	1c7b      	adds	r3, r7, #1
 8002820:	1c0a      	adds	r2, r1, #0
 8002822:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	1c7b      	adds	r3, r7, #1
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800282c:	1cbb      	adds	r3, r7, #2
 800282e:	881a      	ldrh	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002836:	1cbb      	adds	r3, r7, #2
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	000a      	movs	r2, r1
 8002850:	1cbb      	adds	r3, r7, #2
 8002852:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800285a:	1cbb      	adds	r3, r7, #2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4013      	ands	r3, r2
 8002862:	041a      	lsls	r2, r3, #16
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43db      	mvns	r3, r3
 8002868:	1cb9      	adds	r1, r7, #2
 800286a:	8809      	ldrh	r1, [r1, #0]
 800286c:	400b      	ands	r3, r1
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e08f      	b.n	80029ae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2241      	movs	r2, #65	; 0x41
 8002892:	5c9b      	ldrb	r3, [r3, r2]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2240      	movs	r2, #64	; 0x40
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fe fc4b 	bl	8001140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2241      	movs	r2, #65	; 0x41
 80028ae:	2124      	movs	r1, #36	; 0x24
 80028b0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2101      	movs	r1, #1
 80028be:	438a      	bics	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	493b      	ldr	r1, [pc, #236]	; (80029b8 <HAL_I2C_Init+0x13c>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4938      	ldr	r1, [pc, #224]	; (80029bc <HAL_I2C_Init+0x140>)
 80028dc:	400a      	ands	r2, r1
 80028de:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d108      	bne.n	80028fa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	0209      	lsls	r1, r1, #8
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	e007      	b.n	800290a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2184      	movs	r1, #132	; 0x84
 8002904:	0209      	lsls	r1, r1, #8
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d109      	bne.n	8002926 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2180      	movs	r1, #128	; 0x80
 800291e:	0109      	lsls	r1, r1, #4
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	e007      	b.n	8002936 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4923      	ldr	r1, [pc, #140]	; (80029c0 <HAL_I2C_Init+0x144>)
 8002932:	400a      	ands	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4920      	ldr	r1, [pc, #128]	; (80029c4 <HAL_I2C_Init+0x148>)
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	491a      	ldr	r1, [pc, #104]	; (80029bc <HAL_I2C_Init+0x140>)
 8002952:	400a      	ands	r2, r1
 8002954:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	431a      	orrs	r2, r3
 8002960:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69d9      	ldr	r1, [r3, #28]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2101      	movs	r1, #1
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2241      	movs	r2, #65	; 0x41
 800299a:	2120      	movs	r1, #32
 800299c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2242      	movs	r2, #66	; 0x42
 80029a8:	2100      	movs	r1, #0
 80029aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	f0ffffff 	.word	0xf0ffffff
 80029bc:	ffff7fff 	.word	0xffff7fff
 80029c0:	fffff7ff 	.word	0xfffff7ff
 80029c4:	02008000 	.word	0x02008000

080029c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029c8:	b590      	push	{r4, r7, lr}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	0008      	movs	r0, r1
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	0019      	movs	r1, r3
 80029d6:	230a      	movs	r3, #10
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	1c02      	adds	r2, r0, #0
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	2308      	movs	r3, #8
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	1c0a      	adds	r2, r1, #0
 80029e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2241      	movs	r2, #65	; 0x41
 80029ea:	5c9b      	ldrb	r3, [r3, r2]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d000      	beq.n	80029f4 <HAL_I2C_Master_Transmit+0x2c>
 80029f2:	e10a      	b.n	8002c0a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	5c9b      	ldrb	r3, [r3, r2]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_I2C_Master_Transmit+0x3a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e104      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x244>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a0a:	f7fe fe25 	bl	8001658 <HAL_GetTick>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	0219      	lsls	r1, r3, #8
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2319      	movs	r3, #25
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f000 fa1a 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0ef      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2241      	movs	r2, #65	; 0x41
 8002a30:	2121      	movs	r1, #33	; 0x21
 8002a32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2242      	movs	r2, #66	; 0x42
 8002a38:	2110      	movs	r1, #16
 8002a3a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	18ba      	adds	r2, r7, r2
 8002a4e:	8812      	ldrh	r2, [r2, #0]
 8002a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2bff      	cmp	r3, #255	; 0xff
 8002a60:	d906      	bls.n	8002a70 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	22ff      	movs	r2, #255	; 0xff
 8002a66:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	045b      	lsls	r3, r3, #17
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e007      	b.n	8002a80 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	049b      	lsls	r3, r3, #18
 8002a7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d027      	beq.n	8002ad8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	697c      	ldr	r4, [r7, #20]
 8002ac4:	230a      	movs	r3, #10
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	8819      	ldrh	r1, [r3, #0]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	4b51      	ldr	r3, [pc, #324]	; (8002c14 <HAL_I2C_Master_Transmit+0x24c>)
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	0023      	movs	r3, r4
 8002ad2:	f000 fba3 	bl	800321c <I2C_TransferConfig>
 8002ad6:	e06f      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	697c      	ldr	r4, [r7, #20]
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	8819      	ldrh	r1, [r3, #0]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_I2C_Master_Transmit+0x24c>)
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	0023      	movs	r3, r4
 8002aee:	f000 fb95 	bl	800321c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002af2:	e061      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 fa04 	bl	8002f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b00:	1e03      	subs	r3, r0, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e081      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d03a      	beq.n	8002bb8 <HAL_I2C_Master_Transmit+0x1f0>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d136      	bne.n	8002bb8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	0013      	movs	r3, r2
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	f000 f97e 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e053      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2bff      	cmp	r3, #255	; 0xff
 8002b6c:	d911      	bls.n	8002b92 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	22ff      	movs	r2, #255	; 0xff
 8002b72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	045c      	lsls	r4, r3, #17
 8002b7e:	230a      	movs	r3, #10
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	8819      	ldrh	r1, [r3, #0]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	2300      	movs	r3, #0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	0023      	movs	r3, r4
 8002b8c:	f000 fb46 	bl	800321c <I2C_TransferConfig>
 8002b90:	e012      	b.n	8002bb8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	049c      	lsls	r4, r3, #18
 8002ba6:	230a      	movs	r3, #10
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	8819      	ldrh	r1, [r3, #0]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	0023      	movs	r3, r4
 8002bb4:	f000 fb32 	bl	800321c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d198      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 f9e3 	bl	8002f94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01a      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	490b      	ldr	r1, [pc, #44]	; (8002c18 <HAL_I2C_Master_Transmit+0x250>)
 8002bea:	400a      	ands	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2241      	movs	r2, #65	; 0x41
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2242      	movs	r2, #66	; 0x42
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	2100      	movs	r1, #0
 8002c04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b007      	add	sp, #28
 8002c12:	bd90      	pop	{r4, r7, pc}
 8002c14:	80002000 	.word	0x80002000
 8002c18:	fe00e800 	.word	0xfe00e800

08002c1c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	230a      	movs	r3, #10
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	1c0a      	adds	r2, r1, #0
 8002c2e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2241      	movs	r2, #65	; 0x41
 8002c38:	5c9b      	ldrb	r3, [r3, r2]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d000      	beq.n	8002c42 <HAL_I2C_IsDeviceReady+0x26>
 8002c40:	e0df      	b.n	8002e02 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d101      	bne.n	8002c5a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0d4      	b.n	8002e04 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2240      	movs	r2, #64	; 0x40
 8002c5e:	5c9b      	ldrb	r3, [r3, r2]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_I2C_IsDeviceReady+0x4c>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e0cd      	b.n	8002e04 <HAL_I2C_IsDeviceReady+0x1e8>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2241      	movs	r2, #65	; 0x41
 8002c74:	2124      	movs	r1, #36	; 0x24
 8002c76:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_I2C_IsDeviceReady+0x7a>
 8002c86:	230a      	movs	r3, #10
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	059b      	lsls	r3, r3, #22
 8002c8e:	0d9b      	lsrs	r3, r3, #22
 8002c90:	4a5e      	ldr	r2, [pc, #376]	; (8002e0c <HAL_I2C_IsDeviceReady+0x1f0>)
 8002c92:	431a      	orrs	r2, r3
 8002c94:	e006      	b.n	8002ca4 <HAL_I2C_IsDeviceReady+0x88>
 8002c96:	230a      	movs	r3, #10
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	059b      	lsls	r3, r3, #22
 8002c9e:	0d9b      	lsrs	r3, r3, #22
 8002ca0:	4a5b      	ldr	r2, [pc, #364]	; (8002e10 <HAL_I2C_IsDeviceReady+0x1f4>)
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002caa:	f7fe fcd5 	bl	8001658 <HAL_GetTick>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	4013      	ands	r3, r2
 8002cbc:	3b20      	subs	r3, #32
 8002cbe:	425a      	negs	r2, r3
 8002cc0:	4153      	adcs	r3, r2
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	231f      	movs	r3, #31
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2210      	movs	r2, #16
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	3b10      	subs	r3, #16
 8002cd6:	425a      	negs	r2, r3
 8002cd8:	4153      	adcs	r3, r2
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	231e      	movs	r3, #30
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ce2:	e035      	b.n	8002d50 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	d01a      	beq.n	8002d20 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cea:	f7fe fcb5 	bl	8001658 <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <HAL_I2C_IsDeviceReady+0xe4>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10f      	bne.n	8002d20 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2241      	movs	r2, #65	; 0x41
 8002d04:	2120      	movs	r1, #32
 8002d06:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2240      	movs	r2, #64	; 0x40
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e071      	b.n	8002e04 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2220      	movs	r2, #32
 8002d28:	4013      	ands	r3, r2
 8002d2a:	3b20      	subs	r3, #32
 8002d2c:	425a      	negs	r2, r3
 8002d2e:	4153      	adcs	r3, r2
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	231f      	movs	r3, #31
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2210      	movs	r2, #16
 8002d40:	4013      	ands	r3, r2
 8002d42:	3b10      	subs	r3, #16
 8002d44:	425a      	negs	r2, r3
 8002d46:	4153      	adcs	r3, r2
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	231e      	movs	r3, #30
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d50:	231f      	movs	r3, #31
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <HAL_I2C_IsDeviceReady+0x148>
 8002d5a:	231e      	movs	r3, #30
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0bf      	beq.n	8002ce4 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d01a      	beq.n	8002da8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	0013      	movs	r3, r2
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2120      	movs	r1, #32
 8002d80:	f000 f86a 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	1e03      	subs	r3, r0, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e03b      	b.n	8002e04 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2220      	movs	r2, #32
 8002d92:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2241      	movs	r2, #65	; 0x41
 8002d98:	2120      	movs	r1, #32
 8002d9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2240      	movs	r2, #64	; 0x40
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e02d      	b.n	8002e04 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	0013      	movs	r3, r2
 8002db2:	2200      	movs	r2, #0
 8002db4:	2120      	movs	r1, #32
 8002db6:	f000 f84f 	bl	8002e58 <I2C_WaitOnFlagUntilTimeout>
 8002dba:	1e03      	subs	r3, r0, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e020      	b.n	8002e04 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d900      	bls.n	8002de2 <HAL_I2C_IsDeviceReady+0x1c6>
 8002de0:	e74d      	b.n	8002c7e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2241      	movs	r2, #65	; 0x41
 8002de6:	2120      	movs	r1, #32
 8002de8:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	2220      	movs	r2, #32
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2240      	movs	r2, #64	; 0x40
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
  }
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b008      	add	sp, #32
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	02002000 	.word	0x02002000
 8002e10:	02002800 	.word	0x02002800

08002e14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2202      	movs	r2, #2
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d103      	bne.n	8002e32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d007      	beq.n	8002e50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	619a      	str	r2, [r3, #24]
  }
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	1dfb      	adds	r3, r7, #7
 8002e66:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e68:	e03a      	b.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	6839      	ldr	r1, [r7, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f000 f8d3 	bl	800301c <I2C_IsErrorOccurred>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e040      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	d02d      	beq.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e84:	f7fe fbe8 	bl	8001658 <HAL_GetTick>
 8002e88:	0002      	movs	r2, r0
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d302      	bcc.n	8002e9a <I2C_WaitOnFlagUntilTimeout+0x42>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d122      	bne.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	425a      	negs	r2, r3
 8002eaa:	4153      	adcs	r3, r2
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	001a      	movs	r2, r3
 8002eb0:	1dfb      	adds	r3, r7, #7
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d113      	bne.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2241      	movs	r2, #65	; 0x41
 8002ec8:	2120      	movs	r1, #32
 8002eca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2242      	movs	r2, #66	; 0x42
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	2100      	movs	r1, #0
 8002eda:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e00f      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	425a      	negs	r2, r3
 8002ef0:	4153      	adcs	r3, r2
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	001a      	movs	r2, r3
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d0b5      	beq.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b004      	add	sp, #16
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f14:	e032      	b.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 f87d 	bl	800301c <I2C_IsErrorOccurred>
 8002f22:	1e03      	subs	r3, r0, #0
 8002f24:	d001      	beq.n	8002f2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e030      	b.n	8002f8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	d025      	beq.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f30:	f7fe fb92 	bl	8001658 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d302      	bcc.n	8002f46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11a      	bne.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d013      	beq.n	8002f7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	2220      	movs	r2, #32
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2241      	movs	r2, #65	; 0x41
 8002f64:	2120      	movs	r1, #32
 8002f66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2242      	movs	r2, #66	; 0x42
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	2100      	movs	r1, #0
 8002f76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e007      	b.n	8002f8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2202      	movs	r2, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d1c5      	bne.n	8002f16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa0:	e02f      	b.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f837 	bl	800301c <I2C_IsErrorOccurred>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e02d      	b.n	8003012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7fe fb4f 	bl	8001658 <HAL_GetTick>
 8002fba:	0002      	movs	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d11a      	bne.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d013      	beq.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	2220      	movs	r2, #32
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2241      	movs	r2, #65	; 0x41
 8002fea:	2120      	movs	r1, #32
 8002fec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2242      	movs	r2, #66	; 0x42
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2240      	movs	r2, #64	; 0x40
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e007      	b.n	8003012 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2220      	movs	r2, #32
 800300a:	4013      	ands	r3, r2
 800300c:	2b20      	cmp	r3, #32
 800300e:	d1c8      	bne.n	8002fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b08b      	sub	sp, #44	; 0x2c
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2327      	movs	r3, #39	; 0x27
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2210      	movs	r2, #16
 8003044:	4013      	ands	r3, r2
 8003046:	d100      	bne.n	800304a <I2C_IsErrorOccurred+0x2e>
 8003048:	e082      	b.n	8003150 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2210      	movs	r2, #16
 8003050:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003052:	e060      	b.n	8003116 <I2C_IsErrorOccurred+0xfa>
 8003054:	2427      	movs	r4, #39	; 0x27
 8003056:	193b      	adds	r3, r7, r4
 8003058:	193a      	adds	r2, r7, r4
 800305a:	7812      	ldrb	r2, [r2, #0]
 800305c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	d058      	beq.n	8003116 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003064:	f7fe faf8 	bl	8001658 <HAL_GetTick>
 8003068:	0002      	movs	r2, r0
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	d306      	bcc.n	8003082 <I2C_IsErrorOccurred+0x66>
 8003074:	193b      	adds	r3, r7, r4
 8003076:	193a      	adds	r2, r7, r4
 8003078:	7812      	ldrb	r2, [r2, #0]
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d149      	bne.n	8003116 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	01db      	lsls	r3, r3, #7
 800308c:	4013      	ands	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003090:	2013      	movs	r0, #19
 8003092:	183b      	adds	r3, r7, r0
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	2142      	movs	r1, #66	; 0x42
 8003098:	5c52      	ldrb	r2, [r2, r1]
 800309a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	401a      	ands	r2, r3
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d126      	bne.n	80030fe <I2C_IsErrorOccurred+0xe2>
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	01db      	lsls	r3, r3, #7
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d021      	beq.n	80030fe <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80030ba:	183b      	adds	r3, r7, r0
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d01d      	beq.n	80030fe <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2180      	movs	r1, #128	; 0x80
 80030ce:	01c9      	lsls	r1, r1, #7
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030d4:	f7fe fac0 	bl	8001658 <HAL_GetTick>
 80030d8:	0003      	movs	r3, r0
 80030da:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030dc:	e00f      	b.n	80030fe <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030de:	f7fe fabb 	bl	8001658 <HAL_GetTick>
 80030e2:	0002      	movs	r2, r0
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b19      	cmp	r3, #25
 80030ea:	d908      	bls.n	80030fe <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	2220      	movs	r2, #32
 80030f0:	4313      	orrs	r3, r2
 80030f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030f4:	2327      	movs	r3, #39	; 0x27
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]

              break;
 80030fc:	e00b      	b.n	8003116 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2220      	movs	r2, #32
 8003106:	4013      	ands	r3, r2
 8003108:	2127      	movs	r1, #39	; 0x27
 800310a:	187a      	adds	r2, r7, r1
 800310c:	1879      	adds	r1, r7, r1
 800310e:	7809      	ldrb	r1, [r1, #0]
 8003110:	7011      	strb	r1, [r2, #0]
 8003112:	2b20      	cmp	r3, #32
 8003114:	d1e3      	bne.n	80030de <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2220      	movs	r2, #32
 800311e:	4013      	ands	r3, r2
 8003120:	2b20      	cmp	r3, #32
 8003122:	d004      	beq.n	800312e <I2C_IsErrorOccurred+0x112>
 8003124:	2327      	movs	r3, #39	; 0x27
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d092      	beq.n	8003054 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800312e:	2327      	movs	r3, #39	; 0x27
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d103      	bne.n	8003140 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2220      	movs	r2, #32
 800313e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	2204      	movs	r2, #4
 8003144:	4313      	orrs	r3, r2
 8003146:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003148:	2327      	movs	r3, #39	; 0x27
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4013      	ands	r3, r2
 8003160:	d00c      	beq.n	800317c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	2201      	movs	r2, #1
 8003166:	4313      	orrs	r3, r2
 8003168:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	0052      	lsls	r2, r2, #1
 8003172:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003174:	2327      	movs	r3, #39	; 0x27
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4013      	ands	r3, r2
 8003184:	d00c      	beq.n	80031a0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	2208      	movs	r2, #8
 800318a:	4313      	orrs	r3, r2
 800318c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	00d2      	lsls	r2, r2, #3
 8003196:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003198:	2327      	movs	r3, #39	; 0x27
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4013      	ands	r3, r2
 80031a8:	d00c      	beq.n	80031c4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	2202      	movs	r2, #2
 80031ae:	4313      	orrs	r3, r2
 80031b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	0092      	lsls	r2, r2, #2
 80031ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031bc:	2327      	movs	r3, #39	; 0x27
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80031c4:	2327      	movs	r3, #39	; 0x27
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01d      	beq.n	800320a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff fe1f 	bl	8002e14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	490d      	ldr	r1, [pc, #52]	; (8003218 <I2C_IsErrorOccurred+0x1fc>)
 80031e2:	400a      	ands	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2241      	movs	r2, #65	; 0x41
 80031f6:	2120      	movs	r1, #32
 80031f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2242      	movs	r2, #66	; 0x42
 80031fe:	2100      	movs	r1, #0
 8003200:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	2100      	movs	r1, #0
 8003208:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800320a:	2327      	movs	r3, #39	; 0x27
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	781b      	ldrb	r3, [r3, #0]
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b00b      	add	sp, #44	; 0x2c
 8003216:	bd90      	pop	{r4, r7, pc}
 8003218:	fe00e800 	.word	0xfe00e800

0800321c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800321c:	b590      	push	{r4, r7, lr}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	0008      	movs	r0, r1
 8003226:	0011      	movs	r1, r2
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	240a      	movs	r4, #10
 800322c:	193b      	adds	r3, r7, r4
 800322e:	1c02      	adds	r2, r0, #0
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	2009      	movs	r0, #9
 8003234:	183b      	adds	r3, r7, r0
 8003236:	1c0a      	adds	r2, r1, #0
 8003238:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800323a:	193b      	adds	r3, r7, r4
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	059b      	lsls	r3, r3, #22
 8003240:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003242:	183b      	adds	r3, r7, r0
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	0419      	lsls	r1, r3, #16
 8003248:	23ff      	movs	r3, #255	; 0xff
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800324e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003256:	4313      	orrs	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003266:	0d51      	lsrs	r1, r2, #21
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	00d2      	lsls	r2, r2, #3
 800326c:	400a      	ands	r2, r1
 800326e:	4907      	ldr	r1, [pc, #28]	; (800328c <I2C_TransferConfig+0x70>)
 8003270:	430a      	orrs	r2, r1
 8003272:	43d2      	mvns	r2, r2
 8003274:	401a      	ands	r2, r3
 8003276:	0011      	movs	r1, r2
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b007      	add	sp, #28
 8003288:	bd90      	pop	{r4, r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	03ff63ff 	.word	0x03ff63ff

08003290 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2241      	movs	r2, #65	; 0x41
 800329e:	5c9b      	ldrb	r3, [r3, r2]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d138      	bne.n	8003318 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2240      	movs	r2, #64	; 0x40
 80032aa:	5c9b      	ldrb	r3, [r3, r2]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e032      	b.n	800331a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	2101      	movs	r1, #1
 80032ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2241      	movs	r2, #65	; 0x41
 80032c0:	2124      	movs	r1, #36	; 0x24
 80032c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2101      	movs	r1, #1
 80032d0:	438a      	bics	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4911      	ldr	r1, [pc, #68]	; (8003324 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2101      	movs	r1, #1
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2241      	movs	r2, #65	; 0x41
 8003308:	2120      	movs	r1, #32
 800330a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2240      	movs	r2, #64	; 0x40
 8003310:	2100      	movs	r1, #0
 8003312:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	e000      	b.n	800331a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
  }
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b002      	add	sp, #8
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	ffffefff 	.word	0xffffefff

08003328 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2241      	movs	r2, #65	; 0x41
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	d139      	bne.n	80033b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2240      	movs	r2, #64	; 0x40
 8003342:	5c9b      	ldrb	r3, [r3, r2]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003348:	2302      	movs	r3, #2
 800334a:	e033      	b.n	80033b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	2101      	movs	r1, #1
 8003352:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2241      	movs	r2, #65	; 0x41
 8003358:	2124      	movs	r1, #36	; 0x24
 800335a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2101      	movs	r1, #1
 8003368:	438a      	bics	r2, r1
 800336a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a11      	ldr	r2, [pc, #68]	; (80033bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	430a      	orrs	r2, r1
 800339c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2241      	movs	r2, #65	; 0x41
 80033a2:	2120      	movs	r1, #32
 80033a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2240      	movs	r2, #64	; 0x40
 80033aa:	2100      	movs	r1, #0
 80033ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	fffff0ff 	.word	0xfffff0ff

080033c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a19      	ldr	r2, [pc, #100]	; (8003434 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d11f      	bne.n	8003424 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80033e4:	4b14      	ldr	r3, [pc, #80]	; (8003438 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	0013      	movs	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	189b      	adds	r3, r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4912      	ldr	r1, [pc, #72]	; (800343c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7fc fe98 	bl	8000128 <__udivsi3>
 80033f8:	0003      	movs	r3, r0
 80033fa:	3301      	adds	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033fe:	e008      	b.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3b01      	subs	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e001      	b.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e009      	b.n	8003426 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003412:	4b07      	ldr	r3, [pc, #28]	; (8003430 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	401a      	ands	r2, r3
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	429a      	cmp	r2, r3
 8003422:	d0ed      	beq.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b004      	add	sp, #16
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	40007000 	.word	0x40007000
 8003434:	fffff9ff 	.word	0xfffff9ff
 8003438:	20000000 	.word	0x20000000
 800343c:	000f4240 	.word	0x000f4240

08003440 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	23e0      	movs	r3, #224	; 0xe0
 800344a:	01db      	lsls	r3, r3, #7
 800344c:	4013      	ands	r3, r2
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000

08003458 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e2fe      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2201      	movs	r2, #1
 8003470:	4013      	ands	r3, r2
 8003472:	d100      	bne.n	8003476 <HAL_RCC_OscConfig+0x1e>
 8003474:	e07c      	b.n	8003570 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003476:	4bc3      	ldr	r3, [pc, #780]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2238      	movs	r2, #56	; 0x38
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003480:	4bc0      	ldr	r3, [pc, #768]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2203      	movs	r2, #3
 8003486:	4013      	ands	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b10      	cmp	r3, #16
 800348e:	d102      	bne.n	8003496 <HAL_RCC_OscConfig+0x3e>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d002      	beq.n	800349c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d10b      	bne.n	80034b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	4bb9      	ldr	r3, [pc, #740]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	029b      	lsls	r3, r3, #10
 80034a4:	4013      	ands	r3, r2
 80034a6:	d062      	beq.n	800356e <HAL_RCC_OscConfig+0x116>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d15e      	bne.n	800356e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e2d9      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	025b      	lsls	r3, r3, #9
 80034bc:	429a      	cmp	r2, r3
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x78>
 80034c0:	4bb0      	ldr	r3, [pc, #704]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4baf      	ldr	r3, [pc, #700]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80034c6:	2180      	movs	r1, #128	; 0x80
 80034c8:	0249      	lsls	r1, r1, #9
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e020      	b.n	8003512 <HAL_RCC_OscConfig+0xba>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	23a0      	movs	r3, #160	; 0xa0
 80034d6:	02db      	lsls	r3, r3, #11
 80034d8:	429a      	cmp	r2, r3
 80034da:	d10e      	bne.n	80034fa <HAL_RCC_OscConfig+0xa2>
 80034dc:	4ba9      	ldr	r3, [pc, #676]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4ba8      	ldr	r3, [pc, #672]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	02c9      	lsls	r1, r1, #11
 80034e6:	430a      	orrs	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	4ba6      	ldr	r3, [pc, #664]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4ba5      	ldr	r3, [pc, #660]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	0249      	lsls	r1, r1, #9
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e00b      	b.n	8003512 <HAL_RCC_OscConfig+0xba>
 80034fa:	4ba2      	ldr	r3, [pc, #648]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4ba1      	ldr	r3, [pc, #644]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003500:	49a1      	ldr	r1, [pc, #644]	; (8003788 <HAL_RCC_OscConfig+0x330>)
 8003502:	400a      	ands	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	4b9f      	ldr	r3, [pc, #636]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4b9e      	ldr	r3, [pc, #632]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800350c:	499f      	ldr	r1, [pc, #636]	; (800378c <HAL_RCC_OscConfig+0x334>)
 800350e:	400a      	ands	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d014      	beq.n	8003544 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351a:	f7fe f89d 	bl	8001658 <HAL_GetTick>
 800351e:	0003      	movs	r3, r0
 8003520:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7fe f898 	bl	8001658 <HAL_GetTick>
 8003528:	0002      	movs	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e298      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003536:	4b93      	ldr	r3, [pc, #588]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	029b      	lsls	r3, r3, #10
 800353e:	4013      	ands	r3, r2
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0xcc>
 8003542:	e015      	b.n	8003570 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe f888 	bl	8001658 <HAL_GetTick>
 8003548:	0003      	movs	r3, r0
 800354a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354e:	f7fe f883 	bl	8001658 <HAL_GetTick>
 8003552:	0002      	movs	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	; 0x64
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e283      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003560:	4b88      	ldr	r3, [pc, #544]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	029b      	lsls	r3, r3, #10
 8003568:	4013      	ands	r3, r2
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0xf6>
 800356c:	e000      	b.n	8003570 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2202      	movs	r2, #2
 8003576:	4013      	ands	r3, r2
 8003578:	d100      	bne.n	800357c <HAL_RCC_OscConfig+0x124>
 800357a:	e099      	b.n	80036b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357c:	4b81      	ldr	r3, [pc, #516]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2238      	movs	r2, #56	; 0x38
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003586:	4b7f      	ldr	r3, [pc, #508]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2203      	movs	r2, #3
 800358c:	4013      	ands	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b10      	cmp	r3, #16
 8003594:	d102      	bne.n	800359c <HAL_RCC_OscConfig+0x144>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d002      	beq.n	80035a2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d135      	bne.n	800360e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a2:	4b78      	ldr	r3, [pc, #480]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4013      	ands	r3, r2
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x162>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e256      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ba:	4b72      	ldr	r3, [pc, #456]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4a74      	ldr	r2, [pc, #464]	; (8003790 <HAL_RCC_OscConfig+0x338>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	021a      	lsls	r2, r3, #8
 80035ca:	4b6e      	ldr	r3, [pc, #440]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d112      	bne.n	80035fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035d6:	4b6b      	ldr	r3, [pc, #428]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x33c>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	4b67      	ldr	r3, [pc, #412]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80035ea:	4b66      	ldr	r3, [pc, #408]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0adb      	lsrs	r3, r3, #11
 80035f0:	2207      	movs	r2, #7
 80035f2:	4013      	ands	r3, r2
 80035f4:	4a68      	ldr	r2, [pc, #416]	; (8003798 <HAL_RCC_OscConfig+0x340>)
 80035f6:	40da      	lsrs	r2, r3
 80035f8:	4b68      	ldr	r3, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x344>)
 80035fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035fc:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <HAL_RCC_OscConfig+0x348>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0018      	movs	r0, r3
 8003602:	f7fd ffcd 	bl	80015a0 <HAL_InitTick>
 8003606:	1e03      	subs	r3, r0, #0
 8003608:	d051      	beq.n	80036ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e22c      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d030      	beq.n	8003678 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003616:	4b5b      	ldr	r3, [pc, #364]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a5e      	ldr	r2, [pc, #376]	; (8003794 <HAL_RCC_OscConfig+0x33c>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	4b57      	ldr	r3, [pc, #348]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800362a:	4b56      	ldr	r3, [pc, #344]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b55      	ldr	r3, [pc, #340]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	0049      	lsls	r1, r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe f80e 	bl	8001658 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003642:	f7fe f809 	bl	8001658 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e209      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003654:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4013      	ands	r3, r2
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b48      	ldr	r3, [pc, #288]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a4a      	ldr	r2, [pc, #296]	; (8003790 <HAL_RCC_OscConfig+0x338>)
 8003666:	4013      	ands	r3, r2
 8003668:	0019      	movs	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	4b44      	ldr	r3, [pc, #272]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	e01b      	b.n	80036b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003678:	4b42      	ldr	r3, [pc, #264]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b41      	ldr	r3, [pc, #260]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800367e:	4949      	ldr	r1, [pc, #292]	; (80037a4 <HAL_RCC_OscConfig+0x34c>)
 8003680:	400a      	ands	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd ffe8 	bl	8001658 <HAL_GetTick>
 8003688:	0003      	movs	r3, r0
 800368a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368e:	f7fd ffe3 	bl	8001658 <HAL_GetTick>
 8003692:	0002      	movs	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1e3      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a0:	4b38      	ldr	r3, [pc, #224]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4013      	ands	r3, r2
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x236>
 80036ac:	e000      	b.n	80036b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2208      	movs	r2, #8
 80036b6:	4013      	ands	r3, r2
 80036b8:	d047      	beq.n	800374a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036ba:	4b32      	ldr	r3, [pc, #200]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2238      	movs	r2, #56	; 0x38
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b18      	cmp	r3, #24
 80036c4:	d10a      	bne.n	80036dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80036c6:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80036c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ca:	2202      	movs	r2, #2
 80036cc:	4013      	ands	r3, r2
 80036ce:	d03c      	beq.n	800374a <HAL_RCC_OscConfig+0x2f2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d138      	bne.n	800374a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e1c5      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d019      	beq.n	8003718 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80036e4:	4b27      	ldr	r3, [pc, #156]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80036e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036e8:	4b26      	ldr	r3, [pc, #152]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 80036ea:	2101      	movs	r1, #1
 80036ec:	430a      	orrs	r2, r1
 80036ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fd ffb2 	bl	8001658 <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fa:	f7fd ffad 	bl	8001658 <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e1ad      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	2202      	movs	r2, #2
 8003712:	4013      	ands	r3, r2
 8003714:	d0f1      	beq.n	80036fa <HAL_RCC_OscConfig+0x2a2>
 8003716:	e018      	b.n	800374a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800371a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800371e:	2101      	movs	r1, #1
 8003720:	438a      	bics	r2, r1
 8003722:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fd ff98 	bl	8001658 <HAL_GetTick>
 8003728:	0003      	movs	r3, r0
 800372a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372e:	f7fd ff93 	bl	8001658 <HAL_GetTick>
 8003732:	0002      	movs	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e193      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	2202      	movs	r2, #2
 8003746:	4013      	ands	r3, r2
 8003748:	d1f1      	bne.n	800372e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2204      	movs	r2, #4
 8003750:	4013      	ands	r3, r2
 8003752:	d100      	bne.n	8003756 <HAL_RCC_OscConfig+0x2fe>
 8003754:	e0c6      	b.n	80038e4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	231f      	movs	r3, #31
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2238      	movs	r2, #56	; 0x38
 8003764:	4013      	ands	r3, r2
 8003766:	2b20      	cmp	r3, #32
 8003768:	d11e      	bne.n	80037a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCC_OscConfig+0x32c>)
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	2202      	movs	r2, #2
 8003770:	4013      	ands	r3, r2
 8003772:	d100      	bne.n	8003776 <HAL_RCC_OscConfig+0x31e>
 8003774:	e0b6      	b.n	80038e4 <HAL_RCC_OscConfig+0x48c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d000      	beq.n	8003780 <HAL_RCC_OscConfig+0x328>
 800377e:	e0b1      	b.n	80038e4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e171      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
 8003784:	40021000 	.word	0x40021000
 8003788:	fffeffff 	.word	0xfffeffff
 800378c:	fffbffff 	.word	0xfffbffff
 8003790:	ffff80ff 	.word	0xffff80ff
 8003794:	ffffc7ff 	.word	0xffffc7ff
 8003798:	00f42400 	.word	0x00f42400
 800379c:	20000000 	.word	0x20000000
 80037a0:	20000004 	.word	0x20000004
 80037a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037a8:	4bb1      	ldr	r3, [pc, #708]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80037aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	055b      	lsls	r3, r3, #21
 80037b0:	4013      	ands	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_OscConfig+0x360>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x362>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d011      	beq.n	80037e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	4bac      	ldr	r3, [pc, #688]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80037c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c2:	4bab      	ldr	r3, [pc, #684]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	0549      	lsls	r1, r1, #21
 80037c8:	430a      	orrs	r2, r1
 80037ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80037cc:	4ba8      	ldr	r3, [pc, #672]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80037ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037d0:	2380      	movs	r3, #128	; 0x80
 80037d2:	055b      	lsls	r3, r3, #21
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80037da:	231f      	movs	r3, #31
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e2:	4ba4      	ldr	r3, [pc, #656]	; (8003a74 <HAL_RCC_OscConfig+0x61c>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4013      	ands	r3, r2
 80037ec:	d11a      	bne.n	8003824 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ee:	4ba1      	ldr	r3, [pc, #644]	; (8003a74 <HAL_RCC_OscConfig+0x61c>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4ba0      	ldr	r3, [pc, #640]	; (8003a74 <HAL_RCC_OscConfig+0x61c>)
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	0049      	lsls	r1, r1, #1
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80037fc:	f7fd ff2c 	bl	8001658 <HAL_GetTick>
 8003800:	0003      	movs	r3, r0
 8003802:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003806:	f7fd ff27 	bl	8001658 <HAL_GetTick>
 800380a:	0002      	movs	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e127      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003818:	4b96      	ldr	r3, [pc, #600]	; (8003a74 <HAL_RCC_OscConfig+0x61c>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4013      	ands	r3, r2
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x3e2>
 800382c:	4b90      	ldr	r3, [pc, #576]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800382e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003830:	4b8f      	ldr	r3, [pc, #572]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003832:	2101      	movs	r1, #1
 8003834:	430a      	orrs	r2, r1
 8003836:	65da      	str	r2, [r3, #92]	; 0x5c
 8003838:	e01c      	b.n	8003874 <HAL_RCC_OscConfig+0x41c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b05      	cmp	r3, #5
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x404>
 8003842:	4b8b      	ldr	r3, [pc, #556]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003844:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003846:	4b8a      	ldr	r3, [pc, #552]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003848:	2104      	movs	r1, #4
 800384a:	430a      	orrs	r2, r1
 800384c:	65da      	str	r2, [r3, #92]	; 0x5c
 800384e:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003850:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003852:	4b87      	ldr	r3, [pc, #540]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003854:	2101      	movs	r1, #1
 8003856:	430a      	orrs	r2, r1
 8003858:	65da      	str	r2, [r3, #92]	; 0x5c
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0x41c>
 800385c:	4b84      	ldr	r3, [pc, #528]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800385e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003860:	4b83      	ldr	r3, [pc, #524]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003862:	2101      	movs	r1, #1
 8003864:	438a      	bics	r2, r1
 8003866:	65da      	str	r2, [r3, #92]	; 0x5c
 8003868:	4b81      	ldr	r3, [pc, #516]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800386a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800386c:	4b80      	ldr	r3, [pc, #512]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800386e:	2104      	movs	r1, #4
 8003870:	438a      	bics	r2, r1
 8003872:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d014      	beq.n	80038a6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd feec 	bl	8001658 <HAL_GetTick>
 8003880:	0003      	movs	r3, r0
 8003882:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003884:	e009      	b.n	800389a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fd fee7 	bl	8001658 <HAL_GetTick>
 800388a:	0002      	movs	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	4a79      	ldr	r2, [pc, #484]	; (8003a78 <HAL_RCC_OscConfig+0x620>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0e6      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389a:	4b75      	ldr	r3, [pc, #468]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	2202      	movs	r2, #2
 80038a0:	4013      	ands	r3, r2
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x42e>
 80038a4:	e013      	b.n	80038ce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7fd fed7 	bl	8001658 <HAL_GetTick>
 80038aa:	0003      	movs	r3, r0
 80038ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ae:	e009      	b.n	80038c4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fd fed2 	bl	8001658 <HAL_GetTick>
 80038b4:	0002      	movs	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	4a6f      	ldr	r2, [pc, #444]	; (8003a78 <HAL_RCC_OscConfig+0x620>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0d1      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c4:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	2202      	movs	r2, #2
 80038ca:	4013      	ands	r3, r2
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80038ce:	231f      	movs	r3, #31
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d105      	bne.n	80038e4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80038d8:	4b65      	ldr	r3, [pc, #404]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80038da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038dc:	4b64      	ldr	r3, [pc, #400]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80038de:	4967      	ldr	r1, [pc, #412]	; (8003a7c <HAL_RCC_OscConfig+0x624>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d100      	bne.n	80038ee <HAL_RCC_OscConfig+0x496>
 80038ec:	e0bb      	b.n	8003a66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ee:	4b60      	ldr	r3, [pc, #384]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2238      	movs	r2, #56	; 0x38
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d100      	bne.n	80038fc <HAL_RCC_OscConfig+0x4a4>
 80038fa:	e07b      	b.n	80039f4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d156      	bne.n	80039b2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003904:	4b5a      	ldr	r3, [pc, #360]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800390a:	495d      	ldr	r1, [pc, #372]	; (8003a80 <HAL_RCC_OscConfig+0x628>)
 800390c:	400a      	ands	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fea2 	bl	8001658 <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391a:	f7fd fe9d 	bl	8001658 <HAL_GetTick>
 800391e:	0002      	movs	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e09d      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392c:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	049b      	lsls	r3, r3, #18
 8003934:	4013      	ands	r3, r2
 8003936:	d1f0      	bne.n	800391a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003938:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4a51      	ldr	r2, [pc, #324]	; (8003a84 <HAL_RCC_OscConfig+0x62c>)
 800393e:	4013      	ands	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1a      	ldr	r2, [r3, #32]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	431a      	orrs	r2, r3
 8003966:	4b42      	ldr	r3, [pc, #264]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003968:	430a      	orrs	r2, r1
 800396a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800396c:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b3f      	ldr	r3, [pc, #252]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003972:	2180      	movs	r1, #128	; 0x80
 8003974:	0449      	lsls	r1, r1, #17
 8003976:	430a      	orrs	r2, r1
 8003978:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800397a:	4b3d      	ldr	r3, [pc, #244]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	4b3c      	ldr	r3, [pc, #240]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	0549      	lsls	r1, r1, #21
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fd fe66 	bl	8001658 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fd fe61 	bl	8001658 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e061      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a4:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	049b      	lsls	r3, r3, #18
 80039ac:	4013      	ands	r3, r2
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x53a>
 80039b0:	e059      	b.n	8003a66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039b8:	4931      	ldr	r1, [pc, #196]	; (8003a80 <HAL_RCC_OscConfig+0x628>)
 80039ba:	400a      	ands	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fd fe4b 	bl	8001658 <HAL_GetTick>
 80039c2:	0003      	movs	r3, r0
 80039c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fd fe46 	bl	8001658 <HAL_GetTick>
 80039cc:	0002      	movs	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e046      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	049b      	lsls	r3, r3, #18
 80039e2:	4013      	ands	r3, r2
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 80039ec:	4926      	ldr	r1, [pc, #152]	; (8003a88 <HAL_RCC_OscConfig+0x630>)
 80039ee:	400a      	ands	r2, r1
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	e038      	b.n	8003a66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e033      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x618>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2203      	movs	r2, #3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d126      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2270      	movs	r2, #112	; 0x70
 8003a18:	401a      	ands	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d11f      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	23fe      	movs	r3, #254	; 0xfe
 8003a26:	01db      	lsls	r3, r3, #7
 8003a28:	401a      	ands	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d116      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	23f8      	movs	r3, #248	; 0xf8
 8003a38:	039b      	lsls	r3, r3, #14
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d10e      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	23e0      	movs	r3, #224	; 0xe0
 8003a48:	051b      	lsls	r3, r3, #20
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	0f5b      	lsrs	r3, r3, #29
 8003a58:	075a      	lsls	r2, r3, #29
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b008      	add	sp, #32
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40007000 	.word	0x40007000
 8003a78:	00001388 	.word	0x00001388
 8003a7c:	efffffff 	.word	0xefffffff
 8003a80:	feffffff 	.word	0xfeffffff
 8003a84:	11c1808c 	.word	0x11c1808c
 8003a88:	eefefffc 	.word	0xeefefffc

08003a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0e9      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b76      	ldr	r3, [pc, #472]	; (8003c7c <HAL_RCC_ClockConfig+0x1f0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d91e      	bls.n	8003aec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b73      	ldr	r3, [pc, #460]	; (8003c7c <HAL_RCC_ClockConfig+0x1f0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2207      	movs	r2, #7
 8003ab4:	4393      	bics	r3, r2
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	4b70      	ldr	r3, [pc, #448]	; (8003c7c <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ac0:	f7fd fdca 	bl	8001658 <HAL_GetTick>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ac8:	e009      	b.n	8003ade <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aca:	f7fd fdc5 	bl	8001658 <HAL_GetTick>
 8003ace:	0002      	movs	r2, r0
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <HAL_RCC_ClockConfig+0x1f4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0ca      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ade:	4b67      	ldr	r3, [pc, #412]	; (8003c7c <HAL_RCC_ClockConfig+0x1f0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2207      	movs	r2, #7
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1ee      	bne.n	8003aca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2202      	movs	r2, #2
 8003af2:	4013      	ands	r3, r2
 8003af4:	d015      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2204      	movs	r2, #4
 8003afc:	4013      	ands	r3, r2
 8003afe:	d006      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b00:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	4b5f      	ldr	r3, [pc, #380]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b06:	21e0      	movs	r1, #224	; 0xe0
 8003b08:	01c9      	lsls	r1, r1, #7
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0e:	4b5d      	ldr	r3, [pc, #372]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	4a5d      	ldr	r2, [pc, #372]	; (8003c88 <HAL_RCC_ClockConfig+0x1fc>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2201      	movs	r2, #1
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d057      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d107      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	029b      	lsls	r3, r3, #10
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d12b      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e097      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4c:	4b4d      	ldr	r3, [pc, #308]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	049b      	lsls	r3, r3, #18
 8003b54:	4013      	ands	r3, r2
 8003b56:	d11f      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e08b      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b64:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d113      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e07f      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b7c:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b80:	2202      	movs	r2, #2
 8003b82:	4013      	ands	r3, r2
 8003b84:	d108      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e074      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	4b3e      	ldr	r3, [pc, #248]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	2202      	movs	r2, #2
 8003b90:	4013      	ands	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e06d      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b98:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2207      	movs	r2, #7
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bac:	f7fd fd54 	bl	8001658 <HAL_GetTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb4:	e009      	b.n	8003bca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb6:	f7fd fd4f 	bl	8001658 <HAL_GetTick>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	4a2f      	ldr	r2, [pc, #188]	; (8003c80 <HAL_RCC_ClockConfig+0x1f4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e054      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2238      	movs	r2, #56	; 0x38
 8003bd0:	401a      	ands	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d1ec      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2207      	movs	r2, #7
 8003be2:	4013      	ands	r3, r2
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d21e      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <HAL_RCC_ClockConfig+0x1f0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2207      	movs	r2, #7
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <HAL_RCC_ClockConfig+0x1f0>)
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fd2c 	bl	8001658 <HAL_GetTick>
 8003c00:	0003      	movs	r3, r0
 8003c02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c04:	e009      	b.n	8003c1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c06:	f7fd fd27 	bl	8001658 <HAL_GetTick>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <HAL_RCC_ClockConfig+0x1f4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e02c      	b.n	8003c74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_RCC_ClockConfig+0x1f0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2207      	movs	r2, #7
 8003c20:	4013      	ands	r3, r2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d1ee      	bne.n	8003c06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <HAL_RCC_ClockConfig+0x200>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c46:	f000 f829 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c4a:	0001      	movs	r1, r0
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_RCC_ClockConfig+0x1f8>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	220f      	movs	r2, #15
 8003c54:	401a      	ands	r2, r3
 8003c56:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <HAL_RCC_ClockConfig+0x204>)
 8003c58:	0092      	lsls	r2, r2, #2
 8003c5a:	58d3      	ldr	r3, [r2, r3]
 8003c5c:	221f      	movs	r2, #31
 8003c5e:	4013      	ands	r3, r2
 8003c60:	000a      	movs	r2, r1
 8003c62:	40da      	lsrs	r2, r3
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_ClockConfig+0x208>)
 8003c66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_ClockConfig+0x20c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f7fd fc97 	bl	80015a0 <HAL_InitTick>
 8003c72:	0003      	movs	r3, r0
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b004      	add	sp, #16
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40022000 	.word	0x40022000
 8003c80:	00001388 	.word	0x00001388
 8003c84:	40021000 	.word	0x40021000
 8003c88:	fffff0ff 	.word	0xfffff0ff
 8003c8c:	ffff8fff 	.word	0xffff8fff
 8003c90:	080071bc 	.word	0x080071bc
 8003c94:	20000000 	.word	0x20000000
 8003c98:	20000004 	.word	0x20000004

08003c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ca2:	4b3c      	ldr	r3, [pc, #240]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2238      	movs	r2, #56	; 0x38
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d10f      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003cac:	4b39      	ldr	r3, [pc, #228]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0adb      	lsrs	r3, r3, #11
 8003cb2:	2207      	movs	r2, #7
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	0013      	movs	r3, r2
 8003cbc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	4835      	ldr	r0, [pc, #212]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cc2:	f7fc fa31 	bl	8000128 <__udivsi3>
 8003cc6:	0003      	movs	r3, r0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	e05d      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2238      	movs	r2, #56	; 0x38
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d102      	bne.n	8003cde <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cd8:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x100>)
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	e054      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cde:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2238      	movs	r2, #56	; 0x38
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d138      	bne.n	8003d5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003cea:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2203      	movs	r2, #3
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf4:	4b27      	ldr	r3, [pc, #156]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	2207      	movs	r2, #7
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d10d      	bne.n	8003d24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4824      	ldr	r0, [pc, #144]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x100>)
 8003d0c:	f7fc fa0c 	bl	8000128 <__udivsi3>
 8003d10:	0003      	movs	r3, r0
 8003d12:	0019      	movs	r1, r3
 8003d14:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	227f      	movs	r2, #127	; 0x7f
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	434b      	muls	r3, r1
 8003d20:	617b      	str	r3, [r7, #20]
        break;
 8003d22:	e00d      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	481c      	ldr	r0, [pc, #112]	; (8003d98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d28:	f7fc f9fe 	bl	8000128 <__udivsi3>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	0019      	movs	r1, r3
 8003d30:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	227f      	movs	r2, #127	; 0x7f
 8003d38:	4013      	ands	r3, r2
 8003d3a:	434b      	muls	r3, r1
 8003d3c:	617b      	str	r3, [r7, #20]
        break;
 8003d3e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d40:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0f5b      	lsrs	r3, r3, #29
 8003d46:	2207      	movs	r2, #7
 8003d48:	4013      	ands	r3, r2
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	6978      	ldr	r0, [r7, #20]
 8003d52:	f7fc f9e9 	bl	8000128 <__udivsi3>
 8003d56:	0003      	movs	r3, r0
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	e015      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2238      	movs	r2, #56	; 0x38
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d103      	bne.n	8003d70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2238      	movs	r2, #56	; 0x38
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b18      	cmp	r3, #24
 8003d7a:	d103      	bne.n	8003d84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003d7c:	23fa      	movs	r3, #250	; 0xfa
 8003d7e:	01db      	lsls	r3, r3, #7
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	e001      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d88:	693b      	ldr	r3, [r7, #16]
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b006      	add	sp, #24
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	40021000 	.word	0x40021000
 8003d98:	00f42400 	.word	0x00f42400
 8003d9c:	007a1200 	.word	0x007a1200

08003da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	20000000 	.word	0x20000000

08003db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db4:	b5b0      	push	{r4, r5, r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003db8:	f7ff fff2 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dbc:	0004      	movs	r4, r0
 8003dbe:	f7ff fb3f 	bl	8003440 <LL_RCC_GetAPB1Prescaler>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	0b1a      	lsrs	r2, r3, #12
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dc8:	0092      	lsls	r2, r2, #2
 8003dca:	58d3      	ldr	r3, [r2, r3]
 8003dcc:	221f      	movs	r2, #31
 8003dce:	4013      	ands	r3, r2
 8003dd0:	40dc      	lsrs	r4, r3
 8003dd2:	0023      	movs	r3, r4
}
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	080071fc 	.word	0x080071fc

08003de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003de8:	2313      	movs	r3, #19
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003df0:	2312      	movs	r3, #18
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	4013      	ands	r3, r2
 8003e02:	d100      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003e04:	e0a3      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e06:	2011      	movs	r0, #17
 8003e08:	183b      	adds	r3, r7, r0
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0e:	4bc3      	ldr	r3, [pc, #780]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	055b      	lsls	r3, r3, #21
 8003e16:	4013      	ands	r3, r2
 8003e18:	d110      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	4bc0      	ldr	r3, [pc, #768]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e1e:	4bbf      	ldr	r3, [pc, #764]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	0549      	lsls	r1, r1, #21
 8003e24:	430a      	orrs	r2, r1
 8003e26:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e28:	4bbc      	ldr	r3, [pc, #752]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	055b      	lsls	r3, r3, #21
 8003e30:	4013      	ands	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e36:	183b      	adds	r3, r7, r0
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e3c:	4bb8      	ldr	r3, [pc, #736]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4bb7      	ldr	r3, [pc, #732]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e42:	2180      	movs	r1, #128	; 0x80
 8003e44:	0049      	lsls	r1, r1, #1
 8003e46:	430a      	orrs	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e4a:	f7fd fc05 	bl	8001658 <HAL_GetTick>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e52:	e00b      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e54:	f7fd fc00 	bl	8001658 <HAL_GetTick>
 8003e58:	0002      	movs	r2, r0
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d904      	bls.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003e62:	2313      	movs	r3, #19
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2203      	movs	r2, #3
 8003e68:	701a      	strb	r2, [r3, #0]
        break;
 8003e6a:	e005      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e6c:	4bac      	ldr	r3, [pc, #688]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4013      	ands	r3, r2
 8003e76:	d0ed      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003e78:	2313      	movs	r3, #19
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d154      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e82:	4ba6      	ldr	r3, [pc, #664]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e86:	23c0      	movs	r3, #192	; 0xc0
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d019      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d014      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e9e:	4b9f      	ldr	r3, [pc, #636]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	4aa0      	ldr	r2, [pc, #640]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ea8:	4b9c      	ldr	r3, [pc, #624]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eac:	4b9b      	ldr	r3, [pc, #620]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0249      	lsls	r1, r1, #9
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb6:	4b99      	ldr	r3, [pc, #612]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003eb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eba:	4b98      	ldr	r3, [pc, #608]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ebc:	499a      	ldr	r1, [pc, #616]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ec2:	4b96      	ldr	r3, [pc, #600]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d016      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd fbc2 	bl	8001658 <HAL_GetTick>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed8:	e00c      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fd fbbd 	bl	8001658 <HAL_GetTick>
 8003ede:	0002      	movs	r2, r0
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	4a91      	ldr	r2, [pc, #580]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d904      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003eea:	2313      	movs	r3, #19
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	2203      	movs	r2, #3
 8003ef0:	701a      	strb	r2, [r3, #0]
            break;
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef4:	4b89      	ldr	r3, [pc, #548]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	2202      	movs	r2, #2
 8003efa:	4013      	ands	r3, r2
 8003efc:	d0ed      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003efe:	2313      	movs	r3, #19
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f08:	4b84      	ldr	r3, [pc, #528]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	4a85      	ldr	r2, [pc, #532]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f16:	4b81      	ldr	r3, [pc, #516]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f1c:	e00c      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f1e:	2312      	movs	r3, #18
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	2213      	movs	r2, #19
 8003f24:	18ba      	adds	r2, r7, r2
 8003f26:	7812      	ldrb	r2, [r2, #0]
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e005      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	2312      	movs	r3, #18
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	2213      	movs	r2, #19
 8003f32:	18ba      	adds	r2, r7, r2
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f38:	2311      	movs	r3, #17
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d105      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f42:	4b76      	ldr	r3, [pc, #472]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f46:	4b75      	ldr	r3, [pc, #468]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f48:	4979      	ldr	r1, [pc, #484]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2201      	movs	r2, #1
 8003f54:	4013      	ands	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f58:	4b70      	ldr	r3, [pc, #448]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	4393      	bics	r3, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	4b6d      	ldr	r3, [pc, #436]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2202      	movs	r2, #2
 8003f72:	4013      	ands	r3, r2
 8003f74:	d009      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f76:	4b69      	ldr	r3, [pc, #420]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	220c      	movs	r2, #12
 8003f7c:	4393      	bics	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	4b65      	ldr	r3, [pc, #404]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f86:	430a      	orrs	r2, r1
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	4013      	ands	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f94:	4b61      	ldr	r3, [pc, #388]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	4a66      	ldr	r2, [pc, #408]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	4b5e      	ldr	r3, [pc, #376]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fb4:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	4a5f      	ldr	r2, [pc, #380]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	4b56      	ldr	r3, [pc, #344]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd4:	4b51      	ldr	r3, [pc, #324]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd8:	4a58      	ldr	r2, [pc, #352]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	0019      	movs	r1, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	4b4e      	ldr	r3, [pc, #312]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2220      	movs	r2, #32
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff2:	4b4a      	ldr	r3, [pc, #296]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	4a52      	ldr	r2, [pc, #328]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	4b46      	ldr	r3, [pc, #280]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004002:	430a      	orrs	r2, r1
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	01db      	lsls	r3, r3, #7
 800400e:	4013      	ands	r3, r2
 8004010:	d015      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004012:	4b42      	ldr	r3, [pc, #264]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	0899      	lsrs	r1, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	4b3f      	ldr	r3, [pc, #252]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004020:	430a      	orrs	r2, r1
 8004022:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	05db      	lsls	r3, r3, #23
 800402c:	429a      	cmp	r2, r3
 800402e:	d106      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004030:	4b3a      	ldr	r3, [pc, #232]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	4b39      	ldr	r3, [pc, #228]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	0249      	lsls	r1, r1, #9
 800403a:	430a      	orrs	r2, r1
 800403c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	031b      	lsls	r3, r3, #12
 8004046:	4013      	ands	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800404a:	4b34      	ldr	r3, [pc, #208]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	4393      	bics	r3, r2
 8004052:	0019      	movs	r1, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004058:	4b30      	ldr	r3, [pc, #192]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800405a:	430a      	orrs	r2, r1
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	039b      	lsls	r3, r3, #14
 8004066:	4013      	ands	r3, r2
 8004068:	d016      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800406a:	4b2c      	ldr	r3, [pc, #176]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	4a35      	ldr	r2, [pc, #212]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004070:	4013      	ands	r3, r2
 8004072:	0019      	movs	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004078:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800407a:	430a      	orrs	r2, r1
 800407c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	03db      	lsls	r3, r3, #15
 8004086:	429a      	cmp	r2, r3
 8004088:	d106      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	4b23      	ldr	r3, [pc, #140]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004090:	2180      	movs	r1, #128	; 0x80
 8004092:	0449      	lsls	r1, r1, #17
 8004094:	430a      	orrs	r2, r1
 8004096:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	03db      	lsls	r3, r3, #15
 80040a0:	4013      	ands	r3, r2
 80040a2:	d016      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	4a27      	ldr	r2, [pc, #156]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	0019      	movs	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b2:	4b1a      	ldr	r3, [pc, #104]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040b4:	430a      	orrs	r2, r1
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	045b      	lsls	r3, r3, #17
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d106      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80040c4:	4b15      	ldr	r3, [pc, #84]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ca:	2180      	movs	r1, #128	; 0x80
 80040cc:	0449      	lsls	r1, r1, #17
 80040ce:	430a      	orrs	r2, r1
 80040d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	4013      	ands	r3, r2
 80040dc:	d016      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	4a1a      	ldr	r2, [pc, #104]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80040ee:	430a      	orrs	r2, r1
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	01db      	lsls	r3, r3, #7
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d106      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	0249      	lsls	r1, r1, #9
 8004108:	430a      	orrs	r2, r1
 800410a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800410c:	2312      	movs	r3, #18
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	781b      	ldrb	r3, [r3, #0]
}
 8004112:	0018      	movs	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	b006      	add	sp, #24
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	40021000 	.word	0x40021000
 8004120:	40007000 	.word	0x40007000
 8004124:	fffffcff 	.word	0xfffffcff
 8004128:	fffeffff 	.word	0xfffeffff
 800412c:	00001388 	.word	0x00001388
 8004130:	efffffff 	.word	0xefffffff
 8004134:	fffff3ff 	.word	0xfffff3ff
 8004138:	fff3ffff 	.word	0xfff3ffff
 800413c:	ffcfffff 	.word	0xffcfffff
 8004140:	ffffcfff 	.word	0xffffcfff
 8004144:	ffbfffff 	.word	0xffbfffff
 8004148:	feffffff 	.word	0xfeffffff
 800414c:	ffff3fff 	.word	0xffff3fff

08004150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e04a      	b.n	80041f8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	223d      	movs	r2, #61	; 0x3d
 8004166:	5c9b      	ldrb	r3, [r3, r2]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	223c      	movs	r2, #60	; 0x3c
 8004172:	2100      	movs	r1, #0
 8004174:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0018      	movs	r0, r3
 800417a:	f7fd f843 	bl	8001204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	223d      	movs	r2, #61	; 0x3d
 8004182:	2102      	movs	r1, #2
 8004184:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	0019      	movs	r1, r3
 8004190:	0010      	movs	r0, r2
 8004192:	f000 fcd9 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2248      	movs	r2, #72	; 0x48
 800419a:	2101      	movs	r1, #1
 800419c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	223e      	movs	r2, #62	; 0x3e
 80041a2:	2101      	movs	r1, #1
 80041a4:	5499      	strb	r1, [r3, r2]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	223f      	movs	r2, #63	; 0x3f
 80041aa:	2101      	movs	r1, #1
 80041ac:	5499      	strb	r1, [r3, r2]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2240      	movs	r2, #64	; 0x40
 80041b2:	2101      	movs	r1, #1
 80041b4:	5499      	strb	r1, [r3, r2]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2241      	movs	r2, #65	; 0x41
 80041ba:	2101      	movs	r1, #1
 80041bc:	5499      	strb	r1, [r3, r2]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2242      	movs	r2, #66	; 0x42
 80041c2:	2101      	movs	r1, #1
 80041c4:	5499      	strb	r1, [r3, r2]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2243      	movs	r2, #67	; 0x43
 80041ca:	2101      	movs	r1, #1
 80041cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2244      	movs	r2, #68	; 0x44
 80041d2:	2101      	movs	r1, #1
 80041d4:	5499      	strb	r1, [r3, r2]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2245      	movs	r2, #69	; 0x45
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2246      	movs	r2, #70	; 0x46
 80041e2:	2101      	movs	r1, #1
 80041e4:	5499      	strb	r1, [r3, r2]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2247      	movs	r2, #71	; 0x47
 80041ea:	2101      	movs	r1, #1
 80041ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	223d      	movs	r2, #61	; 0x3d
 80041f2:	2101      	movs	r1, #1
 80041f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b002      	add	sp, #8
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	223d      	movs	r2, #61	; 0x3d
 800420c:	5c9b      	ldrb	r3, [r3, r2]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d001      	beq.n	8004218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e042      	b.n	800429e <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	223d      	movs	r2, #61	; 0x3d
 800421c:	2102      	movs	r1, #2
 800421e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2101      	movs	r1, #1
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <HAL_TIM_Base_Start_IT+0xa8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00f      	beq.n	800425a <HAL_TIM_Base_Start_IT+0x5a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	05db      	lsls	r3, r3, #23
 8004242:	429a      	cmp	r2, r3
 8004244:	d009      	beq.n	800425a <HAL_TIM_Base_Start_IT+0x5a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <HAL_TIM_Base_Start_IT+0xac>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_TIM_Base_Start_IT+0x5a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a16      	ldr	r2, [pc, #88]	; (80042b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d116      	bne.n	8004288 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004262:	4013      	ands	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b06      	cmp	r3, #6
 800426a:	d016      	beq.n	800429a <HAL_TIM_Base_Start_IT+0x9a>
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	2380      	movs	r3, #128	; 0x80
 8004270:	025b      	lsls	r3, r3, #9
 8004272:	429a      	cmp	r2, r3
 8004274:	d011      	beq.n	800429a <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2101      	movs	r1, #1
 8004282:	430a      	orrs	r2, r1
 8004284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004286:	e008      	b.n	800429a <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2101      	movs	r1, #1
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e000      	b.n	800429c <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b004      	add	sp, #16
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	40012c00 	.word	0x40012c00
 80042ac:	40000400 	.word	0x40000400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	00010007 	.word	0x00010007

080042b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e04a      	b.n	8004360 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223d      	movs	r2, #61	; 0x3d
 80042ce:	5c9b      	ldrb	r3, [r3, r2]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	223c      	movs	r2, #60	; 0x3c
 80042da:	2100      	movs	r1, #0
 80042dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 f841 	bl	8004368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	223d      	movs	r2, #61	; 0x3d
 80042ea:	2102      	movs	r1, #2
 80042ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	0019      	movs	r1, r3
 80042f8:	0010      	movs	r0, r2
 80042fa:	f000 fc25 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2248      	movs	r2, #72	; 0x48
 8004302:	2101      	movs	r1, #1
 8004304:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	223e      	movs	r2, #62	; 0x3e
 800430a:	2101      	movs	r1, #1
 800430c:	5499      	strb	r1, [r3, r2]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	223f      	movs	r2, #63	; 0x3f
 8004312:	2101      	movs	r1, #1
 8004314:	5499      	strb	r1, [r3, r2]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2240      	movs	r2, #64	; 0x40
 800431a:	2101      	movs	r1, #1
 800431c:	5499      	strb	r1, [r3, r2]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2241      	movs	r2, #65	; 0x41
 8004322:	2101      	movs	r1, #1
 8004324:	5499      	strb	r1, [r3, r2]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2242      	movs	r2, #66	; 0x42
 800432a:	2101      	movs	r1, #1
 800432c:	5499      	strb	r1, [r3, r2]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2243      	movs	r2, #67	; 0x43
 8004332:	2101      	movs	r1, #1
 8004334:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2244      	movs	r2, #68	; 0x44
 800433a:	2101      	movs	r1, #1
 800433c:	5499      	strb	r1, [r3, r2]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2245      	movs	r2, #69	; 0x45
 8004342:	2101      	movs	r1, #1
 8004344:	5499      	strb	r1, [r3, r2]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2246      	movs	r2, #70	; 0x46
 800434a:	2101      	movs	r1, #1
 800434c:	5499      	strb	r1, [r3, r2]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2247      	movs	r2, #71	; 0x47
 8004352:	2101      	movs	r1, #1
 8004354:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	223d      	movs	r2, #61	; 0x3d
 800435a:	2101      	movs	r1, #1
 800435c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d108      	bne.n	800439a <HAL_TIM_PWM_Start+0x22>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	223e      	movs	r2, #62	; 0x3e
 800438c:	5c9b      	ldrb	r3, [r3, r2]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	1e5a      	subs	r2, r3, #1
 8004394:	4193      	sbcs	r3, r2
 8004396:	b2db      	uxtb	r3, r3
 8004398:	e037      	b.n	800440a <HAL_TIM_PWM_Start+0x92>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b04      	cmp	r3, #4
 800439e:	d108      	bne.n	80043b2 <HAL_TIM_PWM_Start+0x3a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	223f      	movs	r2, #63	; 0x3f
 80043a4:	5c9b      	ldrb	r3, [r3, r2]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	1e5a      	subs	r2, r3, #1
 80043ac:	4193      	sbcs	r3, r2
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	e02b      	b.n	800440a <HAL_TIM_PWM_Start+0x92>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d108      	bne.n	80043ca <HAL_TIM_PWM_Start+0x52>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2240      	movs	r2, #64	; 0x40
 80043bc:	5c9b      	ldrb	r3, [r3, r2]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	1e5a      	subs	r2, r3, #1
 80043c4:	4193      	sbcs	r3, r2
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	e01f      	b.n	800440a <HAL_TIM_PWM_Start+0x92>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d108      	bne.n	80043e2 <HAL_TIM_PWM_Start+0x6a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2241      	movs	r2, #65	; 0x41
 80043d4:	5c9b      	ldrb	r3, [r3, r2]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	4193      	sbcs	r3, r2
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e013      	b.n	800440a <HAL_TIM_PWM_Start+0x92>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d108      	bne.n	80043fa <HAL_TIM_PWM_Start+0x82>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2242      	movs	r2, #66	; 0x42
 80043ec:	5c9b      	ldrb	r3, [r3, r2]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	1e5a      	subs	r2, r3, #1
 80043f4:	4193      	sbcs	r3, r2
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	e007      	b.n	800440a <HAL_TIM_PWM_Start+0x92>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2243      	movs	r2, #67	; 0x43
 80043fe:	5c9b      	ldrb	r3, [r3, r2]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	1e5a      	subs	r2, r3, #1
 8004406:	4193      	sbcs	r3, r2
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e08b      	b.n	800452a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <HAL_TIM_PWM_Start+0xaa>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	223e      	movs	r2, #62	; 0x3e
 800441c:	2102      	movs	r1, #2
 800441e:	5499      	strb	r1, [r3, r2]
 8004420:	e023      	b.n	800446a <HAL_TIM_PWM_Start+0xf2>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d104      	bne.n	8004432 <HAL_TIM_PWM_Start+0xba>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	223f      	movs	r2, #63	; 0x3f
 800442c:	2102      	movs	r1, #2
 800442e:	5499      	strb	r1, [r3, r2]
 8004430:	e01b      	b.n	800446a <HAL_TIM_PWM_Start+0xf2>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d104      	bne.n	8004442 <HAL_TIM_PWM_Start+0xca>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2240      	movs	r2, #64	; 0x40
 800443c:	2102      	movs	r1, #2
 800443e:	5499      	strb	r1, [r3, r2]
 8004440:	e013      	b.n	800446a <HAL_TIM_PWM_Start+0xf2>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0xda>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2241      	movs	r2, #65	; 0x41
 800444c:	2102      	movs	r1, #2
 800444e:	5499      	strb	r1, [r3, r2]
 8004450:	e00b      	b.n	800446a <HAL_TIM_PWM_Start+0xf2>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b10      	cmp	r3, #16
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0xea>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2242      	movs	r2, #66	; 0x42
 800445c:	2102      	movs	r1, #2
 800445e:	5499      	strb	r1, [r3, r2]
 8004460:	e003      	b.n	800446a <HAL_TIM_PWM_Start+0xf2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2243      	movs	r2, #67	; 0x43
 8004466:	2102      	movs	r1, #2
 8004468:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6839      	ldr	r1, [r7, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	0018      	movs	r0, r3
 8004474:	f000 ff56 	bl	8005324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2d      	ldr	r2, [pc, #180]	; (8004534 <HAL_TIM_PWM_Start+0x1bc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00e      	beq.n	80044a0 <HAL_TIM_PWM_Start+0x128>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2c      	ldr	r2, [pc, #176]	; (8004538 <HAL_TIM_PWM_Start+0x1c0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_TIM_PWM_Start+0x128>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2a      	ldr	r2, [pc, #168]	; (800453c <HAL_TIM_PWM_Start+0x1c4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_TIM_PWM_Start+0x128>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a29      	ldr	r2, [pc, #164]	; (8004540 <HAL_TIM_PWM_Start+0x1c8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_PWM_Start+0x12c>
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_TIM_PWM_Start+0x12e>
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2180      	movs	r1, #128	; 0x80
 80044b6:	0209      	lsls	r1, r1, #8
 80044b8:	430a      	orrs	r2, r1
 80044ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_TIM_PWM_Start+0x1bc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00f      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x16e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	05db      	lsls	r3, r3, #23
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d009      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x16e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <HAL_TIM_PWM_Start+0x1cc>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x16e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_TIM_PWM_Start+0x1c0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d116      	bne.n	8004514 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_TIM_PWM_Start+0x1d0>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b06      	cmp	r3, #6
 80044f6:	d016      	beq.n	8004526 <HAL_TIM_PWM_Start+0x1ae>
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	025b      	lsls	r3, r3, #9
 80044fe:	429a      	cmp	r2, r3
 8004500:	d011      	beq.n	8004526 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2101      	movs	r1, #1
 800450e:	430a      	orrs	r2, r1
 8004510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004512:	e008      	b.n	8004526 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2101      	movs	r1, #1
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	e000      	b.n	8004528 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004526:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b004      	add	sp, #16
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800
 8004544:	40000400 	.word	0x40000400
 8004548:	00010007 	.word	0x00010007

0800454c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2202      	movs	r2, #2
 8004568:	4013      	ands	r3, r2
 800456a:	d021      	beq.n	80045b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2202      	movs	r2, #2
 8004570:	4013      	ands	r3, r2
 8004572:	d01d      	beq.n	80045b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2203      	movs	r2, #3
 800457a:	4252      	negs	r2, r2
 800457c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	2203      	movs	r2, #3
 800458c:	4013      	ands	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0018      	movs	r0, r3
 8004594:	f000 fac0 	bl	8004b18 <HAL_TIM_IC_CaptureCallback>
 8004598:	e007      	b.n	80045aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0018      	movs	r0, r3
 800459e:	f000 fab3 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f000 fabf 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2204      	movs	r2, #4
 80045b4:	4013      	ands	r3, r2
 80045b6:	d022      	beq.n	80045fe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2204      	movs	r2, #4
 80045bc:	4013      	ands	r3, r2
 80045be:	d01e      	beq.n	80045fe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2205      	movs	r2, #5
 80045c6:	4252      	negs	r2, r2
 80045c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2202      	movs	r2, #2
 80045ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	23c0      	movs	r3, #192	; 0xc0
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4013      	ands	r3, r2
 80045dc:	d004      	beq.n	80045e8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fa99 	bl	8004b18 <HAL_TIM_IC_CaptureCallback>
 80045e6:	e007      	b.n	80045f8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 fa8c 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 fa98 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2208      	movs	r2, #8
 8004602:	4013      	ands	r3, r2
 8004604:	d021      	beq.n	800464a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2208      	movs	r2, #8
 800460a:	4013      	ands	r3, r2
 800460c:	d01d      	beq.n	800464a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2209      	movs	r2, #9
 8004614:	4252      	negs	r2, r2
 8004616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2204      	movs	r2, #4
 800461c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	2203      	movs	r2, #3
 8004626:	4013      	ands	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0018      	movs	r0, r3
 800462e:	f000 fa73 	bl	8004b18 <HAL_TIM_IC_CaptureCallback>
 8004632:	e007      	b.n	8004644 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	0018      	movs	r0, r3
 8004638:	f000 fa66 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 fa72 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2210      	movs	r2, #16
 800464e:	4013      	ands	r3, r2
 8004650:	d022      	beq.n	8004698 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2210      	movs	r2, #16
 8004656:	4013      	ands	r3, r2
 8004658:	d01e      	beq.n	8004698 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2211      	movs	r2, #17
 8004660:	4252      	negs	r2, r2
 8004662:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2208      	movs	r2, #8
 8004668:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	23c0      	movs	r3, #192	; 0xc0
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4013      	ands	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0018      	movs	r0, r3
 800467c:	f000 fa4c 	bl	8004b18 <HAL_TIM_IC_CaptureCallback>
 8004680:	e007      	b.n	8004692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f000 fa3f 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 fa4b 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2201      	movs	r2, #1
 800469c:	4013      	ands	r3, r2
 800469e:	d00c      	beq.n	80046ba <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	4013      	ands	r3, r2
 80046a6:	d008      	beq.n	80046ba <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2202      	movs	r2, #2
 80046ae:	4252      	negs	r2, r2
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7fc fc9d 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2280      	movs	r2, #128	; 0x80
 80046be:	4013      	ands	r3, r2
 80046c0:	d104      	bne.n	80046cc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	019b      	lsls	r3, r3, #6
 80046c8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046ca:	d00b      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	4013      	ands	r3, r2
 80046d2:	d007      	beq.n	80046e4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1e      	ldr	r2, [pc, #120]	; (8004754 <HAL_TIM_IRQHandler+0x208>)
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 feba 	bl	8005458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	2380      	movs	r3, #128	; 0x80
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4013      	ands	r3, r2
 80046ec:	d00b      	beq.n	8004706 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2280      	movs	r2, #128	; 0x80
 80046f2:	4013      	ands	r3, r2
 80046f4:	d007      	beq.n	8004706 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a17      	ldr	r2, [pc, #92]	; (8004758 <HAL_TIM_IRQHandler+0x20c>)
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0018      	movs	r0, r3
 8004702:	f000 feb1 	bl	8005468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2240      	movs	r2, #64	; 0x40
 800470a:	4013      	ands	r3, r2
 800470c:	d00c      	beq.n	8004728 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2240      	movs	r2, #64	; 0x40
 8004712:	4013      	ands	r3, r2
 8004714:	d008      	beq.n	8004728 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2241      	movs	r2, #65	; 0x41
 800471c:	4252      	negs	r2, r2
 800471e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	0018      	movs	r0, r3
 8004724:	f000 fa08 	bl	8004b38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2220      	movs	r2, #32
 800472c:	4013      	ands	r3, r2
 800472e:	d00c      	beq.n	800474a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	4013      	ands	r3, r2
 8004736:	d008      	beq.n	800474a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2221      	movs	r2, #33	; 0x21
 800473e:	4252      	negs	r2, r2
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 fe7f 	bl	8005448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	46bd      	mov	sp, r7
 800474e:	b004      	add	sp, #16
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	ffffdf7f 	.word	0xffffdf7f
 8004758:	fffffeff 	.word	0xfffffeff

0800475c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004768:	2317      	movs	r3, #23
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	223c      	movs	r2, #60	; 0x3c
 8004774:	5c9b      	ldrb	r3, [r3, r2]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_TIM_PWM_ConfigChannel+0x22>
 800477a:	2302      	movs	r3, #2
 800477c:	e0e5      	b.n	800494a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	223c      	movs	r2, #60	; 0x3c
 8004782:	2101      	movs	r1, #1
 8004784:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b14      	cmp	r3, #20
 800478a:	d900      	bls.n	800478e <HAL_TIM_PWM_ConfigChannel+0x32>
 800478c:	e0d1      	b.n	8004932 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	009a      	lsls	r2, r3, #2
 8004792:	4b70      	ldr	r3, [pc, #448]	; (8004954 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004794:	18d3      	adds	r3, r2, r3
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	0011      	movs	r1, r2
 80047a2:	0018      	movs	r0, r3
 80047a4:	f000 fa5e 	bl	8004c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2108      	movs	r1, #8
 80047b4:	430a      	orrs	r2, r1
 80047b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2104      	movs	r1, #4
 80047c4:	438a      	bics	r2, r1
 80047c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6999      	ldr	r1, [r3, #24]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	619a      	str	r2, [r3, #24]
      break;
 80047da:	e0af      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	0011      	movs	r1, r2
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 fac7 	bl	8004d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2180      	movs	r1, #128	; 0x80
 80047f6:	0109      	lsls	r1, r1, #4
 80047f8:	430a      	orrs	r2, r1
 80047fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4954      	ldr	r1, [pc, #336]	; (8004958 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004808:	400a      	ands	r2, r1
 800480a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6999      	ldr	r1, [r3, #24]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	021a      	lsls	r2, r3, #8
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	619a      	str	r2, [r3, #24]
      break;
 8004820:	e08c      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	0011      	movs	r1, r2
 800482a:	0018      	movs	r0, r3
 800482c:	f000 fb28 	bl	8004e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2108      	movs	r1, #8
 800483c:	430a      	orrs	r2, r1
 800483e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2104      	movs	r1, #4
 800484c:	438a      	bics	r2, r1
 800484e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69d9      	ldr	r1, [r3, #28]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	61da      	str	r2, [r3, #28]
      break;
 8004862:	e06b      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	0011      	movs	r1, r2
 800486c:	0018      	movs	r0, r3
 800486e:	f000 fb8f 	bl	8004f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	0109      	lsls	r1, r1, #4
 8004880:	430a      	orrs	r2, r1
 8004882:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4932      	ldr	r1, [pc, #200]	; (8004958 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004890:	400a      	ands	r2, r1
 8004892:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69d9      	ldr	r1, [r3, #28]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	021a      	lsls	r2, r3, #8
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	61da      	str	r2, [r3, #28]
      break;
 80048a8:	e048      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	0011      	movs	r1, r2
 80048b2:	0018      	movs	r0, r3
 80048b4:	f000 fbd6 	bl	8005064 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2108      	movs	r1, #8
 80048c4:	430a      	orrs	r2, r1
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2104      	movs	r1, #4
 80048d4:	438a      	bics	r2, r1
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048ea:	e027      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68ba      	ldr	r2, [r7, #8]
 80048f2:	0011      	movs	r1, r2
 80048f4:	0018      	movs	r0, r3
 80048f6:	f000 fc15 	bl	8005124 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	0109      	lsls	r1, r1, #4
 8004908:	430a      	orrs	r2, r1
 800490a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4910      	ldr	r1, [pc, #64]	; (8004958 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004918:	400a      	ands	r2, r1
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	021a      	lsls	r2, r3, #8
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004930:	e004      	b.n	800493c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004932:	2317      	movs	r3, #23
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
      break;
 800493a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	223c      	movs	r2, #60	; 0x3c
 8004940:	2100      	movs	r1, #0
 8004942:	5499      	strb	r1, [r3, r2]

  return status;
 8004944:	2317      	movs	r3, #23
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	781b      	ldrb	r3, [r3, #0]
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b006      	add	sp, #24
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	0800721c 	.word	0x0800721c
 8004958:	fffffbff 	.word	0xfffffbff

0800495c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004966:	230f      	movs	r3, #15
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	223c      	movs	r2, #60	; 0x3c
 8004972:	5c9b      	ldrb	r3, [r3, r2]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_TIM_ConfigClockSource+0x20>
 8004978:	2302      	movs	r3, #2
 800497a:	e0bc      	b.n	8004af6 <HAL_TIM_ConfigClockSource+0x19a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	223c      	movs	r2, #60	; 0x3c
 8004980:	2101      	movs	r1, #1
 8004982:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	223d      	movs	r2, #61	; 0x3d
 8004988:	2102      	movs	r1, #2
 800498a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4a5a      	ldr	r2, [pc, #360]	; (8004b00 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004998:	4013      	ands	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4a59      	ldr	r2, [pc, #356]	; (8004b04 <HAL_TIM_ConfigClockSource+0x1a8>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2280      	movs	r2, #128	; 0x80
 80049b2:	0192      	lsls	r2, r2, #6
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d040      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0xde>
 80049b8:	2280      	movs	r2, #128	; 0x80
 80049ba:	0192      	lsls	r2, r2, #6
 80049bc:	4293      	cmp	r3, r2
 80049be:	d900      	bls.n	80049c2 <HAL_TIM_ConfigClockSource+0x66>
 80049c0:	e088      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x178>
 80049c2:	2280      	movs	r2, #128	; 0x80
 80049c4:	0152      	lsls	r2, r2, #5
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d100      	bne.n	80049cc <HAL_TIM_ConfigClockSource+0x70>
 80049ca:	e088      	b.n	8004ade <HAL_TIM_ConfigClockSource+0x182>
 80049cc:	2280      	movs	r2, #128	; 0x80
 80049ce:	0152      	lsls	r2, r2, #5
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d900      	bls.n	80049d6 <HAL_TIM_ConfigClockSource+0x7a>
 80049d4:	e07e      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x178>
 80049d6:	2b70      	cmp	r3, #112	; 0x70
 80049d8:	d018      	beq.n	8004a0c <HAL_TIM_ConfigClockSource+0xb0>
 80049da:	d900      	bls.n	80049de <HAL_TIM_ConfigClockSource+0x82>
 80049dc:	e07a      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x178>
 80049de:	2b60      	cmp	r3, #96	; 0x60
 80049e0:	d04f      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x126>
 80049e2:	d900      	bls.n	80049e6 <HAL_TIM_ConfigClockSource+0x8a>
 80049e4:	e076      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x178>
 80049e6:	2b50      	cmp	r3, #80	; 0x50
 80049e8:	d03b      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0x106>
 80049ea:	d900      	bls.n	80049ee <HAL_TIM_ConfigClockSource+0x92>
 80049ec:	e072      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x178>
 80049ee:	2b40      	cmp	r3, #64	; 0x40
 80049f0:	d057      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x146>
 80049f2:	d900      	bls.n	80049f6 <HAL_TIM_ConfigClockSource+0x9a>
 80049f4:	e06e      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x178>
 80049f6:	2b30      	cmp	r3, #48	; 0x30
 80049f8:	d063      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x166>
 80049fa:	d86b      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x178>
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d060      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x166>
 8004a00:	d868      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x178>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d05d      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x166>
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d05b      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x166>
 8004a0a:	e063      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a1c:	f000 fc62 	bl	80052e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2277      	movs	r2, #119	; 0x77
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	609a      	str	r2, [r3, #8]
      break;
 8004a38:	e052      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a4a:	f000 fc4b 	bl	80052e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2180      	movs	r1, #128	; 0x80
 8004a5a:	01c9      	lsls	r1, r1, #7
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]
      break;
 8004a60:	e03e      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	001a      	movs	r2, r3
 8004a70:	f000 fbbc 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2150      	movs	r1, #80	; 0x50
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f000 fc16 	bl	80052ac <TIM_ITRx_SetConfig>
      break;
 8004a80:	e02e      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8e:	001a      	movs	r2, r3
 8004a90:	f000 fbda 	bl	8005248 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2160      	movs	r1, #96	; 0x60
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f000 fc06 	bl	80052ac <TIM_ITRx_SetConfig>
      break;
 8004aa0:	e01e      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	001a      	movs	r2, r3
 8004ab0:	f000 fb9c 	bl	80051ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2140      	movs	r1, #64	; 0x40
 8004aba:	0018      	movs	r0, r3
 8004abc:	f000 fbf6 	bl	80052ac <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e00e      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	0019      	movs	r1, r3
 8004acc:	0010      	movs	r0, r2
 8004ace:	f000 fbed 	bl	80052ac <TIM_ITRx_SetConfig>
      break;
 8004ad2:	e005      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004ad4:	230f      	movs	r3, #15
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
      break;
 8004adc:	e000      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004ade:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	223d      	movs	r2, #61	; 0x3d
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	223c      	movs	r2, #60	; 0x3c
 8004aec:	2100      	movs	r1, #0
 8004aee:	5499      	strb	r1, [r3, r2]

  return status;
 8004af0:	230f      	movs	r3, #15
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	781b      	ldrb	r3, [r3, #0]
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b004      	add	sp, #16
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	ffceff88 	.word	0xffceff88
 8004b04:	ffff00ff 	.word	0xffff00ff

08004b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b10:	46c0      	nop			; (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b002      	add	sp, #8
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b002      	add	sp, #8
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b002      	add	sp, #8
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a3b      	ldr	r2, [pc, #236]	; (8004c48 <TIM_Base_SetConfig+0x100>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d008      	beq.n	8004b72 <TIM_Base_SetConfig+0x2a>
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	05db      	lsls	r3, r3, #23
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d003      	beq.n	8004b72 <TIM_Base_SetConfig+0x2a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a37      	ldr	r2, [pc, #220]	; (8004c4c <TIM_Base_SetConfig+0x104>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d108      	bne.n	8004b84 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2270      	movs	r2, #112	; 0x70
 8004b76:	4393      	bics	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a30      	ldr	r2, [pc, #192]	; (8004c48 <TIM_Base_SetConfig+0x100>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <TIM_Base_SetConfig+0x76>
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	05db      	lsls	r3, r3, #23
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d013      	beq.n	8004bbe <TIM_Base_SetConfig+0x76>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <TIM_Base_SetConfig+0x104>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00f      	beq.n	8004bbe <TIM_Base_SetConfig+0x76>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2b      	ldr	r2, [pc, #172]	; (8004c50 <TIM_Base_SetConfig+0x108>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00b      	beq.n	8004bbe <TIM_Base_SetConfig+0x76>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <TIM_Base_SetConfig+0x10c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d007      	beq.n	8004bbe <TIM_Base_SetConfig+0x76>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a29      	ldr	r2, [pc, #164]	; (8004c58 <TIM_Base_SetConfig+0x110>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <TIM_Base_SetConfig+0x76>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a28      	ldr	r2, [pc, #160]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d108      	bne.n	8004bd0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4a27      	ldr	r2, [pc, #156]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2280      	movs	r2, #128	; 0x80
 8004bd4:	4393      	bics	r3, r2
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a13      	ldr	r2, [pc, #76]	; (8004c48 <TIM_Base_SetConfig+0x100>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00b      	beq.n	8004c16 <TIM_Base_SetConfig+0xce>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a14      	ldr	r2, [pc, #80]	; (8004c54 <TIM_Base_SetConfig+0x10c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d007      	beq.n	8004c16 <TIM_Base_SetConfig+0xce>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <TIM_Base_SetConfig+0x110>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d003      	beq.n	8004c16 <TIM_Base_SetConfig+0xce>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a12      	ldr	r2, [pc, #72]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d103      	bne.n	8004c1e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	691a      	ldr	r2, [r3, #16]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d106      	bne.n	8004c3e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2201      	movs	r2, #1
 8004c36:	4393      	bics	r3, r2
 8004c38:	001a      	movs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	611a      	str	r2, [r3, #16]
  }
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b004      	add	sp, #16
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40002000 	.word	0x40002000
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800
 8004c60:	fffffcff 	.word	0xfffffcff

08004c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	4393      	bics	r3, r2
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a32      	ldr	r2, [pc, #200]	; (8004d5c <TIM_OC1_SetConfig+0xf8>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	4393      	bics	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2202      	movs	r2, #2
 8004cac:	4393      	bics	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a28      	ldr	r2, [pc, #160]	; (8004d60 <TIM_OC1_SetConfig+0xfc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_OC1_SetConfig+0x76>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a27      	ldr	r2, [pc, #156]	; (8004d64 <TIM_OC1_SetConfig+0x100>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_OC1_SetConfig+0x76>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <TIM_OC1_SetConfig+0x104>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC1_SetConfig+0x76>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a25      	ldr	r2, [pc, #148]	; (8004d6c <TIM_OC1_SetConfig+0x108>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d10c      	bne.n	8004cf4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	4393      	bics	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2204      	movs	r2, #4
 8004cf0:	4393      	bics	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a1a      	ldr	r2, [pc, #104]	; (8004d60 <TIM_OC1_SetConfig+0xfc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <TIM_OC1_SetConfig+0xb0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <TIM_OC1_SetConfig+0x100>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d007      	beq.n	8004d14 <TIM_OC1_SetConfig+0xb0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <TIM_OC1_SetConfig+0x104>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_OC1_SetConfig+0xb0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <TIM_OC1_SetConfig+0x108>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d111      	bne.n	8004d38 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <TIM_OC1_SetConfig+0x10c>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <TIM_OC1_SetConfig+0x110>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b006      	add	sp, #24
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	fffeff8f 	.word	0xfffeff8f
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800
 8004d70:	fffffeff 	.word	0xfffffeff
 8004d74:	fffffdff 	.word	0xfffffdff

08004d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	4393      	bics	r3, r2
 8004d90:	001a      	movs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4a2e      	ldr	r2, [pc, #184]	; (8004e60 <TIM_OC2_SetConfig+0xe8>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <TIM_OC2_SetConfig+0xec>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	4393      	bics	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a24      	ldr	r2, [pc, #144]	; (8004e68 <TIM_OC2_SetConfig+0xf0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10d      	bne.n	8004df6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2280      	movs	r2, #128	; 0x80
 8004dde:	4393      	bics	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2240      	movs	r2, #64	; 0x40
 8004df2:	4393      	bics	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1b      	ldr	r2, [pc, #108]	; (8004e68 <TIM_OC2_SetConfig+0xf0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <TIM_OC2_SetConfig+0x9e>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1a      	ldr	r2, [pc, #104]	; (8004e6c <TIM_OC2_SetConfig+0xf4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <TIM_OC2_SetConfig+0x9e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <TIM_OC2_SetConfig+0xf8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_OC2_SetConfig+0x9e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <TIM_OC2_SetConfig+0xfc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d113      	bne.n	8004e3e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <TIM_OC2_SetConfig+0x100>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <TIM_OC2_SetConfig+0x104>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	621a      	str	r2, [r3, #32]
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b006      	add	sp, #24
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	feff8fff 	.word	0xfeff8fff
 8004e64:	fffffcff 	.word	0xfffffcff
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40014400 	.word	0x40014400
 8004e74:	40014800 	.word	0x40014800
 8004e78:	fffffbff 	.word	0xfffffbff
 8004e7c:	fffff7ff 	.word	0xfffff7ff

08004e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	4a33      	ldr	r2, [pc, #204]	; (8004f64 <TIM_OC3_SetConfig+0xe4>)
 8004e96:	401a      	ands	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a2f      	ldr	r2, [pc, #188]	; (8004f68 <TIM_OC3_SetConfig+0xe8>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	4393      	bics	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <TIM_OC3_SetConfig+0xec>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a25      	ldr	r2, [pc, #148]	; (8004f70 <TIM_OC3_SetConfig+0xf0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d10d      	bne.n	8004efa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4a24      	ldr	r2, [pc, #144]	; (8004f74 <TIM_OC3_SetConfig+0xf4>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	4a20      	ldr	r2, [pc, #128]	; (8004f78 <TIM_OC3_SetConfig+0xf8>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <TIM_OC3_SetConfig+0xf0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_OC3_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <TIM_OC3_SetConfig+0xfc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_OC3_SetConfig+0x9a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <TIM_OC3_SetConfig+0x100>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_OC3_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <TIM_OC3_SetConfig+0x104>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d113      	bne.n	8004f42 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4a1a      	ldr	r2, [pc, #104]	; (8004f88 <TIM_OC3_SetConfig+0x108>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <TIM_OC3_SetConfig+0x10c>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b006      	add	sp, #24
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	fffffeff 	.word	0xfffffeff
 8004f68:	fffeff8f 	.word	0xfffeff8f
 8004f6c:	fffffdff 	.word	0xfffffdff
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	fffff7ff 	.word	0xfffff7ff
 8004f78:	fffffbff 	.word	0xfffffbff
 8004f7c:	40014000 	.word	0x40014000
 8004f80:	40014400 	.word	0x40014400
 8004f84:	40014800 	.word	0x40014800
 8004f88:	ffffefff 	.word	0xffffefff
 8004f8c:	ffffdfff 	.word	0xffffdfff

08004f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	4a26      	ldr	r2, [pc, #152]	; (8005040 <TIM_OC4_SetConfig+0xb0>)
 8004fa6:	401a      	ands	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a22      	ldr	r2, [pc, #136]	; (8005044 <TIM_OC4_SetConfig+0xb4>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a21      	ldr	r2, [pc, #132]	; (8005048 <TIM_OC4_SetConfig+0xb8>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4a1d      	ldr	r2, [pc, #116]	; (800504c <TIM_OC4_SetConfig+0xbc>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	031b      	lsls	r3, r3, #12
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a19      	ldr	r2, [pc, #100]	; (8005050 <TIM_OC4_SetConfig+0xc0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00b      	beq.n	8005008 <TIM_OC4_SetConfig+0x78>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a18      	ldr	r2, [pc, #96]	; (8005054 <TIM_OC4_SetConfig+0xc4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d007      	beq.n	8005008 <TIM_OC4_SetConfig+0x78>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <TIM_OC4_SetConfig+0xc8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_OC4_SetConfig+0x78>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a16      	ldr	r2, [pc, #88]	; (800505c <TIM_OC4_SetConfig+0xcc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d109      	bne.n	800501c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <TIM_OC4_SetConfig+0xd0>)
 800500c:	4013      	ands	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	46bd      	mov	sp, r7
 800503a:	b006      	add	sp, #24
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	ffffefff 	.word	0xffffefff
 8005044:	feff8fff 	.word	0xfeff8fff
 8005048:	fffffcff 	.word	0xfffffcff
 800504c:	ffffdfff 	.word	0xffffdfff
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40014000 	.word	0x40014000
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800
 8005060:	ffffbfff 	.word	0xffffbfff

08005064 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	4a23      	ldr	r2, [pc, #140]	; (8005108 <TIM_OC5_SetConfig+0xa4>)
 800507a:	401a      	ands	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a1f      	ldr	r2, [pc, #124]	; (800510c <TIM_OC5_SetConfig+0xa8>)
 8005090:	4013      	ands	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <TIM_OC5_SetConfig+0xac>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a17      	ldr	r2, [pc, #92]	; (8005114 <TIM_OC5_SetConfig+0xb0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00b      	beq.n	80050d2 <TIM_OC5_SetConfig+0x6e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a16      	ldr	r2, [pc, #88]	; (8005118 <TIM_OC5_SetConfig+0xb4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d007      	beq.n	80050d2 <TIM_OC5_SetConfig+0x6e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a15      	ldr	r2, [pc, #84]	; (800511c <TIM_OC5_SetConfig+0xb8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d003      	beq.n	80050d2 <TIM_OC5_SetConfig+0x6e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a14      	ldr	r2, [pc, #80]	; (8005120 <TIM_OC5_SetConfig+0xbc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d109      	bne.n	80050e6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <TIM_OC5_SetConfig+0xa4>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	621a      	str	r2, [r3, #32]
}
 8005100:	46c0      	nop			; (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	b006      	add	sp, #24
 8005106:	bd80      	pop	{r7, pc}
 8005108:	fffeffff 	.word	0xfffeffff
 800510c:	fffeff8f 	.word	0xfffeff8f
 8005110:	fffdffff 	.word	0xfffdffff
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800

08005124 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	4a24      	ldr	r2, [pc, #144]	; (80051cc <TIM_OC6_SetConfig+0xa8>)
 800513a:	401a      	ands	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a20      	ldr	r2, [pc, #128]	; (80051d0 <TIM_OC6_SetConfig+0xac>)
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <TIM_OC6_SetConfig+0xb0>)
 8005164:	4013      	ands	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	051b      	lsls	r3, r3, #20
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a18      	ldr	r2, [pc, #96]	; (80051d8 <TIM_OC6_SetConfig+0xb4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00b      	beq.n	8005194 <TIM_OC6_SetConfig+0x70>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a17      	ldr	r2, [pc, #92]	; (80051dc <TIM_OC6_SetConfig+0xb8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d007      	beq.n	8005194 <TIM_OC6_SetConfig+0x70>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <TIM_OC6_SetConfig+0xbc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC6_SetConfig+0x70>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <TIM_OC6_SetConfig+0xc0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d109      	bne.n	80051a8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4a14      	ldr	r2, [pc, #80]	; (80051e8 <TIM_OC6_SetConfig+0xc4>)
 8005198:	4013      	ands	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	029b      	lsls	r3, r3, #10
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b006      	add	sp, #24
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	ffefffff 	.word	0xffefffff
 80051d0:	feff8fff 	.word	0xfeff8fff
 80051d4:	ffdfffff 	.word	0xffdfffff
 80051d8:	40012c00 	.word	0x40012c00
 80051dc:	40014000 	.word	0x40014000
 80051e0:	40014400 	.word	0x40014400
 80051e4:	40014800 	.word	0x40014800
 80051e8:	fffbffff 	.word	0xfffbffff

080051ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	2201      	movs	r2, #1
 8005204:	4393      	bics	r3, r2
 8005206:	001a      	movs	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	22f0      	movs	r2, #240	; 0xf0
 8005216:	4393      	bics	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	220a      	movs	r2, #10
 8005228:	4393      	bics	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	621a      	str	r2, [r3, #32]
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b006      	add	sp, #24
 8005246:	bd80      	pop	{r7, pc}

08005248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	2210      	movs	r2, #16
 8005260:	4393      	bics	r3, r2
 8005262:	001a      	movs	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4a0d      	ldr	r2, [pc, #52]	; (80052a8 <TIM_TI2_ConfigInputStage+0x60>)
 8005272:	4013      	ands	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	22a0      	movs	r2, #160	; 0xa0
 8005284:	4393      	bics	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b006      	add	sp, #24
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	ffff0fff 	.word	0xffff0fff

080052ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <TIM_ITRx_SetConfig+0x34>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	2207      	movs	r2, #7
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	609a      	str	r2, [r3, #8]
}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	b004      	add	sp, #16
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	ffcfff8f 	.word	0xffcfff8f

080052e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <TIM_ETR_SetConfig+0x3c>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	431a      	orrs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	b006      	add	sp, #24
 800531e:	bd80      	pop	{r7, pc}
 8005320:	ffff00ff 	.word	0xffff00ff

08005324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	221f      	movs	r2, #31
 8005334:	4013      	ands	r3, r2
 8005336:	2201      	movs	r2, #1
 8005338:	409a      	lsls	r2, r3
 800533a:	0013      	movs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	43d2      	mvns	r2, r2
 8005346:	401a      	ands	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	211f      	movs	r1, #31
 8005354:	400b      	ands	r3, r1
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4099      	lsls	r1, r3
 800535a:	000b      	movs	r3, r1
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	46bd      	mov	sp, r7
 8005366:	b006      	add	sp, #24
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	223c      	movs	r2, #60	; 0x3c
 800537a:	5c9b      	ldrb	r3, [r3, r2]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e055      	b.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	223c      	movs	r2, #60	; 0x3c
 8005388:	2101      	movs	r1, #1
 800538a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	223d      	movs	r2, #61	; 0x3d
 8005390:	2102      	movs	r1, #2
 8005392:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a23      	ldr	r2, [pc, #140]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d108      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a22      	ldr	r2, [pc, #136]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2270      	movs	r2, #112	; 0x70
 80053c4:	4393      	bics	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00f      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	05db      	lsls	r3, r3, #23
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d009      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a12      	ldr	r2, [pc, #72]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a11      	ldr	r2, [pc, #68]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10c      	bne.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2280      	movs	r2, #128	; 0x80
 8005408:	4393      	bics	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	223d      	movs	r2, #61	; 0x3d
 8005422:	2101      	movs	r1, #1
 8005424:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	223c      	movs	r2, #60	; 0x3c
 800542a:	2100      	movs	r1, #0
 800542c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	0018      	movs	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	b004      	add	sp, #16
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40012c00 	.word	0x40012c00
 800543c:	ff0fffff 	.word	0xff0fffff
 8005440:	40000400 	.word	0x40000400
 8005444:	40014000 	.word	0x40014000

08005448 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005450:	46c0      	nop			; (mov r8, r8)
 8005452:	46bd      	mov	sp, r7
 8005454:	b002      	add	sp, #8
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005460:	46c0      	nop			; (mov r8, r8)
 8005462:	46bd      	mov	sp, r7
 8005464:	b002      	add	sp, #8
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005470:	46c0      	nop			; (mov r8, r8)
 8005472:	46bd      	mov	sp, r7
 8005474:	b002      	add	sp, #8
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e046      	b.n	8005518 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2288      	movs	r2, #136	; 0x88
 800548e:	589b      	ldr	r3, [r3, r2]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d107      	bne.n	80054a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2284      	movs	r2, #132	; 0x84
 8005498:	2100      	movs	r1, #0
 800549a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	0018      	movs	r0, r3
 80054a0:	f7fb ff5c 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2288      	movs	r2, #136	; 0x88
 80054a8:	2124      	movs	r1, #36	; 0x24
 80054aa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2101      	movs	r1, #1
 80054b8:	438a      	bics	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 fb8e 	bl	8005be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 f8cc 	bl	800566c <UART_SetConfig>
 80054d4:	0003      	movs	r3, r0
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e01c      	b.n	8005518 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	490d      	ldr	r1, [pc, #52]	; (8005520 <HAL_UART_Init+0xa8>)
 80054ea:	400a      	ands	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	212a      	movs	r1, #42	; 0x2a
 80054fa:	438a      	bics	r2, r1
 80054fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2101      	movs	r1, #1
 800550a:	430a      	orrs	r2, r1
 800550c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0018      	movs	r0, r3
 8005512:	f000 fc1d 	bl	8005d50 <UART_CheckIdleState>
 8005516:	0003      	movs	r3, r0
}
 8005518:	0018      	movs	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	b002      	add	sp, #8
 800551e:	bd80      	pop	{r7, pc}
 8005520:	ffffb7ff 	.word	0xffffb7ff

08005524 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	; 0x28
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	1dbb      	adds	r3, r7, #6
 8005532:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2288      	movs	r2, #136	; 0x88
 8005538:	589b      	ldr	r3, [r3, r2]
 800553a:	2b20      	cmp	r3, #32
 800553c:	d000      	beq.n	8005540 <HAL_UART_Transmit+0x1c>
 800553e:	e090      	b.n	8005662 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_UART_Transmit+0x2a>
 8005546:	1dbb      	adds	r3, r7, #6
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e088      	b.n	8005664 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	015b      	lsls	r3, r3, #5
 800555a:	429a      	cmp	r2, r3
 800555c:	d109      	bne.n	8005572 <HAL_UART_Transmit+0x4e>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d105      	bne.n	8005572 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2201      	movs	r2, #1
 800556a:	4013      	ands	r3, r2
 800556c:	d001      	beq.n	8005572 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e078      	b.n	8005664 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2290      	movs	r2, #144	; 0x90
 8005576:	2100      	movs	r1, #0
 8005578:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2288      	movs	r2, #136	; 0x88
 800557e:	2121      	movs	r1, #33	; 0x21
 8005580:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005582:	f7fc f869 	bl	8001658 <HAL_GetTick>
 8005586:	0003      	movs	r3, r0
 8005588:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1dba      	adds	r2, r7, #6
 800558e:	2154      	movs	r1, #84	; 0x54
 8005590:	8812      	ldrh	r2, [r2, #0]
 8005592:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	1dba      	adds	r2, r7, #6
 8005598:	2156      	movs	r1, #86	; 0x56
 800559a:	8812      	ldrh	r2, [r2, #0]
 800559c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	2380      	movs	r3, #128	; 0x80
 80055a4:	015b      	lsls	r3, r3, #5
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d108      	bne.n	80055bc <HAL_UART_Transmit+0x98>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d104      	bne.n	80055bc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	e003      	b.n	80055c4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055c4:	e030      	b.n	8005628 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	0013      	movs	r3, r2
 80055d0:	2200      	movs	r2, #0
 80055d2:	2180      	movs	r1, #128	; 0x80
 80055d4:	f000 fc66 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 80055d8:	1e03      	subs	r3, r0, #0
 80055da:	d005      	beq.n	80055e8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2288      	movs	r2, #136	; 0x88
 80055e0:	2120      	movs	r1, #32
 80055e2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e03d      	b.n	8005664 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	001a      	movs	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	05d2      	lsls	r2, r2, #23
 80055fa:	0dd2      	lsrs	r2, r2, #23
 80055fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	3302      	adds	r3, #2
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	e007      	b.n	8005616 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	3301      	adds	r3, #1
 8005614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2256      	movs	r2, #86	; 0x56
 800561a:	5a9b      	ldrh	r3, [r3, r2]
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b299      	uxth	r1, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2256      	movs	r2, #86	; 0x56
 8005626:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2256      	movs	r2, #86	; 0x56
 800562c:	5a9b      	ldrh	r3, [r3, r2]
 800562e:	b29b      	uxth	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1c8      	bne.n	80055c6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	0013      	movs	r3, r2
 800563e:	2200      	movs	r2, #0
 8005640:	2140      	movs	r1, #64	; 0x40
 8005642:	f000 fc2f 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 8005646:	1e03      	subs	r3, r0, #0
 8005648:	d005      	beq.n	8005656 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2288      	movs	r2, #136	; 0x88
 800564e:	2120      	movs	r1, #32
 8005650:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e006      	b.n	8005664 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2288      	movs	r2, #136	; 0x88
 800565a:	2120      	movs	r1, #32
 800565c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	e000      	b.n	8005664 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005662:	2302      	movs	r3, #2
  }
}
 8005664:	0018      	movs	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	b008      	add	sp, #32
 800566a:	bd80      	pop	{r7, pc}

0800566c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800566c:	b5b0      	push	{r4, r5, r7, lr}
 800566e:	b090      	sub	sp, #64	; 0x40
 8005670:	af00      	add	r7, sp, #0
 8005672:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005674:	231a      	movs	r3, #26
 8005676:	2220      	movs	r2, #32
 8005678:	189b      	adds	r3, r3, r2
 800567a:	19db      	adds	r3, r3, r7
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	431a      	orrs	r2, r3
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	431a      	orrs	r2, r3
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	4313      	orrs	r3, r2
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4aaf      	ldr	r2, [pc, #700]	; (800595c <UART_SetConfig+0x2f0>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	0019      	movs	r1, r3
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	430b      	orrs	r3, r1
 80056ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4aaa      	ldr	r2, [pc, #680]	; (8005960 <UART_SetConfig+0x2f4>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	0018      	movs	r0, r3
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	68d9      	ldr	r1, [r3, #12]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	0003      	movs	r3, r0
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4aa4      	ldr	r2, [pc, #656]	; (8005964 <UART_SetConfig+0x2f8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056de:	4313      	orrs	r3, r2
 80056e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4a9f      	ldr	r2, [pc, #636]	; (8005968 <UART_SetConfig+0x2fc>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	0019      	movs	r1, r3
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f4:	430b      	orrs	r3, r1
 80056f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	220f      	movs	r2, #15
 8005700:	4393      	bics	r3, r2
 8005702:	0018      	movs	r0, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	0003      	movs	r3, r0
 800570e:	430b      	orrs	r3, r1
 8005710:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a95      	ldr	r2, [pc, #596]	; (800596c <UART_SetConfig+0x300>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d131      	bne.n	8005780 <UART_SetConfig+0x114>
 800571c:	4b94      	ldr	r3, [pc, #592]	; (8005970 <UART_SetConfig+0x304>)
 800571e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005720:	2203      	movs	r2, #3
 8005722:	4013      	ands	r3, r2
 8005724:	2b03      	cmp	r3, #3
 8005726:	d01d      	beq.n	8005764 <UART_SetConfig+0xf8>
 8005728:	d823      	bhi.n	8005772 <UART_SetConfig+0x106>
 800572a:	2b02      	cmp	r3, #2
 800572c:	d00c      	beq.n	8005748 <UART_SetConfig+0xdc>
 800572e:	d820      	bhi.n	8005772 <UART_SetConfig+0x106>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <UART_SetConfig+0xce>
 8005734:	2b01      	cmp	r3, #1
 8005736:	d00e      	beq.n	8005756 <UART_SetConfig+0xea>
 8005738:	e01b      	b.n	8005772 <UART_SetConfig+0x106>
 800573a:	231b      	movs	r3, #27
 800573c:	2220      	movs	r2, #32
 800573e:	189b      	adds	r3, r3, r2
 8005740:	19db      	adds	r3, r3, r7
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e0b4      	b.n	80058b2 <UART_SetConfig+0x246>
 8005748:	231b      	movs	r3, #27
 800574a:	2220      	movs	r2, #32
 800574c:	189b      	adds	r3, r3, r2
 800574e:	19db      	adds	r3, r3, r7
 8005750:	2202      	movs	r2, #2
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	e0ad      	b.n	80058b2 <UART_SetConfig+0x246>
 8005756:	231b      	movs	r3, #27
 8005758:	2220      	movs	r2, #32
 800575a:	189b      	adds	r3, r3, r2
 800575c:	19db      	adds	r3, r3, r7
 800575e:	2204      	movs	r2, #4
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e0a6      	b.n	80058b2 <UART_SetConfig+0x246>
 8005764:	231b      	movs	r3, #27
 8005766:	2220      	movs	r2, #32
 8005768:	189b      	adds	r3, r3, r2
 800576a:	19db      	adds	r3, r3, r7
 800576c:	2208      	movs	r2, #8
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	e09f      	b.n	80058b2 <UART_SetConfig+0x246>
 8005772:	231b      	movs	r3, #27
 8005774:	2220      	movs	r2, #32
 8005776:	189b      	adds	r3, r3, r2
 8005778:	19db      	adds	r3, r3, r7
 800577a:	2210      	movs	r2, #16
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e098      	b.n	80058b2 <UART_SetConfig+0x246>
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a7b      	ldr	r2, [pc, #492]	; (8005974 <UART_SetConfig+0x308>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d131      	bne.n	80057ee <UART_SetConfig+0x182>
 800578a:	4b79      	ldr	r3, [pc, #484]	; (8005970 <UART_SetConfig+0x304>)
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	220c      	movs	r2, #12
 8005790:	4013      	ands	r3, r2
 8005792:	2b0c      	cmp	r3, #12
 8005794:	d01d      	beq.n	80057d2 <UART_SetConfig+0x166>
 8005796:	d823      	bhi.n	80057e0 <UART_SetConfig+0x174>
 8005798:	2b08      	cmp	r3, #8
 800579a:	d00c      	beq.n	80057b6 <UART_SetConfig+0x14a>
 800579c:	d820      	bhi.n	80057e0 <UART_SetConfig+0x174>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <UART_SetConfig+0x13c>
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d00e      	beq.n	80057c4 <UART_SetConfig+0x158>
 80057a6:	e01b      	b.n	80057e0 <UART_SetConfig+0x174>
 80057a8:	231b      	movs	r3, #27
 80057aa:	2220      	movs	r2, #32
 80057ac:	189b      	adds	r3, r3, r2
 80057ae:	19db      	adds	r3, r3, r7
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	e07d      	b.n	80058b2 <UART_SetConfig+0x246>
 80057b6:	231b      	movs	r3, #27
 80057b8:	2220      	movs	r2, #32
 80057ba:	189b      	adds	r3, r3, r2
 80057bc:	19db      	adds	r3, r3, r7
 80057be:	2202      	movs	r2, #2
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e076      	b.n	80058b2 <UART_SetConfig+0x246>
 80057c4:	231b      	movs	r3, #27
 80057c6:	2220      	movs	r2, #32
 80057c8:	189b      	adds	r3, r3, r2
 80057ca:	19db      	adds	r3, r3, r7
 80057cc:	2204      	movs	r2, #4
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e06f      	b.n	80058b2 <UART_SetConfig+0x246>
 80057d2:	231b      	movs	r3, #27
 80057d4:	2220      	movs	r2, #32
 80057d6:	189b      	adds	r3, r3, r2
 80057d8:	19db      	adds	r3, r3, r7
 80057da:	2208      	movs	r2, #8
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e068      	b.n	80058b2 <UART_SetConfig+0x246>
 80057e0:	231b      	movs	r3, #27
 80057e2:	2220      	movs	r2, #32
 80057e4:	189b      	adds	r3, r3, r2
 80057e6:	19db      	adds	r3, r3, r7
 80057e8:	2210      	movs	r2, #16
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	e061      	b.n	80058b2 <UART_SetConfig+0x246>
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a61      	ldr	r2, [pc, #388]	; (8005978 <UART_SetConfig+0x30c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d106      	bne.n	8005806 <UART_SetConfig+0x19a>
 80057f8:	231b      	movs	r3, #27
 80057fa:	2220      	movs	r2, #32
 80057fc:	189b      	adds	r3, r3, r2
 80057fe:	19db      	adds	r3, r3, r7
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e055      	b.n	80058b2 <UART_SetConfig+0x246>
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a5c      	ldr	r2, [pc, #368]	; (800597c <UART_SetConfig+0x310>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d106      	bne.n	800581e <UART_SetConfig+0x1b2>
 8005810:	231b      	movs	r3, #27
 8005812:	2220      	movs	r2, #32
 8005814:	189b      	adds	r3, r3, r2
 8005816:	19db      	adds	r3, r3, r7
 8005818:	2200      	movs	r2, #0
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	e049      	b.n	80058b2 <UART_SetConfig+0x246>
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a50      	ldr	r2, [pc, #320]	; (8005964 <UART_SetConfig+0x2f8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d13e      	bne.n	80058a6 <UART_SetConfig+0x23a>
 8005828:	4b51      	ldr	r3, [pc, #324]	; (8005970 <UART_SetConfig+0x304>)
 800582a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800582c:	23c0      	movs	r3, #192	; 0xc0
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	4013      	ands	r3, r2
 8005832:	22c0      	movs	r2, #192	; 0xc0
 8005834:	0112      	lsls	r2, r2, #4
 8005836:	4293      	cmp	r3, r2
 8005838:	d027      	beq.n	800588a <UART_SetConfig+0x21e>
 800583a:	22c0      	movs	r2, #192	; 0xc0
 800583c:	0112      	lsls	r2, r2, #4
 800583e:	4293      	cmp	r3, r2
 8005840:	d82a      	bhi.n	8005898 <UART_SetConfig+0x22c>
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	0112      	lsls	r2, r2, #4
 8005846:	4293      	cmp	r3, r2
 8005848:	d011      	beq.n	800586e <UART_SetConfig+0x202>
 800584a:	2280      	movs	r2, #128	; 0x80
 800584c:	0112      	lsls	r2, r2, #4
 800584e:	4293      	cmp	r3, r2
 8005850:	d822      	bhi.n	8005898 <UART_SetConfig+0x22c>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <UART_SetConfig+0x1f4>
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	00d2      	lsls	r2, r2, #3
 800585a:	4293      	cmp	r3, r2
 800585c:	d00e      	beq.n	800587c <UART_SetConfig+0x210>
 800585e:	e01b      	b.n	8005898 <UART_SetConfig+0x22c>
 8005860:	231b      	movs	r3, #27
 8005862:	2220      	movs	r2, #32
 8005864:	189b      	adds	r3, r3, r2
 8005866:	19db      	adds	r3, r3, r7
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e021      	b.n	80058b2 <UART_SetConfig+0x246>
 800586e:	231b      	movs	r3, #27
 8005870:	2220      	movs	r2, #32
 8005872:	189b      	adds	r3, r3, r2
 8005874:	19db      	adds	r3, r3, r7
 8005876:	2202      	movs	r2, #2
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e01a      	b.n	80058b2 <UART_SetConfig+0x246>
 800587c:	231b      	movs	r3, #27
 800587e:	2220      	movs	r2, #32
 8005880:	189b      	adds	r3, r3, r2
 8005882:	19db      	adds	r3, r3, r7
 8005884:	2204      	movs	r2, #4
 8005886:	701a      	strb	r2, [r3, #0]
 8005888:	e013      	b.n	80058b2 <UART_SetConfig+0x246>
 800588a:	231b      	movs	r3, #27
 800588c:	2220      	movs	r2, #32
 800588e:	189b      	adds	r3, r3, r2
 8005890:	19db      	adds	r3, r3, r7
 8005892:	2208      	movs	r2, #8
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e00c      	b.n	80058b2 <UART_SetConfig+0x246>
 8005898:	231b      	movs	r3, #27
 800589a:	2220      	movs	r2, #32
 800589c:	189b      	adds	r3, r3, r2
 800589e:	19db      	adds	r3, r3, r7
 80058a0:	2210      	movs	r2, #16
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e005      	b.n	80058b2 <UART_SetConfig+0x246>
 80058a6:	231b      	movs	r3, #27
 80058a8:	2220      	movs	r2, #32
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	19db      	adds	r3, r3, r7
 80058ae:	2210      	movs	r2, #16
 80058b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2b      	ldr	r2, [pc, #172]	; (8005964 <UART_SetConfig+0x2f8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d000      	beq.n	80058be <UART_SetConfig+0x252>
 80058bc:	e0a9      	b.n	8005a12 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058be:	231b      	movs	r3, #27
 80058c0:	2220      	movs	r2, #32
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	19db      	adds	r3, r3, r7
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d015      	beq.n	80058f8 <UART_SetConfig+0x28c>
 80058cc:	dc18      	bgt.n	8005900 <UART_SetConfig+0x294>
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d00d      	beq.n	80058ee <UART_SetConfig+0x282>
 80058d2:	dc15      	bgt.n	8005900 <UART_SetConfig+0x294>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <UART_SetConfig+0x272>
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d005      	beq.n	80058e8 <UART_SetConfig+0x27c>
 80058dc:	e010      	b.n	8005900 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058de:	f7fe fa69 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 80058e2:	0003      	movs	r3, r0
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058e6:	e014      	b.n	8005912 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e8:	4b25      	ldr	r3, [pc, #148]	; (8005980 <UART_SetConfig+0x314>)
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058ec:	e011      	b.n	8005912 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ee:	f7fe f9d5 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 80058f2:	0003      	movs	r3, r0
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058f6:	e00c      	b.n	8005912 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058fe:	e008      	b.n	8005912 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005904:	231a      	movs	r3, #26
 8005906:	2220      	movs	r2, #32
 8005908:	189b      	adds	r3, r3, r2
 800590a:	19db      	adds	r3, r3, r7
 800590c:	2201      	movs	r2, #1
 800590e:	701a      	strb	r2, [r3, #0]
        break;
 8005910:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	2b00      	cmp	r3, #0
 8005916:	d100      	bne.n	800591a <UART_SetConfig+0x2ae>
 8005918:	e14b      	b.n	8005bb2 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800591e:	4b19      	ldr	r3, [pc, #100]	; (8005984 <UART_SetConfig+0x318>)
 8005920:	0052      	lsls	r2, r2, #1
 8005922:	5ad3      	ldrh	r3, [r2, r3]
 8005924:	0019      	movs	r1, r3
 8005926:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005928:	f7fa fbfe 	bl	8000128 <__udivsi3>
 800592c:	0003      	movs	r3, r0
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	0013      	movs	r3, r2
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	189b      	adds	r3, r3, r2
 800593a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593c:	429a      	cmp	r2, r3
 800593e:	d305      	bcc.n	800594c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005948:	429a      	cmp	r2, r3
 800594a:	d91d      	bls.n	8005988 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800594c:	231a      	movs	r3, #26
 800594e:	2220      	movs	r2, #32
 8005950:	189b      	adds	r3, r3, r2
 8005952:	19db      	adds	r3, r3, r7
 8005954:	2201      	movs	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	e12b      	b.n	8005bb2 <UART_SetConfig+0x546>
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	cfff69f3 	.word	0xcfff69f3
 8005960:	ffffcfff 	.word	0xffffcfff
 8005964:	40008000 	.word	0x40008000
 8005968:	11fff4ff 	.word	0x11fff4ff
 800596c:	40013800 	.word	0x40013800
 8005970:	40021000 	.word	0x40021000
 8005974:	40004400 	.word	0x40004400
 8005978:	40004800 	.word	0x40004800
 800597c:	40004c00 	.word	0x40004c00
 8005980:	00f42400 	.word	0x00f42400
 8005984:	08007270 	.word	0x08007270
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005994:	4b92      	ldr	r3, [pc, #584]	; (8005be0 <UART_SetConfig+0x574>)
 8005996:	0052      	lsls	r2, r2, #1
 8005998:	5ad3      	ldrh	r3, [r2, r3]
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	69b8      	ldr	r0, [r7, #24]
 80059a6:	69f9      	ldr	r1, [r7, #28]
 80059a8:	f7fa fd34 	bl	8000414 <__aeabi_uldivmod>
 80059ac:	0002      	movs	r2, r0
 80059ae:	000b      	movs	r3, r1
 80059b0:	0e11      	lsrs	r1, r2, #24
 80059b2:	021d      	lsls	r5, r3, #8
 80059b4:	430d      	orrs	r5, r1
 80059b6:	0214      	lsls	r4, r2, #8
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68b8      	ldr	r0, [r7, #8]
 80059c6:	68f9      	ldr	r1, [r7, #12]
 80059c8:	1900      	adds	r0, r0, r4
 80059ca:	4169      	adcs	r1, r5
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f7fa fd1b 	bl	8000414 <__aeabi_uldivmod>
 80059de:	0002      	movs	r2, r0
 80059e0:	000b      	movs	r3, r1
 80059e2:	0013      	movs	r3, r2
 80059e4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e8:	23c0      	movs	r3, #192	; 0xc0
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d309      	bcc.n	8005a04 <UART_SetConfig+0x398>
 80059f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f2:	2380      	movs	r3, #128	; 0x80
 80059f4:	035b      	lsls	r3, r3, #13
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d204      	bcs.n	8005a04 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	e0d6      	b.n	8005bb2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005a04:	231a      	movs	r3, #26
 8005a06:	2220      	movs	r2, #32
 8005a08:	189b      	adds	r3, r3, r2
 8005a0a:	19db      	adds	r3, r3, r7
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	e0cf      	b.n	8005bb2 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d000      	beq.n	8005a20 <UART_SetConfig+0x3b4>
 8005a1e:	e070      	b.n	8005b02 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005a20:	231b      	movs	r3, #27
 8005a22:	2220      	movs	r2, #32
 8005a24:	189b      	adds	r3, r3, r2
 8005a26:	19db      	adds	r3, r3, r7
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	d015      	beq.n	8005a5a <UART_SetConfig+0x3ee>
 8005a2e:	dc18      	bgt.n	8005a62 <UART_SetConfig+0x3f6>
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d00d      	beq.n	8005a50 <UART_SetConfig+0x3e4>
 8005a34:	dc15      	bgt.n	8005a62 <UART_SetConfig+0x3f6>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <UART_SetConfig+0x3d4>
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d005      	beq.n	8005a4a <UART_SetConfig+0x3de>
 8005a3e:	e010      	b.n	8005a62 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a40:	f7fe f9b8 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8005a44:	0003      	movs	r3, r0
 8005a46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a48:	e014      	b.n	8005a74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a4a:	4b66      	ldr	r3, [pc, #408]	; (8005be4 <UART_SetConfig+0x578>)
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a4e:	e011      	b.n	8005a74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a50:	f7fe f924 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8005a54:	0003      	movs	r3, r0
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a58:	e00c      	b.n	8005a74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5a:	2380      	movs	r3, #128	; 0x80
 8005a5c:	021b      	lsls	r3, r3, #8
 8005a5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a60:	e008      	b.n	8005a74 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005a66:	231a      	movs	r3, #26
 8005a68:	2220      	movs	r2, #32
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	19db      	adds	r3, r3, r7
 8005a6e:	2201      	movs	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]
        break;
 8005a72:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d100      	bne.n	8005a7c <UART_SetConfig+0x410>
 8005a7a:	e09a      	b.n	8005bb2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a80:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <UART_SetConfig+0x574>)
 8005a82:	0052      	lsls	r2, r2, #1
 8005a84:	5ad3      	ldrh	r3, [r2, r3]
 8005a86:	0019      	movs	r1, r3
 8005a88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a8a:	f7fa fb4d 	bl	8000128 <__udivsi3>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	005a      	lsls	r2, r3, #1
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	085b      	lsrs	r3, r3, #1
 8005a98:	18d2      	adds	r2, r2, r3
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	0010      	movs	r0, r2
 8005aa2:	f7fa fb41 	bl	8000128 <__udivsi3>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	2b0f      	cmp	r3, #15
 8005aae:	d921      	bls.n	8005af4 <UART_SetConfig+0x488>
 8005ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	025b      	lsls	r3, r3, #9
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d21c      	bcs.n	8005af4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	200e      	movs	r0, #14
 8005ac0:	2420      	movs	r4, #32
 8005ac2:	1903      	adds	r3, r0, r4
 8005ac4:	19db      	adds	r3, r3, r7
 8005ac6:	210f      	movs	r1, #15
 8005ac8:	438a      	bics	r2, r1
 8005aca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2207      	movs	r2, #7
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	b299      	uxth	r1, r3
 8005ad8:	1903      	adds	r3, r0, r4
 8005ada:	19db      	adds	r3, r3, r7
 8005adc:	1902      	adds	r2, r0, r4
 8005ade:	19d2      	adds	r2, r2, r7
 8005ae0:	8812      	ldrh	r2, [r2, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	1902      	adds	r2, r0, r4
 8005aec:	19d2      	adds	r2, r2, r7
 8005aee:	8812      	ldrh	r2, [r2, #0]
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	e05e      	b.n	8005bb2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005af4:	231a      	movs	r3, #26
 8005af6:	2220      	movs	r2, #32
 8005af8:	189b      	adds	r3, r3, r2
 8005afa:	19db      	adds	r3, r3, r7
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e057      	b.n	8005bb2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b02:	231b      	movs	r3, #27
 8005b04:	2220      	movs	r2, #32
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	19db      	adds	r3, r3, r7
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d015      	beq.n	8005b3c <UART_SetConfig+0x4d0>
 8005b10:	dc18      	bgt.n	8005b44 <UART_SetConfig+0x4d8>
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d00d      	beq.n	8005b32 <UART_SetConfig+0x4c6>
 8005b16:	dc15      	bgt.n	8005b44 <UART_SetConfig+0x4d8>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <UART_SetConfig+0x4b6>
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d005      	beq.n	8005b2c <UART_SetConfig+0x4c0>
 8005b20:	e010      	b.n	8005b44 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b22:	f7fe f947 	bl	8003db4 <HAL_RCC_GetPCLK1Freq>
 8005b26:	0003      	movs	r3, r0
 8005b28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b2a:	e014      	b.n	8005b56 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b2c:	4b2d      	ldr	r3, [pc, #180]	; (8005be4 <UART_SetConfig+0x578>)
 8005b2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b30:	e011      	b.n	8005b56 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b32:	f7fe f8b3 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8005b36:	0003      	movs	r3, r0
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b3a:	e00c      	b.n	8005b56 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b42:	e008      	b.n	8005b56 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b48:	231a      	movs	r3, #26
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	189b      	adds	r3, r3, r2
 8005b4e:	19db      	adds	r3, r3, r7
 8005b50:	2201      	movs	r2, #1
 8005b52:	701a      	strb	r2, [r3, #0]
        break;
 8005b54:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d02a      	beq.n	8005bb2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b60:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <UART_SetConfig+0x574>)
 8005b62:	0052      	lsls	r2, r2, #1
 8005b64:	5ad3      	ldrh	r3, [r2, r3]
 8005b66:	0019      	movs	r1, r3
 8005b68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b6a:	f7fa fadd 	bl	8000128 <__udivsi3>
 8005b6e:	0003      	movs	r3, r0
 8005b70:	001a      	movs	r2, r3
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	18d2      	adds	r2, r2, r3
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	0019      	movs	r1, r3
 8005b80:	0010      	movs	r0, r2
 8005b82:	f7fa fad1 	bl	8000128 <__udivsi3>
 8005b86:	0003      	movs	r3, r0
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	2b0f      	cmp	r3, #15
 8005b8e:	d90a      	bls.n	8005ba6 <UART_SetConfig+0x53a>
 8005b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	025b      	lsls	r3, r3, #9
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d205      	bcs.n	8005ba6 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60da      	str	r2, [r3, #12]
 8005ba4:	e005      	b.n	8005bb2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba6:	231a      	movs	r3, #26
 8005ba8:	2220      	movs	r2, #32
 8005baa:	189b      	adds	r3, r3, r2
 8005bac:	19db      	adds	r3, r3, r7
 8005bae:	2201      	movs	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	226a      	movs	r2, #106	; 0x6a
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	2268      	movs	r2, #104	; 0x68
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	2200      	movs	r2, #0
 8005bcc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005bce:	231a      	movs	r3, #26
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	189b      	adds	r3, r3, r2
 8005bd4:	19db      	adds	r3, r3, r7
 8005bd6:	781b      	ldrb	r3, [r3, #0]
}
 8005bd8:	0018      	movs	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b010      	add	sp, #64	; 0x40
 8005bde:	bdb0      	pop	{r4, r5, r7, pc}
 8005be0:	08007270 	.word	0x08007270
 8005be4:	00f42400 	.word	0x00f42400

08005be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d00b      	beq.n	8005c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a4a      	ldr	r2, [pc, #296]	; (8005d2c <UART_AdvFeatureConfig+0x144>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	0019      	movs	r1, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	2201      	movs	r2, #1
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4a43      	ldr	r2, [pc, #268]	; (8005d30 <UART_AdvFeatureConfig+0x148>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	0019      	movs	r1, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c38:	2202      	movs	r2, #2
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d00b      	beq.n	8005c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4a3b      	ldr	r2, [pc, #236]	; (8005d34 <UART_AdvFeatureConfig+0x14c>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	0019      	movs	r1, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d00b      	beq.n	8005c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4a34      	ldr	r2, [pc, #208]	; (8005d38 <UART_AdvFeatureConfig+0x150>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	2210      	movs	r2, #16
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	4a2c      	ldr	r2, [pc, #176]	; (8005d3c <UART_AdvFeatureConfig+0x154>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	0019      	movs	r1, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d00b      	beq.n	8005cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	4a25      	ldr	r2, [pc, #148]	; (8005d40 <UART_AdvFeatureConfig+0x158>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	0019      	movs	r1, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc0:	2240      	movs	r2, #64	; 0x40
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d01d      	beq.n	8005d02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <UART_AdvFeatureConfig+0x15c>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	035b      	lsls	r3, r3, #13
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d10b      	bne.n	8005d02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <UART_AdvFeatureConfig+0x160>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	0019      	movs	r1, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	2280      	movs	r2, #128	; 0x80
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4a0e      	ldr	r2, [pc, #56]	; (8005d4c <UART_AdvFeatureConfig+0x164>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	0019      	movs	r1, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	ffff7fff 	.word	0xffff7fff
 8005d30:	fffdffff 	.word	0xfffdffff
 8005d34:	fffeffff 	.word	0xfffeffff
 8005d38:	fffbffff 	.word	0xfffbffff
 8005d3c:	ffffefff 	.word	0xffffefff
 8005d40:	ffffdfff 	.word	0xffffdfff
 8005d44:	ffefffff 	.word	0xffefffff
 8005d48:	ff9fffff 	.word	0xff9fffff
 8005d4c:	fff7ffff 	.word	0xfff7ffff

08005d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b092      	sub	sp, #72	; 0x48
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2290      	movs	r2, #144	; 0x90
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d60:	f7fb fc7a 	bl	8001658 <HAL_GetTick>
 8005d64:	0003      	movs	r3, r0
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2208      	movs	r2, #8
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d12d      	bne.n	8005dd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d78:	2280      	movs	r2, #128	; 0x80
 8005d7a:	0391      	lsls	r1, r2, #14
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	4a47      	ldr	r2, [pc, #284]	; (8005e9c <UART_CheckIdleState+0x14c>)
 8005d80:	9200      	str	r2, [sp, #0]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f000 f88e 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 8005d88:	1e03      	subs	r3, r0, #0
 8005d8a:	d022      	beq.n	8005dd2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d96:	2301      	movs	r3, #1
 8005d98:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	f383 8810 	msr	PRIMASK, r3
}
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2180      	movs	r1, #128	; 0x80
 8005dae:	438a      	bics	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2288      	movs	r2, #136	; 0x88
 8005dc2:	2120      	movs	r1, #32
 8005dc4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2284      	movs	r2, #132	; 0x84
 8005dca:	2100      	movs	r1, #0
 8005dcc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e060      	b.n	8005e94 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d146      	bne.n	8005e6e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	2280      	movs	r2, #128	; 0x80
 8005de4:	03d1      	lsls	r1, r2, #15
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4a2c      	ldr	r2, [pc, #176]	; (8005e9c <UART_CheckIdleState+0x14c>)
 8005dea:	9200      	str	r2, [sp, #0]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f000 f859 	bl	8005ea4 <UART_WaitOnFlagUntilTimeout>
 8005df2:	1e03      	subs	r3, r0, #0
 8005df4:	d03b      	beq.n	8005e6e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005e00:	2301      	movs	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f383 8810 	msr	PRIMASK, r3
}
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4922      	ldr	r1, [pc, #136]	; (8005ea0 <UART_CheckIdleState+0x150>)
 8005e18:	400a      	ands	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f383 8810 	msr	PRIMASK, r3
}
 8005e26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e28:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e2e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e30:	633b      	str	r3, [r7, #48]	; 0x30
 8005e32:	2301      	movs	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	f383 8810 	msr	PRIMASK, r3
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2101      	movs	r1, #1
 8005e4a:	438a      	bics	r2, r1
 8005e4c:	609a      	str	r2, [r3, #8]
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	f383 8810 	msr	PRIMASK, r3
}
 8005e58:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	228c      	movs	r2, #140	; 0x8c
 8005e5e:	2120      	movs	r1, #32
 8005e60:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2284      	movs	r2, #132	; 0x84
 8005e66:	2100      	movs	r1, #0
 8005e68:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e012      	b.n	8005e94 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2288      	movs	r2, #136	; 0x88
 8005e72:	2120      	movs	r1, #32
 8005e74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	228c      	movs	r2, #140	; 0x8c
 8005e7a:	2120      	movs	r1, #32
 8005e7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2284      	movs	r2, #132	; 0x84
 8005e8e:	2100      	movs	r1, #0
 8005e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	0018      	movs	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b010      	add	sp, #64	; 0x40
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	01ffffff 	.word	0x01ffffff
 8005ea0:	fffffedf 	.word	0xfffffedf

08005ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	1dfb      	adds	r3, r7, #7
 8005eb2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb4:	e051      	b.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	d04e      	beq.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebc:	f7fb fbcc 	bl	8001658 <HAL_GetTick>
 8005ec0:	0002      	movs	r2, r0
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d302      	bcc.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e051      	b.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2204      	movs	r2, #4
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d03b      	beq.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b80      	cmp	r3, #128	; 0x80
 8005ee6:	d038      	beq.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	d035      	beq.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d111      	bne.n	8005f20 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2208      	movs	r2, #8
 8005f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	0018      	movs	r0, r3
 8005f08:	f000 f83c 	bl	8005f84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2290      	movs	r2, #144	; 0x90
 8005f10:	2108      	movs	r1, #8
 8005f12:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2284      	movs	r2, #132	; 0x84
 8005f18:	2100      	movs	r1, #0
 8005f1a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e02c      	b.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69da      	ldr	r2, [r3, #28]
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	2380      	movs	r3, #128	; 0x80
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d112      	bne.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2280      	movs	r2, #128	; 0x80
 8005f3a:	0112      	lsls	r2, r2, #4
 8005f3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	0018      	movs	r0, r3
 8005f42:	f000 f81f 	bl	8005f84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2290      	movs	r2, #144	; 0x90
 8005f4a:	2120      	movs	r1, #32
 8005f4c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2284      	movs	r2, #132	; 0x84
 8005f52:	2100      	movs	r1, #0
 8005f54:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e00f      	b.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	4013      	ands	r3, r2
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	425a      	negs	r2, r3
 8005f6a:	4153      	adcs	r3, r2
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	001a      	movs	r2, r3
 8005f70:	1dfb      	adds	r3, r7, #7
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d09e      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b004      	add	sp, #16
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08e      	sub	sp, #56	; 0x38
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f90:	617b      	str	r3, [r7, #20]
  return(result);
 8005f92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
 8005f96:	2301      	movs	r3, #1
 8005f98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f383 8810 	msr	PRIMASK, r3
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4926      	ldr	r1, [pc, #152]	; (8006048 <UART_EndRxTransfer+0xc4>)
 8005fae:	400a      	ands	r2, r1
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f383 8810 	msr	PRIMASK, r3
}
 8005fbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc2:	623b      	str	r3, [r7, #32]
  return(result);
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc8:	2301      	movs	r3, #1
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	f383 8810 	msr	PRIMASK, r3
}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	491b      	ldr	r1, [pc, #108]	; (800604c <UART_EndRxTransfer+0xc8>)
 8005fe0:	400a      	ands	r2, r1
 8005fe2:	609a      	str	r2, [r3, #8]
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	f383 8810 	msr	PRIMASK, r3
}
 8005fee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d118      	bne.n	800602a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006002:	2301      	movs	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f383 8810 	msr	PRIMASK, r3
}
 800600c:	46c0      	nop			; (mov r8, r8)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2110      	movs	r1, #16
 800601a:	438a      	bics	r2, r1
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f383 8810 	msr	PRIMASK, r3
}
 8006028:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	228c      	movs	r2, #140	; 0x8c
 800602e:	2120      	movs	r1, #32
 8006030:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	46bd      	mov	sp, r7
 8006042:	b00e      	add	sp, #56	; 0x38
 8006044:	bd80      	pop	{r7, pc}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	fffffedf 	.word	0xfffffedf
 800604c:	effffffe 	.word	0xeffffffe

08006050 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2284      	movs	r2, #132	; 0x84
 800605c:	5c9b      	ldrb	r3, [r3, r2]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_UARTEx_DisableFifoMode+0x16>
 8006062:	2302      	movs	r3, #2
 8006064:	e027      	b.n	80060b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2284      	movs	r2, #132	; 0x84
 800606a:	2101      	movs	r1, #1
 800606c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2288      	movs	r2, #136	; 0x88
 8006072:	2124      	movs	r1, #36	; 0x24
 8006074:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2101      	movs	r1, #1
 800608a:	438a      	bics	r2, r1
 800608c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a0b      	ldr	r2, [pc, #44]	; (80060c0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006092:	4013      	ands	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2288      	movs	r2, #136	; 0x88
 80060a8:	2120      	movs	r1, #32
 80060aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2284      	movs	r2, #132	; 0x84
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b004      	add	sp, #16
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			; (mov r8, r8)
 80060c0:	dfffffff 	.word	0xdfffffff

080060c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2284      	movs	r2, #132	; 0x84
 80060d2:	5c9b      	ldrb	r3, [r3, r2]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060d8:	2302      	movs	r3, #2
 80060da:	e02e      	b.n	800613a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2284      	movs	r2, #132	; 0x84
 80060e0:	2101      	movs	r1, #1
 80060e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2288      	movs	r2, #136	; 0x88
 80060e8:	2124      	movs	r1, #36	; 0x24
 80060ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2101      	movs	r1, #1
 8006100:	438a      	bics	r2, r1
 8006102:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	08d9      	lsrs	r1, r3, #3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	0018      	movs	r0, r3
 800611c:	f000 f854 	bl	80061c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2288      	movs	r2, #136	; 0x88
 800612c:	2120      	movs	r1, #32
 800612e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2284      	movs	r2, #132	; 0x84
 8006134:	2100      	movs	r1, #0
 8006136:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b004      	add	sp, #16
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2284      	movs	r2, #132	; 0x84
 8006152:	5c9b      	ldrb	r3, [r3, r2]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006158:	2302      	movs	r3, #2
 800615a:	e02f      	b.n	80061bc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2284      	movs	r2, #132	; 0x84
 8006160:	2101      	movs	r1, #1
 8006162:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2288      	movs	r2, #136	; 0x88
 8006168:	2124      	movs	r1, #36	; 0x24
 800616a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2101      	movs	r1, #1
 8006180:	438a      	bics	r2, r1
 8006182:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	4a0e      	ldr	r2, [pc, #56]	; (80061c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800618c:	4013      	ands	r3, r2
 800618e:	0019      	movs	r1, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	0018      	movs	r0, r3
 800619e:	f000 f813 	bl	80061c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2288      	movs	r2, #136	; 0x88
 80061ae:	2120      	movs	r1, #32
 80061b0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2284      	movs	r2, #132	; 0x84
 80061b6:	2100      	movs	r1, #0
 80061b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b004      	add	sp, #16
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	f1ffffff 	.word	0xf1ffffff

080061c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d108      	bne.n	80061ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	226a      	movs	r2, #106	; 0x6a
 80061dc:	2101      	movs	r1, #1
 80061de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2268      	movs	r2, #104	; 0x68
 80061e4:	2101      	movs	r1, #1
 80061e6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061e8:	e043      	b.n	8006272 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061ea:	260f      	movs	r6, #15
 80061ec:	19bb      	adds	r3, r7, r6
 80061ee:	2208      	movs	r2, #8
 80061f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061f2:	200e      	movs	r0, #14
 80061f4:	183b      	adds	r3, r7, r0
 80061f6:	2208      	movs	r2, #8
 80061f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	0e5b      	lsrs	r3, r3, #25
 8006202:	b2da      	uxtb	r2, r3
 8006204:	240d      	movs	r4, #13
 8006206:	193b      	adds	r3, r7, r4
 8006208:	2107      	movs	r1, #7
 800620a:	400a      	ands	r2, r1
 800620c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	0f5b      	lsrs	r3, r3, #29
 8006216:	b2da      	uxtb	r2, r3
 8006218:	250c      	movs	r5, #12
 800621a:	197b      	adds	r3, r7, r5
 800621c:	2107      	movs	r1, #7
 800621e:	400a      	ands	r2, r1
 8006220:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006222:	183b      	adds	r3, r7, r0
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	197a      	adds	r2, r7, r5
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	4914      	ldr	r1, [pc, #80]	; (800627c <UARTEx_SetNbDataToProcess+0xb4>)
 800622c:	5c8a      	ldrb	r2, [r1, r2]
 800622e:	435a      	muls	r2, r3
 8006230:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006232:	197b      	adds	r3, r7, r5
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	4a12      	ldr	r2, [pc, #72]	; (8006280 <UARTEx_SetNbDataToProcess+0xb8>)
 8006238:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800623a:	0019      	movs	r1, r3
 800623c:	f7f9 fffe 	bl	800023c <__divsi3>
 8006240:	0003      	movs	r3, r0
 8006242:	b299      	uxth	r1, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	226a      	movs	r2, #106	; 0x6a
 8006248:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624a:	19bb      	adds	r3, r7, r6
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	193a      	adds	r2, r7, r4
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	490a      	ldr	r1, [pc, #40]	; (800627c <UARTEx_SetNbDataToProcess+0xb4>)
 8006254:	5c8a      	ldrb	r2, [r1, r2]
 8006256:	435a      	muls	r2, r3
 8006258:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800625a:	193b      	adds	r3, r7, r4
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	4a08      	ldr	r2, [pc, #32]	; (8006280 <UARTEx_SetNbDataToProcess+0xb8>)
 8006260:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006262:	0019      	movs	r1, r3
 8006264:	f7f9 ffea 	bl	800023c <__divsi3>
 8006268:	0003      	movs	r3, r0
 800626a:	b299      	uxth	r1, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2268      	movs	r2, #104	; 0x68
 8006270:	5299      	strh	r1, [r3, r2]
}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	b005      	add	sp, #20
 8006278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	08007288 	.word	0x08007288
 8006280:	08007290 	.word	0x08007290

08006284 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b087      	sub	sp, #28
 8006288:	af02      	add	r7, sp, #8
 800628a:	0002      	movs	r2, r0
 800628c:	1dfb      	adds	r3, r7, #7
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	1dbb      	adds	r3, r7, #6
 8006292:	1c0a      	adds	r2, r1, #0
 8006294:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8006296:	1dfb      	adds	r3, r7, #7
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <I2C_LCD_ExpanderWrite+0x70>)
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	18d3      	adds	r3, r2, r3
 80062a0:	3301      	adds	r3, #1
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	1dbb      	adds	r3, r7, #6
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	240f      	movs	r4, #15
 80062ae:	193b      	adds	r3, r7, r4
 80062b0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 80062b2:	1dfb      	adds	r3, r7, #7
 80062b4:	781a      	ldrb	r2, [r3, #0]
 80062b6:	4910      	ldr	r1, [pc, #64]	; (80062f8 <I2C_LCD_ExpanderWrite+0x74>)
 80062b8:	0013      	movs	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	189b      	adds	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	18cb      	adds	r3, r1, r3
 80062c2:	3304      	adds	r3, #4
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	1dfb      	adds	r3, r7, #7
 80062c8:	781a      	ldrb	r2, [r3, #0]
 80062ca:	490b      	ldr	r1, [pc, #44]	; (80062f8 <I2C_LCD_ExpanderWrite+0x74>)
 80062cc:	0013      	movs	r3, r2
 80062ce:	005b      	lsls	r3, r3, #1
 80062d0:	189b      	adds	r3, r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	18cb      	adds	r3, r1, r3
 80062d6:	3308      	adds	r3, #8
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	18db      	adds	r3, r3, r3
 80062de:	b299      	uxth	r1, r3
 80062e0:	193a      	adds	r2, r7, r4
 80062e2:	2364      	movs	r3, #100	; 0x64
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	2301      	movs	r3, #1
 80062e8:	f7fc fb6e 	bl	80029c8 <HAL_I2C_Master_Transmit>
}
 80062ec:	46c0      	nop			; (mov r8, r8)
 80062ee:	46bd      	mov	sp, r7
 80062f0:	b005      	add	sp, #20
 80062f2:	bd90      	pop	{r4, r7, pc}
 80062f4:	200002fc 	.word	0x200002fc
 80062f8:	08007298 	.word	0x08007298

080062fc <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80062fc:	b590      	push	{r4, r7, lr}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	0002      	movs	r2, r0
 8006304:	1dfb      	adds	r3, r7, #7
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	1dbb      	adds	r3, r7, #6
 800630a:	1c0a      	adds	r2, r1, #0
 800630c:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 800630e:	1dbb      	adds	r3, r7, #6
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2204      	movs	r2, #4
 8006314:	4313      	orrs	r3, r2
 8006316:	b2da      	uxtb	r2, r3
 8006318:	1dfb      	adds	r3, r7, #7
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	0011      	movs	r1, r2
 800631e:	0018      	movs	r0, r3
 8006320:	f7ff ffb0 	bl	8006284 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8006324:	4b25      	ldr	r3, [pc, #148]	; (80063bc <I2C_LCD_EnPulse+0xc0>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	4b25      	ldr	r3, [pc, #148]	; (80063c0 <I2C_LCD_EnPulse+0xc4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4925      	ldr	r1, [pc, #148]	; (80063c4 <I2C_LCD_EnPulse+0xc8>)
 8006330:	0018      	movs	r0, r3
 8006332:	f7f9 fef9 	bl	8000128 <__udivsi3>
 8006336:	0003      	movs	r3, r0
 8006338:	005c      	lsls	r4, r3, #1
 800633a:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <I2C_LCD_EnPulse+0xc4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4921      	ldr	r1, [pc, #132]	; (80063c4 <I2C_LCD_EnPulse+0xc8>)
 8006340:	0018      	movs	r0, r3
 8006342:	f7f9 fef1 	bl	8000128 <__udivsi3>
 8006346:	0003      	movs	r3, r0
 8006348:	085b      	lsrs	r3, r3, #1
 800634a:	1ae3      	subs	r3, r4, r3
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <I2C_LCD_EnPulse+0xc0>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	429a      	cmp	r2, r3
 800635a:	d8f8      	bhi.n	800634e <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800635c:	1dbb      	adds	r3, r7, #6
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2204      	movs	r2, #4
 8006362:	4393      	bics	r3, r2
 8006364:	b2da      	uxtb	r2, r3
 8006366:	1dfb      	adds	r3, r7, #7
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	0011      	movs	r1, r2
 800636c:	0018      	movs	r0, r3
 800636e:	f7ff ff89 	bl	8006284 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8006372:	4b12      	ldr	r3, [pc, #72]	; (80063bc <I2C_LCD_EnPulse+0xc0>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <I2C_LCD_EnPulse+0xc4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4911      	ldr	r1, [pc, #68]	; (80063c4 <I2C_LCD_EnPulse+0xc8>)
 800637e:	0018      	movs	r0, r3
 8006380:	f7f9 fed2 	bl	8000128 <__udivsi3>
 8006384:	0003      	movs	r3, r0
 8006386:	001a      	movs	r2, r3
 8006388:	2332      	movs	r3, #50	; 0x32
 800638a:	4353      	muls	r3, r2
 800638c:	001c      	movs	r4, r3
 800638e:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <I2C_LCD_EnPulse+0xc4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	490c      	ldr	r1, [pc, #48]	; (80063c4 <I2C_LCD_EnPulse+0xc8>)
 8006394:	0018      	movs	r0, r3
 8006396:	f7f9 fec7 	bl	8000128 <__udivsi3>
 800639a:	0003      	movs	r3, r0
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	1ae3      	subs	r3, r4, r3
 80063a0:	60bb      	str	r3, [r7, #8]
 80063a2:	4b06      	ldr	r3, [pc, #24]	; (80063bc <I2C_LCD_EnPulse+0xc0>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d8f8      	bhi.n	80063a2 <I2C_LCD_EnPulse+0xa6>
}
 80063b0:	46c0      	nop			; (mov r8, r8)
 80063b2:	46c0      	nop			; (mov r8, r8)
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b007      	add	sp, #28
 80063b8:	bd90      	pop	{r4, r7, pc}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	e000e010 	.word	0xe000e010
 80063c0:	20000000 	.word	0x20000000
 80063c4:	000f4240 	.word	0x000f4240

080063c8 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	0002      	movs	r2, r0
 80063d0:	1dfb      	adds	r3, r7, #7
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	1dbb      	adds	r3, r7, #6
 80063d6:	1c0a      	adds	r2, r1, #0
 80063d8:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 80063da:	1dbb      	adds	r3, r7, #6
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	1dfb      	adds	r3, r7, #7
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	0011      	movs	r1, r2
 80063e4:	0018      	movs	r0, r3
 80063e6:	f7ff ff4d 	bl	8006284 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 80063ea:	1dbb      	adds	r3, r7, #6
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	1dfb      	adds	r3, r7, #7
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	0011      	movs	r1, r2
 80063f4:	0018      	movs	r0, r3
 80063f6:	f7ff ff81 	bl	80062fc <I2C_LCD_EnPulse>
}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b002      	add	sp, #8
 8006400:	bd80      	pop	{r7, pc}

08006402 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8006402:	b590      	push	{r4, r7, lr}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	0004      	movs	r4, r0
 800640a:	0008      	movs	r0, r1
 800640c:	0011      	movs	r1, r2
 800640e:	1dfb      	adds	r3, r7, #7
 8006410:	1c22      	adds	r2, r4, #0
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	1dbb      	adds	r3, r7, #6
 8006416:	1c02      	adds	r2, r0, #0
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	1d7b      	adds	r3, r7, #5
 800641c:	1c0a      	adds	r2, r1, #0
 800641e:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 8006420:	200f      	movs	r0, #15
 8006422:	183b      	adds	r3, r7, r0
 8006424:	1dba      	adds	r2, r7, #6
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	210f      	movs	r1, #15
 800642a:	438a      	bics	r2, r1
 800642c:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 800642e:	1dbb      	adds	r3, r7, #6
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	011a      	lsls	r2, r3, #4
 8006434:	240e      	movs	r4, #14
 8006436:	193b      	adds	r3, r7, r4
 8006438:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 800643a:	183a      	adds	r2, r7, r0
 800643c:	1d7b      	adds	r3, r7, #5
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	4313      	orrs	r3, r2
 8006444:	b2da      	uxtb	r2, r3
 8006446:	1dfb      	adds	r3, r7, #7
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	0011      	movs	r1, r2
 800644c:	0018      	movs	r0, r3
 800644e:	f7ff ffbb 	bl	80063c8 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8006452:	193a      	adds	r2, r7, r4
 8006454:	1d7b      	adds	r3, r7, #5
 8006456:	7812      	ldrb	r2, [r2, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	4313      	orrs	r3, r2
 800645c:	b2da      	uxtb	r2, r3
 800645e:	1dfb      	adds	r3, r7, #7
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	0011      	movs	r1, r2
 8006464:	0018      	movs	r0, r3
 8006466:	f7ff ffaf 	bl	80063c8 <I2C_LCD_Write4Bits>
}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b005      	add	sp, #20
 8006470:	bd90      	pop	{r4, r7, pc}

08006472 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	0002      	movs	r2, r0
 800647a:	1dfb      	adds	r3, r7, #7
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	1dbb      	adds	r3, r7, #6
 8006480:	1c0a      	adds	r2, r1, #0
 8006482:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8006484:	1dbb      	adds	r3, r7, #6
 8006486:	7819      	ldrb	r1, [r3, #0]
 8006488:	1dfb      	adds	r3, r7, #7
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2200      	movs	r2, #0
 800648e:	0018      	movs	r0, r3
 8006490:	f7ff ffb7 	bl	8006402 <I2C_LCD_Send>
}
 8006494:	46c0      	nop			; (mov r8, r8)
 8006496:	46bd      	mov	sp, r7
 8006498:	b002      	add	sp, #8
 800649a:	bd80      	pop	{r7, pc}

0800649c <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	0002      	movs	r2, r0
 80064a4:	1dfb      	adds	r3, r7, #7
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	1dbb      	adds	r3, r7, #6
 80064aa:	1c0a      	adds	r2, r1, #0
 80064ac:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80064ae:	1dbb      	adds	r3, r7, #6
 80064b0:	7819      	ldrb	r1, [r3, #0]
 80064b2:	1dfb      	adds	r3, r7, #7
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2201      	movs	r2, #1
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7ff ffa2 	bl	8006402 <I2C_LCD_Send>
}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	46bd      	mov	sp, r7
 80064c2:	b002      	add	sp, #8
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b08b      	sub	sp, #44	; 0x2c
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	0002      	movs	r2, r0
 80064d0:	1dfb      	adds	r3, r7, #7
 80064d2:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80064d4:	46c0      	nop			; (mov r8, r8)
 80064d6:	f7fb f8bf 	bl	8001658 <HAL_GetTick>
 80064da:	0003      	movs	r3, r0
 80064dc:	2b31      	cmp	r3, #49	; 0x31
 80064de:	d9fa      	bls.n	80064d6 <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80064e0:	1dfb      	adds	r3, r7, #7
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2130      	movs	r1, #48	; 0x30
 80064e6:	0018      	movs	r0, r3
 80064e8:	f7ff ffc3 	bl	8006472 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80064ec:	2300      	movs	r3, #0
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
 80064f0:	e025      	b.n	800653e <I2C_LCD_Init+0x76>
 80064f2:	4b57      	ldr	r3, [pc, #348]	; (8006650 <I2C_LCD_Init+0x188>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	4b56      	ldr	r3, [pc, #344]	; (8006654 <I2C_LCD_Init+0x18c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4956      	ldr	r1, [pc, #344]	; (8006658 <I2C_LCD_Init+0x190>)
 80064fe:	0018      	movs	r0, r3
 8006500:	f7f9 fe12 	bl	8000128 <__udivsi3>
 8006504:	0003      	movs	r3, r0
 8006506:	001a      	movs	r2, r3
 8006508:	0013      	movs	r3, r2
 800650a:	015b      	lsls	r3, r3, #5
 800650c:	1a9b      	subs	r3, r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	189b      	adds	r3, r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	001c      	movs	r4, r3
 8006516:	4b4f      	ldr	r3, [pc, #316]	; (8006654 <I2C_LCD_Init+0x18c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	494f      	ldr	r1, [pc, #316]	; (8006658 <I2C_LCD_Init+0x190>)
 800651c:	0018      	movs	r0, r3
 800651e:	f7f9 fe03 	bl	8000128 <__udivsi3>
 8006522:	0003      	movs	r3, r0
 8006524:	085b      	lsrs	r3, r3, #1
 8006526:	1ae3      	subs	r3, r4, r3
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	4b49      	ldr	r3, [pc, #292]	; (8006650 <I2C_LCD_Init+0x188>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	429a      	cmp	r2, r3
 8006536:	d8f8      	bhi.n	800652a <I2C_LCD_Init+0x62>
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	3301      	adds	r3, #1
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	2b04      	cmp	r3, #4
 8006542:	d9d6      	bls.n	80064f2 <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8006544:	1dfb      	adds	r3, r7, #7
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2130      	movs	r1, #48	; 0x30
 800654a:	0018      	movs	r0, r3
 800654c:	f7ff ff91 	bl	8006472 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8006550:	2300      	movs	r3, #0
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	e025      	b.n	80065a2 <I2C_LCD_Init+0xda>
 8006556:	4b3e      	ldr	r3, [pc, #248]	; (8006650 <I2C_LCD_Init+0x188>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	4b3d      	ldr	r3, [pc, #244]	; (8006654 <I2C_LCD_Init+0x18c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	493d      	ldr	r1, [pc, #244]	; (8006658 <I2C_LCD_Init+0x190>)
 8006562:	0018      	movs	r0, r3
 8006564:	f7f9 fde0 	bl	8000128 <__udivsi3>
 8006568:	0003      	movs	r3, r0
 800656a:	001a      	movs	r2, r3
 800656c:	0013      	movs	r3, r2
 800656e:	015b      	lsls	r3, r3, #5
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	189b      	adds	r3, r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	001c      	movs	r4, r3
 800657a:	4b36      	ldr	r3, [pc, #216]	; (8006654 <I2C_LCD_Init+0x18c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4936      	ldr	r1, [pc, #216]	; (8006658 <I2C_LCD_Init+0x190>)
 8006580:	0018      	movs	r0, r3
 8006582:	f7f9 fdd1 	bl	8000128 <__udivsi3>
 8006586:	0003      	movs	r3, r0
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	1ae3      	subs	r3, r4, r3
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	4b30      	ldr	r3, [pc, #192]	; (8006650 <I2C_LCD_Init+0x188>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	429a      	cmp	r2, r3
 800659a:	d8f8      	bhi.n	800658e <I2C_LCD_Init+0xc6>
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	3301      	adds	r3, #1
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d9d6      	bls.n	8006556 <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80065a8:	1dfb      	adds	r3, r7, #7
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2130      	movs	r1, #48	; 0x30
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7ff ff5f 	bl	8006472 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80065b4:	4b26      	ldr	r3, [pc, #152]	; (8006650 <I2C_LCD_Init+0x188>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	61fb      	str	r3, [r7, #28]
 80065ba:	4b26      	ldr	r3, [pc, #152]	; (8006654 <I2C_LCD_Init+0x18c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4926      	ldr	r1, [pc, #152]	; (8006658 <I2C_LCD_Init+0x190>)
 80065c0:	0018      	movs	r0, r3
 80065c2:	f7f9 fdb1 	bl	8000128 <__udivsi3>
 80065c6:	0003      	movs	r3, r0
 80065c8:	001a      	movs	r2, r3
 80065ca:	2396      	movs	r3, #150	; 0x96
 80065cc:	4353      	muls	r3, r2
 80065ce:	001c      	movs	r4, r3
 80065d0:	4b20      	ldr	r3, [pc, #128]	; (8006654 <I2C_LCD_Init+0x18c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4920      	ldr	r1, [pc, #128]	; (8006658 <I2C_LCD_Init+0x190>)
 80065d6:	0018      	movs	r0, r3
 80065d8:	f7f9 fda6 	bl	8000128 <__udivsi3>
 80065dc:	0003      	movs	r3, r0
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	1ae3      	subs	r3, r4, r3
 80065e2:	61bb      	str	r3, [r7, #24]
 80065e4:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <I2C_LCD_Init+0x188>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d8f8      	bhi.n	80065e4 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80065f2:	1dfb      	adds	r3, r7, #7
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2102      	movs	r1, #2
 80065f8:	0018      	movs	r0, r3
 80065fa:	f7ff ff3a 	bl	8006472 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80065fe:	1dfb      	adds	r3, r7, #7
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2128      	movs	r1, #40	; 0x28
 8006604:	0018      	movs	r0, r3
 8006606:	f7ff ff34 	bl	8006472 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 800660a:	1dfb      	adds	r3, r7, #7
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	210c      	movs	r1, #12
 8006610:	0018      	movs	r0, r3
 8006612:	f7ff ff2e 	bl	8006472 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8006616:	1dfb      	adds	r3, r7, #7
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2106      	movs	r1, #6
 800661c:	0018      	movs	r0, r3
 800661e:	f7ff ff28 	bl	8006472 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8006622:	1dfb      	adds	r3, r7, #7
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	4b0d      	ldr	r3, [pc, #52]	; (800665c <I2C_LCD_Init+0x194>)
 8006628:	0052      	lsls	r2, r2, #1
 800662a:	2104      	movs	r1, #4
 800662c:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 800662e:	1dfb      	adds	r3, r7, #7
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	4a0a      	ldr	r2, [pc, #40]	; (800665c <I2C_LCD_Init+0x194>)
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	18d3      	adds	r3, r2, r3
 8006638:	3301      	adds	r3, #1
 800663a:	2208      	movs	r2, #8
 800663c:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 800663e:	1dfb      	adds	r3, r7, #7
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	0018      	movs	r0, r3
 8006644:	f000 f80c 	bl	8006660 <I2C_LCD_Clear>
}
 8006648:	46c0      	nop			; (mov r8, r8)
 800664a:	46bd      	mov	sp, r7
 800664c:	b00b      	add	sp, #44	; 0x2c
 800664e:	bd90      	pop	{r4, r7, pc}
 8006650:	e000e010 	.word	0xe000e010
 8006654:	20000000 	.word	0x20000000
 8006658:	000f4240 	.word	0x000f4240
 800665c:	200002fc 	.word	0x200002fc

08006660 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	0002      	movs	r2, r0
 8006668:	1dfb      	adds	r3, r7, #7
 800666a:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800666c:	1dfb      	adds	r3, r7, #7
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2101      	movs	r1, #1
 8006672:	0018      	movs	r0, r3
 8006674:	f7ff fefd 	bl	8006472 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8006678:	2300      	movs	r3, #0
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	e025      	b.n	80066ca <I2C_LCD_Clear+0x6a>
 800667e:	4b17      	ldr	r3, [pc, #92]	; (80066dc <I2C_LCD_Clear+0x7c>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	4b16      	ldr	r3, [pc, #88]	; (80066e0 <I2C_LCD_Clear+0x80>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4916      	ldr	r1, [pc, #88]	; (80066e4 <I2C_LCD_Clear+0x84>)
 800668a:	0018      	movs	r0, r3
 800668c:	f7f9 fd4c 	bl	8000128 <__udivsi3>
 8006690:	0003      	movs	r3, r0
 8006692:	001a      	movs	r2, r3
 8006694:	0013      	movs	r3, r2
 8006696:	015b      	lsls	r3, r3, #5
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	189b      	adds	r3, r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	001c      	movs	r4, r3
 80066a2:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <I2C_LCD_Clear+0x80>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	490f      	ldr	r1, [pc, #60]	; (80066e4 <I2C_LCD_Clear+0x84>)
 80066a8:	0018      	movs	r0, r3
 80066aa:	f7f9 fd3d 	bl	8000128 <__udivsi3>
 80066ae:	0003      	movs	r3, r0
 80066b0:	085b      	lsrs	r3, r3, #1
 80066b2:	1ae3      	subs	r3, r4, r3
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	4b09      	ldr	r3, [pc, #36]	; (80066dc <I2C_LCD_Clear+0x7c>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d8f8      	bhi.n	80066b6 <I2C_LCD_Clear+0x56>
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	3301      	adds	r3, #1
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d9d6      	bls.n	800667e <I2C_LCD_Clear+0x1e>
}
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	46bd      	mov	sp, r7
 80066d6:	b007      	add	sp, #28
 80066d8:	bd90      	pop	{r4, r7, pc}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	e000e010 	.word	0xe000e010
 80066e0:	20000000 	.word	0x20000000
 80066e4:	000f4240 	.word	0x000f4240

080066e8 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	0004      	movs	r4, r0
 80066f0:	0008      	movs	r0, r1
 80066f2:	0011      	movs	r1, r2
 80066f4:	1dfb      	adds	r3, r7, #7
 80066f6:	1c22      	adds	r2, r4, #0
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	1dbb      	adds	r3, r7, #6
 80066fc:	1c02      	adds	r2, r0, #0
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	1d7b      	adds	r3, r7, #5
 8006702:	1c0a      	adds	r2, r1, #0
 8006704:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8006706:	2308      	movs	r3, #8
 8006708:	18fb      	adds	r3, r7, r3
 800670a:	4a1d      	ldr	r2, [pc, #116]	; (8006780 <I2C_LCD_SetCursor+0x98>)
 800670c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800670e:	c313      	stmia	r3!, {r0, r1, r4}
 8006710:	6812      	ldr	r2, [r2, #0]
 8006712:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8006714:	1dfb      	adds	r3, r7, #7
 8006716:	781a      	ldrb	r2, [r3, #0]
 8006718:	491a      	ldr	r1, [pc, #104]	; (8006784 <I2C_LCD_SetCursor+0x9c>)
 800671a:	0013      	movs	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	189b      	adds	r3, r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	18cb      	adds	r3, r1, r3
 8006724:	330a      	adds	r3, #10
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	1d7a      	adds	r2, r7, #5
 800672a:	7812      	ldrb	r2, [r2, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d90c      	bls.n	800674a <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8006730:	1dfb      	adds	r3, r7, #7
 8006732:	781a      	ldrb	r2, [r3, #0]
 8006734:	4913      	ldr	r1, [pc, #76]	; (8006784 <I2C_LCD_SetCursor+0x9c>)
 8006736:	0013      	movs	r3, r2
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	189b      	adds	r3, r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	18cb      	adds	r3, r1, r3
 8006740:	330a      	adds	r3, #10
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	1d7b      	adds	r3, r7, #5
 8006746:	3a01      	subs	r2, #1
 8006748:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 800674a:	1d7b      	adds	r3, r7, #5
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	2308      	movs	r3, #8
 8006750:	18fb      	adds	r3, r7, r3
 8006752:	0092      	lsls	r2, r2, #2
 8006754:	58d3      	ldr	r3, [r2, r3]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	1dbb      	adds	r3, r7, #6
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	18d3      	adds	r3, r2, r3
 800675e:	b2db      	uxtb	r3, r3
 8006760:	b25b      	sxtb	r3, r3
 8006762:	2280      	movs	r2, #128	; 0x80
 8006764:	4252      	negs	r2, r2
 8006766:	4313      	orrs	r3, r2
 8006768:	b25b      	sxtb	r3, r3
 800676a:	b2da      	uxtb	r2, r3
 800676c:	1dfb      	adds	r3, r7, #7
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	0011      	movs	r1, r2
 8006772:	0018      	movs	r0, r3
 8006774:	f7ff fe7d 	bl	8006472 <I2C_LCD_Cmd>
}
 8006778:	46c0      	nop			; (mov r8, r8)
 800677a:	46bd      	mov	sp, r7
 800677c:	b007      	add	sp, #28
 800677e:	bd90      	pop	{r4, r7, pc}
 8006780:	080071ac 	.word	0x080071ac
 8006784:	08007298 	.word	0x08007298

08006788 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	0002      	movs	r2, r0
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	1dfb      	adds	r3, r7, #7
 8006794:	701a      	strb	r2, [r3, #0]
    while (*Str)
 8006796:	e009      	b.n	80067ac <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	603a      	str	r2, [r7, #0]
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	1dfb      	adds	r3, r7, #7
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	0011      	movs	r1, r2
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7ff fe78 	bl	800649c <I2C_LCD_Data>
    while (*Str)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1f1      	bne.n	8006798 <I2C_LCD_WriteString+0x10>
    }
}
 80067b4:	46c0      	nop			; (mov r8, r8)
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	46bd      	mov	sp, r7
 80067ba:	b002      	add	sp, #8
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <siprintf>:
 80067c0:	b40e      	push	{r1, r2, r3}
 80067c2:	b500      	push	{lr}
 80067c4:	490b      	ldr	r1, [pc, #44]	; (80067f4 <siprintf+0x34>)
 80067c6:	b09c      	sub	sp, #112	; 0x70
 80067c8:	ab1d      	add	r3, sp, #116	; 0x74
 80067ca:	9002      	str	r0, [sp, #8]
 80067cc:	9006      	str	r0, [sp, #24]
 80067ce:	9107      	str	r1, [sp, #28]
 80067d0:	9104      	str	r1, [sp, #16]
 80067d2:	4809      	ldr	r0, [pc, #36]	; (80067f8 <siprintf+0x38>)
 80067d4:	4909      	ldr	r1, [pc, #36]	; (80067fc <siprintf+0x3c>)
 80067d6:	cb04      	ldmia	r3!, {r2}
 80067d8:	9105      	str	r1, [sp, #20]
 80067da:	6800      	ldr	r0, [r0, #0]
 80067dc:	a902      	add	r1, sp, #8
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	f000 f9a2 	bl	8006b28 <_svfiprintf_r>
 80067e4:	2200      	movs	r2, #0
 80067e6:	9b02      	ldr	r3, [sp, #8]
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	b01c      	add	sp, #112	; 0x70
 80067ec:	bc08      	pop	{r3}
 80067ee:	b003      	add	sp, #12
 80067f0:	4718      	bx	r3
 80067f2:	46c0      	nop			; (mov r8, r8)
 80067f4:	7fffffff 	.word	0x7fffffff
 80067f8:	20000058 	.word	0x20000058
 80067fc:	ffff0208 	.word	0xffff0208

08006800 <memset>:
 8006800:	0003      	movs	r3, r0
 8006802:	1882      	adds	r2, r0, r2
 8006804:	4293      	cmp	r3, r2
 8006806:	d100      	bne.n	800680a <memset+0xa>
 8006808:	4770      	bx	lr
 800680a:	7019      	strb	r1, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	e7f9      	b.n	8006804 <memset+0x4>

08006810 <__errno>:
 8006810:	4b01      	ldr	r3, [pc, #4]	; (8006818 <__errno+0x8>)
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	4770      	bx	lr
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	20000058 	.word	0x20000058

0800681c <__libc_init_array>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	2600      	movs	r6, #0
 8006820:	4c0c      	ldr	r4, [pc, #48]	; (8006854 <__libc_init_array+0x38>)
 8006822:	4d0d      	ldr	r5, [pc, #52]	; (8006858 <__libc_init_array+0x3c>)
 8006824:	1b64      	subs	r4, r4, r5
 8006826:	10a4      	asrs	r4, r4, #2
 8006828:	42a6      	cmp	r6, r4
 800682a:	d109      	bne.n	8006840 <__libc_init_array+0x24>
 800682c:	2600      	movs	r6, #0
 800682e:	f000 fc6d 	bl	800710c <_init>
 8006832:	4c0a      	ldr	r4, [pc, #40]	; (800685c <__libc_init_array+0x40>)
 8006834:	4d0a      	ldr	r5, [pc, #40]	; (8006860 <__libc_init_array+0x44>)
 8006836:	1b64      	subs	r4, r4, r5
 8006838:	10a4      	asrs	r4, r4, #2
 800683a:	42a6      	cmp	r6, r4
 800683c:	d105      	bne.n	800684a <__libc_init_array+0x2e>
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	00b3      	lsls	r3, r6, #2
 8006842:	58eb      	ldr	r3, [r5, r3]
 8006844:	4798      	blx	r3
 8006846:	3601      	adds	r6, #1
 8006848:	e7ee      	b.n	8006828 <__libc_init_array+0xc>
 800684a:	00b3      	lsls	r3, r6, #2
 800684c:	58eb      	ldr	r3, [r5, r3]
 800684e:	4798      	blx	r3
 8006850:	3601      	adds	r6, #1
 8006852:	e7f2      	b.n	800683a <__libc_init_array+0x1e>
 8006854:	080072e0 	.word	0x080072e0
 8006858:	080072e0 	.word	0x080072e0
 800685c:	080072e4 	.word	0x080072e4
 8006860:	080072e0 	.word	0x080072e0

08006864 <__retarget_lock_acquire_recursive>:
 8006864:	4770      	bx	lr

08006866 <__retarget_lock_release_recursive>:
 8006866:	4770      	bx	lr

08006868 <_free_r>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	0005      	movs	r5, r0
 800686c:	2900      	cmp	r1, #0
 800686e:	d010      	beq.n	8006892 <_free_r+0x2a>
 8006870:	1f0c      	subs	r4, r1, #4
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	da00      	bge.n	800687a <_free_r+0x12>
 8006878:	18e4      	adds	r4, r4, r3
 800687a:	0028      	movs	r0, r5
 800687c:	f000 f8e2 	bl	8006a44 <__malloc_lock>
 8006880:	4a1d      	ldr	r2, [pc, #116]	; (80068f8 <_free_r+0x90>)
 8006882:	6813      	ldr	r3, [r2, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d105      	bne.n	8006894 <_free_r+0x2c>
 8006888:	6063      	str	r3, [r4, #4]
 800688a:	6014      	str	r4, [r2, #0]
 800688c:	0028      	movs	r0, r5
 800688e:	f000 f8e1 	bl	8006a54 <__malloc_unlock>
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	42a3      	cmp	r3, r4
 8006896:	d908      	bls.n	80068aa <_free_r+0x42>
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	1821      	adds	r1, r4, r0
 800689c:	428b      	cmp	r3, r1
 800689e:	d1f3      	bne.n	8006888 <_free_r+0x20>
 80068a0:	6819      	ldr	r1, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	1809      	adds	r1, r1, r0
 80068a6:	6021      	str	r1, [r4, #0]
 80068a8:	e7ee      	b.n	8006888 <_free_r+0x20>
 80068aa:	001a      	movs	r2, r3
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <_free_r+0x4e>
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	d9f9      	bls.n	80068aa <_free_r+0x42>
 80068b6:	6811      	ldr	r1, [r2, #0]
 80068b8:	1850      	adds	r0, r2, r1
 80068ba:	42a0      	cmp	r0, r4
 80068bc:	d10b      	bne.n	80068d6 <_free_r+0x6e>
 80068be:	6820      	ldr	r0, [r4, #0]
 80068c0:	1809      	adds	r1, r1, r0
 80068c2:	1850      	adds	r0, r2, r1
 80068c4:	6011      	str	r1, [r2, #0]
 80068c6:	4283      	cmp	r3, r0
 80068c8:	d1e0      	bne.n	800688c <_free_r+0x24>
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	1841      	adds	r1, r0, r1
 80068d0:	6011      	str	r1, [r2, #0]
 80068d2:	6053      	str	r3, [r2, #4]
 80068d4:	e7da      	b.n	800688c <_free_r+0x24>
 80068d6:	42a0      	cmp	r0, r4
 80068d8:	d902      	bls.n	80068e0 <_free_r+0x78>
 80068da:	230c      	movs	r3, #12
 80068dc:	602b      	str	r3, [r5, #0]
 80068de:	e7d5      	b.n	800688c <_free_r+0x24>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	1821      	adds	r1, r4, r0
 80068e4:	428b      	cmp	r3, r1
 80068e6:	d103      	bne.n	80068f0 <_free_r+0x88>
 80068e8:	6819      	ldr	r1, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	1809      	adds	r1, r1, r0
 80068ee:	6021      	str	r1, [r4, #0]
 80068f0:	6063      	str	r3, [r4, #4]
 80068f2:	6054      	str	r4, [r2, #4]
 80068f4:	e7ca      	b.n	800688c <_free_r+0x24>
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	20000440 	.word	0x20000440

080068fc <sbrk_aligned>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	4e0f      	ldr	r6, [pc, #60]	; (800693c <sbrk_aligned+0x40>)
 8006900:	000d      	movs	r5, r1
 8006902:	6831      	ldr	r1, [r6, #0]
 8006904:	0004      	movs	r4, r0
 8006906:	2900      	cmp	r1, #0
 8006908:	d102      	bne.n	8006910 <sbrk_aligned+0x14>
 800690a:	f000 fba1 	bl	8007050 <_sbrk_r>
 800690e:	6030      	str	r0, [r6, #0]
 8006910:	0029      	movs	r1, r5
 8006912:	0020      	movs	r0, r4
 8006914:	f000 fb9c 	bl	8007050 <_sbrk_r>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d00a      	beq.n	8006932 <sbrk_aligned+0x36>
 800691c:	2303      	movs	r3, #3
 800691e:	1cc5      	adds	r5, r0, #3
 8006920:	439d      	bics	r5, r3
 8006922:	42a8      	cmp	r0, r5
 8006924:	d007      	beq.n	8006936 <sbrk_aligned+0x3a>
 8006926:	1a29      	subs	r1, r5, r0
 8006928:	0020      	movs	r0, r4
 800692a:	f000 fb91 	bl	8007050 <_sbrk_r>
 800692e:	3001      	adds	r0, #1
 8006930:	d101      	bne.n	8006936 <sbrk_aligned+0x3a>
 8006932:	2501      	movs	r5, #1
 8006934:	426d      	negs	r5, r5
 8006936:	0028      	movs	r0, r5
 8006938:	bd70      	pop	{r4, r5, r6, pc}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	20000444 	.word	0x20000444

08006940 <_malloc_r>:
 8006940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006942:	2203      	movs	r2, #3
 8006944:	1ccb      	adds	r3, r1, #3
 8006946:	4393      	bics	r3, r2
 8006948:	3308      	adds	r3, #8
 800694a:	0006      	movs	r6, r0
 800694c:	001f      	movs	r7, r3
 800694e:	2b0c      	cmp	r3, #12
 8006950:	d238      	bcs.n	80069c4 <_malloc_r+0x84>
 8006952:	270c      	movs	r7, #12
 8006954:	42b9      	cmp	r1, r7
 8006956:	d837      	bhi.n	80069c8 <_malloc_r+0x88>
 8006958:	0030      	movs	r0, r6
 800695a:	f000 f873 	bl	8006a44 <__malloc_lock>
 800695e:	4b38      	ldr	r3, [pc, #224]	; (8006a40 <_malloc_r+0x100>)
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	001c      	movs	r4, r3
 8006966:	2c00      	cmp	r4, #0
 8006968:	d133      	bne.n	80069d2 <_malloc_r+0x92>
 800696a:	0039      	movs	r1, r7
 800696c:	0030      	movs	r0, r6
 800696e:	f7ff ffc5 	bl	80068fc <sbrk_aligned>
 8006972:	0004      	movs	r4, r0
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d15e      	bne.n	8006a36 <_malloc_r+0xf6>
 8006978:	9b00      	ldr	r3, [sp, #0]
 800697a:	681c      	ldr	r4, [r3, #0]
 800697c:	0025      	movs	r5, r4
 800697e:	2d00      	cmp	r5, #0
 8006980:	d14e      	bne.n	8006a20 <_malloc_r+0xe0>
 8006982:	2c00      	cmp	r4, #0
 8006984:	d051      	beq.n	8006a2a <_malloc_r+0xea>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	0029      	movs	r1, r5
 800698a:	18e3      	adds	r3, r4, r3
 800698c:	0030      	movs	r0, r6
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	f000 fb5e 	bl	8007050 <_sbrk_r>
 8006994:	9b01      	ldr	r3, [sp, #4]
 8006996:	4283      	cmp	r3, r0
 8006998:	d147      	bne.n	8006a2a <_malloc_r+0xea>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	0030      	movs	r0, r6
 800699e:	1aff      	subs	r7, r7, r3
 80069a0:	0039      	movs	r1, r7
 80069a2:	f7ff ffab 	bl	80068fc <sbrk_aligned>
 80069a6:	3001      	adds	r0, #1
 80069a8:	d03f      	beq.n	8006a2a <_malloc_r+0xea>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	19db      	adds	r3, r3, r7
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	9b00      	ldr	r3, [sp, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d040      	beq.n	8006a3a <_malloc_r+0xfa>
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	42a2      	cmp	r2, r4
 80069bc:	d133      	bne.n	8006a26 <_malloc_r+0xe6>
 80069be:	2200      	movs	r2, #0
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	e014      	b.n	80069ee <_malloc_r+0xae>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dac5      	bge.n	8006954 <_malloc_r+0x14>
 80069c8:	230c      	movs	r3, #12
 80069ca:	2500      	movs	r5, #0
 80069cc:	6033      	str	r3, [r6, #0]
 80069ce:	0028      	movs	r0, r5
 80069d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069d2:	6821      	ldr	r1, [r4, #0]
 80069d4:	1bc9      	subs	r1, r1, r7
 80069d6:	d420      	bmi.n	8006a1a <_malloc_r+0xda>
 80069d8:	290b      	cmp	r1, #11
 80069da:	d918      	bls.n	8006a0e <_malloc_r+0xce>
 80069dc:	19e2      	adds	r2, r4, r7
 80069de:	6027      	str	r7, [r4, #0]
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	d112      	bne.n	8006a0a <_malloc_r+0xca>
 80069e4:	9b00      	ldr	r3, [sp, #0]
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	6863      	ldr	r3, [r4, #4]
 80069ea:	6011      	str	r1, [r2, #0]
 80069ec:	6053      	str	r3, [r2, #4]
 80069ee:	0030      	movs	r0, r6
 80069f0:	0025      	movs	r5, r4
 80069f2:	f000 f82f 	bl	8006a54 <__malloc_unlock>
 80069f6:	2207      	movs	r2, #7
 80069f8:	350b      	adds	r5, #11
 80069fa:	1d23      	adds	r3, r4, #4
 80069fc:	4395      	bics	r5, r2
 80069fe:	1aea      	subs	r2, r5, r3
 8006a00:	429d      	cmp	r5, r3
 8006a02:	d0e4      	beq.n	80069ce <_malloc_r+0x8e>
 8006a04:	1b5b      	subs	r3, r3, r5
 8006a06:	50a3      	str	r3, [r4, r2]
 8006a08:	e7e1      	b.n	80069ce <_malloc_r+0x8e>
 8006a0a:	605a      	str	r2, [r3, #4]
 8006a0c:	e7ec      	b.n	80069e8 <_malloc_r+0xa8>
 8006a0e:	6862      	ldr	r2, [r4, #4]
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	d1d5      	bne.n	80069c0 <_malloc_r+0x80>
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e7e9      	b.n	80069ee <_malloc_r+0xae>
 8006a1a:	0023      	movs	r3, r4
 8006a1c:	6864      	ldr	r4, [r4, #4]
 8006a1e:	e7a2      	b.n	8006966 <_malloc_r+0x26>
 8006a20:	002c      	movs	r4, r5
 8006a22:	686d      	ldr	r5, [r5, #4]
 8006a24:	e7ab      	b.n	800697e <_malloc_r+0x3e>
 8006a26:	0013      	movs	r3, r2
 8006a28:	e7c4      	b.n	80069b4 <_malloc_r+0x74>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	0030      	movs	r0, r6
 8006a2e:	6033      	str	r3, [r6, #0]
 8006a30:	f000 f810 	bl	8006a54 <__malloc_unlock>
 8006a34:	e7cb      	b.n	80069ce <_malloc_r+0x8e>
 8006a36:	6027      	str	r7, [r4, #0]
 8006a38:	e7d9      	b.n	80069ee <_malloc_r+0xae>
 8006a3a:	605b      	str	r3, [r3, #4]
 8006a3c:	deff      	udf	#255	; 0xff
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	20000440 	.word	0x20000440

08006a44 <__malloc_lock>:
 8006a44:	b510      	push	{r4, lr}
 8006a46:	4802      	ldr	r0, [pc, #8]	; (8006a50 <__malloc_lock+0xc>)
 8006a48:	f7ff ff0c 	bl	8006864 <__retarget_lock_acquire_recursive>
 8006a4c:	bd10      	pop	{r4, pc}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	2000043c 	.word	0x2000043c

08006a54 <__malloc_unlock>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	4802      	ldr	r0, [pc, #8]	; (8006a60 <__malloc_unlock+0xc>)
 8006a58:	f7ff ff05 	bl	8006866 <__retarget_lock_release_recursive>
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	2000043c 	.word	0x2000043c

08006a64 <__ssputs_r>:
 8006a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a66:	b085      	sub	sp, #20
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	9203      	str	r2, [sp, #12]
 8006a6c:	688e      	ldr	r6, [r1, #8]
 8006a6e:	9a01      	ldr	r2, [sp, #4]
 8006a70:	0007      	movs	r7, r0
 8006a72:	000c      	movs	r4, r1
 8006a74:	680b      	ldr	r3, [r1, #0]
 8006a76:	4296      	cmp	r6, r2
 8006a78:	d831      	bhi.n	8006ade <__ssputs_r+0x7a>
 8006a7a:	898a      	ldrh	r2, [r1, #12]
 8006a7c:	2190      	movs	r1, #144	; 0x90
 8006a7e:	00c9      	lsls	r1, r1, #3
 8006a80:	420a      	tst	r2, r1
 8006a82:	d029      	beq.n	8006ad8 <__ssputs_r+0x74>
 8006a84:	2003      	movs	r0, #3
 8006a86:	6921      	ldr	r1, [r4, #16]
 8006a88:	1a5b      	subs	r3, r3, r1
 8006a8a:	9302      	str	r3, [sp, #8]
 8006a8c:	6963      	ldr	r3, [r4, #20]
 8006a8e:	4343      	muls	r3, r0
 8006a90:	0fdd      	lsrs	r5, r3, #31
 8006a92:	18ed      	adds	r5, r5, r3
 8006a94:	9b01      	ldr	r3, [sp, #4]
 8006a96:	9802      	ldr	r0, [sp, #8]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	181b      	adds	r3, r3, r0
 8006a9c:	106d      	asrs	r5, r5, #1
 8006a9e:	42ab      	cmp	r3, r5
 8006aa0:	d900      	bls.n	8006aa4 <__ssputs_r+0x40>
 8006aa2:	001d      	movs	r5, r3
 8006aa4:	0552      	lsls	r2, r2, #21
 8006aa6:	d529      	bpl.n	8006afc <__ssputs_r+0x98>
 8006aa8:	0029      	movs	r1, r5
 8006aaa:	0038      	movs	r0, r7
 8006aac:	f7ff ff48 	bl	8006940 <_malloc_r>
 8006ab0:	1e06      	subs	r6, r0, #0
 8006ab2:	d02d      	beq.n	8006b10 <__ssputs_r+0xac>
 8006ab4:	9a02      	ldr	r2, [sp, #8]
 8006ab6:	6921      	ldr	r1, [r4, #16]
 8006ab8:	f000 fae7 	bl	800708a <memcpy>
 8006abc:	89a2      	ldrh	r2, [r4, #12]
 8006abe:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <__ssputs_r+0xc0>)
 8006ac0:	401a      	ands	r2, r3
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	81a3      	strh	r3, [r4, #12]
 8006ac8:	9b02      	ldr	r3, [sp, #8]
 8006aca:	6126      	str	r6, [r4, #16]
 8006acc:	18f6      	adds	r6, r6, r3
 8006ace:	6026      	str	r6, [r4, #0]
 8006ad0:	6165      	str	r5, [r4, #20]
 8006ad2:	9e01      	ldr	r6, [sp, #4]
 8006ad4:	1aed      	subs	r5, r5, r3
 8006ad6:	60a5      	str	r5, [r4, #8]
 8006ad8:	9b01      	ldr	r3, [sp, #4]
 8006ada:	429e      	cmp	r6, r3
 8006adc:	d900      	bls.n	8006ae0 <__ssputs_r+0x7c>
 8006ade:	9e01      	ldr	r6, [sp, #4]
 8006ae0:	0032      	movs	r2, r6
 8006ae2:	9903      	ldr	r1, [sp, #12]
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	f000 fa9f 	bl	8007028 <memmove>
 8006aea:	2000      	movs	r0, #0
 8006aec:	68a3      	ldr	r3, [r4, #8]
 8006aee:	1b9b      	subs	r3, r3, r6
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	199b      	adds	r3, r3, r6
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	b005      	add	sp, #20
 8006afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afc:	002a      	movs	r2, r5
 8006afe:	0038      	movs	r0, r7
 8006b00:	f000 facc 	bl	800709c <_realloc_r>
 8006b04:	1e06      	subs	r6, r0, #0
 8006b06:	d1df      	bne.n	8006ac8 <__ssputs_r+0x64>
 8006b08:	0038      	movs	r0, r7
 8006b0a:	6921      	ldr	r1, [r4, #16]
 8006b0c:	f7ff feac 	bl	8006868 <_free_r>
 8006b10:	230c      	movs	r3, #12
 8006b12:	2001      	movs	r0, #1
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	89a2      	ldrh	r2, [r4, #12]
 8006b18:	3334      	adds	r3, #52	; 0x34
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	81a3      	strh	r3, [r4, #12]
 8006b1e:	4240      	negs	r0, r0
 8006b20:	e7ea      	b.n	8006af8 <__ssputs_r+0x94>
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	fffffb7f 	.word	0xfffffb7f

08006b28 <_svfiprintf_r>:
 8006b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2a:	b0a1      	sub	sp, #132	; 0x84
 8006b2c:	9003      	str	r0, [sp, #12]
 8006b2e:	001d      	movs	r5, r3
 8006b30:	898b      	ldrh	r3, [r1, #12]
 8006b32:	000f      	movs	r7, r1
 8006b34:	0016      	movs	r6, r2
 8006b36:	061b      	lsls	r3, r3, #24
 8006b38:	d511      	bpl.n	8006b5e <_svfiprintf_r+0x36>
 8006b3a:	690b      	ldr	r3, [r1, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10e      	bne.n	8006b5e <_svfiprintf_r+0x36>
 8006b40:	2140      	movs	r1, #64	; 0x40
 8006b42:	f7ff fefd 	bl	8006940 <_malloc_r>
 8006b46:	6038      	str	r0, [r7, #0]
 8006b48:	6138      	str	r0, [r7, #16]
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d105      	bne.n	8006b5a <_svfiprintf_r+0x32>
 8006b4e:	230c      	movs	r3, #12
 8006b50:	9a03      	ldr	r2, [sp, #12]
 8006b52:	3801      	subs	r0, #1
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	b021      	add	sp, #132	; 0x84
 8006b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5a:	2340      	movs	r3, #64	; 0x40
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	ac08      	add	r4, sp, #32
 8006b62:	6163      	str	r3, [r4, #20]
 8006b64:	3320      	adds	r3, #32
 8006b66:	7663      	strb	r3, [r4, #25]
 8006b68:	3310      	adds	r3, #16
 8006b6a:	76a3      	strb	r3, [r4, #26]
 8006b6c:	9507      	str	r5, [sp, #28]
 8006b6e:	0035      	movs	r5, r6
 8006b70:	782b      	ldrb	r3, [r5, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <_svfiprintf_r+0x52>
 8006b76:	2b25      	cmp	r3, #37	; 0x25
 8006b78:	d148      	bne.n	8006c0c <_svfiprintf_r+0xe4>
 8006b7a:	1bab      	subs	r3, r5, r6
 8006b7c:	9305      	str	r3, [sp, #20]
 8006b7e:	42b5      	cmp	r5, r6
 8006b80:	d00b      	beq.n	8006b9a <_svfiprintf_r+0x72>
 8006b82:	0032      	movs	r2, r6
 8006b84:	0039      	movs	r1, r7
 8006b86:	9803      	ldr	r0, [sp, #12]
 8006b88:	f7ff ff6c 	bl	8006a64 <__ssputs_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d100      	bne.n	8006b92 <_svfiprintf_r+0x6a>
 8006b90:	e0af      	b.n	8006cf2 <_svfiprintf_r+0x1ca>
 8006b92:	6963      	ldr	r3, [r4, #20]
 8006b94:	9a05      	ldr	r2, [sp, #20]
 8006b96:	189b      	adds	r3, r3, r2
 8006b98:	6163      	str	r3, [r4, #20]
 8006b9a:	782b      	ldrb	r3, [r5, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d100      	bne.n	8006ba2 <_svfiprintf_r+0x7a>
 8006ba0:	e0a7      	b.n	8006cf2 <_svfiprintf_r+0x1ca>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4252      	negs	r2, r2
 8006ba8:	6062      	str	r2, [r4, #4]
 8006baa:	a904      	add	r1, sp, #16
 8006bac:	3254      	adds	r2, #84	; 0x54
 8006bae:	1852      	adds	r2, r2, r1
 8006bb0:	1c6e      	adds	r6, r5, #1
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	60e3      	str	r3, [r4, #12]
 8006bb6:	60a3      	str	r3, [r4, #8]
 8006bb8:	7013      	strb	r3, [r2, #0]
 8006bba:	65a3      	str	r3, [r4, #88]	; 0x58
 8006bbc:	4b55      	ldr	r3, [pc, #340]	; (8006d14 <_svfiprintf_r+0x1ec>)
 8006bbe:	2205      	movs	r2, #5
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	7831      	ldrb	r1, [r6, #0]
 8006bc4:	9305      	str	r3, [sp, #20]
 8006bc6:	f000 fa55 	bl	8007074 <memchr>
 8006bca:	1c75      	adds	r5, r6, #1
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d11f      	bne.n	8006c10 <_svfiprintf_r+0xe8>
 8006bd0:	6822      	ldr	r2, [r4, #0]
 8006bd2:	06d3      	lsls	r3, r2, #27
 8006bd4:	d504      	bpl.n	8006be0 <_svfiprintf_r+0xb8>
 8006bd6:	2353      	movs	r3, #83	; 0x53
 8006bd8:	a904      	add	r1, sp, #16
 8006bda:	185b      	adds	r3, r3, r1
 8006bdc:	2120      	movs	r1, #32
 8006bde:	7019      	strb	r1, [r3, #0]
 8006be0:	0713      	lsls	r3, r2, #28
 8006be2:	d504      	bpl.n	8006bee <_svfiprintf_r+0xc6>
 8006be4:	2353      	movs	r3, #83	; 0x53
 8006be6:	a904      	add	r1, sp, #16
 8006be8:	185b      	adds	r3, r3, r1
 8006bea:	212b      	movs	r1, #43	; 0x2b
 8006bec:	7019      	strb	r1, [r3, #0]
 8006bee:	7833      	ldrb	r3, [r6, #0]
 8006bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf2:	d016      	beq.n	8006c22 <_svfiprintf_r+0xfa>
 8006bf4:	0035      	movs	r5, r6
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	200a      	movs	r0, #10
 8006bfa:	68e3      	ldr	r3, [r4, #12]
 8006bfc:	782a      	ldrb	r2, [r5, #0]
 8006bfe:	1c6e      	adds	r6, r5, #1
 8006c00:	3a30      	subs	r2, #48	; 0x30
 8006c02:	2a09      	cmp	r2, #9
 8006c04:	d94e      	bls.n	8006ca4 <_svfiprintf_r+0x17c>
 8006c06:	2900      	cmp	r1, #0
 8006c08:	d111      	bne.n	8006c2e <_svfiprintf_r+0x106>
 8006c0a:	e017      	b.n	8006c3c <_svfiprintf_r+0x114>
 8006c0c:	3501      	adds	r5, #1
 8006c0e:	e7af      	b.n	8006b70 <_svfiprintf_r+0x48>
 8006c10:	9b05      	ldr	r3, [sp, #20]
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	1ac0      	subs	r0, r0, r3
 8006c16:	2301      	movs	r3, #1
 8006c18:	4083      	lsls	r3, r0
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	002e      	movs	r6, r5
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	e7cc      	b.n	8006bbc <_svfiprintf_r+0x94>
 8006c22:	9b07      	ldr	r3, [sp, #28]
 8006c24:	1d19      	adds	r1, r3, #4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	9107      	str	r1, [sp, #28]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	db01      	blt.n	8006c32 <_svfiprintf_r+0x10a>
 8006c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c30:	e004      	b.n	8006c3c <_svfiprintf_r+0x114>
 8006c32:	425b      	negs	r3, r3
 8006c34:	60e3      	str	r3, [r4, #12]
 8006c36:	2302      	movs	r3, #2
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	782b      	ldrb	r3, [r5, #0]
 8006c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c40:	d10a      	bne.n	8006c58 <_svfiprintf_r+0x130>
 8006c42:	786b      	ldrb	r3, [r5, #1]
 8006c44:	2b2a      	cmp	r3, #42	; 0x2a
 8006c46:	d135      	bne.n	8006cb4 <_svfiprintf_r+0x18c>
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	3502      	adds	r5, #2
 8006c4c:	1d1a      	adds	r2, r3, #4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	9207      	str	r2, [sp, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	db2b      	blt.n	8006cae <_svfiprintf_r+0x186>
 8006c56:	9309      	str	r3, [sp, #36]	; 0x24
 8006c58:	4e2f      	ldr	r6, [pc, #188]	; (8006d18 <_svfiprintf_r+0x1f0>)
 8006c5a:	2203      	movs	r2, #3
 8006c5c:	0030      	movs	r0, r6
 8006c5e:	7829      	ldrb	r1, [r5, #0]
 8006c60:	f000 fa08 	bl	8007074 <memchr>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d006      	beq.n	8006c76 <_svfiprintf_r+0x14e>
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	1b80      	subs	r0, r0, r6
 8006c6c:	4083      	lsls	r3, r0
 8006c6e:	6822      	ldr	r2, [r4, #0]
 8006c70:	3501      	adds	r5, #1
 8006c72:	4313      	orrs	r3, r2
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	7829      	ldrb	r1, [r5, #0]
 8006c78:	2206      	movs	r2, #6
 8006c7a:	4828      	ldr	r0, [pc, #160]	; (8006d1c <_svfiprintf_r+0x1f4>)
 8006c7c:	1c6e      	adds	r6, r5, #1
 8006c7e:	7621      	strb	r1, [r4, #24]
 8006c80:	f000 f9f8 	bl	8007074 <memchr>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d03c      	beq.n	8006d02 <_svfiprintf_r+0x1da>
 8006c88:	4b25      	ldr	r3, [pc, #148]	; (8006d20 <_svfiprintf_r+0x1f8>)
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d125      	bne.n	8006cda <_svfiprintf_r+0x1b2>
 8006c8e:	2207      	movs	r2, #7
 8006c90:	9b07      	ldr	r3, [sp, #28]
 8006c92:	3307      	adds	r3, #7
 8006c94:	4393      	bics	r3, r2
 8006c96:	3308      	adds	r3, #8
 8006c98:	9307      	str	r3, [sp, #28]
 8006c9a:	6963      	ldr	r3, [r4, #20]
 8006c9c:	9a04      	ldr	r2, [sp, #16]
 8006c9e:	189b      	adds	r3, r3, r2
 8006ca0:	6163      	str	r3, [r4, #20]
 8006ca2:	e764      	b.n	8006b6e <_svfiprintf_r+0x46>
 8006ca4:	4343      	muls	r3, r0
 8006ca6:	0035      	movs	r5, r6
 8006ca8:	2101      	movs	r1, #1
 8006caa:	189b      	adds	r3, r3, r2
 8006cac:	e7a6      	b.n	8006bfc <_svfiprintf_r+0xd4>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	425b      	negs	r3, r3
 8006cb2:	e7d0      	b.n	8006c56 <_svfiprintf_r+0x12e>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	200a      	movs	r0, #10
 8006cb8:	001a      	movs	r2, r3
 8006cba:	3501      	adds	r5, #1
 8006cbc:	6063      	str	r3, [r4, #4]
 8006cbe:	7829      	ldrb	r1, [r5, #0]
 8006cc0:	1c6e      	adds	r6, r5, #1
 8006cc2:	3930      	subs	r1, #48	; 0x30
 8006cc4:	2909      	cmp	r1, #9
 8006cc6:	d903      	bls.n	8006cd0 <_svfiprintf_r+0x1a8>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0c5      	beq.n	8006c58 <_svfiprintf_r+0x130>
 8006ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cce:	e7c3      	b.n	8006c58 <_svfiprintf_r+0x130>
 8006cd0:	4342      	muls	r2, r0
 8006cd2:	0035      	movs	r5, r6
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	1852      	adds	r2, r2, r1
 8006cd8:	e7f1      	b.n	8006cbe <_svfiprintf_r+0x196>
 8006cda:	aa07      	add	r2, sp, #28
 8006cdc:	9200      	str	r2, [sp, #0]
 8006cde:	0021      	movs	r1, r4
 8006ce0:	003a      	movs	r2, r7
 8006ce2:	4b10      	ldr	r3, [pc, #64]	; (8006d24 <_svfiprintf_r+0x1fc>)
 8006ce4:	9803      	ldr	r0, [sp, #12]
 8006ce6:	e000      	b.n	8006cea <_svfiprintf_r+0x1c2>
 8006ce8:	bf00      	nop
 8006cea:	9004      	str	r0, [sp, #16]
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	d1d3      	bne.n	8006c9a <_svfiprintf_r+0x172>
 8006cf2:	89bb      	ldrh	r3, [r7, #12]
 8006cf4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006cf6:	065b      	lsls	r3, r3, #25
 8006cf8:	d400      	bmi.n	8006cfc <_svfiprintf_r+0x1d4>
 8006cfa:	e72c      	b.n	8006b56 <_svfiprintf_r+0x2e>
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	4240      	negs	r0, r0
 8006d00:	e729      	b.n	8006b56 <_svfiprintf_r+0x2e>
 8006d02:	aa07      	add	r2, sp, #28
 8006d04:	9200      	str	r2, [sp, #0]
 8006d06:	0021      	movs	r1, r4
 8006d08:	003a      	movs	r2, r7
 8006d0a:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <_svfiprintf_r+0x1fc>)
 8006d0c:	9803      	ldr	r0, [sp, #12]
 8006d0e:	f000 f87b 	bl	8006e08 <_printf_i>
 8006d12:	e7ea      	b.n	8006cea <_svfiprintf_r+0x1c2>
 8006d14:	080072a4 	.word	0x080072a4
 8006d18:	080072aa 	.word	0x080072aa
 8006d1c:	080072ae 	.word	0x080072ae
 8006d20:	00000000 	.word	0x00000000
 8006d24:	08006a65 	.word	0x08006a65

08006d28 <_printf_common>:
 8006d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d2a:	0016      	movs	r6, r2
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	688a      	ldr	r2, [r1, #8]
 8006d30:	690b      	ldr	r3, [r1, #16]
 8006d32:	000c      	movs	r4, r1
 8006d34:	9000      	str	r0, [sp, #0]
 8006d36:	4293      	cmp	r3, r2
 8006d38:	da00      	bge.n	8006d3c <_printf_common+0x14>
 8006d3a:	0013      	movs	r3, r2
 8006d3c:	0022      	movs	r2, r4
 8006d3e:	6033      	str	r3, [r6, #0]
 8006d40:	3243      	adds	r2, #67	; 0x43
 8006d42:	7812      	ldrb	r2, [r2, #0]
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	d001      	beq.n	8006d4c <_printf_common+0x24>
 8006d48:	3301      	adds	r3, #1
 8006d4a:	6033      	str	r3, [r6, #0]
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	069b      	lsls	r3, r3, #26
 8006d50:	d502      	bpl.n	8006d58 <_printf_common+0x30>
 8006d52:	6833      	ldr	r3, [r6, #0]
 8006d54:	3302      	adds	r3, #2
 8006d56:	6033      	str	r3, [r6, #0]
 8006d58:	6822      	ldr	r2, [r4, #0]
 8006d5a:	2306      	movs	r3, #6
 8006d5c:	0015      	movs	r5, r2
 8006d5e:	401d      	ands	r5, r3
 8006d60:	421a      	tst	r2, r3
 8006d62:	d027      	beq.n	8006db4 <_printf_common+0x8c>
 8006d64:	0023      	movs	r3, r4
 8006d66:	3343      	adds	r3, #67	; 0x43
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	1e5a      	subs	r2, r3, #1
 8006d6c:	4193      	sbcs	r3, r2
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	0692      	lsls	r2, r2, #26
 8006d72:	d430      	bmi.n	8006dd6 <_printf_common+0xae>
 8006d74:	0022      	movs	r2, r4
 8006d76:	9901      	ldr	r1, [sp, #4]
 8006d78:	9800      	ldr	r0, [sp, #0]
 8006d7a:	9d08      	ldr	r5, [sp, #32]
 8006d7c:	3243      	adds	r2, #67	; 0x43
 8006d7e:	47a8      	blx	r5
 8006d80:	3001      	adds	r0, #1
 8006d82:	d025      	beq.n	8006dd0 <_printf_common+0xa8>
 8006d84:	2206      	movs	r2, #6
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	2500      	movs	r5, #0
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d105      	bne.n	8006d9c <_printf_common+0x74>
 8006d90:	6833      	ldr	r3, [r6, #0]
 8006d92:	68e5      	ldr	r5, [r4, #12]
 8006d94:	1aed      	subs	r5, r5, r3
 8006d96:	43eb      	mvns	r3, r5
 8006d98:	17db      	asrs	r3, r3, #31
 8006d9a:	401d      	ands	r5, r3
 8006d9c:	68a3      	ldr	r3, [r4, #8]
 8006d9e:	6922      	ldr	r2, [r4, #16]
 8006da0:	4293      	cmp	r3, r2
 8006da2:	dd01      	ble.n	8006da8 <_printf_common+0x80>
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	18ed      	adds	r5, r5, r3
 8006da8:	2600      	movs	r6, #0
 8006daa:	42b5      	cmp	r5, r6
 8006dac:	d120      	bne.n	8006df0 <_printf_common+0xc8>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e010      	b.n	8006dd4 <_printf_common+0xac>
 8006db2:	3501      	adds	r5, #1
 8006db4:	68e3      	ldr	r3, [r4, #12]
 8006db6:	6832      	ldr	r2, [r6, #0]
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	42ab      	cmp	r3, r5
 8006dbc:	ddd2      	ble.n	8006d64 <_printf_common+0x3c>
 8006dbe:	0022      	movs	r2, r4
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	9901      	ldr	r1, [sp, #4]
 8006dc4:	9800      	ldr	r0, [sp, #0]
 8006dc6:	9f08      	ldr	r7, [sp, #32]
 8006dc8:	3219      	adds	r2, #25
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d1f0      	bne.n	8006db2 <_printf_common+0x8a>
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	4240      	negs	r0, r0
 8006dd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dd6:	2030      	movs	r0, #48	; 0x30
 8006dd8:	18e1      	adds	r1, r4, r3
 8006dda:	3143      	adds	r1, #67	; 0x43
 8006ddc:	7008      	strb	r0, [r1, #0]
 8006dde:	0021      	movs	r1, r4
 8006de0:	1c5a      	adds	r2, r3, #1
 8006de2:	3145      	adds	r1, #69	; 0x45
 8006de4:	7809      	ldrb	r1, [r1, #0]
 8006de6:	18a2      	adds	r2, r4, r2
 8006de8:	3243      	adds	r2, #67	; 0x43
 8006dea:	3302      	adds	r3, #2
 8006dec:	7011      	strb	r1, [r2, #0]
 8006dee:	e7c1      	b.n	8006d74 <_printf_common+0x4c>
 8006df0:	0022      	movs	r2, r4
 8006df2:	2301      	movs	r3, #1
 8006df4:	9901      	ldr	r1, [sp, #4]
 8006df6:	9800      	ldr	r0, [sp, #0]
 8006df8:	9f08      	ldr	r7, [sp, #32]
 8006dfa:	321a      	adds	r2, #26
 8006dfc:	47b8      	blx	r7
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d0e6      	beq.n	8006dd0 <_printf_common+0xa8>
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7d1      	b.n	8006daa <_printf_common+0x82>
	...

08006e08 <_printf_i>:
 8006e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0a:	b08b      	sub	sp, #44	; 0x2c
 8006e0c:	9206      	str	r2, [sp, #24]
 8006e0e:	000a      	movs	r2, r1
 8006e10:	3243      	adds	r2, #67	; 0x43
 8006e12:	9307      	str	r3, [sp, #28]
 8006e14:	9005      	str	r0, [sp, #20]
 8006e16:	9204      	str	r2, [sp, #16]
 8006e18:	7e0a      	ldrb	r2, [r1, #24]
 8006e1a:	000c      	movs	r4, r1
 8006e1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e1e:	2a78      	cmp	r2, #120	; 0x78
 8006e20:	d809      	bhi.n	8006e36 <_printf_i+0x2e>
 8006e22:	2a62      	cmp	r2, #98	; 0x62
 8006e24:	d80b      	bhi.n	8006e3e <_printf_i+0x36>
 8006e26:	2a00      	cmp	r2, #0
 8006e28:	d100      	bne.n	8006e2c <_printf_i+0x24>
 8006e2a:	e0be      	b.n	8006faa <_printf_i+0x1a2>
 8006e2c:	497c      	ldr	r1, [pc, #496]	; (8007020 <_printf_i+0x218>)
 8006e2e:	9103      	str	r1, [sp, #12]
 8006e30:	2a58      	cmp	r2, #88	; 0x58
 8006e32:	d100      	bne.n	8006e36 <_printf_i+0x2e>
 8006e34:	e093      	b.n	8006f5e <_printf_i+0x156>
 8006e36:	0026      	movs	r6, r4
 8006e38:	3642      	adds	r6, #66	; 0x42
 8006e3a:	7032      	strb	r2, [r6, #0]
 8006e3c:	e022      	b.n	8006e84 <_printf_i+0x7c>
 8006e3e:	0010      	movs	r0, r2
 8006e40:	3863      	subs	r0, #99	; 0x63
 8006e42:	2815      	cmp	r0, #21
 8006e44:	d8f7      	bhi.n	8006e36 <_printf_i+0x2e>
 8006e46:	f7f9 f965 	bl	8000114 <__gnu_thumb1_case_shi>
 8006e4a:	0016      	.short	0x0016
 8006e4c:	fff6001f 	.word	0xfff6001f
 8006e50:	fff6fff6 	.word	0xfff6fff6
 8006e54:	001ffff6 	.word	0x001ffff6
 8006e58:	fff6fff6 	.word	0xfff6fff6
 8006e5c:	fff6fff6 	.word	0xfff6fff6
 8006e60:	003600a3 	.word	0x003600a3
 8006e64:	fff60083 	.word	0xfff60083
 8006e68:	00b4fff6 	.word	0x00b4fff6
 8006e6c:	0036fff6 	.word	0x0036fff6
 8006e70:	fff6fff6 	.word	0xfff6fff6
 8006e74:	0087      	.short	0x0087
 8006e76:	0026      	movs	r6, r4
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	3642      	adds	r6, #66	; 0x42
 8006e7c:	1d11      	adds	r1, r2, #4
 8006e7e:	6019      	str	r1, [r3, #0]
 8006e80:	6813      	ldr	r3, [r2, #0]
 8006e82:	7033      	strb	r3, [r6, #0]
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0a2      	b.n	8006fce <_printf_i+0x1c6>
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	6809      	ldr	r1, [r1, #0]
 8006e8c:	1d02      	adds	r2, r0, #4
 8006e8e:	060d      	lsls	r5, r1, #24
 8006e90:	d50b      	bpl.n	8006eaa <_printf_i+0xa2>
 8006e92:	6805      	ldr	r5, [r0, #0]
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	da03      	bge.n	8006ea2 <_printf_i+0x9a>
 8006e9a:	232d      	movs	r3, #45	; 0x2d
 8006e9c:	9a04      	ldr	r2, [sp, #16]
 8006e9e:	426d      	negs	r5, r5
 8006ea0:	7013      	strb	r3, [r2, #0]
 8006ea2:	4b5f      	ldr	r3, [pc, #380]	; (8007020 <_printf_i+0x218>)
 8006ea4:	270a      	movs	r7, #10
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	e01b      	b.n	8006ee2 <_printf_i+0xda>
 8006eaa:	6805      	ldr	r5, [r0, #0]
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	0649      	lsls	r1, r1, #25
 8006eb0:	d5f1      	bpl.n	8006e96 <_printf_i+0x8e>
 8006eb2:	b22d      	sxth	r5, r5
 8006eb4:	e7ef      	b.n	8006e96 <_printf_i+0x8e>
 8006eb6:	680d      	ldr	r5, [r1, #0]
 8006eb8:	6819      	ldr	r1, [r3, #0]
 8006eba:	1d08      	adds	r0, r1, #4
 8006ebc:	6018      	str	r0, [r3, #0]
 8006ebe:	062e      	lsls	r6, r5, #24
 8006ec0:	d501      	bpl.n	8006ec6 <_printf_i+0xbe>
 8006ec2:	680d      	ldr	r5, [r1, #0]
 8006ec4:	e003      	b.n	8006ece <_printf_i+0xc6>
 8006ec6:	066d      	lsls	r5, r5, #25
 8006ec8:	d5fb      	bpl.n	8006ec2 <_printf_i+0xba>
 8006eca:	680d      	ldr	r5, [r1, #0]
 8006ecc:	b2ad      	uxth	r5, r5
 8006ece:	4b54      	ldr	r3, [pc, #336]	; (8007020 <_printf_i+0x218>)
 8006ed0:	2708      	movs	r7, #8
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	2a6f      	cmp	r2, #111	; 0x6f
 8006ed6:	d000      	beq.n	8006eda <_printf_i+0xd2>
 8006ed8:	3702      	adds	r7, #2
 8006eda:	0023      	movs	r3, r4
 8006edc:	2200      	movs	r2, #0
 8006ede:	3343      	adds	r3, #67	; 0x43
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	6863      	ldr	r3, [r4, #4]
 8006ee4:	60a3      	str	r3, [r4, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	db03      	blt.n	8006ef2 <_printf_i+0xea>
 8006eea:	2104      	movs	r1, #4
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	438a      	bics	r2, r1
 8006ef0:	6022      	str	r2, [r4, #0]
 8006ef2:	2d00      	cmp	r5, #0
 8006ef4:	d102      	bne.n	8006efc <_printf_i+0xf4>
 8006ef6:	9e04      	ldr	r6, [sp, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00c      	beq.n	8006f16 <_printf_i+0x10e>
 8006efc:	9e04      	ldr	r6, [sp, #16]
 8006efe:	0028      	movs	r0, r5
 8006f00:	0039      	movs	r1, r7
 8006f02:	f7f9 f997 	bl	8000234 <__aeabi_uidivmod>
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	3e01      	subs	r6, #1
 8006f0a:	5c5b      	ldrb	r3, [r3, r1]
 8006f0c:	7033      	strb	r3, [r6, #0]
 8006f0e:	002b      	movs	r3, r5
 8006f10:	0005      	movs	r5, r0
 8006f12:	429f      	cmp	r7, r3
 8006f14:	d9f3      	bls.n	8006efe <_printf_i+0xf6>
 8006f16:	2f08      	cmp	r7, #8
 8006f18:	d109      	bne.n	8006f2e <_printf_i+0x126>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	07db      	lsls	r3, r3, #31
 8006f1e:	d506      	bpl.n	8006f2e <_printf_i+0x126>
 8006f20:	6862      	ldr	r2, [r4, #4]
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	dc02      	bgt.n	8006f2e <_printf_i+0x126>
 8006f28:	2330      	movs	r3, #48	; 0x30
 8006f2a:	3e01      	subs	r6, #1
 8006f2c:	7033      	strb	r3, [r6, #0]
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	1b9b      	subs	r3, r3, r6
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	9b07      	ldr	r3, [sp, #28]
 8006f36:	0021      	movs	r1, r4
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	9805      	ldr	r0, [sp, #20]
 8006f3c:	9b06      	ldr	r3, [sp, #24]
 8006f3e:	aa09      	add	r2, sp, #36	; 0x24
 8006f40:	f7ff fef2 	bl	8006d28 <_printf_common>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d147      	bne.n	8006fd8 <_printf_i+0x1d0>
 8006f48:	2001      	movs	r0, #1
 8006f4a:	4240      	negs	r0, r0
 8006f4c:	b00b      	add	sp, #44	; 0x2c
 8006f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f50:	2220      	movs	r2, #32
 8006f52:	6809      	ldr	r1, [r1, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	6022      	str	r2, [r4, #0]
 8006f58:	2278      	movs	r2, #120	; 0x78
 8006f5a:	4932      	ldr	r1, [pc, #200]	; (8007024 <_printf_i+0x21c>)
 8006f5c:	9103      	str	r1, [sp, #12]
 8006f5e:	0021      	movs	r1, r4
 8006f60:	3145      	adds	r1, #69	; 0x45
 8006f62:	700a      	strb	r2, [r1, #0]
 8006f64:	6819      	ldr	r1, [r3, #0]
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	c920      	ldmia	r1!, {r5}
 8006f6a:	0610      	lsls	r0, r2, #24
 8006f6c:	d402      	bmi.n	8006f74 <_printf_i+0x16c>
 8006f6e:	0650      	lsls	r0, r2, #25
 8006f70:	d500      	bpl.n	8006f74 <_printf_i+0x16c>
 8006f72:	b2ad      	uxth	r5, r5
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	07d3      	lsls	r3, r2, #31
 8006f78:	d502      	bpl.n	8006f80 <_printf_i+0x178>
 8006f7a:	2320      	movs	r3, #32
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	2710      	movs	r7, #16
 8006f82:	2d00      	cmp	r5, #0
 8006f84:	d1a9      	bne.n	8006eda <_printf_i+0xd2>
 8006f86:	2220      	movs	r2, #32
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	4393      	bics	r3, r2
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	e7a4      	b.n	8006eda <_printf_i+0xd2>
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	680d      	ldr	r5, [r1, #0]
 8006f94:	1d10      	adds	r0, r2, #4
 8006f96:	6949      	ldr	r1, [r1, #20]
 8006f98:	6018      	str	r0, [r3, #0]
 8006f9a:	6813      	ldr	r3, [r2, #0]
 8006f9c:	062e      	lsls	r6, r5, #24
 8006f9e:	d501      	bpl.n	8006fa4 <_printf_i+0x19c>
 8006fa0:	6019      	str	r1, [r3, #0]
 8006fa2:	e002      	b.n	8006faa <_printf_i+0x1a2>
 8006fa4:	066d      	lsls	r5, r5, #25
 8006fa6:	d5fb      	bpl.n	8006fa0 <_printf_i+0x198>
 8006fa8:	8019      	strh	r1, [r3, #0]
 8006faa:	2300      	movs	r3, #0
 8006fac:	9e04      	ldr	r6, [sp, #16]
 8006fae:	6123      	str	r3, [r4, #16]
 8006fb0:	e7c0      	b.n	8006f34 <_printf_i+0x12c>
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	1d11      	adds	r1, r2, #4
 8006fb6:	6019      	str	r1, [r3, #0]
 8006fb8:	6816      	ldr	r6, [r2, #0]
 8006fba:	2100      	movs	r1, #0
 8006fbc:	0030      	movs	r0, r6
 8006fbe:	6862      	ldr	r2, [r4, #4]
 8006fc0:	f000 f858 	bl	8007074 <memchr>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d001      	beq.n	8006fcc <_printf_i+0x1c4>
 8006fc8:	1b80      	subs	r0, r0, r6
 8006fca:	6060      	str	r0, [r4, #4]
 8006fcc:	6863      	ldr	r3, [r4, #4]
 8006fce:	6123      	str	r3, [r4, #16]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9a04      	ldr	r2, [sp, #16]
 8006fd4:	7013      	strb	r3, [r2, #0]
 8006fd6:	e7ad      	b.n	8006f34 <_printf_i+0x12c>
 8006fd8:	0032      	movs	r2, r6
 8006fda:	6923      	ldr	r3, [r4, #16]
 8006fdc:	9906      	ldr	r1, [sp, #24]
 8006fde:	9805      	ldr	r0, [sp, #20]
 8006fe0:	9d07      	ldr	r5, [sp, #28]
 8006fe2:	47a8      	blx	r5
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d0af      	beq.n	8006f48 <_printf_i+0x140>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	079b      	lsls	r3, r3, #30
 8006fec:	d415      	bmi.n	800701a <_printf_i+0x212>
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	68e0      	ldr	r0, [r4, #12]
 8006ff2:	4298      	cmp	r0, r3
 8006ff4:	daaa      	bge.n	8006f4c <_printf_i+0x144>
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	e7a8      	b.n	8006f4c <_printf_i+0x144>
 8006ffa:	0022      	movs	r2, r4
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	9906      	ldr	r1, [sp, #24]
 8007000:	9805      	ldr	r0, [sp, #20]
 8007002:	9e07      	ldr	r6, [sp, #28]
 8007004:	3219      	adds	r2, #25
 8007006:	47b0      	blx	r6
 8007008:	3001      	adds	r0, #1
 800700a:	d09d      	beq.n	8006f48 <_printf_i+0x140>
 800700c:	3501      	adds	r5, #1
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	42ab      	cmp	r3, r5
 8007016:	dcf0      	bgt.n	8006ffa <_printf_i+0x1f2>
 8007018:	e7e9      	b.n	8006fee <_printf_i+0x1e6>
 800701a:	2500      	movs	r5, #0
 800701c:	e7f7      	b.n	800700e <_printf_i+0x206>
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	080072b5 	.word	0x080072b5
 8007024:	080072c6 	.word	0x080072c6

08007028 <memmove>:
 8007028:	b510      	push	{r4, lr}
 800702a:	4288      	cmp	r0, r1
 800702c:	d902      	bls.n	8007034 <memmove+0xc>
 800702e:	188b      	adds	r3, r1, r2
 8007030:	4298      	cmp	r0, r3
 8007032:	d303      	bcc.n	800703c <memmove+0x14>
 8007034:	2300      	movs	r3, #0
 8007036:	e007      	b.n	8007048 <memmove+0x20>
 8007038:	5c8b      	ldrb	r3, [r1, r2]
 800703a:	5483      	strb	r3, [r0, r2]
 800703c:	3a01      	subs	r2, #1
 800703e:	d2fb      	bcs.n	8007038 <memmove+0x10>
 8007040:	bd10      	pop	{r4, pc}
 8007042:	5ccc      	ldrb	r4, [r1, r3]
 8007044:	54c4      	strb	r4, [r0, r3]
 8007046:	3301      	adds	r3, #1
 8007048:	429a      	cmp	r2, r3
 800704a:	d1fa      	bne.n	8007042 <memmove+0x1a>
 800704c:	e7f8      	b.n	8007040 <memmove+0x18>
	...

08007050 <_sbrk_r>:
 8007050:	2300      	movs	r3, #0
 8007052:	b570      	push	{r4, r5, r6, lr}
 8007054:	4d06      	ldr	r5, [pc, #24]	; (8007070 <_sbrk_r+0x20>)
 8007056:	0004      	movs	r4, r0
 8007058:	0008      	movs	r0, r1
 800705a:	602b      	str	r3, [r5, #0]
 800705c:	f7fa fa1a 	bl	8001494 <_sbrk>
 8007060:	1c43      	adds	r3, r0, #1
 8007062:	d103      	bne.n	800706c <_sbrk_r+0x1c>
 8007064:	682b      	ldr	r3, [r5, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d000      	beq.n	800706c <_sbrk_r+0x1c>
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	bd70      	pop	{r4, r5, r6, pc}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	20000438 	.word	0x20000438

08007074 <memchr>:
 8007074:	b2c9      	uxtb	r1, r1
 8007076:	1882      	adds	r2, r0, r2
 8007078:	4290      	cmp	r0, r2
 800707a:	d101      	bne.n	8007080 <memchr+0xc>
 800707c:	2000      	movs	r0, #0
 800707e:	4770      	bx	lr
 8007080:	7803      	ldrb	r3, [r0, #0]
 8007082:	428b      	cmp	r3, r1
 8007084:	d0fb      	beq.n	800707e <memchr+0xa>
 8007086:	3001      	adds	r0, #1
 8007088:	e7f6      	b.n	8007078 <memchr+0x4>

0800708a <memcpy>:
 800708a:	2300      	movs	r3, #0
 800708c:	b510      	push	{r4, lr}
 800708e:	429a      	cmp	r2, r3
 8007090:	d100      	bne.n	8007094 <memcpy+0xa>
 8007092:	bd10      	pop	{r4, pc}
 8007094:	5ccc      	ldrb	r4, [r1, r3]
 8007096:	54c4      	strb	r4, [r0, r3]
 8007098:	3301      	adds	r3, #1
 800709a:	e7f8      	b.n	800708e <memcpy+0x4>

0800709c <_realloc_r>:
 800709c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800709e:	0007      	movs	r7, r0
 80070a0:	000e      	movs	r6, r1
 80070a2:	0014      	movs	r4, r2
 80070a4:	2900      	cmp	r1, #0
 80070a6:	d105      	bne.n	80070b4 <_realloc_r+0x18>
 80070a8:	0011      	movs	r1, r2
 80070aa:	f7ff fc49 	bl	8006940 <_malloc_r>
 80070ae:	0005      	movs	r5, r0
 80070b0:	0028      	movs	r0, r5
 80070b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	d103      	bne.n	80070c0 <_realloc_r+0x24>
 80070b8:	f7ff fbd6 	bl	8006868 <_free_r>
 80070bc:	0025      	movs	r5, r4
 80070be:	e7f7      	b.n	80070b0 <_realloc_r+0x14>
 80070c0:	f000 f81b 	bl	80070fa <_malloc_usable_size_r>
 80070c4:	9001      	str	r0, [sp, #4]
 80070c6:	4284      	cmp	r4, r0
 80070c8:	d803      	bhi.n	80070d2 <_realloc_r+0x36>
 80070ca:	0035      	movs	r5, r6
 80070cc:	0843      	lsrs	r3, r0, #1
 80070ce:	42a3      	cmp	r3, r4
 80070d0:	d3ee      	bcc.n	80070b0 <_realloc_r+0x14>
 80070d2:	0021      	movs	r1, r4
 80070d4:	0038      	movs	r0, r7
 80070d6:	f7ff fc33 	bl	8006940 <_malloc_r>
 80070da:	1e05      	subs	r5, r0, #0
 80070dc:	d0e8      	beq.n	80070b0 <_realloc_r+0x14>
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	0022      	movs	r2, r4
 80070e2:	429c      	cmp	r4, r3
 80070e4:	d900      	bls.n	80070e8 <_realloc_r+0x4c>
 80070e6:	001a      	movs	r2, r3
 80070e8:	0031      	movs	r1, r6
 80070ea:	0028      	movs	r0, r5
 80070ec:	f7ff ffcd 	bl	800708a <memcpy>
 80070f0:	0031      	movs	r1, r6
 80070f2:	0038      	movs	r0, r7
 80070f4:	f7ff fbb8 	bl	8006868 <_free_r>
 80070f8:	e7da      	b.n	80070b0 <_realloc_r+0x14>

080070fa <_malloc_usable_size_r>:
 80070fa:	1f0b      	subs	r3, r1, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	1f18      	subs	r0, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	da01      	bge.n	8007108 <_malloc_usable_size_r+0xe>
 8007104:	580b      	ldr	r3, [r1, r0]
 8007106:	18c0      	adds	r0, r0, r3
 8007108:	4770      	bx	lr
	...

0800710c <_init>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr

08007118 <_fini>:
 8007118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711a:	46c0      	nop			; (mov r8, r8)
 800711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711e:	bc08      	pop	{r3}
 8007120:	469e      	mov	lr, r3
 8007122:	4770      	bx	lr
